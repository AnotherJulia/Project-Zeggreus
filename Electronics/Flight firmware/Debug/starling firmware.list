
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  08017fe0  08017fe0  00027fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c10  08018c10  00030608  2**0
                  CONTENTS
  4 .ARM          00000008  08018c10  08018c10  00028c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c18  08018c18  00030608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c18  08018c18  00028c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018c1c  08018c1c  00028c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  08018c20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061c8  20000608  08019228  00030608  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200067d0  08019228  000367d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003195c  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000688f  00000000  00000000  00061f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00068828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002078  00000000  00000000  0006ab68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002afb6  00000000  00000000  0006cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002191f  00000000  00000000  00097b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6ec6  00000000  00000000  000b94b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a037b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a808  00000000  00000000  001a03f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000608 	.word	0x20000608
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017fc4 	.word	0x08017fc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000060c 	.word	0x2000060c
 800020c:	08017fc4 	.word	0x08017fc4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f005 fe8a 	bl	8006d08 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f009 fb93 	bl	800a732 <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f009 fe53 	bl	800accc <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f005 fe66 	bl	8006d08 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f005 fe47 	bl	8006d08 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f009 f916 	bl	800a2b8 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f009 fe13 	bl	800accc <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f005 fe26 	bl	8006d08 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f004 fc16 	bl	800593c <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f004 fc0e 	bl	800593c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f004 fc06 	bl	800593c <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	671a      	str	r2, [r3, #112]	; 0x70

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	675a      	str	r2, [r3, #116]	; 0x74



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f004 fbf8 	bl	800593c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f004 fbf0 	bl	800593c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f004 fbe8 	bl	800593c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f004 fbe0 	bl	800593c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f004 fbd8 	bl	800593c <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f004 fbd5 	bl	800593c <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40

080011bc <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	731a      	strb	r2, [r3, #12]
 80011d2:	23a2      	movs	r3, #162	; 0xa2
 80011d4:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f005 fd91 	bl	8006d08 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	f009 fa9a 	bl	800a732 <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800120e:	bf00      	nop
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fd59 	bl	800accc <HAL_SPI_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d1f7      	bne.n	8001210 <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f005 fd6c 	bl	8006d08 <HAL_GPIO_WritePin>

    if (status == 1) {
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b01      	cmp	r3, #1
 8001236:	d13b      	bne.n	80012b0 <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	849a      	strh	r2, [r3, #36]	; 0x24
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	84da      	strh	r2, [r3, #38]	; 0x26
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	851a      	strh	r2, [r3, #40]	; 0x28

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 800126e:	7c3b      	ldrb	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

        // convert units
        LSM_Convert(imu);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f808 	bl	80012c0 <LSM_Convert>

    }

    return status;
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	a367      	add	r3, pc, #412	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc73 	bl	8000c28 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	665a      	str	r2, [r3, #100]	; 0x64
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a35e      	add	r3, pc, #376	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fc60 	bl	8000c28 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	669a      	str	r2, [r3, #104]	; 0x68
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	a354      	add	r3, pc, #336	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f95b 	bl	8000638 <__aeabi_dmul>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc4d 	bl	8000c28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	66da      	str	r2, [r3, #108]	; 0x6c

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a32a      	add	r3, pc, #168	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbf5 	bl	8000c28 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89d 	bl	8000588 <__aeabi_f2d>
 800144e:	a31c      	add	r3, pc, #112	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8f0 	bl	8000638 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LSM_Convert+0x208>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4603      	mov	r3, r0
 800146c:	460c      	mov	r4, r1
 800146e:	4618      	mov	r0, r3
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff fbd9 	bl	8000c28 <__aeabi_d2f>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	a30e      	add	r3, pc, #56	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LSM_Convert+0x208>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fbbd 	bl	8000c28 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	54442eea 	.word	0x54442eea
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	40668000 	.word	0x40668000
 80014cc:	3a92a305 	.word	0x3a92a305
 80014d0:	40239d01 	.word	0x40239d01

080014d4 <LSM_ReadDMA>:

uint8_t LSM_ReadDMA(lsm6dso *imu) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	731a      	strb	r2, [r3, #12]
 80014ea:	23a2      	movs	r3, #162	; 0xa2
 80014ec:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6858      	ldr	r0, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	891b      	ldrh	r3, [r3, #8]
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	f005 fc05 	bl	8006d08 <HAL_GPIO_WritePin>

    if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, imu->rxBuf, 13) == HAL_OK) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f103 0217 	add.w	r2, r3, #23
 8001508:	f107 0118 	add.w	r1, r7, #24
 800150c:	230d      	movs	r3, #13
 800150e:	f009 fab3 	bl	800aa78 <HAL_SPI_TransmitReceive_DMA>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LSM_ReadDMA+0x48>
        return 1;
 8001518:	2301      	movs	r3, #1
 800151a:	e008      	b.n	800152e <LSM_ReadDMA+0x5a>
    }
    else {
        HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6858      	ldr	r0, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	891b      	ldrh	r3, [r3, #8]
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	f005 fbee 	bl	8006d08 <HAL_GPIO_WritePin>
        return 0;
 800152c:	2300      	movs	r3, #0
    }

}
 800152e:	4618      	mov	r0, r3
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LSM_ReadDMA_Complete>:

void LSM_ReadDMA_Complete(lsm6dso *imu) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6858      	ldr	r0, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f005 fbdd 	bl	8006d08 <HAL_GPIO_WritePin>

    imu->rawGyro[0] = (uint16_t) (imu->rxBuf[2] << 8 | imu->rxBuf[1]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e5b      	ldrb	r3, [r3, #25]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e1b      	ldrb	r3, [r3, #24]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	849a      	strh	r2, [r3, #36]	; 0x24
    imu->rawGyro[1] = (uint16_t) (imu->rxBuf[4] << 8 | imu->rxBuf[3]);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7edb      	ldrb	r3, [r3, #27]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e9b      	ldrb	r3, [r3, #26]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	84da      	strh	r2, [r3, #38]	; 0x26
    imu->rawGyro[2] = (uint16_t) (imu->rxBuf[6] << 8 | imu->rxBuf[5]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7f5b      	ldrb	r3, [r3, #29]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7f1b      	ldrb	r3, [r3, #28]
 8001586:	b21b      	sxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b21a      	sxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28

    imu->rawAcc[0] = (uint16_t) (imu->rxBuf[8] << 8 | imu->rxBuf[7]);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7fdb      	ldrb	r3, [r3, #31]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7f9b      	ldrb	r3, [r3, #30]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    imu->rawAcc[1] = (uint16_t) (imu->rxBuf[10] << 8 | imu->rxBuf[9]);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    imu->rawAcc[2] = (uint16_t) (imu->rxBuf[12] << 8 | imu->rxBuf[11]);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    LSM_Convert(imu);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fe6d 	bl	80012c0 <LSM_Convert>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b094      	sub	sp, #80	; 0x50
 80015f2:	af04      	add	r7, sp, #16
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c

    uint8_t txBuf[2] = {0x00, 0x00};
 8001622:	2300      	movs	r3, #0
 8001624:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001628:	2300      	movs	r3, #0
 800162a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	b299      	uxth	r1, r3
 8001638:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	2301      	movs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	220d      	movs	r2, #13
 800164c:	f005 fdc0 	bl	80071d0 <HAL_I2C_Mem_Read>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf0c      	ite	eq
 8001656:	2301      	moveq	r3, #1
 8001658:	2300      	movne	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	b2da      	uxtb	r2, r3
 800165e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001662:	4413      	add	r3, r2
 8001664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 8001668:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800166c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001670:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001674:	2b10      	cmp	r3, #16
 8001676:	d001      	beq.n	800167c <SPL06_Init+0x8e>

        return 0;
 8001678:	2300      	movs	r3, #0
 800167a:	e139      	b.n	80018f0 <SPL06_Init+0x302>

    }
    HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f004 f95d 	bl	800593c <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 8001682:	2390      	movs	r3, #144	; 0x90
 8001684:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	791b      	ldrb	r3, [r3, #4]
 8001690:	b299      	uxth	r1, r3
 8001692:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2313      	movs	r3, #19
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2210      	movs	r2, #16
 80016a6:	f005 fd93 	bl	80071d0 <HAL_I2C_Mem_Read>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016bc:	4413      	add	r3, r2
 80016be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80016c2:	7c3b      	ldrb	r3, [r7, #16]
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	7c7b      	ldrb	r3, [r7, #17]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <SPL06_Init+0x10c>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016ee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80016f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	e002      	b.n	8001700 <SPL06_Init+0x112>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 8001704:	7c7b      	ldrb	r3, [r7, #17]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21b      	sxth	r3, r3
 800170a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800170e:	b21a      	sxth	r2, r3
 8001710:	7cbb      	ldrb	r3, [r7, #18]
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21a      	sxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001722:	b29b      	uxth	r3, r3
 8001724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <SPL06_Init+0x150>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001732:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001736:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800173a:	b21b      	sxth	r3, r3
 800173c:	e002      	b.n	8001744 <SPL06_Init+0x156>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 8001748:	7cfb      	ldrb	r3, [r7, #19]
 800174a:	031a      	lsls	r2, r3, #12
 800174c:	7d3b      	ldrb	r3, [r7, #20]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4313      	orrs	r3, r2
 8001752:	7d7a      	ldrb	r2, [r7, #21]
 8001754:	0912      	lsrs	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	4313      	orrs	r3, r2
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <SPL06_Init+0x18c>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001774:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001778:	e001      	b.n	800177e <SPL06_Init+0x190>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 8001782:	7d7b      	ldrb	r3, [r7, #21]
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800178a:	7dbb      	ldrb	r3, [r7, #22]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	4313      	orrs	r3, r2
 8001790:	7dfa      	ldrb	r2, [r7, #23]
 8001792:	4313      	orrs	r3, r2
 8001794:	461a      	mov	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <SPL06_Init+0x1c6>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80017ae:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80017b2:	e001      	b.n	80017b8 <SPL06_Init+0x1ca>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80017bc:	7e3b      	ldrb	r3, [r7, #24]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	7e7b      	ldrb	r3, [r7, #25]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80017ce:	7ebb      	ldrb	r3, [r7, #26]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	7efb      	ldrb	r3, [r7, #27]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b21a      	sxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80017e0:	7f3b      	ldrb	r3, [r7, #28]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	7f7b      	ldrb	r3, [r7, #29]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80017f2:	7fbb      	ldrb	r3, [r7, #30]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b21a      	sxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 8001804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b21a      	sxth	r2, r3
 800180c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21a      	sxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 800181a:	2019      	movs	r0, #25
 800181c:	f004 f88e 	bl	800593c <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0x33;
 8001820:	2333      	movs	r3, #51	; 0x33
 8001822:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	b299      	uxth	r1, r3
 8001830:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	2301      	movs	r3, #1
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	2206      	movs	r2, #6
 8001844:	f005 fbca 	bl	8006fdc <HAL_I2C_Mem_Write>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	b2da      	uxtb	r2, r3
 8001856:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800185a:	4413      	add	r3, r2
 800185c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 8001860:	200a      	movs	r0, #10
 8001862:	f004 f86b 	bl	800593c <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 8001866:	23b3      	movs	r3, #179	; 0xb3
 8001868:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	b299      	uxth	r1, r3
 8001876:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	2207      	movs	r2, #7
 800188a:	f005 fba7 	bl	8006fdc <HAL_I2C_Mem_Write>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a0:	4413      	add	r3, r2
 80018a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 80018a6:	200a      	movs	r0, #10
 80018a8:	f004 f848 	bl	800593c <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 80018ac:	23ff      	movs	r3, #255	; 0xff
 80018ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	791b      	ldrb	r3, [r3, #4]
 80018ba:	b299      	uxth	r1, r3
 80018bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2301      	movs	r3, #1
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2301      	movs	r3, #1
 80018ce:	2208      	movs	r2, #8
 80018d0:	f005 fb84 	bl	8006fdc <HAL_I2C_Mem_Write>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf0c      	ite	eq
 80018da:	2301      	moveq	r3, #1
 80018dc:	2300      	movne	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018e6:	4413      	add	r3, r2
 80018e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80018ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3740      	adds	r7, #64	; 0x40
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <SPL06_Read>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (POLLING)
 *
 */
void SPL06_Read(SPL06 *bar) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	6078      	str	r0, [r7, #4]

    uint8_t txBuf[7];
    txBuf[0] = 0x00 | 0x80;
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	743b      	strb	r3, [r7, #16]

    uint8_t rxBuf[6];

    //HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x80, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500);
    HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x00, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, 500);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	b299      	uxth	r1, r3
 800190e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2306      	movs	r3, #6
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2301      	movs	r3, #1
 8001920:	2200      	movs	r2, #0
 8001922:	f005 fc55 	bl	80071d0 <HAL_I2C_Mem_Read>

    /* Convert raw to uncalibrated pressure and temperature */
    int32_t pres = ((uint32_t) rxBuf[0] << 16) | ((uint32_t) rxBuf[1] << 8) | ((uint32_t) rxBuf[2]);
 8001926:	7a3b      	ldrb	r3, [r7, #8]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	7a7b      	ldrb	r3, [r7, #9]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	4313      	orrs	r3, r2
 8001930:	7aba      	ldrb	r2, [r7, #10]
 8001932:	4313      	orrs	r3, r2
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
            pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <SPL06_Read+0x50>
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001946:	e000      	b.n	800194a <SPL06_Read+0x52>
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t temp = ((uint32_t) rxBuf[3] << 16) | ((uint32_t) rxBuf[4] << 8) | ((uint32_t) rxBuf[5]);
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	7b3b      	ldrb	r3, [r7, #12]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	4313      	orrs	r3, r2
 8001956:	7b7a      	ldrb	r2, [r7, #13]
 8001958:	4313      	orrs	r3, r2
 800195a:	623b      	str	r3, [r7, #32]
            temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <SPL06_Read+0x76>
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800196c:	e000      	b.n	8001970 <SPL06_Read+0x78>
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	623b      	str	r3, [r7, #32]

    /* Apply calibration */
    float tempRaw = (float) temp / 7864320.0f;
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800197c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001a88 <SPL06_Read+0x190>
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	edc7 7a07 	vstr	s15, [r7, #28]
    bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800199a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    float presRaw   = (float) pres / 7864320.0f;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001a88 <SPL06_Read+0x190>
 80019cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d0:	edc7 7a06 	vstr	s15, [r7, #24]
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a28:	ee37 7a27 	vadd.f32	s14, s14, s15
                    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a5e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	4af00000 	.word	0x4af00000

08001a8c <servo_init>:
#include "servo.h"

void servo_init(Servo *servo, TIM_HandleTypeDef *tim, volatile uint32_t *timerval) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
    servo->timer = tim;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	605a      	str	r2, [r3, #4]
    servo->timerval = timerval;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <servo_writeangle>:


void servo_writeangle(Servo *servo, uint8_t angle) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
    // value between 0 and 180
    uint32_t newtimerval = 1000 + (angle * 1000 / 180);
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <servo_writeangle+0x40>)
 8001ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	11d2      	asrs	r2, r2, #7
 8001ad0:	17db      	asrs	r3, r3, #31
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ad8:	60fb      	str	r3, [r7, #12]
    *servo->timerval = newtimerval;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	b60b60b7 	.word	0xb60b60b7

08001af4 <servo_disable>:

void servo_writemicros(Servo *servo, uint32_t pulse) {
    *servo->timerval = pulse;
}

void servo_disable(Servo *servo) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    *servo->timerval = 0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6858      	ldr	r0, [r3, #4]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	891b      	ldrh	r3, [r3, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f005 f8ed 	bl	8006d08 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	f008 fbbc 	bl	800a2b8 <HAL_SPI_Transmit>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6858      	ldr	r0, [r3, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	891b      	ldrh	r3, [r3, #8]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4619      	mov	r1, r3
 8001b56:	f005 f8d7 	bl	8006d08 <HAL_GPIO_WritePin>
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af02      	add	r7, sp, #8
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6858      	ldr	r0, [r3, #4]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	891b      	ldrh	r3, [r3, #8]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f005 f8c4 	bl	8006d08 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	f008 fdcd 	bl	800a732 <HAL_SPI_TransmitReceive>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6858      	ldr	r0, [r3, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	891b      	ldrh	r3, [r3, #8]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4619      	mov	r1, r3
 8001bae:	f005 f8ab 	bl	8006d08 <HAL_GPIO_WritePin>
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	887a      	ldrh	r2, [r7, #2]
 8001bda:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	4825      	ldr	r0, [pc, #148]	; (8001c78 <sxInit+0xbc>)
 8001be2:	f005 f891 	bl	8006d08 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001be6:	2002      	movs	r0, #2
 8001be8:	f003 fea8 	bl	800593c <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	2140      	movs	r1, #64	; 0x40
 8001bf0:	4821      	ldr	r0, [pc, #132]	; (8001c78 <sxInit+0xbc>)
 8001bf2:	f005 f889 	bl	8006d08 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f003 fea0 	bl	800593c <HAL_Delay>

    SetStandbyRC(radio);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f850 	bl	8001ca2 <SetStandbyRC>
    HAL_Delay(3);
 8001c02:	2003      	movs	r0, #3
 8001c04:	f003 fe9a 	bl	800593c <HAL_Delay>
    setPacketLora(radio);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f875 	bl	8001cf8 <setPacketLora>
    HAL_Delay(2);
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f003 fe94 	bl	800593c <HAL_Delay>
    SetRfFrequency2(radio);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f859 	bl	8001ccc <SetRfFrequency2>
    HAL_Delay(2);
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f003 fe8e 	bl	800593c <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f897 	bl	8001d58 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f003 fe86 	bl	800593c <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001c30:	2301      	movs	r3, #1
 8001c32:	2218      	movs	r2, #24
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f8a8 	bl	8001d8c <SetModulationParams>
    HAL_Delay(1);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f003 fe7d 	bl	800593c <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001c42:	2232      	movs	r2, #50	; 0x32
 8001c44:	f640 1125 	movw	r1, #2341	; 0x925
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fa1f 	bl	800208c <WriteRegisterByte>

    HAL_Delay(1);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f003 fe74 	bl	800593c <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2320      	movs	r3, #32
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	210c      	movs	r1, #12
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f8b3 	bl	8001dce <SetPacketParamsLora>
    HAL_Delay(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f003 fe67 	bl	800593c <HAL_Delay>
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40020400 	.word	0x40020400

08001c7c <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	821a      	strh	r2, [r3, #16]
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	723b      	strb	r3, [r7, #8]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001cb2:	f107 020c 	add.w	r2, r7, #12
 8001cb6:	f107 0108 	add.w	r1, r7, #8
 8001cba:	2302      	movs	r3, #2
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff50 	bl	8001b62 <sxSpiTransmitReceive>
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <SetRfFrequency2+0x28>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001cda:	f107 020c 	add.w	r2, r7, #12
 8001cde:	f107 0108 	add.w	r1, r7, #8
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff3c 	bl	8001b62 <sxSpiTransmitReceive>
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08017fe4 	.word	0x08017fe4

08001cf8 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <setPacketLora+0x28>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	f107 0108 	add.w	r1, r7, #8
 8001d0e:	2302      	movs	r3, #2
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff26 	bl	8001b62 <sxSpiTransmitReceive>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	08017fe8 	.word	0x08017fe8

08001d24 <SetTxParams>:
    WriteRegisterBytes(radio, 0x916, rangingAddress, 4);


}

void SetTxParams(sx1280_custom *radio, uint8_t power, uint8_t rampTime) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
 8001d30:	4613      	mov	r3, r2
 8001d32:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
 8001d34:	238e      	movs	r3, #142	; 0x8e
 8001d36:	723b      	strb	r3, [r7, #8]
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	727b      	strb	r3, [r7, #9]
 8001d3c:	78bb      	ldrb	r3, [r7, #2]
 8001d3e:	72bb      	strb	r3, [r7, #10]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
 8001d40:	f107 020c 	add.w	r2, r7, #12
 8001d44:	f107 0108 	add.w	r1, r7, #8
 8001d48:	2303      	movs	r3, #3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff09 	bl	8001b62 <sxSpiTransmitReceive>
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
 8001d64:	4613      	mov	r3, r2
 8001d66:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001d68:	238f      	movs	r3, #143	; 0x8f
 8001d6a:	723b      	strb	r3, [r7, #8]
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	727b      	strb	r3, [r7, #9]
 8001d70:	78bb      	ldrb	r3, [r7, #2]
 8001d72:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001d74:	f107 020c 	add.w	r2, r7, #12
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff feef 	bl	8001b62 <sxSpiTransmitReceive>
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	70fb      	strb	r3, [r7, #3]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70bb      	strb	r3, [r7, #2]
 8001da2:	4613      	mov	r3, r2
 8001da4:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001da6:	238b      	movs	r3, #139	; 0x8b
 8001da8:	723b      	strb	r3, [r7, #8]
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	727b      	strb	r3, [r7, #9]
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	72bb      	strb	r3, [r7, #10]
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001db6:	f107 020c 	add.w	r2, r7, #12
 8001dba:	f107 0108 	add.w	r1, r7, #8
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fece 	bl	8001b62 <sxSpiTransmitReceive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	4608      	mov	r0, r1
 8001dd8:	4611      	mov	r1, r2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4603      	mov	r3, r0
 8001dde:	70fb      	strb	r3, [r7, #3]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70bb      	strb	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001de8:	238c      	movs	r3, #140	; 0x8c
 8001dea:	723b      	strb	r3, [r7, #8]
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	727b      	strb	r3, [r7, #9]
 8001df0:	78bb      	ldrb	r3, [r7, #2]
 8001df2:	72bb      	strb	r3, [r7, #10]
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	72fb      	strb	r3, [r7, #11]
 8001df8:	7e3b      	ldrb	r3, [r7, #24]
 8001dfa:	733b      	strb	r3, [r7, #12]
 8001dfc:	7f3b      	ldrb	r3, [r7, #28]
 8001dfe:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	2206      	movs	r2, #6
 8001e06:	4619      	mov	r1, r3
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fe81 	bl	8001b10 <sxSpiTransmit>
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <WriteBuffer>:

void WriteBuffer(sx1280_custom *radio, uint8_t offset, uint8_t *data, uint8_t size) {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	461a      	mov	r2, r3
 8001e22:	460b      	mov	r3, r1
 8001e24:	72fb      	strb	r3, [r7, #11]
 8001e26:	4613      	mov	r3, r2
 8001e28:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1A, offset };
 8001e2a:	231a      	movs	r3, #26
 8001e2c:	753b      	strb	r3, [r7, #20]
 8001e2e:	7afb      	ldrb	r3, [r7, #11]
 8001e30:	757b      	strb	r3, [r7, #21]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6858      	ldr	r0, [r3, #4]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	891b      	ldrh	r3, [r3, #8]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f004 ff63 	bl	8006d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	f107 0114 	add.w	r1, r7, #20
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f008 fa32 	bl	800a2b8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	7abb      	ldrb	r3, [r7, #10]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	f008 fa29 	bl	800a2b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6858      	ldr	r0, [r3, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	891b      	ldrh	r3, [r3, #8]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4619      	mov	r1, r3
 8001e72:	f004 ff49 	bl	8006d08 <HAL_GPIO_WritePin>

}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <ReadBuffer>:

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	72fb      	strb	r3, [r7, #11]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001e90:	231b      	movs	r3, #27
 8001e92:	753b      	strb	r3, [r7, #20]
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	757b      	strb	r3, [r7, #21]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6858      	ldr	r0, [r3, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	891b      	ldrh	r3, [r3, #8]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f004 ff2e 	bl	8006d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f107 0114 	add.w	r1, r7, #20
 8001eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f008 f9fd 	bl	800a2b8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	7abb      	ldrb	r3, [r7, #10]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f008 fb28 	bl	800a520 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6858      	ldr	r0, [r3, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	891b      	ldrh	r3, [r3, #8]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f004 ff14 	bl	8006d08 <HAL_GPIO_WritePin>
}
 8001ee0:	bf00      	nop
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	817b      	strh	r3, [r7, #10]
 8001efa:	460b      	mov	r3, r1
 8001efc:	813b      	strh	r3, [r7, #8]
 8001efe:	4613      	mov	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001f02:	238d      	movs	r3, #141	; 0x8d
 8001f04:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001f06:	897b      	ldrh	r3, [r7, #10]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001f10:	897b      	ldrh	r3, [r7, #10]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001f16:	893b      	ldrh	r3, [r7, #8]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001f20:	893b      	ldrh	r3, [r7, #8]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001f36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001f40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	2209      	movs	r2, #9
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fdde 	bl	8001b10 <sxSpiTransmit>
}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001f68:	2397      	movs	r3, #151	; 0x97
 8001f6a:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2203      	movs	r2, #3
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fdc3 	bl	8001b10 <sxSpiTransmit>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <SetTx>:

void SetTx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70fb      	strb	r3, [r7, #3]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X83;
 8001fa2:	2383      	movs	r3, #131	; 0x83
 8001fa4:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001faa:	883b      	ldrh	r3, [r7, #0]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001fb4:	883b      	ldrh	r3, [r7, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fda4 	bl	8001b10 <sxSpiTransmit>
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <SetRx>:

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 8001fe0:	2382      	movs	r3, #130	; 0x82
 8001fe2:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001fe8:	883b      	ldrh	r3, [r7, #0]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001ff2:	883b      	ldrh	r3, [r7, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fd85 	bl	8001b10 <sxSpiTransmit>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8002016:	231d      	movs	r3, #29
 8002018:	723b      	strb	r3, [r7, #8]
 800201a:	2300      	movs	r3, #0
 800201c:	727b      	strb	r3, [r7, #9]
 800201e:	2300      	movs	r3, #0
 8002020:	72bb      	strb	r3, [r7, #10]
 8002022:	2300      	movs	r3, #0
 8002024:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8002026:	f107 020c 	add.w	r2, r7, #12
 800202a:	f107 0108 	add.w	r1, r7, #8
 800202e:	2304      	movs	r3, #4
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fd96 	bl	8001b62 <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8002036:	7bba      	ldrb	r2, [r7, #14]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	b25a      	sxtb	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002056:	eeb1 7a67 	vneg.f32	s14, s15
 800205a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800205e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    radio->snr = ((float) radio->rawSnr)/4;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002076:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800207a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 800209c:	2318      	movs	r3, #24
 800209e:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2204      	movs	r2, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fd27 	bl	8001b10 <sxSpiTransmit>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	0000      	movs	r0, r0
 80020cc:	0000      	movs	r0, r0
	...

080020d0 <encode_TLM>:
#include "main.h"
#include "telemetry.h"
#include "math.h"


void encode_TLM(TLM_decoded *dec, TLM_encoded *enc) {
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    enc->packet_state_bits = (dec->packet_type & (1<<0)) | ((0b00011111 & dec->flight_state) << 1) | ((1 & dec->is_playing_music) << 6) | ((1&dec->is_data_logging) <<7);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	b25a      	sxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80020f2:	b25b      	sxtb	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b25a      	sxtb	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	789b      	ldrb	r3, [r3, #2]
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25a      	sxtb	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	78db      	ldrb	r3, [r3, #3]
 800210e:	01db      	lsls	r3, r3, #7
 8002110:	b25b      	sxtb	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b25b      	sxtb	r3, r3
 8002116:	b2da      	uxtb	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	701a      	strb	r2, [r3, #0]

    enc->pin_states_servo = (dec->pin_states & 0b00111111) | ((dec->servo_state & 0b00000011) << 6);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	b25b      	sxtb	r3, r3
 8002122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002126:	b25a      	sxtb	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	795b      	ldrb	r3, [r3, #5]
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	b25b      	sxtb	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b25b      	sxtb	r3, r3
 8002134:	b2da      	uxtb	r2, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	705a      	strb	r2, [r3, #1]

    enc->systick[0] = 0xff & (dec->systick >> 16);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0c1b      	lsrs	r3, r3, #16
 8002140:	b2da      	uxtb	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	709a      	strb	r2, [r3, #2]
    enc->systick[1] = 0xff & (dec->systick >> 8);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b2da      	uxtb	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	70da      	strb	r2, [r3, #3]
    enc->systick[2] = 0xff & dec->systick;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	711a      	strb	r2, [r3, #4]

    uint16_t vbat_10mV = (uint16_t) round(dec->vbat * 100); // 0.01 V/lsb
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002162:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 80024c8 <encode_TLM+0x3f8>
 8002166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216a:	ee17 0a90 	vmov	r0, s15
 800216e:	f7fe fa0b 	bl	8000588 <__aeabi_f2d>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	ec44 3b10 	vmov	d0, r3, r4
 800217a:	f013 f9c5 	bl	8015508 <round>
 800217e:	ec54 3b10 	vmov	r3, r4, d0
 8002182:	4618      	mov	r0, r3
 8002184:	4621      	mov	r1, r4
 8002186:	f7fe fd2f 	bl	8000be8 <__aeabi_d2uiz>
 800218a:	4603      	mov	r3, r0
 800218c:	817b      	strh	r3, [r7, #10]

    enc->vbat_MSB = (uint8_t) ((vbat_10mV >> 2) & 0xFF);
 800218e:	897b      	ldrh	r3, [r7, #10]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2da      	uxtb	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	715a      	strb	r2, [r3, #5]
    enc->padding_vbat_LSB = (uint8_t) (vbat_10mV & 0b00000011);
 800219a:	897b      	ldrh	r3, [r7, #10]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	719a      	strb	r2, [r3, #6]

    enc->orientation_quat[0] = (int8_t) round(dec->orientation_quat[0]*127);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80021ae:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80024cc <encode_TLM+0x3fc>
 80021b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b6:	ee17 0a90 	vmov	r0, s15
 80021ba:	f7fe f9e5 	bl	8000588 <__aeabi_f2d>
 80021be:	4603      	mov	r3, r0
 80021c0:	460c      	mov	r4, r1
 80021c2:	ec44 3b10 	vmov	d0, r3, r4
 80021c6:	f013 f99f 	bl	8015508 <round>
 80021ca:	ec54 3b10 	vmov	r3, r4, d0
 80021ce:	4618      	mov	r0, r3
 80021d0:	4621      	mov	r1, r4
 80021d2:	f7fe fce1 	bl	8000b98 <__aeabi_d2iz>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b25a      	sxtb	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	71da      	strb	r2, [r3, #7]
    enc->orientation_quat[1] = (int8_t) round(dec->orientation_quat[1]*127);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80021e4:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 80024cc <encode_TLM+0x3fc>
 80021e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ec:	ee17 0a90 	vmov	r0, s15
 80021f0:	f7fe f9ca 	bl	8000588 <__aeabi_f2d>
 80021f4:	4603      	mov	r3, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	ec44 3b10 	vmov	d0, r3, r4
 80021fc:	f013 f984 	bl	8015508 <round>
 8002200:	ec54 3b10 	vmov	r3, r4, d0
 8002204:	4618      	mov	r0, r3
 8002206:	4621      	mov	r1, r4
 8002208:	f7fe fcc6 	bl	8000b98 <__aeabi_d2iz>
 800220c:	4603      	mov	r3, r0
 800220e:	b25a      	sxtb	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	721a      	strb	r2, [r3, #8]
    enc->orientation_quat[2] = (int8_t) round(dec->orientation_quat[2]*127);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edd3 7a06 	vldr	s15, [r3, #24]
 800221a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80024cc <encode_TLM+0x3fc>
 800221e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002222:	ee17 0a90 	vmov	r0, s15
 8002226:	f7fe f9af 	bl	8000588 <__aeabi_f2d>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	ec44 3b10 	vmov	d0, r3, r4
 8002232:	f013 f969 	bl	8015508 <round>
 8002236:	ec54 3b10 	vmov	r3, r4, d0
 800223a:	4618      	mov	r0, r3
 800223c:	4621      	mov	r1, r4
 800223e:	f7fe fcab 	bl	8000b98 <__aeabi_d2iz>
 8002242:	4603      	mov	r3, r0
 8002244:	b25a      	sxtb	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	725a      	strb	r2, [r3, #9]
    enc->orientation_quat[3] = (int8_t) round(dec->orientation_quat[3]*127);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002250:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80024cc <encode_TLM+0x3fc>
 8002254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002258:	ee17 0a90 	vmov	r0, s15
 800225c:	f7fe f994 	bl	8000588 <__aeabi_f2d>
 8002260:	4603      	mov	r3, r0
 8002262:	460c      	mov	r4, r1
 8002264:	ec44 3b10 	vmov	d0, r3, r4
 8002268:	f013 f94e 	bl	8015508 <round>
 800226c:	ec54 3b10 	vmov	r3, r4, d0
 8002270:	4618      	mov	r0, r3
 8002272:	4621      	mov	r1, r4
 8002274:	f7fe fc90 	bl	8000b98 <__aeabi_d2iz>
 8002278:	4603      	mov	r3, r0
 800227a:	b25a      	sxtb	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	729a      	strb	r2, [r3, #10]

    for (int i = 0; i < 3; i++) {
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e01e      	b.n	80022c4 <encode_TLM+0x1f4>
        enc->acc[i] = dec->acc[i];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	3210      	adds	r2, #16
 800228c:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3304      	adds	r3, #4
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	460a      	mov	r2, r1
 800229c:	f8a3 2003 	strh.w	r2, [r3, #3]
        enc->gyro[i] = dec->gyro[i];
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3310      	adds	r3, #16
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3308      	adds	r3, #8
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	460a      	mov	r2, r1
 80022ba:	f8a3 2001 	strh.w	r2, [r3, #1]
    for (int i = 0; i < 3; i++) {
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	dddd      	ble.n	8002286 <encode_TLM+0x1b6>
    }

    enc->baro = (uint16_t) round(dec->baro - 50000); // 50000 Pa as zero point. Max ISA height: 5.5 km, max pressure: 115536 Pa
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022d0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80024d0 <encode_TLM+0x400>
 80022d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022d8:	ee17 0a90 	vmov	r0, s15
 80022dc:	f7fe f954 	bl	8000588 <__aeabi_f2d>
 80022e0:	4603      	mov	r3, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	ec44 3b10 	vmov	d0, r3, r4
 80022e8:	f013 f90e 	bl	8015508 <round>
 80022ec:	ec54 3b10 	vmov	r3, r4, d0
 80022f0:	4618      	mov	r0, r3
 80022f2:	4621      	mov	r1, r4
 80022f4:	f7fe fc78 	bl	8000be8 <__aeabi_d2uiz>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f8a3 2017 	strh.w	r2, [r3, #23]

    enc->temp = (uint8_t) round(dec->temp * 4);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002308:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800230c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002310:	ee17 0a90 	vmov	r0, s15
 8002314:	f7fe f938 	bl	8000588 <__aeabi_f2d>
 8002318:	4603      	mov	r3, r0
 800231a:	460c      	mov	r4, r1
 800231c:	ec44 3b10 	vmov	d0, r3, r4
 8002320:	f013 f8f2 	bl	8015508 <round>
 8002324:	ec54 3b10 	vmov	r3, r4, d0
 8002328:	4618      	mov	r0, r3
 800232a:	4621      	mov	r1, r4
 800232c:	f7fe fc5c 	bl	8000be8 <__aeabi_d2uiz>
 8002330:	4603      	mov	r3, r0
 8002332:	b2da      	uxtb	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	765a      	strb	r2, [r3, #25]

    enc->altitude = (uint16_t) round((dec->altitude+48) * 16); // 0.0625m/LSB, -48 m as reference and max 2000 m.
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800233e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80024d4 <encode_TLM+0x404>
 8002342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002346:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800234a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234e:	ee17 0a90 	vmov	r0, s15
 8002352:	f7fe f919 	bl	8000588 <__aeabi_f2d>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	ec44 3b10 	vmov	d0, r3, r4
 800235e:	f013 f8d3 	bl	8015508 <round>
 8002362:	ec54 3b10 	vmov	r3, r4, d0
 8002366:	4618      	mov	r0, r3
 8002368:	4621      	mov	r1, r4
 800236a:	f7fe fc3d 	bl	8000be8 <__aeabi_d2uiz>
 800236e:	4603      	mov	r3, r0
 8002370:	b29a      	uxth	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	835a      	strh	r2, [r3, #26]

    enc->vertical_velocity = (uint8_t) MIN(MAX(round(dec->vertical_velocity + 80),0),255); // 0-255 maps to -80-175 m/s.
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800237c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80024d8 <encode_TLM+0x408>
 8002380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002384:	ee17 0a90 	vmov	r0, s15
 8002388:	f7fe f8fe 	bl	8000588 <__aeabi_f2d>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	ec44 3b10 	vmov	d0, r3, r4
 8002394:	f013 f8b8 	bl	8015508 <round>
 8002398:	ec51 0b10 	vmov	r0, r1, d0
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	f7fe fbd8 	bl	8000b58 <__aeabi_dcmpgt>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <encode_TLM+0x320>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023b4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80024d8 <encode_TLM+0x408>
 80023b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f8e2 	bl	8000588 <__aeabi_f2d>
 80023c4:	4603      	mov	r3, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	ec44 3b10 	vmov	d0, r3, r4
 80023cc:	f013 f89c 	bl	8015508 <round>
 80023d0:	ec51 0b10 	vmov	r0, r1, d0
 80023d4:	2301      	movs	r3, #1
 80023d6:	461c      	mov	r4, r3
 80023d8:	a339      	add	r3, pc, #228	; (adr r3, 80024c0 <encode_TLM+0x3f0>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe fb9d 	bl	8000b1c <__aeabi_dcmplt>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <encode_TLM+0x31c>
 80023e8:	2300      	movs	r3, #0
 80023ea:	461c      	mov	r4, r3
 80023ec:	b2e3      	uxtb	r3, r4
 80023ee:	e000      	b.n	80023f2 <encode_TLM+0x322>
 80023f0:	2301      	movs	r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d037      	beq.n	8002466 <encode_TLM+0x396>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80024d8 <encode_TLM+0x408>
 8002400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f8be 	bl	8000588 <__aeabi_f2d>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	ec44 3b10 	vmov	d0, r3, r4
 8002414:	f013 f878 	bl	8015508 <round>
 8002418:	ec51 0b10 	vmov	r0, r1, d0
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	f7fe fb98 	bl	8000b58 <__aeabi_dcmpgt>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d019      	beq.n	8002462 <encode_TLM+0x392>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002434:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80024d8 <encode_TLM+0x408>
 8002438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800243c:	ee17 0a90 	vmov	r0, s15
 8002440:	f7fe f8a2 	bl	8000588 <__aeabi_f2d>
 8002444:	4603      	mov	r3, r0
 8002446:	460c      	mov	r4, r1
 8002448:	ec44 3b10 	vmov	d0, r3, r4
 800244c:	f013 f85c 	bl	8015508 <round>
 8002450:	ec54 3b10 	vmov	r3, r4, d0
 8002454:	4618      	mov	r0, r3
 8002456:	4621      	mov	r1, r4
 8002458:	f7fe fbc6 	bl	8000be8 <__aeabi_d2uiz>
 800245c:	4603      	mov	r3, r0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e002      	b.n	8002468 <encode_TLM+0x398>
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <encode_TLM+0x398>
 8002466:	23ff      	movs	r3, #255	; 0xff
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	7713      	strb	r3, [r2, #28]

    if (dec->packet_type == 1) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11c      	bne.n	80024ae <encode_TLM+0x3de>
        enc->debug_ranging = (uint16_t) round(dec->ranging * 4);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800247a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800247e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002482:	ee17 0a90 	vmov	r0, s15
 8002486:	f7fe f87f 	bl	8000588 <__aeabi_f2d>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	ec44 3b10 	vmov	d0, r3, r4
 8002492:	f013 f839 	bl	8015508 <round>
 8002496:	ec54 3b10 	vmov	r3, r4, d0
 800249a:	4618      	mov	r0, r3
 800249c:	4621      	mov	r1, r4
 800249e:	f7fe fba3 	bl	8000be8 <__aeabi_d2uiz>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f8a3 201d 	strh.w	r2, [r3, #29]
    }
    else {
        enc->debug_ranging = dec->debug;
    }
}
 80024ac:	e004      	b.n	80024b8 <encode_TLM+0x3e8>
        enc->debug_ranging = dec->debug;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f8a3 201d 	strh.w	r2, [r3, #29]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	00000000 	.word	0x00000000
 80024c4:	406fe000 	.word	0x406fe000
 80024c8:	42c80000 	.word	0x42c80000
 80024cc:	42fe0000 	.word	0x42fe0000
 80024d0:	47435000 	.word	0x47435000
 80024d4:	42400000 	.word	0x42400000
 80024d8:	42a00000 	.word	0x42a00000

080024dc <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80024e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80024ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80024ee:	edc7 1a02 	vstr	s3, [r7, #8]
 80024f2:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <Quaternion_set+0x2a>
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <Quaternion_set+0x4c>)
 80024fc:	4a0b      	ldr	r2, [pc, #44]	; (800252c <Quaternion_set+0x50>)
 80024fe:	211b      	movs	r1, #27
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <Quaternion_set+0x54>)
 8002502:	f010 f9f7 	bl	80128f4 <__assert_func>
    output->w = w;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	60da      	str	r2, [r3, #12]
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	08017ff4 	.word	0x08017ff4
 800252c:	08018608 	.word	0x08018608
 8002530:	08018004 	.word	0x08018004

08002534 <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <Quaternion_setIdentity+0x1a>
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <Quaternion_setIdentity+0x38>)
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <Quaternion_setIdentity+0x3c>)
 8002546:	2124      	movs	r1, #36	; 0x24
 8002548:	480a      	ldr	r0, [pc, #40]	; (8002574 <Quaternion_setIdentity+0x40>)
 800254a:	f010 f9d3 	bl	80128f4 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	eddf 1a09 	vldr	s3, [pc, #36]	; 8002578 <Quaternion_setIdentity+0x44>
 8002554:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8002578 <Quaternion_setIdentity+0x44>
 8002558:	eddf 0a07 	vldr	s1, [pc, #28]	; 8002578 <Quaternion_setIdentity+0x44>
 800255c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002560:	f7ff ffbc 	bl	80024dc <Quaternion_set>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	08018020 	.word	0x08018020
 8002570:	08018618 	.word	0x08018618
 8002574:	08018004 	.word	0x08018004
 8002578:	00000000 	.word	0x00000000

0800257c <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	edd3 6a02 	vldr	s13, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	ed93 6a03 	vldr	s12, [r3, #12]
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	eef0 1a46 	vmov.f32	s3, s12
 80025a4:	eeb0 1a66 	vmov.f32	s2, s13
 80025a8:	eef0 0a47 	vmov.f32	s1, s14
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	f7ff ff94 	bl	80024dc <Quaternion_set>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	0000      	movs	r0, r0
	...

080025c0 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <Quaternion_toEulerZYX+0x1c>
 80025d0:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <Quaternion_toEulerZYX+0x230>)
 80025d2:	4a88      	ldr	r2, [pc, #544]	; (80027f4 <Quaternion_toEulerZYX+0x234>)
 80025d4:	2185      	movs	r1, #133	; 0x85
 80025d6:	4888      	ldr	r0, [pc, #544]	; (80027f8 <Quaternion_toEulerZYX+0x238>)
 80025d8:	f010 f98c 	bl	80128f4 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80025e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80025f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002600:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002604:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	ed93 7a01 	vldr	s14, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	edd3 7a01 	vldr	s15, [r3, #4]
 8002614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	edd3 6a02 	vldr	s13, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	edd3 7a02 	vldr	s15, [r3, #8]
 8002624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd ffaa 	bl	8000588 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	f7fd fe48 	bl	80002cc <__adddf3>
 800263c:	4603      	mov	r3, r0
 800263e:	460c      	mov	r4, r1
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	496c      	ldr	r1, [pc, #432]	; (80027fc <Quaternion_toEulerZYX+0x23c>)
 800264a:	f7fd fe3d 	bl	80002c8 <__aeabi_dsub>
 800264e:	4603      	mov	r3, r0
 8002650:	460c      	mov	r4, r1
 8002652:	4618      	mov	r0, r3
 8002654:	4621      	mov	r1, r4
 8002656:	f7fe fae7 	bl	8000c28 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 800265e:	69f8      	ldr	r0, [r7, #28]
 8002660:	f7fd ff92 	bl	8000588 <__aeabi_f2d>
 8002664:	4604      	mov	r4, r0
 8002666:	460d      	mov	r5, r1
 8002668:	69b8      	ldr	r0, [r7, #24]
 800266a:	f7fd ff8d 	bl	8000588 <__aeabi_f2d>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	ec43 2b11 	vmov	d1, r2, r3
 8002676:	ec45 4b10 	vmov	d0, r4, r5
 800267a:	f013 f831 	bl	80156e0 <atan2>
 800267e:	ec54 3b10 	vmov	r3, r4, d0
 8002682:	4618      	mov	r0, r3
 8002684:	4621      	mov	r1, r4
 8002686:	f7fe facf 	bl	8000c28 <__aeabi_d2f>
 800268a:	4602      	mov	r2, r0
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	edd3 7a02 	vldr	s15, [r3, #8]
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80026ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026b8:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 80026bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c0:	eef0 7ae7 	vabs.f32	s15, s15
 80026c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	db15      	blt.n	80026fe <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7fd ff58 	bl	8000588 <__aeabi_f2d>
 80026d8:	4603      	mov	r3, r0
 80026da:	460c      	mov	r4, r1
 80026dc:	ec44 3b11 	vmov	d1, r3, r4
 80026e0:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80027e8 <Quaternion_toEulerZYX+0x228>
 80026e4:	f010 ffc8 	bl	8013678 <copysign>
 80026e8:	ec52 1b10 	vmov	r1, r2, d0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1d1c      	adds	r4, r3, #4
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	f7fe fa98 	bl	8000c28 <__aeabi_d2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	6023      	str	r3, [r4, #0]
 80026fc:	e012      	b.n	8002724 <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7fd ff42 	bl	8000588 <__aeabi_f2d>
 8002704:	4603      	mov	r3, r0
 8002706:	460c      	mov	r4, r1
 8002708:	ec44 3b10 	vmov	d0, r3, r4
 800270c:	f012 ff90 	bl	8015630 <asin>
 8002710:	ec52 1b10 	vmov	r1, r2, d0
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	1d1c      	adds	r4, r3, #4
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	f7fe fa84 	bl	8000c28 <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	edd3 6a01 	vldr	s13, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800274c:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	ed93 7a02 	vldr	s14, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	edd3 7a02 	vldr	s15, [r3, #8]
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	edd3 6a03 	vldr	s13, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	edd3 7a03 	vldr	s15, [r3, #12]
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	ee17 0a90 	vmov	r0, s15
 8002778:	f7fd ff06 	bl	8000588 <__aeabi_f2d>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	f7fd fda4 	bl	80002cc <__adddf3>
 8002784:	4603      	mov	r3, r0
 8002786:	460c      	mov	r4, r1
 8002788:	461a      	mov	r2, r3
 800278a:	4623      	mov	r3, r4
 800278c:	f04f 0000 	mov.w	r0, #0
 8002790:	491a      	ldr	r1, [pc, #104]	; (80027fc <Quaternion_toEulerZYX+0x23c>)
 8002792:	f7fd fd99 	bl	80002c8 <__aeabi_dsub>
 8002796:	4603      	mov	r3, r0
 8002798:	460c      	mov	r4, r1
 800279a:	4618      	mov	r0, r3
 800279c:	4621      	mov	r1, r4
 800279e:	f7fe fa43 	bl	8000c28 <__aeabi_d2f>
 80027a2:	4603      	mov	r3, r0
 80027a4:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 80027a6:	6938      	ldr	r0, [r7, #16]
 80027a8:	f7fd feee 	bl	8000588 <__aeabi_f2d>
 80027ac:	4604      	mov	r4, r0
 80027ae:	460d      	mov	r5, r1
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7fd fee9 	bl	8000588 <__aeabi_f2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ec43 2b11 	vmov	d1, r2, r3
 80027be:	ec45 4b10 	vmov	d0, r4, r5
 80027c2:	f012 ff8d 	bl	80156e0 <atan2>
 80027c6:	ec52 1b10 	vmov	r1, r2, d0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f103 0408 	add.w	r4, r3, #8
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	f7fe fa28 	bl	8000c28 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	6023      	str	r3, [r4, #0]
}
 80027dc:	bf00      	nop
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	f3af 8000 	nop.w
 80027e8:	54442d18 	.word	0x54442d18
 80027ec:	3ff921fb 	.word	0x3ff921fb
 80027f0:	08017ff4 	.word	0x08017ff4
 80027f4:	08018630 	.word	0x08018630
 80027f8:	08018004 	.word	0x08018004
 80027fc:	3ff00000 	.word	0x3ff00000

08002800 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <Quaternion_conjugate+0x1c>
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <Quaternion_conjugate+0x5c>)
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <Quaternion_conjugate+0x60>)
 8002814:	21b7      	movs	r1, #183	; 0xb7
 8002816:	4813      	ldr	r0, [pc, #76]	; (8002864 <Quaternion_conjugate+0x64>)
 8002818:	f010 f86c 	bl	80128f4 <__assert_func>
    output->w = q->w;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edd3 7a01 	vldr	s15, [r3, #4]
 800282a:	eef1 7a67 	vneg.f32	s15, s15
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	edd3 7a02 	vldr	s15, [r3, #8]
 800283a:	eef1 7a67 	vneg.f32	s15, s15
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edd3 7a03 	vldr	s15, [r3, #12]
 800284a:	eef1 7a67 	vneg.f32	s15, s15
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	08017ff4 	.word	0x08017ff4
 8002860:	08018648 	.word	0x08018648
 8002864:	08018004 	.word	0x08018004

08002868 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <Quaternion_multiply+0x1e>
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <Quaternion_multiply+0x174>)
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <Quaternion_multiply+0x178>)
 800287e:	21d2      	movs	r1, #210	; 0xd2
 8002880:	4858      	ldr	r0, [pc, #352]	; (80029e4 <Quaternion_multiply+0x17c>)
 8002882:	f010 f837 	bl	80128f4 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	edd3 6a01 	vldr	s13, [r3, #4]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	edd3 7a01 	vldr	s15, [r3, #4]
 80028a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80028ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d2:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	edd3 7a00 	vldr	s15, [r3]
 80028e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	edd3 6a00 	vldr	s13, [r3]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	edd3 7a03 	vldr	s15, [r3, #12]
 8002906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800290a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	edd3 6a03 	vldr	s13, [r3, #12]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	edd3 7a02 	vldr	s15, [r3, #8]
 800291a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	edd3 6a01 	vldr	s13, [r3, #4]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	edd3 6a03 	vldr	s13, [r3, #12]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	edd3 7a01 	vldr	s15, [r3, #4]
 800296a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	ed93 7a00 	vldr	s14, [r3]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	edd3 6a01 	vldr	s13, [r3, #4]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	edd3 6a02 	vldr	s13, [r3, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80029a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c2:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	461c      	mov	r4, r3
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80029d4:	bf00      	nop
 80029d6:	3724      	adds	r7, #36	; 0x24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}
 80029dc:	08017ff4 	.word	0x08017ff4
 80029e0:	08018660 	.word	0x08018660
 80029e4:	08018004 	.word	0x08018004

080029e8 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b092      	sub	sp, #72	; 0x48
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <Quaternion_rotate+0x1e>
 80029fa:	4bbc      	ldr	r3, [pc, #752]	; (8002cec <Quaternion_rotate+0x304>)
 80029fc:	4abc      	ldr	r2, [pc, #752]	; (8002cf0 <Quaternion_rotate+0x308>)
 80029fe:	21e6      	movs	r1, #230	; 0xe6
 8002a00:	48bc      	ldr	r0, [pc, #752]	; (8002cf4 <Quaternion_rotate+0x30c>)
 8002a02:	f00f ff77 	bl	80128f4 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	ed93 7a00 	vldr	s14, [r3]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a52:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	ed93 7a00 	vldr	s14, [r3]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	ed93 7a00 	vldr	s14, [r3]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	ed93 7a00 	vldr	s14, [r3]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	ed93 7a00 	vldr	s14, [r3]
 8002ad4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002adc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ae0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002af8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3304      	adds	r3, #4
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b08:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	edd3 6a00 	vldr	s13, [r3]
 8002b12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002b1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b3a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3308      	adds	r3, #8
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	edd3 6a00 	vldr	s13, [r3]
 8002b54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	edd3 6a00 	vldr	s13, [r3]
 8002b66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002b72:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002b76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	edd3 6a00 	vldr	s13, [r3]
 8002b90:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ba0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002bb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002bb8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	edd3 6a00 	vldr	s13, [r3]
 8002bd2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3304      	adds	r3, #4
 8002be2:	edd3 6a00 	vldr	s13, [r3]
 8002be6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bee:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002bf2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bf6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002c06:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	edd3 6a00 	vldr	s13, [r3]
 8002c12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002c1e:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002c22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c34:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	3308      	adds	r3, #8
 8002c50:	edd3 6a00 	vldr	s13, [r3]
 8002c54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002c60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002c72:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3308      	adds	r3, #8
 8002c7a:	edd3 6a00 	vldr	s13, [r3]
 8002c7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3304      	adds	r3, #4
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	edd3 6a00 	vldr	s13, [r3]
 8002caa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3308      	adds	r3, #8
 8002cba:	edd3 6a00 	vldr	s13, [r3]
 8002cbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002cca:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	601a      	str	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3748      	adds	r7, #72	; 0x48
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	08017ff4 	.word	0x08017ff4
 8002cf0:	08018674 	.word	0x08018674
 8002cf4:	08018004 	.word	0x08018004

08002cf8 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	b08b      	sub	sp, #44	; 0x2c
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d04:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	ed93 7a00 	vldr	s14, [r3]
 8002d0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3304      	adds	r3, #4
 8002d24:	ed93 7a00 	vldr	s14, [r3]
 8002d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d38:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3308      	adds	r3, #8
 8002d40:	ed93 7a00 	vldr	s14, [r3]
 8002d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d54:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8002d58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d64:	edd7 6a08 	vldr	s13, [r7, #32]
 8002d68:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d78:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d84:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS*QUATERNION_EPS) {
 8002d88:	69b8      	ldr	r0, [r7, #24]
 8002d8a:	f7fd fbfd 	bl	8000588 <__aeabi_f2d>
 8002d8e:	a336      	add	r3, pc, #216	; (adr r3, 8002e68 <Quaternion_fromRate+0x170>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fee0 	bl	8000b58 <__aeabi_dcmpgt>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d05c      	beq.n	8002e58 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 8002d9e:	69b8      	ldr	r0, [r7, #24]
 8002da0:	f7fd fbf2 	bl	8000588 <__aeabi_f2d>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	ec44 3b10 	vmov	d0, r3, r4
 8002dac:	f012 fe0a 	bl	80159c4 <sqrt>
 8002db0:	ec54 3b10 	vmov	r3, r4, d0
 8002db4:	4618      	mov	r0, r3
 8002db6:	4621      	mov	r1, r4
 8002db8:	f7fd ff36 	bl	8000c28 <__aeabi_d2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 8002dc0:	69b8      	ldr	r0, [r7, #24]
 8002dc2:	f7fd fbe1 	bl	8000588 <__aeabi_f2d>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460c      	mov	r4, r1
 8002dca:	ec44 3b10 	vmov	d0, r3, r4
 8002dce:	f012 fbe7 	bl	80155a0 <sin>
 8002dd2:	ec56 5b10 	vmov	r5, r6, d0
 8002dd6:	69b8      	ldr	r0, [r7, #24]
 8002dd8:	f7fd fbd6 	bl	8000588 <__aeabi_f2d>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	460c      	mov	r4, r1
 8002de0:	461a      	mov	r2, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	4628      	mov	r0, r5
 8002de6:	4631      	mov	r1, r6
 8002de8:	f7fd fd50 	bl	800088c <__aeabi_ddiv>
 8002dec:	4603      	mov	r3, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	4618      	mov	r0, r3
 8002df2:	4621      	mov	r1, r4
 8002df4:	f7fd ff18 	bl	8000c28 <__aeabi_d2f>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 8002dfc:	69b8      	ldr	r0, [r7, #24]
 8002dfe:	f7fd fbc3 	bl	8000588 <__aeabi_f2d>
 8002e02:	4603      	mov	r3, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	ec44 3b10 	vmov	d0, r3, r4
 8002e0a:	f012 fb39 	bl	8015480 <cos>
 8002e0e:	ec54 3b10 	vmov	r3, r4, d0
 8002e12:	4618      	mov	r0, r3
 8002e14:	4621      	mov	r1, r4
 8002e16:	f7fd ff07 	bl	8000c28 <__aeabi_d2f>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8002e20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e24:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8002e32:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8002e44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8002e56:	e002      	b.n	8002e5e <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fb6b 	bl	8002534 <Quaternion_setIdentity>
}
 8002e5e:	bf00      	nop
 8002e60:	372c      	adds	r7, #44	; 0x2c
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	812dea11 	.word	0x812dea11
 8002e6c:	3d719799 	.word	0x3d719799

08002e70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <vApplicationGetIdleTaskMemory+0x2c>)
 8002e80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <vApplicationGetIdleTaskMemory+0x30>)
 8002e86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000624 	.word	0x20000624
 8002ea0:	20000678 	.word	0x20000678
 8002ea4:	00000000 	.word	0x00000000

08002ea8 <get_battery_voltage>:
void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB);
void jingleBell();
void rick();
void ksp();

float get_battery_voltage() {
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002eae:	4816      	ldr	r0, [pc, #88]	; (8002f08 <get_battery_voltage+0x60>)
 8002eb0:	f002 fdaa 	bl	8005a08 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002eb4:	2164      	movs	r1, #100	; 0x64
 8002eb6:	4814      	ldr	r0, [pc, #80]	; (8002f08 <get_battery_voltage+0x60>)
 8002eb8:	f002 fe6c 	bl	8005b94 <HAL_ADC_PollForConversion>
    float voltage = ((float) HAL_ADC_GetValue(&hadc1)) * VBAT_CALIBRATION;
 8002ebc:	4812      	ldr	r0, [pc, #72]	; (8002f08 <get_battery_voltage+0x60>)
 8002ebe:	f002 feed 	bl	8005c9c <HAL_ADC_GetValue>
 8002ec2:	ee07 0a90 	vmov	s15, r0
 8002ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eca:	ee17 0a90 	vmov	r0, s15
 8002ece:	f7fd fb5b 	bl	8000588 <__aeabi_f2d>
 8002ed2:	a30b      	add	r3, pc, #44	; (adr r3, 8002f00 <get_battery_voltage+0x58>)
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f7fd fbae 	bl	8000638 <__aeabi_dmul>
 8002edc:	4603      	mov	r3, r0
 8002ede:	460c      	mov	r4, r1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	f7fd fea0 	bl	8000c28 <__aeabi_d2f>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	607b      	str	r3, [r7, #4]
    return voltage;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	ee07 3a90 	vmov	s15, r3
}
 8002ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd90      	pop	{r4, r7, pc}
 8002efc:	f3af 8000 	nop.w
 8002f00:	f34eff30 	.word	0xf34eff30
 8002f04:	3f72b5b7 	.word	0x3f72b5b7
 8002f08:	200048ac 	.word	0x200048ac

08002f0c <is_armed>:

uint8_t is_armed() {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(RBF_GPIO_Port, RBF_Pin);// High corresponds to disconected = armed
 8002f10:	2101      	movs	r1, #1
 8002f12:	4803      	ldr	r0, [pc, #12]	; (8002f20 <is_armed+0x14>)
 8002f14:	f003 fee0 	bl	8006cd8 <HAL_GPIO_ReadPin>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40020000 	.word	0x40020000

08002f24 <is_armed_debounce>:

uint8_t is_armed_debounce() {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	e00c      	b.n	8002f4a <is_armed_debounce+0x26>
        if (!is_armed()) {
 8002f30:	f7ff ffec 	bl	8002f0c <is_armed>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <is_armed_debounce+0x1a>
            return 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e009      	b.n	8002f52 <is_armed_debounce+0x2e>
        }
        osDelay(1);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f00c fd68 	bl	800fa14 <osDelay>
    for (int i = 0; i < 20; i++) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b13      	cmp	r3, #19
 8002f4e:	ddef      	ble.n	8002f30 <is_armed_debounce+0xc>
    }
    return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <is_soft_enabled>:

uint8_t is_soft_enabled() {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ARM_GPIO_Port, ARM_Pin);
 8002f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <is_soft_enabled+0x14>)
 8002f66:	f003 feb7 	bl	8006cd8 <HAL_GPIO_ReadPin>
 8002f6a:	4603      	mov	r3, r0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40020400 	.word	0x40020400

08002f74 <is_breakwire_connected>:

uint8_t is_breakwire_connected() {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
    return !HAL_GPIO_ReadPin(BREAKWIRE_GPIO_Port, BREAKWIRE_Pin);
 8002f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f7c:	4805      	ldr	r0, [pc, #20]	; (8002f94 <is_breakwire_connected+0x20>)
 8002f7e:	f003 feab 	bl	8006cd8 <HAL_GPIO_ReadPin>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40020400 	.word	0x40020400

08002f98 <is_breakwire_broken_debounce>:

uint8_t is_breakwire_broken_debounce() {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	e00c      	b.n	8002fbe <is_breakwire_broken_debounce+0x26>
        if (is_breakwire_connected()) {
 8002fa4:	f7ff ffe6 	bl	8002f74 <is_breakwire_connected>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <is_breakwire_broken_debounce+0x1a>
            return 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e009      	b.n	8002fc6 <is_breakwire_broken_debounce+0x2e>
        }
        osDelay(1);
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f00c fd2e 	bl	800fa14 <osDelay>
    for (int i = 0; i < 20; i++) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b13      	cmp	r3, #19
 8002fc2:	ddef      	ble.n	8002fa4 <is_breakwire_broken_debounce+0xc>
    }
    return 1;
 8002fc4:	2301      	movs	r3, #1
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <buzzer_beep>:

void buzzer_beep(uint8_t delayval) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
    buzzer_setting = REPEAT_BEEP;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <buzzer_beep+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
    buzzer_delay = delayval * 20;
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <buzzer_beep+0x50>)
 8002ff0:	801a      	strh	r2, [r3, #0]

    if (osMessageAvailableSpace(BuzzerQueueHandle)) {
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <buzzer_beep+0x54>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00c fdfe 	bl	800fbf8 <osMessageAvailableSpace>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <buzzer_beep+0x42>
        osMessagePut(BuzzerQueueHandle, buzzer_delay, 100);
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <buzzer_beep+0x54>)
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <buzzer_beep+0x50>)
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	2264      	movs	r2, #100	; 0x64
 800300c:	4619      	mov	r1, r3
 800300e:	f00c fd3f 	bl	800fa90 <osMessagePut>
    }
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000001 	.word	0x20000001
 8003020:	20000002 	.word	0x20000002
 8003024:	200048f4 	.word	0x200048f4

08003028 <buzzer_clear_queue>:

void buzzer_clear_queue() {
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
    xQueueReset(BuzzerQueueHandle);
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <buzzer_clear_queue+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f00c fea0 	bl	800fd78 <xQueueGenericReset>
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200048f4 	.word	0x200048f4

08003040 <pulse_recording_button>:

void pulse_recording_button() {
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_SET);
 8003044:	2201      	movs	r2, #1
 8003046:	2120      	movs	r1, #32
 8003048:	4806      	ldr	r0, [pc, #24]	; (8003064 <pulse_recording_button+0x24>)
 800304a:	f003 fe5d 	bl	8006d08 <HAL_GPIO_WritePin>
    osDelay(300);
 800304e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003052:	f00c fcdf 	bl	800fa14 <osDelay>
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_RESET);
 8003056:	2200      	movs	r2, #0
 8003058:	2120      	movs	r1, #32
 800305a:	4802      	ldr	r0, [pc, #8]	; (8003064 <pulse_recording_button+0x24>)
 800305c:	f003 fe54 	bl	8006d08 <HAL_GPIO_WritePin>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40020800 	.word	0x40020800

08003068 <enable_recording>:

void enable_recording() {
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
    if (!is_camera_recording) {
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <enable_recording+0x1c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d104      	bne.n	800307e <enable_recording+0x16>
        pulse_recording_button();
 8003074:	f7ff ffe4 	bl	8003040 <pulse_recording_button>
        is_camera_recording = 1;
 8003078:	4b02      	ldr	r3, [pc, #8]	; (8003084 <enable_recording+0x1c>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
    }
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000087c 	.word	0x2000087c

08003088 <enable_camera>:
        pulse_recording_button();
        is_camera_recording = 0;
    }
}

void enable_camera() {
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_SET);
 800308c:	2201      	movs	r2, #1
 800308e:	2104      	movs	r1, #4
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <enable_camera+0x18>)
 8003092:	f003 fe39 	bl	8006d08 <HAL_GPIO_WritePin>
    is_camera_recording = 0;
 8003096:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <enable_camera+0x1c>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40020000 	.word	0x40020000
 80030a4:	2000087c 	.word	0x2000087c

080030a8 <disable_camera>:

void disable_camera() {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
    if (is_camera_recording) {
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <disable_camera+0x2c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <disable_camera+0x1e>
        pulse_recording_button();
 80030b4:	f7ff ffc4 	bl	8003040 <pulse_recording_button>
        osDelay(1000);
 80030b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030bc:	f00c fcaa 	bl	800fa14 <osDelay>
        is_camera_recording = 0;
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <disable_camera+0x2c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_RESET);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2104      	movs	r1, #4
 80030ca:	4803      	ldr	r0, [pc, #12]	; (80030d8 <disable_camera+0x30>)
 80030cc:	f003 fe1c 	bl	8006d08 <HAL_GPIO_WritePin>
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	2000087c 	.word	0x2000087c
 80030d8:	40020000 	.word	0x40020000

080030dc <restart_camera_with_recording>:

void restart_camera_with_recording() {
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
    disable_camera();
 80030e0:	f7ff ffe2 	bl	80030a8 <disable_camera>
    osDelay(300);
 80030e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80030e8:	f00c fc94 	bl	800fa14 <osDelay>
    enable_camera();
 80030ec:	f7ff ffcc 	bl	8003088 <enable_camera>
    osDelay(10000);
 80030f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80030f4:	f00c fc8e 	bl	800fa14 <osDelay>
    enable_recording();
 80030f8:	f7ff ffb6 	bl	8003068 <enable_recording>
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}

08003100 <set_status_led>:

void set_status_led(uint8_t status_state) {
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
    // TODO
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <is_vote_asserted>:

uint8_t is_vote_asserted() {
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
    // Todo
    return 0;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <loraOrientation>:
        }

    }
}

void loraOrientation(uint8_t isTx) {
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8003130:	af0c      	add	r7, sp, #48	; 0x30
 8003132:	4602      	mov	r2, r0
 8003134:	f107 0317 	add.w	r3, r7, #23
 8003138:	701a      	strb	r2, [r3, #0]

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 800313a:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 800313e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003142:	4a9a      	ldr	r2, [pc, #616]	; (80033ac <loraOrientation+0x284>)
 8003144:	499a      	ldr	r1, [pc, #616]	; (80033b0 <loraOrientation+0x288>)
 8003146:	f7fe fd39 	bl	8001bbc <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 800314a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800314e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003152:	4998      	ldr	r1, [pc, #608]	; (80033b4 <loraOrientation+0x28c>)
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fd91 	bl	8001c7c <sxSetDio1Pin>

    float data[4];

    char printBuffer[128];

    if (isTx) {
 800315a:	f107 0317 	add.w	r3, r7, #23
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8133 	beq.w	80033cc <loraOrientation+0x2a4>
        //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
        SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 8003166:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800316a:	22e0      	movs	r2, #224	; 0xe0
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fdd8 	bl	8001d24 <SetTxParams>
        HAL_Delay(3);
 8003174:	2003      	movs	r0, #3
 8003176:	f002 fbe1 	bl	800593c <HAL_Delay>

        lsm6dso imu;
        uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 800317a:	f107 0018 	add.w	r0, r7, #24
 800317e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003182:	4a8d      	ldr	r2, [pc, #564]	; (80033b8 <loraOrientation+0x290>)
 8003184:	498d      	ldr	r1, [pc, #564]	; (80033bc <loraOrientation+0x294>)
 8003186:	f7fd ff9f 	bl	80010c8 <LSM_init>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
        SPI2_NSS_Pin);

        Orientation ori;
        orientation_init(&ori);
 8003190:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003194:	4618      	mov	r0, r3
 8003196:	f001 fdd2 	bl	8004d3e <orientation_init>
        uint32_t counter = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

        data[0] = ori.orientationQuat.w;
 80031a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        data[1] = ori.orientationQuat.v[0];
 80031aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
        data[2] = ori.orientationQuat.v[1];
 80031b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        data[3] = ori.orientationQuat.v[2];
 80031be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 80031c8:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80031cc:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 80031d0:	2310      	movs	r3, #16
 80031d2:	2100      	movs	r1, #0
 80031d4:	f7fe fe1f 	bl	8001e16 <WriteBuffer>
        HAL_Delay(1);
 80031d8:	2001      	movs	r0, #1
 80031da:	f002 fbaf 	bl	800593c <HAL_Delay>

        SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 80031de:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 80031e2:	2300      	movs	r3, #0
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2300      	movs	r3, #0
 80031e8:	2201      	movs	r2, #1
 80031ea:	2101      	movs	r1, #1
 80031ec:	f7fe fe7c 	bl	8001ee8 <SetDioIrqParams>

        HAL_Delay(3);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f002 fba3 	bl	800593c <HAL_Delay>

        uint32_t lasttime = HAL_GetTick();
 80031f6:	f002 fb95 	bl	8005924 <HAL_GetTick>
 80031fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        uint32_t nowtime = HAL_GetTick();
 80031fe:	f002 fb91 	bl	8005924 <HAL_GetTick>
 8003202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        float dt = 0;
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        changeLed(100, 100, 100);
 800320e:	2264      	movs	r2, #100	; 0x64
 8003210:	2164      	movs	r1, #100	; 0x64
 8003212:	2064      	movs	r0, #100	; 0x64
 8003214:	f001 f8bc 	bl	8004390 <changeLed>

        while (1) {

            LSM_pollsensors(&imu);
 8003218:	f107 0318 	add.w	r3, r7, #24
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd ffcd 	bl	80011bc <LSM_pollsensors>
            changeLed(0, 0, 100);
 8003222:	2264      	movs	r2, #100	; 0x64
 8003224:	2100      	movs	r1, #0
 8003226:	2000      	movs	r0, #0
 8003228:	f001 f8b2 	bl	8004390 <changeLed>
            nowtime = HAL_GetTick();
 800322c:	f002 fb7a 	bl	8005924 <HAL_GetTick>
 8003230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
            dt = (nowtime - lasttime) / 1000.0;
 8003234:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8003238:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd f980 	bl	8000544 <__aeabi_ui2d>
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <loraOrientation+0x298>)
 800324a:	f7fd fb1f 	bl	800088c <__aeabi_ddiv>
 800324e:	4603      	mov	r3, r0
 8003250:	460c      	mov	r4, r1
 8003252:	4618      	mov	r0, r3
 8003254:	4621      	mov	r1, r4
 8003256:	f7fd fce7 	bl	8000c28 <__aeabi_d2f>
 800325a:	4603      	mov	r3, r0
 800325c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            lasttime = nowtime;
 8003260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003264:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

            orientation_setGyro(&ori, imu.gyroRPS);
 8003268:	f107 0318 	add.w	r3, r7, #24
 800326c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003270:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fd8f 	bl	8004d9a <orientation_setGyro>
            orientation_setAcc(&ori, imu.accMPS);
 800327c:	f107 0318 	add.w	r3, r7, #24
 8003280:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003284:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f001 fd9c 	bl	8004dc8 <orientation_setAcc>
            orientation_update(&ori, dt, 1);
 8003290:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003294:	2101      	movs	r1, #1
 8003296:	ed97 0a7d 	vldr	s0, [r7, #500]	; 0x1f4
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fdac 	bl	8004df8 <orientation_update>

            counter++;
 80032a0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80032a4:	3301      	adds	r3, #1
 80032a6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

            if (counter % 20 == 0) {
 80032aa:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80032ae:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <loraOrientation+0x29c>)
 80032b0:	fba3 2301 	umull	r2, r3, r3, r1
 80032b4:	091a      	lsrs	r2, r3, #4
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	1aca      	subs	r2, r1, r3
 80032c0:	2a00      	cmp	r2, #0
 80032c2:	d16e      	bne.n	80033a2 <loraOrientation+0x27a>
                data[0] = ori.orientationQuat.w;
 80032c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                data[1] = ori.orientationQuat.v[0];
 80032ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
                data[2] = ori.orientationQuat.v[1];
 80032d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
                data[3] = ori.orientationQuat.v[2];
 80032e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 80032ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd f949 	bl	8000588 <__aeabi_f2d>
 80032f6:	4682      	mov	sl, r0
 80032f8:	468b      	mov	fp, r1
                        data[1], data[2], data[3]);
 80032fa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f942 	bl	8000588 <__aeabi_f2d>
 8003304:	4604      	mov	r4, r0
 8003306:	460d      	mov	r5, r1
                        data[1], data[2], data[3]);
 8003308:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f93b 	bl	8000588 <__aeabi_f2d>
 8003312:	4680      	mov	r8, r0
 8003314:	4689      	mov	r9, r1
                        data[1], data[2], data[3]);
 8003316:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f934 	bl	8000588 <__aeabi_f2d>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8003328:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800332c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003330:	e9cd 4500 	strd	r4, r5, [sp]
 8003334:	4652      	mov	r2, sl
 8003336:	465b      	mov	r3, fp
 8003338:	4923      	ldr	r1, [pc, #140]	; (80033c8 <loraOrientation+0x2a0>)
 800333a:	f010 f9f1 	bl	8013720 <siprintf>
                //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
                CDC_Transmit_FS((uint8_t*) printBuffer,
                        MIN(strlen(printBuffer), 128));
 800333e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8003342:	4618      	mov	r0, r3
 8003344:	f7fc ff64 	bl	8000210 <strlen>
 8003348:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 800334a:	2b7f      	cmp	r3, #127	; 0x7f
 800334c:	d807      	bhi.n	800335e <loraOrientation+0x236>
                        MIN(strlen(printBuffer), 128));
 800334e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8003352:	4618      	mov	r0, r3
 8003354:	f7fc ff5c 	bl	8000210 <strlen>
 8003358:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 800335a:	b29b      	uxth	r3, r3
 800335c:	e000      	b.n	8003360 <loraOrientation+0x238>
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f00e fe22 	bl	8011fb0 <CDC_Transmit_FS>

                WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 800336c:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003370:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003374:	2310      	movs	r3, #16
 8003376:	2100      	movs	r1, #0
 8003378:	f7fe fd4d 	bl	8001e16 <WriteBuffer>
                HAL_Delay(1);
 800337c:	2001      	movs	r0, #1
 800337e:	f002 fadd 	bl	800593c <HAL_Delay>
                ClrIrqStatus(&radio, 1); // clear txdone irq
 8003382:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fde7 	bl	8001f5c <ClrIrqStatus>
                HAL_Delay(1);
 800338e:	2001      	movs	r0, #1
 8003390:	f002 fad4 	bl	800593c <HAL_Delay>
                SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 8003394:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003398:	2232      	movs	r2, #50	; 0x32
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fdf8 	bl	8001f92 <SetTx>
            }

            HAL_Delay(1);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f002 faca 	bl	800593c <HAL_Delay>
            LSM_pollsensors(&imu);
 80033a8:	e736      	b.n	8003218 <loraOrientation+0xf0>
 80033aa:	bf00      	nop
 80033ac:	40020000 	.word	0x40020000
 80033b0:	20004854 	.word	0x20004854
 80033b4:	40020800 	.word	0x40020800
 80033b8:	40020400 	.word	0x40020400
 80033bc:	200046d8 	.word	0x200046d8
 80033c0:	408f4000 	.word	0x408f4000
 80033c4:	cccccccd 	.word	0xcccccccd
 80033c8:	08018048 	.word	0x08018048

        }
    } else {
        // rx mode
        SetDioIrqParams(&radio, 1 << 1, 1 << 1, 0, 0); //rxdone on gpio1
 80033cc:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	2202      	movs	r2, #2
 80033d8:	2102      	movs	r1, #2
 80033da:	f7fe fd85 	bl	8001ee8 <SetDioIrqParams>
        HAL_Delay(1);
 80033de:	2001      	movs	r0, #1
 80033e0:	f002 faac 	bl	800593c <HAL_Delay>

        uint8_t rxStartBufferPointer = 1;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff

        changeLed(0, 100, 0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	2000      	movs	r0, #0
 80033f0:	f000 ffce 	bl	8004390 <changeLed>
        while (1) {

            //SetRx(0x00, 0xffff); // continous rx
            SetRx(&radio, 0x00, 0); // No timeout
 80033f4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80033f8:	2200      	movs	r2, #0
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe fde7 	bl	8001fd0 <SetRx>
            //SetRx(0x02, 200); // 200 ms timeout
            HAL_Delay(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f002 fa9a 	bl	800593c <HAL_Delay>
            // wait for reception:
            while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8003408:	bf00      	nop
 800340a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800340e:	4837      	ldr	r0, [pc, #220]	; (80034ec <loraOrientation+0x3c4>)
 8003410:	f003 fc62 	bl	8006cd8 <HAL_GPIO_ReadPin>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f7      	beq.n	800340a <loraOrientation+0x2e2>
            }

            GetPacketStatusLora(&radio);
 800341a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fdf5 	bl	800200e <GetPacketStatusLora>
            ClrIrqStatus(&radio, 1 << 1); // clear rxdone Irq
 8003424:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003428:	2102      	movs	r1, #2
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fd96 	bl	8001f5c <ClrIrqStatus>
            HAL_Delay(1);
 8003430:	2001      	movs	r0, #1
 8003432:	f002 fa83 	bl	800593c <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(data),
 8003436:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800343a:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 800343e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003442:	2210      	movs	r2, #16
 8003444:	f7fe fd1b 	bl	8001e7e <ReadBuffer>
                    (uint8_t*) data);
            snprintf(printBuffer, 128,
                    "Quaternion: %f, %f, %f, %f, RSSI: %f, SNR: %f\r\n",
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003448:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
            snprintf(printBuffer, 128,
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f89b 	bl	8000588 <__aeabi_f2d>
 8003452:	4604      	mov	r4, r0
 8003454:	460d      	mov	r5, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003456:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
            snprintf(printBuffer, 128,
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd f894 	bl	8000588 <__aeabi_f2d>
 8003460:	4680      	mov	r8, r0
 8003462:	4689      	mov	r9, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003464:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
            snprintf(printBuffer, 128,
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f88d 	bl	8000588 <__aeabi_f2d>
 800346e:	4682      	mov	sl, r0
 8003470:	468b      	mov	fp, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003472:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
            snprintf(printBuffer, 128,
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f886 	bl	8000588 <__aeabi_f2d>
 800347c:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003480:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
            snprintf(printBuffer, 128,
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd f87f 	bl	8000588 <__aeabi_f2d>
 800348a:	e9c7 0100 	strd	r0, r1, [r7]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 800348e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
            snprintf(printBuffer, 128,
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd f878 	bl	8000588 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	f507 709a 	add.w	r0, r7, #308	; 0x134
 80034a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80034a4:	ed97 7b00 	vldr	d7, [r7]
 80034a8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80034ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80034b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80034b4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80034b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80034bc:	e9cd 4500 	strd	r4, r5, [sp]
 80034c0:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <loraOrientation+0x3c8>)
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	f010 f8f8 	bl	80136b8 <sniprintf>
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 80034c8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fc fe9f 	bl	8000210 <strlen>
 80034d2:	4603      	mov	r3, r0
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f00e fd67 	bl	8011fb0 <CDC_Transmit_FS>
            HAL_Delay(1);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f002 fa2a 	bl	800593c <HAL_Delay>
            SetRx(&radio, 0x00, 0); // No timeout
 80034e8:	e784      	b.n	80033f4 <loraOrientation+0x2cc>
 80034ea:	bf00      	nop
 80034ec:	40020800 	.word	0x40020800
 80034f0:	08018068 	.word	0x08018068

080034f4 <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 80034f8:	2214      	movs	r2, #20
 80034fa:	2122      	movs	r1, #34	; 0x22
 80034fc:	2064      	movs	r0, #100	; 0x64
 80034fe:	f000 ff47 	bl	8004390 <changeLed>

    changeLed(255, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	20ff      	movs	r0, #255	; 0xff
 8003508:	f000 ff42 	bl	8004390 <changeLed>
    playtone(1046, 100, 10);
 800350c:	220a      	movs	r2, #10
 800350e:	2164      	movs	r1, #100	; 0x64
 8003510:	f240 4016 	movw	r0, #1046	; 0x416
 8003514:	f000 fe44 	bl	80041a0 <playtone>
    HAL_Delay(100);
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	f002 fa0f 	bl	800593c <HAL_Delay>
    changeLed(0, 255, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	21ff      	movs	r1, #255	; 0xff
 8003522:	2000      	movs	r0, #0
 8003524:	f000 ff34 	bl	8004390 <changeLed>
    playtone(1319, 100, 10);
 8003528:	220a      	movs	r2, #10
 800352a:	2164      	movs	r1, #100	; 0x64
 800352c:	f240 5027 	movw	r0, #1319	; 0x527
 8003530:	f000 fe36 	bl	80041a0 <playtone>
    return;
 8003534:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == IMU_INT_Pin && imu_ready) {
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003548:	d106      	bne.n	8003558 <HAL_GPIO_EXTI_Callback+0x20>
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_GPIO_EXTI_Callback+0x28>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_GPIO_EXTI_Callback+0x20>
        LSM_ReadDMA(&imu);
 8003552:	4804      	ldr	r0, [pc, #16]	; (8003564 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003554:	f7fd ffbe 	bl	80014d4 <LSM_ReadDMA>
    }
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000087d 	.word	0x2000087d
 8003564:	20004730 	.word	0x20004730

08003568 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <HAL_SPI_TxRxCpltCallback+0x64>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d123      	bne.n	80035c2 <HAL_SPI_TxRxCpltCallback+0x5a>
        LSM_ReadDMA_Complete(&imu);
 800357a:	4815      	ldr	r0, [pc, #84]	; (80035d0 <HAL_SPI_TxRxCpltCallback+0x68>)
 800357c:	f7fd ffdb 	bl	8001536 <LSM_ReadDMA_Complete>
        float dt = ((float) __HAL_TIM_GET_COUNTER(&htim6))/1000000;
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800358e:	eddf 6a12 	vldr	s13, [pc, #72]	; 80035d8 <HAL_SPI_TxRxCpltCallback+0x70>
 8003592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003596:	edc7 7a03 	vstr	s15, [r7, #12]
        __HAL_TIM_SET_COUNTER(&htim6,0);
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_SPI_TxRxCpltCallback+0x6c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

        orientation_setGyro(&ori, imu.gyroRPS);
 80035a2:	490e      	ldr	r1, [pc, #56]	; (80035dc <HAL_SPI_TxRxCpltCallback+0x74>)
 80035a4:	480e      	ldr	r0, [pc, #56]	; (80035e0 <HAL_SPI_TxRxCpltCallback+0x78>)
 80035a6:	f001 fbf8 	bl	8004d9a <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 80035aa:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 80035ac:	480c      	ldr	r0, [pc, #48]	; (80035e0 <HAL_SPI_TxRxCpltCallback+0x78>)
 80035ae:	f001 fc0b 	bl	8004dc8 <orientation_setAcc>
        orientation_update(&ori, dt, apply_complementary);
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_SPI_TxRxCpltCallback+0x80>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4619      	mov	r1, r3
 80035b8:	ed97 0a03 	vldr	s0, [r7, #12]
 80035bc:	4808      	ldr	r0, [pc, #32]	; (80035e0 <HAL_SPI_TxRxCpltCallback+0x78>)
 80035be:	f001 fc1b 	bl	8004df8 <orientation_update>
    }
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40003800 	.word	0x40003800
 80035d0:	20004730 	.word	0x20004730
 80035d4:	200048f8 	.word	0x200048f8
 80035d8:	49742400 	.word	0x49742400
 80035dc:	20004768 	.word	0x20004768
 80035e0:	200045e8 	.word	0x200045e8
 80035e4:	20004794 	.word	0x20004794
 80035e8:	2000027c 	.word	0x2000027c

080035ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f0:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80035f4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035f6:	f002 f95f 	bl	80058b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035fa:	f000 f9b3 	bl	8003964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035fe:	f000 fccb 	bl	8003f98 <MX_GPIO_Init>
  MX_DMA_Init();
 8003602:	f000 fca1 	bl	8003f48 <MX_DMA_Init>
  MX_TIM3_Init();
 8003606:	f000 fbcf 	bl	8003da8 <MX_TIM3_Init>
  MX_SPI2_Init();
 800360a:	f000 fafd 	bl	8003c08 <MX_SPI2_Init>
  MX_SPI3_Init();
 800360e:	f000 fb31 	bl	8003c74 <MX_SPI3_Init>
  MX_TIM2_Init();
 8003612:	f000 fb65 	bl	8003ce0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003616:	f000 fac1 	bl	8003b9c <MX_SPI1_Init>
  MX_FATFS_Init();
 800361a:	f009 ff99 	bl	800d550 <MX_FATFS_Init>
  MX_I2C3_Init();
 800361e:	f000 fa8f 	bl	8003b40 <MX_I2C3_Init>
  MX_ADC1_Init();
 8003622:	f000 fa3b 	bl	8003a9c <MX_ADC1_Init>
  MX_TIM6_Init();
 8003626:	f000 fc59 	bl	8003edc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800362a:	210c      	movs	r1, #12
 800362c:	48b5      	ldr	r0, [pc, #724]	; (8003904 <main+0x318>)
 800362e:	f007 fde3 	bl	800b1f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003632:	2104      	movs	r1, #4
 8003634:	48b3      	ldr	r0, [pc, #716]	; (8003904 <main+0x318>)
 8003636:	f007 fddf 	bl	800b1f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800363a:	2108      	movs	r1, #8
 800363c:	48b1      	ldr	r0, [pc, #708]	; (8003904 <main+0x318>)
 800363e:	f007 fddb 	bl	800b1f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003642:	2100      	movs	r1, #0
 8003644:	48af      	ldr	r0, [pc, #700]	; (8003904 <main+0x318>)
 8003646:	f007 fdd7 	bl	800b1f8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800364a:	210c      	movs	r1, #12
 800364c:	48ae      	ldr	r0, [pc, #696]	; (8003908 <main+0x31c>)
 800364e:	f007 fdd3 	bl	800b1f8 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start(&htim6);
 8003652:	48ae      	ldr	r0, [pc, #696]	; (800390c <main+0x320>)
 8003654:	f007 fd5d 	bl	800b112 <HAL_TIM_Base_Start>

    startupMusic();
 8003658:	f7ff ff4c 	bl	80034f4 <startupMusic>
    //while (1) {rick();}

    changeLed(90, 0, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2100      	movs	r1, #0
 8003660:	205a      	movs	r0, #90	; 0x5a
 8003662:	f000 fe95 	bl	8004390 <changeLed>

    htim3.Instance->CCR2 = 0;
 8003666:	4ba7      	ldr	r3, [pc, #668]	; (8003904 <main+0x318>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800366e:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <main+0x318>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8003676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800367a:	f002 f95f 	bl	800593c <HAL_Delay>

    //BWtest();
    uint8_t is_tx = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    //loraTesting(is_tx);
    // setting to go into ground station mode
    if (!is_tx) {
 8003684:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <main+0xaa>
        loraOrientation(is_tx);
 800368c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fd49 	bl	8003128 <loraOrientation>
    }
    //servoToggleTest();

    // LSM6dso setup
    orientation_init(&ori);
 8003696:	489e      	ldr	r0, [pc, #632]	; (8003910 <main+0x324>)
 8003698:	f001 fb51 	bl	8004d3e <orientation_init>
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800369c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a0:	4a9c      	ldr	r2, [pc, #624]	; (8003914 <main+0x328>)
 80036a2:	499d      	ldr	r1, [pc, #628]	; (8003918 <main+0x32c>)
 80036a4:	489d      	ldr	r0, [pc, #628]	; (800391c <main+0x330>)
 80036a6:	f7fd fd0f 	bl	80010c8 <LSM_init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
    __HAL_TIM_SET_COUNTER(&htim6,0);
 80036b0:	4b96      	ldr	r3, [pc, #600]	; (800390c <main+0x320>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
    imu_ready = 1;
 80036b8:	4b99      	ldr	r3, [pc, #612]	; (8003920 <main+0x334>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 80036be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036c2:	2277      	movs	r2, #119	; 0x77
 80036c4:	4997      	ldr	r1, [pc, #604]	; (8003924 <main+0x338>)
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd ff91 	bl	80015ee <SPL06_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd

    if (barostatus != 5) {
 80036d2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d010      	beq.n	80036fc <main+0x110>
        while (1) {

            HAL_Delay(100);
 80036da:	2064      	movs	r0, #100	; 0x64
 80036dc:	f002 f92e 	bl	800593c <HAL_Delay>
            changeLed(100, 0, 0);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	2064      	movs	r0, #100	; 0x64
 80036e6:	f000 fe53 	bl	8004390 <changeLed>
            HAL_Delay(100);
 80036ea:	2064      	movs	r0, #100	; 0x64
 80036ec:	f002 f926 	bl	800593c <HAL_Delay>
            changeLed(0, 0, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2100      	movs	r1, #0
 80036f4:	2000      	movs	r0, #0
 80036f6:	f000 fe4b 	bl	8004390 <changeLed>
            HAL_Delay(100);
 80036fa:	e7ee      	b.n	80036da <main+0xee>
        }
    }

    //SDTesting();

    float yrot = 0;
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    uint32_t lasttime = HAL_GetTick();
 8003704:	f002 f90e 	bl	8005924 <HAL_GetTick>
 8003708:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
    uint32_t nowtime = HAL_GetTick();
 800370c:	f002 f90a 	bl	8005924 <HAL_GetTick>
 8003710:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
    float dt = 0;
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    uint16_t rawadc;

    Orientation ori;
    orientation_init(&ori);
 800371c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fb0c 	bl	8004d3e <orientation_init>
    uint32_t counter = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of BuzzerQueue */
  osMessageQDef(BuzzerQueue, 6, uint16_t);
 800372c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003730:	4a7d      	ldr	r2, [pc, #500]	; (8003928 <main+0x33c>)
 8003732:	461c      	mov	r4, r3
 8003734:	4613      	mov	r3, r2
 8003736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BuzzerQueueHandle = osMessageCreate(osMessageQ(BuzzerQueue), NULL);
 800373c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f00c f97a 	bl	800fa3c <osMessageCreate>
 8003748:	4602      	mov	r2, r0
 800374a:	4b78      	ldr	r3, [pc, #480]	; (800392c <main+0x340>)
 800374c:	601a      	str	r2, [r3, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLedTask, osPriorityBelowNormal, 0, 128);
 800374e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003752:	4a77      	ldr	r2, [pc, #476]	; (8003930 <main+0x344>)
 8003754:	461c      	mov	r4, r3
 8003756:	4615      	mov	r5, r2
 8003758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800375a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8003764:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f00c f906 	bl	800f97c <osThreadCreate>
 8003770:	4602      	mov	r2, r0
 8003772:	4b70      	ldr	r3, [pc, #448]	; (8003934 <main+0x348>)
 8003774:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8003776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800377a:	4a6f      	ldr	r2, [pc, #444]	; (8003938 <main+0x34c>)
 800377c:	461c      	mov	r4, r3
 800377e:	4615      	mov	r5, r2
 8003780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 800378c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f00c f8f2 	bl	800f97c <osThreadCreate>
 8003798:	4602      	mov	r2, r0
 800379a:	4b68      	ldr	r3, [pc, #416]	; (800393c <main+0x350>)
 800379c:	601a      	str	r2, [r3, #0]

  /* definition and creation of stateMachineTas */
  osThreadDef(stateMachineTas, startStateMachine, osPriorityHigh, 0, 256);
 800379e:	f107 0320 	add.w	r3, r7, #32
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <main+0x354>)
 80037a4:	461c      	mov	r4, r3
 80037a6:	4615      	mov	r5, r2
 80037a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stateMachineTasHandle = osThreadCreate(osThread(stateMachineTas), NULL);
 80037b4:	f107 0320 	add.w	r3, r7, #32
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f00c f8de 	bl	800f97c <osThreadCreate>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b60      	ldr	r3, [pc, #384]	; (8003944 <main+0x358>)
 80037c4:	601a      	str	r2, [r3, #0]

  /* definition and creation of telemTask */
  osThreadDef(telemTask, StartTelemTask, osPriorityNormal, 0, 256);
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	4a5f      	ldr	r2, [pc, #380]	; (8003948 <main+0x35c>)
 80037ca:	461c      	mov	r4, r3
 80037cc:	4615      	mov	r5, r2
 80037ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemTaskHandle = osThreadCreate(osThread(telemTask), NULL);
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f00c f8cc 	bl	800f97c <osThreadCreate>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b59      	ldr	r3, [pc, #356]	; (800394c <main+0x360>)
 80037e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80037ea:	f00c f8b0 	bl	800f94e <osKernelStart>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //SPL06_Read(&baro);
        LSM_pollsensors(&imu);
 80037ee:	484b      	ldr	r0, [pc, #300]	; (800391c <main+0x330>)
 80037f0:	f7fd fce4 	bl	80011bc <LSM_pollsensors>
        //sprintf(printBuffer, "gx: %f, gy: %f, gz: %f\r\n", imu.gyroRPS[0], imu.gyroRPS[1], imu.gyroRPS[2]);
        //sprintf(printBuffer, "y:%f,o:%f,g:%f,V:%d\r\n", yrot, imu.gyroDPSOffset[1],
        //        imu.gyroDPS[1], rawadc);
        //sprintf(printBuffer, "T:%f\r\n", (float) (25 + (((rawadc - 943) * 3.3 / 4096.0)) / 0.0025));

        changeLed(0, 0, 100);
 80037f4:	2264      	movs	r2, #100	; 0x64
 80037f6:	2100      	movs	r1, #0
 80037f8:	2000      	movs	r0, #0
 80037fa:	f000 fdc9 	bl	8004390 <changeLed>
        nowtime = HAL_GetTick();
 80037fe:	f002 f891 	bl	8005924 <HAL_GetTick>
 8003802:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
        dt = (nowtime - lasttime) / 1000.0;
 8003806:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800380a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fe97 	bl	8000544 <__aeabi_ui2d>
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <main+0x364>)
 800381c:	f7fd f836 	bl	800088c <__aeabi_ddiv>
 8003820:	4603      	mov	r3, r0
 8003822:	460c      	mov	r4, r1
 8003824:	4618      	mov	r0, r3
 8003826:	4621      	mov	r1, r4
 8003828:	f7fd f9fe 	bl	8000c28 <__aeabi_d2f>
 800382c:	4603      	mov	r3, r0
 800382e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
        lasttime = nowtime;
 8003832:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003836:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

        orientation_setGyro(&ori, imu.gyroRPS);
 800383a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800383e:	4945      	ldr	r1, [pc, #276]	; (8003954 <main+0x368>)
 8003840:	4618      	mov	r0, r3
 8003842:	f001 faaa 	bl	8004d9a <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 8003846:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800384a:	4943      	ldr	r1, [pc, #268]	; (8003958 <main+0x36c>)
 800384c:	4618      	mov	r0, r3
 800384e:	f001 fabb 	bl	8004dc8 <orientation_setAcc>
        orientation_update(&ori, dt, 1);
 8003852:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003856:	2101      	movs	r1, #1
 8003858:	ed97 0a74 	vldr	s0, [r7, #464]	; 0x1d0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 facb 	bl	8004df8 <orientation_update>

        //sprintf(printBuffer, "z:%f,y:%f,x:%f\r\n", ori.eulerZYX[0], ori.eulerZYX[1], ori.eulerZYX[2]);
        if (counter % 30 == 0) {
 8003862:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8003866:	4b3d      	ldr	r3, [pc, #244]	; (800395c <main+0x370>)
 8003868:	fba3 2301 	umull	r2, r3, r3, r1
 800386c:	091a      	lsrs	r2, r3, #4
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	1aca      	subs	r2, r1, r3
 8003878:	2a00      	cmp	r2, #0
 800387a:	d139      	bne.n	80038f0 <main+0x304>
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 800387c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003880:	681b      	ldr	r3, [r3, #0]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fe80 	bl	8000588 <__aeabi_f2d>
 8003888:	4682      	mov	sl, r0
 800388a:	468b      	mov	fp, r1
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 800388c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003890:	685b      	ldr	r3, [r3, #4]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8003892:	4618      	mov	r0, r3
 8003894:	f7fc fe78 	bl	8000588 <__aeabi_f2d>
 8003898:	4604      	mov	r4, r0
 800389a:	460d      	mov	r5, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 800389c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038a0:	689b      	ldr	r3, [r3, #8]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe70 	bl	8000588 <__aeabi_f2d>
 80038a8:	4680      	mov	r8, r0
 80038aa:	4689      	mov	r9, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 80038ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038b0:	68db      	ldr	r3, [r3, #12]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fe68 	bl	8000588 <__aeabi_f2d>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80038c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038c4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80038c8:	e9cd 4500 	strd	r4, r5, [sp]
 80038cc:	4652      	mov	r2, sl
 80038ce:	465b      	mov	r3, fp
 80038d0:	4923      	ldr	r1, [pc, #140]	; (8003960 <main+0x374>)
 80038d2:	f00f ff25 	bl	8013720 <siprintf>
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.horQuat.w,ori.horQuat.v[0],ori.horQuat.v[1],ori.horQuat.v[2]);
            //sprintf(printBuffer, "Counter: %d\r\n",counter);
            //sprintf(printBuffer, "gx: %d, gy: %d, gz: %d\r\n", imu.rawGyro[0], imu.rawGyro[1], imu.rawGyro[2]);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 80038d6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fc98 	bl	8000210 <strlen>
 80038e0:	4603      	mov	r3, r0
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f00e fb60 	bl	8011fb0 <CDC_Transmit_FS>
        }
        counter++;
 80038f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80038f4:	3301      	adds	r3, #1
 80038f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

        HAL_Delay(1);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f002 f81e 	bl	800593c <HAL_Delay>
        LSM_pollsensors(&imu);
 8003900:	e775      	b.n	80037ee <main+0x202>
 8003902:	bf00      	nop
 8003904:	20004814 	.word	0x20004814
 8003908:	20004994 	.word	0x20004994
 800390c:	200048f8 	.word	0x200048f8
 8003910:	200045e8 	.word	0x200045e8
 8003914:	40020400 	.word	0x40020400
 8003918:	200046d8 	.word	0x200046d8
 800391c:	20004730 	.word	0x20004730
 8003920:	2000087d 	.word	0x2000087d
 8003924:	20004684 	.word	0x20004684
 8003928:	0801827c 	.word	0x0801827c
 800392c:	200048f4 	.word	0x200048f4
 8003930:	08018294 	.word	0x08018294
 8003934:	20004810 	.word	0x20004810
 8003938:	080182bc 	.word	0x080182bc
 800393c:	200049d4 	.word	0x200049d4
 8003940:	080182e8 	.word	0x080182e8
 8003944:	20004938 	.word	0x20004938
 8003948:	08018310 	.word	0x08018310
 800394c:	20004a38 	.word	0x20004a38
 8003950:	408f4000 	.word	0x408f4000
 8003954:	20004768 	.word	0x20004768
 8003958:	20004794 	.word	0x20004794
 800395c:	88888889 	.word	0x88888889
 8003960:	08018048 	.word	0x08018048

08003964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0ac      	sub	sp, #176	; 0xb0
 8003968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800396a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800396e:	2234      	movs	r2, #52	; 0x34
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f00f f833 	bl	80129de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003978:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	225c      	movs	r2, #92	; 0x5c
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f00f f824 	bl	80129de <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <SystemClock_Config+0x130>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <SystemClock_Config+0x130>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <SystemClock_Config+0x130>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <SystemClock_Config+0x134>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a37      	ldr	r2, [pc, #220]	; (8003a98 <SystemClock_Config+0x134>)
 80039bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <SystemClock_Config+0x134>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039ce:	2301      	movs	r3, #1
 80039d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039da:	2302      	movs	r3, #2
 80039dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039e8:	2304      	movs	r3, #4
 80039ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80039ee:	23b4      	movs	r3, #180	; 0xb4
 80039f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039f4:	2302      	movs	r3, #2
 80039f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80039fa:	2308      	movs	r3, #8
 80039fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a00:	2302      	movs	r3, #2
 8003a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f006 f996 	bl	8009d3c <HAL_RCC_OscConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003a16:	f001 f8db 	bl	8004bd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a1a:	f005 fb29 	bl	8009070 <HAL_PWREx_EnableOverDrive>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a24:	f001 f8d4 	bl	8004bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a28:	230f      	movs	r3, #15
 8003a2a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a30:	2300      	movs	r3, #0
 8003a32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a44:	2105      	movs	r1, #5
 8003a46:	4618      	mov	r0, r3
 8003a48:	f005 fb62 	bl	8009110 <HAL_RCC_ClockConfig>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003a52:	f001 f8bd 	bl	8004bd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a5a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8003a60:	2360      	movs	r3, #96	; 0x60
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003a64:	2302      	movs	r3, #2
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8003a68:	2304      	movs	r3, #4
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8003a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a74:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f005 fc94 	bl	80093a8 <HAL_RCCEx_PeriphCLKConfig>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8003a86:	f001 f8a3 	bl	8004bd0 <Error_Handler>
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	37b0      	adds	r7, #176	; 0xb0
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000

08003a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003aae:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003ab0:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <MX_ADC1_Init+0x9c>)
 8003ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ab4:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003ab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003aba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003ac2:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ace:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003ade:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <MX_ADC1_Init+0xa0>)
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003afc:	480d      	ldr	r0, [pc, #52]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003afe:	f001 ff3f 	bl	8005980 <HAL_ADC_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003b08:	f001 f862 	bl	8004bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003b0c:	230c      	movs	r3, #12
 8003b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b18:	463b      	mov	r3, r7
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4805      	ldr	r0, [pc, #20]	; (8003b34 <MX_ADC1_Init+0x98>)
 8003b1e:	f002 f8cb 	bl	8005cb8 <HAL_ADC_ConfigChannel>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003b28:	f001 f852 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	200048ac 	.word	0x200048ac
 8003b38:	40012000 	.word	0x40012000
 8003b3c:	0f000001 	.word	0x0f000001

08003b40 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <MX_I2C3_Init+0x54>)
 8003b48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <MX_I2C3_Init+0x58>)
 8003b4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b62:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <MX_I2C3_Init+0x50>)
 8003b7e:	f003 f8f5 	bl	8006d6c <HAL_I2C_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b88:	f001 f822 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20004684 	.word	0x20004684
 8003b94:	40005c00 	.word	0x40005c00
 8003b98:	000186a0 	.word	0x000186a0

08003b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <MX_SPI1_Init+0x68>)
 8003ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bd0:	2238      	movs	r2, #56	; 0x38
 8003bd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003be8:	220a      	movs	r2, #10
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bec:	4804      	ldr	r0, [pc, #16]	; (8003c00 <MX_SPI1_Init+0x64>)
 8003bee:	f006 faff 	bl	800a1f0 <HAL_SPI_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003bf8:	f000 ffea 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bfc:	bf00      	nop
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	2000493c 	.word	0x2000493c
 8003c04:	40013000 	.word	0x40013000

08003c08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c0e:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <MX_SPI2_Init+0x68>)
 8003c10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c12:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c54:	220a      	movs	r2, #10
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c58:	4804      	ldr	r0, [pc, #16]	; (8003c6c <MX_SPI2_Init+0x64>)
 8003c5a:	f006 fac9 	bl	800a1f0 <HAL_SPI_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c64:	f000 ffb4 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200046d8 	.word	0x200046d8
 8003c70:	40003800 	.word	0x40003800

08003c74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003c78:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <MX_SPI3_Init+0x68>)
 8003c7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003ca8:	2210      	movs	r2, #16
 8003caa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003cc4:	4804      	ldr	r0, [pc, #16]	; (8003cd8 <MX_SPI3_Init+0x64>)
 8003cc6:	f006 fa93 	bl	800a1f0 <HAL_SPI_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003cd0:	f000 ff7e 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20004854 	.word	0x20004854
 8003cdc:	40003c00 	.word	0x40003c00

08003ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce6:	f107 0320 	add.w	r3, r7, #32
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	611a      	str	r2, [r3, #16]
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003d0a:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d0c:	2259      	movs	r2, #89	; 0x59
 8003d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d10:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d18:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d1e:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d24:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d2a:	481e      	ldr	r0, [pc, #120]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d2c:	f007 fa39 	bl	800b1a2 <HAL_TIM_PWM_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003d36:	f000 ff4b 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d42:	f107 0320 	add.w	r3, r7, #32
 8003d46:	4619      	mov	r1, r3
 8003d48:	4816      	ldr	r0, [pc, #88]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d4a:	f008 f851 	bl	800bdf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003d54:	f000 ff3c 	bl	8004bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d58:	2360      	movs	r3, #96	; 0x60
 8003d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	480d      	ldr	r0, [pc, #52]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d70:	f007 fb88 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003d7a:	f000 ff29 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	220c      	movs	r2, #12
 8003d82:	4619      	mov	r1, r3
 8003d84:	4807      	ldr	r0, [pc, #28]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d86:	f007 fb7d 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003d90:	f000 ff1e 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d94:	4803      	ldr	r0, [pc, #12]	; (8003da4 <MX_TIM2_Init+0xc4>)
 8003d96:	f001 fb69 	bl	800546c <HAL_TIM_MspPostInit>

}
 8003d9a:	bf00      	nop
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20004994 	.word	0x20004994

08003da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	; 0x38
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dbc:	f107 0320 	add.w	r3, r7, #32
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003dd8:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003dda:	4a3f      	ldr	r2, [pc, #252]	; (8003ed8 <MX_TIM3_Init+0x130>)
 8003ddc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003dde:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003de0:	2259      	movs	r2, #89	; 0x59
 8003de2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de4:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8003dea:	4b3a      	ldr	r3, [pc, #232]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003dec:	22ff      	movs	r2, #255	; 0xff
 8003dee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df0:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df6:	4b37      	ldr	r3, [pc, #220]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dfc:	4835      	ldr	r0, [pc, #212]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003dfe:	f007 f95d 	bl	800b0bc <HAL_TIM_Base_Init>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003e08:	f000 fee2 	bl	8004bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e16:	4619      	mov	r1, r3
 8003e18:	482e      	ldr	r0, [pc, #184]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003e1a:	f007 fbf9 	bl	800b610 <HAL_TIM_ConfigClockSource>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003e24:	f000 fed4 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e28:	482a      	ldr	r0, [pc, #168]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003e2a:	f007 f9ba 	bl	800b1a2 <HAL_TIM_PWM_Init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003e34:	f000 fecc 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e40:	f107 0320 	add.w	r3, r7, #32
 8003e44:	4619      	mov	r1, r3
 8003e46:	4823      	ldr	r0, [pc, #140]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003e48:	f007 ffd2 	bl	800bdf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003e52:	f000 febd 	bl	8004bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e56:	2360      	movs	r3, #96	; 0x60
 8003e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4819      	ldr	r0, [pc, #100]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003e6e:	f007 fb09 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003e78:	f000 feaa 	bl	8004bd0 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	2204      	movs	r2, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4813      	ldr	r0, [pc, #76]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003e88:	f007 fafc 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003e92:	f000 fe9d 	bl	8004bd0 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003e96:	2302      	movs	r3, #2
 8003e98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003ea2:	f007 faef 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003eac:	f000 fe90 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	220c      	movs	r2, #12
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003eb8:	f007 fae4 	bl	800b484 <HAL_TIM_PWM_ConfigChannel>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003ec2:	f000 fe85 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ec6:	4803      	ldr	r0, [pc, #12]	; (8003ed4 <MX_TIM3_Init+0x12c>)
 8003ec8:	f001 fad0 	bl	800546c <HAL_TIM_MspPostInit>

}
 8003ecc:	bf00      	nop
 8003ece:	3738      	adds	r7, #56	; 0x38
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20004814 	.word	0x20004814
 8003ed8:	40000400 	.word	0x40000400

08003edc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <MX_TIM6_Init+0x64>)
 8003eec:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <MX_TIM6_Init+0x68>)
 8003eee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <MX_TIM6_Init+0x64>)
 8003ef2:	2259      	movs	r2, #89	; 0x59
 8003ef4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <MX_TIM6_Init+0x64>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <MX_TIM6_Init+0x64>)
 8003efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <MX_TIM6_Init+0x64>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f0a:	480d      	ldr	r0, [pc, #52]	; (8003f40 <MX_TIM6_Init+0x64>)
 8003f0c:	f007 f8d6 	bl	800b0bc <HAL_TIM_Base_Init>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003f16:	f000 fe5b 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f22:	463b      	mov	r3, r7
 8003f24:	4619      	mov	r1, r3
 8003f26:	4806      	ldr	r0, [pc, #24]	; (8003f40 <MX_TIM6_Init+0x64>)
 8003f28:	f007 ff62 	bl	800bdf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003f32:	f000 fe4d 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200048f8 	.word	0x200048f8
 8003f44:	40001000 	.word	0x40001000

08003f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <MX_DMA_Init+0x4c>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <MX_DMA_Init+0x4c>)
 8003f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <MX_DMA_Init+0x4c>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2105      	movs	r1, #5
 8003f6e:	200e      	movs	r0, #14
 8003f70:	f002 f988 	bl	8006284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003f74:	200e      	movs	r0, #14
 8003f76:	f002 f9a1 	bl	80062bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2105      	movs	r1, #5
 8003f7e:	200f      	movs	r0, #15
 8003f80:	f002 f980 	bl	8006284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003f84:	200f      	movs	r0, #15
 8003f86:	f002 f999 	bl	80062bc <HAL_NVIC_EnableIRQ>

}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800

08003f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	4b75      	ldr	r3, [pc, #468]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	4a74      	ldr	r2, [pc, #464]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fbe:	4b72      	ldr	r3, [pc, #456]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	4b6e      	ldr	r3, [pc, #440]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	4a6d      	ldr	r2, [pc, #436]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fda:	4b6b      	ldr	r3, [pc, #428]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	4b67      	ldr	r3, [pc, #412]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4a66      	ldr	r2, [pc, #408]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff6:	4b64      	ldr	r3, [pc, #400]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	4b60      	ldr	r3, [pc, #384]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a5f      	ldr	r2, [pc, #380]	; (8004188 <MX_GPIO_Init+0x1f0>)
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b5d      	ldr	r3, [pc, #372]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4b59      	ldr	r3, [pc, #356]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a58      	ldr	r2, [pc, #352]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8004028:	f043 0308 	orr.w	r3, r3, #8
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b56      	ldr	r3, [pc, #344]	; (8004188 <MX_GPIO_Init+0x1f0>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_POWER_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 800403a:	2200      	movs	r2, #0
 800403c:	f248 0104 	movw	r1, #32772	; 0x8004
 8004040:	4852      	ldr	r0, [pc, #328]	; (800418c <MX_GPIO_Init+0x1f4>)
 8004042:	f002 fe61 	bl	8006d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_NSS_Pin|VTX_BTN1_Pin, GPIO_PIN_RESET);
 8004046:	2200      	movs	r2, #0
 8004048:	2130      	movs	r1, #48	; 0x30
 800404a:	4851      	ldr	r0, [pc, #324]	; (8004190 <MX_GPIO_Init+0x1f8>)
 800404c:	f002 fe5c 	bl	8006d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004056:	484f      	ldr	r0, [pc, #316]	; (8004194 <MX_GPIO_Init+0x1fc>)
 8004058:	f002 fe56 	bl	8006d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 800405c:	2201      	movs	r2, #1
 800405e:	2140      	movs	r1, #64	; 0x40
 8004060:	484c      	ldr	r0, [pc, #304]	; (8004194 <MX_GPIO_Init+0x1fc>)
 8004062:	f002 fe51 	bl	8006d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8004066:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800406a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800406c:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <MX_GPIO_Init+0x200>)
 800406e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4619      	mov	r1, r3
 800407a:	4845      	ldr	r0, [pc, #276]	; (8004190 <MX_GPIO_Init+0x1f8>)
 800407c:	f002 fc9a 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RBF_Pin */
  GPIO_InitStruct.Pin = RBF_Pin;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004084:	2300      	movs	r3, #0
 8004086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004088:	2301      	movs	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RBF_GPIO_Port, &GPIO_InitStruct);
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	4619      	mov	r1, r3
 8004092:	483e      	ldr	r0, [pc, #248]	; (800418c <MX_GPIO_Init+0x1f4>)
 8004094:	f002 fc8e 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_POWER_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = CAM_POWER_Pin|LORA_NSS_Pin;
 8004098:	f248 0304 	movw	r3, #32772	; 0x8004
 800409c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800409e:	2301      	movs	r3, #1
 80040a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a6:	2300      	movs	r3, #0
 80040a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040aa:	f107 0314 	add.w	r3, r7, #20
 80040ae:	4619      	mov	r1, r3
 80040b0:	4836      	ldr	r0, [pc, #216]	; (800418c <MX_GPIO_Init+0x1f4>)
 80040b2:	f002 fc7f 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 80040b6:	2310      	movs	r3, #16
 80040b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ba:	2301      	movs	r3, #1
 80040bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4619      	mov	r1, r3
 80040cc:	4830      	ldr	r0, [pc, #192]	; (8004190 <MX_GPIO_Init+0x1f8>)
 80040ce:	f002 fc71 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VTX_BTN1_Pin */
  GPIO_InitStruct.Pin = VTX_BTN1_Pin;
 80040d2:	2320      	movs	r3, #32
 80040d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040da:	2302      	movs	r3, #2
 80040dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VTX_BTN1_GPIO_Port, &GPIO_InitStruct);
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	4619      	mov	r1, r3
 80040e8:	4829      	ldr	r0, [pc, #164]	; (8004190 <MX_GPIO_Init+0x1f8>)
 80040ea:	f002 fc63 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 80040ee:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80040f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f4:	2301      	movs	r3, #1
 80040f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fc:	2300      	movs	r3, #0
 80040fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	4619      	mov	r1, r3
 8004106:	4823      	ldr	r0, [pc, #140]	; (8004194 <MX_GPIO_Init+0x1fc>)
 8004108:	f002 fc54 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 800410c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 800411a:	f107 0314 	add.w	r3, r7, #20
 800411e:	4619      	mov	r1, r3
 8004120:	481b      	ldr	r0, [pc, #108]	; (8004190 <MX_GPIO_Init+0x1f8>)
 8004122:	f002 fc47 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8004126:	2304      	movs	r3, #4
 8004128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	4619      	mov	r1, r3
 8004138:	4818      	ldr	r0, [pc, #96]	; (800419c <MX_GPIO_Init+0x204>)
 800413a:	f002 fc3b 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800413e:	2310      	movs	r3, #16
 8004140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800414a:	f107 0314 	add.w	r3, r7, #20
 800414e:	4619      	mov	r1, r3
 8004150:	4810      	ldr	r0, [pc, #64]	; (8004194 <MX_GPIO_Init+0x1fc>)
 8004152:	f002 fc2f 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BREAKWIRE_Pin ARM_Pin */
  GPIO_InitStruct.Pin = BREAKWIRE_Pin|ARM_Pin;
 8004156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800415a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004160:	2301      	movs	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4619      	mov	r1, r3
 800416a:	480a      	ldr	r0, [pc, #40]	; (8004194 <MX_GPIO_Init+0x1fc>)
 800416c:	f002 fc22 	bl	80069b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004170:	2200      	movs	r2, #0
 8004172:	2105      	movs	r1, #5
 8004174:	2028      	movs	r0, #40	; 0x28
 8004176:	f002 f885 	bl	8006284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800417a:	2028      	movs	r0, #40	; 0x28
 800417c:	f002 f89e 	bl	80062bc <HAL_NVIC_EnableIRQ>

}
 8004180:	bf00      	nop
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	40020000 	.word	0x40020000
 8004190:	40020800 	.word	0x40020800
 8004194:	40020400 	.word	0x40020400
 8004198:	10110000 	.word	0x10110000
 800419c:	40020c00 	.word	0x40020c00

080041a0 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
 80041aa:	460b      	mov	r3, r1
 80041ac:	80bb      	strh	r3, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <playtone+0xf0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 80041ba:	4b35      	ldr	r3, [pc, #212]	; (8004290 <playtone+0xf0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 80041c2:	4b33      	ldr	r3, [pc, #204]	; (8004290 <playtone+0xf0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f9c9 	bl	8000564 <__aeabi_i2d>
 80041d2:	4603      	mov	r3, r0
 80041d4:	460c      	mov	r4, r1
 80041d6:	461a      	mov	r2, r3
 80041d8:	4623      	mov	r3, r4
 80041da:	a12b      	add	r1, pc, #172	; (adr r1, 8004288 <playtone+0xe8>)
 80041dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e0:	f7fc fb54 	bl	800088c <__aeabi_ddiv>
 80041e4:	4603      	mov	r3, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	4618      	mov	r0, r3
 80041ea:	4621      	mov	r1, r4
 80041ec:	f7fc fcfc 	bl	8000be8 <__aeabi_d2uiz>
 80041f0:	4603      	mov	r3, r0
 80041f2:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 80041f4:	4b26      	ldr	r3, [pc, #152]	; (8004290 <playtone+0xf0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 80041fc:	4b24      	ldr	r3, [pc, #144]	; (8004290 <playtone+0xf0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	fb02 f203 	mul.w	r2, r2, r3
 800420c:	4b20      	ldr	r3, [pc, #128]	; (8004290 <playtone+0xf0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4920      	ldr	r1, [pc, #128]	; (8004294 <playtone+0xf4>)
 8004212:	fba1 1202 	umull	r1, r2, r1, r2
 8004216:	0992      	lsrs	r2, r2, #6
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 800421a:	8afb      	ldrh	r3, [r7, #22]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	fb02 f203 	mul.w	r2, r2, r3
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <playtone+0xf0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	0a12      	lsrs	r2, r2, #8
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 800422a:	8abb      	ldrh	r3, [r7, #20]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	fb02 f203 	mul.w	r2, r2, r3
 8004232:	4b17      	ldr	r3, [pc, #92]	; (8004290 <playtone+0xf0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	0a12      	lsrs	r2, r2, #8
 8004238:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 800423a:	8a7b      	ldrh	r3, [r7, #18]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	fb02 f203 	mul.w	r2, r2, r3
 8004242:	4b13      	ldr	r3, [pc, #76]	; (8004290 <playtone+0xf0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	0a12      	lsrs	r2, r2, #8
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 800424a:	88bb      	ldrh	r3, [r7, #4]
 800424c:	4618      	mov	r0, r3
 800424e:	f001 fb75 	bl	800593c <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <playtone+0xf0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <playtone+0xf0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	22ff      	movs	r2, #255	; 0xff
 8004260:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <playtone+0xf0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	8afa      	ldrh	r2, [r7, #22]
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <playtone+0xf0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	8aba      	ldrh	r2, [r7, #20]
 8004270:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <playtone+0xf0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	8a7a      	ldrh	r2, [r7, #18]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd90      	pop	{r4, r7, pc}
 8004282:	bf00      	nop
 8004284:	f3af 8000 	nop.w
 8004288:	00000000 	.word	0x00000000
 800428c:	412e8480 	.word	0x412e8480
 8004290:	20004814 	.word	0x20004814
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <playtoneRTOS>:

void playtoneRTOS(uint16_t freq, uint16_t ms, uint8_t vol) {
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
 80042a2:	460b      	mov	r3, r1
 80042a4:	80bb      	strh	r3, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <playtoneRTOS+0xf0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 80042b2:	4b35      	ldr	r3, [pc, #212]	; (8004388 <playtoneRTOS+0xf0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 80042ba:	4b33      	ldr	r3, [pc, #204]	; (8004388 <playtoneRTOS+0xf0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc f94d 	bl	8000564 <__aeabi_i2d>
 80042ca:	4603      	mov	r3, r0
 80042cc:	460c      	mov	r4, r1
 80042ce:	461a      	mov	r2, r3
 80042d0:	4623      	mov	r3, r4
 80042d2:	a12b      	add	r1, pc, #172	; (adr r1, 8004380 <playtoneRTOS+0xe8>)
 80042d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d8:	f7fc fad8 	bl	800088c <__aeabi_ddiv>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	4618      	mov	r0, r3
 80042e2:	4621      	mov	r1, r4
 80042e4:	f7fc fc80 	bl	8000be8 <__aeabi_d2uiz>
 80042e8:	4603      	mov	r3, r0
 80042ea:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 80042ec:	4b26      	ldr	r3, [pc, #152]	; (8004388 <playtoneRTOS+0xf0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 80042f4:	4b24      	ldr	r3, [pc, #144]	; (8004388 <playtoneRTOS+0xf0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	fb02 f203 	mul.w	r2, r2, r3
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <playtoneRTOS+0xf0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4920      	ldr	r1, [pc, #128]	; (800438c <playtoneRTOS+0xf4>)
 800430a:	fba1 1202 	umull	r1, r2, r1, r2
 800430e:	0992      	lsrs	r2, r2, #6
 8004310:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8004312:	8afb      	ldrh	r3, [r7, #22]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	fb02 f203 	mul.w	r2, r2, r3
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <playtoneRTOS+0xf0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0a12      	lsrs	r2, r2, #8
 8004320:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8004322:	8abb      	ldrh	r3, [r7, #20]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	fb02 f203 	mul.w	r2, r2, r3
 800432a:	4b17      	ldr	r3, [pc, #92]	; (8004388 <playtoneRTOS+0xf0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	0a12      	lsrs	r2, r2, #8
 8004330:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8004332:	8a7b      	ldrh	r3, [r7, #18]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	fb02 f203 	mul.w	r2, r2, r3
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <playtoneRTOS+0xf0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0a12      	lsrs	r2, r2, #8
 8004340:	641a      	str	r2, [r3, #64]	; 0x40

    osDelay(ms);
 8004342:	88bb      	ldrh	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	f00b fb65 	bl	800fa14 <osDelay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <playtoneRTOS+0xf0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <playtoneRTOS+0xf0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	22ff      	movs	r2, #255	; 0xff
 8004358:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <playtoneRTOS+0xf0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	8afa      	ldrh	r2, [r7, #22]
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <playtoneRTOS+0xf0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	8aba      	ldrh	r2, [r7, #20]
 8004368:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <playtoneRTOS+0xf0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	8a7a      	ldrh	r2, [r7, #18]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}
 800437a:	bf00      	nop
 800437c:	f3af 8000 	nop.w
 8004380:	00000000 	.word	0x00000000
 8004384:	412e8480 	.word	0x412e8480
 8004388:	20004814 	.word	0x20004814
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
 800439a:	460b      	mov	r3, r1
 800439c:	71bb      	strb	r3, [r7, #6]
 800439e:	4613      	mov	r3, r2
 80043a0:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <changeLed+0x38>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	79fa      	ldrb	r2, [r7, #7]
 80043a8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <changeLed+0x38>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	79ba      	ldrb	r2, [r7, #6]
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <changeLed+0x38>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	797a      	ldrb	r2, [r7, #5]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20004814 	.word	0x20004814

080043cc <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80043d4:	f00d fd1a 	bl	8011e0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        //changeLed(0, 100, 0);
        osDelay(1000);
 80043d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043dc:	f00b fb1a 	bl	800fa14 <osDelay>
        //changeLed(0, 0, 100);
        osDelay(1000);
 80043e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e4:	f00b fb16 	bl	800fa14 <osDelay>
        osDelay(1000);
 80043e8:	e7f6      	b.n	80043d8 <StartLedTask+0xc>
	...

080043ec <StartMusicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
    /* Infinite loop */

    uint16_t vol = 13; // 10
 80043f4:	230d      	movs	r3, #13
 80043f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t beatlength = 50; // determines tempo
 80043f8:	2332      	movs	r3, #50	; 0x32
 80043fa:	847b      	strh	r3, [r7, #34]	; 0x22
    float beatseparationconstant = 0.3;
 80043fc:	4b79      	ldr	r3, [pc, #484]	; (80045e4 <StartMusicTask+0x1f8>)
 80043fe:	61fb      	str	r3, [r7, #28]

    int a = 4; // part index
 8004400:	2304      	movs	r3, #4
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
    int b = 0; // song index
 8004404:	2300      	movs	r3, #0
 8004406:	633b      	str	r3, [r7, #48]	; 0x30
    int c; // lyric index

    osEvent messagebox;
    uint16_t sounddelay;

    int ksp_playhead = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
    int ksp_total = 20;
 800440c:	2314      	movs	r3, #20
 800440e:	61bb      	str	r3, [r7, #24]

    for (;;) {
        if (is_soft_enabled()) {
 8004410:	f7fe fda4 	bl	8002f5c <is_soft_enabled>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01c      	beq.n	8004454 <StartMusicTask+0x68>
            messagebox = osMessageGet(BuzzerQueueHandle, 1000);
 800441a:	4b73      	ldr	r3, [pc, #460]	; (80045e8 <StartMusicTask+0x1fc>)
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004426:	4618      	mov	r0, r3
 8004428:	f00b fb72 	bl	800fb10 <osMessageGet>
            if (messagebox.status && messagebox.value.v) {
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ee      	beq.n	8004410 <StartMusicTask+0x24>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0eb      	beq.n	8004410 <StartMusicTask+0x24>
                sounddelay = messagebox.value.v;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	82fb      	strh	r3, [r7, #22]
                playtoneRTOS(OPTIMAL_BUZZER_FREQ, sounddelay,
 800443c:	8afb      	ldrh	r3, [r7, #22]
 800443e:	2246      	movs	r2, #70	; 0x46
 8004440:	4619      	mov	r1, r3
 8004442:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004446:	f7ff ff27 	bl	8004298 <playtoneRTOS>
                        OPTIMAL_BUZZER_DUTY);
                osDelay(sounddelay);
 800444a:	8afb      	ldrh	r3, [r7, #22]
 800444c:	4618      	mov	r0, r3
 800444e:	f00b fae1 	bl	800fa14 <osDelay>
 8004452:	e7dd      	b.n	8004410 <StartMusicTask+0x24>
            }


        }
        else if (buzzer_setting == RICK){
 8004454:	4b65      	ldr	r3, [pc, #404]	; (80045ec <StartMusicTask+0x200>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b02      	cmp	r3, #2
 800445a:	f040 80a5 	bne.w	80045a8 <StartMusicTask+0x1bc>
            uint16_t notelength;
            if (a == 1 || a == 2) {
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	2b01      	cmp	r3, #1
 8004462:	d002      	beq.n	800446a <StartMusicTask+0x7e>
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	2b02      	cmp	r3, #2
 8004468:	d125      	bne.n	80044b6 <StartMusicTask+0xca>
                // intro
                notelength = beatlength * song1_intro_rhythmn[b];
 800446a:	4a61      	ldr	r2, [pc, #388]	; (80045f0 <StartMusicTask+0x204>)
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004472:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004474:	fb12 f303 	smulbb	r3, r2, r3
 8004478:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_intro_melody[b] > 0) {
 800447a:	4a5e      	ldr	r2, [pc, #376]	; (80045f4 <StartMusicTask+0x208>)
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <StartMusicTask+0xae>
                    playtoneRTOS(song1_intro_melody[b], notelength, vol);
 8004486:	4a5b      	ldr	r2, [pc, #364]	; (80045f4 <StartMusicTask+0x208>)
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff feff 	bl	8004298 <playtoneRTOS>
                }
                b++;
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	3301      	adds	r3, #1
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d966      	bls.n	8004574 <StartMusicTask+0x188>
                    a++;
 80044a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a8:	3301      	adds	r3, #1
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 80044b4:	e05e      	b.n	8004574 <StartMusicTask+0x188>
                }
            } else if (a == 3 || a == 5) {
 80044b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d002      	beq.n	80044c2 <StartMusicTask+0xd6>
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d12a      	bne.n	8004518 <StartMusicTask+0x12c>
                // verse
                notelength = beatlength * 2 * song1_verse1_rhythmn[b];
 80044c2:	4a4d      	ldr	r2, [pc, #308]	; (80045f8 <StartMusicTask+0x20c>)
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80044cc:	fb12 f303 	smulbb	r3, r2, r3
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_verse1_melody[b] > 0) {
 80044d6:	4a49      	ldr	r2, [pc, #292]	; (80045fc <StartMusicTask+0x210>)
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <StartMusicTask+0x110>
                    playtoneRTOS(song1_verse1_melody[b], notelength, vol);
 80044e2:	4a46      	ldr	r2, [pc, #280]	; (80045fc <StartMusicTask+0x210>)
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fed1 	bl	8004298 <playtoneRTOS>
                    c++;
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	3301      	adds	r3, #1
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	3301      	adds	r3, #1
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b3e      	cmp	r3, #62	; 0x3e
 8004506:	d935      	bls.n	8004574 <StartMusicTask+0x188>
                    a++;
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	3301      	adds	r3, #1
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 8004516:	e02d      	b.n	8004574 <StartMusicTask+0x188>
                }
            } else if (a == 4 || a == 6) {
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	2b04      	cmp	r3, #4
 800451c:	d002      	beq.n	8004524 <StartMusicTask+0x138>
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	2b06      	cmp	r3, #6
 8004522:	d127      	bne.n	8004574 <StartMusicTask+0x188>
                // chorus
                notelength = beatlength * song1_chorus_rhythmn[b];
 8004524:	4a36      	ldr	r2, [pc, #216]	; (8004600 <StartMusicTask+0x214>)
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800452c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800452e:	fb12 f303 	smulbb	r3, r2, r3
 8004532:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_chorus_melody[b] > 0) {
 8004534:	4a33      	ldr	r2, [pc, #204]	; (8004604 <StartMusicTask+0x218>)
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <StartMusicTask+0x16e>
                    playtoneRTOS(song1_chorus_melody[b], notelength, vol);
 8004540:	4a30      	ldr	r2, [pc, #192]	; (8004604 <StartMusicTask+0x218>)
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004548:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fea2 	bl	8004298 <playtoneRTOS>
                    c++;
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	3301      	adds	r3, #1
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	3301      	adds	r3, #1
 800455e:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_chorus_melody) / sizeof(uint16_t)) {
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2b3a      	cmp	r3, #58	; 0x3a
 8004564:	d906      	bls.n	8004574 <StartMusicTask+0x188>
                    a++;
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004568:	3301      	adds	r3, #1
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            osDelay(notelength);
 8004574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004576:	4618      	mov	r0, r3
 8004578:	f00b fa4c 	bl	800fa14 <osDelay>
            //noTone(piezo);

            osDelay(notelength * beatseparationconstant);
 800457c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004586:	edd7 7a07 	vldr	s15, [r7, #28]
 800458a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004592:	ee17 0a90 	vmov	r0, s15
 8004596:	f00b fa3d 	bl	800fa14 <osDelay>
            if (a == 7) { // loop back around to beginning of song
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	2b07      	cmp	r3, #7
 800459e:	f47f af37 	bne.w	8004410 <StartMusicTask+0x24>
                a = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
 80045a6:	e733      	b.n	8004410 <StartMusicTask+0x24>
            }
        }
        else if (buzzer_setting == KSP_MAIN) {
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <StartMusicTask+0x200>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f47f af2f 	bne.w	8004410 <StartMusicTask+0x24>
            playtoneRTOS(ksp_tunes[ksp_playhead], ksp_delays[ksp_playhead], vol);
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <StartMusicTask+0x21c>)
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <StartMusicTask+0x220>)
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	f7ff fe66 	bl	8004298 <playtoneRTOS>
            ksp_playhead = (ksp_playhead + 1) % ksp_total;
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	3301      	adds	r3, #1
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	fb93 f2f2 	sdiv	r2, r3, r2
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	fb01 f202 	mul.w	r2, r1, r2
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
        if (is_soft_enabled()) {
 80045e0:	e716      	b.n	8004410 <StartMusicTask+0x24>
 80045e2:	bf00      	nop
 80045e4:	3e99999a 	.word	0x3e99999a
 80045e8:	200048f4 	.word	0x200048f4
 80045ec:	20000001 	.word	0x20000001
 80045f0:	20000020 	.word	0x20000020
 80045f4:	20000004 	.word	0x20000004
 80045f8:	200000bc 	.word	0x200000bc
 80045fc:	2000003c 	.word	0x2000003c
 8004600:	200001b4 	.word	0x200001b4
 8004604:	2000013c 	.word	0x2000013c
 8004608:	2000022c 	.word	0x2000022c
 800460c:	20000254 	.word	0x20000254

08004610 <startStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStateMachine */
void startStateMachine(void const * argument)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStateMachine */

    uint32_t launchTime = osKernelSysTick();
 8004618:	f00b f9a0 	bl	800f95c <osKernelSysTick>
 800461c:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t currentTime = osKernelSysTick();
 800461e:	f00b f99d 	bl	800f95c <osKernelSysTick>
 8004622:	6238      	str	r0, [r7, #32]
    uint32_t timeSinceLaunch = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
    Servo deployServo;
    servo_init(&deployServo, &htim2, &htim2.Instance->CCR4);
 8004628:	4bb3      	ldr	r3, [pc, #716]	; (80048f8 <startStateMachine+0x2e8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004630:	f107 0308 	add.w	r3, r7, #8
 8004634:	49b0      	ldr	r1, [pc, #704]	; (80048f8 <startStateMachine+0x2e8>)
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fa28 	bl	8001a8c <servo_init>
    servo_disable(&deployServo);
 800463c:	f107 0308 	add.w	r3, r7, #8
 8004640:	4618      	mov	r0, r3
 8004642:	f7fd fa57 	bl	8001af4 <servo_disable>

    /* Infinite loop */
    for (;;) {

        currentTime = osKernelSysTick();
 8004646:	f00b f989 	bl	800f95c <osKernelSysTick>
 800464a:	6238      	str	r0, [r7, #32]
        timeSinceLaunch = currentTime - launchTime;
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	61fb      	str	r3, [r7, #28]

        if (is_soft_enabled()) {
 8004654:	f7fe fc82 	bl	8002f5c <is_soft_enabled>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8124 	beq.w	80048a8 <startStateMachine+0x298>
            switch (flight_state) {
 8004660:	4ba6      	ldr	r3, [pc, #664]	; (80048fc <startStateMachine+0x2ec>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b07      	cmp	r3, #7
 8004666:	f200 813d 	bhi.w	80048e4 <startStateMachine+0x2d4>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <startStateMachine+0x60>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004691 	.word	0x08004691
 8004674:	080046dd 	.word	0x080046dd
 8004678:	0800474f 	.word	0x0800474f
 800467c:	08004791 	.word	0x08004791
 8004680:	080047df 	.word	0x080047df
 8004684:	0800481d 	.word	0x0800481d
 8004688:	08004881 	.word	0x08004881
 800468c:	080048a1 	.word	0x080048a1
            case FLIGHT_ERROR:
                // be annoying TODO
                buzzer_beep(BEEP_LONG);
 8004690:	2032      	movs	r0, #50	; 0x32
 8004692:	f7fe fc9d 	bl	8002fd0 <buzzer_beep>

                // exit the state once we're no longer armed,
                // if battery voltage is in good state
                // and if there's a squib connected if one is necessary
                changeLed(0, 0, 0);
 8004696:	2200      	movs	r2, #0
 8004698:	2100      	movs	r1, #0
 800469a:	2000      	movs	r0, #0
 800469c:	f7ff fe78 	bl	8004390 <changeLed>
                if (!is_armed() && get_battery_voltage() > BATTERY_EMPTY_LIMIT) {
 80046a0:	f7fe fc34 	bl	8002f0c <is_armed>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 8111 	bne.w	80048ce <startStateMachine+0x2be>
 80046ac:	f7fe fbfc 	bl	8002ea8 <get_battery_voltage>
 80046b0:	eeb0 7a40 	vmov.f32	s14, s0
 80046b4:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80046b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c0:	dc00      	bgt.n	80046c4 <startStateMachine+0xb4>
                    buzzer_beep(BEEP_SHORT);
                    buzzer_beep(BEEP_SHORT);
                    //set_status_led(ON);
                    flight_state = IDLE;
                }
                break;
 80046c2:	e104      	b.n	80048ce <startStateMachine+0x2be>
                    buzzer_clear_queue();
 80046c4:	f7fe fcb0 	bl	8003028 <buzzer_clear_queue>
                    buzzer_beep(BEEP_SHORT);
 80046c8:	200c      	movs	r0, #12
 80046ca:	f7fe fc81 	bl	8002fd0 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80046ce:	200c      	movs	r0, #12
 80046d0:	f7fe fc7e 	bl	8002fd0 <buzzer_beep>
                    flight_state = IDLE;
 80046d4:	4b89      	ldr	r3, [pc, #548]	; (80048fc <startStateMachine+0x2ec>)
 80046d6:	2202      	movs	r2, #2
 80046d8:	701a      	strb	r2, [r3, #0]
                break;
 80046da:	e0f8      	b.n	80048ce <startStateMachine+0x2be>

            case SYSTEMS_CHECK:
                // this state is the entry state, it performs startup checking of some peripherals
                changeLed(100, 0, 0);
 80046dc:	2200      	movs	r2, #0
 80046de:	2100      	movs	r1, #0
 80046e0:	2064      	movs	r0, #100	; 0x64
 80046e2:	f7ff fe55 	bl	8004390 <changeLed>
                // close the servo if necessary
                servo_writeangle(&deployServo, SERVO_CLOSED_POSITION);
 80046e6:	f107 0308 	add.w	r3, r7, #8
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fd f9df 	bl	8001ab0 <servo_writeangle>

                float vbat = get_battery_voltage();
 80046f2:	f7fe fbd9 	bl	8002ea8 <get_battery_voltage>
 80046f6:	ed87 0a06 	vstr	s0, [r7, #24]

                // enable power to camera/video transmitter
                if (vbat > 7.4) {
 80046fa:	69b8      	ldr	r0, [r7, #24]
 80046fc:	f7fb ff44 	bl	8000588 <__aeabi_f2d>
 8004700:	a37b      	add	r3, pc, #492	; (adr r3, 80048f0 <startStateMachine+0x2e0>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fc fa27 	bl	8000b58 <__aeabi_dcmpgt>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <startStateMachine+0x106>
                    restart_camera_with_recording();
 8004710:	f7fe fce4 	bl	80030dc <restart_camera_with_recording>
 8004714:	e001      	b.n	800471a <startStateMachine+0x10a>
                } else {
                    disable_camera();
 8004716:	f7fe fcc7 	bl	80030a8 <disable_camera>
                }

                // check if the battery is empty
                if (vbat <= BATTERY_EMPTY_LIMIT) {
 800471a:	edd7 7a06 	vldr	s15, [r7, #24]
 800471e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472a:	d803      	bhi.n	8004734 <startStateMachine+0x124>
                    flight_state = FLIGHT_ERROR;
 800472c:	4b73      	ldr	r3, [pc, #460]	; (80048fc <startStateMachine+0x2ec>)
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
                    break;
 8004732:	e0d7      	b.n	80048e4 <startStateMachine+0x2d4>
                }

                // if everything's okay, go into idle
                buzzer_beep(BEEP_SHORT);
 8004734:	200c      	movs	r0, #12
 8004736:	f7fe fc4b 	bl	8002fd0 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 800473a:	200c      	movs	r0, #12
 800473c:	f7fe fc48 	bl	8002fd0 <buzzer_beep>
                set_status_led(1);
 8004740:	2001      	movs	r0, #1
 8004742:	f7fe fcdd 	bl	8003100 <set_status_led>
                flight_state = IDLE;
 8004746:	4b6d      	ldr	r3, [pc, #436]	; (80048fc <startStateMachine+0x2ec>)
 8004748:	2202      	movs	r2, #2
 800474a:	701a      	strb	r2, [r3, #0]
                break;
 800474c:	e0ca      	b.n	80048e4 <startStateMachine+0x2d4>

            case IDLE:
                changeLed(0, 100, 0);
 800474e:	2200      	movs	r2, #0
 8004750:	2164      	movs	r1, #100	; 0x64
 8004752:	2000      	movs	r0, #0
 8004754:	f7ff fe1c 	bl	8004390 <changeLed>
                if (is_armed()) {
 8004758:	f7fe fbd8 	bl	8002f0c <is_armed>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <startStateMachine+0x15a>
                    flight_state = FLIGHT_ERROR;
 8004762:	4b66      	ldr	r3, [pc, #408]	; (80048fc <startStateMachine+0x2ec>)
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
                    break;
 8004768:	e0bc      	b.n	80048e4 <startStateMachine+0x2d4>
                }

                if (is_breakwire_connected()) {
 800476a:	f7fe fc03 	bl	8002f74 <is_breakwire_connected>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80ae 	beq.w	80048d2 <startStateMachine+0x2c2>
                    buzzer_beep(BEEP_SHORT);
 8004776:	200c      	movs	r0, #12
 8004778:	f7fe fc2a 	bl	8002fd0 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 800477c:	200c      	movs	r0, #12
 800477e:	f7fe fc27 	bl	8002fd0 <buzzer_beep>
                    set_status_led(0);
 8004782:	2000      	movs	r0, #0
 8004784:	f7fe fcbc 	bl	8003100 <set_status_led>
                    flight_state = PREPARATION;
 8004788:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <startStateMachine+0x2ec>)
 800478a:	2203      	movs	r2, #3
 800478c:	701a      	strb	r2, [r3, #0]
                    break;
 800478e:	e0a9      	b.n	80048e4 <startStateMachine+0x2d4>
                }
                break;

            case PREPARATION:
                changeLed(0, 0, 100);
 8004790:	2264      	movs	r2, #100	; 0x64
 8004792:	2100      	movs	r1, #0
 8004794:	2000      	movs	r0, #0
 8004796:	f7ff fdfb 	bl	8004390 <changeLed>
                if (is_breakwire_broken_debounce()) {
 800479a:	f7fe fbfd 	bl	8002f98 <is_breakwire_broken_debounce>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <startStateMachine+0x1a8>
                    buzzer_beep(BEEP_LONG);
 80047a4:	2032      	movs	r0, #50	; 0x32
 80047a6:	f7fe fc13 	bl	8002fd0 <buzzer_beep>
                    set_status_led(1);
 80047aa:	2001      	movs	r0, #1
 80047ac:	f7fe fca8 	bl	8003100 <set_status_led>
                    flight_state = IDLE;
 80047b0:	4b52      	ldr	r3, [pc, #328]	; (80048fc <startStateMachine+0x2ec>)
 80047b2:	2202      	movs	r2, #2
 80047b4:	701a      	strb	r2, [r3, #0]
                    break;
 80047b6:	e095      	b.n	80048e4 <startStateMachine+0x2d4>
                }

                // check arming switch with debouncing
                if (is_armed_debounce()) {
 80047b8:	f7fe fbb4 	bl	8002f24 <is_armed_debounce>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8089 	beq.w	80048d6 <startStateMachine+0x2c6>
                    buzzer_beep(BEEP_SHORT);
 80047c4:	200c      	movs	r0, #12
 80047c6:	f7fe fc03 	bl	8002fd0 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80047ca:	200c      	movs	r0, #12
 80047cc:	f7fe fc00 	bl	8002fd0 <buzzer_beep>
                    set_status_led(1);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fe fc95 	bl	8003100 <set_status_led>
                    flight_state = ARMED;
 80047d6:	4b49      	ldr	r3, [pc, #292]	; (80048fc <startStateMachine+0x2ec>)
 80047d8:	2204      	movs	r2, #4
 80047da:	701a      	strb	r2, [r3, #0]
                }
                break;
 80047dc:	e07b      	b.n	80048d6 <startStateMachine+0x2c6>

            case ARMED:
                changeLed(100, 100, 0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2164      	movs	r1, #100	; 0x64
 80047e2:	2064      	movs	r0, #100	; 0x64
 80047e4:	f7ff fdd4 	bl	8004390 <changeLed>
                if (!is_armed()) {
 80047e8:	f7fe fb90 	bl	8002f0c <is_armed>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <startStateMachine+0x1f6>
                    buzzer_beep(BEEP_LONG);
 80047f2:	2032      	movs	r0, #50	; 0x32
 80047f4:	f7fe fbec 	bl	8002fd0 <buzzer_beep>
                    set_status_led(0);
 80047f8:	2000      	movs	r0, #0
 80047fa:	f7fe fc81 	bl	8003100 <set_status_led>
                    flight_state = PREPARATION;
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <startStateMachine+0x2ec>)
 8004800:	2203      	movs	r2, #3
 8004802:	701a      	strb	r2, [r3, #0]
                    break;
 8004804:	e06e      	b.n	80048e4 <startStateMachine+0x2d4>
                }

                if (is_breakwire_broken_debounce()) {
 8004806:	f7fe fbc7 	bl	8002f98 <is_breakwire_broken_debounce>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d064      	beq.n	80048da <startStateMachine+0x2ca>
                    //reset_timer();

                    launchTime = currentTime;
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	627b      	str	r3, [r7, #36]	; 0x24

                    //set_launch_asserted(ON);
                    flight_state = LAUNCHED;
 8004814:	4b39      	ldr	r3, [pc, #228]	; (80048fc <startStateMachine+0x2ec>)
 8004816:	2205      	movs	r2, #5
 8004818:	701a      	strb	r2, [r3, #0]
                    break;
 800481a:	e063      	b.n	80048e4 <startStateMachine+0x2d4>
                }
                break;

            case LAUNCHED:
                changeLed(100, 100, 100);
 800481c:	2264      	movs	r2, #100	; 0x64
 800481e:	2164      	movs	r1, #100	; 0x64
 8004820:	2064      	movs	r0, #100	; 0x64
 8004822:	f7ff fdb5 	bl	8004390 <changeLed>
                buzzer_beep(BEEP_SHORT);
 8004826:	200c      	movs	r0, #12
 8004828:	f7fe fbd2 	bl	8002fd0 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 800482c:	200c      	movs	r0, #12
 800482e:	f7fe fbcf 	bl	8002fd0 <buzzer_beep>

                if (timeSinceLaunch >= MAX_DEPLOY_TIME
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f243 62af 	movw	r2, #13999	; 0x36af
 8004838:	4293      	cmp	r3, r2
 800483a:	d809      	bhi.n	8004850 <startStateMachine+0x240>
                        || (timeSinceLaunch >= MIN_DEPLOY_TIME
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004842:	4293      	cmp	r3, r2
 8004844:	d94b      	bls.n	80048de <startStateMachine+0x2ce>
                                && is_vote_asserted())) {
 8004846:	f7fe fc66 	bl	8003116 <is_vote_asserted>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d046      	beq.n	80048de <startStateMachine+0x2ce>

                    if (is_armed()) {
 8004850:	f7fe fb5c 	bl	8002f0c <is_armed>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <startStateMachine+0x268>
                        servo_writeangle(&deployServo, SERVO_DEPLOY_POSITION);
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	21b4      	movs	r1, #180	; 0xb4
 8004860:	4618      	mov	r0, r3
 8004862:	f7fd f925 	bl	8001ab0 <servo_writeangle>

                        last_logged_deploy_time = timeSinceLaunch;
 8004866:	4a26      	ldr	r2, [pc, #152]	; (8004900 <startStateMachine+0x2f0>)
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	6013      	str	r3, [r2, #0]
                        buzzer_clear_queue();
 800486c:	f7fe fbdc 	bl	8003028 <buzzer_clear_queue>
                        flight_state = DEPLOYED;
 8004870:	4b22      	ldr	r3, [pc, #136]	; (80048fc <startStateMachine+0x2ec>)
 8004872:	2206      	movs	r2, #6
 8004874:	701a      	strb	r2, [r3, #0]
                        break;
 8004876:	e035      	b.n	80048e4 <startStateMachine+0x2d4>
                    } else { // go back to systems check if rearmed
                        flight_state = SYSTEMS_CHECK;
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <startStateMachine+0x2ec>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
                        break;
 800487e:	e031      	b.n	80048e4 <startStateMachine+0x2d4>
                    }
                }
                break;

            case DEPLOYED:
                changeLed(100, 0, 100);
 8004880:	2264      	movs	r2, #100	; 0x64
 8004882:	2100      	movs	r1, #0
 8004884:	2064      	movs	r0, #100	; 0x64
 8004886:	f7ff fd83 	bl	8004390 <changeLed>
                buzzer_beep(BEEP_LONG);
 800488a:	2032      	movs	r0, #50	; 0x32
 800488c:	f7fe fba0 	bl	8002fd0 <buzzer_beep>

                if (timeSinceLaunch > 240000) {
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <startStateMachine+0x2f4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d924      	bls.n	80048e2 <startStateMachine+0x2d2>
                    flight_state = LANDED;
 8004898:	4b18      	ldr	r3, [pc, #96]	; (80048fc <startStateMachine+0x2ec>)
 800489a:	2207      	movs	r2, #7
 800489c:	701a      	strb	r2, [r3, #0]
                }

                break;
 800489e:	e020      	b.n	80048e2 <startStateMachine+0x2d2>

            case LANDED:
                disable_camera();
 80048a0:	f7fe fc02 	bl	80030a8 <disable_camera>
                break;
 80048a4:	bf00      	nop
 80048a6:	e01d      	b.n	80048e4 <startStateMachine+0x2d4>
            }
        } else {
            // when "soft on/off switch" is off. Play some music and disable everything
            changeLed(100, 0, 0);
 80048a8:	2200      	movs	r2, #0
 80048aa:	2100      	movs	r1, #0
 80048ac:	2064      	movs	r0, #100	; 0x64
 80048ae:	f7ff fd6f 	bl	8004390 <changeLed>
            buzzer_setting = KSP_MAIN;
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <startStateMachine+0x2f8>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
            flight_state = SYSTEMS_CHECK;
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <startStateMachine+0x2ec>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
            servo_disable(&deployServo);
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd f916 	bl	8001af4 <servo_disable>
            disable_camera();
 80048c8:	f7fe fbee 	bl	80030a8 <disable_camera>
 80048cc:	e00a      	b.n	80048e4 <startStateMachine+0x2d4>
                break;
 80048ce:	bf00      	nop
 80048d0:	e008      	b.n	80048e4 <startStateMachine+0x2d4>
                break;
 80048d2:	bf00      	nop
 80048d4:	e006      	b.n	80048e4 <startStateMachine+0x2d4>
                break;
 80048d6:	bf00      	nop
 80048d8:	e004      	b.n	80048e4 <startStateMachine+0x2d4>
                break;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <startStateMachine+0x2d4>
                break;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <startStateMachine+0x2d4>
                break;
 80048e2:	bf00      	nop
        }
        osDelay(1);
 80048e4:	2001      	movs	r0, #1
 80048e6:	f00b f895 	bl	800fa14 <osDelay>
        currentTime = osKernelSysTick();
 80048ea:	e6ac      	b.n	8004646 <startStateMachine+0x36>
 80048ec:	f3af 8000 	nop.w
 80048f0:	9999999a 	.word	0x9999999a
 80048f4:	401d9999 	.word	0x401d9999
 80048f8:	20004994 	.word	0x20004994
 80048fc:	20000000 	.word	0x20000000
 8004900:	20000878 	.word	0x20000878
 8004904:	0003a980 	.word	0x0003a980
 8004908:	20000001 	.word	0x20000001
 800490c:	00000000 	.word	0x00000000

08004910 <StartTelemTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemTask */
void StartTelemTask(void const * argument)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b0bb      	sub	sp, #236	; 0xec
 8004914:	af02      	add	r7, sp, #8
 8004916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemTask */
    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8004918:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800491c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004920:	4a91      	ldr	r2, [pc, #580]	; (8004b68 <StartTelemTask+0x258>)
 8004922:	4992      	ldr	r1, [pc, #584]	; (8004b6c <StartTelemTask+0x25c>)
 8004924:	f7fd f94a 	bl	8001bbc <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8004928:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800492c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004930:	498f      	ldr	r1, [pc, #572]	; (8004b70 <StartTelemTask+0x260>)
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd f9a2 	bl	8001c7c <sxSetDio1Pin>

    //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
    SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 8004938:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800493c:	22e0      	movs	r2, #224	; 0xe0
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7fd f9ef 	bl	8001d24 <SetTxParams>
    osDelay(3);
 8004946:	2003      	movs	r0, #3
 8004948:	f00b f864 	bl	800fa14 <osDelay>

    //lsm6dso imu;
    //uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,SPI2_NSS_Pin);

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 800494c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004950:	2277      	movs	r2, #119	; 0x77
 8004952:	4988      	ldr	r1, [pc, #544]	; (8004b74 <StartTelemTask+0x264>)
 8004954:	4618      	mov	r0, r3
 8004956:	f7fc fe4a 	bl	80015ee <SPL06_Init>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

    uint32_t counter = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    TLM_dec.packet_type = 1;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    TLM_dec.flight_state = 4;
 800496c:	2304      	movs	r3, #4
 800496e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    TLM_dec.is_playing_music = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    TLM_dec.is_data_logging = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    TLM_dec.pin_states = 0b00011011;
 800497e:	231b      	movs	r3, #27
 8004980:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    TLM_dec.servo_state = 3;
 8004984:	2303      	movs	r3, #3
 8004986:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    TLM_dec.vbat = 7.283;
 800498a:	4b7b      	ldr	r3, [pc, #492]	; (8004b78 <StartTelemTask+0x268>)
 800498c:	63bb      	str	r3, [r7, #56]	; 0x38
    TLM_dec.systick = 1232432;
 800498e:	4b7b      	ldr	r3, [pc, #492]	; (8004b7c <StartTelemTask+0x26c>)
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
    TLM_dec.orientation_quat[0] = 0.143123;
 8004992:	4b7b      	ldr	r3, [pc, #492]	; (8004b80 <StartTelemTask+0x270>)
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
    TLM_dec.acc[2] = 1337;
 8004996:	f240 5339 	movw	r3, #1337	; 0x539
 800499a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    TLM_dec.gyro[2] = -21;
 800499e:	f64f 73eb 	movw	r3, #65515	; 0xffeb
 80049a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    TLM_dec.baro = 90001.623;
 80049a6:	4b77      	ldr	r3, [pc, #476]	; (8004b84 <StartTelemTask+0x274>)
 80049a8:	65bb      	str	r3, [r7, #88]	; 0x58
    TLM_dec.temp = 63.4;
 80049aa:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <StartTelemTask+0x278>)
 80049ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    TLM_dec.vertical_velocity = 180;
 80049ae:	4b77      	ldr	r3, [pc, #476]	; (8004b8c <StartTelemTask+0x27c>)
 80049b0:	667b      	str	r3, [r7, #100]	; 0x64
    TLM_dec.altitude = 1321;
 80049b2:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <StartTelemTask+0x280>)
 80049b4:	663b      	str	r3, [r7, #96]	; 0x60
    TLM_dec.debug = 1337;
 80049b6:	f240 5339 	movw	r3, #1337	; 0x539
 80049ba:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    TLM_dec.ranging = 15212;
 80049be:	4b75      	ldr	r3, [pc, #468]	; (8004b94 <StartTelemTask+0x284>)
 80049c0:	66fb      	str	r3, [r7, #108]	; 0x6c

    encode_TLM(&TLM_dec, &TLM_enc);
 80049c2:	f107 020c 	add.w	r2, r7, #12
 80049c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fd fb7f 	bl	80020d0 <encode_TLM>

    WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 80049d2:	f107 020c 	add.w	r2, r7, #12
 80049d6:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80049da:	231f      	movs	r3, #31
 80049dc:	2100      	movs	r1, #0
 80049de:	f7fd fa1a 	bl	8001e16 <WriteBuffer>
    osDelay(1);
 80049e2:	2001      	movs	r0, #1
 80049e4:	f00b f816 	bl	800fa14 <osDelay>

    SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 80049e8:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80049ec:	2300      	movs	r3, #0
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2300      	movs	r3, #0
 80049f2:	2201      	movs	r2, #1
 80049f4:	2101      	movs	r1, #1
 80049f6:	f7fd fa77 	bl	8001ee8 <SetDioIrqParams>

    osDelay(3);
 80049fa:	2003      	movs	r0, #3
 80049fc:	f00b f80a 	bl	800fa14 <osDelay>

    uint32_t lasttime = HAL_GetTick();
 8004a00:	f000 ff90 	bl	8005924 <HAL_GetTick>
 8004a04:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    uint32_t nowtime = HAL_GetTick();
 8004a08:	f000 ff8c 	bl	8005924 <HAL_GetTick>
 8004a0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
        //changeLed(0, 0, 100);
        //nowtime = HAL_GetTick();
        //dt = (nowtime - lasttime) / 1000.0;
        //lasttime = nowtime;

        counter++;
 8004a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a14:	3301      	adds	r3, #1
 8004a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

        if (counter % 20 == 0) {
 8004a1a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004a1e:	4b5e      	ldr	r3, [pc, #376]	; (8004b98 <StartTelemTask+0x288>)
 8004a20:	fba3 2301 	umull	r2, r3, r3, r1
 8004a24:	091a      	lsrs	r2, r3, #4
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	1aca      	subs	r2, r1, r3
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	f040 808b 	bne.w	8004b4c <StartTelemTask+0x23c>

            TLM_dec.vbat = get_battery_voltage();
 8004a36:	f7fe fa37 	bl	8002ea8 <get_battery_voltage>
 8004a3a:	eef0 7a40 	vmov.f32	s15, s0
 8004a3e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            TLM_dec.systick = osKernelSysTick();
 8004a42:	f00a ff8b 	bl	800f95c <osKernelSysTick>
 8004a46:	4603      	mov	r3, r0
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
            TLM_dec.acc[0] = imu.rawAcc[0];
 8004a4a:	4b54      	ldr	r3, [pc, #336]	; (8004b9c <StartTelemTask+0x28c>)
 8004a4c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8004a50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            TLM_dec.acc[1] = imu.rawAcc[1];
 8004a54:	4b51      	ldr	r3, [pc, #324]	; (8004b9c <StartTelemTask+0x28c>)
 8004a56:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004a5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            TLM_dec.acc[2] = imu.rawAcc[2];
 8004a5e:	4b4f      	ldr	r3, [pc, #316]	; (8004b9c <StartTelemTask+0x28c>)
 8004a60:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004a64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            TLM_dec.gyro[0] = imu.rawGyro[0];
 8004a68:	4b4c      	ldr	r3, [pc, #304]	; (8004b9c <StartTelemTask+0x28c>)
 8004a6a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004a6e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            TLM_dec.gyro[1] = imu.rawGyro[1];
 8004a72:	4b4a      	ldr	r3, [pc, #296]	; (8004b9c <StartTelemTask+0x28c>)
 8004a74:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004a78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            TLM_dec.gyro[2] = imu.rawGyro[2];
 8004a7c:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <StartTelemTask+0x28c>)
 8004a7e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004a82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            TLM_dec.orientation_quat[0] = ori.orientationQuat.w;
 8004a86:	4b46      	ldr	r3, [pc, #280]	; (8004ba0 <StartTelemTask+0x290>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
            TLM_dec.orientation_quat[1] = ori.orientationQuat.v[0];
 8004a8c:	4b44      	ldr	r3, [pc, #272]	; (8004ba0 <StartTelemTask+0x290>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	643b      	str	r3, [r7, #64]	; 0x40
            TLM_dec.orientation_quat[2] = ori.orientationQuat.v[1];
 8004a92:	4b43      	ldr	r3, [pc, #268]	; (8004ba0 <StartTelemTask+0x290>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	647b      	str	r3, [r7, #68]	; 0x44
            TLM_dec.orientation_quat[3] = ori.orientationQuat.v[2];
 8004a98:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <StartTelemTask+0x290>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	64bb      	str	r3, [r7, #72]	; 0x48
            SPL06_Read(&baro);
 8004a9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc ff28 	bl	80018f8 <SPL06_Read>
            TLM_dec.baro = baro.pressure_Pa;
 8004aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aac:	65bb      	str	r3, [r7, #88]	; 0x58
            TLM_dec.altitude = 44330 * (1 - pow(baro.pressure_Pa/101325, 0.190295));
 8004aae:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004ab2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004ba4 <StartTelemTask+0x294>
 8004ab6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004aba:	ee16 0a90 	vmov	r0, s13
 8004abe:	f7fb fd63 	bl	8000588 <__aeabi_f2d>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8004b58 <StartTelemTask+0x248>
 8004aca:	ec44 3b10 	vmov	d0, r3, r4
 8004ace:	f010 fe09 	bl	80156e4 <pow>
 8004ad2:	ec54 3b10 	vmov	r3, r4, d0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4623      	mov	r3, r4
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	4932      	ldr	r1, [pc, #200]	; (8004ba8 <StartTelemTask+0x298>)
 8004ae0:	f7fb fbf2 	bl	80002c8 <__aeabi_dsub>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4621      	mov	r1, r4
 8004aec:	a31c      	add	r3, pc, #112	; (adr r3, 8004b60 <StartTelemTask+0x250>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fda1 	bl	8000638 <__aeabi_dmul>
 8004af6:	4603      	mov	r3, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	4618      	mov	r0, r3
 8004afc:	4621      	mov	r1, r4
 8004afe:	f7fc f893 	bl	8000c28 <__aeabi_d2f>
 8004b02:	4603      	mov	r3, r0
 8004b04:	663b      	str	r3, [r7, #96]	; 0x60
            //        data[1], data[2], data[3]);
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
            //CDC_Transmit_FS((uint8_t*) printBuffer,
            //        MIN(strlen(printBuffer), 128));

            encode_TLM(&TLM_dec, &TLM_enc);
 8004b06:	f107 020c 	add.w	r2, r7, #12
 8004b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd fadd 	bl	80020d0 <encode_TLM>
            WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 8004b16:	f107 020c 	add.w	r2, r7, #12
 8004b1a:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8004b1e:	231f      	movs	r3, #31
 8004b20:	2100      	movs	r1, #0
 8004b22:	f7fd f978 	bl	8001e16 <WriteBuffer>
            //WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
            osDelay(1);
 8004b26:	2001      	movs	r0, #1
 8004b28:	f00a ff74 	bl	800fa14 <osDelay>
            ClrIrqStatus(&radio, 1); // clear txdone irq
 8004b2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd fa12 	bl	8001f5c <ClrIrqStatus>
            osDelay(1);
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f00a ff6b 	bl	800fa14 <osDelay>
            SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 8004b3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004b42:	2232      	movs	r2, #50	; 0x32
 8004b44:	2102      	movs	r1, #2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fd fa23 	bl	8001f92 <SetTx>
        }

        osDelay(1);
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	f00a ff61 	bl	800fa14 <osDelay>
        counter++;
 8004b52:	e75d      	b.n	8004a10 <StartTelemTask+0x100>
 8004b54:	f3af 8000 	nop.w
 8004b58:	28cbd124 	.word	0x28cbd124
 8004b5c:	3fc85b96 	.word	0x3fc85b96
 8004b60:	00000000 	.word	0x00000000
 8004b64:	40e5a540 	.word	0x40e5a540
 8004b68:	40020000 	.word	0x40020000
 8004b6c:	20004854 	.word	0x20004854
 8004b70:	40020800 	.word	0x40020800
 8004b74:	20004684 	.word	0x20004684
 8004b78:	40e90e56 	.word	0x40e90e56
 8004b7c:	0012ce30 	.word	0x0012ce30
 8004b80:	3e128ed6 	.word	0x3e128ed6
 8004b84:	47afc8d0 	.word	0x47afc8d0
 8004b88:	427d999a 	.word	0x427d999a
 8004b8c:	43340000 	.word	0x43340000
 8004b90:	44a52000 	.word	0x44a52000
 8004b94:	466db000 	.word	0x466db000
 8004b98:	cccccccd 	.word	0xcccccccd
 8004b9c:	20004730 	.word	0x20004730
 8004ba0:	200045e8 	.word	0x200045e8
 8004ba4:	47c5e680 	.word	0x47c5e680
 8004ba8:	3ff00000 	.word	0x3ff00000

08004bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004bbe:	f000 fe9d 	bl	80058fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40010000 	.word	0x40010000

08004bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8004bd6:	e7fe      	b.n	8004bd6 <Error_Handler+0x6>

08004bd8 <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3304      	adds	r3, #4
 8004be8:	ed93 7a00 	vldr	s14, [r3]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	edd3 7a00 	vldr	s15, [r3]
 8004bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	edd3 6a00 	vldr	s13, [r3]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	3304      	adds	r3, #4
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	ed93 7a00 	vldr	s14, [r3]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	edd3 7a00 	vldr	s15, [r3]
 8004c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	edd3 6a00 	vldr	s13, [r3]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	3308      	adds	r3, #8
 8004c32:	edd3 7a00 	vldr	s15, [r3]
 8004c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c42:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	ed93 7a00 	vldr	s14, [r3]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	edd3 6a00 	vldr	s13, [r3]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c72:	edc3 7a00 	vstr	s15, [r3]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	ed93 7a00 	vldr	s14, [r3]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	edd3 7a00 	vldr	s15, [r3]
 8004c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	ed93 7a00 	vldr	s14, [r3]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	edd3 7a00 	vldr	s15, [r3]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cbc:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	ed93 7a00 	vldr	s14, [r3]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	edd3 7a00 	vldr	s15, [r3]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd8:	edc3 7a00 	vstr	s15, [r3]
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	ed93 7a00 	vldr	s14, [r3]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	edd3 7a00 	vldr	s15, [r3]
 8004cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	edd3 6a00 	vldr	s13, [r3]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	edd3 7a00 	vldr	s15, [r3]
 8004d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	edd3 6a00 	vldr	s13, [r3]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3308      	adds	r3, #8
 8004d24:	edd3 7a00 	vldr	s15, [r3]
 8004d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004d30:	eeb0 0a67 	vmov.f32	s0, s15
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <orientation_init>:

void orientation_init(Orientation *ori) {
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd fbf3 	bl	8002534 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3370      	adds	r3, #112	; 0x70
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fd fbee 	bl	8002534 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3360      	adds	r3, #96	; 0x60
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd fbe9 	bl	8002534 <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004d78:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[2];
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[0];
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[1];
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[2];
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[0];
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[1];
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt, uint8_t apply_complementary) {
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b091      	sub	sp, #68	; 0x44
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e04:	460b      	mov	r3, r1
 8004e06:	71fb      	strb	r3, [r7, #7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3348      	adds	r3, #72	; 0x48
 8004e14:	461a      	mov	r2, r3
 8004e16:	f7fd fde7 	bl	80029e8 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3354      	adds	r3, #84	; 0x54
 8004e24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f7ff fed5 	bl	8004bd8 <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3310      	adds	r3, #16
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f7fd fce2 	bl	8002800 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3310      	adds	r3, #16
 8004e40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004e44:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd fdcd 	bl	80029e8 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fb fb99 	bl	8000588 <__aeabi_f2d>
 8004e56:	a348      	add	r3, pc, #288	; (adr r3, 8004f78 <orientation_update+0x180>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fbec 	bl	8000638 <__aeabi_dmul>
 8004e60:	4603      	mov	r3, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	4618      	mov	r0, r3
 8004e66:	4621      	mov	r1, r4
 8004e68:	f7fb fede 	bl	8000c28 <__aeabi_d2f>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    correctionBody[1] = correctionBody[1] * 0.1;
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fb fb88 	bl	8000588 <__aeabi_f2d>
 8004e78:	a33f      	add	r3, pc, #252	; (adr r3, 8004f78 <orientation_update+0x180>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f7fb fbdb 	bl	8000638 <__aeabi_dmul>
 8004e82:	4603      	mov	r3, r0
 8004e84:	460c      	mov	r4, r1
 8004e86:	4618      	mov	r0, r3
 8004e88:	4621      	mov	r1, r4
 8004e8a:	f7fb fecd 	bl	8000c28 <__aeabi_d2f>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
    correctionBody[2] = correctionBody[2] * 0.1;
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fb fb77 	bl	8000588 <__aeabi_f2d>
 8004e9a:	a337      	add	r3, pc, #220	; (adr r3, 8004f78 <orientation_update+0x180>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f7fb fbca 	bl	8000638 <__aeabi_dmul>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	4621      	mov	r1, r4
 8004eac:	f7fb febc 	bl	8000c28 <__aeabi_d2f>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	333c      	adds	r3, #60	; 0x3c
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ff15 	bl	8004ce8 <vector_lenSquared>
 8004ebe:	ee10 3a10 	vmov	r3, s0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fb fb60 	bl	8000588 <__aeabi_f2d>
 8004ec8:	a32d      	add	r3, pc, #180	; (adr r3, 8004f80 <orientation_update+0x188>)
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f7fb fcdd 	bl	800088c <__aeabi_ddiv>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	4621      	mov	r1, r4
 8004eda:	f7fb fea5 	bl	8000c28 <__aeabi_d2f>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (GsSquared > 0.81 && GsSquared < 1.21 && apply_complementary) {
 8004ee2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ee4:	f7fb fb50 	bl	8000588 <__aeabi_f2d>
 8004ee8:	a327      	add	r3, pc, #156	; (adr r3, 8004f88 <orientation_update+0x190>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f7fb fe33 	bl	8000b58 <__aeabi_dcmpgt>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d018      	beq.n	8004f2a <orientation_update+0x132>
 8004ef8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004efa:	f7fb fb45 	bl	8000588 <__aeabi_f2d>
 8004efe:	a324      	add	r3, pc, #144	; (adr r3, 8004f90 <orientation_update+0x198>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f7fb fe0a 	bl	8000b1c <__aeabi_dcmplt>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <orientation_update+0x132>
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <orientation_update+0x132>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f24:	4619      	mov	r1, r3
 8004f26:	f7ff feac 	bl	8004c82 <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3320      	adds	r3, #32
 8004f34:	4619      	mov	r1, r3
 8004f36:	ed97 0a02 	vldr	s0, [r7, #8]
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fd fedc 	bl	8002cf8 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3320      	adds	r3, #32
 8004f46:	f107 0214 	add.w	r2, r7, #20
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f7fd fc8c 	bl	8002868 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	f107 0314 	add.w	r3, r7, #20
 8004f56:	4611      	mov	r1, r2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fd fb0f 	bl	800257c <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3380      	adds	r3, #128	; 0x80
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f7fd fb2a 	bl	80025c0 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 8004f6c:	bf00      	nop
 8004f6e:	3744      	adds	r7, #68	; 0x44
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}
 8004f74:	f3af 8000 	nop.w
 8004f78:	9999999a 	.word	0x9999999a
 8004f7c:	3fb99999 	.word	0x3fb99999
 8004f80:	9339d914 	.word	0x9339d914
 8004f84:	40580ae7 	.word	0x40580ae7
 8004f88:	1eb851ec 	.word	0x1eb851ec
 8004f8c:	3fe9eb85 	.word	0x3fe9eb85
 8004f90:	f5c28f5c 	.word	0xf5c28f5c
 8004f94:	3ff35c28 	.word	0x3ff35c28

08004f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_MspInit+0x54>)
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	4a11      	ldr	r2, [pc, #68]	; (8004fec <HAL_MspInit+0x54>)
 8004fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fac:	6453      	str	r3, [r2, #68]	; 0x44
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_MspInit+0x54>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_MspInit+0x54>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <HAL_MspInit+0x54>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <HAL_MspInit+0x54>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	210f      	movs	r1, #15
 8004fda:	f06f 0001 	mvn.w	r0, #1
 8004fde:	f001 f951 	bl	8006284 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800

08004ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a17      	ldr	r2, [pc, #92]	; (800506c <HAL_ADC_MspInit+0x7c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d127      	bne.n	8005062 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_ADC_MspInit+0x80>)
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	4a15      	ldr	r2, [pc, #84]	; (8005070 <HAL_ADC_MspInit+0x80>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6453      	str	r3, [r2, #68]	; 0x44
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <HAL_ADC_MspInit+0x80>)
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_ADC_MspInit+0x80>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <HAL_ADC_MspInit+0x80>)
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	6313      	str	r3, [r2, #48]	; 0x30
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_ADC_MspInit+0x80>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 800504a:	2304      	movs	r3, #4
 800504c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800504e:	2303      	movs	r3, #3
 8005050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8005056:	f107 0314 	add.w	r3, r7, #20
 800505a:	4619      	mov	r1, r3
 800505c:	4805      	ldr	r0, [pc, #20]	; (8005074 <HAL_ADC_MspInit+0x84>)
 800505e:	f001 fca9 	bl	80069b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005062:	bf00      	nop
 8005064:	3728      	adds	r7, #40	; 0x28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40012000 	.word	0x40012000
 8005070:	40023800 	.word	0x40023800
 8005074:	40020800 	.word	0x40020800

08005078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a29      	ldr	r2, [pc, #164]	; (800513c <HAL_I2C_MspInit+0xc4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d14b      	bne.n	8005132 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	4a27      	ldr	r2, [pc, #156]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 80050a4:	f043 0304 	orr.w	r3, r3, #4
 80050a8:	6313      	str	r3, [r2, #48]	; 0x30
 80050aa:	4b25      	ldr	r3, [pc, #148]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	4b21      	ldr	r3, [pc, #132]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	4a20      	ldr	r2, [pc, #128]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6313      	str	r3, [r2, #48]	; 0x30
 80050c6:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050d8:	2312      	movs	r3, #18
 80050da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050dc:	2301      	movs	r3, #1
 80050de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e0:	2303      	movs	r3, #3
 80050e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050e4:	2304      	movs	r3, #4
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050e8:	f107 0314 	add.w	r3, r7, #20
 80050ec:	4619      	mov	r1, r3
 80050ee:	4815      	ldr	r0, [pc, #84]	; (8005144 <HAL_I2C_MspInit+0xcc>)
 80050f0:	f001 fc60 	bl	80069b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050fa:	2312      	movs	r3, #18
 80050fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050fe:	2301      	movs	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005102:	2303      	movs	r3, #3
 8005104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005106:	2304      	movs	r3, #4
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800510a:	f107 0314 	add.w	r3, r7, #20
 800510e:	4619      	mov	r1, r3
 8005110:	480d      	ldr	r0, [pc, #52]	; (8005148 <HAL_I2C_MspInit+0xd0>)
 8005112:	f001 fc4f 	bl	80069b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	4a08      	ldr	r2, [pc, #32]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 8005120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005124:	6413      	str	r3, [r2, #64]	; 0x40
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_I2C_MspInit+0xc8>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005132:	bf00      	nop
 8005134:	3728      	adds	r7, #40	; 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40005c00 	.word	0x40005c00
 8005140:	40023800 	.word	0x40023800
 8005144:	40020800 	.word	0x40020800
 8005148:	40020000 	.word	0x40020000

0800514c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	; 0x38
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a89      	ldr	r2, [pc, #548]	; (8005390 <HAL_SPI_MspInit+0x244>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d12c      	bne.n	80051c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	4b88      	ldr	r3, [pc, #544]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	4a87      	ldr	r2, [pc, #540]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800517c:	6453      	str	r3, [r2, #68]	; 0x44
 800517e:	4b85      	ldr	r3, [pc, #532]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005186:	623b      	str	r3, [r7, #32]
 8005188:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	4b81      	ldr	r3, [pc, #516]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	4a80      	ldr	r2, [pc, #512]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6313      	str	r3, [r2, #48]	; 0x30
 800519a:	4b7e      	ldr	r3, [pc, #504]	; (8005394 <HAL_SPI_MspInit+0x248>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80051a6:	23e0      	movs	r3, #224	; 0xe0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b2:	2303      	movs	r3, #3
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051b6:	2305      	movs	r3, #5
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051be:	4619      	mov	r1, r3
 80051c0:	4875      	ldr	r0, [pc, #468]	; (8005398 <HAL_SPI_MspInit+0x24c>)
 80051c2:	f001 fbf7 	bl	80069b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80051c6:	e0df      	b.n	8005388 <HAL_SPI_MspInit+0x23c>
  else if(hspi->Instance==SPI2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a73      	ldr	r2, [pc, #460]	; (800539c <HAL_SPI_MspInit+0x250>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	f040 808a 	bne.w	80052e8 <HAL_SPI_MspInit+0x19c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051d4:	2300      	movs	r3, #0
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	4b6e      	ldr	r3, [pc, #440]	; (8005394 <HAL_SPI_MspInit+0x248>)
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	4a6d      	ldr	r2, [pc, #436]	; (8005394 <HAL_SPI_MspInit+0x248>)
 80051de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051e2:	6413      	str	r3, [r2, #64]	; 0x40
 80051e4:	4b6b      	ldr	r3, [pc, #428]	; (8005394 <HAL_SPI_MspInit+0x248>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	4b67      	ldr	r3, [pc, #412]	; (8005394 <HAL_SPI_MspInit+0x248>)
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	4a66      	ldr	r2, [pc, #408]	; (8005394 <HAL_SPI_MspInit+0x248>)
 80051fa:	f043 0302 	orr.w	r3, r3, #2
 80051fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005200:	4b64      	ldr	r3, [pc, #400]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800520c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005212:	2302      	movs	r3, #2
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2300      	movs	r3, #0
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521a:	2303      	movs	r3, #3
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800521e:	2305      	movs	r3, #5
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005226:	4619      	mov	r1, r3
 8005228:	485d      	ldr	r0, [pc, #372]	; (80053a0 <HAL_SPI_MspInit+0x254>)
 800522a:	f001 fbc3 	bl	80069b4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800522e:	4b5d      	ldr	r3, [pc, #372]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005230:	4a5d      	ldr	r2, [pc, #372]	; (80053a8 <HAL_SPI_MspInit+0x25c>)
 8005232:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005234:	4b5b      	ldr	r3, [pc, #364]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005236:	2200      	movs	r2, #0
 8005238:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800523a:	4b5a      	ldr	r3, [pc, #360]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 800523c:	2200      	movs	r2, #0
 800523e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005240:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005242:	2200      	movs	r2, #0
 8005244:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005246:	4b57      	ldr	r3, [pc, #348]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800524c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800524e:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005250:	2200      	movs	r2, #0
 8005252:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005256:	2200      	movs	r2, #0
 8005258:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800525a:	4b52      	ldr	r3, [pc, #328]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 800525c:	2200      	movs	r2, #0
 800525e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005260:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005262:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005266:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005268:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 800526a:	2200      	movs	r2, #0
 800526c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800526e:	484d      	ldr	r0, [pc, #308]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005270:	f001 f832 	bl	80062d8 <HAL_DMA_Init>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_SPI_MspInit+0x132>
      Error_Handler();
 800527a:	f7ff fca9 	bl	8004bd0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a48      	ldr	r2, [pc, #288]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005282:	64da      	str	r2, [r3, #76]	; 0x4c
 8005284:	4a47      	ldr	r2, [pc, #284]	; (80053a4 <HAL_SPI_MspInit+0x258>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800528a:	4b48      	ldr	r3, [pc, #288]	; (80053ac <HAL_SPI_MspInit+0x260>)
 800528c:	4a48      	ldr	r2, [pc, #288]	; (80053b0 <HAL_SPI_MspInit+0x264>)
 800528e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005290:	4b46      	ldr	r3, [pc, #280]	; (80053ac <HAL_SPI_MspInit+0x260>)
 8005292:	2200      	movs	r2, #0
 8005294:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005296:	4b45      	ldr	r3, [pc, #276]	; (80053ac <HAL_SPI_MspInit+0x260>)
 8005298:	2240      	movs	r2, #64	; 0x40
 800529a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800529c:	4b43      	ldr	r3, [pc, #268]	; (80053ac <HAL_SPI_MspInit+0x260>)
 800529e:	2200      	movs	r2, #0
 80052a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052a2:	4b42      	ldr	r3, [pc, #264]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052aa:	4b40      	ldr	r3, [pc, #256]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052b0:	4b3e      	ldr	r3, [pc, #248]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80052b6:	4b3d      	ldr	r3, [pc, #244]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80052bc:	4b3b      	ldr	r3, [pc, #236]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052c4:	4b39      	ldr	r3, [pc, #228]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80052ca:	4838      	ldr	r0, [pc, #224]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052cc:	f001 f804 	bl	80062d8 <HAL_DMA_Init>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_SPI_MspInit+0x18e>
      Error_Handler();
 80052d6:	f7ff fc7b 	bl	8004bd0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a33      	ldr	r2, [pc, #204]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052de:	649a      	str	r2, [r3, #72]	; 0x48
 80052e0:	4a32      	ldr	r2, [pc, #200]	; (80053ac <HAL_SPI_MspInit+0x260>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80052e6:	e04f      	b.n	8005388 <HAL_SPI_MspInit+0x23c>
  else if(hspi->Instance==SPI3)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a31      	ldr	r2, [pc, #196]	; (80053b4 <HAL_SPI_MspInit+0x268>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d14a      	bne.n	8005388 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	4b27      	ldr	r3, [pc, #156]	; (8005394 <HAL_SPI_MspInit+0x248>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	4a26      	ldr	r2, [pc, #152]	; (8005394 <HAL_SPI_MspInit+0x248>)
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005300:	6413      	str	r3, [r2, #64]	; 0x40
 8005302:	4b24      	ldr	r3, [pc, #144]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	4b20      	ldr	r3, [pc, #128]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005318:	f043 0304 	orr.w	r3, r3, #4
 800531c:	6313      	str	r3, [r2, #48]	; 0x30
 800531e:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	4b19      	ldr	r3, [pc, #100]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_SPI_MspInit+0x248>)
 8005334:	f043 0302 	orr.w	r3, r3, #2
 8005338:	6313      	str	r3, [r2, #48]	; 0x30
 800533a:	4b16      	ldr	r3, [pc, #88]	; (8005394 <HAL_SPI_MspInit+0x248>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005346:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005354:	2303      	movs	r3, #3
 8005356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005358:	2306      	movs	r3, #6
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800535c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005360:	4619      	mov	r1, r3
 8005362:	4815      	ldr	r0, [pc, #84]	; (80053b8 <HAL_SPI_MspInit+0x26c>)
 8005364:	f001 fb26 	bl	80069b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005368:	2320      	movs	r3, #32
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536c:	2302      	movs	r3, #2
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005370:	2300      	movs	r3, #0
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005374:	2303      	movs	r3, #3
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005378:	2306      	movs	r3, #6
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800537c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005380:	4619      	mov	r1, r3
 8005382:	4807      	ldr	r0, [pc, #28]	; (80053a0 <HAL_SPI_MspInit+0x254>)
 8005384:	f001 fb16 	bl	80069b4 <HAL_GPIO_Init>
}
 8005388:	bf00      	nop
 800538a:	3738      	adds	r7, #56	; 0x38
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40013000 	.word	0x40013000
 8005394:	40023800 	.word	0x40023800
 8005398:	40020000 	.word	0x40020000
 800539c:	40003800 	.word	0x40003800
 80053a0:	40020400 	.word	0x40020400
 80053a4:	200047b0 	.word	0x200047b0
 80053a8:	40026058 	.word	0x40026058
 80053ac:	200049d8 	.word	0x200049d8
 80053b0:	40026070 	.word	0x40026070
 80053b4:	40003c00 	.word	0x40003c00
 80053b8:	40020800 	.word	0x40020800

080053bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d10d      	bne.n	80053ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	6413      	str	r3, [r2, #64]	; 0x40
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800

080053fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <HAL_TIM_Base_MspInit+0x64>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10e      	bne.n	800542c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <HAL_TIM_Base_MspInit+0x68>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <HAL_TIM_Base_MspInit+0x68>)
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	6413      	str	r3, [r2, #64]	; 0x40
 800541e:	4b11      	ldr	r3, [pc, #68]	; (8005464 <HAL_TIM_Base_MspInit+0x68>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800542a:	e012      	b.n	8005452 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0d      	ldr	r2, [pc, #52]	; (8005468 <HAL_TIM_Base_MspInit+0x6c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10d      	bne.n	8005452 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_TIM_Base_MspInit+0x68>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a09      	ldr	r2, [pc, #36]	; (8005464 <HAL_TIM_Base_MspInit+0x68>)
 8005440:	f043 0310 	orr.w	r3, r3, #16
 8005444:	6413      	str	r3, [r2, #64]	; 0x40
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <HAL_TIM_Base_MspInit+0x68>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40000400 	.word	0x40000400
 8005464:	40023800 	.word	0x40023800
 8005468:	40001000 	.word	0x40001000

0800546c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548c:	d11e      	bne.n	80054cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	4b31      	ldr	r3, [pc, #196]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	4a30      	ldr	r2, [pc, #192]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6313      	str	r3, [r2, #48]	; 0x30
 800549e:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80054aa:	230a      	movs	r3, #10
 80054ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ae:	2302      	movs	r3, #2
 80054b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054ba:	2301      	movs	r3, #1
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054be:	f107 0314 	add.w	r3, r7, #20
 80054c2:	4619      	mov	r1, r3
 80054c4:	4825      	ldr	r0, [pc, #148]	; (800555c <HAL_TIM_MspPostInit+0xf0>)
 80054c6:	f001 fa75 	bl	80069b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80054ca:	e041      	b.n	8005550 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <HAL_TIM_MspPostInit+0xf4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d13c      	bne.n	8005550 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	6313      	str	r3, [r2, #48]	; 0x30
 80054e6:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <HAL_TIM_MspPostInit+0xec>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800550e:	2302      	movs	r3, #2
 8005510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551a:	2300      	movs	r3, #0
 800551c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800551e:	2302      	movs	r3, #2
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005522:	f107 0314 	add.w	r3, r7, #20
 8005526:	4619      	mov	r1, r3
 8005528:	480e      	ldr	r0, [pc, #56]	; (8005564 <HAL_TIM_MspPostInit+0xf8>)
 800552a:	f001 fa43 	bl	80069b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800552e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005534:	2302      	movs	r3, #2
 8005536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553c:	2300      	movs	r3, #0
 800553e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005540:	2302      	movs	r3, #2
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005544:	f107 0314 	add.w	r3, r7, #20
 8005548:	4619      	mov	r1, r3
 800554a:	4807      	ldr	r0, [pc, #28]	; (8005568 <HAL_TIM_MspPostInit+0xfc>)
 800554c:	f001 fa32 	bl	80069b4 <HAL_GPIO_Init>
}
 8005550:	bf00      	nop
 8005552:	3728      	adds	r7, #40	; 0x28
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023800 	.word	0x40023800
 800555c:	40020000 	.word	0x40020000
 8005560:	40000400 	.word	0x40000400
 8005564:	40020400 	.word	0x40020400
 8005568:	40020800 	.word	0x40020800

0800556c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08c      	sub	sp, #48	; 0x30
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800557c:	2200      	movs	r2, #0
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	2019      	movs	r0, #25
 8005582:	f000 fe7f 	bl	8006284 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005586:	2019      	movs	r0, #25
 8005588:	f000 fe98 	bl	80062bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <HAL_InitTick+0xa4>)
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_InitTick+0xa4>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6453      	str	r3, [r2, #68]	; 0x44
 800559c:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <HAL_InitTick+0xa4>)
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055a8:	f107 0210 	add.w	r2, r7, #16
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f003 fec6 	bl	8009344 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80055b8:	f003 feb0 	bl	800931c <HAL_RCC_GetPCLK2Freq>
 80055bc:	4603      	mov	r3, r0
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <HAL_InitTick+0xa8>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	0c9b      	lsrs	r3, r3, #18
 80055cc:	3b01      	subs	r3, #1
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80055d0:	4b11      	ldr	r3, [pc, #68]	; (8005618 <HAL_InitTick+0xac>)
 80055d2:	4a12      	ldr	r2, [pc, #72]	; (800561c <HAL_InitTick+0xb0>)
 80055d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <HAL_InitTick+0xac>)
 80055d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80055de:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <HAL_InitTick+0xac>)
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_InitTick+0xac>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_InitTick+0xac>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80055f0:	4809      	ldr	r0, [pc, #36]	; (8005618 <HAL_InitTick+0xac>)
 80055f2:	f005 fd63 	bl	800b0bc <HAL_TIM_Base_Init>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80055fc:	4806      	ldr	r0, [pc, #24]	; (8005618 <HAL_InitTick+0xac>)
 80055fe:	f005 fdac 	bl	800b15a <HAL_TIM_Base_Start_IT>
 8005602:	4603      	mov	r3, r0
 8005604:	e000      	b.n	8005608 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
}
 8005608:	4618      	mov	r0, r3
 800560a:	3730      	adds	r7, #48	; 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40023800 	.word	0x40023800
 8005614:	431bde83 	.word	0x431bde83
 8005618:	20004a3c 	.word	0x20004a3c
 800561c:	40010000 	.word	0x40010000

08005620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005624:	e7fe      	b.n	8005624 <NMI_Handler+0x4>

08005626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800562a:	e7fe      	b.n	800562a <HardFault_Handler+0x4>

0800562c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005630:	e7fe      	b.n	8005630 <MemManage_Handler+0x4>

08005632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005636:	e7fe      	b.n	8005636 <BusFault_Handler+0x4>

08005638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800563c:	e7fe      	b.n	800563c <UsageFault_Handler+0x4>

0800563e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800563e:	b480      	push	{r7}
 8005640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005650:	4802      	ldr	r0, [pc, #8]	; (800565c <DMA1_Stream3_IRQHandler+0x10>)
 8005652:	f000 ff47 	bl	80064e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200047b0 	.word	0x200047b0

08005660 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <DMA1_Stream4_IRQHandler+0x10>)
 8005666:	f000 ff3d 	bl	80064e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200049d8 	.word	0x200049d8

08005674 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005678:	4802      	ldr	r0, [pc, #8]	; (8005684 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800567a:	f005 fdfb 	bl	800b274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20004a3c 	.word	0x20004a3c

08005688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800568c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005690:	f001 fb54 	bl	8006d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005694:	bf00      	nop
 8005696:	bd80      	pop	{r7, pc}

08005698 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800569c:	4802      	ldr	r0, [pc, #8]	; (80056a8 <OTG_FS_IRQHandler+0x10>)
 800569e:	f002 fc6f 	bl	8007f80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80056a2:	bf00      	nop
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200063c4 	.word	0x200063c4

080056ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
	return 1;
 80056b0:	2301      	movs	r3, #1
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_kill>:

int _kill(int pid, int sig)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056c6:	f00d f933 	bl	8012930 <__errno>
 80056ca:	4602      	mov	r2, r0
 80056cc:	2316      	movs	r3, #22
 80056ce:	6013      	str	r3, [r2, #0]
	return -1;
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <_exit>:

void _exit (int status)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056e4:	f04f 31ff 	mov.w	r1, #4294967295
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ffe7 	bl	80056bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80056ee:	e7fe      	b.n	80056ee <_exit+0x12>

080056f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e00a      	b.n	8005718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005702:	f3af 8000 	nop.w
 8005706:	4601      	mov	r1, r0
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	60ba      	str	r2, [r7, #8]
 800570e:	b2ca      	uxtb	r2, r1
 8005710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	3301      	adds	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	dbf0      	blt.n	8005702 <_read+0x12>
	}

return len;
 8005720:	687b      	ldr	r3, [r7, #4]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	e009      	b.n	8005750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	60ba      	str	r2, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	3301      	adds	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	dbf1      	blt.n	800573c <_write+0x12>
	}
	return len;
 8005758:	687b      	ldr	r3, [r7, #4]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_close>:

int _close(int file)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
	return -1;
 800576a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800578a:	605a      	str	r2, [r3, #4]
	return 0;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <_isatty>:

int _isatty(int file)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	return 1;
 80057a2:	2301      	movs	r3, #1
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
	return 0;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <_sbrk+0x5c>)
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <_sbrk+0x60>)
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <_sbrk+0x64>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <_sbrk+0x64>)
 80057ea:	4a12      	ldr	r2, [pc, #72]	; (8005834 <_sbrk+0x68>)
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <_sbrk+0x64>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4413      	add	r3, r2
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d207      	bcs.n	800580c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057fc:	f00d f898 	bl	8012930 <__errno>
 8005800:	4602      	mov	r2, r0
 8005802:	230c      	movs	r3, #12
 8005804:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	e009      	b.n	8005820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800580c:	4b08      	ldr	r3, [pc, #32]	; (8005830 <_sbrk+0x64>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <_sbrk+0x64>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4413      	add	r3, r2
 800581a:	4a05      	ldr	r2, [pc, #20]	; (8005830 <_sbrk+0x64>)
 800581c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20020000 	.word	0x20020000
 800582c:	00000400 	.word	0x00000400
 8005830:	20000880 	.word	0x20000880
 8005834:	200067d0 	.word	0x200067d0

08005838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800583c:	4b08      	ldr	r3, [pc, #32]	; (8005860 <SystemInit+0x28>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	4a07      	ldr	r2, [pc, #28]	; (8005860 <SystemInit+0x28>)
 8005844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <SystemInit+0x28>)
 800584e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005852:	609a      	str	r2, [r3, #8]
#endif
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800589c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005868:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800586a:	e003      	b.n	8005874 <LoopCopyDataInit>

0800586c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800586e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005870:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005872:	3104      	adds	r1, #4

08005874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005874:	480b      	ldr	r0, [pc, #44]	; (80058a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005876:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005878:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800587a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800587c:	d3f6      	bcc.n	800586c <CopyDataInit>
  ldr  r2, =_sbss
 800587e:	4a0b      	ldr	r2, [pc, #44]	; (80058ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005880:	e002      	b.n	8005888 <LoopFillZerobss>

08005882 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005882:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005884:	f842 3b04 	str.w	r3, [r2], #4

08005888 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800588a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800588c:	d3f9      	bcc.n	8005882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800588e:	f7ff ffd3 	bl	8005838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005892:	f00d f865 	bl	8012960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005896:	f7fd fea9 	bl	80035ec <main>
  bx  lr    
 800589a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800589c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80058a0:	08018c20 	.word	0x08018c20
  ldr  r0, =_sdata
 80058a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80058a8:	20000608 	.word	0x20000608
  ldr  r2, =_sbss
 80058ac:	20000608 	.word	0x20000608
  ldr  r3, = _ebss
 80058b0:	200067d0 	.word	0x200067d0

080058b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058b4:	e7fe      	b.n	80058b4 <ADC_IRQHandler>
	...

080058b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <HAL_Init+0x40>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0d      	ldr	r2, [pc, #52]	; (80058f8 <HAL_Init+0x40>)
 80058c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_Init+0x40>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <HAL_Init+0x40>)
 80058ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058d4:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <HAL_Init+0x40>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <HAL_Init+0x40>)
 80058da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058e0:	2003      	movs	r0, #3
 80058e2:	f000 fcc4 	bl	800626e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7ff fe40 	bl	800556c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058ec:	f7ff fb54 	bl	8004f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40023c00 	.word	0x40023c00

080058fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_IncTick+0x20>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_IncTick+0x24>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4413      	add	r3, r2
 800590c:	4a04      	ldr	r2, [pc, #16]	; (8005920 <HAL_IncTick+0x24>)
 800590e:	6013      	str	r3, [r2, #0]
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000288 	.word	0x20000288
 8005920:	20004a7c 	.word	0x20004a7c

08005924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return uwTick;
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <HAL_GetTick+0x14>)
 800592a:	681b      	ldr	r3, [r3, #0]
}
 800592c:	4618      	mov	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20004a7c 	.word	0x20004a7c

0800593c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005944:	f7ff ffee 	bl	8005924 <HAL_GetTick>
 8005948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d005      	beq.n	8005962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_Delay+0x40>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005962:	bf00      	nop
 8005964:	f7ff ffde 	bl	8005924 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	429a      	cmp	r2, r3
 8005972:	d8f7      	bhi.n	8005964 <HAL_Delay+0x28>
  {
  }
}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000288 	.word	0x20000288

08005980 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e033      	b.n	80059fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff fb26 	bl	8004ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d118      	bne.n	80059f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80059c6:	f023 0302 	bic.w	r3, r3, #2
 80059ca:	f043 0202 	orr.w	r2, r3, #2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 faa2 	bl	8005f1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	f043 0201 	orr.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
 80059ee:	e001      	b.n	80059f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_ADC_Start+0x1a>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e0a5      	b.n	8005b6e <HAL_ADC_Start+0x166>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d018      	beq.n	8005a6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a48:	4b4c      	ldr	r3, [pc, #304]	; (8005b7c <HAL_ADC_Start+0x174>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a4c      	ldr	r2, [pc, #304]	; (8005b80 <HAL_ADC_Start+0x178>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	0c9a      	lsrs	r2, r3, #18
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005a5c:	e002      	b.n	8005a64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f9      	bne.n	8005a5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d179      	bne.n	8005b6c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005aa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d106      	bne.n	8005ac6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abc:	f023 0206 	bic.w	r2, r3, #6
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8005ac4:	e002      	b.n	8005acc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_ADC_Start+0x17c>)
 8005ad6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d12a      	bne.n	8005b44 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a25      	ldr	r2, [pc, #148]	; (8005b88 <HAL_ADC_Start+0x180>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d015      	beq.n	8005b24 <HAL_ADC_Start+0x11c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a23      	ldr	r2, [pc, #140]	; (8005b8c <HAL_ADC_Start+0x184>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d105      	bne.n	8005b0e <HAL_ADC_Start+0x106>
 8005b02:	4b20      	ldr	r3, [pc, #128]	; (8005b84 <HAL_ADC_Start+0x17c>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <HAL_ADC_Start+0x188>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d129      	bne.n	8005b6c <HAL_ADC_Start+0x164>
 8005b18:	4b1a      	ldr	r3, [pc, #104]	; (8005b84 <HAL_ADC_Start+0x17c>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	2b0f      	cmp	r3, #15
 8005b22:	d823      	bhi.n	8005b6c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11c      	bne.n	8005b6c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b40:	609a      	str	r2, [r3, #8]
 8005b42:	e013      	b.n	8005b6c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <HAL_ADC_Start+0x180>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10e      	bne.n	8005b6c <HAL_ADC_Start+0x164>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d107      	bne.n	8005b6c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b6a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000280 	.word	0x20000280
 8005b80:	431bde83 	.word	0x431bde83
 8005b84:	40012300 	.word	0x40012300
 8005b88:	40012000 	.word	0x40012000
 8005b8c:	40012100 	.word	0x40012100
 8005b90:	40012200 	.word	0x40012200

08005b94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb0:	d113      	bne.n	8005bda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc0:	d10b      	bne.n	8005bda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e05c      	b.n	8005c94 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005bda:	f7ff fea3 	bl	8005924 <HAL_GetTick>
 8005bde:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005be0:	e01a      	b.n	8005c18 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be8:	d016      	beq.n	8005c18 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <HAL_ADC_PollForConversion+0x6c>
 8005bf0:	f7ff fe98 	bl	8005924 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d20b      	bcs.n	8005c18 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f043 0204 	orr.w	r2, r3, #4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e03d      	b.n	8005c94 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d1dd      	bne.n	8005be2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0212 	mvn.w	r2, #18
 8005c2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d123      	bne.n	8005c92 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11f      	bne.n	8005c92 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d111      	bne.n	8005c92 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d105      	bne.n	8005c92 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f043 0201 	orr.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_ADC_ConfigChannel+0x1c>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e113      	b.n	8005efc <HAL_ADC_ConfigChannel+0x244>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d925      	bls.n	8005d30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68d9      	ldr	r1, [r3, #12]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3b1e      	subs	r3, #30
 8005cfa:	2207      	movs	r2, #7
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43da      	mvns	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	400a      	ands	r2, r1
 8005d08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68d9      	ldr	r1, [r3, #12]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4403      	add	r3, r0
 8005d22:	3b1e      	subs	r3, #30
 8005d24:	409a      	lsls	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	e022      	b.n	8005d76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6919      	ldr	r1, [r3, #16]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	2207      	movs	r2, #7
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	400a      	ands	r2, r1
 8005d52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6919      	ldr	r1, [r3, #16]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4618      	mov	r0, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4403      	add	r3, r0
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b06      	cmp	r3, #6
 8005d7c:	d824      	bhi.n	8005dc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3b05      	subs	r3, #5
 8005d90:	221f      	movs	r2, #31
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	43da      	mvns	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	400a      	ands	r2, r1
 8005d9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4618      	mov	r0, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	3b05      	subs	r3, #5
 8005dba:	fa00 f203 	lsl.w	r2, r0, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8005dc6:	e04c      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d824      	bhi.n	8005e1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	3b23      	subs	r3, #35	; 0x23
 8005de2:	221f      	movs	r2, #31
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	43da      	mvns	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	400a      	ands	r2, r1
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4618      	mov	r0, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	3b23      	subs	r3, #35	; 0x23
 8005e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
 8005e18:	e023      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	3b41      	subs	r3, #65	; 0x41
 8005e2c:	221f      	movs	r2, #31
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43da      	mvns	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	400a      	ands	r2, r1
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4618      	mov	r0, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	3b41      	subs	r3, #65	; 0x41
 8005e56:	fa00 f203 	lsl.w	r2, r0, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e62:	4b29      	ldr	r3, [pc, #164]	; (8005f08 <HAL_ADC_ConfigChannel+0x250>)
 8005e64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a28      	ldr	r2, [pc, #160]	; (8005f0c <HAL_ADC_ConfigChannel+0x254>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10f      	bne.n	8005e90 <HAL_ADC_ConfigChannel+0x1d8>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b12      	cmp	r3, #18
 8005e76:	d10b      	bne.n	8005e90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_ADC_ConfigChannel+0x254>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d12b      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x23a>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_ADC_ConfigChannel+0x258>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <HAL_ADC_ConfigChannel+0x1f4>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b11      	cmp	r3, #17
 8005eaa:	d122      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <HAL_ADC_ConfigChannel+0x258>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d111      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_ADC_ConfigChannel+0x25c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a11      	ldr	r2, [pc, #68]	; (8005f18 <HAL_ADC_ConfigChannel+0x260>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	0c9a      	lsrs	r2, r3, #18
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ee4:	e002      	b.n	8005eec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f9      	bne.n	8005ee6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40012300 	.word	0x40012300
 8005f0c:	40012000 	.word	0x40012000
 8005f10:	10000012 	.word	0x10000012
 8005f14:	20000280 	.word	0x20000280
 8005f18:	431bde83 	.word	0x431bde83

08005f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f24:	4b79      	ldr	r3, [pc, #484]	; (800610c <ADC_Init+0x1f0>)
 8005f26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6859      	ldr	r1, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	021a      	lsls	r2, r3, #8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6859      	ldr	r1, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	4a58      	ldr	r2, [pc, #352]	; (8006110 <ADC_Init+0x1f4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6899      	ldr	r1, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6899      	ldr	r1, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]
 8005ff8:	e00f      	b.n	800601a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006018:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0202 	bic.w	r2, r2, #2
 8006028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6899      	ldr	r1, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7e1b      	ldrb	r3, [r3, #24]
 8006034:	005a      	lsls	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01b      	beq.n	8006080 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006056:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006066:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	3b01      	subs	r3, #1
 8006074:	035a      	lsls	r2, r3, #13
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	e007      	b.n	8006090 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800608e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	051a      	lsls	r2, r3, #20
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6899      	ldr	r1, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060d2:	025a      	lsls	r2, r3, #9
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6899      	ldr	r1, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	029a      	lsls	r2, r3, #10
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
}
 8006100:	bf00      	nop
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40012300 	.word	0x40012300
 8006110:	0f000001 	.word	0x0f000001

08006114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <__NVIC_SetPriorityGrouping+0x44>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006130:	4013      	ands	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800613c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <__NVIC_SetPriorityGrouping+0x44>)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	60d3      	str	r3, [r2, #12]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <__NVIC_GetPriorityGrouping+0x18>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	0a1b      	lsrs	r3, r3, #8
 8006166:	f003 0307 	and.w	r3, r3, #7
}
 800616a:	4618      	mov	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	e000ed00 	.word	0xe000ed00

08006178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006186:	2b00      	cmp	r3, #0
 8006188:	db0b      	blt.n	80061a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	f003 021f 	and.w	r2, r3, #31
 8006190:	4907      	ldr	r1, [pc, #28]	; (80061b0 <__NVIC_EnableIRQ+0x38>)
 8006192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2001      	movs	r0, #1
 800619a:	fa00 f202 	lsl.w	r2, r0, r2
 800619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e100 	.word	0xe000e100

080061b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	6039      	str	r1, [r7, #0]
 80061be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	db0a      	blt.n	80061de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	490c      	ldr	r1, [pc, #48]	; (8006200 <__NVIC_SetPriority+0x4c>)
 80061ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d2:	0112      	lsls	r2, r2, #4
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	440b      	add	r3, r1
 80061d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061dc:	e00a      	b.n	80061f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4908      	ldr	r1, [pc, #32]	; (8006204 <__NVIC_SetPriority+0x50>)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	3b04      	subs	r3, #4
 80061ec:	0112      	lsls	r2, r2, #4
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	440b      	add	r3, r1
 80061f2:	761a      	strb	r2, [r3, #24]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	e000e100 	.word	0xe000e100
 8006204:	e000ed00 	.word	0xe000ed00

08006208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006208:	b480      	push	{r7}
 800620a:	b089      	sub	sp, #36	; 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f1c3 0307 	rsb	r3, r3, #7
 8006222:	2b04      	cmp	r3, #4
 8006224:	bf28      	it	cs
 8006226:	2304      	movcs	r3, #4
 8006228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	3304      	adds	r3, #4
 800622e:	2b06      	cmp	r3, #6
 8006230:	d902      	bls.n	8006238 <NVIC_EncodePriority+0x30>
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3b03      	subs	r3, #3
 8006236:	e000      	b.n	800623a <NVIC_EncodePriority+0x32>
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800623c:	f04f 32ff 	mov.w	r2, #4294967295
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	43da      	mvns	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	401a      	ands	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006250:	f04f 31ff 	mov.w	r1, #4294967295
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	fa01 f303 	lsl.w	r3, r1, r3
 800625a:	43d9      	mvns	r1, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006260:	4313      	orrs	r3, r2
         );
}
 8006262:	4618      	mov	r0, r3
 8006264:	3724      	adds	r7, #36	; 0x24
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff ff4c 	bl	8006114 <__NVIC_SetPriorityGrouping>
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006296:	f7ff ff61 	bl	800615c <__NVIC_GetPriorityGrouping>
 800629a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	6978      	ldr	r0, [r7, #20]
 80062a2:	f7ff ffb1 	bl	8006208 <NVIC_EncodePriority>
 80062a6:	4602      	mov	r2, r0
 80062a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff ff80 	bl	80061b4 <__NVIC_SetPriority>
}
 80062b4:	bf00      	nop
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ff54 	bl	8006178 <__NVIC_EnableIRQ>
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062e4:	f7ff fb1e 	bl	8005924 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e099      	b.n	8006428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0201 	bic.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006314:	e00f      	b.n	8006336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006316:	f7ff fb05 	bl	8005924 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b05      	cmp	r3, #5
 8006322:	d908      	bls.n	8006336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2203      	movs	r2, #3
 800632e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e078      	b.n	8006428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e8      	bne.n	8006316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4b38      	ldr	r3, [pc, #224]	; (8006430 <HAL_DMA_Init+0x158>)
 8006350:	4013      	ands	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800637a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	2b04      	cmp	r3, #4
 800638e:	d107      	bne.n	80063a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	4313      	orrs	r3, r2
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d117      	bne.n	80063fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00e      	beq.n	80063fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fa6f 	bl	80068c0 <DMA_CheckFifoParam>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2240      	movs	r2, #64	; 0x40
 80063ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063f6:	2301      	movs	r3, #1
 80063f8:	e016      	b.n	8006428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa26 	bl	8006854 <DMA_CalcBaseAndBitshift>
 8006408:	4603      	mov	r3, r0
 800640a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006410:	223f      	movs	r2, #63	; 0x3f
 8006412:	409a      	lsls	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	f010803f 	.word	0xf010803f

08006434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_DMA_Start_IT+0x26>
 8006456:	2302      	movs	r3, #2
 8006458:	e040      	b.n	80064dc <HAL_DMA_Start_IT+0xa8>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	d12f      	bne.n	80064ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f9b8 	bl	80067f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648c:	223f      	movs	r2, #63	; 0x3f
 800648e:	409a      	lsls	r2, r3
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0216 	orr.w	r2, r2, #22
 80064a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d007      	beq.n	80064bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0208 	orr.w	r2, r2, #8
 80064ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e005      	b.n	80064da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
 80064d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064f0:	4b92      	ldr	r3, [pc, #584]	; (800673c <HAL_DMA_IRQHandler+0x258>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a92      	ldr	r2, [pc, #584]	; (8006740 <HAL_DMA_IRQHandler+0x25c>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	0a9b      	lsrs	r3, r3, #10
 80064fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	2208      	movs	r2, #8
 8006510:	409a      	lsls	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01a      	beq.n	8006550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d013      	beq.n	8006550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0204 	bic.w	r2, r2, #4
 8006536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	2208      	movs	r2, #8
 800653e:	409a      	lsls	r2, r3
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006554:	2201      	movs	r2, #1
 8006556:	409a      	lsls	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d012      	beq.n	8006586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	2201      	movs	r2, #1
 8006574:	409a      	lsls	r2, r3
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	f043 0202 	orr.w	r2, r3, #2
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	2204      	movs	r2, #4
 800658c:	409a      	lsls	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d012      	beq.n	80065bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	2204      	movs	r2, #4
 80065aa:	409a      	lsls	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	f043 0204 	orr.w	r2, r3, #4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	2210      	movs	r2, #16
 80065c2:	409a      	lsls	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d043      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d03c      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	2210      	movs	r2, #16
 80065e0:	409a      	lsls	r2, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d018      	beq.n	8006626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d024      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
 8006612:	e01f      	b.n	8006654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01b      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
 8006624:	e016      	b.n	8006654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d107      	bne.n	8006644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0208 	bic.w	r2, r2, #8
 8006642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006658:	2220      	movs	r2, #32
 800665a:	409a      	lsls	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 808e 	beq.w	8006782 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8086 	beq.w	8006782 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667a:	2220      	movs	r2, #32
 800667c:	409a      	lsls	r2, r3
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b05      	cmp	r3, #5
 800668c:	d136      	bne.n	80066fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0216 	bic.w	r2, r2, #22
 800669c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_DMA_IRQHandler+0x1da>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0208 	bic.w	r2, r2, #8
 80066cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	223f      	movs	r2, #63	; 0x3f
 80066d4:	409a      	lsls	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d07d      	beq.n	80067ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
        }
        return;
 80066fa:	e078      	b.n	80067ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d01c      	beq.n	8006744 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	2b00      	cmp	r3, #0
 800671e:	d030      	beq.n	8006782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	e02b      	b.n	8006782 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d027      	beq.n	8006782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
 800673a:	e022      	b.n	8006782 <HAL_DMA_IRQHandler+0x29e>
 800673c:	20000280 	.word	0x20000280
 8006740:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10f      	bne.n	8006772 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0210 	bic.w	r2, r2, #16
 8006760:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	2b00      	cmp	r3, #0
 8006788:	d032      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d022      	beq.n	80067dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2205      	movs	r2, #5
 800679a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	3301      	adds	r3, #1
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d307      	bcc.n	80067ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f2      	bne.n	80067ae <HAL_DMA_IRQHandler+0x2ca>
 80067c8:	e000      	b.n	80067cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80067ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
 80067ec:	e000      	b.n	80067f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80067ee:	bf00      	nop
    }
  }
}
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d108      	bne.n	8006838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006836:	e007      	b.n	8006848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	3b10      	subs	r3, #16
 8006864:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <DMA_CalcBaseAndBitshift+0x64>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800686e:	4a13      	ldr	r2, [pc, #76]	; (80068bc <DMA_CalcBaseAndBitshift+0x68>)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b03      	cmp	r3, #3
 8006880:	d909      	bls.n	8006896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800688a:	f023 0303 	bic.w	r3, r3, #3
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	659a      	str	r2, [r3, #88]	; 0x58
 8006894:	e007      	b.n	80068a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	aaaaaaab 	.word	0xaaaaaaab
 80068bc:	080186a0 	.word	0x080186a0

080068c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11f      	bne.n	800691a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d855      	bhi.n	800698c <DMA_CheckFifoParam+0xcc>
 80068e0:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <DMA_CheckFifoParam+0x28>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	0800690b 	.word	0x0800690b
 80068f0:	080068f9 	.word	0x080068f9
 80068f4:	0800698d 	.word	0x0800698d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d045      	beq.n	8006990 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006908:	e042      	b.n	8006990 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006912:	d13f      	bne.n	8006994 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006918:	e03c      	b.n	8006994 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006922:	d121      	bne.n	8006968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b03      	cmp	r3, #3
 8006928:	d836      	bhi.n	8006998 <DMA_CheckFifoParam+0xd8>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <DMA_CheckFifoParam+0x70>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006941 	.word	0x08006941
 8006934:	08006947 	.word	0x08006947
 8006938:	08006941 	.word	0x08006941
 800693c:	08006959 	.word	0x08006959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
      break;
 8006944:	e02f      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d024      	beq.n	800699c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006956:	e021      	b.n	800699c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006960:	d11e      	bne.n	80069a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006966:	e01b      	b.n	80069a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d902      	bls.n	8006974 <DMA_CheckFifoParam+0xb4>
 800696e:	2b03      	cmp	r3, #3
 8006970:	d003      	beq.n	800697a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006972:	e018      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
      break;
 8006978:	e015      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
      break;
 800698a:	e00b      	b.n	80069a4 <DMA_CheckFifoParam+0xe4>
      break;
 800698c:	bf00      	nop
 800698e:	e00a      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006990:	bf00      	nop
 8006992:	e008      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006994:	bf00      	nop
 8006996:	e006      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006998:	bf00      	nop
 800699a:	e004      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      break;
 800699c:	bf00      	nop
 800699e:	e002      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80069a0:	bf00      	nop
 80069a2:	e000      	b.n	80069a6 <DMA_CheckFifoParam+0xe6>
      break;
 80069a4:	bf00      	nop
    }
  } 
  
  return status; 
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	e165      	b.n	8006c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069d0:	2201      	movs	r2, #1
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4013      	ands	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	f040 8154 	bne.w	8006c96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d00b      	beq.n	8006a0e <HAL_GPIO_Init+0x5a>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d007      	beq.n	8006a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a02:	2b11      	cmp	r3, #17
 8006a04:	d003      	beq.n	8006a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b12      	cmp	r3, #18
 8006a0c:	d130      	bne.n	8006a70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	2203      	movs	r2, #3
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4013      	ands	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a44:	2201      	movs	r2, #1
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4013      	ands	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 0201 	and.w	r2, r3, #1
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d003      	beq.n	8006ab0 <HAL_GPIO_Init+0xfc>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b12      	cmp	r3, #18
 8006aae:	d123      	bne.n	8006af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	08da      	lsrs	r2, r3, #3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3208      	adds	r2, #8
 8006ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	220f      	movs	r2, #15
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	08da      	lsrs	r2, r3, #3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3208      	adds	r2, #8
 8006af2:	69b9      	ldr	r1, [r7, #24]
 8006af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	2203      	movs	r2, #3
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 0203 	and.w	r2, r3, #3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80ae 	beq.w	8006c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4b5c      	ldr	r3, [pc, #368]	; (8006cb0 <HAL_GPIO_Init+0x2fc>)
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	4a5b      	ldr	r2, [pc, #364]	; (8006cb0 <HAL_GPIO_Init+0x2fc>)
 8006b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b48:	6453      	str	r3, [r2, #68]	; 0x44
 8006b4a:	4b59      	ldr	r3, [pc, #356]	; (8006cb0 <HAL_GPIO_Init+0x2fc>)
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b56:	4a57      	ldr	r2, [pc, #348]	; (8006cb4 <HAL_GPIO_Init+0x300>)
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a4e      	ldr	r2, [pc, #312]	; (8006cb8 <HAL_GPIO_Init+0x304>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d025      	beq.n	8006bce <HAL_GPIO_Init+0x21a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a4d      	ldr	r2, [pc, #308]	; (8006cbc <HAL_GPIO_Init+0x308>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01f      	beq.n	8006bca <HAL_GPIO_Init+0x216>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a4c      	ldr	r2, [pc, #304]	; (8006cc0 <HAL_GPIO_Init+0x30c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d019      	beq.n	8006bc6 <HAL_GPIO_Init+0x212>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a4b      	ldr	r2, [pc, #300]	; (8006cc4 <HAL_GPIO_Init+0x310>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <HAL_GPIO_Init+0x20e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a4a      	ldr	r2, [pc, #296]	; (8006cc8 <HAL_GPIO_Init+0x314>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00d      	beq.n	8006bbe <HAL_GPIO_Init+0x20a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a49      	ldr	r2, [pc, #292]	; (8006ccc <HAL_GPIO_Init+0x318>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <HAL_GPIO_Init+0x206>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a48      	ldr	r2, [pc, #288]	; (8006cd0 <HAL_GPIO_Init+0x31c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <HAL_GPIO_Init+0x202>
 8006bb2:	2306      	movs	r3, #6
 8006bb4:	e00c      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bb6:	2307      	movs	r3, #7
 8006bb8:	e00a      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bba:	2305      	movs	r3, #5
 8006bbc:	e008      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bbe:	2304      	movs	r3, #4
 8006bc0:	e006      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e004      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e002      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	f002 0203 	and.w	r2, r2, #3
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	4093      	lsls	r3, r2
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006be0:	4934      	ldr	r1, [pc, #208]	; (8006cb4 <HAL_GPIO_Init+0x300>)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	089b      	lsrs	r3, r3, #2
 8006be6:	3302      	adds	r3, #2
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bee:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c12:	4a30      	ldr	r2, [pc, #192]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c18:	4b2e      	ldr	r3, [pc, #184]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	4013      	ands	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c3c:	4a25      	ldr	r2, [pc, #148]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c42:	4b24      	ldr	r3, [pc, #144]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c66:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c6c:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c90:	4a10      	ldr	r2, [pc, #64]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	f67f ae96 	bls.w	80069d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	3724      	adds	r7, #36	; 0x24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40013800 	.word	0x40013800
 8006cb8:	40020000 	.word	0x40020000
 8006cbc:	40020400 	.word	0x40020400
 8006cc0:	40020800 	.word	0x40020800
 8006cc4:	40020c00 	.word	0x40020c00
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	40021400 	.word	0x40021400
 8006cd0:	40021800 	.word	0x40021800
 8006cd4:	40013c00 	.word	0x40013c00

08006cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	887b      	ldrh	r3, [r7, #2]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	e001      	b.n	8006cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	807b      	strh	r3, [r7, #2]
 8006d14:	4613      	mov	r3, r2
 8006d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d18:	787b      	ldrb	r3, [r7, #1]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d1e:	887a      	ldrh	r2, [r7, #2]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d24:	e003      	b.n	8006d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	041a      	lsls	r2, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	619a      	str	r2, [r3, #24]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d46:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d48:	695a      	ldr	r2, [r3, #20]
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d006      	beq.n	8006d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d52:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fc fbec 	bl	8003538 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40013c00 	.word	0x40013c00

08006d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e11f      	b.n	8006fbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fe f970 	bl	8005078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2224      	movs	r2, #36	; 0x24
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f002 fa90 	bl	80092f4 <HAL_RCC_GetPCLK1Freq>
 8006dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	4a7b      	ldr	r2, [pc, #492]	; (8006fc8 <HAL_I2C_Init+0x25c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d807      	bhi.n	8006df0 <HAL_I2C_Init+0x84>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a7a      	ldr	r2, [pc, #488]	; (8006fcc <HAL_I2C_Init+0x260>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	bf94      	ite	ls
 8006de8:	2301      	movls	r3, #1
 8006dea:	2300      	movhi	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	e006      	b.n	8006dfe <HAL_I2C_Init+0x92>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a77      	ldr	r2, [pc, #476]	; (8006fd0 <HAL_I2C_Init+0x264>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	bf94      	ite	ls
 8006df8:	2301      	movls	r3, #1
 8006dfa:	2300      	movhi	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e0db      	b.n	8006fbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4a72      	ldr	r2, [pc, #456]	; (8006fd4 <HAL_I2C_Init+0x268>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	0c9b      	lsrs	r3, r3, #18
 8006e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4a64      	ldr	r2, [pc, #400]	; (8006fc8 <HAL_I2C_Init+0x25c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d802      	bhi.n	8006e40 <HAL_I2C_Init+0xd4>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	e009      	b.n	8006e54 <HAL_I2C_Init+0xe8>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e46:	fb02 f303 	mul.w	r3, r2, r3
 8006e4a:	4a63      	ldr	r2, [pc, #396]	; (8006fd8 <HAL_I2C_Init+0x26c>)
 8006e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e50:	099b      	lsrs	r3, r3, #6
 8006e52:	3301      	adds	r3, #1
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6812      	ldr	r2, [r2, #0]
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	4956      	ldr	r1, [pc, #344]	; (8006fc8 <HAL_I2C_Init+0x25c>)
 8006e70:	428b      	cmp	r3, r1
 8006e72:	d80d      	bhi.n	8006e90 <HAL_I2C_Init+0x124>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	1e59      	subs	r1, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e82:	3301      	adds	r3, #1
 8006e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	bf38      	it	cc
 8006e8c:	2304      	movcc	r3, #4
 8006e8e:	e04f      	b.n	8006f30 <HAL_I2C_Init+0x1c4>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d111      	bne.n	8006ebc <HAL_I2C_Init+0x150>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1e58      	subs	r0, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	440b      	add	r3, r1
 8006ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e012      	b.n	8006ee2 <HAL_I2C_Init+0x176>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1e58      	subs	r0, r3, #1
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6859      	ldr	r1, [r3, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	0099      	lsls	r1, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf0c      	ite	eq
 8006edc:	2301      	moveq	r3, #1
 8006ede:	2300      	movne	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_I2C_Init+0x17e>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e022      	b.n	8006f30 <HAL_I2C_Init+0x1c4>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10e      	bne.n	8006f10 <HAL_I2C_Init+0x1a4>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1e58      	subs	r0, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6859      	ldr	r1, [r3, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	440b      	add	r3, r1
 8006f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f04:	3301      	adds	r3, #1
 8006f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0e:	e00f      	b.n	8006f30 <HAL_I2C_Init+0x1c4>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	1e58      	subs	r0, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6859      	ldr	r1, [r3, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	0099      	lsls	r1, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f26:	3301      	adds	r3, #1
 8006f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	6809      	ldr	r1, [r1, #0]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69da      	ldr	r2, [r3, #28]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6911      	ldr	r1, [r2, #16]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	4311      	orrs	r1, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	000186a0 	.word	0x000186a0
 8006fcc:	001e847f 	.word	0x001e847f
 8006fd0:	003d08ff 	.word	0x003d08ff
 8006fd4:	431bde83 	.word	0x431bde83
 8006fd8:	10624dd3 	.word	0x10624dd3

08006fdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	817b      	strh	r3, [r7, #10]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	813b      	strh	r3, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ff6:	f7fe fc95 	bl	8005924 <HAL_GetTick>
 8006ffa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b20      	cmp	r3, #32
 8007006:	f040 80d9 	bne.w	80071bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2319      	movs	r3, #25
 8007010:	2201      	movs	r2, #1
 8007012:	496d      	ldr	r1, [pc, #436]	; (80071c8 <HAL_I2C_Mem_Write+0x1ec>)
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fc7f 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
 8007022:	e0cc      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_I2C_Mem_Write+0x56>
 800702e:	2302      	movs	r3, #2
 8007030:	e0c5      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b01      	cmp	r3, #1
 8007046:	d007      	beq.n	8007058 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007066:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2221      	movs	r2, #33	; 0x21
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2240      	movs	r2, #64	; 0x40
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007088:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a4d      	ldr	r2, [pc, #308]	; (80071cc <HAL_I2C_Mem_Write+0x1f0>)
 8007098:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800709a:	88f8      	ldrh	r0, [r7, #6]
 800709c:	893a      	ldrh	r2, [r7, #8]
 800709e:	8979      	ldrh	r1, [r7, #10]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fab6 	bl	800761c <I2C_RequestMemoryWrite>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d052      	beq.n	800715c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e081      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fd00 	bl	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d107      	bne.n	80070e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e06b      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	781a      	ldrb	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b04      	cmp	r3, #4
 8007122:	d11b      	bne.n	800715c <HAL_I2C_Mem_Write+0x180>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007128:	2b00      	cmp	r3, #0
 800712a:	d017      	beq.n	800715c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	781a      	ldrb	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1aa      	bne.n	80070ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fcec 	bl	8007b46 <I2C_WaitOnBTFFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	2b04      	cmp	r3, #4
 800717a:	d107      	bne.n	800718c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e016      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	e000      	b.n	80071be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071bc:	2302      	movs	r3, #2
  }
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	00100002 	.word	0x00100002
 80071cc:	ffff0000 	.word	0xffff0000

080071d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08c      	sub	sp, #48	; 0x30
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	461a      	mov	r2, r3
 80071de:	4603      	mov	r3, r0
 80071e0:	817b      	strh	r3, [r7, #10]
 80071e2:	460b      	mov	r3, r1
 80071e4:	813b      	strh	r3, [r7, #8]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071ea:	f7fe fb9b 	bl	8005924 <HAL_GetTick>
 80071ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	f040 8208 	bne.w	800760e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2319      	movs	r3, #25
 8007204:	2201      	movs	r2, #1
 8007206:	497b      	ldr	r1, [pc, #492]	; (80073f4 <HAL_I2C_Mem_Read+0x224>)
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fb85 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
 8007216:	e1fb      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_I2C_Mem_Read+0x56>
 8007222:	2302      	movs	r3, #2
 8007224:	e1f4      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	d007      	beq.n	800724c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800725a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2222      	movs	r2, #34	; 0x22
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2240      	movs	r2, #64	; 0x40
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800727c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a5b      	ldr	r2, [pc, #364]	; (80073f8 <HAL_I2C_Mem_Read+0x228>)
 800728c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800728e:	88f8      	ldrh	r0, [r7, #6]
 8007290:	893a      	ldrh	r2, [r7, #8]
 8007292:	8979      	ldrh	r1, [r7, #10]
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4603      	mov	r3, r0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fa52 	bl	8007748 <I2C_RequestMemoryRead>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e1b0      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d113      	bne.n	80072de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b6:	2300      	movs	r3, #0
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	623b      	str	r3, [r7, #32]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e184      	b.n	80075e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d11b      	bne.n	800731e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	e164      	b.n	80075e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007322:	2b02      	cmp	r3, #2
 8007324:	d11b      	bne.n	800735e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007334:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	e144      	b.n	80075e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007374:	e138      	b.n	80075e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737a:	2b03      	cmp	r3, #3
 800737c:	f200 80f1 	bhi.w	8007562 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007384:	2b01      	cmp	r3, #1
 8007386:	d123      	bne.n	80073d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fc1b 	bl	8007bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e139      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ce:	e10b      	b.n	80075e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d14e      	bne.n	8007476 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	2200      	movs	r2, #0
 80073e0:	4906      	ldr	r1, [pc, #24]	; (80073fc <HAL_I2C_Mem_Read+0x22c>)
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fa98 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e10e      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
 80073f2:	bf00      	nop
 80073f4:	00100002 	.word	0x00100002
 80073f8:	ffff0000 	.word	0xffff0000
 80073fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800740e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007474:	e0b8      	b.n	80075e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747c:	2200      	movs	r2, #0
 800747e:	4966      	ldr	r1, [pc, #408]	; (8007618 <HAL_I2C_Mem_Read+0x448>)
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fa49 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e0bf      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	2200      	movs	r2, #0
 80074da:	494f      	ldr	r1, [pc, #316]	; (8007618 <HAL_I2C_Mem_Read+0x448>)
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fa1b 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e091      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007560:	e042      	b.n	80075e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007564:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fb2e 	bl	8007bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e04c      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d118      	bne.n	80075e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f47f aec2 	bne.w	8007376 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e000      	b.n	8007610 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800760e:	2302      	movs	r3, #2
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3728      	adds	r7, #40	; 0x28
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	00010004 	.word	0x00010004

0800761c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	4608      	mov	r0, r1
 8007626:	4611      	mov	r1, r2
 8007628:	461a      	mov	r2, r3
 800762a:	4603      	mov	r3, r0
 800762c:	817b      	strh	r3, [r7, #10]
 800762e:	460b      	mov	r3, r1
 8007630:	813b      	strh	r3, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	2200      	movs	r2, #0
 800764e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 f960 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00d      	beq.n	800767a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800766c:	d103      	bne.n	8007676 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e05f      	b.n	800773a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800767a:	897b      	ldrh	r3, [r7, #10]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007688:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	6a3a      	ldr	r2, [r7, #32]
 800768e:	492d      	ldr	r1, [pc, #180]	; (8007744 <I2C_RequestMemoryWrite+0x128>)
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f998 	bl	80079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e04c      	b.n	800773a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b8:	6a39      	ldr	r1, [r7, #32]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fa02 	bl	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00d      	beq.n	80076e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d107      	bne.n	80076de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e02b      	b.n	800773a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d105      	bne.n	80076f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	611a      	str	r2, [r3, #16]
 80076f2:	e021      	b.n	8007738 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076f4:	893b      	ldrh	r3, [r7, #8]
 80076f6:	0a1b      	lsrs	r3, r3, #8
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007704:	6a39      	ldr	r1, [r7, #32]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f9dc 	bl	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	2b04      	cmp	r3, #4
 8007718:	d107      	bne.n	800772a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007728:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e005      	b.n	800773a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800772e:	893b      	ldrh	r3, [r7, #8]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	00010002 	.word	0x00010002

08007748 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	461a      	mov	r2, r3
 8007756:	4603      	mov	r3, r0
 8007758:	817b      	strh	r3, [r7, #10]
 800775a:	460b      	mov	r3, r1
 800775c:	813b      	strh	r3, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007770:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	2200      	movs	r2, #0
 800778a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 f8c2 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00d      	beq.n	80077b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a8:	d103      	bne.n	80077b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e0aa      	b.n	800790c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077b6:	897b      	ldrh	r3, [r7, #10]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	6a3a      	ldr	r2, [r7, #32]
 80077ca:	4952      	ldr	r1, [pc, #328]	; (8007914 <I2C_RequestMemoryRead+0x1cc>)
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f8fa 	bl	80079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e097      	b.n	800790c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f4:	6a39      	ldr	r1, [r7, #32]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f964 	bl	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00d      	beq.n	800781e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	2b04      	cmp	r3, #4
 8007808:	d107      	bne.n	800781a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e076      	b.n	800790c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d105      	bne.n	8007830 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007824:	893b      	ldrh	r3, [r7, #8]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	611a      	str	r2, [r3, #16]
 800782e:	e021      	b.n	8007874 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007830:	893b      	ldrh	r3, [r7, #8]
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	b29b      	uxth	r3, r3
 8007836:	b2da      	uxtb	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	6a39      	ldr	r1, [r7, #32]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f93e 	bl	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	2b04      	cmp	r3, #4
 8007854:	d107      	bne.n	8007866 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e050      	b.n	800790c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800786a:	893b      	ldrh	r3, [r7, #8]
 800786c:	b2da      	uxtb	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007876:	6a39      	ldr	r1, [r7, #32]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f923 	bl	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00d      	beq.n	80078a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007888:	2b04      	cmp	r3, #4
 800788a:	d107      	bne.n	800789c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800789a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e035      	b.n	800790c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 f82b 	bl	8007918 <I2C_WaitOnFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00d      	beq.n	80078e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d6:	d103      	bne.n	80078e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e013      	b.n	800790c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078e4:	897b      	ldrh	r3, [r7, #10]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f043 0301 	orr.w	r3, r3, #1
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	4906      	ldr	r1, [pc, #24]	; (8007914 <I2C_RequestMemoryRead+0x1cc>)
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f863 	bl	80079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	00010002 	.word	0x00010002

08007918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	4613      	mov	r3, r2
 8007926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007928:	e025      	b.n	8007976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007930:	d021      	beq.n	8007976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007932:	f7fd fff7 	bl	8005924 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d302      	bcc.n	8007948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d116      	bne.n	8007976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f043 0220 	orr.w	r2, r3, #32
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e023      	b.n	80079be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	0c1b      	lsrs	r3, r3, #16
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10d      	bne.n	800799c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	43da      	mvns	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4013      	ands	r3, r2
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	bf0c      	ite	eq
 8007992:	2301      	moveq	r3, #1
 8007994:	2300      	movne	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	e00c      	b.n	80079b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	43da      	mvns	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4013      	ands	r3, r2
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf0c      	ite	eq
 80079ae:	2301      	moveq	r3, #1
 80079b0:	2300      	movne	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d0b6      	beq.n	800792a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079d4:	e051      	b.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e4:	d123      	bne.n	8007a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f043 0204 	orr.w	r2, r3, #4
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e046      	b.n	8007abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d021      	beq.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a36:	f7fd ff75 	bl	8005924 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d302      	bcc.n	8007a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d116      	bne.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	f043 0220 	orr.w	r2, r3, #32
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e020      	b.n	8007abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	0c1b      	lsrs	r3, r3, #16
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d10c      	bne.n	8007a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	43da      	mvns	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bf14      	ite	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	2300      	moveq	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	e00b      	b.n	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	43da      	mvns	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bf14      	ite	ne
 8007ab0:	2301      	movne	r3, #1
 8007ab2:	2300      	moveq	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d18d      	bne.n	80079d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ad0:	e02d      	b.n	8007b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f8ce 	bl	8007c74 <I2C_IsAcknowledgeFailed>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e02d      	b.n	8007b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d021      	beq.n	8007b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aea:	f7fd ff1b 	bl	8005924 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d302      	bcc.n	8007b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d116      	bne.n	8007b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f043 0220 	orr.w	r2, r3, #32
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e007      	b.n	8007b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d1ca      	bne.n	8007ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b52:	e02d      	b.n	8007bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 f88d 	bl	8007c74 <I2C_IsAcknowledgeFailed>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e02d      	b.n	8007bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6a:	d021      	beq.n	8007bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6c:	f7fd feda 	bl	8005924 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d302      	bcc.n	8007b82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d116      	bne.n	8007bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	f043 0220 	orr.w	r2, r3, #32
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e007      	b.n	8007bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d1ca      	bne.n	8007b54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bd4:	e042      	b.n	8007c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b10      	cmp	r3, #16
 8007be2:	d119      	bne.n	8007c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0210 	mvn.w	r2, #16
 8007bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e029      	b.n	8007c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c18:	f7fd fe84 	bl	8005924 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d302      	bcc.n	8007c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d116      	bne.n	8007c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e007      	b.n	8007c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d1b5      	bne.n	8007bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8a:	d11b      	bne.n	8007cc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	f043 0204 	orr.w	r2, r3, #4
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e000      	b.n	8007cc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd4:	b08f      	sub	sp, #60	; 0x3c
 8007cd6:	af0a      	add	r7, sp, #40	; 0x28
 8007cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e116      	b.n	8007f12 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f00a faae 	bl	8012260 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2203      	movs	r2, #3
 8007d08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f004 fa09 	bl	800c13a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	687e      	ldr	r6, [r7, #4]
 8007d30:	466d      	mov	r5, sp
 8007d32:	f106 0410 	add.w	r4, r6, #16
 8007d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d46:	1d33      	adds	r3, r6, #4
 8007d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d4a:	6838      	ldr	r0, [r7, #0]
 8007d4c:	f004 f8e0 	bl	800bf10 <USB_CoreInit>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e0d7      	b.n	8007f12 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f004 f9f7 	bl	800c15c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	e04a      	b.n	8007e0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d74:	7bfa      	ldrb	r2, [r7, #15]
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	333d      	adds	r3, #61	; 0x3d
 8007d84:	2201      	movs	r2, #1
 8007d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d88:	7bfa      	ldrb	r2, [r7, #15]
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	333c      	adds	r3, #60	; 0x3c
 8007d98:	7bfa      	ldrb	r2, [r7, #15]
 8007d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d9c:	7bfa      	ldrb	r2, [r7, #15]
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	b298      	uxth	r0, r3
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	3342      	adds	r3, #66	; 0x42
 8007db0:	4602      	mov	r2, r0
 8007db2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	333f      	adds	r3, #63	; 0x3f
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007dc8:	7bfa      	ldrb	r2, [r7, #15]
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	3344      	adds	r3, #68	; 0x44
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007ddc:	7bfa      	ldrb	r2, [r7, #15]
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	3348      	adds	r3, #72	; 0x48
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007df0:	7bfa      	ldrb	r2, [r7, #15]
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	4613      	mov	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	1a9b      	subs	r3, r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	3350      	adds	r3, #80	; 0x50
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	3301      	adds	r3, #1
 8007e08:	73fb      	strb	r3, [r7, #15]
 8007e0a:	7bfa      	ldrb	r2, [r7, #15]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d3af      	bcc.n	8007d74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e044      	b.n	8007ea4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e1a:	7bfa      	ldrb	r2, [r7, #15]
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e30:	7bfa      	ldrb	r2, [r7, #15]
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	4613      	mov	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007e42:	7bfa      	ldrb	r2, [r7, #15]
 8007e44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e46:	7bfa      	ldrb	r2, [r7, #15]
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	440b      	add	r3, r1
 8007e54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e5c:	7bfa      	ldrb	r2, [r7, #15]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e72:	7bfa      	ldrb	r2, [r7, #15]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e88:	7bfa      	ldrb	r2, [r7, #15]
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
 8007ea4:	7bfa      	ldrb	r2, [r7, #15]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d3b5      	bcc.n	8007e1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	687e      	ldr	r6, [r7, #4]
 8007eb6:	466d      	mov	r5, sp
 8007eb8:	f106 0410 	add.w	r4, r6, #16
 8007ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ecc:	1d33      	adds	r3, r6, #4
 8007ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ed0:	6838      	ldr	r0, [r7, #0]
 8007ed2:	f004 f96d 	bl	800c1b0 <USB_DevInit>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e014      	b.n	8007f12 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d102      	bne.n	8007f06 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 f891 	bl	8009028 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f005 f9a8 	bl	800d260 <USB_DevDisconnect>

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_PCD_Start+0x1c>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e020      	b.n	8007f78 <HAL_PCD_Start+0x5e>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d109      	bne.n	8007f5a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d005      	beq.n	8007f5a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f004 f8da 	bl	800c118 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f005 f958 	bl	800d21e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b08d      	sub	sp, #52	; 0x34
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f005 fa16 	bl	800d3c8 <USB_GetMode>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 83ca 	bne.w	8008738 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f005 f97a 	bl	800d2a2 <USB_ReadInterrupts>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 83c0 	beq.w	8008736 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f005 f971 	bl	800d2a2 <USB_ReadInterrupts>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d107      	bne.n	8007fda <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	695a      	ldr	r2, [r3, #20]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f002 0202 	and.w	r2, r2, #2
 8007fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f005 f95f 	bl	800d2a2 <USB_ReadInterrupts>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d161      	bne.n	80080b2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0210 	bic.w	r2, r2, #16
 8007ffc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f003 020f 	and.w	r2, r3, #15
 800800a:	4613      	mov	r3, r2
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	1a9b      	subs	r3, r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	3304      	adds	r3, #4
 800801c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	0c5b      	lsrs	r3, r3, #17
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	2b02      	cmp	r3, #2
 8008028:	d124      	bne.n	8008074 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d035      	beq.n	80080a2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	091b      	lsrs	r3, r3, #4
 800803e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008044:	b29b      	uxth	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	6a38      	ldr	r0, [r7, #32]
 800804a:	f004 ffc5 	bl	800cfd8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	091b      	lsrs	r3, r3, #4
 8008056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800805a:	441a      	add	r2, r3
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	699a      	ldr	r2, [r3, #24]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	091b      	lsrs	r3, r3, #4
 8008068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800806c:	441a      	add	r2, r3
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	619a      	str	r2, [r3, #24]
 8008072:	e016      	b.n	80080a2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	0c5b      	lsrs	r3, r3, #17
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	2b06      	cmp	r3, #6
 800807e:	d110      	bne.n	80080a2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008086:	2208      	movs	r2, #8
 8008088:	4619      	mov	r1, r3
 800808a:	6a38      	ldr	r0, [r7, #32]
 800808c:	f004 ffa4 	bl	800cfd8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	091b      	lsrs	r3, r3, #4
 8008098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800809c:	441a      	add	r2, r3
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	699a      	ldr	r2, [r3, #24]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0210 	orr.w	r2, r2, #16
 80080b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f005 f8f3 	bl	800d2a2 <USB_ReadInterrupts>
 80080bc:	4603      	mov	r3, r0
 80080be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080c6:	d16e      	bne.n	80081a6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f005 f8f9 	bl	800d2c8 <USB_ReadDevAllOutEpInterrupt>
 80080d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80080d8:	e062      	b.n	80081a0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d057      	beq.n	8008194 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f005 f91e 	bl	800d330 <USB_ReadDevOutEPInterrupt>
 80080f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00c      	beq.n	800811a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810c:	461a      	mov	r2, r3
 800810e:	2301      	movs	r3, #1
 8008110:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fddd 	bl	8008cd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008130:	461a      	mov	r2, r3
 8008132:	2308      	movs	r3, #8
 8008134:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fed7 	bl	8008eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d008      	beq.n	800815a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008154:	461a      	mov	r2, r3
 8008156:	2310      	movs	r3, #16
 8008158:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008170:	461a      	mov	r2, r3
 8008172:	2320      	movs	r3, #32
 8008174:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818c:	461a      	mov	r2, r3
 800818e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008192:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	3301      	adds	r3, #1
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	085b      	lsrs	r3, r3, #1
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d199      	bne.n	80080da <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f005 f879 	bl	800d2a2 <USB_ReadInterrupts>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081ba:	f040 80c0 	bne.w	800833e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f005 f89a 	bl	800d2fc <USB_ReadDevAllInEpInterrupt>
 80081c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80081ce:	e0b2      	b.n	8008336 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80a7 	beq.w	800832a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f005 f8c0 	bl	800d36c <USB_ReadDevInEPInterrupt>
 80081ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d057      	beq.n	80082a8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	2201      	movs	r2, #1
 8008200:	fa02 f303 	lsl.w	r3, r2, r3
 8008204:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	43db      	mvns	r3, r3
 8008212:	69f9      	ldr	r1, [r7, #28]
 8008214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008218:	4013      	ands	r3, r2
 800821a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008228:	461a      	mov	r2, r3
 800822a:	2301      	movs	r3, #1
 800822c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d132      	bne.n	800829c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	4613      	mov	r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	3348      	adds	r3, #72	; 0x48
 8008246:	6819      	ldr	r1, [r3, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824c:	4613      	mov	r3, r2
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4403      	add	r3, r0
 8008256:	3344      	adds	r3, #68	; 0x44
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4419      	add	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4403      	add	r3, r0
 800826a:	3348      	adds	r3, #72	; 0x48
 800826c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d113      	bne.n	800829c <HAL_PCD_IRQHandler+0x31c>
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008278:	4613      	mov	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	3350      	adds	r3, #80	; 0x50
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d108      	bne.n	800829c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008294:	461a      	mov	r2, r3
 8008296:	2101      	movs	r1, #1
 8008298:	f005 f8c8 	bl	800d42c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f00a f85d 	bl	8012362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d008      	beq.n	80082c4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082be:	461a      	mov	r2, r3
 80082c0:	2308      	movs	r3, #8
 80082c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082da:	461a      	mov	r2, r3
 80082dc:	2310      	movs	r3, #16
 80082de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f6:	461a      	mov	r2, r3
 80082f8:	2340      	movs	r3, #64	; 0x40
 80082fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d008      	beq.n	8008318 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008312:	461a      	mov	r2, r3
 8008314:	2302      	movs	r3, #2
 8008316:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc48 	bl	8008bba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	3301      	adds	r3, #1
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	2b00      	cmp	r3, #0
 800833a:	f47f af49 	bne.w	80081d0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f004 ffad 	bl	800d2a2 <USB_ReadInterrupts>
 8008348:	4603      	mov	r3, r0
 800834a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800834e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008352:	d122      	bne.n	800839a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800836e:	2b01      	cmp	r3, #1
 8008370:	d108      	bne.n	8008384 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800837a:	2100      	movs	r1, #0
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f00a fa3f 	bl	8012800 <HAL_PCDEx_LPM_Callback>
 8008382:	e002      	b.n	800838a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f00a f863 	bl	8012450 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f004 ff7f 	bl	800d2a2 <USB_ReadInterrupts>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ae:	d112      	bne.n	80083d6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d102      	bne.n	80083c6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f00a f81f 	bl	8012404 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	695a      	ldr	r2, [r3, #20]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80083d4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f004 ff61 	bl	800d2a2 <USB_ReadInterrupts>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ea:	d121      	bne.n	8008430 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695a      	ldr	r2, [r3, #20]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80083fa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008402:	2b00      	cmp	r3, #0
 8008404:	d111      	bne.n	800842a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008414:	089b      	lsrs	r3, r3, #2
 8008416:	f003 020f 	and.w	r2, r3, #15
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008420:	2101      	movs	r1, #1
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f00a f9ec 	bl	8012800 <HAL_PCDEx_LPM_Callback>
 8008428:	e002      	b.n	8008430 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f009 ffea 	bl	8012404 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f004 ff34 	bl	800d2a2 <USB_ReadInterrupts>
 800843a:	4603      	mov	r3, r0
 800843c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008444:	f040 80c7 	bne.w	80085d6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008456:	f023 0301 	bic.w	r3, r3, #1
 800845a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2110      	movs	r1, #16
 8008462:	4618      	mov	r0, r3
 8008464:	f004 f802 	bl	800c46c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008468:	2300      	movs	r3, #0
 800846a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800846c:	e056      	b.n	800851c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847a:	461a      	mov	r2, r3
 800847c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008480:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	440a      	add	r2, r1
 8008498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800849c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084a0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	69fa      	ldr	r2, [r7, #28]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	461a      	mov	r2, r3
 80084d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	440a      	add	r2, r1
 800850c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008510:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008514:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	3301      	adds	r3, #1
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008522:	429a      	cmp	r2, r3
 8008524:	d3a3      	bcc.n	800846e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008534:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008538:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	2b00      	cmp	r3, #0
 8008540:	d016      	beq.n	8008570 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008552:	f043 030b 	orr.w	r3, r3, #11
 8008556:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008568:	f043 030b 	orr.w	r3, r3, #11
 800856c:	6453      	str	r3, [r2, #68]	; 0x44
 800856e:	e015      	b.n	800859c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800857e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008582:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008586:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008596:	f043 030b 	orr.w	r3, r3, #11
 800859a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80085c0:	461a      	mov	r2, r3
 80085c2:	f004 ff33 	bl	800d42c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695a      	ldr	r2, [r3, #20]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80085d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f004 fe61 	bl	800d2a2 <USB_ReadInterrupts>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ea:	d124      	bne.n	8008636 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f004 fef7 	bl	800d3e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f003 ff97 	bl	800c52e <USB_GetDevSpeed>
 8008600:	4603      	mov	r3, r0
 8008602:	461a      	mov	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681c      	ldr	r4, [r3, #0]
 800860c:	f000 fe66 	bl	80092dc <HAL_RCC_GetHCLKFreq>
 8008610:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	4620      	mov	r0, r4
 800861c:	f003 fcda 	bl	800bfd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f009 fec6 	bl	80123b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695a      	ldr	r2, [r3, #20]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008634:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f004 fe31 	bl	800d2a2 <USB_ReadInterrupts>
 8008640:	4603      	mov	r3, r0
 8008642:	f003 0308 	and.w	r3, r3, #8
 8008646:	2b08      	cmp	r3, #8
 8008648:	d10a      	bne.n	8008660 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f009 fea3 	bl	8012396 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695a      	ldr	r2, [r3, #20]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f002 0208 	and.w	r2, r2, #8
 800865e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f004 fe1c 	bl	800d2a2 <USB_ReadInterrupts>
 800866a:	4603      	mov	r3, r0
 800866c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008674:	d10f      	bne.n	8008696 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	b2db      	uxtb	r3, r3
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f009 ff05 	bl	8012490 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695a      	ldr	r2, [r3, #20]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f004 fe01 	bl	800d2a2 <USB_ReadInterrupts>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086aa:	d10f      	bne.n	80086cc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f009 fed8 	bl	801246c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695a      	ldr	r2, [r3, #20]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80086ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f004 fde6 	bl	800d2a2 <USB_ReadInterrupts>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e0:	d10a      	bne.n	80086f8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f009 fee6 	bl	80124b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80086f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f004 fdd0 	bl	800d2a2 <USB_ReadInterrupts>
 8008702:	4603      	mov	r3, r0
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b04      	cmp	r3, #4
 800870a:	d115      	bne.n	8008738 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f009 fed6 	bl	80124d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6859      	ldr	r1, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	430a      	orrs	r2, r1
 8008732:	605a      	str	r2, [r3, #4]
 8008734:	e000      	b.n	8008738 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008736:	bf00      	nop
    }
  }
}
 8008738:	3734      	adds	r7, #52	; 0x34
 800873a:	46bd      	mov	sp, r7
 800873c:	bd90      	pop	{r4, r7, pc}

0800873e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	460b      	mov	r3, r1
 8008748:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_PCD_SetAddress+0x1a>
 8008754:	2302      	movs	r3, #2
 8008756:	e013      	b.n	8008780 <HAL_PCD_SetAddress+0x42>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	4611      	mov	r1, r2
 8008770:	4618      	mov	r0, r3
 8008772:	f004 fd2e 	bl	800d1d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	461a      	mov	r2, r3
 8008796:	4603      	mov	r3, r0
 8008798:	70fb      	strb	r3, [r7, #3]
 800879a:	460b      	mov	r3, r1
 800879c:	803b      	strh	r3, [r7, #0]
 800879e:	4613      	mov	r3, r2
 80087a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	da0f      	bge.n	80087ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087ae:	78fb      	ldrb	r3, [r7, #3]
 80087b0:	f003 020f 	and.w	r2, r3, #15
 80087b4:	4613      	mov	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	3338      	adds	r3, #56	; 0x38
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4413      	add	r3, r2
 80087c2:	3304      	adds	r3, #4
 80087c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	705a      	strb	r2, [r3, #1]
 80087cc:	e00f      	b.n	80087ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	4613      	mov	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	3304      	adds	r3, #4
 80087e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80087fa:	883a      	ldrh	r2, [r7, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	78ba      	ldrb	r2, [r7, #2]
 8008804:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008818:	78bb      	ldrb	r3, [r7, #2]
 800881a:	2b02      	cmp	r3, #2
 800881c:	d102      	bne.n	8008824 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_PCD_EP_Open+0xaa>
 800882e:	2302      	movs	r3, #2
 8008830:	e00e      	b.n	8008850 <HAL_PCD_EP_Open+0xc8>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68f9      	ldr	r1, [r7, #12]
 8008840:	4618      	mov	r0, r3
 8008842:	f003 fe99 	bl	800c578 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800884e:	7afb      	ldrb	r3, [r7, #11]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008868:	2b00      	cmp	r3, #0
 800886a:	da0f      	bge.n	800888c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	f003 020f 	and.w	r2, r3, #15
 8008872:	4613      	mov	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	1a9b      	subs	r3, r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	3338      	adds	r3, #56	; 0x38
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	4413      	add	r3, r2
 8008880:	3304      	adds	r3, #4
 8008882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	705a      	strb	r2, [r3, #1]
 800888a:	e00f      	b.n	80088ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	f003 020f 	and.w	r2, r3, #15
 8008892:	4613      	mov	r3, r2
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	3304      	adds	r3, #4
 80088a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d101      	bne.n	80088c6 <HAL_PCD_EP_Close+0x6e>
 80088c2:	2302      	movs	r3, #2
 80088c4:	e00e      	b.n	80088e4 <HAL_PCD_EP_Close+0x8c>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68f9      	ldr	r1, [r7, #12]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f003 fed7 	bl	800c688 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	607a      	str	r2, [r7, #4]
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	460b      	mov	r3, r1
 80088fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	4613      	mov	r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	3304      	adds	r3, #4
 8008914:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2200      	movs	r2, #0
 8008926:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2200      	movs	r2, #0
 800892c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	b2da      	uxtb	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d102      	bne.n	8008948 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	f003 030f 	and.w	r3, r3, #15
 800894e:	2b00      	cmp	r3, #0
 8008950:	d109      	bne.n	8008966 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	6979      	ldr	r1, [r7, #20]
 8008960:	f004 f9b2 	bl	800ccc8 <USB_EP0StartXfer>
 8008964:	e008      	b.n	8008978 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	6979      	ldr	r1, [r7, #20]
 8008974:	f003 ff64 	bl	800c840 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	f003 020f 	and.w	r2, r3, #15
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	4613      	mov	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80089a4:	681b      	ldr	r3, [r3, #0]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
 80089be:	460b      	mov	r3, r1
 80089c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	f003 020f 	and.w	r2, r3, #15
 80089c8:	4613      	mov	r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	3338      	adds	r3, #56	; 0x38
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	3304      	adds	r3, #4
 80089d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2200      	movs	r2, #0
 80089ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2201      	movs	r2, #1
 80089f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	f003 030f 	and.w	r3, r3, #15
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d102      	bne.n	8008a0c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a0c:	7afb      	ldrb	r3, [r7, #11]
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	6979      	ldr	r1, [r7, #20]
 8008a24:	f004 f950 	bl	800ccc8 <USB_EP0StartXfer>
 8008a28:	e008      	b.n	8008a3c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	6979      	ldr	r1, [r7, #20]
 8008a38:	f003 ff02 	bl	800c840 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	f003 020f 	and.w	r2, r3, #15
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d901      	bls.n	8008a64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e050      	b.n	8008b06 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da0f      	bge.n	8008a8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	f003 020f 	and.w	r2, r3, #15
 8008a72:	4613      	mov	r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	1a9b      	subs	r3, r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	3338      	adds	r3, #56	; 0x38
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	3304      	adds	r3, #4
 8008a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	705a      	strb	r2, [r3, #1]
 8008a8a:	e00d      	b.n	8008aa8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	f003 030f 	and.w	r3, r3, #15
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_PCD_EP_SetStall+0x82>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e01e      	b.n	8008b06 <HAL_PCD_EP_SetStall+0xc0>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68f9      	ldr	r1, [r7, #12]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f004 faa7 	bl	800d02a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	f003 030f 	and.w	r3, r3, #15
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	b2d9      	uxtb	r1, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008af6:	461a      	mov	r2, r3
 8008af8:	f004 fc98 	bl	800d42c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	f003 020f 	and.w	r2, r3, #15
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d901      	bls.n	8008b2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e042      	b.n	8008bb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	da0f      	bge.n	8008b54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	f003 020f 	and.w	r2, r3, #15
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	3338      	adds	r3, #56	; 0x38
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	4413      	add	r3, r2
 8008b48:	3304      	adds	r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	705a      	strb	r2, [r3, #1]
 8008b52:	e00f      	b.n	8008b74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	f003 020f 	and.w	r2, r3, #15
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	4413      	add	r3, r2
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_PCD_EP_ClrStall+0x86>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e00e      	b.n	8008bb2 <HAL_PCD_EP_ClrStall+0xa4>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68f9      	ldr	r1, [r7, #12]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f004 faaf 	bl	800d106 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b08a      	sub	sp, #40	; 0x28
 8008bbe:	af02      	add	r7, sp, #8
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	3338      	adds	r3, #56	; 0x38
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	3304      	adds	r3, #4
 8008be0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	699a      	ldr	r2, [r3, #24]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d901      	bls.n	8008bf2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e06c      	b.n	8008ccc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	695a      	ldr	r2, [r3, #20]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d902      	bls.n	8008c0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3303      	adds	r3, #3
 8008c12:	089b      	lsrs	r3, r3, #2
 8008c14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c16:	e02b      	b.n	8008c70 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d902      	bls.n	8008c34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	3303      	adds	r3, #3
 8008c38:	089b      	lsrs	r3, r3, #2
 8008c3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	68d9      	ldr	r1, [r3, #12]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	4603      	mov	r3, r0
 8008c52:	6978      	ldr	r0, [r7, #20]
 8008c54:	f004 f98b 	bl	800cf6e <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	441a      	add	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	441a      	add	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d809      	bhi.n	8008c9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d203      	bcs.n	8008c9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1be      	bne.n	8008c18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	695a      	ldr	r2, [r3, #20]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d811      	bhi.n	8008cca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	2201      	movs	r2, #1
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	6939      	ldr	r1, [r7, #16]
 8008cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	333c      	adds	r3, #60	; 0x3c
 8008cec:	3304      	adds	r3, #4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	f040 80a0 	bne.w	8008e4c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f003 0308 	and.w	r3, r3, #8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d015      	beq.n	8008d42 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a72      	ldr	r2, [pc, #456]	; (8008ee4 <PCD_EP_OutXfrComplete_int+0x210>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	f240 80dd 	bls.w	8008eda <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 80d7 	beq.w	8008eda <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3e:	6093      	str	r3, [r2, #8]
 8008d40:	e0cb      	b.n	8008eda <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d58:	461a      	mov	r2, r3
 8008d5a:	2320      	movs	r3, #32
 8008d5c:	6093      	str	r3, [r2, #8]
 8008d5e:	e0bc      	b.n	8008eda <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 80b7 	bne.w	8008eda <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4a5d      	ldr	r2, [pc, #372]	; (8008ee4 <PCD_EP_OutXfrComplete_int+0x210>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d90f      	bls.n	8008d94 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d90:	6093      	str	r3, [r2, #8]
 8008d92:	e0a2      	b.n	8008eda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008da6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	0159      	lsls	r1, r3, #5
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	440b      	add	r3, r1
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008dba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4403      	add	r3, r0
 8008dca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008dce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	1a9b      	subs	r3, r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4403      	add	r3, r0
 8008df2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4419      	add	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4403      	add	r3, r0
 8008e08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e0c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d114      	bne.n	8008e3e <PCD_EP_OutXfrComplete_int+0x16a>
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d108      	bne.n	8008e3e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e36:	461a      	mov	r2, r3
 8008e38:	2101      	movs	r1, #1
 8008e3a:	f004 faf7 	bl	800d42c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f009 fa71 	bl	801232c <HAL_PCD_DataOutStageCallback>
 8008e4a:	e046      	b.n	8008eda <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4a26      	ldr	r2, [pc, #152]	; (8008ee8 <PCD_EP_OutXfrComplete_int+0x214>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d124      	bne.n	8008e9e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e70:	6093      	str	r3, [r2, #8]
 8008e72:	e032      	b.n	8008eda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d008      	beq.n	8008e90 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	2320      	movs	r3, #32
 8008e8e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f009 fa48 	bl	801232c <HAL_PCD_DataOutStageCallback>
 8008e9c:	e01d      	b.n	8008eda <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d114      	bne.n	8008ece <PCD_EP_OutXfrComplete_int+0x1fa>
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d108      	bne.n	8008ece <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f004 faaf 	bl	800d42c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f009 fa29 	bl	801232c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	4f54300a 	.word	0x4f54300a
 8008ee8:	4f54310a 	.word	0x4f54310a

08008eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	333c      	adds	r3, #60	; 0x3c
 8008f04:	3304      	adds	r3, #4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4a15      	ldr	r2, [pc, #84]	; (8008f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d90e      	bls.n	8008f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d009      	beq.n	8008f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f009 f9e1 	bl	8012308 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d90c      	bls.n	8008f68 <PCD_EP_OutSetupPacket_int+0x7c>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d108      	bne.n	8008f68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f60:	461a      	mov	r2, r3
 8008f62:	2101      	movs	r1, #1
 8008f64:	f004 fa62 	bl	800d42c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	4f54300a 	.word	0x4f54300a

08008f78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
 8008f84:	4613      	mov	r3, r2
 8008f86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d107      	bne.n	8008fa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008f96:	883b      	ldrh	r3, [r7, #0]
 8008f98:	0419      	lsls	r1, r3, #16
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8008fa4:	e028      	b.n	8008ff8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	0c1b      	lsrs	r3, r3, #16
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
 8008fb8:	e00d      	b.n	8008fd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	3340      	adds	r3, #64	; 0x40
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	0c1b      	lsrs	r3, r3, #16
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	4413      	add	r3, r2
 8008fce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	73fb      	strb	r3, [r7, #15]
 8008fd6:	7bfa      	ldrb	r2, [r7, #15]
 8008fd8:	78fb      	ldrb	r3, [r7, #3]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d3ec      	bcc.n	8008fba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008fe0:	883b      	ldrh	r3, [r7, #0]
 8008fe2:	0418      	lsls	r0, r3, #16
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6819      	ldr	r1, [r3, #0]
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	4302      	orrs	r2, r0
 8008ff0:	3340      	adds	r3, #64	; 0x40
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	887a      	ldrh	r2, [r7, #2]
 8009018:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800905a:	f043 0303 	orr.w	r3, r3, #3
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800907a:	2300      	movs	r3, #0
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	4b20      	ldr	r3, [pc, #128]	; (8009100 <HAL_PWREx_EnableOverDrive+0x90>)
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	4a1f      	ldr	r2, [pc, #124]	; (8009100 <HAL_PWREx_EnableOverDrive+0x90>)
 8009084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009088:	6413      	str	r3, [r2, #64]	; 0x40
 800908a:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <HAL_PWREx_EnableOverDrive+0x90>)
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009096:	4b1b      	ldr	r3, [pc, #108]	; (8009104 <HAL_PWREx_EnableOverDrive+0x94>)
 8009098:	2201      	movs	r2, #1
 800909a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800909c:	f7fc fc42 	bl	8005924 <HAL_GetTick>
 80090a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80090a2:	e009      	b.n	80090b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80090a4:	f7fc fc3e 	bl	8005924 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b2:	d901      	bls.n	80090b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e01f      	b.n	80090f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80090b8:	4b13      	ldr	r3, [pc, #76]	; (8009108 <HAL_PWREx_EnableOverDrive+0x98>)
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c4:	d1ee      	bne.n	80090a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80090c6:	4b11      	ldr	r3, [pc, #68]	; (800910c <HAL_PWREx_EnableOverDrive+0x9c>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090cc:	f7fc fc2a 	bl	8005924 <HAL_GetTick>
 80090d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80090d2:	e009      	b.n	80090e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80090d4:	f7fc fc26 	bl	8005924 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090e2:	d901      	bls.n	80090e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e007      	b.n	80090f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80090e8:	4b07      	ldr	r3, [pc, #28]	; (8009108 <HAL_PWREx_EnableOverDrive+0x98>)
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f4:	d1ee      	bne.n	80090d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	40023800 	.word	0x40023800
 8009104:	420e0040 	.word	0x420e0040
 8009108:	40007000 	.word	0x40007000
 800910c:	420e0044 	.word	0x420e0044

08009110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e0cc      	b.n	80092be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009124:	4b68      	ldr	r3, [pc, #416]	; (80092c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d90c      	bls.n	800914c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009132:	4b65      	ldr	r3, [pc, #404]	; (80092c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800913a:	4b63      	ldr	r3, [pc, #396]	; (80092c8 <HAL_RCC_ClockConfig+0x1b8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d001      	beq.n	800914c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e0b8      	b.n	80092be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d020      	beq.n	800919a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d005      	beq.n	8009170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009164:	4b59      	ldr	r3, [pc, #356]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	4a58      	ldr	r2, [pc, #352]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 800916a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800916e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0308 	and.w	r3, r3, #8
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800917c:	4b53      	ldr	r3, [pc, #332]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	4a52      	ldr	r2, [pc, #328]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009188:	4b50      	ldr	r3, [pc, #320]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	494d      	ldr	r1, [pc, #308]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009196:	4313      	orrs	r3, r2
 8009198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d044      	beq.n	8009230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d107      	bne.n	80091be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ae:	4b47      	ldr	r3, [pc, #284]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d119      	bne.n	80091ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e07f      	b.n	80092be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d003      	beq.n	80091ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d107      	bne.n	80091de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091ce:	4b3f      	ldr	r3, [pc, #252]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e06f      	b.n	80092be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091de:	4b3b      	ldr	r3, [pc, #236]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e067      	b.n	80092be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091ee:	4b37      	ldr	r3, [pc, #220]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f023 0203 	bic.w	r2, r3, #3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	4934      	ldr	r1, [pc, #208]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009200:	f7fc fb90 	bl	8005924 <HAL_GetTick>
 8009204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009206:	e00a      	b.n	800921e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009208:	f7fc fb8c 	bl	8005924 <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	f241 3288 	movw	r2, #5000	; 0x1388
 8009216:	4293      	cmp	r3, r2
 8009218:	d901      	bls.n	800921e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e04f      	b.n	80092be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800921e:	4b2b      	ldr	r3, [pc, #172]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f003 020c 	and.w	r2, r3, #12
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	429a      	cmp	r2, r3
 800922e:	d1eb      	bne.n	8009208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009230:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d20c      	bcs.n	8009258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800923e:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009246:	4b20      	ldr	r3, [pc, #128]	; (80092c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d001      	beq.n	8009258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e032      	b.n	80092be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009264:	4b19      	ldr	r3, [pc, #100]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	4916      	ldr	r1, [pc, #88]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009272:	4313      	orrs	r3, r2
 8009274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0308 	and.w	r3, r3, #8
 800927e:	2b00      	cmp	r3, #0
 8009280:	d009      	beq.n	8009296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009282:	4b12      	ldr	r3, [pc, #72]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	490e      	ldr	r1, [pc, #56]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 8009292:	4313      	orrs	r3, r2
 8009294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009296:	f000 fbb1 	bl	80099fc <HAL_RCC_GetSysClockFreq>
 800929a:	4601      	mov	r1, r0
 800929c:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <HAL_RCC_ClockConfig+0x1bc>)
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	091b      	lsrs	r3, r3, #4
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	4a0a      	ldr	r2, [pc, #40]	; (80092d0 <HAL_RCC_ClockConfig+0x1c0>)
 80092a8:	5cd3      	ldrb	r3, [r2, r3]
 80092aa:	fa21 f303 	lsr.w	r3, r1, r3
 80092ae:	4a09      	ldr	r2, [pc, #36]	; (80092d4 <HAL_RCC_ClockConfig+0x1c4>)
 80092b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80092b2:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <HAL_RCC_ClockConfig+0x1c8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fc f958 	bl	800556c <HAL_InitTick>

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	40023c00 	.word	0x40023c00
 80092cc:	40023800 	.word	0x40023800
 80092d0:	08018688 	.word	0x08018688
 80092d4:	20000280 	.word	0x20000280
 80092d8:	20000284 	.word	0x20000284

080092dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092e0:	4b03      	ldr	r3, [pc, #12]	; (80092f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80092e2:	681b      	ldr	r3, [r3, #0]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	20000280 	.word	0x20000280

080092f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80092f8:	f7ff fff0 	bl	80092dc <HAL_RCC_GetHCLKFreq>
 80092fc:	4601      	mov	r1, r0
 80092fe:	4b05      	ldr	r3, [pc, #20]	; (8009314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	0a9b      	lsrs	r3, r3, #10
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	4a03      	ldr	r2, [pc, #12]	; (8009318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800930a:	5cd3      	ldrb	r3, [r2, r3]
 800930c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009310:	4618      	mov	r0, r3
 8009312:	bd80      	pop	{r7, pc}
 8009314:	40023800 	.word	0x40023800
 8009318:	08018698 	.word	0x08018698

0800931c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009320:	f7ff ffdc 	bl	80092dc <HAL_RCC_GetHCLKFreq>
 8009324:	4601      	mov	r1, r0
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	0b5b      	lsrs	r3, r3, #13
 800932c:	f003 0307 	and.w	r3, r3, #7
 8009330:	4a03      	ldr	r2, [pc, #12]	; (8009340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009332:	5cd3      	ldrb	r3, [r2, r3]
 8009334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009338:	4618      	mov	r0, r3
 800933a:	bd80      	pop	{r7, pc}
 800933c:	40023800 	.word	0x40023800
 8009340:	08018698 	.word	0x08018698

08009344 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	220f      	movs	r2, #15
 8009352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009354:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <HAL_RCC_GetClockConfig+0x5c>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f003 0203 	and.w	r2, r3, #3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009360:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <HAL_RCC_GetClockConfig+0x5c>)
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800936c:	4b0c      	ldr	r3, [pc, #48]	; (80093a0 <HAL_RCC_GetClockConfig+0x5c>)
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009378:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <HAL_RCC_GetClockConfig+0x5c>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	08db      	lsrs	r3, r3, #3
 800937e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009386:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <HAL_RCC_GetClockConfig+0x60>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 020f 	and.w	r2, r3, #15
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	601a      	str	r2, [r3, #0]
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	40023800 	.word	0x40023800
 80093a4:	40023c00 	.word	0x40023c00

080093a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08c      	sub	sp, #48	; 0x30
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80093e0:	4b6f      	ldr	r3, [pc, #444]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80093e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ee:	496c      	ldr	r1, [pc, #432]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80093fe:	2301      	movs	r3, #1
 8009400:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800940e:	4b64      	ldr	r3, [pc, #400]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009414:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941c:	4960      	ldr	r1, [pc, #384]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800941e:	4313      	orrs	r3, r2
 8009420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800942c:	2301      	movs	r3, #1
 800942e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d017      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800943c:	4b58      	ldr	r3, [pc, #352]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800943e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009442:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	4955      	ldr	r1, [pc, #340]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800944c:	4313      	orrs	r3, r2
 800944e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800945a:	d101      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800945c:	2301      	movs	r3, #1
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8009468:	2301      	movs	r3, #1
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b00      	cmp	r3, #0
 8009476:	d017      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009478:	4b49      	ldr	r3, [pc, #292]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800947a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800947e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009486:	4946      	ldr	r1, [pc, #280]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009488:	4313      	orrs	r3, r2
 800948a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009496:	d101      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009498:	2301      	movs	r3, #1
 800949a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80094a4:	2301      	movs	r3, #1
 80094a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0320 	and.w	r3, r3, #32
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 808a 	beq.w	80095ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	60bb      	str	r3, [r7, #8]
 80094ba:	4b39      	ldr	r3, [pc, #228]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	4a38      	ldr	r2, [pc, #224]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c4:	6413      	str	r3, [r2, #64]	; 0x40
 80094c6:	4b36      	ldr	r3, [pc, #216]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ce:	60bb      	str	r3, [r7, #8]
 80094d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80094d2:	4b34      	ldr	r3, [pc, #208]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a33      	ldr	r2, [pc, #204]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80094d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094de:	f7fc fa21 	bl	8005924 <HAL_GetTick>
 80094e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094e4:	e008      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094e6:	f7fc fa1d 	bl	8005924 <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d901      	bls.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e278      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094f8:	4b2a      	ldr	r3, [pc, #168]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d0f0      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009504:	4b26      	ldr	r3, [pc, #152]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800950c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d02f      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800951c:	6a3a      	ldr	r2, [r7, #32]
 800951e:	429a      	cmp	r2, r3
 8009520:	d028      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009522:	4b1f      	ldr	r3, [pc, #124]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800952a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800952c:	4b1e      	ldr	r3, [pc, #120]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009532:	4b1d      	ldr	r3, [pc, #116]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009534:	2200      	movs	r2, #0
 8009536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009538:	4a19      	ldr	r2, [pc, #100]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800953e:	4b18      	ldr	r3, [pc, #96]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b01      	cmp	r3, #1
 8009548:	d114      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800954a:	f7fc f9eb 	bl	8005924 <HAL_GetTick>
 800954e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009550:	e00a      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009552:	f7fc f9e7 	bl	8005924 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009560:	4293      	cmp	r3, r2
 8009562:	d901      	bls.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e240      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800956a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0ee      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009580:	d114      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009596:	4902      	ldr	r1, [pc, #8]	; (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009598:	4313      	orrs	r3, r2
 800959a:	608b      	str	r3, [r1, #8]
 800959c:	e00c      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800959e:	bf00      	nop
 80095a0:	40023800 	.word	0x40023800
 80095a4:	40007000 	.word	0x40007000
 80095a8:	42470e40 	.word	0x42470e40
 80095ac:	4b4a      	ldr	r3, [pc, #296]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	4a49      	ldr	r2, [pc, #292]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80095b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80095b6:	6093      	str	r3, [r2, #8]
 80095b8:	4b47      	ldr	r3, [pc, #284]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80095ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c4:	4944      	ldr	r1, [pc, #272]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0310 	and.w	r3, r3, #16
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80095dc:	4b3f      	ldr	r3, [pc, #252]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80095de:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80095ec:	4b3a      	ldr	r3, [pc, #232]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80095ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095fa:	4937      	ldr	r1, [pc, #220]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00a      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800960e:	4b32      	ldr	r3, [pc, #200]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009614:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800961c:	492e      	ldr	r1, [pc, #184]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800961e:	4313      	orrs	r3, r2
 8009620:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962c:	2b00      	cmp	r3, #0
 800962e:	d011      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009630:	4b29      	ldr	r3, [pc, #164]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009636:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963e:	4926      	ldr	r1, [pc, #152]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009640:	4313      	orrs	r3, r2
 8009642:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800964e:	d101      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009650:	2301      	movs	r3, #1
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00a      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009660:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009666:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966e:	491a      	ldr	r1, [pc, #104]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009670:	4313      	orrs	r3, r2
 8009672:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800967e:	2b00      	cmp	r3, #0
 8009680:	d011      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009688:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009690:	4911      	ldr	r1, [pc, #68]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009692:	4313      	orrs	r3, r2
 8009694:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800969c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a0:	d101      	bne.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80096a2:	2301      	movs	r3, #1
 80096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80096a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d005      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b4:	f040 80ff 	bne.w	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096b8:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80096be:	f7fc f931 	bl	8005924 <HAL_GetTick>
 80096c2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096c4:	e00e      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80096c6:	f7fc f92d 	bl	8005924 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d907      	bls.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e188      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80096d8:	40023800 	.word	0x40023800
 80096dc:	424711e0 	.word	0x424711e0
 80096e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096e4:	4b7e      	ldr	r3, [pc, #504]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1ea      	bne.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800970c:	2b00      	cmp	r3, #0
 800970e:	d028      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d124      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009718:	4b71      	ldr	r3, [pc, #452]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800971a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	3301      	adds	r3, #1
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800972a:	4b6d      	ldr	r3, [pc, #436]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800972c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009730:	0e1b      	lsrs	r3, r3, #24
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	019b      	lsls	r3, r3, #6
 8009742:	431a      	orrs	r2, r3
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	085b      	lsrs	r3, r3, #1
 8009748:	3b01      	subs	r3, #1
 800974a:	041b      	lsls	r3, r3, #16
 800974c:	431a      	orrs	r2, r3
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	061b      	lsls	r3, r3, #24
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	071b      	lsls	r3, r3, #28
 800975a:	4961      	ldr	r1, [pc, #388]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800975c:	4313      	orrs	r3, r2
 800975e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009776:	d00a      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009780:	2b00      	cmp	r3, #0
 8009782:	d035      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800978c:	d130      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800978e:	4b54      	ldr	r3, [pc, #336]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009794:	0c1b      	lsrs	r3, r3, #16
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	3301      	adds	r3, #1
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097a0:	4b4f      	ldr	r3, [pc, #316]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097a6:	0f1b      	lsrs	r3, r3, #28
 80097a8:	f003 0307 	and.w	r3, r3, #7
 80097ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	019b      	lsls	r3, r3, #6
 80097b8:	431a      	orrs	r2, r3
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	085b      	lsrs	r3, r3, #1
 80097be:	3b01      	subs	r3, #1
 80097c0:	041b      	lsls	r3, r3, #16
 80097c2:	431a      	orrs	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	061b      	lsls	r3, r3, #24
 80097ca:	431a      	orrs	r2, r3
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	071b      	lsls	r3, r3, #28
 80097d0:	4943      	ldr	r1, [pc, #268]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80097d8:	4b41      	ldr	r3, [pc, #260]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097de:	f023 021f 	bic.w	r2, r3, #31
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	3b01      	subs	r3, #1
 80097e8:	493d      	ldr	r1, [pc, #244]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d029      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009804:	d124      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009806:	4b36      	ldr	r3, [pc, #216]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800980c:	0c1b      	lsrs	r3, r3, #16
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	3301      	adds	r3, #1
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009818:	4b31      	ldr	r3, [pc, #196]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800981a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800981e:	0f1b      	lsrs	r3, r3, #28
 8009820:	f003 0307 	and.w	r3, r3, #7
 8009824:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	019b      	lsls	r3, r3, #6
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	3b01      	subs	r3, #1
 800983a:	041b      	lsls	r3, r3, #16
 800983c:	431a      	orrs	r2, r3
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	061b      	lsls	r3, r3, #24
 8009842:	431a      	orrs	r2, r3
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	071b      	lsls	r3, r3, #28
 8009848:	4925      	ldr	r1, [pc, #148]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800984a:	4313      	orrs	r3, r2
 800984c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009858:	2b00      	cmp	r3, #0
 800985a:	d016      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	019b      	lsls	r3, r3, #6
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	085b      	lsrs	r3, r3, #1
 800986e:	3b01      	subs	r3, #1
 8009870:	041b      	lsls	r3, r3, #16
 8009872:	431a      	orrs	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	061b      	lsls	r3, r3, #24
 800987a:	431a      	orrs	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	071b      	lsls	r3, r3, #28
 8009882:	4917      	ldr	r1, [pc, #92]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009884:	4313      	orrs	r3, r2
 8009886:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800988a:	4b16      	ldr	r3, [pc, #88]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800988c:	2201      	movs	r2, #1
 800988e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009890:	f7fc f848 	bl	8005924 <HAL_GetTick>
 8009894:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009896:	e008      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009898:	f7fc f844 	bl	8005924 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d901      	bls.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e09f      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098aa:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f0      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	f040 8095 	bne.w	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80098be:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80098c4:	f7fc f82e 	bl	8005924 <HAL_GetTick>
 80098c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098ca:	e00f      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80098cc:	f7fc f82a 	bl	8005924 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d908      	bls.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e085      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80098de:	bf00      	nop
 80098e0:	40023800 	.word	0x40023800
 80098e4:	42470068 	.word	0x42470068
 80098e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098ec:	4b41      	ldr	r3, [pc, #260]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f8:	d0e8      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0304 	and.w	r3, r3, #4
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	2b00      	cmp	r3, #0
 800990c:	d009      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009916:	2b00      	cmp	r3, #0
 8009918:	d02b      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991e:	2b00      	cmp	r3, #0
 8009920:	d127      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009922:	4b34      	ldr	r3, [pc, #208]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009928:	0c1b      	lsrs	r3, r3, #16
 800992a:	f003 0303 	and.w	r3, r3, #3
 800992e:	3301      	adds	r3, #1
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	019b      	lsls	r3, r3, #6
 800993e:	431a      	orrs	r2, r3
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	085b      	lsrs	r3, r3, #1
 8009944:	3b01      	subs	r3, #1
 8009946:	041b      	lsls	r3, r3, #16
 8009948:	431a      	orrs	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	061b      	lsls	r3, r3, #24
 8009950:	4928      	ldr	r1, [pc, #160]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009952:	4313      	orrs	r3, r2
 8009954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009958:	4b26      	ldr	r3, [pc, #152]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800995a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800995e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009966:	3b01      	subs	r3, #1
 8009968:	021b      	lsls	r3, r3, #8
 800996a:	4922      	ldr	r1, [pc, #136]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800996c:	4313      	orrs	r3, r2
 800996e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997a:	2b00      	cmp	r3, #0
 800997c:	d01d      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x612>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009986:	d118      	bne.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009988:	4b1a      	ldr	r3, [pc, #104]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800998a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800998e:	0e1b      	lsrs	r3, r3, #24
 8009990:	f003 030f 	and.w	r3, r3, #15
 8009994:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	699a      	ldr	r2, [r3, #24]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	019b      	lsls	r3, r3, #6
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	3b01      	subs	r3, #1
 80099aa:	041b      	lsls	r3, r3, #16
 80099ac:	431a      	orrs	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	061b      	lsls	r3, r3, #24
 80099b2:	4910      	ldr	r1, [pc, #64]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80099ba:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80099bc:	2201      	movs	r2, #1
 80099be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80099c0:	f7fb ffb0 	bl	8005924 <HAL_GetTick>
 80099c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099c6:	e008      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80099c8:	f7fb ffac 	bl	8005924 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d901      	bls.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e007      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099da:	4b06      	ldr	r3, [pc, #24]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099e6:	d1ef      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3730      	adds	r7, #48	; 0x30
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	40023800 	.word	0x40023800
 80099f8:	42470070 	.word	0x42470070

080099fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fe:	b087      	sub	sp, #28
 8009a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a16:	4bc6      	ldr	r3, [pc, #792]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 030c 	and.w	r3, r3, #12
 8009a1e:	2b0c      	cmp	r3, #12
 8009a20:	f200 817e 	bhi.w	8009d20 <HAL_RCC_GetSysClockFreq+0x324>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <HAL_RCC_GetSysClockFreq+0x30>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a61 	.word	0x08009a61
 8009a30:	08009d21 	.word	0x08009d21
 8009a34:	08009d21 	.word	0x08009d21
 8009a38:	08009d21 	.word	0x08009d21
 8009a3c:	08009a67 	.word	0x08009a67
 8009a40:	08009d21 	.word	0x08009d21
 8009a44:	08009d21 	.word	0x08009d21
 8009a48:	08009d21 	.word	0x08009d21
 8009a4c:	08009a6d 	.word	0x08009a6d
 8009a50:	08009d21 	.word	0x08009d21
 8009a54:	08009d21 	.word	0x08009d21
 8009a58:	08009d21 	.word	0x08009d21
 8009a5c:	08009bc9 	.word	0x08009bc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a60:	4bb4      	ldr	r3, [pc, #720]	; (8009d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8009a62:	613b      	str	r3, [r7, #16]
       break;
 8009a64:	e15f      	b.n	8009d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a66:	4bb4      	ldr	r3, [pc, #720]	; (8009d38 <HAL_RCC_GetSysClockFreq+0x33c>)
 8009a68:	613b      	str	r3, [r7, #16]
      break;
 8009a6a:	e15c      	b.n	8009d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a6c:	4bb0      	ldr	r3, [pc, #704]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a74:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a76:	4bae      	ldr	r3, [pc, #696]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d04a      	beq.n	8009b18 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a82:	4bab      	ldr	r3, [pc, #684]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	099b      	lsrs	r3, r3, #6
 8009a88:	f04f 0400 	mov.w	r4, #0
 8009a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009a90:	f04f 0200 	mov.w	r2, #0
 8009a94:	ea03 0501 	and.w	r5, r3, r1
 8009a98:	ea04 0602 	and.w	r6, r4, r2
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	4632      	mov	r2, r6
 8009aa0:	f04f 0300 	mov.w	r3, #0
 8009aa4:	f04f 0400 	mov.w	r4, #0
 8009aa8:	0154      	lsls	r4, r2, #5
 8009aaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009aae:	014b      	lsls	r3, r1, #5
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	1b49      	subs	r1, r1, r5
 8009ab6:	eb62 0206 	sbc.w	r2, r2, r6
 8009aba:	f04f 0300 	mov.w	r3, #0
 8009abe:	f04f 0400 	mov.w	r4, #0
 8009ac2:	0194      	lsls	r4, r2, #6
 8009ac4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009ac8:	018b      	lsls	r3, r1, #6
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	eb64 0402 	sbc.w	r4, r4, r2
 8009ad0:	f04f 0100 	mov.w	r1, #0
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	00e2      	lsls	r2, r4, #3
 8009ada:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ade:	00d9      	lsls	r1, r3, #3
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4614      	mov	r4, r2
 8009ae4:	195b      	adds	r3, r3, r5
 8009ae6:	eb44 0406 	adc.w	r4, r4, r6
 8009aea:	f04f 0100 	mov.w	r1, #0
 8009aee:	f04f 0200 	mov.w	r2, #0
 8009af2:	0262      	lsls	r2, r4, #9
 8009af4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009af8:	0259      	lsls	r1, r3, #9
 8009afa:	460b      	mov	r3, r1
 8009afc:	4614      	mov	r4, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	4621      	mov	r1, r4
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f04f 0400 	mov.w	r4, #0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4623      	mov	r3, r4
 8009b0c:	f7f7 f8dc 	bl	8000cc8 <__aeabi_uldivmod>
 8009b10:	4603      	mov	r3, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	617b      	str	r3, [r7, #20]
 8009b16:	e049      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b18:	4b85      	ldr	r3, [pc, #532]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	099b      	lsrs	r3, r3, #6
 8009b1e:	f04f 0400 	mov.w	r4, #0
 8009b22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009b26:	f04f 0200 	mov.w	r2, #0
 8009b2a:	ea03 0501 	and.w	r5, r3, r1
 8009b2e:	ea04 0602 	and.w	r6, r4, r2
 8009b32:	4629      	mov	r1, r5
 8009b34:	4632      	mov	r2, r6
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	f04f 0400 	mov.w	r4, #0
 8009b3e:	0154      	lsls	r4, r2, #5
 8009b40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009b44:	014b      	lsls	r3, r1, #5
 8009b46:	4619      	mov	r1, r3
 8009b48:	4622      	mov	r2, r4
 8009b4a:	1b49      	subs	r1, r1, r5
 8009b4c:	eb62 0206 	sbc.w	r2, r2, r6
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	f04f 0400 	mov.w	r4, #0
 8009b58:	0194      	lsls	r4, r2, #6
 8009b5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009b5e:	018b      	lsls	r3, r1, #6
 8009b60:	1a5b      	subs	r3, r3, r1
 8009b62:	eb64 0402 	sbc.w	r4, r4, r2
 8009b66:	f04f 0100 	mov.w	r1, #0
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	00e2      	lsls	r2, r4, #3
 8009b70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009b74:	00d9      	lsls	r1, r3, #3
 8009b76:	460b      	mov	r3, r1
 8009b78:	4614      	mov	r4, r2
 8009b7a:	195b      	adds	r3, r3, r5
 8009b7c:	eb44 0406 	adc.w	r4, r4, r6
 8009b80:	f04f 0100 	mov.w	r1, #0
 8009b84:	f04f 0200 	mov.w	r2, #0
 8009b88:	02a2      	lsls	r2, r4, #10
 8009b8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009b8e:	0299      	lsls	r1, r3, #10
 8009b90:	460b      	mov	r3, r1
 8009b92:	4614      	mov	r4, r2
 8009b94:	4618      	mov	r0, r3
 8009b96:	4621      	mov	r1, r4
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f04f 0400 	mov.w	r4, #0
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	f7f7 f891 	bl	8000cc8 <__aeabi_uldivmod>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009bac:	4b60      	ldr	r3, [pc, #384]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	0c1b      	lsrs	r3, r3, #16
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc4:	613b      	str	r3, [r7, #16]
      break;
 8009bc6:	e0ae      	b.n	8009d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009bc8:	4b59      	ldr	r3, [pc, #356]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bd0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009bd2:	4b57      	ldr	r3, [pc, #348]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d04a      	beq.n	8009c74 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bde:	4b54      	ldr	r3, [pc, #336]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	099b      	lsrs	r3, r3, #6
 8009be4:	f04f 0400 	mov.w	r4, #0
 8009be8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	ea03 0501 	and.w	r5, r3, r1
 8009bf4:	ea04 0602 	and.w	r6, r4, r2
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	f04f 0400 	mov.w	r4, #0
 8009c04:	0154      	lsls	r4, r2, #5
 8009c06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009c0a:	014b      	lsls	r3, r1, #5
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4622      	mov	r2, r4
 8009c10:	1b49      	subs	r1, r1, r5
 8009c12:	eb62 0206 	sbc.w	r2, r2, r6
 8009c16:	f04f 0300 	mov.w	r3, #0
 8009c1a:	f04f 0400 	mov.w	r4, #0
 8009c1e:	0194      	lsls	r4, r2, #6
 8009c20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009c24:	018b      	lsls	r3, r1, #6
 8009c26:	1a5b      	subs	r3, r3, r1
 8009c28:	eb64 0402 	sbc.w	r4, r4, r2
 8009c2c:	f04f 0100 	mov.w	r1, #0
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	00e2      	lsls	r2, r4, #3
 8009c36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009c3a:	00d9      	lsls	r1, r3, #3
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4614      	mov	r4, r2
 8009c40:	195b      	adds	r3, r3, r5
 8009c42:	eb44 0406 	adc.w	r4, r4, r6
 8009c46:	f04f 0100 	mov.w	r1, #0
 8009c4a:	f04f 0200 	mov.w	r2, #0
 8009c4e:	0262      	lsls	r2, r4, #9
 8009c50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009c54:	0259      	lsls	r1, r3, #9
 8009c56:	460b      	mov	r3, r1
 8009c58:	4614      	mov	r4, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f04f 0400 	mov.w	r4, #0
 8009c64:	461a      	mov	r2, r3
 8009c66:	4623      	mov	r3, r4
 8009c68:	f7f7 f82e 	bl	8000cc8 <__aeabi_uldivmod>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	e049      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c74:	4b2e      	ldr	r3, [pc, #184]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	099b      	lsrs	r3, r3, #6
 8009c7a:	f04f 0400 	mov.w	r4, #0
 8009c7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009c82:	f04f 0200 	mov.w	r2, #0
 8009c86:	ea03 0501 	and.w	r5, r3, r1
 8009c8a:	ea04 0602 	and.w	r6, r4, r2
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4632      	mov	r2, r6
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	f04f 0400 	mov.w	r4, #0
 8009c9a:	0154      	lsls	r4, r2, #5
 8009c9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009ca0:	014b      	lsls	r3, r1, #5
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	1b49      	subs	r1, r1, r5
 8009ca8:	eb62 0206 	sbc.w	r2, r2, r6
 8009cac:	f04f 0300 	mov.w	r3, #0
 8009cb0:	f04f 0400 	mov.w	r4, #0
 8009cb4:	0194      	lsls	r4, r2, #6
 8009cb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009cba:	018b      	lsls	r3, r1, #6
 8009cbc:	1a5b      	subs	r3, r3, r1
 8009cbe:	eb64 0402 	sbc.w	r4, r4, r2
 8009cc2:	f04f 0100 	mov.w	r1, #0
 8009cc6:	f04f 0200 	mov.w	r2, #0
 8009cca:	00e2      	lsls	r2, r4, #3
 8009ccc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009cd0:	00d9      	lsls	r1, r3, #3
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	195b      	adds	r3, r3, r5
 8009cd8:	eb44 0406 	adc.w	r4, r4, r6
 8009cdc:	f04f 0100 	mov.w	r1, #0
 8009ce0:	f04f 0200 	mov.w	r2, #0
 8009ce4:	02a2      	lsls	r2, r4, #10
 8009ce6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009cea:	0299      	lsls	r1, r3, #10
 8009cec:	460b      	mov	r3, r1
 8009cee:	4614      	mov	r4, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f04f 0400 	mov.w	r4, #0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	f7f6 ffe3 	bl	8000cc8 <__aeabi_uldivmod>
 8009d02:	4603      	mov	r3, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009d08:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	0f1b      	lsrs	r3, r3, #28
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1c:	613b      	str	r3, [r7, #16]
      break;
 8009d1e:	e002      	b.n	8009d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8009d22:	613b      	str	r3, [r7, #16]
      break;
 8009d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d26:	693b      	ldr	r3, [r7, #16]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d30:	40023800 	.word	0x40023800
 8009d34:	00f42400 	.word	0x00f42400
 8009d38:	007a1200 	.word	0x007a1200

08009d3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 8083 	beq.w	8009e5c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009d56:	4b95      	ldr	r3, [pc, #596]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f003 030c 	and.w	r3, r3, #12
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d019      	beq.n	8009d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009d62:	4b92      	ldr	r3, [pc, #584]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	d106      	bne.n	8009d7c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009d6e:	4b8f      	ldr	r3, [pc, #572]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d7a:	d00c      	beq.n	8009d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d7c:	4b8b      	ldr	r3, [pc, #556]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009d84:	2b0c      	cmp	r3, #12
 8009d86:	d112      	bne.n	8009dae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d88:	4b88      	ldr	r3, [pc, #544]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d94:	d10b      	bne.n	8009dae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d96:	4b85      	ldr	r3, [pc, #532]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d05b      	beq.n	8009e5a <HAL_RCC_OscConfig+0x11e>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d157      	bne.n	8009e5a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e216      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db6:	d106      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x8a>
 8009db8:	4b7c      	ldr	r3, [pc, #496]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a7b      	ldr	r2, [pc, #492]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	e01d      	b.n	8009e02 <HAL_RCC_OscConfig+0xc6>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dce:	d10c      	bne.n	8009dea <HAL_RCC_OscConfig+0xae>
 8009dd0:	4b76      	ldr	r3, [pc, #472]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a75      	ldr	r2, [pc, #468]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	4b73      	ldr	r3, [pc, #460]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a72      	ldr	r2, [pc, #456]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	e00b      	b.n	8009e02 <HAL_RCC_OscConfig+0xc6>
 8009dea:	4b70      	ldr	r3, [pc, #448]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a6f      	ldr	r2, [pc, #444]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009df4:	6013      	str	r3, [r2, #0]
 8009df6:	4b6d      	ldr	r3, [pc, #436]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a6c      	ldr	r2, [pc, #432]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d013      	beq.n	8009e32 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e0a:	f7fb fd8b 	bl	8005924 <HAL_GetTick>
 8009e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e10:	e008      	b.n	8009e24 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e12:	f7fb fd87 	bl	8005924 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b64      	cmp	r3, #100	; 0x64
 8009e1e:	d901      	bls.n	8009e24 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e1db      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e24:	4b61      	ldr	r3, [pc, #388]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0f0      	beq.n	8009e12 <HAL_RCC_OscConfig+0xd6>
 8009e30:	e014      	b.n	8009e5c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e32:	f7fb fd77 	bl	8005924 <HAL_GetTick>
 8009e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e38:	e008      	b.n	8009e4c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e3a:	f7fb fd73 	bl	8005924 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b64      	cmp	r3, #100	; 0x64
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e1c7      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e4c:	4b57      	ldr	r3, [pc, #348]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1f0      	bne.n	8009e3a <HAL_RCC_OscConfig+0xfe>
 8009e58:	e000      	b.n	8009e5c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0302 	and.w	r3, r3, #2
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d06f      	beq.n	8009f48 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009e68:	4b50      	ldr	r3, [pc, #320]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f003 030c 	and.w	r3, r3, #12
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d017      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009e74:	4b4d      	ldr	r3, [pc, #308]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d105      	bne.n	8009e8c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009e80:	4b4a      	ldr	r3, [pc, #296]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e8c:	4b47      	ldr	r3, [pc, #284]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009e94:	2b0c      	cmp	r3, #12
 8009e96:	d11c      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e98:	4b44      	ldr	r3, [pc, #272]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d116      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ea4:	4b41      	ldr	r3, [pc, #260]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0302 	and.w	r3, r3, #2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <HAL_RCC_OscConfig+0x180>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d001      	beq.n	8009ebc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e18f      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ebc:	4b3b      	ldr	r3, [pc, #236]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4938      	ldr	r1, [pc, #224]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ed0:	e03a      	b.n	8009f48 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d020      	beq.n	8009f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009eda:	4b35      	ldr	r3, [pc, #212]	; (8009fb0 <HAL_RCC_OscConfig+0x274>)
 8009edc:	2201      	movs	r2, #1
 8009ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee0:	f7fb fd20 	bl	8005924 <HAL_GetTick>
 8009ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ee6:	e008      	b.n	8009efa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ee8:	f7fb fd1c 	bl	8005924 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d901      	bls.n	8009efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e170      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009efa:	4b2c      	ldr	r3, [pc, #176]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0f0      	beq.n	8009ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f06:	4b29      	ldr	r3, [pc, #164]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	4925      	ldr	r1, [pc, #148]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	600b      	str	r3, [r1, #0]
 8009f1a:	e015      	b.n	8009f48 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f1c:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <HAL_RCC_OscConfig+0x274>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f22:	f7fb fcff 	bl	8005924 <HAL_GetTick>
 8009f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f28:	e008      	b.n	8009f3c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f2a:	f7fb fcfb 	bl	8005924 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d901      	bls.n	8009f3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e14f      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f3c:	4b1b      	ldr	r3, [pc, #108]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f0      	bne.n	8009f2a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d037      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d016      	beq.n	8009f8a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f5c:	4b15      	ldr	r3, [pc, #84]	; (8009fb4 <HAL_RCC_OscConfig+0x278>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f62:	f7fb fcdf 	bl	8005924 <HAL_GetTick>
 8009f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f68:	e008      	b.n	8009f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f6a:	f7fb fcdb 	bl	8005924 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e12f      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f7c:	4b0b      	ldr	r3, [pc, #44]	; (8009fac <HAL_RCC_OscConfig+0x270>)
 8009f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f80:	f003 0302 	and.w	r3, r3, #2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0f0      	beq.n	8009f6a <HAL_RCC_OscConfig+0x22e>
 8009f88:	e01c      	b.n	8009fc4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f8a:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <HAL_RCC_OscConfig+0x278>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f90:	f7fb fcc8 	bl	8005924 <HAL_GetTick>
 8009f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f96:	e00f      	b.n	8009fb8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f98:	f7fb fcc4 	bl	8005924 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d908      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e118      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
 8009faa:	bf00      	nop
 8009fac:	40023800 	.word	0x40023800
 8009fb0:	42470000 	.word	0x42470000
 8009fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fb8:	4b8a      	ldr	r3, [pc, #552]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 8009fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1e9      	bne.n	8009f98 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8097 	beq.w	800a100 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fd6:	4b83      	ldr	r3, [pc, #524]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10f      	bne.n	800a002 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	4b7f      	ldr	r3, [pc, #508]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	4a7e      	ldr	r2, [pc, #504]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 8009fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ff2:	4b7c      	ldr	r3, [pc, #496]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009ffe:	2301      	movs	r3, #1
 800a000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a002:	4b79      	ldr	r3, [pc, #484]	; (800a1e8 <HAL_RCC_OscConfig+0x4ac>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d118      	bne.n	800a040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a00e:	4b76      	ldr	r3, [pc, #472]	; (800a1e8 <HAL_RCC_OscConfig+0x4ac>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a75      	ldr	r2, [pc, #468]	; (800a1e8 <HAL_RCC_OscConfig+0x4ac>)
 800a014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a01a:	f7fb fc83 	bl	8005924 <HAL_GetTick>
 800a01e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a020:	e008      	b.n	800a034 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a022:	f7fb fc7f 	bl	8005924 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e0d3      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a034:	4b6c      	ldr	r3, [pc, #432]	; (800a1e8 <HAL_RCC_OscConfig+0x4ac>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0f0      	beq.n	800a022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d106      	bne.n	800a056 <HAL_RCC_OscConfig+0x31a>
 800a048:	4b66      	ldr	r3, [pc, #408]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04c:	4a65      	ldr	r2, [pc, #404]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a04e:	f043 0301 	orr.w	r3, r3, #1
 800a052:	6713      	str	r3, [r2, #112]	; 0x70
 800a054:	e01c      	b.n	800a090 <HAL_RCC_OscConfig+0x354>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	d10c      	bne.n	800a078 <HAL_RCC_OscConfig+0x33c>
 800a05e:	4b61      	ldr	r3, [pc, #388]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a062:	4a60      	ldr	r2, [pc, #384]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a064:	f043 0304 	orr.w	r3, r3, #4
 800a068:	6713      	str	r3, [r2, #112]	; 0x70
 800a06a:	4b5e      	ldr	r3, [pc, #376]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06e:	4a5d      	ldr	r2, [pc, #372]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a070:	f043 0301 	orr.w	r3, r3, #1
 800a074:	6713      	str	r3, [r2, #112]	; 0x70
 800a076:	e00b      	b.n	800a090 <HAL_RCC_OscConfig+0x354>
 800a078:	4b5a      	ldr	r3, [pc, #360]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07c:	4a59      	ldr	r2, [pc, #356]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a07e:	f023 0301 	bic.w	r3, r3, #1
 800a082:	6713      	str	r3, [r2, #112]	; 0x70
 800a084:	4b57      	ldr	r3, [pc, #348]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a088:	4a56      	ldr	r2, [pc, #344]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a08a:	f023 0304 	bic.w	r3, r3, #4
 800a08e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d015      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a098:	f7fb fc44 	bl	8005924 <HAL_GetTick>
 800a09c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a09e:	e00a      	b.n	800a0b6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0a0:	f7fb fc40 	bl	8005924 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d901      	bls.n	800a0b6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e092      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0b6:	4b4b      	ldr	r3, [pc, #300]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ee      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x364>
 800a0c2:	e014      	b.n	800a0ee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0c4:	f7fb fc2e 	bl	8005924 <HAL_GetTick>
 800a0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0ca:	e00a      	b.n	800a0e2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0cc:	f7fb fc2a 	bl	8005924 <HAL_GetTick>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e07c      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0e2:	4b40      	ldr	r3, [pc, #256]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1ee      	bne.n	800a0cc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d105      	bne.n	800a100 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0f4:	4b3b      	ldr	r3, [pc, #236]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f8:	4a3a      	ldr	r2, [pc, #232]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a0fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d068      	beq.n	800a1da <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a108:	4b36      	ldr	r3, [pc, #216]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 030c 	and.w	r3, r3, #12
 800a110:	2b08      	cmp	r3, #8
 800a112:	d060      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d145      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a11c:	4b33      	ldr	r3, [pc, #204]	; (800a1ec <HAL_RCC_OscConfig+0x4b0>)
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a122:	f7fb fbff 	bl	8005924 <HAL_GetTick>
 800a126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a128:	e008      	b.n	800a13c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a12a:	f7fb fbfb 	bl	8005924 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	2b02      	cmp	r3, #2
 800a136:	d901      	bls.n	800a13c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e04f      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a13c:	4b29      	ldr	r3, [pc, #164]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1f0      	bne.n	800a12a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	69da      	ldr	r2, [r3, #28]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	431a      	orrs	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	019b      	lsls	r3, r3, #6
 800a158:	431a      	orrs	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15e:	085b      	lsrs	r3, r3, #1
 800a160:	3b01      	subs	r3, #1
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16a:	061b      	lsls	r3, r3, #24
 800a16c:	431a      	orrs	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a172:	071b      	lsls	r3, r3, #28
 800a174:	491b      	ldr	r1, [pc, #108]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a176:	4313      	orrs	r3, r2
 800a178:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a17a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ec <HAL_RCC_OscConfig+0x4b0>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a180:	f7fb fbd0 	bl	8005924 <HAL_GetTick>
 800a184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a186:	e008      	b.n	800a19a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a188:	f7fb fbcc 	bl	8005924 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b02      	cmp	r3, #2
 800a194:	d901      	bls.n	800a19a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e020      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a19a:	4b12      	ldr	r3, [pc, #72]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0f0      	beq.n	800a188 <HAL_RCC_OscConfig+0x44c>
 800a1a6:	e018      	b.n	800a1da <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1a8:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <HAL_RCC_OscConfig+0x4b0>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ae:	f7fb fbb9 	bl	8005924 <HAL_GetTick>
 800a1b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1b6:	f7fb fbb5 	bl	8005924 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e009      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1c8:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <HAL_RCC_OscConfig+0x4a8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1f0      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x47a>
 800a1d4:	e001      	b.n	800a1da <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	40023800 	.word	0x40023800
 800a1e8:	40007000 	.word	0x40007000
 800a1ec:	42470060 	.word	0x42470060

0800a1f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e056      	b.n	800a2b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d106      	bne.n	800a222 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7fa ff95 	bl	800514c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2202      	movs	r2, #2
 800a226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a238:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	431a      	orrs	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	431a      	orrs	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	431a      	orrs	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	431a      	orrs	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a25e:	431a      	orrs	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	431a      	orrs	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	ea42 0103 	orr.w	r1, r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	f003 0104 	and.w	r1, r3, #4
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	430a      	orrs	r2, r1
 800a28e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	69da      	ldr	r2, [r3, #28]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a29e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <HAL_SPI_Transmit+0x22>
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	e11e      	b.n	800a518 <HAL_SPI_Transmit+0x260>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2e2:	f7fb fb1f 	bl	8005924 <HAL_GetTick>
 800a2e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a2e8:	88fb      	ldrh	r3, [r7, #6]
 800a2ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d002      	beq.n	800a2fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2fc:	e103      	b.n	800a506 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <HAL_SPI_Transmit+0x52>
 800a304:	88fb      	ldrh	r3, [r7, #6]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a30e:	e0fa      	b.n	800a506 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2203      	movs	r2, #3
 800a314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	88fa      	ldrh	r2, [r7, #6]
 800a328:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a356:	d107      	bne.n	800a368 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a366:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d007      	beq.n	800a386 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a38e:	d14b      	bne.n	800a428 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <HAL_SPI_Transmit+0xe6>
 800a398:	8afb      	ldrh	r3, [r7, #22]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d13e      	bne.n	800a41c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a2:	881a      	ldrh	r2, [r3, #0]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ae:	1c9a      	adds	r2, r3, #2
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a3c2:	e02b      	b.n	800a41c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d112      	bne.n	800a3f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	881a      	ldrh	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	1c9a      	adds	r2, r3, #2
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a3f6:	e011      	b.n	800a41c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3f8:	f7fb fa94 	bl	8005924 <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d803      	bhi.n	800a410 <HAL_SPI_Transmit+0x158>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40e:	d102      	bne.n	800a416 <HAL_SPI_Transmit+0x15e>
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a41a:	e074      	b.n	800a506 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a420:	b29b      	uxth	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1ce      	bne.n	800a3c4 <HAL_SPI_Transmit+0x10c>
 800a426:	e04c      	b.n	800a4c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <HAL_SPI_Transmit+0x17e>
 800a430:	8afb      	ldrh	r3, [r7, #22]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d140      	bne.n	800a4b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	330c      	adds	r3, #12
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a452:	b29b      	uxth	r3, r3
 800a454:	3b01      	subs	r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a45c:	e02c      	b.n	800a4b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f003 0302 	and.w	r3, r3, #2
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d113      	bne.n	800a494 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	330c      	adds	r3, #12
 800a476:	7812      	ldrb	r2, [r2, #0]
 800a478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a488:	b29b      	uxth	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	86da      	strh	r2, [r3, #54]	; 0x36
 800a492:	e011      	b.n	800a4b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a494:	f7fb fa46 	bl	8005924 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d803      	bhi.n	800a4ac <HAL_SPI_Transmit+0x1f4>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4aa:	d102      	bne.n	800a4b2 <HAL_SPI_Transmit+0x1fa>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4b6:	e026      	b.n	800a506 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1cd      	bne.n	800a45e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fdb6 	bl	800b038 <SPI_EndRxTxTransaction>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10a      	bne.n	800a4f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	613b      	str	r3, [r7, #16]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	613b      	str	r3, [r7, #16]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	77fb      	strb	r3, [r7, #31]
 800a502:	e000      	b.n	800a506 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a504:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a516:	7ffb      	ldrb	r3, [r7, #31]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af02      	add	r7, sp, #8
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	4613      	mov	r3, r2
 800a52e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a53c:	d112      	bne.n	800a564 <HAL_SPI_Receive+0x44>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10e      	bne.n	800a564 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2204      	movs	r2, #4
 800a54a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a54e:	88fa      	ldrh	r2, [r7, #6]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f8e9 	bl	800a732 <HAL_SPI_TransmitReceive>
 800a560:	4603      	mov	r3, r0
 800a562:	e0e2      	b.n	800a72a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <HAL_SPI_Receive+0x52>
 800a56e:	2302      	movs	r3, #2
 800a570:	e0db      	b.n	800a72a <HAL_SPI_Receive+0x20a>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a57a:	f7fb f9d3 	bl	8005924 <HAL_GetTick>
 800a57e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d002      	beq.n	800a592 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a58c:	2302      	movs	r3, #2
 800a58e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a590:	e0c2      	b.n	800a718 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <HAL_SPI_Receive+0x7e>
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d102      	bne.n	800a5a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5a2:	e0b9      	b.n	800a718 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2204      	movs	r2, #4
 800a5a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	88fa      	ldrh	r2, [r7, #6]
 800a5bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	88fa      	ldrh	r2, [r7, #6]
 800a5c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ea:	d107      	bne.n	800a5fc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a5fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a606:	2b40      	cmp	r3, #64	; 0x40
 800a608:	d007      	beq.n	800a61a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a618:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d162      	bne.n	800a6e8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a622:	e02e      	b.n	800a682 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d115      	bne.n	800a65e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f103 020c 	add.w	r2, r3, #12
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63e:	7812      	ldrb	r2, [r2, #0]
 800a640:	b2d2      	uxtb	r2, r2
 800a642:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a652:	b29b      	uxth	r3, r3
 800a654:	3b01      	subs	r3, #1
 800a656:	b29a      	uxth	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a65c:	e011      	b.n	800a682 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a65e:	f7fb f961 	bl	8005924 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d803      	bhi.n	800a676 <HAL_SPI_Receive+0x156>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d102      	bne.n	800a67c <HAL_SPI_Receive+0x15c>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d102      	bne.n	800a682 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a680:	e04a      	b.n	800a718 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a686:	b29b      	uxth	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1cb      	bne.n	800a624 <HAL_SPI_Receive+0x104>
 800a68c:	e031      	b.n	800a6f2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d113      	bne.n	800a6c4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68da      	ldr	r2, [r3, #12]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	b292      	uxth	r2, r2
 800a6a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	1c9a      	adds	r2, r3, #2
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6c2:	e011      	b.n	800a6e8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6c4:	f7fb f92e 	bl	8005924 <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d803      	bhi.n	800a6dc <HAL_SPI_Receive+0x1bc>
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6da:	d102      	bne.n	800a6e2 <HAL_SPI_Receive+0x1c2>
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d102      	bne.n	800a6e8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a6e6:	e017      	b.n	800a718 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1cd      	bne.n	800a68e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f000 fc38 	bl	800af6c <SPI_EndRxTransaction>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2220      	movs	r2, #32
 800a706:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	75fb      	strb	r3, [r7, #23]
 800a714:	e000      	b.n	800a718 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a728:	7dfb      	ldrb	r3, [r7, #23]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b08c      	sub	sp, #48	; 0x30
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a740:	2301      	movs	r3, #1
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_SPI_TransmitReceive+0x26>
 800a754:	2302      	movs	r3, #2
 800a756:	e18a      	b.n	800aa6e <HAL_SPI_TransmitReceive+0x33c>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a760:	f7fb f8e0 	bl	8005924 <HAL_GetTick>
 800a764:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a76c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a776:	887b      	ldrh	r3, [r7, #2]
 800a778:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a77a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d00f      	beq.n	800a7a2 <HAL_SPI_TransmitReceive+0x70>
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a788:	d107      	bne.n	800a79a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d103      	bne.n	800a79a <HAL_SPI_TransmitReceive+0x68>
 800a792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a796:	2b04      	cmp	r3, #4
 800a798:	d003      	beq.n	800a7a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a79a:	2302      	movs	r3, #2
 800a79c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a7a0:	e15b      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d005      	beq.n	800a7b4 <HAL_SPI_TransmitReceive+0x82>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <HAL_SPI_TransmitReceive+0x82>
 800a7ae:	887b      	ldrh	r3, [r7, #2]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a7ba:	e14e      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d003      	beq.n	800a7d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2205      	movs	r2, #5
 800a7cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	887a      	ldrh	r2, [r7, #2]
 800a7e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	887a      	ldrh	r2, [r7, #2]
 800a7e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	887a      	ldrh	r2, [r7, #2]
 800a7f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	887a      	ldrh	r2, [r7, #2]
 800a7f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b40      	cmp	r3, #64	; 0x40
 800a812:	d007      	beq.n	800a824 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a82c:	d178      	bne.n	800a920 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <HAL_SPI_TransmitReceive+0x10a>
 800a836:	8b7b      	ldrh	r3, [r7, #26]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d166      	bne.n	800a90a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a840:	881a      	ldrh	r2, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84c:	1c9a      	adds	r2, r3, #2
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a856:	b29b      	uxth	r3, r3
 800a858:	3b01      	subs	r3, #1
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a860:	e053      	b.n	800a90a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f003 0302 	and.w	r3, r3, #2
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d11b      	bne.n	800a8a8 <HAL_SPI_TransmitReceive+0x176>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a874:	b29b      	uxth	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d016      	beq.n	800a8a8 <HAL_SPI_TransmitReceive+0x176>
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d113      	bne.n	800a8a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a884:	881a      	ldrh	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a890:	1c9a      	adds	r2, r3, #2
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	3b01      	subs	r3, #1
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d119      	bne.n	800a8ea <HAL_SPI_TransmitReceive+0x1b8>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d014      	beq.n	800a8ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ca:	b292      	uxth	r2, r2
 800a8cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d2:	1c9a      	adds	r2, r3, #2
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a8ea:	f7fb f81b 	bl	8005924 <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d807      	bhi.n	800a90a <HAL_SPI_TransmitReceive+0x1d8>
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d003      	beq.n	800a90a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a908:	e0a7      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a90e:	b29b      	uxth	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1a6      	bne.n	800a862 <HAL_SPI_TransmitReceive+0x130>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a918:	b29b      	uxth	r3, r3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1a1      	bne.n	800a862 <HAL_SPI_TransmitReceive+0x130>
 800a91e:	e07c      	b.n	800aa1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <HAL_SPI_TransmitReceive+0x1fc>
 800a928:	8b7b      	ldrh	r3, [r7, #26]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d16b      	bne.n	800aa06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	330c      	adds	r3, #12
 800a938:	7812      	ldrb	r2, [r2, #0]
 800a93a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	3b01      	subs	r3, #1
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a954:	e057      	b.n	800aa06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b02      	cmp	r3, #2
 800a962:	d11c      	bne.n	800a99e <HAL_SPI_TransmitReceive+0x26c>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a968:	b29b      	uxth	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d017      	beq.n	800a99e <HAL_SPI_TransmitReceive+0x26c>
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	2b01      	cmp	r3, #1
 800a972:	d114      	bne.n	800a99e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	330c      	adds	r3, #12
 800a97e:	7812      	ldrb	r2, [r2, #0]
 800a980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b01      	subs	r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d119      	bne.n	800a9e0 <HAL_SPI_TransmitReceive+0x2ae>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d014      	beq.n	800a9e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68da      	ldr	r2, [r3, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	b2d2      	uxtb	r2, r2
 800a9c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a9e0:	f7fa ffa0 	bl	8005924 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d803      	bhi.n	800a9f8 <HAL_SPI_TransmitReceive+0x2c6>
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f6:	d102      	bne.n	800a9fe <HAL_SPI_TransmitReceive+0x2cc>
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d103      	bne.n	800aa06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aa04:	e029      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1a2      	bne.n	800a956 <HAL_SPI_TransmitReceive+0x224>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d19d      	bne.n	800a956 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 fb0a 	bl	800b038 <SPI_EndRxTxTransaction>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d006      	beq.n	800aa38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2220      	movs	r2, #32
 800aa34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aa36:	e010      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10b      	bne.n	800aa58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	e000      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aa58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aa6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3730      	adds	r7, #48	; 0x30
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_SPI_TransmitReceive_DMA+0x20>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e0e3      	b.n	800ac60 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aaa6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800aaae:	7dbb      	ldrb	r3, [r7, #22]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d00d      	beq.n	800aad0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aaba:	d106      	bne.n	800aaca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <HAL_SPI_TransmitReceive_DMA+0x52>
 800aac4:	7dbb      	ldrb	r3, [r7, #22]
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d002      	beq.n	800aad0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800aaca:	2302      	movs	r3, #2
 800aacc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aace:	e0c2      	b.n	800ac56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d005      	beq.n	800aae2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800aadc:	887b      	ldrh	r3, [r7, #2]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aae6:	e0b6      	b.n	800ac56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d003      	beq.n	800aafc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	887a      	ldrh	r2, [r7, #2]
 800ab0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	887a      	ldrh	r2, [r7, #2]
 800ab12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	887a      	ldrh	r2, [r7, #2]
 800ab1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	887a      	ldrh	r2, [r7, #2]
 800ab24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	d108      	bne.n	800ab50 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab42:	4a49      	ldr	r2, [pc, #292]	; (800ac68 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4a:	4a48      	ldr	r2, [pc, #288]	; (800ac6c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800ab4c:	63da      	str	r2, [r3, #60]	; 0x3c
 800ab4e:	e007      	b.n	800ab60 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab54:	4a46      	ldr	r2, [pc, #280]	; (800ac70 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800ab56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5c:	4a45      	ldr	r2, [pc, #276]	; (800ac74 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800ab5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab64:	4a44      	ldr	r2, [pc, #272]	; (800ac78 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800ab66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	330c      	adds	r3, #12
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab80:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ab88:	f7fb fc54 	bl	8006434 <HAL_DMA_Start_IT>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00c      	beq.n	800abac <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab96:	f043 0210 	orr.w	r2, r3, #16
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800abaa:	e054      	b.n	800ac56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0201 	orr.w	r2, r2, #1
 800abba:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc0:	2200      	movs	r2, #0
 800abc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc8:	2200      	movs	r2, #0
 800abca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abd0:	2200      	movs	r2, #0
 800abd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abd8:	2200      	movs	r2, #0
 800abda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe4:	4619      	mov	r1, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	330c      	adds	r3, #12
 800abec:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abf2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800abf4:	f7fb fc1e 	bl	8006434 <HAL_DMA_Start_IT>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00c      	beq.n	800ac18 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac02:	f043 0210 	orr.w	r2, r3, #16
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ac16:	e01e      	b.n	800ac56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	d007      	beq.n	800ac36 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac34:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f042 0220 	orr.w	r2, r2, #32
 800ac44:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0202 	orr.w	r2, r2, #2
 800ac54:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	0800ae21 	.word	0x0800ae21
 800ac6c:	0800ace9 	.word	0x0800ace9
 800ac70:	0800ae3d 	.word	0x0800ae3d
 800ac74:	0800ad91 	.word	0x0800ad91
 800ac78:	0800ae59 	.word	0x0800ae59

0800ac7c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acda:	b2db      	uxtb	r3, r3
}
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acf6:	f7fa fe15 	bl	8005924 <HAL_GetTick>
 800acfa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad0a:	d03b      	beq.n	800ad84 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0220 	bic.w	r2, r2, #32
 800ad1a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10d      	bne.n	800ad40 <SPI_DMAReceiveCplt+0x58>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad2c:	d108      	bne.n	800ad40 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 0203 	bic.w	r2, r2, #3
 800ad3c:	605a      	str	r2, [r3, #4]
 800ad3e:	e007      	b.n	800ad50 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f022 0201 	bic.w	r2, r2, #1
 800ad4e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	2164      	movs	r1, #100	; 0x64
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f909 	bl	800af6c <SPI_EndRxTransaction>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2220      	movs	r2, #32
 800ad64:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f7ff ff9b 	bl	800acb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ad82:	e002      	b.n	800ad8a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f7ff ff79 	bl	800ac7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad9e:	f7fa fdc1 	bl	8005924 <HAL_GetTick>
 800ada2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb2:	d02f      	beq.n	800ae14 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f022 0220 	bic.w	r2, r2, #32
 800adc2:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	2164      	movs	r1, #100	; 0x64
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f935 	bl	800b038 <SPI_EndRxTxTransaction>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add8:	f043 0220 	orr.w	r2, r3, #32
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0203 	bic.w	r2, r2, #3
 800adee:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f7ff ff53 	bl	800acb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae12:	e002      	b.n	800ae1a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7f8 fba7 	bl	8003568 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff ff2e 	bl	800ac90 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae34:	bf00      	nop
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae48:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7ff ff2a 	bl	800aca4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae64:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f022 0203 	bic.w	r2, r2, #3
 800ae74:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7a:	f043 0210 	orr.w	r2, r3, #16
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7ff ff14 	bl	800acb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	4613      	mov	r3, r2
 800aea6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aea8:	e04c      	b.n	800af44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb0:	d048      	beq.n	800af44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800aeb2:	f7fa fd37 	bl	8005924 <HAL_GetTick>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d902      	bls.n	800aec8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d13d      	bne.n	800af44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aed6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aee0:	d111      	bne.n	800af06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeea:	d004      	beq.n	800aef6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aef4:	d107      	bne.n	800af06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af0e:	d10f      	bne.n	800af30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e00f      	b.n	800af64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689a      	ldr	r2, [r3, #8]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	4013      	ands	r3, r2
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	429a      	cmp	r2, r3
 800af52:	bf0c      	ite	eq
 800af54:	2301      	moveq	r3, #1
 800af56:	2300      	movne	r3, #0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	461a      	mov	r2, r3
 800af5c:	79fb      	ldrb	r3, [r7, #7]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d1a3      	bne.n	800aeaa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af80:	d111      	bne.n	800afa6 <SPI_EndRxTransaction+0x3a>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af8a:	d004      	beq.n	800af96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af94:	d107      	bne.n	800afa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afa4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afae:	d12a      	bne.n	800b006 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afb8:	d012      	beq.n	800afe0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2200      	movs	r2, #0
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f7ff ff67 	bl	800ae98 <SPI_WaitFlagStateUntilTimeout>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d02d      	beq.n	800b02c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd4:	f043 0220 	orr.w	r2, r3, #32
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800afdc:	2303      	movs	r3, #3
 800afde:	e026      	b.n	800b02e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2200      	movs	r2, #0
 800afe8:	2101      	movs	r1, #1
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7ff ff54 	bl	800ae98 <SPI_WaitFlagStateUntilTimeout>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d01a      	beq.n	800b02c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800affa:	f043 0220 	orr.w	r2, r3, #32
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e013      	b.n	800b02e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2200      	movs	r2, #0
 800b00e:	2101      	movs	r1, #1
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7ff ff41 	bl	800ae98 <SPI_WaitFlagStateUntilTimeout>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d007      	beq.n	800b02c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b020:	f043 0220 	orr.w	r2, r3, #32
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e000      	b.n	800b02e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b044:	4b1b      	ldr	r3, [pc, #108]	; (800b0b4 <SPI_EndRxTxTransaction+0x7c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a1b      	ldr	r2, [pc, #108]	; (800b0b8 <SPI_EndRxTxTransaction+0x80>)
 800b04a:	fba2 2303 	umull	r2, r3, r2, r3
 800b04e:	0d5b      	lsrs	r3, r3, #21
 800b050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b054:	fb02 f303 	mul.w	r3, r2, r3
 800b058:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b062:	d112      	bne.n	800b08a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2200      	movs	r2, #0
 800b06c:	2180      	movs	r1, #128	; 0x80
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff ff12 	bl	800ae98 <SPI_WaitFlagStateUntilTimeout>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d016      	beq.n	800b0a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07e:	f043 0220 	orr.w	r2, r3, #32
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e00f      	b.n	800b0aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00a      	beq.n	800b0a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	3b01      	subs	r3, #1
 800b094:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a0:	2b80      	cmp	r3, #128	; 0x80
 800b0a2:	d0f2      	beq.n	800b08a <SPI_EndRxTxTransaction+0x52>
 800b0a4:	e000      	b.n	800b0a8 <SPI_EndRxTxTransaction+0x70>
        break;
 800b0a6:	bf00      	nop
  }

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000280 	.word	0x20000280
 800b0b8:	165e9f81 	.word	0x165e9f81

0800b0bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e01d      	b.n	800b10a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d106      	bne.n	800b0e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7fa f98a 	bl	80053fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f000 fb68 	bl	800b7d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b112:	b480      	push	{r7}
 800b114:	b085      	sub	sp, #20
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2202      	movs	r2, #2
 800b11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f003 0307 	and.w	r3, r3, #7
 800b12c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b06      	cmp	r3, #6
 800b132:	d007      	beq.n	800b144 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f042 0201 	orr.w	r2, r2, #1
 800b142:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b085      	sub	sp, #20
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f042 0201 	orr.w	r2, r2, #1
 800b170:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b06      	cmp	r3, #6
 800b182:	d007      	beq.n	800b194 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f042 0201 	orr.w	r2, r2, #1
 800b192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e01d      	b.n	800b1f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d106      	bne.n	800b1ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f7fa f8f7 	bl	80053bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f000 faf5 	bl	800b7d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2201      	movs	r2, #1
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 fdca 	bl	800bda4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a15      	ldr	r2, [pc, #84]	; (800b26c <HAL_TIM_PWM_Start+0x74>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <HAL_TIM_PWM_Start+0x2c>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a14      	ldr	r2, [pc, #80]	; (800b270 <HAL_TIM_PWM_Start+0x78>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d101      	bne.n	800b228 <HAL_TIM_PWM_Start+0x30>
 800b224:	2301      	movs	r3, #1
 800b226:	e000      	b.n	800b22a <HAL_TIM_PWM_Start+0x32>
 800b228:	2300      	movs	r3, #0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d007      	beq.n	800b23e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b23c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f003 0307 	and.w	r3, r3, #7
 800b248:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b06      	cmp	r3, #6
 800b24e:	d007      	beq.n	800b260 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0201 	orr.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	40010000 	.word	0x40010000
 800b270:	40010400 	.word	0x40010400

0800b274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b02      	cmp	r3, #2
 800b288:	d122      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f003 0302 	and.w	r3, r3, #2
 800b294:	2b02      	cmp	r3, #2
 800b296:	d11b      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f06f 0202 	mvn.w	r2, #2
 800b2a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	f003 0303 	and.w	r3, r3, #3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fa6b 	bl	800b792 <HAL_TIM_IC_CaptureCallback>
 800b2bc:	e005      	b.n	800b2ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa5d 	bl	800b77e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa6e 	bl	800b7a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	f003 0304 	and.w	r3, r3, #4
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d122      	bne.n	800b324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f003 0304 	and.w	r3, r3, #4
 800b2e8:	2b04      	cmp	r3, #4
 800b2ea:	d11b      	bne.n	800b324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f06f 0204 	mvn.w	r2, #4
 800b2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fa41 	bl	800b792 <HAL_TIM_IC_CaptureCallback>
 800b310:	e005      	b.n	800b31e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fa33 	bl	800b77e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fa44 	bl	800b7a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	f003 0308 	and.w	r3, r3, #8
 800b32e:	2b08      	cmp	r3, #8
 800b330:	d122      	bne.n	800b378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	f003 0308 	and.w	r3, r3, #8
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d11b      	bne.n	800b378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f06f 0208 	mvn.w	r2, #8
 800b348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2204      	movs	r2, #4
 800b34e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	69db      	ldr	r3, [r3, #28]
 800b356:	f003 0303 	and.w	r3, r3, #3
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa17 	bl	800b792 <HAL_TIM_IC_CaptureCallback>
 800b364:	e005      	b.n	800b372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fa09 	bl	800b77e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fa1a 	bl	800b7a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	f003 0310 	and.w	r3, r3, #16
 800b382:	2b10      	cmp	r3, #16
 800b384:	d122      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	f003 0310 	and.w	r3, r3, #16
 800b390:	2b10      	cmp	r3, #16
 800b392:	d11b      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f06f 0210 	mvn.w	r2, #16
 800b39c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2208      	movs	r2, #8
 800b3a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f9ed 	bl	800b792 <HAL_TIM_IC_CaptureCallback>
 800b3b8:	e005      	b.n	800b3c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f9df 	bl	800b77e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f9f0 	bl	800b7a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d10e      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d107      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f06f 0201 	mvn.w	r2, #1
 800b3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f9 fbda 	bl	8004bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b402:	2b80      	cmp	r3, #128	; 0x80
 800b404:	d10e      	bne.n	800b424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b410:	2b80      	cmp	r3, #128	; 0x80
 800b412:	d107      	bne.n	800b424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b41c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fd6c 	bl	800befc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42e:	2b40      	cmp	r3, #64	; 0x40
 800b430:	d10e      	bne.n	800b450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43c:	2b40      	cmp	r3, #64	; 0x40
 800b43e:	d107      	bne.n	800b450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9b5 	bl	800b7ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b20      	cmp	r3, #32
 800b45c:	d10e      	bne.n	800b47c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d107      	bne.n	800b47c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f06f 0220 	mvn.w	r2, #32
 800b474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fd36 	bl	800bee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e0b4      	b.n	800b608 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b0c      	cmp	r3, #12
 800b4b2:	f200 809f 	bhi.w	800b5f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b4b6:	a201      	add	r2, pc, #4	; (adr r2, 800b4bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4bc:	0800b4f1 	.word	0x0800b4f1
 800b4c0:	0800b5f5 	.word	0x0800b5f5
 800b4c4:	0800b5f5 	.word	0x0800b5f5
 800b4c8:	0800b5f5 	.word	0x0800b5f5
 800b4cc:	0800b531 	.word	0x0800b531
 800b4d0:	0800b5f5 	.word	0x0800b5f5
 800b4d4:	0800b5f5 	.word	0x0800b5f5
 800b4d8:	0800b5f5 	.word	0x0800b5f5
 800b4dc:	0800b573 	.word	0x0800b573
 800b4e0:	0800b5f5 	.word	0x0800b5f5
 800b4e4:	0800b5f5 	.word	0x0800b5f5
 800b4e8:	0800b5f5 	.word	0x0800b5f5
 800b4ec:	0800b5b3 	.word	0x0800b5b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68b9      	ldr	r1, [r7, #8]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 fa0a 	bl	800b910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	699a      	ldr	r2, [r3, #24]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0208 	orr.w	r2, r2, #8
 800b50a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	699a      	ldr	r2, [r3, #24]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f022 0204 	bic.w	r2, r2, #4
 800b51a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6999      	ldr	r1, [r3, #24]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	691a      	ldr	r2, [r3, #16]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	430a      	orrs	r2, r1
 800b52c:	619a      	str	r2, [r3, #24]
      break;
 800b52e:	e062      	b.n	800b5f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68b9      	ldr	r1, [r7, #8]
 800b536:	4618      	mov	r0, r3
 800b538:	f000 fa5a 	bl	800b9f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699a      	ldr	r2, [r3, #24]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b54a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699a      	ldr	r2, [r3, #24]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b55a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6999      	ldr	r1, [r3, #24]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	021a      	lsls	r2, r3, #8
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	430a      	orrs	r2, r1
 800b56e:	619a      	str	r2, [r3, #24]
      break;
 800b570:	e041      	b.n	800b5f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 faaf 	bl	800badc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69da      	ldr	r2, [r3, #28]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f042 0208 	orr.w	r2, r2, #8
 800b58c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	69da      	ldr	r2, [r3, #28]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 0204 	bic.w	r2, r2, #4
 800b59c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	69d9      	ldr	r1, [r3, #28]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	691a      	ldr	r2, [r3, #16]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	61da      	str	r2, [r3, #28]
      break;
 800b5b0:	e021      	b.n	800b5f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 fb03 	bl	800bbc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	69da      	ldr	r2, [r3, #28]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69da      	ldr	r2, [r3, #28]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	69d9      	ldr	r1, [r3, #28]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	021a      	lsls	r2, r3, #8
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	61da      	str	r2, [r3, #28]
      break;
 800b5f2:	e000      	b.n	800b5f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b5f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b620:	2b01      	cmp	r3, #1
 800b622:	d101      	bne.n	800b628 <HAL_TIM_ConfigClockSource+0x18>
 800b624:	2302      	movs	r3, #2
 800b626:	e0a6      	b.n	800b776 <HAL_TIM_ConfigClockSource+0x166>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2202      	movs	r2, #2
 800b634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b64e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b40      	cmp	r3, #64	; 0x40
 800b65e:	d067      	beq.n	800b730 <HAL_TIM_ConfigClockSource+0x120>
 800b660:	2b40      	cmp	r3, #64	; 0x40
 800b662:	d80b      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x6c>
 800b664:	2b10      	cmp	r3, #16
 800b666:	d073      	beq.n	800b750 <HAL_TIM_ConfigClockSource+0x140>
 800b668:	2b10      	cmp	r3, #16
 800b66a:	d802      	bhi.n	800b672 <HAL_TIM_ConfigClockSource+0x62>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d06f      	beq.n	800b750 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b670:	e078      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b672:	2b20      	cmp	r3, #32
 800b674:	d06c      	beq.n	800b750 <HAL_TIM_ConfigClockSource+0x140>
 800b676:	2b30      	cmp	r3, #48	; 0x30
 800b678:	d06a      	beq.n	800b750 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b67a:	e073      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b67c:	2b70      	cmp	r3, #112	; 0x70
 800b67e:	d00d      	beq.n	800b69c <HAL_TIM_ConfigClockSource+0x8c>
 800b680:	2b70      	cmp	r3, #112	; 0x70
 800b682:	d804      	bhi.n	800b68e <HAL_TIM_ConfigClockSource+0x7e>
 800b684:	2b50      	cmp	r3, #80	; 0x50
 800b686:	d033      	beq.n	800b6f0 <HAL_TIM_ConfigClockSource+0xe0>
 800b688:	2b60      	cmp	r3, #96	; 0x60
 800b68a:	d041      	beq.n	800b710 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b68c:	e06a      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b692:	d066      	beq.n	800b762 <HAL_TIM_ConfigClockSource+0x152>
 800b694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b698:	d017      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b69a:	e063      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	6899      	ldr	r1, [r3, #8]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f000 fb5a 	bl	800bd64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b6be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	609a      	str	r2, [r3, #8]
      break;
 800b6c8:	e04c      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	6899      	ldr	r1, [r3, #8]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f000 fb43 	bl	800bd64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6ec:	609a      	str	r2, [r3, #8]
      break;
 800b6ee:	e039      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6818      	ldr	r0, [r3, #0]
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	6859      	ldr	r1, [r3, #4]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	f000 fab7 	bl	800bc70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2150      	movs	r1, #80	; 0x50
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 fb10 	bl	800bd2e <TIM_ITRx_SetConfig>
      break;
 800b70e:	e029      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	6859      	ldr	r1, [r3, #4]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	461a      	mov	r2, r3
 800b71e:	f000 fad6 	bl	800bcce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2160      	movs	r1, #96	; 0x60
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 fb00 	bl	800bd2e <TIM_ITRx_SetConfig>
      break;
 800b72e:	e019      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6818      	ldr	r0, [r3, #0]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	6859      	ldr	r1, [r3, #4]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	461a      	mov	r2, r3
 800b73e:	f000 fa97 	bl	800bc70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2140      	movs	r1, #64	; 0x40
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 faf0 	bl	800bd2e <TIM_ITRx_SetConfig>
      break;
 800b74e:	e009      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4619      	mov	r1, r3
 800b75a:	4610      	mov	r0, r2
 800b75c:	f000 fae7 	bl	800bd2e <TIM_ITRx_SetConfig>
      break;
 800b760:	e000      	b.n	800b764 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b77e:	b480      	push	{r7}
 800b780:	b083      	sub	sp, #12
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b792:	b480      	push	{r7}
 800b794:	b083      	sub	sp, #12
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b083      	sub	sp, #12
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7c2:	bf00      	nop
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
	...

0800b7d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a40      	ldr	r2, [pc, #256]	; (800b8e4 <TIM_Base_SetConfig+0x114>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d013      	beq.n	800b810 <TIM_Base_SetConfig+0x40>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ee:	d00f      	beq.n	800b810 <TIM_Base_SetConfig+0x40>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a3d      	ldr	r2, [pc, #244]	; (800b8e8 <TIM_Base_SetConfig+0x118>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d00b      	beq.n	800b810 <TIM_Base_SetConfig+0x40>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a3c      	ldr	r2, [pc, #240]	; (800b8ec <TIM_Base_SetConfig+0x11c>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d007      	beq.n	800b810 <TIM_Base_SetConfig+0x40>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a3b      	ldr	r2, [pc, #236]	; (800b8f0 <TIM_Base_SetConfig+0x120>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d003      	beq.n	800b810 <TIM_Base_SetConfig+0x40>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a3a      	ldr	r2, [pc, #232]	; (800b8f4 <TIM_Base_SetConfig+0x124>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d108      	bne.n	800b822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a2f      	ldr	r2, [pc, #188]	; (800b8e4 <TIM_Base_SetConfig+0x114>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d02b      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b830:	d027      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a2c      	ldr	r2, [pc, #176]	; (800b8e8 <TIM_Base_SetConfig+0x118>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d023      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a2b      	ldr	r2, [pc, #172]	; (800b8ec <TIM_Base_SetConfig+0x11c>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d01f      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a2a      	ldr	r2, [pc, #168]	; (800b8f0 <TIM_Base_SetConfig+0x120>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d01b      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a29      	ldr	r2, [pc, #164]	; (800b8f4 <TIM_Base_SetConfig+0x124>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d017      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a28      	ldr	r2, [pc, #160]	; (800b8f8 <TIM_Base_SetConfig+0x128>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d013      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a27      	ldr	r2, [pc, #156]	; (800b8fc <TIM_Base_SetConfig+0x12c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00f      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a26      	ldr	r2, [pc, #152]	; (800b900 <TIM_Base_SetConfig+0x130>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00b      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a25      	ldr	r2, [pc, #148]	; (800b904 <TIM_Base_SetConfig+0x134>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d007      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a24      	ldr	r2, [pc, #144]	; (800b908 <TIM_Base_SetConfig+0x138>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d003      	beq.n	800b882 <TIM_Base_SetConfig+0xb2>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a23      	ldr	r2, [pc, #140]	; (800b90c <TIM_Base_SetConfig+0x13c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d108      	bne.n	800b894 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	4313      	orrs	r3, r2
 800b892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	689a      	ldr	r2, [r3, #8]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a0a      	ldr	r2, [pc, #40]	; (800b8e4 <TIM_Base_SetConfig+0x114>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d003      	beq.n	800b8c8 <TIM_Base_SetConfig+0xf8>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a0c      	ldr	r2, [pc, #48]	; (800b8f4 <TIM_Base_SetConfig+0x124>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d103      	bne.n	800b8d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	615a      	str	r2, [r3, #20]
}
 800b8d6:	bf00      	nop
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	40010000 	.word	0x40010000
 800b8e8:	40000400 	.word	0x40000400
 800b8ec:	40000800 	.word	0x40000800
 800b8f0:	40000c00 	.word	0x40000c00
 800b8f4:	40010400 	.word	0x40010400
 800b8f8:	40014000 	.word	0x40014000
 800b8fc:	40014400 	.word	0x40014400
 800b900:	40014800 	.word	0x40014800
 800b904:	40001800 	.word	0x40001800
 800b908:	40001c00 	.word	0x40001c00
 800b90c:	40002000 	.word	0x40002000

0800b910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b910:	b480      	push	{r7}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	f023 0201 	bic.w	r2, r3, #1
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 0303 	bic.w	r3, r3, #3
 800b946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4313      	orrs	r3, r2
 800b950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f023 0302 	bic.w	r3, r3, #2
 800b958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	4313      	orrs	r3, r2
 800b962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a20      	ldr	r2, [pc, #128]	; (800b9e8 <TIM_OC1_SetConfig+0xd8>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d003      	beq.n	800b974 <TIM_OC1_SetConfig+0x64>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <TIM_OC1_SetConfig+0xdc>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d10c      	bne.n	800b98e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f023 0308 	bic.w	r3, r3, #8
 800b97a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	4313      	orrs	r3, r2
 800b984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f023 0304 	bic.w	r3, r3, #4
 800b98c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a15      	ldr	r2, [pc, #84]	; (800b9e8 <TIM_OC1_SetConfig+0xd8>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d003      	beq.n	800b99e <TIM_OC1_SetConfig+0x8e>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a14      	ldr	r2, [pc, #80]	; (800b9ec <TIM_OC1_SetConfig+0xdc>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d111      	bne.n	800b9c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	621a      	str	r2, [r3, #32]
}
 800b9dc:	bf00      	nop
 800b9de:	371c      	adds	r7, #28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	40010000 	.word	0x40010000
 800b9ec:	40010400 	.word	0x40010400

0800b9f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	f023 0210 	bic.w	r2, r3, #16
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	021b      	lsls	r3, r3, #8
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f023 0320 	bic.w	r3, r3, #32
 800ba3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	011b      	lsls	r3, r3, #4
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a22      	ldr	r2, [pc, #136]	; (800bad4 <TIM_OC2_SetConfig+0xe4>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d003      	beq.n	800ba58 <TIM_OC2_SetConfig+0x68>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a21      	ldr	r2, [pc, #132]	; (800bad8 <TIM_OC2_SetConfig+0xe8>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d10d      	bne.n	800ba74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a17      	ldr	r2, [pc, #92]	; (800bad4 <TIM_OC2_SetConfig+0xe4>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d003      	beq.n	800ba84 <TIM_OC2_SetConfig+0x94>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a16      	ldr	r2, [pc, #88]	; (800bad8 <TIM_OC2_SetConfig+0xe8>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d113      	bne.n	800baac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	621a      	str	r2, [r3, #32]
}
 800bac6:	bf00      	nop
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	40010000 	.word	0x40010000
 800bad8:	40010400 	.word	0x40010400

0800badc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f023 0303 	bic.w	r3, r3, #3
 800bb12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	021b      	lsls	r3, r3, #8
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a21      	ldr	r2, [pc, #132]	; (800bbbc <TIM_OC3_SetConfig+0xe0>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d003      	beq.n	800bb42 <TIM_OC3_SetConfig+0x66>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a20      	ldr	r2, [pc, #128]	; (800bbc0 <TIM_OC3_SetConfig+0xe4>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d10d      	bne.n	800bb5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a16      	ldr	r2, [pc, #88]	; (800bbbc <TIM_OC3_SetConfig+0xe0>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d003      	beq.n	800bb6e <TIM_OC3_SetConfig+0x92>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a15      	ldr	r2, [pc, #84]	; (800bbc0 <TIM_OC3_SetConfig+0xe4>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d113      	bne.n	800bb96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	621a      	str	r2, [r3, #32]
}
 800bbb0:	bf00      	nop
 800bbb2:	371c      	adds	r7, #28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	40010000 	.word	0x40010000
 800bbc0:	40010400 	.word	0x40010400

0800bbc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	031b      	lsls	r3, r3, #12
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a12      	ldr	r2, [pc, #72]	; (800bc68 <TIM_OC4_SetConfig+0xa4>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d003      	beq.n	800bc2c <TIM_OC4_SetConfig+0x68>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a11      	ldr	r2, [pc, #68]	; (800bc6c <TIM_OC4_SetConfig+0xa8>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d109      	bne.n	800bc40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	019b      	lsls	r3, r3, #6
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	621a      	str	r2, [r3, #32]
}
 800bc5a:	bf00      	nop
 800bc5c:	371c      	adds	r7, #28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	40010000 	.word	0x40010000
 800bc6c:	40010400 	.word	0x40010400

0800bc70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	f023 0201 	bic.w	r2, r3, #1
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	011b      	lsls	r3, r3, #4
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f023 030a 	bic.w	r3, r3, #10
 800bcac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	621a      	str	r2, [r3, #32]
}
 800bcc2:	bf00      	nop
 800bcc4:	371c      	adds	r7, #28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b087      	sub	sp, #28
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	60f8      	str	r0, [r7, #12]
 800bcd6:	60b9      	str	r1, [r7, #8]
 800bcd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6a1b      	ldr	r3, [r3, #32]
 800bcde:	f023 0210 	bic.w	r2, r3, #16
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6a1b      	ldr	r3, [r3, #32]
 800bcf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	031b      	lsls	r3, r3, #12
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	011b      	lsls	r3, r3, #4
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	621a      	str	r2, [r3, #32]
}
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b085      	sub	sp, #20
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	f043 0307 	orr.w	r3, r3, #7
 800bd50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	609a      	str	r2, [r3, #8]
}
 800bd58:	bf00      	nop
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	021a      	lsls	r2, r3, #8
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	431a      	orrs	r2, r3
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	609a      	str	r2, [r3, #8]
}
 800bd98:	bf00      	nop
 800bd9a:	371c      	adds	r7, #28
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	f003 031f 	and.w	r3, r3, #31
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a1a      	ldr	r2, [r3, #32]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	43db      	mvns	r3, r3
 800bdc6:	401a      	ands	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6a1a      	ldr	r2, [r3, #32]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	f003 031f 	and.w	r3, r3, #31
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bddc:	431a      	orrs	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	621a      	str	r2, [r3, #32]
}
 800bde2:	bf00      	nop
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
	...

0800bdf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be00:	2b01      	cmp	r3, #1
 800be02:	d101      	bne.n	800be08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be04:	2302      	movs	r3, #2
 800be06:	e05a      	b.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2202      	movs	r2, #2
 800be14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	4313      	orrs	r3, r2
 800be38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a21      	ldr	r2, [pc, #132]	; (800becc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d022      	beq.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be54:	d01d      	beq.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a1d      	ldr	r2, [pc, #116]	; (800bed0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d018      	beq.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a1b      	ldr	r2, [pc, #108]	; (800bed4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d013      	beq.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a1a      	ldr	r2, [pc, #104]	; (800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d00e      	beq.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a18      	ldr	r2, [pc, #96]	; (800bedc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d009      	beq.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a17      	ldr	r2, [pc, #92]	; (800bee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d004      	beq.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a15      	ldr	r2, [pc, #84]	; (800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d10c      	bne.n	800beac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	40010000 	.word	0x40010000
 800bed0:	40000400 	.word	0x40000400
 800bed4:	40000800 	.word	0x40000800
 800bed8:	40000c00 	.word	0x40000c00
 800bedc:	40010400 	.word	0x40010400
 800bee0:	40014000 	.word	0x40014000
 800bee4:	40001800 	.word	0x40001800

0800bee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf04:	bf00      	nop
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf10:	b084      	sub	sp, #16
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	f107 001c 	add.w	r0, r7, #28
 800bf1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d122      	bne.n	800bf6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bf3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bf50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d105      	bne.n	800bf62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f001 fac0 	bl	800d4e8 <USB_CoreReset>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]
 800bf6c:	e01a      	b.n	800bfa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f001 fab4 	bl	800d4e8 <USB_CoreReset>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bf84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d106      	bne.n	800bf98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	639a      	str	r2, [r3, #56]	; 0x38
 800bf96:	e005      	b.n	800bfa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d10b      	bne.n	800bfc2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	f043 0206 	orr.w	r2, r3, #6
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f043 0220 	orr.w	r2, r3, #32
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfce:	b004      	add	sp, #16
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b087      	sub	sp, #28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bfe2:	79fb      	ldrb	r3, [r7, #7]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d165      	bne.n	800c0b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	4a41      	ldr	r2, [pc, #260]	; (800c0f0 <USB_SetTurnaroundTime+0x11c>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d906      	bls.n	800bffe <USB_SetTurnaroundTime+0x2a>
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	4a40      	ldr	r2, [pc, #256]	; (800c0f4 <USB_SetTurnaroundTime+0x120>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d802      	bhi.n	800bffe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bff8:	230f      	movs	r3, #15
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	e062      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	4a3c      	ldr	r2, [pc, #240]	; (800c0f4 <USB_SetTurnaroundTime+0x120>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d906      	bls.n	800c014 <USB_SetTurnaroundTime+0x40>
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	4a3b      	ldr	r2, [pc, #236]	; (800c0f8 <USB_SetTurnaroundTime+0x124>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d802      	bhi.n	800c014 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c00e:	230e      	movs	r3, #14
 800c010:	617b      	str	r3, [r7, #20]
 800c012:	e057      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4a38      	ldr	r2, [pc, #224]	; (800c0f8 <USB_SetTurnaroundTime+0x124>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d906      	bls.n	800c02a <USB_SetTurnaroundTime+0x56>
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	4a37      	ldr	r2, [pc, #220]	; (800c0fc <USB_SetTurnaroundTime+0x128>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d802      	bhi.n	800c02a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c024:	230d      	movs	r3, #13
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e04c      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	4a33      	ldr	r2, [pc, #204]	; (800c0fc <USB_SetTurnaroundTime+0x128>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d906      	bls.n	800c040 <USB_SetTurnaroundTime+0x6c>
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	4a32      	ldr	r2, [pc, #200]	; (800c100 <USB_SetTurnaroundTime+0x12c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d802      	bhi.n	800c040 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c03a:	230c      	movs	r3, #12
 800c03c:	617b      	str	r3, [r7, #20]
 800c03e:	e041      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	4a2f      	ldr	r2, [pc, #188]	; (800c100 <USB_SetTurnaroundTime+0x12c>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d906      	bls.n	800c056 <USB_SetTurnaroundTime+0x82>
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4a2e      	ldr	r2, [pc, #184]	; (800c104 <USB_SetTurnaroundTime+0x130>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d802      	bhi.n	800c056 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c050:	230b      	movs	r3, #11
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	e036      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4a2a      	ldr	r2, [pc, #168]	; (800c104 <USB_SetTurnaroundTime+0x130>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d906      	bls.n	800c06c <USB_SetTurnaroundTime+0x98>
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	4a29      	ldr	r2, [pc, #164]	; (800c108 <USB_SetTurnaroundTime+0x134>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d802      	bhi.n	800c06c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c066:	230a      	movs	r3, #10
 800c068:	617b      	str	r3, [r7, #20]
 800c06a:	e02b      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4a26      	ldr	r2, [pc, #152]	; (800c108 <USB_SetTurnaroundTime+0x134>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d906      	bls.n	800c082 <USB_SetTurnaroundTime+0xae>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	4a25      	ldr	r2, [pc, #148]	; (800c10c <USB_SetTurnaroundTime+0x138>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d802      	bhi.n	800c082 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c07c:	2309      	movs	r3, #9
 800c07e:	617b      	str	r3, [r7, #20]
 800c080:	e020      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	4a21      	ldr	r2, [pc, #132]	; (800c10c <USB_SetTurnaroundTime+0x138>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d906      	bls.n	800c098 <USB_SetTurnaroundTime+0xc4>
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	4a20      	ldr	r2, [pc, #128]	; (800c110 <USB_SetTurnaroundTime+0x13c>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d802      	bhi.n	800c098 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c092:	2308      	movs	r3, #8
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	e015      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	4a1d      	ldr	r2, [pc, #116]	; (800c110 <USB_SetTurnaroundTime+0x13c>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d906      	bls.n	800c0ae <USB_SetTurnaroundTime+0xda>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	4a1c      	ldr	r2, [pc, #112]	; (800c114 <USB_SetTurnaroundTime+0x140>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d802      	bhi.n	800c0ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c0a8:	2307      	movs	r3, #7
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	e00a      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c0ae:	2306      	movs	r3, #6
 800c0b0:	617b      	str	r3, [r7, #20]
 800c0b2:	e007      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c0b4:	79fb      	ldrb	r3, [r7, #7]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d102      	bne.n	800c0c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c0ba:	2309      	movs	r3, #9
 800c0bc:	617b      	str	r3, [r7, #20]
 800c0be:	e001      	b.n	800c0c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c0c0:	2309      	movs	r3, #9
 800c0c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	68da      	ldr	r2, [r3, #12]
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	029b      	lsls	r3, r3, #10
 800c0d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	371c      	adds	r7, #28
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	00d8acbf 	.word	0x00d8acbf
 800c0f4:	00e4e1bf 	.word	0x00e4e1bf
 800c0f8:	00f423ff 	.word	0x00f423ff
 800c0fc:	0106737f 	.word	0x0106737f
 800c100:	011a499f 	.word	0x011a499f
 800c104:	01312cff 	.word	0x01312cff
 800c108:	014ca43f 	.word	0x014ca43f
 800c10c:	016e35ff 	.word	0x016e35ff
 800c110:	01a6ab1f 	.word	0x01a6ab1f
 800c114:	01e847ff 	.word	0x01e847ff

0800c118 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	f043 0201 	orr.w	r2, r3, #1
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f023 0201 	bic.w	r2, r3, #1
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c174:	78fb      	ldrb	r3, [r7, #3]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d106      	bne.n	800c188 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	60da      	str	r2, [r3, #12]
 800c186:	e00b      	b.n	800c1a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	60da      	str	r2, [r3, #12]
 800c19a:	e001      	b.n	800c1a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e003      	b.n	800c1a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c1a0:	2032      	movs	r0, #50	; 0x32
 800c1a2:	f7f9 fbcb 	bl	800593c <HAL_Delay>

  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1b0:	b084      	sub	sp, #16
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b086      	sub	sp, #24
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c1be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	613b      	str	r3, [r7, #16]
 800c1ce:	e009      	b.n	800c1e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	3340      	adds	r3, #64	; 0x40
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	613b      	str	r3, [r7, #16]
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	2b0e      	cmp	r3, #14
 800c1e8:	d9f2      	bls.n	800c1d0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d11c      	bne.n	800c22a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1fe:	f043 0302 	orr.w	r3, r3, #2
 800c202:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c208:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	601a      	str	r2, [r3, #0]
 800c228:	e005      	b.n	800c236 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c23c:	461a      	mov	r2, r3
 800c23e:	2300      	movs	r3, #0
 800c240:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c248:	4619      	mov	r1, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c250:	461a      	mov	r2, r3
 800c252:	680b      	ldr	r3, [r1, #0]
 800c254:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d10c      	bne.n	800c276 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d104      	bne.n	800c26c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c262:	2100      	movs	r1, #0
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f949 	bl	800c4fc <USB_SetDevSpeed>
 800c26a:	e008      	b.n	800c27e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c26c:	2101      	movs	r1, #1
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f944 	bl	800c4fc <USB_SetDevSpeed>
 800c274:	e003      	b.n	800c27e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c276:	2103      	movs	r1, #3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f93f 	bl	800c4fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c27e:	2110      	movs	r1, #16
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 f8f3 	bl	800c46c <USB_FlushTxFifo>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d001      	beq.n	800c290 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f911 	bl	800c4b8 <USB_FlushRxFifo>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2be:	461a      	mov	r2, r3
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	e043      	b.n	800c352 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	015a      	lsls	r2, r3, #5
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2e0:	d118      	bne.n	800c314 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10a      	bne.n	800c2fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2fa:	6013      	str	r3, [r2, #0]
 800c2fc:	e013      	b.n	800c326 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	015a      	lsls	r2, r3, #5
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	4413      	add	r3, r2
 800c306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30a:	461a      	mov	r2, r3
 800c30c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c310:	6013      	str	r3, [r2, #0]
 800c312:	e008      	b.n	800c326 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c320:	461a      	mov	r2, r3
 800c322:	2300      	movs	r3, #0
 800c324:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	015a      	lsls	r2, r3, #5
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c332:	461a      	mov	r2, r3
 800c334:	2300      	movs	r3, #0
 800c336:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	015a      	lsls	r2, r3, #5
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4413      	add	r3, r2
 800c340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c344:	461a      	mov	r2, r3
 800c346:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c34a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	3301      	adds	r3, #1
 800c350:	613b      	str	r3, [r7, #16]
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	429a      	cmp	r2, r3
 800c358:	d3b7      	bcc.n	800c2ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c35a:	2300      	movs	r3, #0
 800c35c:	613b      	str	r3, [r7, #16]
 800c35e:	e043      	b.n	800c3e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c376:	d118      	bne.n	800c3aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38a:	461a      	mov	r2, r3
 800c38c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	e013      	b.n	800c3bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	e008      	b.n	800c3bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	015a      	lsls	r2, r3, #5
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	015a      	lsls	r2, r3, #5
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	613b      	str	r3, [r7, #16]
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d3b7      	bcc.n	800c360 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c402:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c410:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	2b00      	cmp	r3, #0
 800c416:	d105      	bne.n	800c424 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	699b      	ldr	r3, [r3, #24]
 800c41c:	f043 0210 	orr.w	r2, r3, #16
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	699a      	ldr	r2, [r3, #24]
 800c428:	4b0f      	ldr	r3, [pc, #60]	; (800c468 <USB_DevInit+0x2b8>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	f043 0208 	orr.w	r2, r3, #8
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c444:	2b01      	cmp	r3, #1
 800c446:	d107      	bne.n	800c458 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c450:	f043 0304 	orr.w	r3, r3, #4
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c464:	b004      	add	sp, #16
 800c466:	4770      	bx	lr
 800c468:	803c3800 	.word	0x803c3800

0800c46c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c476:	2300      	movs	r3, #0
 800c478:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	019b      	lsls	r3, r3, #6
 800c47e:	f043 0220 	orr.w	r2, r3, #32
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3301      	adds	r3, #1
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4a09      	ldr	r2, [pc, #36]	; (800c4b4 <USB_FlushTxFifo+0x48>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d901      	bls.n	800c498 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e006      	b.n	800c4a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	f003 0320 	and.w	r3, r3, #32
 800c4a0:	2b20      	cmp	r3, #32
 800c4a2:	d0f0      	beq.n	800c486 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	00030d40 	.word	0x00030d40

0800c4b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2210      	movs	r2, #16
 800c4c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <USB_FlushRxFifo+0x40>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d901      	bls.n	800c4dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e006      	b.n	800c4ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	f003 0310 	and.w	r3, r3, #16
 800c4e4:	2b10      	cmp	r3, #16
 800c4e6:	d0f0      	beq.n	800c4ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	00030d40 	.word	0x00030d40

0800c4fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	78fb      	ldrb	r3, [r7, #3]
 800c516:	68f9      	ldr	r1, [r7, #12]
 800c518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c51c:	4313      	orrs	r3, r2
 800c51e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c52e:	b480      	push	{r7}
 800c530:	b087      	sub	sp, #28
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f003 0306 	and.w	r3, r3, #6
 800c546:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d102      	bne.n	800c554 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c54e:	2300      	movs	r3, #0
 800c550:	75fb      	strb	r3, [r7, #23]
 800c552:	e00a      	b.n	800c56a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2b02      	cmp	r3, #2
 800c558:	d002      	beq.n	800c560 <USB_GetDevSpeed+0x32>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b06      	cmp	r3, #6
 800c55e:	d102      	bne.n	800c566 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c560:	2302      	movs	r3, #2
 800c562:	75fb      	strb	r3, [r7, #23]
 800c564:	e001      	b.n	800c56a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c566:	230f      	movs	r3, #15
 800c568:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	371c      	adds	r7, #28
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	785b      	ldrb	r3, [r3, #1]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d13a      	bne.n	800c60a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c59a:	69da      	ldr	r2, [r3, #28]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f003 030f 	and.w	r3, r3, #15
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	68f9      	ldr	r1, [r7, #12]
 800c5ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d155      	bne.n	800c678 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	78db      	ldrb	r3, [r3, #3]
 800c5e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c5e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	059b      	lsls	r3, r3, #22
 800c5ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	0151      	lsls	r1, r2, #5
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	e036      	b.n	800c678 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c610:	69da      	ldr	r2, [r3, #28]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	f003 030f 	and.w	r3, r3, #15
 800c61a:	2101      	movs	r1, #1
 800c61c:	fa01 f303 	lsl.w	r3, r1, r3
 800c620:	041b      	lsls	r3, r3, #16
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c628:	4313      	orrs	r3, r2
 800c62a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d11a      	bne.n	800c678 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	015a      	lsls	r2, r3, #5
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4413      	add	r3, r2
 800c64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	78db      	ldrb	r3, [r3, #3]
 800c65c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c65e:	430b      	orrs	r3, r1
 800c660:	4313      	orrs	r3, r2
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	0151      	lsls	r1, r2, #5
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	440a      	add	r2, r1
 800c66a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c66e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c676:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3714      	adds	r7, #20
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
	...

0800c688 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	785b      	ldrb	r3, [r3, #1]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d161      	bne.n	800c768 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6ba:	d11f      	bne.n	800c6fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	015a      	lsls	r2, r3, #5
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	0151      	lsls	r1, r2, #5
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	440a      	add	r2, r1
 800c6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c6da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	015a      	lsls	r2, r3, #5
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	0151      	lsls	r1, r2, #5
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	440a      	add	r2, r1
 800c6f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	2101      	movs	r1, #1
 800c70e:	fa01 f303 	lsl.w	r3, r1, r3
 800c712:	b29b      	uxth	r3, r3
 800c714:	43db      	mvns	r3, r3
 800c716:	68f9      	ldr	r1, [r7, #12]
 800c718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c71c:	4013      	ands	r3, r2
 800c71e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c726:	69da      	ldr	r2, [r3, #28]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	f003 030f 	and.w	r3, r3, #15
 800c730:	2101      	movs	r1, #1
 800c732:	fa01 f303 	lsl.w	r3, r1, r3
 800c736:	b29b      	uxth	r3, r3
 800c738:	43db      	mvns	r3, r3
 800c73a:	68f9      	ldr	r1, [r7, #12]
 800c73c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c740:	4013      	ands	r3, r2
 800c742:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	015a      	lsls	r2, r3, #5
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	0159      	lsls	r1, r3, #5
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	440b      	add	r3, r1
 800c75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75e:	4619      	mov	r1, r3
 800c760:	4b35      	ldr	r3, [pc, #212]	; (800c838 <USB_DeactivateEndpoint+0x1b0>)
 800c762:	4013      	ands	r3, r2
 800c764:	600b      	str	r3, [r1, #0]
 800c766:	e060      	b.n	800c82a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	015a      	lsls	r2, r3, #5
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c77a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c77e:	d11f      	bne.n	800c7c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	0151      	lsls	r1, r2, #5
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	440a      	add	r2, r1
 800c796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c79a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c79e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	015a      	lsls	r2, r3, #5
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	0151      	lsls	r1, r2, #5
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	440a      	add	r2, r1
 800c7b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	f003 030f 	and.w	r3, r3, #15
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c7d6:	041b      	lsls	r3, r3, #16
 800c7d8:	43db      	mvns	r3, r3
 800c7da:	68f9      	ldr	r1, [r7, #12]
 800c7dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ea:	69da      	ldr	r2, [r3, #28]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	f003 030f 	and.w	r3, r3, #15
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c7fa:	041b      	lsls	r3, r3, #16
 800c7fc:	43db      	mvns	r3, r3
 800c7fe:	68f9      	ldr	r1, [r7, #12]
 800c800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c804:	4013      	ands	r3, r2
 800c806:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	0159      	lsls	r1, r3, #5
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	440b      	add	r3, r1
 800c81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c822:	4619      	mov	r1, r3
 800c824:	4b05      	ldr	r3, [pc, #20]	; (800c83c <USB_DeactivateEndpoint+0x1b4>)
 800c826:	4013      	ands	r3, r2
 800c828:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr
 800c838:	ec337800 	.word	0xec337800
 800c83c:	eff37800 	.word	0xeff37800

0800c840 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b08a      	sub	sp, #40	; 0x28
 800c844:	af02      	add	r7, sp, #8
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	4613      	mov	r3, r2
 800c84c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	f040 815c 	bne.w	800cb1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d132      	bne.n	800c8d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	015a      	lsls	r2, r3, #5
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	4413      	add	r3, r2
 800c872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	69ba      	ldr	r2, [r7, #24]
 800c87a:	0151      	lsls	r1, r2, #5
 800c87c:	69fa      	ldr	r2, [r7, #28]
 800c87e:	440a      	add	r2, r1
 800c880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c884:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c888:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c88c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	69ba      	ldr	r2, [r7, #24]
 800c89e:	0151      	lsls	r1, r2, #5
 800c8a0:	69fa      	ldr	r2, [r7, #28]
 800c8a2:	440a      	add	r2, r1
 800c8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	69ba      	ldr	r2, [r7, #24]
 800c8be:	0151      	lsls	r1, r2, #5
 800c8c0:	69fa      	ldr	r2, [r7, #28]
 800c8c2:	440a      	add	r2, r1
 800c8c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8c8:	0cdb      	lsrs	r3, r3, #19
 800c8ca:	04db      	lsls	r3, r3, #19
 800c8cc:	6113      	str	r3, [r2, #16]
 800c8ce:	e074      	b.n	800c9ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	015a      	lsls	r2, r3, #5
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	69ba      	ldr	r2, [r7, #24]
 800c8e0:	0151      	lsls	r1, r2, #5
 800c8e2:	69fa      	ldr	r2, [r7, #28]
 800c8e4:	440a      	add	r2, r1
 800c8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ea:	0cdb      	lsrs	r3, r3, #19
 800c8ec:	04db      	lsls	r3, r3, #19
 800c8ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	015a      	lsls	r2, r3, #5
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	69ba      	ldr	r2, [r7, #24]
 800c900:	0151      	lsls	r1, r2, #5
 800c902:	69fa      	ldr	r2, [r7, #28]
 800c904:	440a      	add	r2, r1
 800c906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c90a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c90e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c920:	691a      	ldr	r2, [r3, #16]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	6959      	ldr	r1, [r3, #20]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	440b      	add	r3, r1
 800c92c:	1e59      	subs	r1, r3, #1
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	fbb1 f3f3 	udiv	r3, r1, r3
 800c936:	04d9      	lsls	r1, r3, #19
 800c938:	4b9d      	ldr	r3, [pc, #628]	; (800cbb0 <USB_EPStartXfer+0x370>)
 800c93a:	400b      	ands	r3, r1
 800c93c:	69b9      	ldr	r1, [r7, #24]
 800c93e:	0148      	lsls	r0, r1, #5
 800c940:	69f9      	ldr	r1, [r7, #28]
 800c942:	4401      	add	r1, r0
 800c944:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c948:	4313      	orrs	r3, r2
 800c94a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c958:	691a      	ldr	r2, [r3, #16]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c962:	69b9      	ldr	r1, [r7, #24]
 800c964:	0148      	lsls	r0, r1, #5
 800c966:	69f9      	ldr	r1, [r7, #28]
 800c968:	4401      	add	r1, r0
 800c96a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c96e:	4313      	orrs	r3, r2
 800c970:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	78db      	ldrb	r3, [r3, #3]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d11f      	bne.n	800c9ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	015a      	lsls	r2, r3, #5
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	4413      	add	r3, r2
 800c982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	69ba      	ldr	r2, [r7, #24]
 800c98a:	0151      	lsls	r1, r2, #5
 800c98c:	69fa      	ldr	r2, [r7, #28]
 800c98e:	440a      	add	r2, r1
 800c990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c994:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c998:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	015a      	lsls	r2, r3, #5
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	69ba      	ldr	r2, [r7, #24]
 800c9aa:	0151      	lsls	r1, r2, #5
 800c9ac:	69fa      	ldr	r2, [r7, #28]
 800c9ae:	440a      	add	r2, r1
 800c9b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d14b      	bne.n	800ca58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d009      	beq.n	800c9dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	015a      	lsls	r2, r3, #5
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	78db      	ldrb	r3, [r3, #3]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d128      	bne.n	800ca36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d110      	bne.n	800ca16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	69ba      	ldr	r2, [r7, #24]
 800ca04:	0151      	lsls	r1, r2, #5
 800ca06:	69fa      	ldr	r2, [r7, #28]
 800ca08:	440a      	add	r2, r1
 800ca0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	e00f      	b.n	800ca36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	69ba      	ldr	r2, [r7, #24]
 800ca26:	0151      	lsls	r1, r2, #5
 800ca28:	69fa      	ldr	r2, [r7, #28]
 800ca2a:	440a      	add	r2, r1
 800ca2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	015a      	lsls	r2, r3, #5
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	69ba      	ldr	r2, [r7, #24]
 800ca46:	0151      	lsls	r1, r2, #5
 800ca48:	69fa      	ldr	r2, [r7, #28]
 800ca4a:	440a      	add	r2, r1
 800ca4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	e12f      	b.n	800ccb8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	015a      	lsls	r2, r3, #5
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	0151      	lsls	r1, r2, #5
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	440a      	add	r2, r1
 800ca6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	78db      	ldrb	r3, [r3, #3]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d015      	beq.n	800caac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	695b      	ldr	r3, [r3, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 8117 	beq.w	800ccb8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	f003 030f 	and.w	r3, r3, #15
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	fa01 f303 	lsl.w	r3, r1, r3
 800caa0:	69f9      	ldr	r1, [r7, #28]
 800caa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caa6:	4313      	orrs	r3, r2
 800caa8:	634b      	str	r3, [r1, #52]	; 0x34
 800caaa:	e105      	b.n	800ccb8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d110      	bne.n	800cade <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	0151      	lsls	r1, r2, #5
 800cace:	69fa      	ldr	r2, [r7, #28]
 800cad0:	440a      	add	r2, r1
 800cad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cad6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	e00f      	b.n	800cafe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	0151      	lsls	r1, r2, #5
 800caf0:	69fa      	ldr	r2, [r7, #28]
 800caf2:	440a      	add	r2, r1
 800caf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cafc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	68d9      	ldr	r1, [r3, #12]
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	781a      	ldrb	r2, [r3, #0]
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	b298      	uxth	r0, r3
 800cb0c:	79fb      	ldrb	r3, [r7, #7]
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	4603      	mov	r3, r0
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f000 fa2b 	bl	800cf6e <USB_WritePacket>
 800cb18:	e0ce      	b.n	800ccb8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	015a      	lsls	r2, r3, #5
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	4413      	add	r3, r2
 800cb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	69ba      	ldr	r2, [r7, #24]
 800cb2a:	0151      	lsls	r1, r2, #5
 800cb2c:	69fa      	ldr	r2, [r7, #28]
 800cb2e:	440a      	add	r2, r1
 800cb30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb34:	0cdb      	lsrs	r3, r3, #19
 800cb36:	04db      	lsls	r3, r3, #19
 800cb38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	015a      	lsls	r2, r3, #5
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	4413      	add	r3, r2
 800cb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	69ba      	ldr	r2, [r7, #24]
 800cb4a:	0151      	lsls	r1, r2, #5
 800cb4c:	69fa      	ldr	r2, [r7, #28]
 800cb4e:	440a      	add	r2, r1
 800cb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d126      	bne.n	800cbb4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	691a      	ldr	r2, [r3, #16]
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb7c:	69b9      	ldr	r1, [r7, #24]
 800cb7e:	0148      	lsls	r0, r1, #5
 800cb80:	69f9      	ldr	r1, [r7, #28]
 800cb82:	4401      	add	r1, r0
 800cb84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	0151      	lsls	r1, r2, #5
 800cb9e:	69fa      	ldr	r2, [r7, #28]
 800cba0:	440a      	add	r2, r1
 800cba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbaa:	6113      	str	r3, [r2, #16]
 800cbac:	e036      	b.n	800cc1c <USB_EPStartXfer+0x3dc>
 800cbae:	bf00      	nop
 800cbb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	695a      	ldr	r2, [r3, #20]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	1e5a      	subs	r2, r3, #1
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	015a      	lsls	r2, r3, #5
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd6:	691a      	ldr	r2, [r3, #16]
 800cbd8:	8afb      	ldrh	r3, [r7, #22]
 800cbda:	04d9      	lsls	r1, r3, #19
 800cbdc:	4b39      	ldr	r3, [pc, #228]	; (800ccc4 <USB_EPStartXfer+0x484>)
 800cbde:	400b      	ands	r3, r1
 800cbe0:	69b9      	ldr	r1, [r7, #24]
 800cbe2:	0148      	lsls	r0, r1, #5
 800cbe4:	69f9      	ldr	r1, [r7, #28]
 800cbe6:	4401      	add	r1, r0
 800cbe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cbec:	4313      	orrs	r3, r2
 800cbee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfc:	691a      	ldr	r2, [r3, #16]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	8af9      	ldrh	r1, [r7, #22]
 800cc04:	fb01 f303 	mul.w	r3, r1, r3
 800cc08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc0c:	69b9      	ldr	r1, [r7, #24]
 800cc0e:	0148      	lsls	r0, r1, #5
 800cc10:	69f9      	ldr	r1, [r7, #28]
 800cc12:	4401      	add	r1, r0
 800cc14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d10d      	bne.n	800cc3e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d009      	beq.n	800cc3e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	68d9      	ldr	r1, [r3, #12]
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	015a      	lsls	r2, r3, #5
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	4413      	add	r3, r2
 800cc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc3a:	460a      	mov	r2, r1
 800cc3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	78db      	ldrb	r3, [r3, #3]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d128      	bne.n	800cc98 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d110      	bne.n	800cc78 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	015a      	lsls	r2, r3, #5
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	69ba      	ldr	r2, [r7, #24]
 800cc66:	0151      	lsls	r1, r2, #5
 800cc68:	69fa      	ldr	r2, [r7, #28]
 800cc6a:	440a      	add	r2, r1
 800cc6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc74:	6013      	str	r3, [r2, #0]
 800cc76:	e00f      	b.n	800cc98 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	69fa      	ldr	r2, [r7, #28]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	0151      	lsls	r1, r2, #5
 800ccaa:	69fa      	ldr	r2, [r7, #28]
 800ccac:	440a      	add	r2, r1
 800ccae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3720      	adds	r7, #32
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	1ff80000 	.word	0x1ff80000

0800ccc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b087      	sub	sp, #28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	785b      	ldrb	r3, [r3, #1]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	f040 80cd 	bne.w	800ce84 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d132      	bne.n	800cd58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	015a      	lsls	r2, r3, #5
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	0151      	lsls	r1, r2, #5
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	440a      	add	r2, r1
 800cd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cd10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cd14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	015a      	lsls	r2, r3, #5
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	0151      	lsls	r1, r2, #5
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	440a      	add	r2, r1
 800cd2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	015a      	lsls	r2, r3, #5
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	0151      	lsls	r1, r2, #5
 800cd48:	697a      	ldr	r2, [r7, #20]
 800cd4a:	440a      	add	r2, r1
 800cd4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd50:	0cdb      	lsrs	r3, r3, #19
 800cd52:	04db      	lsls	r3, r3, #19
 800cd54:	6113      	str	r3, [r2, #16]
 800cd56:	e04e      	b.n	800cdf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	015a      	lsls	r2, r3, #5
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	4413      	add	r3, r2
 800cd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	0151      	lsls	r1, r2, #5
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	440a      	add	r2, r1
 800cd6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd72:	0cdb      	lsrs	r3, r3, #19
 800cd74:	04db      	lsls	r3, r3, #19
 800cd76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	0151      	lsls	r1, r2, #5
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	440a      	add	r2, r1
 800cd8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cd96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cd9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	695a      	ldr	r2, [r3, #20]
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d903      	bls.n	800cdb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	689a      	ldr	r2, [r3, #8]
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	0151      	lsls	r1, r2, #5
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	440a      	add	r2, r1
 800cdc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cddc:	691a      	ldr	r2, [r3, #16]
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cde6:	6939      	ldr	r1, [r7, #16]
 800cde8:	0148      	lsls	r0, r1, #5
 800cdea:	6979      	ldr	r1, [r7, #20]
 800cdec:	4401      	add	r1, r0
 800cdee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d11e      	bne.n	800ce3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d009      	beq.n	800ce18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce10:	461a      	mov	r2, r3
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	015a      	lsls	r2, r3, #5
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	0151      	lsls	r1, r2, #5
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	440a      	add	r2, r1
 800ce2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	e092      	b.n	800cf60 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	0151      	lsls	r1, r2, #5
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	440a      	add	r2, r1
 800ce50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d07e      	beq.n	800cf60 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	f003 030f 	and.w	r3, r3, #15
 800ce72:	2101      	movs	r1, #1
 800ce74:	fa01 f303 	lsl.w	r3, r1, r3
 800ce78:	6979      	ldr	r1, [r7, #20]
 800ce7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	634b      	str	r3, [r1, #52]	; 0x34
 800ce82:	e06d      	b.n	800cf60 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	015a      	lsls	r2, r3, #5
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce90:	691b      	ldr	r3, [r3, #16]
 800ce92:	693a      	ldr	r2, [r7, #16]
 800ce94:	0151      	lsls	r1, r2, #5
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	440a      	add	r2, r1
 800ce9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce9e:	0cdb      	lsrs	r3, r3, #19
 800cea0:	04db      	lsls	r3, r3, #19
 800cea2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	0151      	lsls	r1, r2, #5
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	440a      	add	r2, r1
 800ceba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cebe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cec2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cec6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	695b      	ldr	r3, [r3, #20]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	689a      	ldr	r2, [r3, #8]
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	015a      	lsls	r2, r3, #5
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	4413      	add	r3, r2
 800cee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	693a      	ldr	r2, [r7, #16]
 800cee8:	0151      	lsls	r1, r2, #5
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	440a      	add	r2, r1
 800ceee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cef6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	015a      	lsls	r2, r3, #5
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	4413      	add	r3, r2
 800cf00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf04:	691a      	ldr	r2, [r3, #16]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf0e:	6939      	ldr	r1, [r7, #16]
 800cf10:	0148      	lsls	r0, r1, #5
 800cf12:	6979      	ldr	r1, [r7, #20]
 800cf14:	4401      	add	r1, r0
 800cf16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cf1e:	79fb      	ldrb	r3, [r7, #7]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d10d      	bne.n	800cf40 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d009      	beq.n	800cf40 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	68d9      	ldr	r1, [r3, #12]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	015a      	lsls	r2, r3, #5
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3c:	460a      	mov	r2, r1
 800cf3e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	0151      	lsls	r1, r2, #5
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	440a      	add	r2, r1
 800cf56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b089      	sub	sp, #36	; 0x24
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	60b9      	str	r1, [r7, #8]
 800cf78:	4611      	mov	r1, r2
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	71fb      	strb	r3, [r7, #7]
 800cf80:	4613      	mov	r3, r2
 800cf82:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cf8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d11a      	bne.n	800cfca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf94:	88bb      	ldrh	r3, [r7, #4]
 800cf96:	3303      	adds	r3, #3
 800cf98:	089b      	lsrs	r3, r3, #2
 800cf9a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	61bb      	str	r3, [r7, #24]
 800cfa0:	e00f      	b.n	800cfc2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cfa2:	79fb      	ldrb	r3, [r7, #7]
 800cfa4:	031a      	lsls	r2, r3, #12
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfae:	461a      	mov	r2, r3
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	61bb      	str	r3, [r7, #24]
 800cfc2:	69ba      	ldr	r2, [r7, #24]
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d3eb      	bcc.n	800cfa2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3724      	adds	r7, #36	; 0x24
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b089      	sub	sp, #36	; 0x24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cfee:	88fb      	ldrh	r3, [r7, #6]
 800cff0:	3303      	adds	r3, #3
 800cff2:	089b      	lsrs	r3, r3, #2
 800cff4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cff6:	2300      	movs	r3, #0
 800cff8:	61bb      	str	r3, [r7, #24]
 800cffa:	e00b      	b.n	800d014 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	601a      	str	r2, [r3, #0]
    pDest++;
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	3304      	adds	r3, #4
 800d00c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	3301      	adds	r3, #1
 800d012:	61bb      	str	r3, [r7, #24]
 800d014:	69ba      	ldr	r2, [r7, #24]
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d3ef      	bcc.n	800cffc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d01c:	69fb      	ldr	r3, [r7, #28]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3724      	adds	r7, #36	; 0x24
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b085      	sub	sp, #20
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	785b      	ldrb	r3, [r3, #1]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d12c      	bne.n	800d0a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	015a      	lsls	r2, r3, #5
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	db12      	blt.n	800d07e <USB_EPSetStall+0x54>
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00f      	beq.n	800d07e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	0151      	lsls	r1, r2, #5
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	440a      	add	r2, r1
 800d074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d07c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	015a      	lsls	r2, r3, #5
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	4413      	add	r3, r2
 800d086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	0151      	lsls	r1, r2, #5
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	440a      	add	r2, r1
 800d094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	e02b      	b.n	800d0f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	015a      	lsls	r2, r3, #5
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	db12      	blt.n	800d0d8 <USB_EPSetStall+0xae>
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00f      	beq.n	800d0d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	015a      	lsls	r2, r3, #5
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4413      	add	r3, r2
 800d0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	0151      	lsls	r1, r2, #5
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	440a      	add	r2, r1
 800d0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	015a      	lsls	r2, r3, #5
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	0151      	lsls	r1, r2, #5
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	440a      	add	r2, r1
 800d0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d106:	b480      	push	{r7}
 800d108:	b085      	sub	sp, #20
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	785b      	ldrb	r3, [r3, #1]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d128      	bne.n	800d174 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	015a      	lsls	r2, r3, #5
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	4413      	add	r3, r2
 800d12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	0151      	lsls	r1, r2, #5
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	440a      	add	r2, r1
 800d138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d13c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d140:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	78db      	ldrb	r3, [r3, #3]
 800d146:	2b03      	cmp	r3, #3
 800d148:	d003      	beq.n	800d152 <USB_EPClearStall+0x4c>
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	78db      	ldrb	r3, [r3, #3]
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d138      	bne.n	800d1c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	0151      	lsls	r1, r2, #5
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	440a      	add	r2, r1
 800d168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d16c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	e027      	b.n	800d1c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	015a      	lsls	r2, r3, #5
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4413      	add	r3, r2
 800d17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	0151      	lsls	r1, r2, #5
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	440a      	add	r2, r1
 800d18a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d18e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d192:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	78db      	ldrb	r3, [r3, #3]
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d003      	beq.n	800d1a4 <USB_EPClearStall+0x9e>
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	78db      	ldrb	r3, [r3, #3]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d10f      	bne.n	800d1c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	0151      	lsls	r1, r2, #5
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	440a      	add	r2, r1
 800d1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d1d2:	b480      	push	{r7}
 800d1d4:	b085      	sub	sp, #20
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d1f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	78fb      	ldrb	r3, [r7, #3]
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d206:	68f9      	ldr	r1, [r7, #12]
 800d208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d20c:	4313      	orrs	r3, r2
 800d20e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d21e:	b480      	push	{r7}
 800d220:	b085      	sub	sp, #20
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d238:	f023 0303 	bic.w	r3, r3, #3
 800d23c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d24c:	f023 0302 	bic.w	r3, r3, #2
 800d250:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d27a:	f023 0303 	bic.w	r3, r3, #3
 800d27e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d28e:	f043 0302 	orr.w	r3, r3, #2
 800d292:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b085      	sub	sp, #20
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2da:	699b      	ldr	r3, [r3, #24]
 800d2dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2e4:	69db      	ldr	r3, [r3, #28]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	0c1b      	lsrs	r3, r3, #16
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d30e:	699b      	ldr	r3, [r3, #24]
 800d310:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d318:	69db      	ldr	r3, [r3, #28]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	4013      	ands	r3, r2
 800d31e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	b29b      	uxth	r3, r3
}
 800d324:	4618      	mov	r0, r3
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d340:	78fb      	ldrb	r3, [r7, #3]
 800d342:	015a      	lsls	r2, r3, #5
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	4413      	add	r3, r2
 800d348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	4013      	ands	r3, r2
 800d35c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d35e:	68bb      	ldr	r3, [r7, #8]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b087      	sub	sp, #28
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	f003 030f 	and.w	r3, r3, #15
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	fa22 f303 	lsr.w	r3, r2, r3
 800d39c:	01db      	lsls	r3, r3, #7
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d3a6:	78fb      	ldrb	r3, [r7, #3]
 800d3a8:	015a      	lsls	r2, r3, #5
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	4013      	ands	r3, r2
 800d3b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	371c      	adds	r7, #28
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	f003 0301 	and.w	r3, r3, #1
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d402:	f023 0307 	bic.w	r3, r3, #7
 800d406:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d41a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3714      	adds	r7, #20
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
	...

0800d42c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b087      	sub	sp, #28
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	460b      	mov	r3, r1
 800d436:	607a      	str	r2, [r7, #4]
 800d438:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	333c      	adds	r3, #60	; 0x3c
 800d442:	3304      	adds	r3, #4
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	4a26      	ldr	r2, [pc, #152]	; (800d4e4 <USB_EP0_OutStart+0xb8>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d90a      	bls.n	800d466 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d45c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d460:	d101      	bne.n	800d466 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	e037      	b.n	800d4d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d46c:	461a      	mov	r2, r3
 800d46e:	2300      	movs	r3, #0
 800d470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d494:	f043 0318 	orr.w	r3, r3, #24
 800d498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	697a      	ldr	r2, [r7, #20]
 800d4a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d4ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d4ae:	7afb      	ldrb	r3, [r7, #11]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d10f      	bne.n	800d4d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d4d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	371c      	adds	r7, #28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	4f54300a 	.word	0x4f54300a

0800d4e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	60fb      	str	r3, [r7, #12]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	4a13      	ldr	r2, [pc, #76]	; (800d54c <USB_CoreReset+0x64>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d901      	bls.n	800d506 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d502:	2303      	movs	r3, #3
 800d504:	e01b      	b.n	800d53e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	daf2      	bge.n	800d4f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d50e:	2300      	movs	r3, #0
 800d510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	f043 0201 	orr.w	r2, r3, #1
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3301      	adds	r3, #1
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	4a09      	ldr	r2, [pc, #36]	; (800d54c <USB_CoreReset+0x64>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d901      	bls.n	800d530 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e006      	b.n	800d53e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d0f0      	beq.n	800d51e <USB_CoreReset+0x36>

  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	00030d40 	.word	0x00030d40

0800d550 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d554:	4904      	ldr	r1, [pc, #16]	; (800d568 <MX_FATFS_Init+0x18>)
 800d556:	4805      	ldr	r0, [pc, #20]	; (800d56c <MX_FATFS_Init+0x1c>)
 800d558:	f002 f9c0 	bl	800f8dc <FATFS_LinkDriver>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461a      	mov	r2, r3
 800d560:	4b03      	ldr	r3, [pc, #12]	; (800d570 <MX_FATFS_Init+0x20>)
 800d562:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d564:	bf00      	nop
 800d566:	bd80      	pop	{r7, pc}
 800d568:	20004a80 	.word	0x20004a80
 800d56c:	2000028c 	.word	0x2000028c
 800d570:	20004a84 	.word	0x20004a84

0800d574 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	4603      	mov	r3, r0
 800d57c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800d57e:	79fb      	ldrb	r3, [r7, #7]
 800d580:	4618      	mov	r0, r3
 800d582:	f000 f9d7 	bl	800d934 <USER_SPI_initialize>
 800d586:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	4603      	mov	r3, r0
 800d598:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800d59a:	79fb      	ldrb	r3, [r7, #7]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f000 fab3 	bl	800db08 <USER_SPI_status>
 800d5a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60b9      	str	r1, [r7, #8]
 800d5b4:	607a      	str	r2, [r7, #4]
 800d5b6:	603b      	str	r3, [r7, #0]
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800d5bc:	7bf8      	ldrb	r0, [r7, #15]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	f000 fab6 	bl	800db34 <USER_SPI_read>
 800d5c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
 800d5dc:	603b      	str	r3, [r7, #0]
 800d5de:	4603      	mov	r3, r0
 800d5e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800d5e2:	7bf8      	ldrb	r0, [r7, #15]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	68b9      	ldr	r1, [r7, #8]
 800d5ea:	f000 fb09 	bl	800dc00 <USER_SPI_write>
 800d5ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	603a      	str	r2, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
 800d604:	460b      	mov	r3, r1
 800d606:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800d608:	79b9      	ldrb	r1, [r7, #6]
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 fb72 	bl	800dcf8 <USER_SPI_ioctl>
 800d614:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d616:	4618      	mov	r0, r3
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
	...

0800d620 <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d628:	f7f8 f97c 	bl	8005924 <HAL_GetTick>
 800d62c:	4602      	mov	r2, r0
 800d62e:	4b04      	ldr	r3, [pc, #16]	; (800d640 <SPI_Timer_On+0x20>)
 800d630:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800d632:	4a04      	ldr	r2, [pc, #16]	; (800d644 <SPI_Timer_On+0x24>)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6013      	str	r3, [r2, #0]
}
 800d638:	bf00      	nop
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	20004eec 	.word	0x20004eec
 800d644:	20004ef0 	.word	0x20004ef0

0800d648 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d648:	b580      	push	{r7, lr}
 800d64a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d64c:	f7f8 f96a 	bl	8005924 <HAL_GetTick>
 800d650:	4602      	mov	r2, r0
 800d652:	4b06      	ldr	r3, [pc, #24]	; (800d66c <SPI_Timer_Status+0x24>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	1ad2      	subs	r2, r2, r3
 800d658:	4b05      	ldr	r3, [pc, #20]	; (800d670 <SPI_Timer_Status+0x28>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	bf34      	ite	cc
 800d660:	2301      	movcc	r3, #1
 800d662:	2300      	movcs	r3, #0
 800d664:	b2db      	uxtb	r3, r3
}
 800d666:	4618      	mov	r0, r3
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	20004eec 	.word	0x20004eec
 800d670:	20004ef0 	.word	0x20004ef0

0800d674 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b086      	sub	sp, #24
 800d678:	af02      	add	r7, sp, #8
 800d67a:	4603      	mov	r3, r0
 800d67c:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800d67e:	f107 020f 	add.w	r2, r7, #15
 800d682:	1df9      	adds	r1, r7, #7
 800d684:	2332      	movs	r3, #50	; 0x32
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	2301      	movs	r3, #1
 800d68a:	4804      	ldr	r0, [pc, #16]	; (800d69c <xchg_spi+0x28>)
 800d68c:	f7fd f851 	bl	800a732 <HAL_SPI_TransmitReceive>
    return rxDat;
 800d690:	7bfb      	ldrb	r3, [r7, #15]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	2000493c 	.word	0x2000493c

0800d6a0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800d6a0:	b590      	push	{r4, r7, lr}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	e00a      	b.n	800d6c6 <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	18d4      	adds	r4, r2, r3
 800d6b6:	20ff      	movs	r0, #255	; 0xff
 800d6b8:	f7ff ffdc 	bl	800d674 <xchg_spi>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	60fb      	str	r3, [r7, #12]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d3f0      	bcc.n	800d6b0 <rcvr_spi_multi+0x10>
    }
}
 800d6ce:	bf00      	nop
 800d6d0:	3714      	adds	r7, #20
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd90      	pop	{r4, r7, pc}

0800d6d6 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b084      	sub	sp, #16
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	60fb      	str	r3, [r7, #12]
 800d6e4:	e009      	b.n	800d6fa <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7ff ffc0 	bl	800d674 <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	60fb      	str	r3, [r7, #12]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d3f1      	bcc.n	800d6e6 <xmit_spi_multi+0x10>
    }
}
 800d702:	bf00      	nop
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b086      	sub	sp, #24
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800d712:	f7f8 f907 	bl	8005924 <HAL_GetTick>
 800d716:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800d71c:	20ff      	movs	r0, #255	; 0xff
 800d71e:	f7ff ffa9 	bl	800d674 <xchg_spi>
 800d722:	4603      	mov	r3, r0
 800d724:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800d726:	7bfb      	ldrb	r3, [r7, #15]
 800d728:	2bff      	cmp	r3, #255	; 0xff
 800d72a:	d007      	beq.n	800d73c <wait_ready+0x32>
 800d72c:	f7f8 f8fa 	bl	8005924 <HAL_GetTick>
 800d730:	4602      	mov	r2, r0
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d8ef      	bhi.n	800d71c <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	2bff      	cmp	r3, #255	; 0xff
 800d740:	bf0c      	ite	eq
 800d742:	2301      	moveq	r3, #1
 800d744:	2300      	movne	r3, #0
 800d746:	b2db      	uxtb	r3, r3
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800d754:	2201      	movs	r2, #1
 800d756:	2110      	movs	r1, #16
 800d758:	4803      	ldr	r0, [pc, #12]	; (800d768 <despiselect+0x18>)
 800d75a:	f7f9 fad5 	bl	8006d08 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800d75e:	20ff      	movs	r0, #255	; 0xff
 800d760:	f7ff ff88 	bl	800d674 <xchg_spi>

}
 800d764:	bf00      	nop
 800d766:	bd80      	pop	{r7, pc}
 800d768:	40020800 	.word	0x40020800

0800d76c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800d770:	2200      	movs	r2, #0
 800d772:	2110      	movs	r1, #16
 800d774:	4809      	ldr	r0, [pc, #36]	; (800d79c <spiselect+0x30>)
 800d776:	f7f9 fac7 	bl	8006d08 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800d77a:	20ff      	movs	r0, #255	; 0xff
 800d77c:	f7ff ff7a 	bl	800d674 <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800d780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d784:	f7ff ffc1 	bl	800d70a <wait_ready>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <spiselect+0x26>
 800d78e:	2301      	movs	r3, #1
 800d790:	e002      	b.n	800d798 <spiselect+0x2c>

    despiselect();
 800d792:	f7ff ffdd 	bl	800d750 <despiselect>
    return 0;   /* Timeout */
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	40020800 	.word	0x40020800

0800d7a0 <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800d7aa:	20c8      	movs	r0, #200	; 0xc8
 800d7ac:	f7ff ff38 	bl	800d620 <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800d7b0:	20ff      	movs	r0, #255	; 0xff
 800d7b2:	f7ff ff5f 	bl	800d674 <xchg_spi>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
 800d7bc:	2bff      	cmp	r3, #255	; 0xff
 800d7be:	d104      	bne.n	800d7ca <rcvr_datablock+0x2a>
 800d7c0:	f7ff ff42 	bl	800d648 <SPI_Timer_Status>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1f2      	bne.n	800d7b0 <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	2bfe      	cmp	r3, #254	; 0xfe
 800d7ce:	d001      	beq.n	800d7d4 <rcvr_datablock+0x34>
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e00a      	b.n	800d7ea <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800d7d4:	6839      	ldr	r1, [r7, #0]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff ff62 	bl	800d6a0 <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800d7dc:	20ff      	movs	r0, #255	; 0xff
 800d7de:	f7ff ff49 	bl	800d674 <xchg_spi>
 800d7e2:	20ff      	movs	r0, #255	; 0xff
 800d7e4:	f7ff ff46 	bl	800d674 <xchg_spi>

    return 1;                       /* Function succeeded */
 800d7e8:	2301      	movs	r3, #1
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800d7fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d802:	f7ff ff82 	bl	800d70a <wait_ready>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d101      	bne.n	800d810 <xmit_datablock+0x1e>
 800d80c:	2300      	movs	r3, #0
 800d80e:	e01e      	b.n	800d84e <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800d810:	78fb      	ldrb	r3, [r7, #3]
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff ff2e 	bl	800d674 <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800d818:	78fb      	ldrb	r3, [r7, #3]
 800d81a:	2bfd      	cmp	r3, #253	; 0xfd
 800d81c:	d016      	beq.n	800d84c <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800d81e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff ff57 	bl	800d6d6 <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800d828:	20ff      	movs	r0, #255	; 0xff
 800d82a:	f7ff ff23 	bl	800d674 <xchg_spi>
 800d82e:	20ff      	movs	r0, #255	; 0xff
 800d830:	f7ff ff20 	bl	800d674 <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800d834:	20ff      	movs	r0, #255	; 0xff
 800d836:	f7ff ff1d 	bl	800d674 <xchg_spi>
 800d83a:	4603      	mov	r3, r0
 800d83c:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	f003 031f 	and.w	r3, r3, #31
 800d844:	2b05      	cmp	r3, #5
 800d846:	d001      	beq.n	800d84c <xmit_datablock+0x5a>
 800d848:	2300      	movs	r3, #0
 800d84a:	e000      	b.n	800d84e <xmit_datablock+0x5c>
    }
    return 1;
 800d84c:	2301      	movs	r3, #1
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	4603      	mov	r3, r0
 800d85e:	6039      	str	r1, [r7, #0]
 800d860:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800d862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d866:	2b00      	cmp	r3, #0
 800d868:	da0e      	bge.n	800d888 <send_cmd+0x32>
        cmd &= 0x7F;
 800d86a:	79fb      	ldrb	r3, [r7, #7]
 800d86c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d870:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800d872:	2100      	movs	r1, #0
 800d874:	2037      	movs	r0, #55	; 0x37
 800d876:	f7ff ffee 	bl	800d856 <send_cmd>
 800d87a:	4603      	mov	r3, r0
 800d87c:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d901      	bls.n	800d888 <send_cmd+0x32>
 800d884:	7bbb      	ldrb	r3, [r7, #14]
 800d886:	e051      	b.n	800d92c <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800d888:	79fb      	ldrb	r3, [r7, #7]
 800d88a:	2b0c      	cmp	r3, #12
 800d88c:	d008      	beq.n	800d8a0 <send_cmd+0x4a>
        despiselect();
 800d88e:	f7ff ff5f 	bl	800d750 <despiselect>
        if (!spiselect()) return 0xFF;
 800d892:	f7ff ff6b 	bl	800d76c <spiselect>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <send_cmd+0x4a>
 800d89c:	23ff      	movs	r3, #255	; 0xff
 800d89e:	e045      	b.n	800d92c <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff fee3 	bl	800d674 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	0e1b      	lsrs	r3, r3, #24
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff fedd 	bl	800d674 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	0c1b      	lsrs	r3, r3, #16
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7ff fed7 	bl	800d674 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	0a1b      	lsrs	r3, r3, #8
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7ff fed1 	bl	800d674 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fecc 	bl	800d674 <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800d8dc:	2301      	movs	r3, #1
 800d8de:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <send_cmd+0x94>
 800d8e6:	2395      	movs	r3, #149	; 0x95
 800d8e8:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800d8ea:	79fb      	ldrb	r3, [r7, #7]
 800d8ec:	2b08      	cmp	r3, #8
 800d8ee:	d101      	bne.n	800d8f4 <send_cmd+0x9e>
 800d8f0:	2387      	movs	r3, #135	; 0x87
 800d8f2:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff febc 	bl	800d674 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800d8fc:	79fb      	ldrb	r3, [r7, #7]
 800d8fe:	2b0c      	cmp	r3, #12
 800d900:	d102      	bne.n	800d908 <send_cmd+0xb2>
 800d902:	20ff      	movs	r0, #255	; 0xff
 800d904:	f7ff feb6 	bl	800d674 <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800d908:	230a      	movs	r3, #10
 800d90a:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800d90c:	20ff      	movs	r0, #255	; 0xff
 800d90e:	f7ff feb1 	bl	800d674 <xchg_spi>
 800d912:	4603      	mov	r3, r0
 800d914:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800d916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	da05      	bge.n	800d92a <send_cmd+0xd4>
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
 800d920:	3b01      	subs	r3, #1
 800d922:	73fb      	strb	r3, [r7, #15]
 800d924:	7bfb      	ldrb	r3, [r7, #15]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1f0      	bne.n	800d90c <send_cmd+0xb6>

    return res;                         /* Return received response */
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	4603      	mov	r3, r0
 800d93c:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800d93e:	79fb      	ldrb	r3, [r7, #7]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d001      	beq.n	800d948 <USER_SPI_initialize+0x14>
 800d944:	2301      	movs	r3, #1
 800d946:	e0d4      	b.n	800daf2 <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800d948:	4b6c      	ldr	r3, [pc, #432]	; (800dafc <USER_SPI_initialize+0x1c8>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	f003 0302 	and.w	r3, r3, #2
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <USER_SPI_initialize+0x2a>
 800d956:	4b69      	ldr	r3, [pc, #420]	; (800dafc <USER_SPI_initialize+0x1c8>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	e0c9      	b.n	800daf2 <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800d95e:	4b68      	ldr	r3, [pc, #416]	; (800db00 <USER_SPI_initialize+0x1cc>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	4b66      	ldr	r3, [pc, #408]	; (800db00 <USER_SPI_initialize+0x1cc>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800d96c:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800d96e:	230a      	movs	r3, #10
 800d970:	73fb      	strb	r3, [r7, #15]
 800d972:	e005      	b.n	800d980 <USER_SPI_initialize+0x4c>
 800d974:	20ff      	movs	r0, #255	; 0xff
 800d976:	f7ff fe7d 	bl	800d674 <xchg_spi>
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	3b01      	subs	r3, #1
 800d97e:	73fb      	strb	r3, [r7, #15]
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1f6      	bne.n	800d974 <USER_SPI_initialize+0x40>

    ty = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800d98a:	2100      	movs	r1, #0
 800d98c:	2000      	movs	r0, #0
 800d98e:	f7ff ff62 	bl	800d856 <send_cmd>
 800d992:	4603      	mov	r3, r0
 800d994:	2b01      	cmp	r3, #1
 800d996:	f040 808b 	bne.w	800dab0 <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800d99a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d99e:	f7ff fe3f 	bl	800d620 <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800d9a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9a6:	2008      	movs	r0, #8
 800d9a8:	f7ff ff55 	bl	800d856 <send_cmd>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d151      	bne.n	800da56 <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	73fb      	strb	r3, [r7, #15]
 800d9b6:	e00d      	b.n	800d9d4 <USER_SPI_initialize+0xa0>
 800d9b8:	7bfc      	ldrb	r4, [r7, #15]
 800d9ba:	20ff      	movs	r0, #255	; 0xff
 800d9bc:	f7ff fe5a 	bl	800d674 <xchg_spi>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f107 0310 	add.w	r3, r7, #16
 800d9c8:	4423      	add	r3, r4
 800d9ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d9ce:	7bfb      	ldrb	r3, [r7, #15]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	73fb      	strb	r3, [r7, #15]
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d9ee      	bls.n	800d9b8 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800d9da:	7abb      	ldrb	r3, [r7, #10]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d167      	bne.n	800dab0 <USER_SPI_initialize+0x17c>
 800d9e0:	7afb      	ldrb	r3, [r7, #11]
 800d9e2:	2baa      	cmp	r3, #170	; 0xaa
 800d9e4:	d164      	bne.n	800dab0 <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800d9e6:	bf00      	nop
 800d9e8:	f7ff fe2e 	bl	800d648 <SPI_Timer_Status>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d007      	beq.n	800da02 <USER_SPI_initialize+0xce>
 800d9f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d9f6:	20a9      	movs	r0, #169	; 0xa9
 800d9f8:	f7ff ff2d 	bl	800d856 <send_cmd>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1f2      	bne.n	800d9e8 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800da02:	f7ff fe21 	bl	800d648 <SPI_Timer_Status>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d051      	beq.n	800dab0 <USER_SPI_initialize+0x17c>
 800da0c:	2100      	movs	r1, #0
 800da0e:	203a      	movs	r0, #58	; 0x3a
 800da10:	f7ff ff21 	bl	800d856 <send_cmd>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d14a      	bne.n	800dab0 <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800da1a:	2300      	movs	r3, #0
 800da1c:	73fb      	strb	r3, [r7, #15]
 800da1e:	e00d      	b.n	800da3c <USER_SPI_initialize+0x108>
 800da20:	7bfc      	ldrb	r4, [r7, #15]
 800da22:	20ff      	movs	r0, #255	; 0xff
 800da24:	f7ff fe26 	bl	800d674 <xchg_spi>
 800da28:	4603      	mov	r3, r0
 800da2a:	461a      	mov	r2, r3
 800da2c:	f107 0310 	add.w	r3, r7, #16
 800da30:	4423      	add	r3, r4
 800da32:	f803 2c08 	strb.w	r2, [r3, #-8]
 800da36:	7bfb      	ldrb	r3, [r7, #15]
 800da38:	3301      	adds	r3, #1
 800da3a:	73fb      	strb	r3, [r7, #15]
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	2b03      	cmp	r3, #3
 800da40:	d9ee      	bls.n	800da20 <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800da42:	7a3b      	ldrb	r3, [r7, #8]
 800da44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d001      	beq.n	800da50 <USER_SPI_initialize+0x11c>
 800da4c:	230c      	movs	r3, #12
 800da4e:	e000      	b.n	800da52 <USER_SPI_initialize+0x11e>
 800da50:	2304      	movs	r3, #4
 800da52:	737b      	strb	r3, [r7, #13]
 800da54:	e02c      	b.n	800dab0 <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800da56:	2100      	movs	r1, #0
 800da58:	20a9      	movs	r0, #169	; 0xa9
 800da5a:	f7ff fefc 	bl	800d856 <send_cmd>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b01      	cmp	r3, #1
 800da62:	d804      	bhi.n	800da6e <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800da64:	2302      	movs	r3, #2
 800da66:	737b      	strb	r3, [r7, #13]
 800da68:	23a9      	movs	r3, #169	; 0xa9
 800da6a:	73bb      	strb	r3, [r7, #14]
 800da6c:	e003      	b.n	800da76 <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800da6e:	2301      	movs	r3, #1
 800da70:	737b      	strb	r3, [r7, #13]
 800da72:	2301      	movs	r3, #1
 800da74:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800da76:	bf00      	nop
 800da78:	f7ff fde6 	bl	800d648 <SPI_Timer_Status>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d007      	beq.n	800da92 <USER_SPI_initialize+0x15e>
 800da82:	7bbb      	ldrb	r3, [r7, #14]
 800da84:	2100      	movs	r1, #0
 800da86:	4618      	mov	r0, r3
 800da88:	f7ff fee5 	bl	800d856 <send_cmd>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1f2      	bne.n	800da78 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800da92:	f7ff fdd9 	bl	800d648 <SPI_Timer_Status>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d007      	beq.n	800daac <USER_SPI_initialize+0x178>
 800da9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800daa0:	2010      	movs	r0, #16
 800daa2:	f7ff fed8 	bl	800d856 <send_cmd>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d001      	beq.n	800dab0 <USER_SPI_initialize+0x17c>
                ty = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800dab0:	4a14      	ldr	r2, [pc, #80]	; (800db04 <USER_SPI_initialize+0x1d0>)
 800dab2:	7b7b      	ldrb	r3, [r7, #13]
 800dab4:	7013      	strb	r3, [r2, #0]
    despiselect();
 800dab6:	f7ff fe4b 	bl	800d750 <despiselect>

    if (ty) {           /* OK */
 800daba:	7b7b      	ldrb	r3, [r7, #13]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d012      	beq.n	800dae6 <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800dac0:	4b0f      	ldr	r3, [pc, #60]	; (800db00 <USER_SPI_initialize+0x1cc>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800daca:	4b0d      	ldr	r3, [pc, #52]	; (800db00 <USER_SPI_initialize+0x1cc>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f042 0220 	orr.w	r2, r2, #32
 800dad2:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800dad4:	4b09      	ldr	r3, [pc, #36]	; (800dafc <USER_SPI_initialize+0x1c8>)
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f023 0301 	bic.w	r3, r3, #1
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	4b06      	ldr	r3, [pc, #24]	; (800dafc <USER_SPI_initialize+0x1c8>)
 800dae2:	701a      	strb	r2, [r3, #0]
 800dae4:	e002      	b.n	800daec <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800dae6:	4b05      	ldr	r3, [pc, #20]	; (800dafc <USER_SPI_initialize+0x1c8>)
 800dae8:	2201      	movs	r2, #1
 800daea:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800daec:	4b03      	ldr	r3, [pc, #12]	; (800dafc <USER_SPI_initialize+0x1c8>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	b2db      	uxtb	r3, r3
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd90      	pop	{r4, r7, pc}
 800dafa:	bf00      	nop
 800dafc:	200002a0 	.word	0x200002a0
 800db00:	2000493c 	.word	0x2000493c
 800db04:	20000884 	.word	0x20000884

0800db08 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	4603      	mov	r3, r0
 800db10:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <USER_SPI_status+0x14>
 800db18:	2301      	movs	r3, #1
 800db1a:	e002      	b.n	800db22 <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800db1c:	4b04      	ldr	r3, [pc, #16]	; (800db30 <USER_SPI_status+0x28>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	b2db      	uxtb	r3, r3
}
 800db22:	4618      	mov	r0, r3
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	200002a0 	.word	0x200002a0

0800db34 <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60b9      	str	r1, [r7, #8]
 800db3c:	607a      	str	r2, [r7, #4]
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	4603      	mov	r3, r0
 800db42:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800db44:	7bfb      	ldrb	r3, [r7, #15]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d102      	bne.n	800db50 <USER_SPI_read+0x1c>
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d101      	bne.n	800db54 <USER_SPI_read+0x20>
 800db50:	2304      	movs	r3, #4
 800db52:	e04d      	b.n	800dbf0 <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800db54:	4b28      	ldr	r3, [pc, #160]	; (800dbf8 <USER_SPI_read+0xc4>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <USER_SPI_read+0x32>
 800db62:	2303      	movs	r3, #3
 800db64:	e044      	b.n	800dbf0 <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800db66:	4b25      	ldr	r3, [pc, #148]	; (800dbfc <USER_SPI_read+0xc8>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	f003 0308 	and.w	r3, r3, #8
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <USER_SPI_read+0x44>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	025b      	lsls	r3, r3, #9
 800db76:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d111      	bne.n	800dba2 <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800db7e:	6879      	ldr	r1, [r7, #4]
 800db80:	2011      	movs	r0, #17
 800db82:	f7ff fe68 	bl	800d856 <send_cmd>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d129      	bne.n	800dbe0 <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800db8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db90:	68b8      	ldr	r0, [r7, #8]
 800db92:	f7ff fe05 	bl	800d7a0 <rcvr_datablock>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d021      	beq.n	800dbe0 <USER_SPI_read+0xac>
            count = 0;
 800db9c:	2300      	movs	r3, #0
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	e01e      	b.n	800dbe0 <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800dba2:	6879      	ldr	r1, [r7, #4]
 800dba4:	2012      	movs	r0, #18
 800dba6:	f7ff fe56 	bl	800d856 <send_cmd>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d117      	bne.n	800dbe0 <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800dbb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbb4:	68b8      	ldr	r0, [r7, #8]
 800dbb6:	f7ff fdf3 	bl	800d7a0 <rcvr_datablock>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00a      	beq.n	800dbd6 <USER_SPI_read+0xa2>
                buff += 512;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dbc6:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	603b      	str	r3, [r7, #0]
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1ed      	bne.n	800dbb0 <USER_SPI_read+0x7c>
 800dbd4:	e000      	b.n	800dbd8 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800dbd6:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800dbd8:	2100      	movs	r1, #0
 800dbda:	200c      	movs	r0, #12
 800dbdc:	f7ff fe3b 	bl	800d856 <send_cmd>
        }
    }
    despiselect();
 800dbe0:	f7ff fdb6 	bl	800d750 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bf14      	ite	ne
 800dbea:	2301      	movne	r3, #1
 800dbec:	2300      	moveq	r3, #0
 800dbee:	b2db      	uxtb	r3, r3
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	200002a0 	.word	0x200002a0
 800dbfc:	20000884 	.word	0x20000884

0800dc00 <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60b9      	str	r1, [r7, #8]
 800dc08:	607a      	str	r2, [r7, #4]
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d102      	bne.n	800dc1c <USER_SPI_write+0x1c>
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d101      	bne.n	800dc20 <USER_SPI_write+0x20>
 800dc1c:	2304      	movs	r3, #4
 800dc1e:	e063      	b.n	800dce8 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800dc20:	4b33      	ldr	r3, [pc, #204]	; (800dcf0 <USER_SPI_write+0xf0>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	f003 0301 	and.w	r3, r3, #1
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <USER_SPI_write+0x32>
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e05a      	b.n	800dce8 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800dc32:	4b2f      	ldr	r3, [pc, #188]	; (800dcf0 <USER_SPI_write+0xf0>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f003 0304 	and.w	r3, r3, #4
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <USER_SPI_write+0x44>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e051      	b.n	800dce8 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800dc44:	4b2b      	ldr	r3, [pc, #172]	; (800dcf4 <USER_SPI_write+0xf4>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	f003 0308 	and.w	r3, r3, #8
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d102      	bne.n	800dc56 <USER_SPI_write+0x56>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	025b      	lsls	r3, r3, #9
 800dc54:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d110      	bne.n	800dc7e <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	2018      	movs	r0, #24
 800dc60:	f7ff fdf9 	bl	800d856 <send_cmd>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d136      	bne.n	800dcd8 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800dc6a:	21fe      	movs	r1, #254	; 0xfe
 800dc6c:	68b8      	ldr	r0, [r7, #8]
 800dc6e:	f7ff fdc0 	bl	800d7f2 <xmit_datablock>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d02f      	beq.n	800dcd8 <USER_SPI_write+0xd8>
            count = 0;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	603b      	str	r3, [r7, #0]
 800dc7c:	e02c      	b.n	800dcd8 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800dc7e:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <USER_SPI_write+0xf4>)
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	f003 0306 	and.w	r3, r3, #6
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <USER_SPI_write+0x92>
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	2097      	movs	r0, #151	; 0x97
 800dc8e:	f7ff fde2 	bl	800d856 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	2019      	movs	r0, #25
 800dc96:	f7ff fdde 	bl	800d856 <send_cmd>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d11b      	bne.n	800dcd8 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800dca0:	21fc      	movs	r1, #252	; 0xfc
 800dca2:	68b8      	ldr	r0, [r7, #8]
 800dca4:	f7ff fda5 	bl	800d7f2 <xmit_datablock>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00a      	beq.n	800dcc4 <USER_SPI_write+0xc4>
                buff += 512;
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dcb4:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	603b      	str	r3, [r7, #0]
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1ee      	bne.n	800dca0 <USER_SPI_write+0xa0>
 800dcc2:	e000      	b.n	800dcc6 <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800dcc4:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800dcc6:	21fd      	movs	r1, #253	; 0xfd
 800dcc8:	2000      	movs	r0, #0
 800dcca:	f7ff fd92 	bl	800d7f2 <xmit_datablock>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d101      	bne.n	800dcd8 <USER_SPI_write+0xd8>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800dcd8:	f7ff fd3a 	bl	800d750 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bf14      	ite	ne
 800dce2:	2301      	movne	r3, #1
 800dce4:	2300      	moveq	r3, #0
 800dce6:	b2db      	uxtb	r3, r3
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	200002a0 	.word	0x200002a0
 800dcf4:	20000884 	.word	0x20000884

0800dcf8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08c      	sub	sp, #48	; 0x30
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	603a      	str	r2, [r7, #0]
 800dd02:	71fb      	strb	r3, [r7, #7]
 800dd04:	460b      	mov	r3, r1
 800dd06:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <USER_SPI_ioctl+0x1a>
 800dd0e:	2304      	movs	r3, #4
 800dd10:	e15a      	b.n	800dfc8 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800dd12:	4baf      	ldr	r3, [pc, #700]	; (800dfd0 <USER_SPI_ioctl+0x2d8>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	f003 0301 	and.w	r3, r3, #1
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <USER_SPI_ioctl+0x2c>
 800dd20:	2303      	movs	r3, #3
 800dd22:	e151      	b.n	800dfc8 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800dd2a:	79bb      	ldrb	r3, [r7, #6]
 800dd2c:	2b04      	cmp	r3, #4
 800dd2e:	f200 8136 	bhi.w	800df9e <USER_SPI_ioctl+0x2a6>
 800dd32:	a201      	add	r2, pc, #4	; (adr r2, 800dd38 <USER_SPI_ioctl+0x40>)
 800dd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd38:	0800dd4d 	.word	0x0800dd4d
 800dd3c:	0800dd61 	.word	0x0800dd61
 800dd40:	0800df9f 	.word	0x0800df9f
 800dd44:	0800de0d 	.word	0x0800de0d
 800dd48:	0800df03 	.word	0x0800df03
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800dd4c:	f7ff fd0e 	bl	800d76c <spiselect>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 8127 	beq.w	800dfa6 <USER_SPI_ioctl+0x2ae>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800dd5e:	e122      	b.n	800dfa6 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800dd60:	2100      	movs	r1, #0
 800dd62:	2009      	movs	r0, #9
 800dd64:	f7ff fd77 	bl	800d856 <send_cmd>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f040 811d 	bne.w	800dfaa <USER_SPI_ioctl+0x2b2>
 800dd70:	f107 030c 	add.w	r3, r7, #12
 800dd74:	2110      	movs	r1, #16
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff fd12 	bl	800d7a0 <rcvr_datablock>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	f000 8113 	beq.w	800dfaa <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800dd84:	7b3b      	ldrb	r3, [r7, #12]
 800dd86:	099b      	lsrs	r3, r3, #6
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d111      	bne.n	800ddb2 <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800dd8e:	7d7b      	ldrb	r3, [r7, #21]
 800dd90:	461a      	mov	r2, r3
 800dd92:	7d3b      	ldrb	r3, [r7, #20]
 800dd94:	021b      	lsls	r3, r3, #8
 800dd96:	4413      	add	r3, r2
 800dd98:	461a      	mov	r2, r3
 800dd9a:	7cfb      	ldrb	r3, [r7, #19]
 800dd9c:	041b      	lsls	r3, r3, #16
 800dd9e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800dda2:	4413      	add	r3, r2
 800dda4:	3301      	adds	r3, #1
 800dda6:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	029a      	lsls	r2, r3, #10
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	e028      	b.n	800de04 <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ddb2:	7c7b      	ldrb	r3, [r7, #17]
 800ddb4:	f003 030f 	and.w	r3, r3, #15
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	7dbb      	ldrb	r3, [r7, #22]
 800ddbc:	09db      	lsrs	r3, r3, #7
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	4413      	add	r3, r2
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	7d7b      	ldrb	r3, [r7, #21]
 800ddc6:	005b      	lsls	r3, r3, #1
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	f003 0306 	and.w	r3, r3, #6
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	4413      	add	r3, r2
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	3302      	adds	r3, #2
 800ddd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ddda:	7d3b      	ldrb	r3, [r7, #20]
 800dddc:	099b      	lsrs	r3, r3, #6
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	461a      	mov	r2, r3
 800dde2:	7cfb      	ldrb	r3, [r7, #19]
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	441a      	add	r2, r3
 800dde8:	7cbb      	ldrb	r3, [r7, #18]
 800ddea:	029b      	lsls	r3, r3, #10
 800ddec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ddf0:	4413      	add	r3, r2
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800ddf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ddfa:	3b09      	subs	r3, #9
 800ddfc:	69fa      	ldr	r2, [r7, #28]
 800ddfe:	409a      	lsls	r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800de0a:	e0ce      	b.n	800dfaa <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800de0c:	4b71      	ldr	r3, [pc, #452]	; (800dfd4 <USER_SPI_ioctl+0x2dc>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 0304 	and.w	r3, r3, #4
 800de14:	2b00      	cmp	r3, #0
 800de16:	d031      	beq.n	800de7c <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800de18:	2100      	movs	r1, #0
 800de1a:	208d      	movs	r0, #141	; 0x8d
 800de1c:	f7ff fd1b 	bl	800d856 <send_cmd>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	f040 80c3 	bne.w	800dfae <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800de28:	20ff      	movs	r0, #255	; 0xff
 800de2a:	f7ff fc23 	bl	800d674 <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800de2e:	f107 030c 	add.w	r3, r7, #12
 800de32:	2110      	movs	r1, #16
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fcb3 	bl	800d7a0 <rcvr_datablock>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f000 80b6 	beq.w	800dfae <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800de42:	2330      	movs	r3, #48	; 0x30
 800de44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800de48:	e007      	b.n	800de5a <USER_SPI_ioctl+0x162>
 800de4a:	20ff      	movs	r0, #255	; 0xff
 800de4c:	f7ff fc12 	bl	800d674 <xchg_spi>
 800de50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de54:	3b01      	subs	r3, #1
 800de56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800de5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1f3      	bne.n	800de4a <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800de62:	7dbb      	ldrb	r3, [r7, #22]
 800de64:	091b      	lsrs	r3, r3, #4
 800de66:	b2db      	uxtb	r3, r3
 800de68:	461a      	mov	r2, r3
 800de6a:	2310      	movs	r3, #16
 800de6c:	fa03 f202 	lsl.w	r2, r3, r2
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800de7a:	e098      	b.n	800dfae <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800de7c:	2100      	movs	r1, #0
 800de7e:	2009      	movs	r0, #9
 800de80:	f7ff fce9 	bl	800d856 <send_cmd>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	f040 8091 	bne.w	800dfae <USER_SPI_ioctl+0x2b6>
 800de8c:	f107 030c 	add.w	r3, r7, #12
 800de90:	2110      	movs	r1, #16
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff fc84 	bl	800d7a0 <rcvr_datablock>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 8087 	beq.w	800dfae <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800dea0:	4b4c      	ldr	r3, [pc, #304]	; (800dfd4 <USER_SPI_ioctl+0x2dc>)
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	f003 0302 	and.w	r3, r3, #2
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d012      	beq.n	800ded2 <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800deac:	7dbb      	ldrb	r3, [r7, #22]
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800deb4:	7dfa      	ldrb	r2, [r7, #23]
 800deb6:	09d2      	lsrs	r2, r2, #7
 800deb8:	b2d2      	uxtb	r2, r2
 800deba:	4413      	add	r3, r2
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	7e7b      	ldrb	r3, [r7, #25]
 800dec0:	099b      	lsrs	r3, r3, #6
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	3b01      	subs	r3, #1
 800dec6:	fa02 f303 	lsl.w	r3, r2, r3
 800deca:	461a      	mov	r2, r3
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	601a      	str	r2, [r3, #0]
 800ded0:	e013      	b.n	800defa <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ded2:	7dbb      	ldrb	r3, [r7, #22]
 800ded4:	109b      	asrs	r3, r3, #2
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	f003 031f 	and.w	r3, r3, #31
 800dedc:	3301      	adds	r3, #1
 800dede:	7dfa      	ldrb	r2, [r7, #23]
 800dee0:	00d2      	lsls	r2, r2, #3
 800dee2:	f002 0218 	and.w	r2, r2, #24
 800dee6:	7df9      	ldrb	r1, [r7, #23]
 800dee8:	0949      	lsrs	r1, r1, #5
 800deea:	b2c9      	uxtb	r1, r1
 800deec:	440a      	add	r2, r1
 800deee:	3201      	adds	r2, #1
 800def0:	fb02 f303 	mul.w	r3, r2, r3
 800def4:	461a      	mov	r2, r3
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800defa:	2300      	movs	r3, #0
 800defc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800df00:	e055      	b.n	800dfae <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800df02:	4b34      	ldr	r3, [pc, #208]	; (800dfd4 <USER_SPI_ioctl+0x2dc>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	f003 0306 	and.w	r3, r3, #6
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d051      	beq.n	800dfb2 <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800df0e:	f107 020c 	add.w	r2, r7, #12
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	210b      	movs	r1, #11
 800df16:	4618      	mov	r0, r3
 800df18:	f7ff feee 	bl	800dcf8 <USER_SPI_ioctl>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d149      	bne.n	800dfb6 <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800df22:	7b3b      	ldrb	r3, [r7, #12]
 800df24:	099b      	lsrs	r3, r3, #6
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d104      	bne.n	800df36 <USER_SPI_ioctl+0x23e>
 800df2c:	7dbb      	ldrb	r3, [r7, #22]
 800df2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df32:	2b00      	cmp	r3, #0
 800df34:	d041      	beq.n	800dfba <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	623b      	str	r3, [r7, #32]
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800df40:	6a3b      	ldr	r3, [r7, #32]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800df46:	4b23      	ldr	r3, [pc, #140]	; (800dfd4 <USER_SPI_ioctl+0x2dc>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	f003 0308 	and.w	r3, r3, #8
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d105      	bne.n	800df5e <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	025b      	lsls	r3, r3, #9
 800df56:	62bb      	str	r3, [r7, #40]	; 0x28
 800df58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5a:	025b      	lsls	r3, r3, #9
 800df5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800df5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df60:	2020      	movs	r0, #32
 800df62:	f7ff fc78 	bl	800d856 <send_cmd>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d128      	bne.n	800dfbe <USER_SPI_ioctl+0x2c6>
 800df6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df6e:	2021      	movs	r0, #33	; 0x21
 800df70:	f7ff fc71 	bl	800d856 <send_cmd>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d121      	bne.n	800dfbe <USER_SPI_ioctl+0x2c6>
 800df7a:	2100      	movs	r1, #0
 800df7c:	2026      	movs	r0, #38	; 0x26
 800df7e:	f7ff fc6a 	bl	800d856 <send_cmd>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d11a      	bne.n	800dfbe <USER_SPI_ioctl+0x2c6>
 800df88:	f247 5030 	movw	r0, #30000	; 0x7530
 800df8c:	f7ff fbbd 	bl	800d70a <wait_ready>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d013      	beq.n	800dfbe <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800df96:	2300      	movs	r3, #0
 800df98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800df9c:	e00f      	b.n	800dfbe <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800df9e:	2304      	movs	r3, #4
 800dfa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dfa4:	e00c      	b.n	800dfc0 <USER_SPI_ioctl+0x2c8>
        break;
 800dfa6:	bf00      	nop
 800dfa8:	e00a      	b.n	800dfc0 <USER_SPI_ioctl+0x2c8>
        break;
 800dfaa:	bf00      	nop
 800dfac:	e008      	b.n	800dfc0 <USER_SPI_ioctl+0x2c8>
        break;
 800dfae:	bf00      	nop
 800dfb0:	e006      	b.n	800dfc0 <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800dfb2:	bf00      	nop
 800dfb4:	e004      	b.n	800dfc0 <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800dfb6:	bf00      	nop
 800dfb8:	e002      	b.n	800dfc0 <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800dfba:	bf00      	nop
 800dfbc:	e000      	b.n	800dfc0 <USER_SPI_ioctl+0x2c8>
        break;
 800dfbe:	bf00      	nop
    }

    despiselect();
 800dfc0:	f7ff fbc6 	bl	800d750 <despiselect>

    return res;
 800dfc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3730      	adds	r7, #48	; 0x30
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	200002a0 	.word	0x200002a0
 800dfd4:	20000884 	.word	0x20000884

0800dfd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dfe4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dfe8:	f004 fcde 	bl	80129a8 <malloc>
 800dfec:	4603      	mov	r3, r0
 800dfee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d105      	bne.n	800e002 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800dffe:	2302      	movs	r3, #2
 800e000:	e066      	b.n	800e0d0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	7c1b      	ldrb	r3, [r3, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d119      	bne.n	800e046 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e012:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e016:	2202      	movs	r2, #2
 800e018:	2181      	movs	r1, #129	; 0x81
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f004 facd 	bl	80125ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e02a:	2202      	movs	r2, #2
 800e02c:	2101      	movs	r1, #1
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f004 fac3 	bl	80125ba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2210      	movs	r2, #16
 800e040:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e044:	e016      	b.n	800e074 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e046:	2340      	movs	r3, #64	; 0x40
 800e048:	2202      	movs	r2, #2
 800e04a:	2181      	movs	r1, #129	; 0x81
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f004 fab4 	bl	80125ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e058:	2340      	movs	r3, #64	; 0x40
 800e05a:	2202      	movs	r2, #2
 800e05c:	2101      	movs	r1, #1
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f004 faab 	bl	80125ba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2201      	movs	r2, #1
 800e068:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2210      	movs	r2, #16
 800e070:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e074:	2308      	movs	r3, #8
 800e076:	2203      	movs	r2, #3
 800e078:	2182      	movs	r1, #130	; 0x82
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f004 fa9d 	bl	80125ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2200      	movs	r2, #0
 800e096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	7c1b      	ldrb	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d109      	bne.n	800e0be <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e0b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f004 fb6e 	bl	8012798 <USBD_LL_PrepareReceive>
 800e0bc:	e007      	b.n	800e0ce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e0c4:	2340      	movs	r3, #64	; 0x40
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f004 fb65 	bl	8012798 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e0e8:	2181      	movs	r1, #129	; 0x81
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f004 fa8b 	bl	8012606 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e0f6:	2101      	movs	r1, #1
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f004 fa84 	bl	8012606 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e106:	2182      	movs	r1, #130	; 0x82
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f004 fa7c 	bl	8012606 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00e      	beq.n	800e146 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e138:	4618      	mov	r0, r3
 800e13a:	f004 fc3d 	bl	80129b8 <free>
    pdev->pClassData = NULL;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e146:	7bfb      	ldrb	r3, [r7, #15]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e160:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e162:	2300      	movs	r3, #0
 800e164:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e176:	2b00      	cmp	r3, #0
 800e178:	d03a      	beq.n	800e1f0 <USBD_CDC_Setup+0xa0>
 800e17a:	2b20      	cmp	r3, #32
 800e17c:	f040 8097 	bne.w	800e2ae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	88db      	ldrh	r3, [r3, #6]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d029      	beq.n	800e1dc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	b25b      	sxtb	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	da11      	bge.n	800e1b6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	683a      	ldr	r2, [r7, #0]
 800e19c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e19e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	88d2      	ldrh	r2, [r2, #6]
 800e1a4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e1a6:	6939      	ldr	r1, [r7, #16]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	88db      	ldrh	r3, [r3, #6]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f001 fac7 	bl	800f742 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e1b4:	e082      	b.n	800e2bc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	785a      	ldrb	r2, [r3, #1]
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	88db      	ldrh	r3, [r3, #6]
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e1cc:	6939      	ldr	r1, [r7, #16]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	88db      	ldrh	r3, [r3, #6]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f001 fae0 	bl	800f79a <USBD_CtlPrepareRx>
    break;
 800e1da:	e06f      	b.n	800e2bc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	7850      	ldrb	r0, [r2, #1]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	6839      	ldr	r1, [r7, #0]
 800e1ec:	4798      	blx	r3
    break;
 800e1ee:	e065      	b.n	800e2bc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	785b      	ldrb	r3, [r3, #1]
 800e1f4:	2b0b      	cmp	r3, #11
 800e1f6:	d84f      	bhi.n	800e298 <USBD_CDC_Setup+0x148>
 800e1f8:	a201      	add	r2, pc, #4	; (adr r2, 800e200 <USBD_CDC_Setup+0xb0>)
 800e1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fe:	bf00      	nop
 800e200:	0800e231 	.word	0x0800e231
 800e204:	0800e2a7 	.word	0x0800e2a7
 800e208:	0800e299 	.word	0x0800e299
 800e20c:	0800e299 	.word	0x0800e299
 800e210:	0800e299 	.word	0x0800e299
 800e214:	0800e299 	.word	0x0800e299
 800e218:	0800e299 	.word	0x0800e299
 800e21c:	0800e299 	.word	0x0800e299
 800e220:	0800e299 	.word	0x0800e299
 800e224:	0800e299 	.word	0x0800e299
 800e228:	0800e259 	.word	0x0800e259
 800e22c:	0800e281 	.word	0x0800e281
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e236:	2b03      	cmp	r3, #3
 800e238:	d107      	bne.n	800e24a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e23a:	f107 030c 	add.w	r3, r7, #12
 800e23e:	2202      	movs	r2, #2
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f001 fa7d 	bl	800f742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e248:	e030      	b.n	800e2ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f001 fa07 	bl	800f660 <USBD_CtlError>
        ret = USBD_FAIL;
 800e252:	2303      	movs	r3, #3
 800e254:	75fb      	strb	r3, [r7, #23]
      break;
 800e256:	e029      	b.n	800e2ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e25e:	2b03      	cmp	r3, #3
 800e260:	d107      	bne.n	800e272 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e262:	f107 030f 	add.w	r3, r7, #15
 800e266:	2201      	movs	r2, #1
 800e268:	4619      	mov	r1, r3
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f001 fa69 	bl	800f742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e270:	e01c      	b.n	800e2ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f001 f9f3 	bl	800f660 <USBD_CtlError>
        ret = USBD_FAIL;
 800e27a:	2303      	movs	r3, #3
 800e27c:	75fb      	strb	r3, [r7, #23]
      break;
 800e27e:	e015      	b.n	800e2ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e286:	2b03      	cmp	r3, #3
 800e288:	d00f      	beq.n	800e2aa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f001 f9e7 	bl	800f660 <USBD_CtlError>
        ret = USBD_FAIL;
 800e292:	2303      	movs	r3, #3
 800e294:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e296:	e008      	b.n	800e2aa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e298:	6839      	ldr	r1, [r7, #0]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f001 f9e0 	bl	800f660 <USBD_CtlError>
      ret = USBD_FAIL;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	75fb      	strb	r3, [r7, #23]
      break;
 800e2a4:	e002      	b.n	800e2ac <USBD_CDC_Setup+0x15c>
      break;
 800e2a6:	bf00      	nop
 800e2a8:	e008      	b.n	800e2bc <USBD_CDC_Setup+0x16c>
      break;
 800e2aa:	bf00      	nop
    }
    break;
 800e2ac:	e006      	b.n	800e2bc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e2ae:	6839      	ldr	r1, [r7, #0]
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f001 f9d5 	bl	800f660 <USBD_CtlError>
    ret = USBD_FAIL;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	75fb      	strb	r3, [r7, #23]
    break;
 800e2ba:	bf00      	nop
  }

  return (uint8_t)ret;
 800e2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3718      	adds	r7, #24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop

0800e2c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	e049      	b.n	800e37e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e2f2:	78fa      	ldrb	r2, [r7, #3]
 800e2f4:	6879      	ldr	r1, [r7, #4]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	440b      	add	r3, r1
 800e300:	3318      	adds	r3, #24
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d029      	beq.n	800e35c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e308:	78fa      	ldrb	r2, [r7, #3]
 800e30a:	6879      	ldr	r1, [r7, #4]
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	440b      	add	r3, r1
 800e316:	3318      	adds	r3, #24
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	78f9      	ldrb	r1, [r7, #3]
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	460b      	mov	r3, r1
 800e320:	00db      	lsls	r3, r3, #3
 800e322:	1a5b      	subs	r3, r3, r1
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4403      	add	r3, r0
 800e328:	3344      	adds	r3, #68	; 0x44
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e330:	fb03 f301 	mul.w	r3, r3, r1
 800e334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e336:	2b00      	cmp	r3, #0
 800e338:	d110      	bne.n	800e35c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e33a:	78fa      	ldrb	r2, [r7, #3]
 800e33c:	6879      	ldr	r1, [r7, #4]
 800e33e:	4613      	mov	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	440b      	add	r3, r1
 800e348:	3318      	adds	r3, #24
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e34e:	78f9      	ldrb	r1, [r7, #3]
 800e350:	2300      	movs	r3, #0
 800e352:	2200      	movs	r2, #0
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f004 f9fe 	bl	8012756 <USBD_LL_Transmit>
 800e35a:	e00f      	b.n	800e37c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2200      	movs	r2, #0
 800e360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e378:	78fa      	ldrb	r2, [r7, #3]
 800e37a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b084      	sub	sp, #16
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	460b      	mov	r3, r1
 800e390:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e398:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	e015      	b.n	800e3d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e3a8:	78fb      	ldrb	r3, [r7, #3]
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f004 fa14 	bl	80127da <USBD_LL_GetRxDataSize>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d015      	beq.n	800e422 <USBD_CDC_EP0_RxReady+0x46>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e3fc:	2bff      	cmp	r3, #255	; 0xff
 800e3fe:	d010      	beq.n	800e422 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	68fa      	ldr	r2, [r7, #12]
 800e40a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e40e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e416:	b292      	uxth	r2, r2
 800e418:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	22ff      	movs	r2, #255	; 0xff
 800e41e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e422:	2300      	movs	r3, #0
}
 800e424:	4618      	mov	r0, r3
 800e426:	3710      	adds	r7, #16
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2243      	movs	r2, #67	; 0x43
 800e438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e43a:	4b03      	ldr	r3, [pc, #12]	; (800e448 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	2000032c 	.word	0x2000032c

0800e44c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2243      	movs	r2, #67	; 0x43
 800e458:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e45a:	4b03      	ldr	r3, [pc, #12]	; (800e468 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	200002e8 	.word	0x200002e8

0800e46c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2243      	movs	r2, #67	; 0x43
 800e478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e47a:	4b03      	ldr	r3, [pc, #12]	; (800e488 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	20000370 	.word	0x20000370

0800e48c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	220a      	movs	r2, #10
 800e498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e49a:	4b03      	ldr	r3, [pc, #12]	; (800e4a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr
 800e4a8:	200002a4 	.word	0x200002a4

0800e4ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d101      	bne.n	800e4c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e4bc:	2303      	movs	r3, #3
 800e4be:	e004      	b.n	800e4ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	683a      	ldr	r2, [r7, #0]
 800e4c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b087      	sub	sp, #28
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	60f8      	str	r0, [r7, #12]
 800e4de:	60b9      	str	r1, [r7, #8]
 800e4e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	371c      	adds	r7, #28
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e518:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3714      	adds	r7, #20
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e53e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e540:	2301      	movs	r3, #1
 800e542:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d101      	bne.n	800e552 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e54e:	2303      	movs	r3, #3
 800e550:	e01a      	b.n	800e588 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d114      	bne.n	800e586 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2201      	movs	r2, #1
 800e560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e57a:	2181      	movs	r1, #129	; 0x81
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f004 f8ea 	bl	8012756 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e582:	2300      	movs	r3, #0
 800e584:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e586:	7bfb      	ldrb	r3, [r7, #15]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e59e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d101      	bne.n	800e5ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	e016      	b.n	800e5dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	7c1b      	ldrb	r3, [r3, #16]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d109      	bne.n	800e5ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f004 f8e8 	bl	8012798 <USBD_LL_PrepareReceive>
 800e5c8:	e007      	b.n	800e5da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5d0:	2340      	movs	r3, #64	; 0x40
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f004 f8df 	bl	8012798 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	e025      	b.n	800e648 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e602:	2b00      	cmp	r3, #0
 800e604:	d003      	beq.n	800e60e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2200      	movs	r2, #0
 800e60a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	79fa      	ldrb	r2, [r7, #7]
 800e63a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f003 ff55 	bl	80124ec <USBD_LL_Init>
 800e642:	4603      	mov	r3, r0
 800e644:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3718      	adds	r7, #24
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e65a:	2300      	movs	r3, #0
 800e65c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e664:	2303      	movs	r3, #3
 800e666:	e010      	b.n	800e68a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e678:	f107 020e 	add.w	r2, r7, #14
 800e67c:	4610      	mov	r0, r2
 800e67e:	4798      	blx	r3
 800e680:	4602      	mov	r2, r0
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b082      	sub	sp, #8
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f003 ff72 	bl	8012584 <USBD_LL_Start>
 800e6a0:	4603      	mov	r3, r0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3708      	adds	r7, #8
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e6aa:	b480      	push	{r7}
 800e6ac:	b083      	sub	sp, #12
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d009      	beq.n	800e6ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	78fa      	ldrb	r2, [r7, #3]
 800e6e4:	4611      	mov	r1, r2
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	4798      	blx	r3
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d007      	beq.n	800e71e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	4611      	mov	r1, r2
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	4798      	blx	r3
  }

  return USBD_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e738:	6839      	ldr	r1, [r7, #0]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f000 ff56 	bl	800f5ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e74e:	461a      	mov	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e75c:	f003 031f 	and.w	r3, r3, #31
 800e760:	2b01      	cmp	r3, #1
 800e762:	d00e      	beq.n	800e782 <USBD_LL_SetupStage+0x5a>
 800e764:	2b01      	cmp	r3, #1
 800e766:	d302      	bcc.n	800e76e <USBD_LL_SetupStage+0x46>
 800e768:	2b02      	cmp	r3, #2
 800e76a:	d014      	beq.n	800e796 <USBD_LL_SetupStage+0x6e>
 800e76c:	e01d      	b.n	800e7aa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e774:	4619      	mov	r1, r3
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f000 fa18 	bl	800ebac <USBD_StdDevReq>
 800e77c:	4603      	mov	r3, r0
 800e77e:	73fb      	strb	r3, [r7, #15]
      break;
 800e780:	e020      	b.n	800e7c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e788:	4619      	mov	r1, r3
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 fa7c 	bl	800ec88 <USBD_StdItfReq>
 800e790:	4603      	mov	r3, r0
 800e792:	73fb      	strb	r3, [r7, #15]
      break;
 800e794:	e016      	b.n	800e7c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e79c:	4619      	mov	r1, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 fab8 	bl	800ed14 <USBD_StdEPReq>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a8:	e00c      	b.n	800e7c4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f003 ff43 	bl	8012644 <USBD_LL_StallEP>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7c2:	bf00      	nop
  }

  return ret;
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b086      	sub	sp, #24
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	60f8      	str	r0, [r7, #12]
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	607a      	str	r2, [r7, #4]
 800e7da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e7dc:	7afb      	ldrb	r3, [r7, #11]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d137      	bne.n	800e852 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e7e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7f0:	2b03      	cmp	r3, #3
 800e7f2:	d14a      	bne.n	800e88a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	689a      	ldr	r2, [r3, #8]
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d913      	bls.n	800e828 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	689a      	ldr	r2, [r3, #8]
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	1ad2      	subs	r2, r2, r3
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	4293      	cmp	r3, r2
 800e818:	bf28      	it	cs
 800e81a:	4613      	movcs	r3, r2
 800e81c:	461a      	mov	r2, r3
 800e81e:	6879      	ldr	r1, [r7, #4]
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 ffd7 	bl	800f7d4 <USBD_CtlContinueRx>
 800e826:	e030      	b.n	800e88a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00a      	beq.n	800e84a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e83a:	2b03      	cmp	r3, #3
 800e83c:	d105      	bne.n	800e84a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f000 ffd3 	bl	800f7f6 <USBD_CtlSendStatus>
 800e850:	e01b      	b.n	800e88a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e858:	699b      	ldr	r3, [r3, #24]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d013      	beq.n	800e886 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e864:	2b03      	cmp	r3, #3
 800e866:	d10e      	bne.n	800e886 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	7afa      	ldrb	r2, [r7, #11]
 800e872:	4611      	mov	r1, r2
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	4798      	blx	r3
 800e878:	4603      	mov	r3, r0
 800e87a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d003      	beq.n	800e88a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	e002      	b.n	800e88c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e886:	2303      	movs	r3, #3
 800e888:	e000      	b.n	800e88c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e88a:	2300      	movs	r3, #0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	460b      	mov	r3, r1
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8a2:	7afb      	ldrb	r3, [r7, #11]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d16a      	bne.n	800e97e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3314      	adds	r3, #20
 800e8ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d155      	bne.n	800e964 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	689a      	ldr	r2, [r3, #8]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d914      	bls.n	800e8ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	689a      	ldr	r2, [r3, #8]
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	1ad2      	subs	r2, r2, r3
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f000 ff4c 	bl	800f778 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f003 ff56 	bl	8012798 <USBD_LL_PrepareReceive>
 800e8ec:	e03a      	b.n	800e964 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	68da      	ldr	r2, [r3, #12]
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d11c      	bne.n	800e934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e902:	429a      	cmp	r2, r3
 800e904:	d316      	bcc.n	800e934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e910:	429a      	cmp	r2, r3
 800e912:	d20f      	bcs.n	800e934 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e914:	2200      	movs	r2, #0
 800e916:	2100      	movs	r1, #0
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f000 ff2d 	bl	800f778 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2200      	movs	r2, #0
 800e922:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e926:	2300      	movs	r3, #0
 800e928:	2200      	movs	r2, #0
 800e92a:	2100      	movs	r1, #0
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f003 ff33 	bl	8012798 <USBD_LL_PrepareReceive>
 800e932:	e017      	b.n	800e964 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00a      	beq.n	800e956 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e946:	2b03      	cmp	r3, #3
 800e948:	d105      	bne.n	800e956 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e956:	2180      	movs	r1, #128	; 0x80
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f003 fe73 	bl	8012644 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f000 ff5c 	bl	800f81c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d123      	bne.n	800e9b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7ff fe9b 	bl	800e6aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e97c:	e01b      	b.n	800e9b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e984:	695b      	ldr	r3, [r3, #20]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d013      	beq.n	800e9b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e990:	2b03      	cmp	r3, #3
 800e992:	d10e      	bne.n	800e9b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e99a:	695b      	ldr	r3, [r3, #20]
 800e99c:	7afa      	ldrb	r2, [r7, #11]
 800e99e:	4611      	mov	r1, r2
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	4798      	blx	r3
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d003      	beq.n	800e9b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	e002      	b.n	800e9b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	e000      	b.n	800e9b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d009      	beq.n	800ea04 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	6852      	ldr	r2, [r2, #4]
 800e9fc:	b2d2      	uxtb	r2, r2
 800e9fe:	4611      	mov	r1, r2
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea04:	2340      	movs	r3, #64	; 0x40
 800ea06:	2200      	movs	r2, #0
 800ea08:	2100      	movs	r1, #0
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f003 fdd5 	bl	80125ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2240      	movs	r2, #64	; 0x40
 800ea1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea20:	2340      	movs	r3, #64	; 0x40
 800ea22:	2200      	movs	r2, #0
 800ea24:	2180      	movs	r1, #128	; 0x80
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f003 fdc7 	bl	80125ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2240      	movs	r2, #64	; 0x40
 800ea36:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	78fa      	ldrb	r2, [r7, #3]
 800ea52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2204      	movs	r2, #4
 800ea7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea9a:	2b04      	cmp	r3, #4
 800ea9c:	d105      	bne.n	800eaaa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eac6:	2b03      	cmp	r3, #3
 800eac8:	d10b      	bne.n	800eae2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ead0:	69db      	ldr	r3, [r3, #28]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d005      	beq.n	800eae2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eb06:	b480      	push	{r7}
 800eb08:	b083      	sub	sp, #12
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	460b      	mov	r3, r1
 800eb10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d009      	beq.n	800eb64 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	6852      	ldr	r2, [r2, #4]
 800eb5c:	b2d2      	uxtb	r2, r2
 800eb5e:	4611      	mov	r1, r2
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	4798      	blx	r3
  }

  return USBD_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b087      	sub	sp, #28
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	3301      	adds	r3, #1
 800eb84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb8c:	8a3b      	ldrh	r3, [r7, #16]
 800eb8e:	021b      	lsls	r3, r3, #8
 800eb90:	b21a      	sxth	r2, r3
 800eb92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	b21b      	sxth	r3, r3
 800eb9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb9c:	89fb      	ldrh	r3, [r7, #14]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	371c      	adds	r7, #28
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
	...

0800ebac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebc2:	2b20      	cmp	r3, #32
 800ebc4:	d004      	beq.n	800ebd0 <USBD_StdDevReq+0x24>
 800ebc6:	2b40      	cmp	r3, #64	; 0x40
 800ebc8:	d002      	beq.n	800ebd0 <USBD_StdDevReq+0x24>
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00a      	beq.n	800ebe4 <USBD_StdDevReq+0x38>
 800ebce:	e050      	b.n	800ec72 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	4798      	blx	r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe2:	e04b      	b.n	800ec7c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	2b09      	cmp	r3, #9
 800ebea:	d83c      	bhi.n	800ec66 <USBD_StdDevReq+0xba>
 800ebec:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <USBD_StdDevReq+0x48>)
 800ebee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf2:	bf00      	nop
 800ebf4:	0800ec49 	.word	0x0800ec49
 800ebf8:	0800ec5d 	.word	0x0800ec5d
 800ebfc:	0800ec67 	.word	0x0800ec67
 800ec00:	0800ec53 	.word	0x0800ec53
 800ec04:	0800ec67 	.word	0x0800ec67
 800ec08:	0800ec27 	.word	0x0800ec27
 800ec0c:	0800ec1d 	.word	0x0800ec1d
 800ec10:	0800ec67 	.word	0x0800ec67
 800ec14:	0800ec3f 	.word	0x0800ec3f
 800ec18:	0800ec31 	.word	0x0800ec31
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ec1c:	6839      	ldr	r1, [r7, #0]
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 f9ce 	bl	800efc0 <USBD_GetDescriptor>
      break;
 800ec24:	e024      	b.n	800ec70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ec26:	6839      	ldr	r1, [r7, #0]
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 fb5d 	bl	800f2e8 <USBD_SetAddress>
      break;
 800ec2e:	e01f      	b.n	800ec70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ec30:	6839      	ldr	r1, [r7, #0]
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 fb9a 	bl	800f36c <USBD_SetConfig>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ec3c:	e018      	b.n	800ec70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ec3e:	6839      	ldr	r1, [r7, #0]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 fc37 	bl	800f4b4 <USBD_GetConfig>
      break;
 800ec46:	e013      	b.n	800ec70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ec48:	6839      	ldr	r1, [r7, #0]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 fc66 	bl	800f51c <USBD_GetStatus>
      break;
 800ec50:	e00e      	b.n	800ec70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ec52:	6839      	ldr	r1, [r7, #0]
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 fc94 	bl	800f582 <USBD_SetFeature>
      break;
 800ec5a:	e009      	b.n	800ec70 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ec5c:	6839      	ldr	r1, [r7, #0]
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 fca3 	bl	800f5aa <USBD_ClrFeature>
      break;
 800ec64:	e004      	b.n	800ec70 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ec66:	6839      	ldr	r1, [r7, #0]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 fcf9 	bl	800f660 <USBD_CtlError>
      break;
 800ec6e:	bf00      	nop
    }
    break;
 800ec70:	e004      	b.n	800ec7c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fcf3 	bl	800f660 <USBD_CtlError>
    break;
 800ec7a:	bf00      	nop
  }

  return ret;
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop

0800ec88 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec92:	2300      	movs	r3, #0
 800ec94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec9e:	2b20      	cmp	r3, #32
 800eca0:	d003      	beq.n	800ecaa <USBD_StdItfReq+0x22>
 800eca2:	2b40      	cmp	r3, #64	; 0x40
 800eca4:	d001      	beq.n	800ecaa <USBD_StdItfReq+0x22>
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d12a      	bne.n	800ed00 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d81d      	bhi.n	800ecf2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	889b      	ldrh	r3, [r3, #4]
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d813      	bhi.n	800ece8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	4798      	blx	r3
 800ecce:	4603      	mov	r3, r0
 800ecd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	88db      	ldrh	r3, [r3, #6]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d110      	bne.n	800ecfc <USBD_StdItfReq+0x74>
 800ecda:	7bfb      	ldrb	r3, [r7, #15]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10d      	bne.n	800ecfc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fd88 	bl	800f7f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ece6:	e009      	b.n	800ecfc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 fcb8 	bl	800f660 <USBD_CtlError>
      break;
 800ecf0:	e004      	b.n	800ecfc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fcb3 	bl	800f660 <USBD_CtlError>
      break;
 800ecfa:	e000      	b.n	800ecfe <USBD_StdItfReq+0x76>
      break;
 800ecfc:	bf00      	nop
    }
    break;
 800ecfe:	e004      	b.n	800ed0a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fcac 	bl	800f660 <USBD_CtlError>
    break;
 800ed08:	bf00      	nop
  }

  return ret;
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	889b      	ldrh	r3, [r3, #4]
 800ed26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed30:	2b20      	cmp	r3, #32
 800ed32:	d004      	beq.n	800ed3e <USBD_StdEPReq+0x2a>
 800ed34:	2b40      	cmp	r3, #64	; 0x40
 800ed36:	d002      	beq.n	800ed3e <USBD_StdEPReq+0x2a>
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00a      	beq.n	800ed52 <USBD_StdEPReq+0x3e>
 800ed3c:	e135      	b.n	800efaa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	6839      	ldr	r1, [r7, #0]
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	4798      	blx	r3
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed50:	e130      	b.n	800efb4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	785b      	ldrb	r3, [r3, #1]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d03e      	beq.n	800edd8 <USBD_StdEPReq+0xc4>
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d002      	beq.n	800ed64 <USBD_StdEPReq+0x50>
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d077      	beq.n	800ee52 <USBD_StdEPReq+0x13e>
 800ed62:	e11c      	b.n	800ef9e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed6a:	2b02      	cmp	r3, #2
 800ed6c:	d002      	beq.n	800ed74 <USBD_StdEPReq+0x60>
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d015      	beq.n	800ed9e <USBD_StdEPReq+0x8a>
 800ed72:	e02b      	b.n	800edcc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00c      	beq.n	800ed94 <USBD_StdEPReq+0x80>
 800ed7a:	7bbb      	ldrb	r3, [r7, #14]
 800ed7c:	2b80      	cmp	r3, #128	; 0x80
 800ed7e:	d009      	beq.n	800ed94 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed80:	7bbb      	ldrb	r3, [r7, #14]
 800ed82:	4619      	mov	r1, r3
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f003 fc5d 	bl	8012644 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed8a:	2180      	movs	r1, #128	; 0x80
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f003 fc59 	bl	8012644 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed92:	e020      	b.n	800edd6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fc62 	bl	800f660 <USBD_CtlError>
        break;
 800ed9c:	e01b      	b.n	800edd6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	885b      	ldrh	r3, [r3, #2]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d10e      	bne.n	800edc4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eda6:	7bbb      	ldrb	r3, [r7, #14]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00b      	beq.n	800edc4 <USBD_StdEPReq+0xb0>
 800edac:	7bbb      	ldrb	r3, [r7, #14]
 800edae:	2b80      	cmp	r3, #128	; 0x80
 800edb0:	d008      	beq.n	800edc4 <USBD_StdEPReq+0xb0>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	88db      	ldrh	r3, [r3, #6]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d104      	bne.n	800edc4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800edba:	7bbb      	ldrb	r3, [r7, #14]
 800edbc:	4619      	mov	r1, r3
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f003 fc40 	bl	8012644 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 fd16 	bl	800f7f6 <USBD_CtlSendStatus>

        break;
 800edca:	e004      	b.n	800edd6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fc46 	bl	800f660 <USBD_CtlError>
        break;
 800edd4:	bf00      	nop
      }
      break;
 800edd6:	e0e7      	b.n	800efa8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d002      	beq.n	800ede8 <USBD_StdEPReq+0xd4>
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d015      	beq.n	800ee12 <USBD_StdEPReq+0xfe>
 800ede6:	e02d      	b.n	800ee44 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00c      	beq.n	800ee08 <USBD_StdEPReq+0xf4>
 800edee:	7bbb      	ldrb	r3, [r7, #14]
 800edf0:	2b80      	cmp	r3, #128	; 0x80
 800edf2:	d009      	beq.n	800ee08 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800edf4:	7bbb      	ldrb	r3, [r7, #14]
 800edf6:	4619      	mov	r1, r3
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f003 fc23 	bl	8012644 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800edfe:	2180      	movs	r1, #128	; 0x80
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f003 fc1f 	bl	8012644 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee06:	e023      	b.n	800ee50 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ee08:	6839      	ldr	r1, [r7, #0]
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 fc28 	bl	800f660 <USBD_CtlError>
        break;
 800ee10:	e01e      	b.n	800ee50 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	885b      	ldrh	r3, [r3, #2]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d119      	bne.n	800ee4e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ee1a:	7bbb      	ldrb	r3, [r7, #14]
 800ee1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d004      	beq.n	800ee2e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ee24:	7bbb      	ldrb	r3, [r7, #14]
 800ee26:	4619      	mov	r1, r3
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f003 fc2a 	bl	8012682 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 fce1 	bl	800f7f6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	4798      	blx	r3
        }
        break;
 800ee42:	e004      	b.n	800ee4e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ee44:	6839      	ldr	r1, [r7, #0]
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 fc0a 	bl	800f660 <USBD_CtlError>
        break;
 800ee4c:	e000      	b.n	800ee50 <USBD_StdEPReq+0x13c>
        break;
 800ee4e:	bf00      	nop
      }
      break;
 800ee50:	e0aa      	b.n	800efa8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d002      	beq.n	800ee62 <USBD_StdEPReq+0x14e>
 800ee5c:	2b03      	cmp	r3, #3
 800ee5e:	d032      	beq.n	800eec6 <USBD_StdEPReq+0x1b2>
 800ee60:	e097      	b.n	800ef92 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee62:	7bbb      	ldrb	r3, [r7, #14]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d007      	beq.n	800ee78 <USBD_StdEPReq+0x164>
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	2b80      	cmp	r3, #128	; 0x80
 800ee6c:	d004      	beq.n	800ee78 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ee6e:	6839      	ldr	r1, [r7, #0]
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 fbf5 	bl	800f660 <USBD_CtlError>
          break;
 800ee76:	e091      	b.n	800ef9c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	da0b      	bge.n	800ee98 <USBD_StdEPReq+0x184>
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
 800ee82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee86:	4613      	mov	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	3310      	adds	r3, #16
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	4413      	add	r3, r2
 800ee94:	3304      	adds	r3, #4
 800ee96:	e00b      	b.n	800eeb0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ee98:	7bbb      	ldrb	r3, [r7, #14]
 800ee9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee9e:	4613      	mov	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	4413      	add	r3, r2
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	4413      	add	r3, r2
 800eeae:	3304      	adds	r3, #4
 800eeb0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	2202      	movs	r2, #2
 800eebc:	4619      	mov	r1, r3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fc3f 	bl	800f742 <USBD_CtlSendData>
        break;
 800eec4:	e06a      	b.n	800ef9c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800eec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	da11      	bge.n	800eef2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eece:	7bbb      	ldrb	r3, [r7, #14]
 800eed0:	f003 020f 	and.w	r2, r3, #15
 800eed4:	6879      	ldr	r1, [r7, #4]
 800eed6:	4613      	mov	r3, r2
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	440b      	add	r3, r1
 800eee0:	3324      	adds	r3, #36	; 0x24
 800eee2:	881b      	ldrh	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d117      	bne.n	800ef18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800eee8:	6839      	ldr	r1, [r7, #0]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fbb8 	bl	800f660 <USBD_CtlError>
            break;
 800eef0:	e054      	b.n	800ef9c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eef2:	7bbb      	ldrb	r3, [r7, #14]
 800eef4:	f003 020f 	and.w	r2, r3, #15
 800eef8:	6879      	ldr	r1, [r7, #4]
 800eefa:	4613      	mov	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4413      	add	r3, r2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	440b      	add	r3, r1
 800ef04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ef08:	881b      	ldrh	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d104      	bne.n	800ef18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fba5 	bl	800f660 <USBD_CtlError>
            break;
 800ef16:	e041      	b.n	800ef9c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	da0b      	bge.n	800ef38 <USBD_StdEPReq+0x224>
 800ef20:	7bbb      	ldrb	r3, [r7, #14]
 800ef22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef26:	4613      	mov	r3, r2
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	4413      	add	r3, r2
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	3310      	adds	r3, #16
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	4413      	add	r3, r2
 800ef34:	3304      	adds	r3, #4
 800ef36:	e00b      	b.n	800ef50 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ef38:	7bbb      	ldrb	r3, [r7, #14]
 800ef3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef3e:	4613      	mov	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	4413      	add	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	3304      	adds	r3, #4
 800ef50:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef52:	7bbb      	ldrb	r3, [r7, #14]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d002      	beq.n	800ef5e <USBD_StdEPReq+0x24a>
 800ef58:	7bbb      	ldrb	r3, [r7, #14]
 800ef5a:	2b80      	cmp	r3, #128	; 0x80
 800ef5c:	d103      	bne.n	800ef66 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	2200      	movs	r2, #0
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	e00e      	b.n	800ef84 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef66:	7bbb      	ldrb	r3, [r7, #14]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f003 fba8 	bl	80126c0 <USBD_LL_IsStallEP>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	e002      	b.n	800ef84 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	2202      	movs	r2, #2
 800ef88:	4619      	mov	r1, r3
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 fbd9 	bl	800f742 <USBD_CtlSendData>
          break;
 800ef90:	e004      	b.n	800ef9c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ef92:	6839      	ldr	r1, [r7, #0]
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 fb63 	bl	800f660 <USBD_CtlError>
        break;
 800ef9a:	bf00      	nop
      }
      break;
 800ef9c:	e004      	b.n	800efa8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ef9e:	6839      	ldr	r1, [r7, #0]
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 fb5d 	bl	800f660 <USBD_CtlError>
      break;
 800efa6:	bf00      	nop
    }
    break;
 800efa8:	e004      	b.n	800efb4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800efaa:	6839      	ldr	r1, [r7, #0]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 fb57 	bl	800f660 <USBD_CtlError>
    break;
 800efb2:	bf00      	nop
  }

  return ret;
 800efb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
	...

0800efc0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800efca:	2300      	movs	r3, #0
 800efcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800efd2:	2300      	movs	r3, #0
 800efd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	885b      	ldrh	r3, [r3, #2]
 800efda:	0a1b      	lsrs	r3, r3, #8
 800efdc:	b29b      	uxth	r3, r3
 800efde:	3b01      	subs	r3, #1
 800efe0:	2b0e      	cmp	r3, #14
 800efe2:	f200 8152 	bhi.w	800f28a <USBD_GetDescriptor+0x2ca>
 800efe6:	a201      	add	r2, pc, #4	; (adr r2, 800efec <USBD_GetDescriptor+0x2c>)
 800efe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efec:	0800f05d 	.word	0x0800f05d
 800eff0:	0800f075 	.word	0x0800f075
 800eff4:	0800f0b5 	.word	0x0800f0b5
 800eff8:	0800f28b 	.word	0x0800f28b
 800effc:	0800f28b 	.word	0x0800f28b
 800f000:	0800f22b 	.word	0x0800f22b
 800f004:	0800f257 	.word	0x0800f257
 800f008:	0800f28b 	.word	0x0800f28b
 800f00c:	0800f28b 	.word	0x0800f28b
 800f010:	0800f28b 	.word	0x0800f28b
 800f014:	0800f28b 	.word	0x0800f28b
 800f018:	0800f28b 	.word	0x0800f28b
 800f01c:	0800f28b 	.word	0x0800f28b
 800f020:	0800f28b 	.word	0x0800f28b
 800f024:	0800f029 	.word	0x0800f029
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f02e:	69db      	ldr	r3, [r3, #28]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00b      	beq.n	800f04c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f03a:	69db      	ldr	r3, [r3, #28]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	7c12      	ldrb	r2, [r2, #16]
 800f040:	f107 0108 	add.w	r1, r7, #8
 800f044:	4610      	mov	r0, r2
 800f046:	4798      	blx	r3
 800f048:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f04a:	e126      	b.n	800f29a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f04c:	6839      	ldr	r1, [r7, #0]
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 fb06 	bl	800f660 <USBD_CtlError>
      err++;
 800f054:	7afb      	ldrb	r3, [r7, #11]
 800f056:	3301      	adds	r3, #1
 800f058:	72fb      	strb	r3, [r7, #11]
    break;
 800f05a:	e11e      	b.n	800f29a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	7c12      	ldrb	r2, [r2, #16]
 800f068:	f107 0108 	add.w	r1, r7, #8
 800f06c:	4610      	mov	r0, r2
 800f06e:	4798      	blx	r3
 800f070:	60f8      	str	r0, [r7, #12]
    break;
 800f072:	e112      	b.n	800f29a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	7c1b      	ldrb	r3, [r3, #16]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10d      	bne.n	800f098 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f084:	f107 0208 	add.w	r2, r7, #8
 800f088:	4610      	mov	r0, r2
 800f08a:	4798      	blx	r3
 800f08c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3301      	adds	r3, #1
 800f092:	2202      	movs	r2, #2
 800f094:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f096:	e100      	b.n	800f29a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a0:	f107 0208 	add.w	r2, r7, #8
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3
 800f0a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	701a      	strb	r2, [r3, #0]
    break;
 800f0b2:	e0f2      	b.n	800f29a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	885b      	ldrh	r3, [r3, #2]
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	2b05      	cmp	r3, #5
 800f0bc:	f200 80ac 	bhi.w	800f218 <USBD_GetDescriptor+0x258>
 800f0c0:	a201      	add	r2, pc, #4	; (adr r2, 800f0c8 <USBD_GetDescriptor+0x108>)
 800f0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c6:	bf00      	nop
 800f0c8:	0800f0e1 	.word	0x0800f0e1
 800f0cc:	0800f115 	.word	0x0800f115
 800f0d0:	0800f149 	.word	0x0800f149
 800f0d4:	0800f17d 	.word	0x0800f17d
 800f0d8:	0800f1b1 	.word	0x0800f1b1
 800f0dc:	0800f1e5 	.word	0x0800f1e5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	7c12      	ldrb	r2, [r2, #16]
 800f0f8:	f107 0108 	add.w	r1, r7, #8
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	4798      	blx	r3
 800f100:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f102:	e091      	b.n	800f228 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 faaa 	bl	800f660 <USBD_CtlError>
        err++;
 800f10c:	7afb      	ldrb	r3, [r7, #11]
 800f10e:	3301      	adds	r3, #1
 800f110:	72fb      	strb	r3, [r7, #11]
      break;
 800f112:	e089      	b.n	800f228 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00b      	beq.n	800f138 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	7c12      	ldrb	r2, [r2, #16]
 800f12c:	f107 0108 	add.w	r1, r7, #8
 800f130:	4610      	mov	r0, r2
 800f132:	4798      	blx	r3
 800f134:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f136:	e077      	b.n	800f228 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f138:	6839      	ldr	r1, [r7, #0]
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 fa90 	bl	800f660 <USBD_CtlError>
        err++;
 800f140:	7afb      	ldrb	r3, [r7, #11]
 800f142:	3301      	adds	r3, #1
 800f144:	72fb      	strb	r3, [r7, #11]
      break;
 800f146:	e06f      	b.n	800f228 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00b      	beq.n	800f16c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	7c12      	ldrb	r2, [r2, #16]
 800f160:	f107 0108 	add.w	r1, r7, #8
 800f164:	4610      	mov	r0, r2
 800f166:	4798      	blx	r3
 800f168:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f16a:	e05d      	b.n	800f228 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 fa76 	bl	800f660 <USBD_CtlError>
        err++;
 800f174:	7afb      	ldrb	r3, [r7, #11]
 800f176:	3301      	adds	r3, #1
 800f178:	72fb      	strb	r3, [r7, #11]
      break;
 800f17a:	e055      	b.n	800f228 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f182:	691b      	ldr	r3, [r3, #16]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00b      	beq.n	800f1a0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	7c12      	ldrb	r2, [r2, #16]
 800f194:	f107 0108 	add.w	r1, r7, #8
 800f198:	4610      	mov	r0, r2
 800f19a:	4798      	blx	r3
 800f19c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f19e:	e043      	b.n	800f228 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f1a0:	6839      	ldr	r1, [r7, #0]
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 fa5c 	bl	800f660 <USBD_CtlError>
        err++;
 800f1a8:	7afb      	ldrb	r3, [r7, #11]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	72fb      	strb	r3, [r7, #11]
      break;
 800f1ae:	e03b      	b.n	800f228 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1b6:	695b      	ldr	r3, [r3, #20]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00b      	beq.n	800f1d4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1c2:	695b      	ldr	r3, [r3, #20]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	7c12      	ldrb	r2, [r2, #16]
 800f1c8:	f107 0108 	add.w	r1, r7, #8
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4798      	blx	r3
 800f1d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1d2:	e029      	b.n	800f228 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f1d4:	6839      	ldr	r1, [r7, #0]
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 fa42 	bl	800f660 <USBD_CtlError>
        err++;
 800f1dc:	7afb      	ldrb	r3, [r7, #11]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	72fb      	strb	r3, [r7, #11]
      break;
 800f1e2:	e021      	b.n	800f228 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ea:	699b      	ldr	r3, [r3, #24]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00b      	beq.n	800f208 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	7c12      	ldrb	r2, [r2, #16]
 800f1fc:	f107 0108 	add.w	r1, r7, #8
 800f200:	4610      	mov	r0, r2
 800f202:	4798      	blx	r3
 800f204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f206:	e00f      	b.n	800f228 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fa28 	bl	800f660 <USBD_CtlError>
        err++;
 800f210:	7afb      	ldrb	r3, [r7, #11]
 800f212:	3301      	adds	r3, #1
 800f214:	72fb      	strb	r3, [r7, #11]
      break;
 800f216:	e007      	b.n	800f228 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f218:	6839      	ldr	r1, [r7, #0]
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 fa20 	bl	800f660 <USBD_CtlError>
      err++;
 800f220:	7afb      	ldrb	r3, [r7, #11]
 800f222:	3301      	adds	r3, #1
 800f224:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f226:	bf00      	nop
    }
    break;
 800f228:	e037      	b.n	800f29a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	7c1b      	ldrb	r3, [r3, #16]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d109      	bne.n	800f246 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f23a:	f107 0208 	add.w	r2, r7, #8
 800f23e:	4610      	mov	r0, r2
 800f240:	4798      	blx	r3
 800f242:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f244:	e029      	b.n	800f29a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fa09 	bl	800f660 <USBD_CtlError>
      err++;
 800f24e:	7afb      	ldrb	r3, [r7, #11]
 800f250:	3301      	adds	r3, #1
 800f252:	72fb      	strb	r3, [r7, #11]
    break;
 800f254:	e021      	b.n	800f29a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	7c1b      	ldrb	r3, [r3, #16]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10d      	bne.n	800f27a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f266:	f107 0208 	add.w	r2, r7, #8
 800f26a:	4610      	mov	r0, r2
 800f26c:	4798      	blx	r3
 800f26e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3301      	adds	r3, #1
 800f274:	2207      	movs	r2, #7
 800f276:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f278:	e00f      	b.n	800f29a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f9ef 	bl	800f660 <USBD_CtlError>
      err++;
 800f282:	7afb      	ldrb	r3, [r7, #11]
 800f284:	3301      	adds	r3, #1
 800f286:	72fb      	strb	r3, [r7, #11]
    break;
 800f288:	e007      	b.n	800f29a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f9e7 	bl	800f660 <USBD_CtlError>
    err++;
 800f292:	7afb      	ldrb	r3, [r7, #11]
 800f294:	3301      	adds	r3, #1
 800f296:	72fb      	strb	r3, [r7, #11]
    break;
 800f298:	bf00      	nop
  }

  if (err != 0U)
 800f29a:	7afb      	ldrb	r3, [r7, #11]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d11e      	bne.n	800f2de <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	88db      	ldrh	r3, [r3, #6]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d016      	beq.n	800f2d6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f2a8:	893b      	ldrh	r3, [r7, #8]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00e      	beq.n	800f2cc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	88da      	ldrh	r2, [r3, #6]
 800f2b2:	893b      	ldrh	r3, [r7, #8]
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	bf28      	it	cs
 800f2b8:	4613      	movcs	r3, r2
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f2be:	893b      	ldrh	r3, [r7, #8]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	68f9      	ldr	r1, [r7, #12]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 fa3c 	bl	800f742 <USBD_CtlSendData>
 800f2ca:	e009      	b.n	800f2e0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f2cc:	6839      	ldr	r1, [r7, #0]
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 f9c6 	bl	800f660 <USBD_CtlError>
 800f2d4:	e004      	b.n	800f2e0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fa8d 	bl	800f7f6 <USBD_CtlSendStatus>
 800f2dc:	e000      	b.n	800f2e0 <USBD_GetDescriptor+0x320>
    return;
 800f2de:	bf00      	nop
    }
  }
}
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop

0800f2e8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	889b      	ldrh	r3, [r3, #4]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d130      	bne.n	800f35c <USBD_SetAddress+0x74>
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	88db      	ldrh	r3, [r3, #6]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d12c      	bne.n	800f35c <USBD_SetAddress+0x74>
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	885b      	ldrh	r3, [r3, #2]
 800f306:	2b7f      	cmp	r3, #127	; 0x7f
 800f308:	d828      	bhi.n	800f35c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	885b      	ldrh	r3, [r3, #2]
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f314:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f31c:	2b03      	cmp	r3, #3
 800f31e:	d104      	bne.n	800f32a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f99c 	bl	800f660 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f328:	e01c      	b.n	800f364 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	7bfa      	ldrb	r2, [r7, #15]
 800f32e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f332:	7bfb      	ldrb	r3, [r7, #15]
 800f334:	4619      	mov	r1, r3
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f003 f9ee 	bl	8012718 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fa5a 	bl	800f7f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d004      	beq.n	800f352 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2202      	movs	r2, #2
 800f34c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f350:	e008      	b.n	800f364 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2201      	movs	r2, #1
 800f356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f35a:	e003      	b.n	800f364 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f35c:	6839      	ldr	r1, [r7, #0]
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f97e 	bl	800f660 <USBD_CtlError>
  }
}
 800f364:	bf00      	nop
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f376:	2300      	movs	r3, #0
 800f378:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	885b      	ldrh	r3, [r3, #2]
 800f37e:	b2da      	uxtb	r2, r3
 800f380:	4b4b      	ldr	r3, [pc, #300]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f382:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f384:	4b4a      	ldr	r3, [pc, #296]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d905      	bls.n	800f398 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f966 	bl	800f660 <USBD_CtlError>
    return USBD_FAIL;
 800f394:	2303      	movs	r3, #3
 800f396:	e087      	b.n	800f4a8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d002      	beq.n	800f3a8 <USBD_SetConfig+0x3c>
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d025      	beq.n	800f3f2 <USBD_SetConfig+0x86>
 800f3a6:	e071      	b.n	800f48c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f3a8:	4b41      	ldr	r3, [pc, #260]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d01c      	beq.n	800f3ea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f3b0:	4b3f      	ldr	r3, [pc, #252]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3ba:	4b3d      	ldr	r3, [pc, #244]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	4619      	mov	r1, r3
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f7ff f97d 	bl	800e6c0 <USBD_SetClassConfig>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f3ca:	7bfb      	ldrb	r3, [r7, #15]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d004      	beq.n	800f3da <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f3d0:	6839      	ldr	r1, [r7, #0]
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 f944 	bl	800f660 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f3d8:	e065      	b.n	800f4a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fa0b 	bl	800f7f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2203      	movs	r2, #3
 800f3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f3e8:	e05d      	b.n	800f4a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 fa03 	bl	800f7f6 <USBD_CtlSendStatus>
    break;
 800f3f0:	e059      	b.n	800f4a6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f3f2:	4b2f      	ldr	r3, [pc, #188]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d112      	bne.n	800f420 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f402:	4b2b      	ldr	r3, [pc, #172]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	461a      	mov	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f40c:	4b28      	ldr	r3, [pc, #160]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7ff f970 	bl	800e6f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 f9ec 	bl	800f7f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f41e:	e042      	b.n	800f4a6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f420:	4b23      	ldr	r3, [pc, #140]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	461a      	mov	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d02a      	beq.n	800f484 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	b2db      	uxtb	r3, r3
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff f95e 	bl	800e6f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f43c:	4b1c      	ldr	r3, [pc, #112]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	461a      	mov	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f446:	4b1a      	ldr	r3, [pc, #104]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	4619      	mov	r1, r3
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7ff f937 	bl	800e6c0 <USBD_SetClassConfig>
 800f452:	4603      	mov	r3, r0
 800f454:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f456:	7bfb      	ldrb	r3, [r7, #15]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00f      	beq.n	800f47c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f8fe 	bl	800f660 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	4619      	mov	r1, r3
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f7ff f943 	bl	800e6f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2202      	movs	r2, #2
 800f476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f47a:	e014      	b.n	800f4a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 f9ba 	bl	800f7f6 <USBD_CtlSendStatus>
    break;
 800f482:	e010      	b.n	800f4a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 f9b6 	bl	800f7f6 <USBD_CtlSendStatus>
    break;
 800f48a:	e00c      	b.n	800f4a6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f48c:	6839      	ldr	r1, [r7, #0]
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f000 f8e6 	bl	800f660 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f494:	4b06      	ldr	r3, [pc, #24]	; (800f4b0 <USBD_SetConfig+0x144>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	4619      	mov	r1, r3
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff f92c 	bl	800e6f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f4a0:	2303      	movs	r3, #3
 800f4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f4a4:	bf00      	nop
  }

  return ret;
 800f4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	20000885 	.word	0x20000885

0800f4b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	88db      	ldrh	r3, [r3, #6]
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d004      	beq.n	800f4d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f8c9 	bl	800f660 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f4ce:	e021      	b.n	800f514 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	db17      	blt.n	800f50a <USBD_GetConfig+0x56>
 800f4da:	2b02      	cmp	r3, #2
 800f4dc:	dd02      	ble.n	800f4e4 <USBD_GetConfig+0x30>
 800f4de:	2b03      	cmp	r3, #3
 800f4e0:	d00b      	beq.n	800f4fa <USBD_GetConfig+0x46>
 800f4e2:	e012      	b.n	800f50a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	3308      	adds	r3, #8
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f925 	bl	800f742 <USBD_CtlSendData>
      break;
 800f4f8:	e00c      	b.n	800f514 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	2201      	movs	r2, #1
 800f500:	4619      	mov	r1, r3
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 f91d 	bl	800f742 <USBD_CtlSendData>
      break;
 800f508:	e004      	b.n	800f514 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f50a:	6839      	ldr	r1, [r7, #0]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f8a7 	bl	800f660 <USBD_CtlError>
      break;
 800f512:	bf00      	nop
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f52c:	3b01      	subs	r3, #1
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d81e      	bhi.n	800f570 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	88db      	ldrh	r3, [r3, #6]
 800f536:	2b02      	cmp	r3, #2
 800f538:	d004      	beq.n	800f544 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f53a:	6839      	ldr	r1, [r7, #0]
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 f88f 	bl	800f660 <USBD_CtlError>
      break;
 800f542:	e01a      	b.n	800f57a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f550:	2b00      	cmp	r3, #0
 800f552:	d005      	beq.n	800f560 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	f043 0202 	orr.w	r2, r3, #2
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	330c      	adds	r3, #12
 800f564:	2202      	movs	r2, #2
 800f566:	4619      	mov	r1, r3
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f8ea 	bl	800f742 <USBD_CtlSendData>
    break;
 800f56e:	e004      	b.n	800f57a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 f874 	bl	800f660 <USBD_CtlError>
    break;
 800f578:	bf00      	nop
  }
}
 800f57a:	bf00      	nop
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	885b      	ldrh	r3, [r3, #2]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d106      	bne.n	800f5a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2201      	movs	r2, #1
 800f598:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 f92a 	bl	800f7f6 <USBD_CtlSendStatus>
  }
}
 800f5a2:	bf00      	nop
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d80b      	bhi.n	800f5d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	885b      	ldrh	r3, [r3, #2]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d10c      	bne.n	800f5e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 f910 	bl	800f7f6 <USBD_CtlSendStatus>
      }
      break;
 800f5d6:	e004      	b.n	800f5e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f5d8:	6839      	ldr	r1, [r7, #0]
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f840 	bl	800f660 <USBD_CtlError>
      break;
 800f5e0:	e000      	b.n	800f5e4 <USBD_ClrFeature+0x3a>
      break;
 800f5e2:	bf00      	nop
  }
}
 800f5e4:	bf00      	nop
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	781a      	ldrb	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	3301      	adds	r3, #1
 800f606:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	781a      	ldrb	r2, [r3, #0]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	3301      	adds	r3, #1
 800f614:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7ff faa9 	bl	800eb6e <SWAPBYTE>
 800f61c:	4603      	mov	r3, r0
 800f61e:	461a      	mov	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	3301      	adds	r3, #1
 800f628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f7ff fa9c 	bl	800eb6e <SWAPBYTE>
 800f636:	4603      	mov	r3, r0
 800f638:	461a      	mov	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3301      	adds	r3, #1
 800f642:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	3301      	adds	r3, #1
 800f648:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f7ff fa8f 	bl	800eb6e <SWAPBYTE>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	80da      	strh	r2, [r3, #6]
}
 800f658:	bf00      	nop
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f66a:	2180      	movs	r1, #128	; 0x80
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f002 ffe9 	bl	8012644 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f672:	2100      	movs	r1, #0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f002 ffe5 	bl	8012644 <USBD_LL_StallEP>
}
 800f67a:	bf00      	nop
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b086      	sub	sp, #24
 800f686:	af00      	add	r7, sp, #0
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	60b9      	str	r1, [r7, #8]
 800f68c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f68e:	2300      	movs	r3, #0
 800f690:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d036      	beq.n	800f706 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f69c:	6938      	ldr	r0, [r7, #16]
 800f69e:	f000 f836 	bl	800f70e <USBD_GetLen>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f6b0:	7dfb      	ldrb	r3, [r7, #23]
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	7812      	ldrb	r2, [r2, #0]
 800f6ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6bc:	7dfb      	ldrb	r3, [r7, #23]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	2203      	movs	r2, #3
 800f6ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6cc:	7dfb      	ldrb	r3, [r7, #23]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f6d2:	e013      	b.n	800f6fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f6d4:	7dfb      	ldrb	r3, [r7, #23]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	4413      	add	r3, r2
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	7812      	ldrb	r2, [r2, #0]
 800f6de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	613b      	str	r3, [r7, #16]
    idx++;
 800f6e6:	7dfb      	ldrb	r3, [r7, #23]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1e7      	bne.n	800f6d4 <USBD_GetString+0x52>
 800f704:	e000      	b.n	800f708 <USBD_GetString+0x86>
    return;
 800f706:	bf00      	nop
  }
}
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f70e:	b480      	push	{r7}
 800f710:	b085      	sub	sp, #20
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f716:	2300      	movs	r3, #0
 800f718:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f71e:	e005      	b.n	800f72c <USBD_GetLen+0x1e>
  {
    len++;
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	3301      	adds	r3, #1
 800f724:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	3301      	adds	r3, #1
 800f72a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1f5      	bne.n	800f720 <USBD_GetLen+0x12>
  }

  return len;
 800f734:	7bfb      	ldrb	r3, [r7, #15]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b084      	sub	sp, #16
 800f746:	af00      	add	r7, sp, #0
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	60b9      	str	r1, [r7, #8]
 800f74c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2202      	movs	r2, #2
 800f752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	2100      	movs	r1, #0
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f002 fff4 	bl	8012756 <USBD_LL_Transmit>

  return USBD_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	2100      	movs	r1, #0
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f002 ffe3 	bl	8012756 <USBD_LL_Transmit>

  return USBD_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b084      	sub	sp, #16
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	60f8      	str	r0, [r7, #12]
 800f7a2:	60b9      	str	r1, [r7, #8]
 800f7a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2203      	movs	r2, #3
 800f7aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68ba      	ldr	r2, [r7, #8]
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f002 ffe7 	bl	8012798 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3710      	adds	r7, #16
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	68ba      	ldr	r2, [r7, #8]
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f002 ffd6 	bl	8012798 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b082      	sub	sp, #8
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2204      	movs	r2, #4
 800f802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f806:	2300      	movs	r3, #0
 800f808:	2200      	movs	r2, #0
 800f80a:	2100      	movs	r1, #0
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f002 ffa2 	bl	8012756 <USBD_LL_Transmit>

  return USBD_OK;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2205      	movs	r2, #5
 800f828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f82c:	2300      	movs	r3, #0
 800f82e:	2200      	movs	r2, #0
 800f830:	2100      	movs	r1, #0
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f002 ffb0 	bl	8012798 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
	...

0800f844 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f844:	b480      	push	{r7}
 800f846:	b087      	sub	sp, #28
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	4613      	mov	r3, r2
 800f850:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f852:	2301      	movs	r3, #1
 800f854:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f856:	2300      	movs	r3, #0
 800f858:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f85a:	4b1f      	ldr	r3, [pc, #124]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f85c:	7a5b      	ldrb	r3, [r3, #9]
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	d131      	bne.n	800f8c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f864:	4b1c      	ldr	r3, [pc, #112]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f866:	7a5b      	ldrb	r3, [r3, #9]
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	461a      	mov	r2, r3
 800f86c:	4b1a      	ldr	r3, [pc, #104]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f86e:	2100      	movs	r1, #0
 800f870:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f872:	4b19      	ldr	r3, [pc, #100]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f874:	7a5b      	ldrb	r3, [r3, #9]
 800f876:	b2db      	uxtb	r3, r3
 800f878:	4a17      	ldr	r2, [pc, #92]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4413      	add	r3, r2
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f882:	4b15      	ldr	r3, [pc, #84]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f884:	7a5b      	ldrb	r3, [r3, #9]
 800f886:	b2db      	uxtb	r3, r3
 800f888:	461a      	mov	r2, r3
 800f88a:	4b13      	ldr	r3, [pc, #76]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f88c:	4413      	add	r3, r2
 800f88e:	79fa      	ldrb	r2, [r7, #7]
 800f890:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f892:	4b11      	ldr	r3, [pc, #68]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f894:	7a5b      	ldrb	r3, [r3, #9]
 800f896:	b2db      	uxtb	r3, r3
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	b2d1      	uxtb	r1, r2
 800f89c:	4a0e      	ldr	r2, [pc, #56]	; (800f8d8 <FATFS_LinkDriverEx+0x94>)
 800f89e:	7251      	strb	r1, [r2, #9]
 800f8a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f8a2:	7dbb      	ldrb	r3, [r7, #22]
 800f8a4:	3330      	adds	r3, #48	; 0x30
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	223a      	movs	r2, #58	; 0x3a
 800f8b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	3302      	adds	r3, #2
 800f8b8:	222f      	movs	r2, #47	; 0x2f
 800f8ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	3303      	adds	r3, #3
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	371c      	adds	r7, #28
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
 800f8d8:	20000888 	.word	0x20000888

0800f8dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	6839      	ldr	r1, [r7, #0]
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7ff ffaa 	bl	800f844 <FATFS_LinkDriverEx>
 800f8f0:	4603      	mov	r3, r0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3708      	adds	r7, #8
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f8fa:	b480      	push	{r7}
 800f8fc:	b085      	sub	sp, #20
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	4603      	mov	r3, r0
 800f902:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f904:	2300      	movs	r3, #0
 800f906:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f90c:	2b84      	cmp	r3, #132	; 0x84
 800f90e:	d005      	beq.n	800f91c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f910:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	4413      	add	r3, r2
 800f918:	3303      	adds	r3, #3
 800f91a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f91c:	68fb      	ldr	r3, [r7, #12]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3714      	adds	r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr

0800f92a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f92a:	b480      	push	{r7}
 800f92c:	b083      	sub	sp, #12
 800f92e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f930:	f3ef 8305 	mrs	r3, IPSR
 800f934:	607b      	str	r3, [r7, #4]
  return(result);
 800f936:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f938:	2b00      	cmp	r3, #0
 800f93a:	bf14      	ite	ne
 800f93c:	2301      	movne	r3, #1
 800f93e:	2300      	moveq	r3, #0
 800f940:	b2db      	uxtb	r3, r3
}
 800f942:	4618      	mov	r0, r3
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f952:	f001 f927 	bl	8010ba4 <vTaskStartScheduler>
  
  return osOK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f960:	f7ff ffe3 	bl	800f92a <inHandlerMode>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d003      	beq.n	800f972 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f96a:	f001 fa33 	bl	8010dd4 <xTaskGetTickCountFromISR>
 800f96e:	4603      	mov	r3, r0
 800f970:	e002      	b.n	800f978 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f972:	f001 fa1f 	bl	8010db4 <xTaskGetTickCount>
 800f976:	4603      	mov	r3, r0
  }
}
 800f978:	4618      	mov	r0, r3
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97e:	b089      	sub	sp, #36	; 0x24
 800f980:	af04      	add	r7, sp, #16
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	695b      	ldr	r3, [r3, #20]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d020      	beq.n	800f9d0 <osThreadCreate+0x54>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	699b      	ldr	r3, [r3, #24]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d01c      	beq.n	800f9d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	685c      	ldr	r4, [r3, #4]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681d      	ldr	r5, [r3, #0]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	691e      	ldr	r6, [r3, #16]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7ff ffa6 	bl	800f8fa <makeFreeRtosPriority>
 800f9ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9b8:	9202      	str	r2, [sp, #8]
 800f9ba:	9301      	str	r3, [sp, #4]
 800f9bc:	9100      	str	r1, [sp, #0]
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f000 ff2a 	bl	801081e <xTaskCreateStatic>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	60fb      	str	r3, [r7, #12]
 800f9ce:	e01c      	b.n	800fa0a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	685c      	ldr	r4, [r3, #4]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9dc:	b29e      	uxth	r6, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff ff88 	bl	800f8fa <makeFreeRtosPriority>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	f107 030c 	add.w	r3, r7, #12
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	9200      	str	r2, [sp, #0]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	4632      	mov	r2, r6
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f000 ff69 	bl	80108d2 <xTaskCreate>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d001      	beq.n	800fa0a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	e000      	b.n	800fa0c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3714      	adds	r7, #20
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <osDelay+0x16>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	e000      	b.n	800fa2c <osDelay+0x18>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f001 f885 	bl	8010b3c <vTaskDelay>
  
  return osOK;
 800fa32:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fa3c:	b590      	push	{r4, r7, lr}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af02      	add	r7, sp, #8
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d012      	beq.n	800fa74 <osMessageCreate+0x38>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00e      	beq.n	800fa74 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6859      	ldr	r1, [r3, #4]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	689a      	ldr	r2, [r3, #8]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68dc      	ldr	r4, [r3, #12]
 800fa66:	2300      	movs	r3, #0
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	4623      	mov	r3, r4
 800fa6c:	f000 f9ec 	bl	800fe48 <xQueueGenericCreateStatic>
 800fa70:	4603      	mov	r3, r0
 800fa72:	e008      	b.n	800fa86 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6818      	ldr	r0, [r3, #0]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	4619      	mov	r1, r3
 800fa80:	f000 fa55 	bl	800ff2e <xQueueGenericCreate>
 800fa84:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	370c      	adds	r7, #12
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd90      	pop	{r4, r7, pc}
	...

0800fa90 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d101      	bne.n	800faae <osMessagePut+0x1e>
    ticks = 1;
 800faaa:	2301      	movs	r3, #1
 800faac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800faae:	f7ff ff3c 	bl	800f92a <inHandlerMode>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d018      	beq.n	800faea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fab8:	f107 0210 	add.w	r2, r7, #16
 800fabc:	f107 0108 	add.w	r1, r7, #8
 800fac0:	2300      	movs	r3, #0
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	f000 fb8c 	bl	80101e0 <xQueueGenericSendFromISR>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b01      	cmp	r3, #1
 800facc:	d001      	beq.n	800fad2 <osMessagePut+0x42>
      return osErrorOS;
 800face:	23ff      	movs	r3, #255	; 0xff
 800fad0:	e018      	b.n	800fb04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d014      	beq.n	800fb02 <osMessagePut+0x72>
 800fad8:	4b0c      	ldr	r3, [pc, #48]	; (800fb0c <osMessagePut+0x7c>)
 800fada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fade:	601a      	str	r2, [r3, #0]
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	e00b      	b.n	800fb02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800faea:	f107 0108 	add.w	r1, r7, #8
 800faee:	2300      	movs	r3, #0
 800faf0:	697a      	ldr	r2, [r7, #20]
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	f000 fa7a 	bl	800ffec <xQueueGenericSend>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d001      	beq.n	800fb02 <osMessagePut+0x72>
      return osErrorOS;
 800fafe:	23ff      	movs	r3, #255	; 0xff
 800fb00:	e000      	b.n	800fb04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	e000ed04 	.word	0xe000ed04

0800fb10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fb10:	b590      	push	{r4, r7, lr}
 800fb12:	b08b      	sub	sp, #44	; 0x2c
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fb20:	2300      	movs	r3, #0
 800fb22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10a      	bne.n	800fb40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fb2a:	2380      	movs	r3, #128	; 0x80
 800fb2c:	617b      	str	r3, [r7, #20]
    return event;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	461c      	mov	r4, r3
 800fb32:	f107 0314 	add.w	r3, r7, #20
 800fb36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb3e:	e054      	b.n	800fbea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fb40:	2300      	movs	r3, #0
 800fb42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fb44:	2300      	movs	r3, #0
 800fb46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb4e:	d103      	bne.n	800fb58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fb50:	f04f 33ff 	mov.w	r3, #4294967295
 800fb54:	627b      	str	r3, [r7, #36]	; 0x24
 800fb56:	e009      	b.n	800fb6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d006      	beq.n	800fb6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d101      	bne.n	800fb6c <osMessageGet+0x5c>
      ticks = 1;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fb6c:	f7ff fedd 	bl	800f92a <inHandlerMode>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d01c      	beq.n	800fbb0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fb76:	f107 0220 	add.w	r2, r7, #32
 800fb7a:	f107 0314 	add.w	r3, r7, #20
 800fb7e:	3304      	adds	r3, #4
 800fb80:	4619      	mov	r1, r3
 800fb82:	68b8      	ldr	r0, [r7, #8]
 800fb84:	f000 fc9c 	bl	80104c0 <xQueueReceiveFromISR>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d102      	bne.n	800fb94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fb8e:	2310      	movs	r3, #16
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	e001      	b.n	800fb98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fb94:	2300      	movs	r3, #0
 800fb96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb98:	6a3b      	ldr	r3, [r7, #32]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d01d      	beq.n	800fbda <osMessageGet+0xca>
 800fb9e:	4b15      	ldr	r3, [pc, #84]	; (800fbf4 <osMessageGet+0xe4>)
 800fba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba4:	601a      	str	r2, [r3, #0]
 800fba6:	f3bf 8f4f 	dsb	sy
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	e014      	b.n	800fbda <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fbb0:	f107 0314 	add.w	r3, r7, #20
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbb8:	4619      	mov	r1, r3
 800fbba:	68b8      	ldr	r0, [r7, #8]
 800fbbc:	f000 fba4 	bl	8010308 <xQueueReceive>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d102      	bne.n	800fbcc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fbc6:	2310      	movs	r3, #16
 800fbc8:	617b      	str	r3, [r7, #20]
 800fbca:	e006      	b.n	800fbda <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <osMessageGet+0xc6>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	e000      	b.n	800fbd8 <osMessageGet+0xc8>
 800fbd6:	2340      	movs	r3, #64	; 0x40
 800fbd8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	461c      	mov	r4, r3
 800fbde:	f107 0314 	add.w	r3, r7, #20
 800fbe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fbea:	68f8      	ldr	r0, [r7, #12]
 800fbec:	372c      	adds	r7, #44	; 0x2c
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd90      	pop	{r4, r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	e000ed04 	.word	0xe000ed04

0800fbf8 <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 fcda 	bl	80105ba <uxQueueSpacesAvailable>
 800fc06:	4603      	mov	r3, r0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f103 0208 	add.w	r2, r3, #8
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f04f 32ff 	mov.w	r2, #4294967295
 800fc28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f103 0208 	add.w	r2, r3, #8
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f103 0208 	add.w	r2, r3, #8
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2200      	movs	r2, #0
 800fc42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc44:	bf00      	nop
 800fc46:	370c      	adds	r7, #12
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fc5e:	bf00      	nop
 800fc60:	370c      	adds	r7, #12
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr

0800fc6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc6a:	b480      	push	{r7}
 800fc6c:	b085      	sub	sp, #20
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	689a      	ldr	r2, [r3, #8]
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	683a      	ldr	r2, [r7, #0]
 800fc8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	683a      	ldr	r2, [r7, #0]
 800fc94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	1c5a      	adds	r2, r3, #1
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	601a      	str	r2, [r3, #0]
}
 800fca6:	bf00      	nop
 800fca8:	3714      	adds	r7, #20
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr

0800fcb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcb2:	b480      	push	{r7}
 800fcb4:	b085      	sub	sp, #20
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
 800fcba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc8:	d103      	bne.n	800fcd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	691b      	ldr	r3, [r3, #16]
 800fcce:	60fb      	str	r3, [r7, #12]
 800fcd0:	e00c      	b.n	800fcec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	3308      	adds	r3, #8
 800fcd6:	60fb      	str	r3, [r7, #12]
 800fcd8:	e002      	b.n	800fce0 <vListInsert+0x2e>
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	60fb      	str	r3, [r7, #12]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68ba      	ldr	r2, [r7, #8]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d2f6      	bcs.n	800fcda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	685a      	ldr	r2, [r3, #4]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	683a      	ldr	r2, [r7, #0]
 800fcfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	683a      	ldr	r2, [r7, #0]
 800fd06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	1c5a      	adds	r2, r3, #1
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	601a      	str	r2, [r3, #0]
}
 800fd18:	bf00      	nop
 800fd1a:	3714      	adds	r7, #20
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	6892      	ldr	r2, [r2, #8]
 800fd3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	6852      	ldr	r2, [r2, #4]
 800fd44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d103      	bne.n	800fd58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	689a      	ldr	r2, [r3, #8]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	1e5a      	subs	r2, r3, #1
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3714      	adds	r7, #20
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d109      	bne.n	800fda0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd90:	f383 8811 	msr	BASEPRI, r3
 800fd94:	f3bf 8f6f 	isb	sy
 800fd98:	f3bf 8f4f 	dsb	sy
 800fd9c:	60bb      	str	r3, [r7, #8]
 800fd9e:	e7fe      	b.n	800fd9e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fda0:	f001 fd44 	bl	801182c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdac:	68f9      	ldr	r1, [r7, #12]
 800fdae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdb0:	fb01 f303 	mul.w	r3, r1, r3
 800fdb4:	441a      	add	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	68f9      	ldr	r1, [r7, #12]
 800fdd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdd6:	fb01 f303 	mul.w	r3, r1, r3
 800fdda:	441a      	add	r2, r3
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	22ff      	movs	r2, #255	; 0xff
 800fde4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	22ff      	movs	r2, #255	; 0xff
 800fdec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d114      	bne.n	800fe20 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d01a      	beq.n	800fe34 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3310      	adds	r3, #16
 800fe02:	4618      	mov	r0, r3
 800fe04:	f001 f92e 	bl	8011064 <xTaskRemoveFromEventList>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d012      	beq.n	800fe34 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe0e:	4b0d      	ldr	r3, [pc, #52]	; (800fe44 <xQueueGenericReset+0xcc>)
 800fe10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	f3bf 8f6f 	isb	sy
 800fe1e:	e009      	b.n	800fe34 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	3310      	adds	r3, #16
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff fef3 	bl	800fc10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	3324      	adds	r3, #36	; 0x24
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7ff feee 	bl	800fc10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe34:	f001 fd28 	bl	8011888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe38:	2301      	movs	r3, #1
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	e000ed04 	.word	0xe000ed04

0800fe48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b08e      	sub	sp, #56	; 0x38
 800fe4c:	af02      	add	r7, sp, #8
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
 800fe54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d109      	bne.n	800fe70 <xQueueGenericCreateStatic+0x28>
 800fe5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe6e:	e7fe      	b.n	800fe6e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d109      	bne.n	800fe8a <xQueueGenericCreateStatic+0x42>
 800fe76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	627b      	str	r3, [r7, #36]	; 0x24
 800fe88:	e7fe      	b.n	800fe88 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <xQueueGenericCreateStatic+0x4e>
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d001      	beq.n	800fe9a <xQueueGenericCreateStatic+0x52>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e000      	b.n	800fe9c <xQueueGenericCreateStatic+0x54>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d109      	bne.n	800feb4 <xQueueGenericCreateStatic+0x6c>
 800fea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea4:	f383 8811 	msr	BASEPRI, r3
 800fea8:	f3bf 8f6f 	isb	sy
 800feac:	f3bf 8f4f 	dsb	sy
 800feb0:	623b      	str	r3, [r7, #32]
 800feb2:	e7fe      	b.n	800feb2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d102      	bne.n	800fec0 <xQueueGenericCreateStatic+0x78>
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d101      	bne.n	800fec4 <xQueueGenericCreateStatic+0x7c>
 800fec0:	2301      	movs	r3, #1
 800fec2:	e000      	b.n	800fec6 <xQueueGenericCreateStatic+0x7e>
 800fec4:	2300      	movs	r3, #0
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d109      	bne.n	800fede <xQueueGenericCreateStatic+0x96>
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	61fb      	str	r3, [r7, #28]
 800fedc:	e7fe      	b.n	800fedc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fede:	2348      	movs	r3, #72	; 0x48
 800fee0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	2b48      	cmp	r3, #72	; 0x48
 800fee6:	d009      	beq.n	800fefc <xQueueGenericCreateStatic+0xb4>
 800fee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	f3bf 8f6f 	isb	sy
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	61bb      	str	r3, [r7, #24]
 800fefa:	e7fe      	b.n	800fefa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fefc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d00d      	beq.n	800ff24 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff10:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	4613      	mov	r3, r2
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	68b9      	ldr	r1, [r7, #8]
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	f000 f844 	bl	800ffac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3730      	adds	r7, #48	; 0x30
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b08a      	sub	sp, #40	; 0x28
 800ff32:	af02      	add	r7, sp, #8
 800ff34:	60f8      	str	r0, [r7, #12]
 800ff36:	60b9      	str	r1, [r7, #8]
 800ff38:	4613      	mov	r3, r2
 800ff3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d109      	bne.n	800ff56 <xQueueGenericCreate+0x28>
 800ff42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff46:	f383 8811 	msr	BASEPRI, r3
 800ff4a:	f3bf 8f6f 	isb	sy
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	613b      	str	r3, [r7, #16]
 800ff54:	e7fe      	b.n	800ff54 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	61fb      	str	r3, [r7, #28]
 800ff60:	e004      	b.n	800ff6c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	fb02 f303 	mul.w	r3, r2, r3
 800ff6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	3348      	adds	r3, #72	; 0x48
 800ff70:	4618      	mov	r0, r3
 800ff72:	f001 fd75 	bl	8011a60 <pvPortMalloc>
 800ff76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d011      	beq.n	800ffa2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	3348      	adds	r3, #72	; 0x48
 800ff86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff90:	79fa      	ldrb	r2, [r7, #7]
 800ff92:	69bb      	ldr	r3, [r7, #24]
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	4613      	mov	r3, r2
 800ff98:	697a      	ldr	r2, [r7, #20]
 800ff9a:	68b9      	ldr	r1, [r7, #8]
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f000 f805 	bl	800ffac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ffa2:	69bb      	ldr	r3, [r7, #24]
	}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3720      	adds	r7, #32
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
 800ffb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d103      	bne.n	800ffc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	69ba      	ldr	r2, [r7, #24]
 800ffc4:	601a      	str	r2, [r3, #0]
 800ffc6:	e002      	b.n	800ffce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ffc8:	69bb      	ldr	r3, [r7, #24]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	68ba      	ldr	r2, [r7, #8]
 800ffd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ffda:	2101      	movs	r1, #1
 800ffdc:	69b8      	ldr	r0, [r7, #24]
 800ffde:	f7ff fecb 	bl	800fd78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ffe2:	bf00      	nop
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
	...

0800ffec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b08e      	sub	sp, #56	; 0x38
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]
 800fff8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fffa:	2300      	movs	r3, #0
 800fffc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010004:	2b00      	cmp	r3, #0
 8010006:	d109      	bne.n	801001c <xQueueGenericSend+0x30>
 8010008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801000c:	f383 8811 	msr	BASEPRI, r3
 8010010:	f3bf 8f6f 	isb	sy
 8010014:	f3bf 8f4f 	dsb	sy
 8010018:	62bb      	str	r3, [r7, #40]	; 0x28
 801001a:	e7fe      	b.n	801001a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d103      	bne.n	801002a <xQueueGenericSend+0x3e>
 8010022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <xQueueGenericSend+0x42>
 801002a:	2301      	movs	r3, #1
 801002c:	e000      	b.n	8010030 <xQueueGenericSend+0x44>
 801002e:	2300      	movs	r3, #0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d109      	bne.n	8010048 <xQueueGenericSend+0x5c>
 8010034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010038:	f383 8811 	msr	BASEPRI, r3
 801003c:	f3bf 8f6f 	isb	sy
 8010040:	f3bf 8f4f 	dsb	sy
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
 8010046:	e7fe      	b.n	8010046 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	2b02      	cmp	r3, #2
 801004c:	d103      	bne.n	8010056 <xQueueGenericSend+0x6a>
 801004e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010052:	2b01      	cmp	r3, #1
 8010054:	d101      	bne.n	801005a <xQueueGenericSend+0x6e>
 8010056:	2301      	movs	r3, #1
 8010058:	e000      	b.n	801005c <xQueueGenericSend+0x70>
 801005a:	2300      	movs	r3, #0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d109      	bne.n	8010074 <xQueueGenericSend+0x88>
 8010060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	623b      	str	r3, [r7, #32]
 8010072:	e7fe      	b.n	8010072 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010074:	f001 f9ac 	bl	80113d0 <xTaskGetSchedulerState>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d102      	bne.n	8010084 <xQueueGenericSend+0x98>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d101      	bne.n	8010088 <xQueueGenericSend+0x9c>
 8010084:	2301      	movs	r3, #1
 8010086:	e000      	b.n	801008a <xQueueGenericSend+0x9e>
 8010088:	2300      	movs	r3, #0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d109      	bne.n	80100a2 <xQueueGenericSend+0xb6>
 801008e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010092:	f383 8811 	msr	BASEPRI, r3
 8010096:	f3bf 8f6f 	isb	sy
 801009a:	f3bf 8f4f 	dsb	sy
 801009e:	61fb      	str	r3, [r7, #28]
 80100a0:	e7fe      	b.n	80100a0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100a2:	f001 fbc3 	bl	801182c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80100a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d302      	bcc.n	80100b8 <xQueueGenericSend+0xcc>
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	2b02      	cmp	r3, #2
 80100b6:	d129      	bne.n	801010c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100b8:	683a      	ldr	r2, [r7, #0]
 80100ba:	68b9      	ldr	r1, [r7, #8]
 80100bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100be:	f000 fa9e 	bl	80105fe <prvCopyDataToQueue>
 80100c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d010      	beq.n	80100ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ce:	3324      	adds	r3, #36	; 0x24
 80100d0:	4618      	mov	r0, r3
 80100d2:	f000 ffc7 	bl	8011064 <xTaskRemoveFromEventList>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d013      	beq.n	8010104 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80100dc:	4b3f      	ldr	r3, [pc, #252]	; (80101dc <xQueueGenericSend+0x1f0>)
 80100de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e2:	601a      	str	r2, [r3, #0]
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	e00a      	b.n	8010104 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80100ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d007      	beq.n	8010104 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80100f4:	4b39      	ldr	r3, [pc, #228]	; (80101dc <xQueueGenericSend+0x1f0>)
 80100f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010104:	f001 fbc0 	bl	8011888 <vPortExitCritical>
				return pdPASS;
 8010108:	2301      	movs	r3, #1
 801010a:	e063      	b.n	80101d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d103      	bne.n	801011a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010112:	f001 fbb9 	bl	8011888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010116:	2300      	movs	r3, #0
 8010118:	e05c      	b.n	80101d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801011a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011c:	2b00      	cmp	r3, #0
 801011e:	d106      	bne.n	801012e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010120:	f107 0314 	add.w	r3, r7, #20
 8010124:	4618      	mov	r0, r3
 8010126:	f000 ffff 	bl	8011128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801012a:	2301      	movs	r3, #1
 801012c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801012e:	f001 fbab 	bl	8011888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010132:	f000 fd95 	bl	8010c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010136:	f001 fb79 	bl	801182c <vPortEnterCritical>
 801013a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010140:	b25b      	sxtb	r3, r3
 8010142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010146:	d103      	bne.n	8010150 <xQueueGenericSend+0x164>
 8010148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014a:	2200      	movs	r2, #0
 801014c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010156:	b25b      	sxtb	r3, r3
 8010158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801015c:	d103      	bne.n	8010166 <xQueueGenericSend+0x17a>
 801015e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010160:	2200      	movs	r2, #0
 8010162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010166:	f001 fb8f 	bl	8011888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801016a:	1d3a      	adds	r2, r7, #4
 801016c:	f107 0314 	add.w	r3, r7, #20
 8010170:	4611      	mov	r1, r2
 8010172:	4618      	mov	r0, r3
 8010174:	f000 ffee 	bl	8011154 <xTaskCheckForTimeOut>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d124      	bne.n	80101c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801017e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010180:	f000 fb35 	bl	80107ee <prvIsQueueFull>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d018      	beq.n	80101bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801018a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018c:	3310      	adds	r3, #16
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	4611      	mov	r1, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f000 ff42 	bl	801101c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801019a:	f000 fac0 	bl	801071e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801019e:	f000 fd6d 	bl	8010c7c <xTaskResumeAll>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f47f af7c 	bne.w	80100a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80101aa:	4b0c      	ldr	r3, [pc, #48]	; (80101dc <xQueueGenericSend+0x1f0>)
 80101ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101b0:	601a      	str	r2, [r3, #0]
 80101b2:	f3bf 8f4f 	dsb	sy
 80101b6:	f3bf 8f6f 	isb	sy
 80101ba:	e772      	b.n	80100a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80101bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101be:	f000 faae 	bl	801071e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101c2:	f000 fd5b 	bl	8010c7c <xTaskResumeAll>
 80101c6:	e76c      	b.n	80100a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80101c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101ca:	f000 faa8 	bl	801071e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101ce:	f000 fd55 	bl	8010c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80101d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3738      	adds	r7, #56	; 0x38
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	e000ed04 	.word	0xe000ed04

080101e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b08e      	sub	sp, #56	; 0x38
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
 80101ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80101f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d109      	bne.n	801020c <xQueueGenericSendFromISR+0x2c>
 80101f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101fc:	f383 8811 	msr	BASEPRI, r3
 8010200:	f3bf 8f6f 	isb	sy
 8010204:	f3bf 8f4f 	dsb	sy
 8010208:	627b      	str	r3, [r7, #36]	; 0x24
 801020a:	e7fe      	b.n	801020a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d103      	bne.n	801021a <xQueueGenericSendFromISR+0x3a>
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010216:	2b00      	cmp	r3, #0
 8010218:	d101      	bne.n	801021e <xQueueGenericSendFromISR+0x3e>
 801021a:	2301      	movs	r3, #1
 801021c:	e000      	b.n	8010220 <xQueueGenericSendFromISR+0x40>
 801021e:	2300      	movs	r3, #0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d109      	bne.n	8010238 <xQueueGenericSendFromISR+0x58>
 8010224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010228:	f383 8811 	msr	BASEPRI, r3
 801022c:	f3bf 8f6f 	isb	sy
 8010230:	f3bf 8f4f 	dsb	sy
 8010234:	623b      	str	r3, [r7, #32]
 8010236:	e7fe      	b.n	8010236 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	2b02      	cmp	r3, #2
 801023c:	d103      	bne.n	8010246 <xQueueGenericSendFromISR+0x66>
 801023e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010242:	2b01      	cmp	r3, #1
 8010244:	d101      	bne.n	801024a <xQueueGenericSendFromISR+0x6a>
 8010246:	2301      	movs	r3, #1
 8010248:	e000      	b.n	801024c <xQueueGenericSendFromISR+0x6c>
 801024a:	2300      	movs	r3, #0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d109      	bne.n	8010264 <xQueueGenericSendFromISR+0x84>
 8010250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010254:	f383 8811 	msr	BASEPRI, r3
 8010258:	f3bf 8f6f 	isb	sy
 801025c:	f3bf 8f4f 	dsb	sy
 8010260:	61fb      	str	r3, [r7, #28]
 8010262:	e7fe      	b.n	8010262 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010264:	f001 fbbe 	bl	80119e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010268:	f3ef 8211 	mrs	r2, BASEPRI
 801026c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010270:	f383 8811 	msr	BASEPRI, r3
 8010274:	f3bf 8f6f 	isb	sy
 8010278:	f3bf 8f4f 	dsb	sy
 801027c:	61ba      	str	r2, [r7, #24]
 801027e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010280:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010282:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801028c:	429a      	cmp	r2, r3
 801028e:	d302      	bcc.n	8010296 <xQueueGenericSendFromISR+0xb6>
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	2b02      	cmp	r3, #2
 8010294:	d12c      	bne.n	80102f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801029c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80102a0:	683a      	ldr	r2, [r7, #0]
 80102a2:	68b9      	ldr	r1, [r7, #8]
 80102a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102a6:	f000 f9aa 	bl	80105fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80102ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b2:	d112      	bne.n	80102da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d016      	beq.n	80102ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102be:	3324      	adds	r3, #36	; 0x24
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 fecf 	bl	8011064 <xTaskRemoveFromEventList>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00e      	beq.n	80102ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d00b      	beq.n	80102ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2201      	movs	r2, #1
 80102d6:	601a      	str	r2, [r3, #0]
 80102d8:	e007      	b.n	80102ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102de:	3301      	adds	r3, #1
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	b25a      	sxtb	r2, r3
 80102e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80102ea:	2301      	movs	r3, #1
 80102ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80102ee:	e001      	b.n	80102f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	637b      	str	r3, [r7, #52]	; 0x34
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80102fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010300:	4618      	mov	r0, r3
 8010302:	3738      	adds	r7, #56	; 0x38
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b08c      	sub	sp, #48	; 0x30
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010314:	2300      	movs	r3, #0
 8010316:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	2b00      	cmp	r3, #0
 8010320:	d109      	bne.n	8010336 <xQueueReceive+0x2e>
	__asm volatile
 8010322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010326:	f383 8811 	msr	BASEPRI, r3
 801032a:	f3bf 8f6f 	isb	sy
 801032e:	f3bf 8f4f 	dsb	sy
 8010332:	623b      	str	r3, [r7, #32]
 8010334:	e7fe      	b.n	8010334 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d103      	bne.n	8010344 <xQueueReceive+0x3c>
 801033c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010340:	2b00      	cmp	r3, #0
 8010342:	d101      	bne.n	8010348 <xQueueReceive+0x40>
 8010344:	2301      	movs	r3, #1
 8010346:	e000      	b.n	801034a <xQueueReceive+0x42>
 8010348:	2300      	movs	r3, #0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d109      	bne.n	8010362 <xQueueReceive+0x5a>
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	61fb      	str	r3, [r7, #28]
 8010360:	e7fe      	b.n	8010360 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010362:	f001 f835 	bl	80113d0 <xTaskGetSchedulerState>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d102      	bne.n	8010372 <xQueueReceive+0x6a>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d101      	bne.n	8010376 <xQueueReceive+0x6e>
 8010372:	2301      	movs	r3, #1
 8010374:	e000      	b.n	8010378 <xQueueReceive+0x70>
 8010376:	2300      	movs	r3, #0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d109      	bne.n	8010390 <xQueueReceive+0x88>
 801037c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	61bb      	str	r3, [r7, #24]
 801038e:	e7fe      	b.n	801038e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010390:	f001 fa4c 	bl	801182c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010398:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039c:	2b00      	cmp	r3, #0
 801039e:	d01f      	beq.n	80103e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103a0:	68b9      	ldr	r1, [r7, #8]
 80103a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103a4:	f000 f995 	bl	80106d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	1e5a      	subs	r2, r3, #1
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b2:	691b      	ldr	r3, [r3, #16]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00f      	beq.n	80103d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ba:	3310      	adds	r3, #16
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 fe51 	bl	8011064 <xTaskRemoveFromEventList>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d007      	beq.n	80103d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80103c8:	4b3c      	ldr	r3, [pc, #240]	; (80104bc <xQueueReceive+0x1b4>)
 80103ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ce:	601a      	str	r2, [r3, #0]
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80103d8:	f001 fa56 	bl	8011888 <vPortExitCritical>
				return pdPASS;
 80103dc:	2301      	movs	r3, #1
 80103de:	e069      	b.n	80104b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d103      	bne.n	80103ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80103e6:	f001 fa4f 	bl	8011888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80103ea:	2300      	movs	r3, #0
 80103ec:	e062      	b.n	80104b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d106      	bne.n	8010402 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103f4:	f107 0310 	add.w	r3, r7, #16
 80103f8:	4618      	mov	r0, r3
 80103fa:	f000 fe95 	bl	8011128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103fe:	2301      	movs	r3, #1
 8010400:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010402:	f001 fa41 	bl	8011888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010406:	f000 fc2b 	bl	8010c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801040a:	f001 fa0f 	bl	801182c <vPortEnterCritical>
 801040e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010414:	b25b      	sxtb	r3, r3
 8010416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801041a:	d103      	bne.n	8010424 <xQueueReceive+0x11c>
 801041c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041e:	2200      	movs	r2, #0
 8010420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801042a:	b25b      	sxtb	r3, r3
 801042c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010430:	d103      	bne.n	801043a <xQueueReceive+0x132>
 8010432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010434:	2200      	movs	r2, #0
 8010436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801043a:	f001 fa25 	bl	8011888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801043e:	1d3a      	adds	r2, r7, #4
 8010440:	f107 0310 	add.w	r3, r7, #16
 8010444:	4611      	mov	r1, r2
 8010446:	4618      	mov	r0, r3
 8010448:	f000 fe84 	bl	8011154 <xTaskCheckForTimeOut>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d123      	bne.n	801049a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010454:	f000 f9b5 	bl	80107c2 <prvIsQueueEmpty>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d017      	beq.n	801048e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801045e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010460:	3324      	adds	r3, #36	; 0x24
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	4611      	mov	r1, r2
 8010466:	4618      	mov	r0, r3
 8010468:	f000 fdd8 	bl	801101c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801046c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801046e:	f000 f956 	bl	801071e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010472:	f000 fc03 	bl	8010c7c <xTaskResumeAll>
 8010476:	4603      	mov	r3, r0
 8010478:	2b00      	cmp	r3, #0
 801047a:	d189      	bne.n	8010390 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 801047c:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <xQueueReceive+0x1b4>)
 801047e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010482:	601a      	str	r2, [r3, #0]
 8010484:	f3bf 8f4f 	dsb	sy
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	e780      	b.n	8010390 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801048e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010490:	f000 f945 	bl	801071e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010494:	f000 fbf2 	bl	8010c7c <xTaskResumeAll>
 8010498:	e77a      	b.n	8010390 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801049a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801049c:	f000 f93f 	bl	801071e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104a0:	f000 fbec 	bl	8010c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104a6:	f000 f98c 	bl	80107c2 <prvIsQueueEmpty>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	f43f af6f 	beq.w	8010390 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80104b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3730      	adds	r7, #48	; 0x30
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	e000ed04 	.word	0xe000ed04

080104c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b08e      	sub	sp, #56	; 0x38
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	60b9      	str	r1, [r7, #8]
 80104ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80104d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d109      	bne.n	80104ea <xQueueReceiveFromISR+0x2a>
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	623b      	str	r3, [r7, #32]
 80104e8:	e7fe      	b.n	80104e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d103      	bne.n	80104f8 <xQueueReceiveFromISR+0x38>
 80104f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d101      	bne.n	80104fc <xQueueReceiveFromISR+0x3c>
 80104f8:	2301      	movs	r3, #1
 80104fa:	e000      	b.n	80104fe <xQueueReceiveFromISR+0x3e>
 80104fc:	2300      	movs	r3, #0
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d109      	bne.n	8010516 <xQueueReceiveFromISR+0x56>
 8010502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010506:	f383 8811 	msr	BASEPRI, r3
 801050a:	f3bf 8f6f 	isb	sy
 801050e:	f3bf 8f4f 	dsb	sy
 8010512:	61fb      	str	r3, [r7, #28]
 8010514:	e7fe      	b.n	8010514 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010516:	f001 fa65 	bl	80119e4 <vPortValidateInterruptPriority>
	__asm volatile
 801051a:	f3ef 8211 	mrs	r2, BASEPRI
 801051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010522:	f383 8811 	msr	BASEPRI, r3
 8010526:	f3bf 8f6f 	isb	sy
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	61ba      	str	r2, [r7, #24]
 8010530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010532:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801053a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801053c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053e:	2b00      	cmp	r3, #0
 8010540:	d02f      	beq.n	80105a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801054c:	68b9      	ldr	r1, [r7, #8]
 801054e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010550:	f000 f8bf 	bl	80106d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	1e5a      	subs	r2, r3, #1
 8010558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801055c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010564:	d112      	bne.n	801058c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010568:	691b      	ldr	r3, [r3, #16]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d016      	beq.n	801059c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	3310      	adds	r3, #16
 8010572:	4618      	mov	r0, r3
 8010574:	f000 fd76 	bl	8011064 <xTaskRemoveFromEventList>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00e      	beq.n	801059c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00b      	beq.n	801059c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	601a      	str	r2, [r3, #0]
 801058a:	e007      	b.n	801059c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801058c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010590:	3301      	adds	r3, #1
 8010592:	b2db      	uxtb	r3, r3
 8010594:	b25a      	sxtb	r2, r3
 8010596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801059c:	2301      	movs	r3, #1
 801059e:	637b      	str	r3, [r7, #52]	; 0x34
 80105a0:	e001      	b.n	80105a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	637b      	str	r3, [r7, #52]	; 0x34
 80105a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3738      	adds	r7, #56	; 0x38
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b086      	sub	sp, #24
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d109      	bne.n	80105e0 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 80105cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d0:	f383 8811 	msr	BASEPRI, r3
 80105d4:	f3bf 8f6f 	isb	sy
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	60fb      	str	r3, [r7, #12]
 80105de:	e7fe      	b.n	80105de <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 80105e0:	f001 f924 	bl	801182c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ec:	1ad3      	subs	r3, r2, r3
 80105ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80105f0:	f001 f94a 	bl	8011888 <vPortExitCritical>

	return uxReturn;
 80105f4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80105f6:	4618      	mov	r0, r3
 80105f8:	3718      	adds	r7, #24
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b086      	sub	sp, #24
 8010602:	af00      	add	r7, sp, #0
 8010604:	60f8      	str	r0, [r7, #12]
 8010606:	60b9      	str	r1, [r7, #8]
 8010608:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801060a:	2300      	movs	r3, #0
 801060c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010612:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010618:	2b00      	cmp	r3, #0
 801061a:	d10d      	bne.n	8010638 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d14d      	bne.n	80106c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	4618      	mov	r0, r3
 801062a:	f000 feef 	bl	801140c <xTaskPriorityDisinherit>
 801062e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2200      	movs	r2, #0
 8010634:	609a      	str	r2, [r3, #8]
 8010636:	e043      	b.n	80106c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d119      	bne.n	8010672 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6858      	ldr	r0, [r3, #4]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010646:	461a      	mov	r2, r3
 8010648:	68b9      	ldr	r1, [r7, #8]
 801064a:	f002 f9bd 	bl	80129c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	685a      	ldr	r2, [r3, #4]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010656:	441a      	add	r2, r3
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	685a      	ldr	r2, [r3, #4]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	689b      	ldr	r3, [r3, #8]
 8010664:	429a      	cmp	r2, r3
 8010666:	d32b      	bcc.n	80106c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	605a      	str	r2, [r3, #4]
 8010670:	e026      	b.n	80106c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	68d8      	ldr	r0, [r3, #12]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801067a:	461a      	mov	r2, r3
 801067c:	68b9      	ldr	r1, [r7, #8]
 801067e:	f002 f9a3 	bl	80129c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	68da      	ldr	r2, [r3, #12]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801068a:	425b      	negs	r3, r3
 801068c:	441a      	add	r2, r3
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	68da      	ldr	r2, [r3, #12]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	429a      	cmp	r2, r3
 801069c:	d207      	bcs.n	80106ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	689a      	ldr	r2, [r3, #8]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a6:	425b      	negs	r3, r3
 80106a8:	441a      	add	r2, r3
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b02      	cmp	r3, #2
 80106b2:	d105      	bne.n	80106c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	3b01      	subs	r3, #1
 80106be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	1c5a      	adds	r2, r3, #1
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80106c8:	697b      	ldr	r3, [r7, #20]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3718      	adds	r7, #24
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b082      	sub	sp, #8
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
 80106da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d018      	beq.n	8010716 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	68da      	ldr	r2, [r3, #12]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ec:	441a      	add	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	68da      	ldr	r2, [r3, #12]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	689b      	ldr	r3, [r3, #8]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d303      	bcc.n	8010706 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	68d9      	ldr	r1, [r3, #12]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801070e:	461a      	mov	r2, r3
 8010710:	6838      	ldr	r0, [r7, #0]
 8010712:	f002 f959 	bl	80129c8 <memcpy>
	}
}
 8010716:	bf00      	nop
 8010718:	3708      	adds	r7, #8
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b084      	sub	sp, #16
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010726:	f001 f881 	bl	801182c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010730:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010732:	e011      	b.n	8010758 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010738:	2b00      	cmp	r3, #0
 801073a:	d012      	beq.n	8010762 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3324      	adds	r3, #36	; 0x24
 8010740:	4618      	mov	r0, r3
 8010742:	f000 fc8f 	bl	8011064 <xTaskRemoveFromEventList>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d001      	beq.n	8010750 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801074c:	f000 fd62 	bl	8011214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010750:	7bfb      	ldrb	r3, [r7, #15]
 8010752:	3b01      	subs	r3, #1
 8010754:	b2db      	uxtb	r3, r3
 8010756:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801075c:	2b00      	cmp	r3, #0
 801075e:	dce9      	bgt.n	8010734 <prvUnlockQueue+0x16>
 8010760:	e000      	b.n	8010764 <prvUnlockQueue+0x46>
					break;
 8010762:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	22ff      	movs	r2, #255	; 0xff
 8010768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801076c:	f001 f88c 	bl	8011888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010770:	f001 f85c 	bl	801182c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801077a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801077c:	e011      	b.n	80107a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d012      	beq.n	80107ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3310      	adds	r3, #16
 801078a:	4618      	mov	r0, r3
 801078c:	f000 fc6a 	bl	8011064 <xTaskRemoveFromEventList>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d001      	beq.n	801079a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010796:	f000 fd3d 	bl	8011214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801079a:	7bbb      	ldrb	r3, [r7, #14]
 801079c:	3b01      	subs	r3, #1
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80107a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	dce9      	bgt.n	801077e <prvUnlockQueue+0x60>
 80107aa:	e000      	b.n	80107ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80107ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	22ff      	movs	r2, #255	; 0xff
 80107b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80107b6:	f001 f867 	bl	8011888 <vPortExitCritical>
}
 80107ba:	bf00      	nop
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b084      	sub	sp, #16
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80107ca:	f001 f82f 	bl	801182c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d102      	bne.n	80107dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80107d6:	2301      	movs	r3, #1
 80107d8:	60fb      	str	r3, [r7, #12]
 80107da:	e001      	b.n	80107e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80107dc:	2300      	movs	r3, #0
 80107de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80107e0:	f001 f852 	bl	8011888 <vPortExitCritical>

	return xReturn;
 80107e4:	68fb      	ldr	r3, [r7, #12]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b084      	sub	sp, #16
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80107f6:	f001 f819 	bl	801182c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010802:	429a      	cmp	r2, r3
 8010804:	d102      	bne.n	801080c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010806:	2301      	movs	r3, #1
 8010808:	60fb      	str	r3, [r7, #12]
 801080a:	e001      	b.n	8010810 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801080c:	2300      	movs	r3, #0
 801080e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010810:	f001 f83a 	bl	8011888 <vPortExitCritical>

	return xReturn;
 8010814:	68fb      	ldr	r3, [r7, #12]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801081e:	b580      	push	{r7, lr}
 8010820:	b08e      	sub	sp, #56	; 0x38
 8010822:	af04      	add	r7, sp, #16
 8010824:	60f8      	str	r0, [r7, #12]
 8010826:	60b9      	str	r1, [r7, #8]
 8010828:	607a      	str	r2, [r7, #4]
 801082a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082e:	2b00      	cmp	r3, #0
 8010830:	d109      	bne.n	8010846 <xTaskCreateStatic+0x28>
 8010832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010836:	f383 8811 	msr	BASEPRI, r3
 801083a:	f3bf 8f6f 	isb	sy
 801083e:	f3bf 8f4f 	dsb	sy
 8010842:	623b      	str	r3, [r7, #32]
 8010844:	e7fe      	b.n	8010844 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010848:	2b00      	cmp	r3, #0
 801084a:	d109      	bne.n	8010860 <xTaskCreateStatic+0x42>
 801084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010850:	f383 8811 	msr	BASEPRI, r3
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	f3bf 8f4f 	dsb	sy
 801085c:	61fb      	str	r3, [r7, #28]
 801085e:	e7fe      	b.n	801085e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010860:	2354      	movs	r3, #84	; 0x54
 8010862:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	2b54      	cmp	r3, #84	; 0x54
 8010868:	d009      	beq.n	801087e <xTaskCreateStatic+0x60>
 801086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086e:	f383 8811 	msr	BASEPRI, r3
 8010872:	f3bf 8f6f 	isb	sy
 8010876:	f3bf 8f4f 	dsb	sy
 801087a:	61bb      	str	r3, [r7, #24]
 801087c:	e7fe      	b.n	801087c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801087e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010882:	2b00      	cmp	r3, #0
 8010884:	d01e      	beq.n	80108c4 <xTaskCreateStatic+0xa6>
 8010886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010888:	2b00      	cmp	r3, #0
 801088a:	d01b      	beq.n	80108c4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010894:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010898:	2202      	movs	r2, #2
 801089a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801089e:	2300      	movs	r3, #0
 80108a0:	9303      	str	r3, [sp, #12]
 80108a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a4:	9302      	str	r3, [sp, #8]
 80108a6:	f107 0314 	add.w	r3, r7, #20
 80108aa:	9301      	str	r3, [sp, #4]
 80108ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	68b9      	ldr	r1, [r7, #8]
 80108b6:	68f8      	ldr	r0, [r7, #12]
 80108b8:	f000 f850 	bl	801095c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80108bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108be:	f000 f8d3 	bl	8010a68 <prvAddNewTaskToReadyList>
 80108c2:	e001      	b.n	80108c8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80108c4:	2300      	movs	r3, #0
 80108c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80108c8:	697b      	ldr	r3, [r7, #20]
	}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3728      	adds	r7, #40	; 0x28
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b08c      	sub	sp, #48	; 0x30
 80108d6:	af04      	add	r7, sp, #16
 80108d8:	60f8      	str	r0, [r7, #12]
 80108da:	60b9      	str	r1, [r7, #8]
 80108dc:	603b      	str	r3, [r7, #0]
 80108de:	4613      	mov	r3, r2
 80108e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80108e2:	88fb      	ldrh	r3, [r7, #6]
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	4618      	mov	r0, r3
 80108e8:	f001 f8ba 	bl	8011a60 <pvPortMalloc>
 80108ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00e      	beq.n	8010912 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80108f4:	2054      	movs	r0, #84	; 0x54
 80108f6:	f001 f8b3 	bl	8011a60 <pvPortMalloc>
 80108fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d003      	beq.n	801090a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	697a      	ldr	r2, [r7, #20]
 8010906:	631a      	str	r2, [r3, #48]	; 0x30
 8010908:	e005      	b.n	8010916 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801090a:	6978      	ldr	r0, [r7, #20]
 801090c:	f001 f96a 	bl	8011be4 <vPortFree>
 8010910:	e001      	b.n	8010916 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010912:	2300      	movs	r3, #0
 8010914:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d017      	beq.n	801094c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010924:	88fa      	ldrh	r2, [r7, #6]
 8010926:	2300      	movs	r3, #0
 8010928:	9303      	str	r3, [sp, #12]
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	9302      	str	r3, [sp, #8]
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	68b9      	ldr	r1, [r7, #8]
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f000 f80e 	bl	801095c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010940:	69f8      	ldr	r0, [r7, #28]
 8010942:	f000 f891 	bl	8010a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010946:	2301      	movs	r3, #1
 8010948:	61bb      	str	r3, [r7, #24]
 801094a:	e002      	b.n	8010952 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801094c:	f04f 33ff 	mov.w	r3, #4294967295
 8010950:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010952:	69bb      	ldr	r3, [r7, #24]
	}
 8010954:	4618      	mov	r0, r3
 8010956:	3720      	adds	r7, #32
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b088      	sub	sp, #32
 8010960:	af00      	add	r7, sp, #0
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	60b9      	str	r1, [r7, #8]
 8010966:	607a      	str	r2, [r7, #4]
 8010968:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010974:	3b01      	subs	r3, #1
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	f023 0307 	bic.w	r3, r3, #7
 8010982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	f003 0307 	and.w	r3, r3, #7
 801098a:	2b00      	cmp	r3, #0
 801098c:	d009      	beq.n	80109a2 <prvInitialiseNewTask+0x46>
 801098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010992:	f383 8811 	msr	BASEPRI, r3
 8010996:	f3bf 8f6f 	isb	sy
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	617b      	str	r3, [r7, #20]
 80109a0:	e7fe      	b.n	80109a0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d01f      	beq.n	80109e8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80109a8:	2300      	movs	r3, #0
 80109aa:	61fb      	str	r3, [r7, #28]
 80109ac:	e012      	b.n	80109d4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	4413      	add	r3, r2
 80109b4:	7819      	ldrb	r1, [r3, #0]
 80109b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	4413      	add	r3, r2
 80109bc:	3334      	adds	r3, #52	; 0x34
 80109be:	460a      	mov	r2, r1
 80109c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	4413      	add	r3, r2
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d006      	beq.n	80109dc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	3301      	adds	r3, #1
 80109d2:	61fb      	str	r3, [r7, #28]
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	2b0f      	cmp	r3, #15
 80109d8:	d9e9      	bls.n	80109ae <prvInitialiseNewTask+0x52>
 80109da:	e000      	b.n	80109de <prvInitialiseNewTask+0x82>
			{
				break;
 80109dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	2200      	movs	r2, #0
 80109e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109e6:	e003      	b.n	80109f0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80109e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ea:	2200      	movs	r2, #0
 80109ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80109f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f2:	2b06      	cmp	r3, #6
 80109f4:	d901      	bls.n	80109fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80109f6:	2306      	movs	r3, #6
 80109f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80109fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a04:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a08:	2200      	movs	r2, #0
 8010a0a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0e:	3304      	adds	r3, #4
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7ff f91d 	bl	800fc50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	3318      	adds	r3, #24
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7ff f918 	bl	800fc50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a28:	f1c3 0207 	rsb	r2, r3, #7
 8010a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	2200      	movs	r2, #0
 8010a3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	68f9      	ldr	r1, [r7, #12]
 8010a48:	69b8      	ldr	r0, [r7, #24]
 8010a4a:	f000 fdc9 	bl	80115e0 <pxPortInitialiseStack>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a60:	bf00      	nop
 8010a62:	3720      	adds	r7, #32
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010a70:	f000 fedc 	bl	801182c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010a74:	4b2a      	ldr	r3, [pc, #168]	; (8010b20 <prvAddNewTaskToReadyList+0xb8>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	4a29      	ldr	r2, [pc, #164]	; (8010b20 <prvAddNewTaskToReadyList+0xb8>)
 8010a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010a7e:	4b29      	ldr	r3, [pc, #164]	; (8010b24 <prvAddNewTaskToReadyList+0xbc>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d109      	bne.n	8010a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010a86:	4a27      	ldr	r2, [pc, #156]	; (8010b24 <prvAddNewTaskToReadyList+0xbc>)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a8c:	4b24      	ldr	r3, [pc, #144]	; (8010b20 <prvAddNewTaskToReadyList+0xb8>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d110      	bne.n	8010ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010a94:	f000 fbe2 	bl	801125c <prvInitialiseTaskLists>
 8010a98:	e00d      	b.n	8010ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010a9a:	4b23      	ldr	r3, [pc, #140]	; (8010b28 <prvAddNewTaskToReadyList+0xc0>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d109      	bne.n	8010ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010aa2:	4b20      	ldr	r3, [pc, #128]	; (8010b24 <prvAddNewTaskToReadyList+0xbc>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d802      	bhi.n	8010ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010ab0:	4a1c      	ldr	r2, [pc, #112]	; (8010b24 <prvAddNewTaskToReadyList+0xbc>)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010ab6:	4b1d      	ldr	r3, [pc, #116]	; (8010b2c <prvAddNewTaskToReadyList+0xc4>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3301      	adds	r3, #1
 8010abc:	4a1b      	ldr	r2, [pc, #108]	; (8010b2c <prvAddNewTaskToReadyList+0xc4>)
 8010abe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	409a      	lsls	r2, r3
 8010ac8:	4b19      	ldr	r3, [pc, #100]	; (8010b30 <prvAddNewTaskToReadyList+0xc8>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4313      	orrs	r3, r2
 8010ace:	4a18      	ldr	r2, [pc, #96]	; (8010b30 <prvAddNewTaskToReadyList+0xc8>)
 8010ad0:	6013      	str	r3, [r2, #0]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ad6:	4613      	mov	r3, r2
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	4413      	add	r3, r2
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4a15      	ldr	r2, [pc, #84]	; (8010b34 <prvAddNewTaskToReadyList+0xcc>)
 8010ae0:	441a      	add	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	3304      	adds	r3, #4
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4610      	mov	r0, r2
 8010aea:	f7ff f8be 	bl	800fc6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010aee:	f000 fecb 	bl	8011888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010af2:	4b0d      	ldr	r3, [pc, #52]	; (8010b28 <prvAddNewTaskToReadyList+0xc0>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00e      	beq.n	8010b18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010afa:	4b0a      	ldr	r3, [pc, #40]	; (8010b24 <prvAddNewTaskToReadyList+0xbc>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d207      	bcs.n	8010b18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010b08:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <prvAddNewTaskToReadyList+0xd0>)
 8010b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b0e:	601a      	str	r2, [r3, #0]
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b18:	bf00      	nop
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	20000994 	.word	0x20000994
 8010b24:	20000894 	.word	0x20000894
 8010b28:	200009a0 	.word	0x200009a0
 8010b2c:	200009b0 	.word	0x200009b0
 8010b30:	2000099c 	.word	0x2000099c
 8010b34:	20000898 	.word	0x20000898
 8010b38:	e000ed04 	.word	0xe000ed04

08010b3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010b44:	2300      	movs	r3, #0
 8010b46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d016      	beq.n	8010b7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b4e:	4b13      	ldr	r3, [pc, #76]	; (8010b9c <vTaskDelay+0x60>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d009      	beq.n	8010b6a <vTaskDelay+0x2e>
 8010b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5a:	f383 8811 	msr	BASEPRI, r3
 8010b5e:	f3bf 8f6f 	isb	sy
 8010b62:	f3bf 8f4f 	dsb	sy
 8010b66:	60bb      	str	r3, [r7, #8]
 8010b68:	e7fe      	b.n	8010b68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010b6a:	f000 f879 	bl	8010c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b6e:	2100      	movs	r1, #0
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 fccf 	bl	8011514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010b76:	f000 f881 	bl	8010c7c <xTaskResumeAll>
 8010b7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d107      	bne.n	8010b92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010b82:	4b07      	ldr	r3, [pc, #28]	; (8010ba0 <vTaskDelay+0x64>)
 8010b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b92:	bf00      	nop
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	200009bc 	.word	0x200009bc
 8010ba0:	e000ed04 	.word	0xe000ed04

08010ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b08a      	sub	sp, #40	; 0x28
 8010ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010baa:	2300      	movs	r3, #0
 8010bac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bb2:	463a      	mov	r2, r7
 8010bb4:	1d39      	adds	r1, r7, #4
 8010bb6:	f107 0308 	add.w	r3, r7, #8
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7f2 f958 	bl	8002e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	9202      	str	r2, [sp, #8]
 8010bc8:	9301      	str	r3, [sp, #4]
 8010bca:	2300      	movs	r3, #0
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	2300      	movs	r3, #0
 8010bd0:	460a      	mov	r2, r1
 8010bd2:	491d      	ldr	r1, [pc, #116]	; (8010c48 <vTaskStartScheduler+0xa4>)
 8010bd4:	481d      	ldr	r0, [pc, #116]	; (8010c4c <vTaskStartScheduler+0xa8>)
 8010bd6:	f7ff fe22 	bl	801081e <xTaskCreateStatic>
 8010bda:	4602      	mov	r2, r0
 8010bdc:	4b1c      	ldr	r3, [pc, #112]	; (8010c50 <vTaskStartScheduler+0xac>)
 8010bde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010be0:	4b1b      	ldr	r3, [pc, #108]	; (8010c50 <vTaskStartScheduler+0xac>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010be8:	2301      	movs	r3, #1
 8010bea:	617b      	str	r3, [r7, #20]
 8010bec:	e001      	b.n	8010bf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d115      	bne.n	8010c24 <vTaskStartScheduler+0x80>
 8010bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010c0a:	4b12      	ldr	r3, [pc, #72]	; (8010c54 <vTaskStartScheduler+0xb0>)
 8010c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010c12:	4b11      	ldr	r3, [pc, #68]	; (8010c58 <vTaskStartScheduler+0xb4>)
 8010c14:	2201      	movs	r2, #1
 8010c16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010c18:	4b10      	ldr	r3, [pc, #64]	; (8010c5c <vTaskStartScheduler+0xb8>)
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010c1e:	f000 fd67 	bl	80116f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010c22:	e00d      	b.n	8010c40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2a:	d109      	bne.n	8010c40 <vTaskStartScheduler+0x9c>
 8010c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c30:	f383 8811 	msr	BASEPRI, r3
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	f3bf 8f4f 	dsb	sy
 8010c3c:	60fb      	str	r3, [r7, #12]
 8010c3e:	e7fe      	b.n	8010c3e <vTaskStartScheduler+0x9a>
}
 8010c40:	bf00      	nop
 8010c42:	3718      	adds	r7, #24
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	080185b8 	.word	0x080185b8
 8010c4c:	0801122d 	.word	0x0801122d
 8010c50:	200009b8 	.word	0x200009b8
 8010c54:	200009b4 	.word	0x200009b4
 8010c58:	200009a0 	.word	0x200009a0
 8010c5c:	20000998 	.word	0x20000998

08010c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c60:	b480      	push	{r7}
 8010c62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010c64:	4b04      	ldr	r3, [pc, #16]	; (8010c78 <vTaskSuspendAll+0x18>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	4a03      	ldr	r2, [pc, #12]	; (8010c78 <vTaskSuspendAll+0x18>)
 8010c6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010c6e:	bf00      	nop
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr
 8010c78:	200009bc 	.word	0x200009bc

08010c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c86:	2300      	movs	r3, #0
 8010c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c8a:	4b41      	ldr	r3, [pc, #260]	; (8010d90 <xTaskResumeAll+0x114>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d109      	bne.n	8010ca6 <xTaskResumeAll+0x2a>
 8010c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c96:	f383 8811 	msr	BASEPRI, r3
 8010c9a:	f3bf 8f6f 	isb	sy
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	603b      	str	r3, [r7, #0]
 8010ca4:	e7fe      	b.n	8010ca4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010ca6:	f000 fdc1 	bl	801182c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010caa:	4b39      	ldr	r3, [pc, #228]	; (8010d90 <xTaskResumeAll+0x114>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	3b01      	subs	r3, #1
 8010cb0:	4a37      	ldr	r2, [pc, #220]	; (8010d90 <xTaskResumeAll+0x114>)
 8010cb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cb4:	4b36      	ldr	r3, [pc, #216]	; (8010d90 <xTaskResumeAll+0x114>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d161      	bne.n	8010d80 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010cbc:	4b35      	ldr	r3, [pc, #212]	; (8010d94 <xTaskResumeAll+0x118>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d05d      	beq.n	8010d80 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cc4:	e02e      	b.n	8010d24 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cc6:	4b34      	ldr	r3, [pc, #208]	; (8010d98 <xTaskResumeAll+0x11c>)
 8010cc8:	68db      	ldr	r3, [r3, #12]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3318      	adds	r3, #24
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7ff f826 	bl	800fd24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	3304      	adds	r3, #4
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff f821 	bl	800fd24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	409a      	lsls	r2, r3
 8010cea:	4b2c      	ldr	r3, [pc, #176]	; (8010d9c <xTaskResumeAll+0x120>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	4a2a      	ldr	r2, [pc, #168]	; (8010d9c <xTaskResumeAll+0x120>)
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4a27      	ldr	r2, [pc, #156]	; (8010da0 <xTaskResumeAll+0x124>)
 8010d02:	441a      	add	r2, r3
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	3304      	adds	r3, #4
 8010d08:	4619      	mov	r1, r3
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	f7fe ffad 	bl	800fc6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d14:	4b23      	ldr	r3, [pc, #140]	; (8010da4 <xTaskResumeAll+0x128>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d302      	bcc.n	8010d24 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8010d1e:	4b22      	ldr	r3, [pc, #136]	; (8010da8 <xTaskResumeAll+0x12c>)
 8010d20:	2201      	movs	r2, #1
 8010d22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d24:	4b1c      	ldr	r3, [pc, #112]	; (8010d98 <xTaskResumeAll+0x11c>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d1cc      	bne.n	8010cc6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d001      	beq.n	8010d36 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d32:	f000 fb2d 	bl	8011390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010d36:	4b1d      	ldr	r3, [pc, #116]	; (8010dac <xTaskResumeAll+0x130>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d010      	beq.n	8010d64 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d42:	f000 f859 	bl	8010df8 <xTaskIncrementTick>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d002      	beq.n	8010d52 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8010d4c:	4b16      	ldr	r3, [pc, #88]	; (8010da8 <xTaskResumeAll+0x12c>)
 8010d4e:	2201      	movs	r2, #1
 8010d50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1f1      	bne.n	8010d42 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8010d5e:	4b13      	ldr	r3, [pc, #76]	; (8010dac <xTaskResumeAll+0x130>)
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010d64:	4b10      	ldr	r3, [pc, #64]	; (8010da8 <xTaskResumeAll+0x12c>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d009      	beq.n	8010d80 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d70:	4b0f      	ldr	r3, [pc, #60]	; (8010db0 <xTaskResumeAll+0x134>)
 8010d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d76:	601a      	str	r2, [r3, #0]
 8010d78:	f3bf 8f4f 	dsb	sy
 8010d7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d80:	f000 fd82 	bl	8011888 <vPortExitCritical>

	return xAlreadyYielded;
 8010d84:	68bb      	ldr	r3, [r7, #8]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	200009bc 	.word	0x200009bc
 8010d94:	20000994 	.word	0x20000994
 8010d98:	20000954 	.word	0x20000954
 8010d9c:	2000099c 	.word	0x2000099c
 8010da0:	20000898 	.word	0x20000898
 8010da4:	20000894 	.word	0x20000894
 8010da8:	200009a8 	.word	0x200009a8
 8010dac:	200009a4 	.word	0x200009a4
 8010db0:	e000ed04 	.word	0xe000ed04

08010db4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010dba:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <xTaskGetTickCount+0x1c>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010dc0:	687b      	ldr	r3, [r7, #4]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop
 8010dd0:	20000998 	.word	0x20000998

08010dd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dda:	f000 fe03 	bl	80119e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010dde:	2300      	movs	r3, #0
 8010de0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010de2:	4b04      	ldr	r3, [pc, #16]	; (8010df4 <xTaskGetTickCountFromISR+0x20>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010de8:	683b      	ldr	r3, [r7, #0]
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3708      	adds	r7, #8
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	20000998 	.word	0x20000998

08010df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e02:	4b4e      	ldr	r3, [pc, #312]	; (8010f3c <xTaskIncrementTick+0x144>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f040 8087 	bne.w	8010f1a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e0c:	4b4c      	ldr	r3, [pc, #304]	; (8010f40 <xTaskIncrementTick+0x148>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	3301      	adds	r3, #1
 8010e12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e14:	4a4a      	ldr	r2, [pc, #296]	; (8010f40 <xTaskIncrementTick+0x148>)
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d11f      	bne.n	8010e60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e20:	4b48      	ldr	r3, [pc, #288]	; (8010f44 <xTaskIncrementTick+0x14c>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d009      	beq.n	8010e3e <xTaskIncrementTick+0x46>
 8010e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2e:	f383 8811 	msr	BASEPRI, r3
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	603b      	str	r3, [r7, #0]
 8010e3c:	e7fe      	b.n	8010e3c <xTaskIncrementTick+0x44>
 8010e3e:	4b41      	ldr	r3, [pc, #260]	; (8010f44 <xTaskIncrementTick+0x14c>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	60fb      	str	r3, [r7, #12]
 8010e44:	4b40      	ldr	r3, [pc, #256]	; (8010f48 <xTaskIncrementTick+0x150>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4a3e      	ldr	r2, [pc, #248]	; (8010f44 <xTaskIncrementTick+0x14c>)
 8010e4a:	6013      	str	r3, [r2, #0]
 8010e4c:	4a3e      	ldr	r2, [pc, #248]	; (8010f48 <xTaskIncrementTick+0x150>)
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6013      	str	r3, [r2, #0]
 8010e52:	4b3e      	ldr	r3, [pc, #248]	; (8010f4c <xTaskIncrementTick+0x154>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	3301      	adds	r3, #1
 8010e58:	4a3c      	ldr	r2, [pc, #240]	; (8010f4c <xTaskIncrementTick+0x154>)
 8010e5a:	6013      	str	r3, [r2, #0]
 8010e5c:	f000 fa98 	bl	8011390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e60:	4b3b      	ldr	r3, [pc, #236]	; (8010f50 <xTaskIncrementTick+0x158>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d348      	bcc.n	8010efc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e6a:	4b36      	ldr	r3, [pc, #216]	; (8010f44 <xTaskIncrementTick+0x14c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d104      	bne.n	8010e7e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e74:	4b36      	ldr	r3, [pc, #216]	; (8010f50 <xTaskIncrementTick+0x158>)
 8010e76:	f04f 32ff 	mov.w	r2, #4294967295
 8010e7a:	601a      	str	r2, [r3, #0]
					break;
 8010e7c:	e03e      	b.n	8010efc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e7e:	4b31      	ldr	r3, [pc, #196]	; (8010f44 <xTaskIncrementTick+0x14c>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e8e:	693a      	ldr	r2, [r7, #16]
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d203      	bcs.n	8010e9e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e96:	4a2e      	ldr	r2, [pc, #184]	; (8010f50 <xTaskIncrementTick+0x158>)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e9c:	e02e      	b.n	8010efc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	3304      	adds	r3, #4
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fe ff3e 	bl	800fd24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	3318      	adds	r3, #24
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fe ff35 	bl	800fd24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	409a      	lsls	r2, r3
 8010ec2:	4b24      	ldr	r3, [pc, #144]	; (8010f54 <xTaskIncrementTick+0x15c>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	4a22      	ldr	r2, [pc, #136]	; (8010f54 <xTaskIncrementTick+0x15c>)
 8010eca:	6013      	str	r3, [r2, #0]
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	4413      	add	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4a1f      	ldr	r2, [pc, #124]	; (8010f58 <xTaskIncrementTick+0x160>)
 8010eda:	441a      	add	r2, r3
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	3304      	adds	r3, #4
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	4610      	mov	r0, r2
 8010ee4:	f7fe fec1 	bl	800fc6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eec:	4b1b      	ldr	r3, [pc, #108]	; (8010f5c <xTaskIncrementTick+0x164>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d3b9      	bcc.n	8010e6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010efa:	e7b6      	b.n	8010e6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010efc:	4b17      	ldr	r3, [pc, #92]	; (8010f5c <xTaskIncrementTick+0x164>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f02:	4915      	ldr	r1, [pc, #84]	; (8010f58 <xTaskIncrementTick+0x160>)
 8010f04:	4613      	mov	r3, r2
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	4413      	add	r3, r2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	440b      	add	r3, r1
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d907      	bls.n	8010f24 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8010f14:	2301      	movs	r3, #1
 8010f16:	617b      	str	r3, [r7, #20]
 8010f18:	e004      	b.n	8010f24 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010f1a:	4b11      	ldr	r3, [pc, #68]	; (8010f60 <xTaskIncrementTick+0x168>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	4a0f      	ldr	r2, [pc, #60]	; (8010f60 <xTaskIncrementTick+0x168>)
 8010f22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010f24:	4b0f      	ldr	r3, [pc, #60]	; (8010f64 <xTaskIncrementTick+0x16c>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d001      	beq.n	8010f30 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010f30:	697b      	ldr	r3, [r7, #20]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3718      	adds	r7, #24
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	200009bc 	.word	0x200009bc
 8010f40:	20000998 	.word	0x20000998
 8010f44:	2000094c 	.word	0x2000094c
 8010f48:	20000950 	.word	0x20000950
 8010f4c:	200009ac 	.word	0x200009ac
 8010f50:	200009b4 	.word	0x200009b4
 8010f54:	2000099c 	.word	0x2000099c
 8010f58:	20000898 	.word	0x20000898
 8010f5c:	20000894 	.word	0x20000894
 8010f60:	200009a4 	.word	0x200009a4
 8010f64:	200009a8 	.word	0x200009a8

08010f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b087      	sub	sp, #28
 8010f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f6e:	4b26      	ldr	r3, [pc, #152]	; (8011008 <vTaskSwitchContext+0xa0>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d003      	beq.n	8010f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f76:	4b25      	ldr	r3, [pc, #148]	; (801100c <vTaskSwitchContext+0xa4>)
 8010f78:	2201      	movs	r2, #1
 8010f7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f7c:	e03e      	b.n	8010ffc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010f7e:	4b23      	ldr	r3, [pc, #140]	; (801100c <vTaskSwitchContext+0xa4>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f84:	4b22      	ldr	r3, [pc, #136]	; (8011010 <vTaskSwitchContext+0xa8>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	fab3 f383 	clz	r3, r3
 8010f90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010f92:	7afb      	ldrb	r3, [r7, #11]
 8010f94:	f1c3 031f 	rsb	r3, r3, #31
 8010f98:	617b      	str	r3, [r7, #20]
 8010f9a:	491e      	ldr	r1, [pc, #120]	; (8011014 <vTaskSwitchContext+0xac>)
 8010f9c:	697a      	ldr	r2, [r7, #20]
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	4413      	add	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	440b      	add	r3, r1
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d109      	bne.n	8010fc2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8010fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	607b      	str	r3, [r7, #4]
 8010fc0:	e7fe      	b.n	8010fc0 <vTaskSwitchContext+0x58>
 8010fc2:	697a      	ldr	r2, [r7, #20]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	4413      	add	r3, r2
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	4a11      	ldr	r2, [pc, #68]	; (8011014 <vTaskSwitchContext+0xac>)
 8010fce:	4413      	add	r3, r2
 8010fd0:	613b      	str	r3, [r7, #16]
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	685a      	ldr	r2, [r3, #4]
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	605a      	str	r2, [r3, #4]
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	685a      	ldr	r2, [r3, #4]
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	3308      	adds	r3, #8
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d104      	bne.n	8010ff2 <vTaskSwitchContext+0x8a>
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	685a      	ldr	r2, [r3, #4]
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	605a      	str	r2, [r3, #4]
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	4a07      	ldr	r2, [pc, #28]	; (8011018 <vTaskSwitchContext+0xb0>)
 8010ffa:	6013      	str	r3, [r2, #0]
}
 8010ffc:	bf00      	nop
 8010ffe:	371c      	adds	r7, #28
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr
 8011008:	200009bc 	.word	0x200009bc
 801100c:	200009a8 	.word	0x200009a8
 8011010:	2000099c 	.word	0x2000099c
 8011014:	20000898 	.word	0x20000898
 8011018:	20000894 	.word	0x20000894

0801101c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d109      	bne.n	8011040 <vTaskPlaceOnEventList+0x24>
 801102c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011030:	f383 8811 	msr	BASEPRI, r3
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	f3bf 8f4f 	dsb	sy
 801103c:	60fb      	str	r3, [r7, #12]
 801103e:	e7fe      	b.n	801103e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011040:	4b07      	ldr	r3, [pc, #28]	; (8011060 <vTaskPlaceOnEventList+0x44>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	3318      	adds	r3, #24
 8011046:	4619      	mov	r1, r3
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f7fe fe32 	bl	800fcb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801104e:	2101      	movs	r1, #1
 8011050:	6838      	ldr	r0, [r7, #0]
 8011052:	f000 fa5f 	bl	8011514 <prvAddCurrentTaskToDelayedList>
}
 8011056:	bf00      	nop
 8011058:	3710      	adds	r7, #16
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	20000894 	.word	0x20000894

08011064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	68db      	ldr	r3, [r3, #12]
 8011072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d109      	bne.n	801108e <xTaskRemoveFromEventList+0x2a>
 801107a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107e:	f383 8811 	msr	BASEPRI, r3
 8011082:	f3bf 8f6f 	isb	sy
 8011086:	f3bf 8f4f 	dsb	sy
 801108a:	60fb      	str	r3, [r7, #12]
 801108c:	e7fe      	b.n	801108c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	3318      	adds	r3, #24
 8011092:	4618      	mov	r0, r3
 8011094:	f7fe fe46 	bl	800fd24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011098:	4b1d      	ldr	r3, [pc, #116]	; (8011110 <xTaskRemoveFromEventList+0xac>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d11c      	bne.n	80110da <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	3304      	adds	r3, #4
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fe fe3d 	bl	800fd24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ae:	2201      	movs	r2, #1
 80110b0:	409a      	lsls	r2, r3
 80110b2:	4b18      	ldr	r3, [pc, #96]	; (8011114 <xTaskRemoveFromEventList+0xb0>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4313      	orrs	r3, r2
 80110b8:	4a16      	ldr	r2, [pc, #88]	; (8011114 <xTaskRemoveFromEventList+0xb0>)
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c0:	4613      	mov	r3, r2
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	4413      	add	r3, r2
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	4a13      	ldr	r2, [pc, #76]	; (8011118 <xTaskRemoveFromEventList+0xb4>)
 80110ca:	441a      	add	r2, r3
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	3304      	adds	r3, #4
 80110d0:	4619      	mov	r1, r3
 80110d2:	4610      	mov	r0, r2
 80110d4:	f7fe fdc9 	bl	800fc6a <vListInsertEnd>
 80110d8:	e005      	b.n	80110e6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	3318      	adds	r3, #24
 80110de:	4619      	mov	r1, r3
 80110e0:	480e      	ldr	r0, [pc, #56]	; (801111c <xTaskRemoveFromEventList+0xb8>)
 80110e2:	f7fe fdc2 	bl	800fc6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ea:	4b0d      	ldr	r3, [pc, #52]	; (8011120 <xTaskRemoveFromEventList+0xbc>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d905      	bls.n	8011100 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80110f4:	2301      	movs	r3, #1
 80110f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80110f8:	4b0a      	ldr	r3, [pc, #40]	; (8011124 <xTaskRemoveFromEventList+0xc0>)
 80110fa:	2201      	movs	r2, #1
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	e001      	b.n	8011104 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8011100:	2300      	movs	r3, #0
 8011102:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011104:	697b      	ldr	r3, [r7, #20]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	200009bc 	.word	0x200009bc
 8011114:	2000099c 	.word	0x2000099c
 8011118:	20000898 	.word	0x20000898
 801111c:	20000954 	.word	0x20000954
 8011120:	20000894 	.word	0x20000894
 8011124:	200009a8 	.word	0x200009a8

08011128 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011130:	4b06      	ldr	r3, [pc, #24]	; (801114c <vTaskInternalSetTimeOutState+0x24>)
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011138:	4b05      	ldr	r3, [pc, #20]	; (8011150 <vTaskInternalSetTimeOutState+0x28>)
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	605a      	str	r2, [r3, #4]
}
 8011140:	bf00      	nop
 8011142:	370c      	adds	r7, #12
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	200009ac 	.word	0x200009ac
 8011150:	20000998 	.word	0x20000998

08011154 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b088      	sub	sp, #32
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d109      	bne.n	8011178 <xTaskCheckForTimeOut+0x24>
 8011164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011168:	f383 8811 	msr	BASEPRI, r3
 801116c:	f3bf 8f6f 	isb	sy
 8011170:	f3bf 8f4f 	dsb	sy
 8011174:	613b      	str	r3, [r7, #16]
 8011176:	e7fe      	b.n	8011176 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d109      	bne.n	8011192 <xTaskCheckForTimeOut+0x3e>
 801117e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011182:	f383 8811 	msr	BASEPRI, r3
 8011186:	f3bf 8f6f 	isb	sy
 801118a:	f3bf 8f4f 	dsb	sy
 801118e:	60fb      	str	r3, [r7, #12]
 8011190:	e7fe      	b.n	8011190 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011192:	f000 fb4b 	bl	801182c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011196:	4b1d      	ldr	r3, [pc, #116]	; (801120c <xTaskCheckForTimeOut+0xb8>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	69ba      	ldr	r2, [r7, #24]
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ae:	d102      	bne.n	80111b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80111b0:	2300      	movs	r3, #0
 80111b2:	61fb      	str	r3, [r7, #28]
 80111b4:	e023      	b.n	80111fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	4b15      	ldr	r3, [pc, #84]	; (8011210 <xTaskCheckForTimeOut+0xbc>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d007      	beq.n	80111d2 <xTaskCheckForTimeOut+0x7e>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	69ba      	ldr	r2, [r7, #24]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d302      	bcc.n	80111d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80111cc:	2301      	movs	r3, #1
 80111ce:	61fb      	str	r3, [r7, #28]
 80111d0:	e015      	b.n	80111fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	697a      	ldr	r2, [r7, #20]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d20b      	bcs.n	80111f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	1ad2      	subs	r2, r2, r3
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7ff ff9d 	bl	8011128 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80111ee:	2300      	movs	r3, #0
 80111f0:	61fb      	str	r3, [r7, #28]
 80111f2:	e004      	b.n	80111fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	2200      	movs	r2, #0
 80111f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80111fa:	2301      	movs	r3, #1
 80111fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80111fe:	f000 fb43 	bl	8011888 <vPortExitCritical>

	return xReturn;
 8011202:	69fb      	ldr	r3, [r7, #28]
}
 8011204:	4618      	mov	r0, r3
 8011206:	3720      	adds	r7, #32
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}
 801120c:	20000998 	.word	0x20000998
 8011210:	200009ac 	.word	0x200009ac

08011214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011214:	b480      	push	{r7}
 8011216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011218:	4b03      	ldr	r3, [pc, #12]	; (8011228 <vTaskMissedYield+0x14>)
 801121a:	2201      	movs	r2, #1
 801121c:	601a      	str	r2, [r3, #0]
}
 801121e:	bf00      	nop
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	200009a8 	.word	0x200009a8

0801122c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011234:	f000 f852 	bl	80112dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011238:	4b06      	ldr	r3, [pc, #24]	; (8011254 <prvIdleTask+0x28>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d9f9      	bls.n	8011234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011240:	4b05      	ldr	r3, [pc, #20]	; (8011258 <prvIdleTask+0x2c>)
 8011242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011246:	601a      	str	r2, [r3, #0]
 8011248:	f3bf 8f4f 	dsb	sy
 801124c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011250:	e7f0      	b.n	8011234 <prvIdleTask+0x8>
 8011252:	bf00      	nop
 8011254:	20000898 	.word	0x20000898
 8011258:	e000ed04 	.word	0xe000ed04

0801125c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011262:	2300      	movs	r3, #0
 8011264:	607b      	str	r3, [r7, #4]
 8011266:	e00c      	b.n	8011282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	4613      	mov	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	4413      	add	r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	4a12      	ldr	r2, [pc, #72]	; (80112bc <prvInitialiseTaskLists+0x60>)
 8011274:	4413      	add	r3, r2
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe fcca 	bl	800fc10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	3301      	adds	r3, #1
 8011280:	607b      	str	r3, [r7, #4]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2b06      	cmp	r3, #6
 8011286:	d9ef      	bls.n	8011268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011288:	480d      	ldr	r0, [pc, #52]	; (80112c0 <prvInitialiseTaskLists+0x64>)
 801128a:	f7fe fcc1 	bl	800fc10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801128e:	480d      	ldr	r0, [pc, #52]	; (80112c4 <prvInitialiseTaskLists+0x68>)
 8011290:	f7fe fcbe 	bl	800fc10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011294:	480c      	ldr	r0, [pc, #48]	; (80112c8 <prvInitialiseTaskLists+0x6c>)
 8011296:	f7fe fcbb 	bl	800fc10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801129a:	480c      	ldr	r0, [pc, #48]	; (80112cc <prvInitialiseTaskLists+0x70>)
 801129c:	f7fe fcb8 	bl	800fc10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80112a0:	480b      	ldr	r0, [pc, #44]	; (80112d0 <prvInitialiseTaskLists+0x74>)
 80112a2:	f7fe fcb5 	bl	800fc10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80112a6:	4b0b      	ldr	r3, [pc, #44]	; (80112d4 <prvInitialiseTaskLists+0x78>)
 80112a8:	4a05      	ldr	r2, [pc, #20]	; (80112c0 <prvInitialiseTaskLists+0x64>)
 80112aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80112ac:	4b0a      	ldr	r3, [pc, #40]	; (80112d8 <prvInitialiseTaskLists+0x7c>)
 80112ae:	4a05      	ldr	r2, [pc, #20]	; (80112c4 <prvInitialiseTaskLists+0x68>)
 80112b0:	601a      	str	r2, [r3, #0]
}
 80112b2:	bf00      	nop
 80112b4:	3708      	adds	r7, #8
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	20000898 	.word	0x20000898
 80112c0:	20000924 	.word	0x20000924
 80112c4:	20000938 	.word	0x20000938
 80112c8:	20000954 	.word	0x20000954
 80112cc:	20000968 	.word	0x20000968
 80112d0:	20000980 	.word	0x20000980
 80112d4:	2000094c 	.word	0x2000094c
 80112d8:	20000950 	.word	0x20000950

080112dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80112e2:	e019      	b.n	8011318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80112e4:	f000 faa2 	bl	801182c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112e8:	4b0f      	ldr	r3, [pc, #60]	; (8011328 <prvCheckTasksWaitingTermination+0x4c>)
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	3304      	adds	r3, #4
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fe fd15 	bl	800fd24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80112fa:	4b0c      	ldr	r3, [pc, #48]	; (801132c <prvCheckTasksWaitingTermination+0x50>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	3b01      	subs	r3, #1
 8011300:	4a0a      	ldr	r2, [pc, #40]	; (801132c <prvCheckTasksWaitingTermination+0x50>)
 8011302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011304:	4b0a      	ldr	r3, [pc, #40]	; (8011330 <prvCheckTasksWaitingTermination+0x54>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	3b01      	subs	r3, #1
 801130a:	4a09      	ldr	r2, [pc, #36]	; (8011330 <prvCheckTasksWaitingTermination+0x54>)
 801130c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801130e:	f000 fabb 	bl	8011888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 f80e 	bl	8011334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011318:	4b05      	ldr	r3, [pc, #20]	; (8011330 <prvCheckTasksWaitingTermination+0x54>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1e1      	bne.n	80112e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011320:	bf00      	nop
 8011322:	3708      	adds	r7, #8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	20000968 	.word	0x20000968
 801132c:	20000994 	.word	0x20000994
 8011330:	2000097c 	.word	0x2000097c

08011334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011342:	2b00      	cmp	r3, #0
 8011344:	d108      	bne.n	8011358 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134a:	4618      	mov	r0, r3
 801134c:	f000 fc4a 	bl	8011be4 <vPortFree>
				vPortFree( pxTCB );
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 fc47 	bl	8011be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011356:	e017      	b.n	8011388 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801135e:	2b01      	cmp	r3, #1
 8011360:	d103      	bne.n	801136a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fc3e 	bl	8011be4 <vPortFree>
	}
 8011368:	e00e      	b.n	8011388 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011370:	2b02      	cmp	r3, #2
 8011372:	d009      	beq.n	8011388 <prvDeleteTCB+0x54>
 8011374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011378:	f383 8811 	msr	BASEPRI, r3
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	60fb      	str	r3, [r7, #12]
 8011386:	e7fe      	b.n	8011386 <prvDeleteTCB+0x52>
	}
 8011388:	bf00      	nop
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011396:	4b0c      	ldr	r3, [pc, #48]	; (80113c8 <prvResetNextTaskUnblockTime+0x38>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d104      	bne.n	80113aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80113a0:	4b0a      	ldr	r3, [pc, #40]	; (80113cc <prvResetNextTaskUnblockTime+0x3c>)
 80113a2:	f04f 32ff 	mov.w	r2, #4294967295
 80113a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80113a8:	e008      	b.n	80113bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113aa:	4b07      	ldr	r3, [pc, #28]	; (80113c8 <prvResetNextTaskUnblockTime+0x38>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	4a04      	ldr	r2, [pc, #16]	; (80113cc <prvResetNextTaskUnblockTime+0x3c>)
 80113ba:	6013      	str	r3, [r2, #0]
}
 80113bc:	bf00      	nop
 80113be:	370c      	adds	r7, #12
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr
 80113c8:	2000094c 	.word	0x2000094c
 80113cc:	200009b4 	.word	0x200009b4

080113d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80113d6:	4b0b      	ldr	r3, [pc, #44]	; (8011404 <xTaskGetSchedulerState+0x34>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d102      	bne.n	80113e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80113de:	2301      	movs	r3, #1
 80113e0:	607b      	str	r3, [r7, #4]
 80113e2:	e008      	b.n	80113f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113e4:	4b08      	ldr	r3, [pc, #32]	; (8011408 <xTaskGetSchedulerState+0x38>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d102      	bne.n	80113f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80113ec:	2302      	movs	r3, #2
 80113ee:	607b      	str	r3, [r7, #4]
 80113f0:	e001      	b.n	80113f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80113f2:	2300      	movs	r3, #0
 80113f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80113f6:	687b      	ldr	r3, [r7, #4]
	}
 80113f8:	4618      	mov	r0, r3
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr
 8011404:	200009a0 	.word	0x200009a0
 8011408:	200009bc 	.word	0x200009bc

0801140c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801140c:	b580      	push	{r7, lr}
 801140e:	b086      	sub	sp, #24
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011418:	2300      	movs	r3, #0
 801141a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d06c      	beq.n	80114fc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011422:	4b39      	ldr	r3, [pc, #228]	; (8011508 <xTaskPriorityDisinherit+0xfc>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	693a      	ldr	r2, [r7, #16]
 8011428:	429a      	cmp	r2, r3
 801142a:	d009      	beq.n	8011440 <xTaskPriorityDisinherit+0x34>
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	60fb      	str	r3, [r7, #12]
 801143e:	e7fe      	b.n	801143e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011444:	2b00      	cmp	r3, #0
 8011446:	d109      	bne.n	801145c <xTaskPriorityDisinherit+0x50>
 8011448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144c:	f383 8811 	msr	BASEPRI, r3
 8011450:	f3bf 8f6f 	isb	sy
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	60bb      	str	r3, [r7, #8]
 801145a:	e7fe      	b.n	801145a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011460:	1e5a      	subs	r2, r3, #1
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801146e:	429a      	cmp	r2, r3
 8011470:	d044      	beq.n	80114fc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011476:	2b00      	cmp	r3, #0
 8011478:	d140      	bne.n	80114fc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	3304      	adds	r3, #4
 801147e:	4618      	mov	r0, r3
 8011480:	f7fe fc50 	bl	800fd24 <uxListRemove>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d115      	bne.n	80114b6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801148e:	491f      	ldr	r1, [pc, #124]	; (801150c <xTaskPriorityDisinherit+0x100>)
 8011490:	4613      	mov	r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4413      	add	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	440b      	add	r3, r1
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d10a      	bne.n	80114b6 <xTaskPriorityDisinherit+0xaa>
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a4:	2201      	movs	r2, #1
 80114a6:	fa02 f303 	lsl.w	r3, r2, r3
 80114aa:	43da      	mvns	r2, r3
 80114ac:	4b18      	ldr	r3, [pc, #96]	; (8011510 <xTaskPriorityDisinherit+0x104>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4013      	ands	r3, r2
 80114b2:	4a17      	ldr	r2, [pc, #92]	; (8011510 <xTaskPriorityDisinherit+0x104>)
 80114b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c2:	f1c3 0207 	rsb	r2, r3, #7
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ce:	2201      	movs	r2, #1
 80114d0:	409a      	lsls	r2, r3
 80114d2:	4b0f      	ldr	r3, [pc, #60]	; (8011510 <xTaskPriorityDisinherit+0x104>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	4313      	orrs	r3, r2
 80114d8:	4a0d      	ldr	r2, [pc, #52]	; (8011510 <xTaskPriorityDisinherit+0x104>)
 80114da:	6013      	str	r3, [r2, #0]
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e0:	4613      	mov	r3, r2
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	4a08      	ldr	r2, [pc, #32]	; (801150c <xTaskPriorityDisinherit+0x100>)
 80114ea:	441a      	add	r2, r3
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	3304      	adds	r3, #4
 80114f0:	4619      	mov	r1, r3
 80114f2:	4610      	mov	r0, r2
 80114f4:	f7fe fbb9 	bl	800fc6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80114f8:	2301      	movs	r3, #1
 80114fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80114fc:	697b      	ldr	r3, [r7, #20]
	}
 80114fe:	4618      	mov	r0, r3
 8011500:	3718      	adds	r7, #24
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	20000894 	.word	0x20000894
 801150c:	20000898 	.word	0x20000898
 8011510:	2000099c 	.word	0x2000099c

08011514 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801151e:	4b29      	ldr	r3, [pc, #164]	; (80115c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011524:	4b28      	ldr	r3, [pc, #160]	; (80115c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	3304      	adds	r3, #4
 801152a:	4618      	mov	r0, r3
 801152c:	f7fe fbfa 	bl	800fd24 <uxListRemove>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d10b      	bne.n	801154e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011536:	4b24      	ldr	r3, [pc, #144]	; (80115c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801153c:	2201      	movs	r2, #1
 801153e:	fa02 f303 	lsl.w	r3, r2, r3
 8011542:	43da      	mvns	r2, r3
 8011544:	4b21      	ldr	r3, [pc, #132]	; (80115cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4013      	ands	r3, r2
 801154a:	4a20      	ldr	r2, [pc, #128]	; (80115cc <prvAddCurrentTaskToDelayedList+0xb8>)
 801154c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011554:	d10a      	bne.n	801156c <prvAddCurrentTaskToDelayedList+0x58>
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d007      	beq.n	801156c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801155c:	4b1a      	ldr	r3, [pc, #104]	; (80115c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	3304      	adds	r3, #4
 8011562:	4619      	mov	r1, r3
 8011564:	481a      	ldr	r0, [pc, #104]	; (80115d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011566:	f7fe fb80 	bl	800fc6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801156a:	e026      	b.n	80115ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801156c:	68fa      	ldr	r2, [r7, #12]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4413      	add	r3, r2
 8011572:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011574:	4b14      	ldr	r3, [pc, #80]	; (80115c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	68ba      	ldr	r2, [r7, #8]
 801157a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801157c:	68ba      	ldr	r2, [r7, #8]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	429a      	cmp	r2, r3
 8011582:	d209      	bcs.n	8011598 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011584:	4b13      	ldr	r3, [pc, #76]	; (80115d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	4b0f      	ldr	r3, [pc, #60]	; (80115c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	3304      	adds	r3, #4
 801158e:	4619      	mov	r1, r3
 8011590:	4610      	mov	r0, r2
 8011592:	f7fe fb8e 	bl	800fcb2 <vListInsert>
}
 8011596:	e010      	b.n	80115ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011598:	4b0f      	ldr	r3, [pc, #60]	; (80115d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	4b0a      	ldr	r3, [pc, #40]	; (80115c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	3304      	adds	r3, #4
 80115a2:	4619      	mov	r1, r3
 80115a4:	4610      	mov	r0, r2
 80115a6:	f7fe fb84 	bl	800fcb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80115aa:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	68ba      	ldr	r2, [r7, #8]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d202      	bcs.n	80115ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80115b4:	4a09      	ldr	r2, [pc, #36]	; (80115dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	6013      	str	r3, [r2, #0]
}
 80115ba:	bf00      	nop
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	20000998 	.word	0x20000998
 80115c8:	20000894 	.word	0x20000894
 80115cc:	2000099c 	.word	0x2000099c
 80115d0:	20000980 	.word	0x20000980
 80115d4:	20000950 	.word	0x20000950
 80115d8:	2000094c 	.word	0x2000094c
 80115dc:	200009b4 	.word	0x200009b4

080115e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80115e0:	b480      	push	{r7}
 80115e2:	b085      	sub	sp, #20
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	3b04      	subs	r3, #4
 80115f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80115f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	3b04      	subs	r3, #4
 80115fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	f023 0201 	bic.w	r2, r3, #1
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	3b04      	subs	r3, #4
 801160e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011610:	4a0c      	ldr	r2, [pc, #48]	; (8011644 <pxPortInitialiseStack+0x64>)
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	3b14      	subs	r3, #20
 801161a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	3b04      	subs	r3, #4
 8011626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f06f 0202 	mvn.w	r2, #2
 801162e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	3b20      	subs	r3, #32
 8011634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011636:	68fb      	ldr	r3, [r7, #12]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr
 8011644:	08011649 	.word	0x08011649

08011648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011648:	b480      	push	{r7}
 801164a:	b085      	sub	sp, #20
 801164c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801164e:	2300      	movs	r3, #0
 8011650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011652:	4b11      	ldr	r3, [pc, #68]	; (8011698 <prvTaskExitError+0x50>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801165a:	d009      	beq.n	8011670 <prvTaskExitError+0x28>
 801165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011660:	f383 8811 	msr	BASEPRI, r3
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	60fb      	str	r3, [r7, #12]
 801166e:	e7fe      	b.n	801166e <prvTaskExitError+0x26>
 8011670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011674:	f383 8811 	msr	BASEPRI, r3
 8011678:	f3bf 8f6f 	isb	sy
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011682:	bf00      	nop
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d0fc      	beq.n	8011684 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801168a:	bf00      	nop
 801168c:	3714      	adds	r7, #20
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop
 8011698:	200003b4 	.word	0x200003b4
 801169c:	00000000 	.word	0x00000000

080116a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80116a0:	4b07      	ldr	r3, [pc, #28]	; (80116c0 <pxCurrentTCBConst2>)
 80116a2:	6819      	ldr	r1, [r3, #0]
 80116a4:	6808      	ldr	r0, [r1, #0]
 80116a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116aa:	f380 8809 	msr	PSP, r0
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f04f 0000 	mov.w	r0, #0
 80116b6:	f380 8811 	msr	BASEPRI, r0
 80116ba:	4770      	bx	lr
 80116bc:	f3af 8000 	nop.w

080116c0 <pxCurrentTCBConst2>:
 80116c0:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80116c4:	bf00      	nop
 80116c6:	bf00      	nop

080116c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80116c8:	4808      	ldr	r0, [pc, #32]	; (80116ec <prvPortStartFirstTask+0x24>)
 80116ca:	6800      	ldr	r0, [r0, #0]
 80116cc:	6800      	ldr	r0, [r0, #0]
 80116ce:	f380 8808 	msr	MSP, r0
 80116d2:	f04f 0000 	mov.w	r0, #0
 80116d6:	f380 8814 	msr	CONTROL, r0
 80116da:	b662      	cpsie	i
 80116dc:	b661      	cpsie	f
 80116de:	f3bf 8f4f 	dsb	sy
 80116e2:	f3bf 8f6f 	isb	sy
 80116e6:	df00      	svc	0
 80116e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80116ea:	bf00      	nop
 80116ec:	e000ed08 	.word	0xe000ed08

080116f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b086      	sub	sp, #24
 80116f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80116f6:	4b44      	ldr	r3, [pc, #272]	; (8011808 <xPortStartScheduler+0x118>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	4a44      	ldr	r2, [pc, #272]	; (801180c <xPortStartScheduler+0x11c>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d109      	bne.n	8011714 <xPortStartScheduler+0x24>
 8011700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	613b      	str	r3, [r7, #16]
 8011712:	e7fe      	b.n	8011712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011714:	4b3c      	ldr	r3, [pc, #240]	; (8011808 <xPortStartScheduler+0x118>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	4a3d      	ldr	r2, [pc, #244]	; (8011810 <xPortStartScheduler+0x120>)
 801171a:	4293      	cmp	r3, r2
 801171c:	d109      	bne.n	8011732 <xPortStartScheduler+0x42>
 801171e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011722:	f383 8811 	msr	BASEPRI, r3
 8011726:	f3bf 8f6f 	isb	sy
 801172a:	f3bf 8f4f 	dsb	sy
 801172e:	60fb      	str	r3, [r7, #12]
 8011730:	e7fe      	b.n	8011730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011732:	4b38      	ldr	r3, [pc, #224]	; (8011814 <xPortStartScheduler+0x124>)
 8011734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	b2db      	uxtb	r3, r3
 801173c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	22ff      	movs	r2, #255	; 0xff
 8011742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	b2db      	uxtb	r3, r3
 801174a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801174c:	78fb      	ldrb	r3, [r7, #3]
 801174e:	b2db      	uxtb	r3, r3
 8011750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011754:	b2da      	uxtb	r2, r3
 8011756:	4b30      	ldr	r3, [pc, #192]	; (8011818 <xPortStartScheduler+0x128>)
 8011758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801175a:	4b30      	ldr	r3, [pc, #192]	; (801181c <xPortStartScheduler+0x12c>)
 801175c:	2207      	movs	r2, #7
 801175e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011760:	e009      	b.n	8011776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011762:	4b2e      	ldr	r3, [pc, #184]	; (801181c <xPortStartScheduler+0x12c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	3b01      	subs	r3, #1
 8011768:	4a2c      	ldr	r2, [pc, #176]	; (801181c <xPortStartScheduler+0x12c>)
 801176a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801176c:	78fb      	ldrb	r3, [r7, #3]
 801176e:	b2db      	uxtb	r3, r3
 8011770:	005b      	lsls	r3, r3, #1
 8011772:	b2db      	uxtb	r3, r3
 8011774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011776:	78fb      	ldrb	r3, [r7, #3]
 8011778:	b2db      	uxtb	r3, r3
 801177a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801177e:	2b80      	cmp	r3, #128	; 0x80
 8011780:	d0ef      	beq.n	8011762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011782:	4b26      	ldr	r3, [pc, #152]	; (801181c <xPortStartScheduler+0x12c>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f1c3 0307 	rsb	r3, r3, #7
 801178a:	2b04      	cmp	r3, #4
 801178c:	d009      	beq.n	80117a2 <xPortStartScheduler+0xb2>
 801178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011792:	f383 8811 	msr	BASEPRI, r3
 8011796:	f3bf 8f6f 	isb	sy
 801179a:	f3bf 8f4f 	dsb	sy
 801179e:	60bb      	str	r3, [r7, #8]
 80117a0:	e7fe      	b.n	80117a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80117a2:	4b1e      	ldr	r3, [pc, #120]	; (801181c <xPortStartScheduler+0x12c>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	021b      	lsls	r3, r3, #8
 80117a8:	4a1c      	ldr	r2, [pc, #112]	; (801181c <xPortStartScheduler+0x12c>)
 80117aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80117ac:	4b1b      	ldr	r3, [pc, #108]	; (801181c <xPortStartScheduler+0x12c>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80117b4:	4a19      	ldr	r2, [pc, #100]	; (801181c <xPortStartScheduler+0x12c>)
 80117b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	b2da      	uxtb	r2, r3
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80117c0:	4b17      	ldr	r3, [pc, #92]	; (8011820 <xPortStartScheduler+0x130>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a16      	ldr	r2, [pc, #88]	; (8011820 <xPortStartScheduler+0x130>)
 80117c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80117ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80117cc:	4b14      	ldr	r3, [pc, #80]	; (8011820 <xPortStartScheduler+0x130>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4a13      	ldr	r2, [pc, #76]	; (8011820 <xPortStartScheduler+0x130>)
 80117d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80117d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80117d8:	f000 f8d6 	bl	8011988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80117dc:	4b11      	ldr	r3, [pc, #68]	; (8011824 <xPortStartScheduler+0x134>)
 80117de:	2200      	movs	r2, #0
 80117e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80117e2:	f000 f8f5 	bl	80119d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80117e6:	4b10      	ldr	r3, [pc, #64]	; (8011828 <xPortStartScheduler+0x138>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	4a0f      	ldr	r2, [pc, #60]	; (8011828 <xPortStartScheduler+0x138>)
 80117ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80117f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80117f2:	f7ff ff69 	bl	80116c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80117f6:	f7ff fbb7 	bl	8010f68 <vTaskSwitchContext>
	prvTaskExitError();
 80117fa:	f7ff ff25 	bl	8011648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80117fe:	2300      	movs	r3, #0
}
 8011800:	4618      	mov	r0, r3
 8011802:	3718      	adds	r7, #24
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	e000ed00 	.word	0xe000ed00
 801180c:	410fc271 	.word	0x410fc271
 8011810:	410fc270 	.word	0x410fc270
 8011814:	e000e400 	.word	0xe000e400
 8011818:	200009c0 	.word	0x200009c0
 801181c:	200009c4 	.word	0x200009c4
 8011820:	e000ed20 	.word	0xe000ed20
 8011824:	200003b4 	.word	0x200003b4
 8011828:	e000ef34 	.word	0xe000ef34

0801182c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011836:	f383 8811 	msr	BASEPRI, r3
 801183a:	f3bf 8f6f 	isb	sy
 801183e:	f3bf 8f4f 	dsb	sy
 8011842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011844:	4b0e      	ldr	r3, [pc, #56]	; (8011880 <vPortEnterCritical+0x54>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	3301      	adds	r3, #1
 801184a:	4a0d      	ldr	r2, [pc, #52]	; (8011880 <vPortEnterCritical+0x54>)
 801184c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801184e:	4b0c      	ldr	r3, [pc, #48]	; (8011880 <vPortEnterCritical+0x54>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2b01      	cmp	r3, #1
 8011854:	d10e      	bne.n	8011874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011856:	4b0b      	ldr	r3, [pc, #44]	; (8011884 <vPortEnterCritical+0x58>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	b2db      	uxtb	r3, r3
 801185c:	2b00      	cmp	r3, #0
 801185e:	d009      	beq.n	8011874 <vPortEnterCritical+0x48>
 8011860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011864:	f383 8811 	msr	BASEPRI, r3
 8011868:	f3bf 8f6f 	isb	sy
 801186c:	f3bf 8f4f 	dsb	sy
 8011870:	603b      	str	r3, [r7, #0]
 8011872:	e7fe      	b.n	8011872 <vPortEnterCritical+0x46>
	}
}
 8011874:	bf00      	nop
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	200003b4 	.word	0x200003b4
 8011884:	e000ed04 	.word	0xe000ed04

08011888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801188e:	4b11      	ldr	r3, [pc, #68]	; (80118d4 <vPortExitCritical+0x4c>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d109      	bne.n	80118aa <vPortExitCritical+0x22>
 8011896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189a:	f383 8811 	msr	BASEPRI, r3
 801189e:	f3bf 8f6f 	isb	sy
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	607b      	str	r3, [r7, #4]
 80118a8:	e7fe      	b.n	80118a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80118aa:	4b0a      	ldr	r3, [pc, #40]	; (80118d4 <vPortExitCritical+0x4c>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	3b01      	subs	r3, #1
 80118b0:	4a08      	ldr	r2, [pc, #32]	; (80118d4 <vPortExitCritical+0x4c>)
 80118b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80118b4:	4b07      	ldr	r3, [pc, #28]	; (80118d4 <vPortExitCritical+0x4c>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d104      	bne.n	80118c6 <vPortExitCritical+0x3e>
 80118bc:	2300      	movs	r3, #0
 80118be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80118c6:	bf00      	nop
 80118c8:	370c      	adds	r7, #12
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	200003b4 	.word	0x200003b4
	...

080118e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80118e0:	f3ef 8009 	mrs	r0, PSP
 80118e4:	f3bf 8f6f 	isb	sy
 80118e8:	4b15      	ldr	r3, [pc, #84]	; (8011940 <pxCurrentTCBConst>)
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	f01e 0f10 	tst.w	lr, #16
 80118f0:	bf08      	it	eq
 80118f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80118f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fa:	6010      	str	r0, [r2, #0]
 80118fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011904:	f380 8811 	msr	BASEPRI, r0
 8011908:	f3bf 8f4f 	dsb	sy
 801190c:	f3bf 8f6f 	isb	sy
 8011910:	f7ff fb2a 	bl	8010f68 <vTaskSwitchContext>
 8011914:	f04f 0000 	mov.w	r0, #0
 8011918:	f380 8811 	msr	BASEPRI, r0
 801191c:	bc09      	pop	{r0, r3}
 801191e:	6819      	ldr	r1, [r3, #0]
 8011920:	6808      	ldr	r0, [r1, #0]
 8011922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011926:	f01e 0f10 	tst.w	lr, #16
 801192a:	bf08      	it	eq
 801192c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011930:	f380 8809 	msr	PSP, r0
 8011934:	f3bf 8f6f 	isb	sy
 8011938:	4770      	bx	lr
 801193a:	bf00      	nop
 801193c:	f3af 8000 	nop.w

08011940 <pxCurrentTCBConst>:
 8011940:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011944:	bf00      	nop
 8011946:	bf00      	nop

08011948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
	__asm volatile
 801194e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011952:	f383 8811 	msr	BASEPRI, r3
 8011956:	f3bf 8f6f 	isb	sy
 801195a:	f3bf 8f4f 	dsb	sy
 801195e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011960:	f7ff fa4a 	bl	8010df8 <xTaskIncrementTick>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d003      	beq.n	8011972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801196a:	4b06      	ldr	r3, [pc, #24]	; (8011984 <SysTick_Handler+0x3c>)
 801196c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	2300      	movs	r3, #0
 8011974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801197c:	bf00      	nop
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}
 8011984:	e000ed04 	.word	0xe000ed04

08011988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011988:	b480      	push	{r7}
 801198a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801198c:	4b0b      	ldr	r3, [pc, #44]	; (80119bc <vPortSetupTimerInterrupt+0x34>)
 801198e:	2200      	movs	r2, #0
 8011990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011992:	4b0b      	ldr	r3, [pc, #44]	; (80119c0 <vPortSetupTimerInterrupt+0x38>)
 8011994:	2200      	movs	r2, #0
 8011996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011998:	4b0a      	ldr	r3, [pc, #40]	; (80119c4 <vPortSetupTimerInterrupt+0x3c>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4a0a      	ldr	r2, [pc, #40]	; (80119c8 <vPortSetupTimerInterrupt+0x40>)
 801199e:	fba2 2303 	umull	r2, r3, r2, r3
 80119a2:	099b      	lsrs	r3, r3, #6
 80119a4:	4a09      	ldr	r2, [pc, #36]	; (80119cc <vPortSetupTimerInterrupt+0x44>)
 80119a6:	3b01      	subs	r3, #1
 80119a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80119aa:	4b04      	ldr	r3, [pc, #16]	; (80119bc <vPortSetupTimerInterrupt+0x34>)
 80119ac:	2207      	movs	r2, #7
 80119ae:	601a      	str	r2, [r3, #0]
}
 80119b0:	bf00      	nop
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr
 80119ba:	bf00      	nop
 80119bc:	e000e010 	.word	0xe000e010
 80119c0:	e000e018 	.word	0xe000e018
 80119c4:	20000280 	.word	0x20000280
 80119c8:	10624dd3 	.word	0x10624dd3
 80119cc:	e000e014 	.word	0xe000e014

080119d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80119d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80119e0 <vPortEnableVFP+0x10>
 80119d4:	6801      	ldr	r1, [r0, #0]
 80119d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80119da:	6001      	str	r1, [r0, #0]
 80119dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80119de:	bf00      	nop
 80119e0:	e000ed88 	.word	0xe000ed88

080119e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80119e4:	b480      	push	{r7}
 80119e6:	b085      	sub	sp, #20
 80119e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80119ea:	f3ef 8305 	mrs	r3, IPSR
 80119ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2b0f      	cmp	r3, #15
 80119f4:	d913      	bls.n	8011a1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80119f6:	4a16      	ldr	r2, [pc, #88]	; (8011a50 <vPortValidateInterruptPriority+0x6c>)
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	4413      	add	r3, r2
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011a00:	4b14      	ldr	r3, [pc, #80]	; (8011a54 <vPortValidateInterruptPriority+0x70>)
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	7afa      	ldrb	r2, [r7, #11]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d209      	bcs.n	8011a1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	607b      	str	r3, [r7, #4]
 8011a1c:	e7fe      	b.n	8011a1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011a1e:	4b0e      	ldr	r3, [pc, #56]	; (8011a58 <vPortValidateInterruptPriority+0x74>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011a26:	4b0d      	ldr	r3, [pc, #52]	; (8011a5c <vPortValidateInterruptPriority+0x78>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d909      	bls.n	8011a42 <vPortValidateInterruptPriority+0x5e>
 8011a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a32:	f383 8811 	msr	BASEPRI, r3
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	603b      	str	r3, [r7, #0]
 8011a40:	e7fe      	b.n	8011a40 <vPortValidateInterruptPriority+0x5c>
	}
 8011a42:	bf00      	nop
 8011a44:	3714      	adds	r7, #20
 8011a46:	46bd      	mov	sp, r7
 8011a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop
 8011a50:	e000e3f0 	.word	0xe000e3f0
 8011a54:	200009c0 	.word	0x200009c0
 8011a58:	e000ed0c 	.word	0xe000ed0c
 8011a5c:	200009c4 	.word	0x200009c4

08011a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b08a      	sub	sp, #40	; 0x28
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011a6c:	f7ff f8f8 	bl	8010c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011a70:	4b57      	ldr	r3, [pc, #348]	; (8011bd0 <pvPortMalloc+0x170>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d101      	bne.n	8011a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a78:	f000 f90c 	bl	8011c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a7c:	4b55      	ldr	r3, [pc, #340]	; (8011bd4 <pvPortMalloc+0x174>)
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4013      	ands	r3, r2
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f040 808c 	bne.w	8011ba2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d01c      	beq.n	8011aca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011a90:	2208      	movs	r2, #8
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4413      	add	r3, r2
 8011a96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f003 0307 	and.w	r3, r3, #7
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d013      	beq.n	8011aca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f023 0307 	bic.w	r3, r3, #7
 8011aa8:	3308      	adds	r3, #8
 8011aaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f003 0307 	and.w	r3, r3, #7
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d009      	beq.n	8011aca <pvPortMalloc+0x6a>
 8011ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aba:	f383 8811 	msr	BASEPRI, r3
 8011abe:	f3bf 8f6f 	isb	sy
 8011ac2:	f3bf 8f4f 	dsb	sy
 8011ac6:	617b      	str	r3, [r7, #20]
 8011ac8:	e7fe      	b.n	8011ac8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d068      	beq.n	8011ba2 <pvPortMalloc+0x142>
 8011ad0:	4b41      	ldr	r3, [pc, #260]	; (8011bd8 <pvPortMalloc+0x178>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d863      	bhi.n	8011ba2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ada:	4b40      	ldr	r3, [pc, #256]	; (8011bdc <pvPortMalloc+0x17c>)
 8011adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ade:	4b3f      	ldr	r3, [pc, #252]	; (8011bdc <pvPortMalloc+0x17c>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011ae4:	e004      	b.n	8011af0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d903      	bls.n	8011b02 <pvPortMalloc+0xa2>
 8011afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1f1      	bne.n	8011ae6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011b02:	4b33      	ldr	r3, [pc, #204]	; (8011bd0 <pvPortMalloc+0x170>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d04a      	beq.n	8011ba2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b0c:	6a3b      	ldr	r3, [r7, #32]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2208      	movs	r2, #8
 8011b12:	4413      	add	r3, r2
 8011b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	6a3b      	ldr	r3, [r7, #32]
 8011b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	685a      	ldr	r2, [r3, #4]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	1ad2      	subs	r2, r2, r3
 8011b26:	2308      	movs	r3, #8
 8011b28:	005b      	lsls	r3, r3, #1
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d91e      	bls.n	8011b6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4413      	add	r3, r2
 8011b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	f003 0307 	and.w	r3, r3, #7
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d009      	beq.n	8011b54 <pvPortMalloc+0xf4>
 8011b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	613b      	str	r3, [r7, #16]
 8011b52:	e7fe      	b.n	8011b52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b56:	685a      	ldr	r2, [r3, #4]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	1ad2      	subs	r2, r2, r3
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011b66:	69b8      	ldr	r0, [r7, #24]
 8011b68:	f000 f8f6 	bl	8011d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b6c:	4b1a      	ldr	r3, [pc, #104]	; (8011bd8 <pvPortMalloc+0x178>)
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	4a18      	ldr	r2, [pc, #96]	; (8011bd8 <pvPortMalloc+0x178>)
 8011b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011b7a:	4b17      	ldr	r3, [pc, #92]	; (8011bd8 <pvPortMalloc+0x178>)
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	4b18      	ldr	r3, [pc, #96]	; (8011be0 <pvPortMalloc+0x180>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d203      	bcs.n	8011b8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011b86:	4b14      	ldr	r3, [pc, #80]	; (8011bd8 <pvPortMalloc+0x178>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4a15      	ldr	r2, [pc, #84]	; (8011be0 <pvPortMalloc+0x180>)
 8011b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	685a      	ldr	r2, [r3, #4]
 8011b92:	4b10      	ldr	r3, [pc, #64]	; (8011bd4 <pvPortMalloc+0x174>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	431a      	orrs	r2, r3
 8011b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011ba2:	f7ff f86b 	bl	8010c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	f003 0307 	and.w	r3, r3, #7
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d009      	beq.n	8011bc4 <pvPortMalloc+0x164>
 8011bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb4:	f383 8811 	msr	BASEPRI, r3
 8011bb8:	f3bf 8f6f 	isb	sy
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	60fb      	str	r3, [r7, #12]
 8011bc2:	e7fe      	b.n	8011bc2 <pvPortMalloc+0x162>
	return pvReturn;
 8011bc4:	69fb      	ldr	r3, [r7, #28]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3728      	adds	r7, #40	; 0x28
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	200045d0 	.word	0x200045d0
 8011bd4:	200045dc 	.word	0x200045dc
 8011bd8:	200045d4 	.word	0x200045d4
 8011bdc:	200045c8 	.word	0x200045c8
 8011be0:	200045d8 	.word	0x200045d8

08011be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b086      	sub	sp, #24
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d046      	beq.n	8011c84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	425b      	negs	r3, r3
 8011bfa:	697a      	ldr	r2, [r7, #20]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	685a      	ldr	r2, [r3, #4]
 8011c08:	4b20      	ldr	r3, [pc, #128]	; (8011c8c <vPortFree+0xa8>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4013      	ands	r3, r2
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d109      	bne.n	8011c26 <vPortFree+0x42>
 8011c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c16:	f383 8811 	msr	BASEPRI, r3
 8011c1a:	f3bf 8f6f 	isb	sy
 8011c1e:	f3bf 8f4f 	dsb	sy
 8011c22:	60fb      	str	r3, [r7, #12]
 8011c24:	e7fe      	b.n	8011c24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d009      	beq.n	8011c42 <vPortFree+0x5e>
 8011c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	60bb      	str	r3, [r7, #8]
 8011c40:	e7fe      	b.n	8011c40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	685a      	ldr	r2, [r3, #4]
 8011c46:	4b11      	ldr	r3, [pc, #68]	; (8011c8c <vPortFree+0xa8>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d019      	beq.n	8011c84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d115      	bne.n	8011c84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	685a      	ldr	r2, [r3, #4]
 8011c5c:	4b0b      	ldr	r3, [pc, #44]	; (8011c8c <vPortFree+0xa8>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	43db      	mvns	r3, r3
 8011c62:	401a      	ands	r2, r3
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c68:	f7fe fffa 	bl	8010c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	685a      	ldr	r2, [r3, #4]
 8011c70:	4b07      	ldr	r3, [pc, #28]	; (8011c90 <vPortFree+0xac>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4413      	add	r3, r2
 8011c76:	4a06      	ldr	r2, [pc, #24]	; (8011c90 <vPortFree+0xac>)
 8011c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c7a:	6938      	ldr	r0, [r7, #16]
 8011c7c:	f000 f86c 	bl	8011d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011c80:	f7fe fffc 	bl	8010c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c84:	bf00      	nop
 8011c86:	3718      	adds	r7, #24
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	200045dc 	.word	0x200045dc
 8011c90:	200045d4 	.word	0x200045d4

08011c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011c94:	b480      	push	{r7}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ca0:	4b27      	ldr	r3, [pc, #156]	; (8011d40 <prvHeapInit+0xac>)
 8011ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f003 0307 	and.w	r3, r3, #7
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00c      	beq.n	8011cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	3307      	adds	r3, #7
 8011cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f023 0307 	bic.w	r3, r3, #7
 8011cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	1ad3      	subs	r3, r2, r3
 8011cc2:	4a1f      	ldr	r2, [pc, #124]	; (8011d40 <prvHeapInit+0xac>)
 8011cc4:	4413      	add	r3, r2
 8011cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ccc:	4a1d      	ldr	r2, [pc, #116]	; (8011d44 <prvHeapInit+0xb0>)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011cd2:	4b1c      	ldr	r3, [pc, #112]	; (8011d44 <prvHeapInit+0xb0>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	68ba      	ldr	r2, [r7, #8]
 8011cdc:	4413      	add	r3, r2
 8011cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ce0:	2208      	movs	r2, #8
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	1a9b      	subs	r3, r3, r2
 8011ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f023 0307 	bic.w	r3, r3, #7
 8011cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	4a15      	ldr	r2, [pc, #84]	; (8011d48 <prvHeapInit+0xb4>)
 8011cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011cf6:	4b14      	ldr	r3, [pc, #80]	; (8011d48 <prvHeapInit+0xb4>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011cfe:	4b12      	ldr	r3, [pc, #72]	; (8011d48 <prvHeapInit+0xb4>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2200      	movs	r2, #0
 8011d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	68fa      	ldr	r2, [r7, #12]
 8011d0e:	1ad2      	subs	r2, r2, r3
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d14:	4b0c      	ldr	r3, [pc, #48]	; (8011d48 <prvHeapInit+0xb4>)
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	4a0a      	ldr	r2, [pc, #40]	; (8011d4c <prvHeapInit+0xb8>)
 8011d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	4a09      	ldr	r2, [pc, #36]	; (8011d50 <prvHeapInit+0xbc>)
 8011d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d2c:	4b09      	ldr	r3, [pc, #36]	; (8011d54 <prvHeapInit+0xc0>)
 8011d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011d32:	601a      	str	r2, [r3, #0]
}
 8011d34:	bf00      	nop
 8011d36:	3714      	adds	r7, #20
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	200009c8 	.word	0x200009c8
 8011d44:	200045c8 	.word	0x200045c8
 8011d48:	200045d0 	.word	0x200045d0
 8011d4c:	200045d8 	.word	0x200045d8
 8011d50:	200045d4 	.word	0x200045d4
 8011d54:	200045dc 	.word	0x200045dc

08011d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011d60:	4b28      	ldr	r3, [pc, #160]	; (8011e04 <prvInsertBlockIntoFreeList+0xac>)
 8011d62:	60fb      	str	r3, [r7, #12]
 8011d64:	e002      	b.n	8011d6c <prvInsertBlockIntoFreeList+0x14>
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	60fb      	str	r3, [r7, #12]
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d8f7      	bhi.n	8011d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	4413      	add	r3, r2
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d108      	bne.n	8011d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	685a      	ldr	r2, [r3, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	441a      	add	r2, r3
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	68ba      	ldr	r2, [r7, #8]
 8011da4:	441a      	add	r2, r3
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d118      	bne.n	8011de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	4b15      	ldr	r3, [pc, #84]	; (8011e08 <prvInsertBlockIntoFreeList+0xb0>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d00d      	beq.n	8011dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685a      	ldr	r2, [r3, #4]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	441a      	add	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	601a      	str	r2, [r3, #0]
 8011dd4:	e008      	b.n	8011de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011dd6:	4b0c      	ldr	r3, [pc, #48]	; (8011e08 <prvInsertBlockIntoFreeList+0xb0>)
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	601a      	str	r2, [r3, #0]
 8011dde:	e003      	b.n	8011de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d002      	beq.n	8011df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011df6:	bf00      	nop
 8011df8:	3714      	adds	r7, #20
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	200045c8 	.word	0x200045c8
 8011e08:	200045d0 	.word	0x200045d0

08011e0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011e10:	2200      	movs	r2, #0
 8011e12:	4912      	ldr	r1, [pc, #72]	; (8011e5c <MX_USB_DEVICE_Init+0x50>)
 8011e14:	4812      	ldr	r0, [pc, #72]	; (8011e60 <MX_USB_DEVICE_Init+0x54>)
 8011e16:	f7fc fbe5 	bl	800e5e4 <USBD_Init>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d001      	beq.n	8011e24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011e20:	f7f2 fed6 	bl	8004bd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011e24:	490f      	ldr	r1, [pc, #60]	; (8011e64 <MX_USB_DEVICE_Init+0x58>)
 8011e26:	480e      	ldr	r0, [pc, #56]	; (8011e60 <MX_USB_DEVICE_Init+0x54>)
 8011e28:	f7fc fc12 	bl	800e650 <USBD_RegisterClass>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d001      	beq.n	8011e36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011e32:	f7f2 fecd 	bl	8004bd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011e36:	490c      	ldr	r1, [pc, #48]	; (8011e68 <MX_USB_DEVICE_Init+0x5c>)
 8011e38:	4809      	ldr	r0, [pc, #36]	; (8011e60 <MX_USB_DEVICE_Init+0x54>)
 8011e3a:	f7fc fb37 	bl	800e4ac <USBD_CDC_RegisterInterface>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d001      	beq.n	8011e48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011e44:	f7f2 fec4 	bl	8004bd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011e48:	4805      	ldr	r0, [pc, #20]	; (8011e60 <MX_USB_DEVICE_Init+0x54>)
 8011e4a:	f7fc fc22 	bl	800e692 <USBD_Start>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d001      	beq.n	8011e58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011e54:	f7f2 febc 	bl	8004bd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011e58:	bf00      	nop
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	200003d4 	.word	0x200003d4
 8011e60:	20004ef4 	.word	0x20004ef4
 8011e64:	200002b0 	.word	0x200002b0
 8011e68:	200003c0 	.word	0x200003c0

08011e6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011e70:	2200      	movs	r2, #0
 8011e72:	4905      	ldr	r1, [pc, #20]	; (8011e88 <CDC_Init_FS+0x1c>)
 8011e74:	4805      	ldr	r0, [pc, #20]	; (8011e8c <CDC_Init_FS+0x20>)
 8011e76:	f7fc fb2e 	bl	800e4d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011e7a:	4905      	ldr	r1, [pc, #20]	; (8011e90 <CDC_Init_FS+0x24>)
 8011e7c:	4803      	ldr	r0, [pc, #12]	; (8011e8c <CDC_Init_FS+0x20>)
 8011e7e:	f7fc fb43 	bl	800e508 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011e82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	200059c4 	.word	0x200059c4
 8011e8c:	20004ef4 	.word	0x20004ef4
 8011e90:	200051c4 	.word	0x200051c4

08011e94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011e94:	b480      	push	{r7}
 8011e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011e98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	4603      	mov	r3, r0
 8011eac:	6039      	str	r1, [r7, #0]
 8011eae:	71fb      	strb	r3, [r7, #7]
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011eb4:	79fb      	ldrb	r3, [r7, #7]
 8011eb6:	2b23      	cmp	r3, #35	; 0x23
 8011eb8:	d85c      	bhi.n	8011f74 <CDC_Control_FS+0xd0>
 8011eba:	a201      	add	r2, pc, #4	; (adr r2, 8011ec0 <CDC_Control_FS+0x1c>)
 8011ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec0:	08011f75 	.word	0x08011f75
 8011ec4:	08011f75 	.word	0x08011f75
 8011ec8:	08011f75 	.word	0x08011f75
 8011ecc:	08011f75 	.word	0x08011f75
 8011ed0:	08011f75 	.word	0x08011f75
 8011ed4:	08011f75 	.word	0x08011f75
 8011ed8:	08011f75 	.word	0x08011f75
 8011edc:	08011f75 	.word	0x08011f75
 8011ee0:	08011f75 	.word	0x08011f75
 8011ee4:	08011f75 	.word	0x08011f75
 8011ee8:	08011f75 	.word	0x08011f75
 8011eec:	08011f75 	.word	0x08011f75
 8011ef0:	08011f75 	.word	0x08011f75
 8011ef4:	08011f75 	.word	0x08011f75
 8011ef8:	08011f75 	.word	0x08011f75
 8011efc:	08011f75 	.word	0x08011f75
 8011f00:	08011f75 	.word	0x08011f75
 8011f04:	08011f75 	.word	0x08011f75
 8011f08:	08011f75 	.word	0x08011f75
 8011f0c:	08011f75 	.word	0x08011f75
 8011f10:	08011f75 	.word	0x08011f75
 8011f14:	08011f75 	.word	0x08011f75
 8011f18:	08011f75 	.word	0x08011f75
 8011f1c:	08011f75 	.word	0x08011f75
 8011f20:	08011f75 	.word	0x08011f75
 8011f24:	08011f75 	.word	0x08011f75
 8011f28:	08011f75 	.word	0x08011f75
 8011f2c:	08011f75 	.word	0x08011f75
 8011f30:	08011f75 	.word	0x08011f75
 8011f34:	08011f75 	.word	0x08011f75
 8011f38:	08011f75 	.word	0x08011f75
 8011f3c:	08011f75 	.word	0x08011f75
 8011f40:	08011f51 	.word	0x08011f51
 8011f44:	08011f63 	.word	0x08011f63
 8011f48:	08011f75 	.word	0x08011f75
 8011f4c:	08011f75 	.word	0x08011f75
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8011f50:	4b0c      	ldr	r3, [pc, #48]	; (8011f84 <CDC_Control_FS+0xe0>)
 8011f52:	683a      	ldr	r2, [r7, #0]
 8011f54:	6810      	ldr	r0, [r2, #0]
 8011f56:	6018      	str	r0, [r3, #0]
 8011f58:	8891      	ldrh	r1, [r2, #4]
 8011f5a:	7992      	ldrb	r2, [r2, #6]
 8011f5c:	8099      	strh	r1, [r3, #4]
 8011f5e:	719a      	strb	r2, [r3, #6]
    break;
 8011f60:	e009      	b.n	8011f76 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	4a07      	ldr	r2, [pc, #28]	; (8011f84 <CDC_Control_FS+0xe0>)
 8011f66:	6810      	ldr	r0, [r2, #0]
 8011f68:	6018      	str	r0, [r3, #0]
 8011f6a:	8891      	ldrh	r1, [r2, #4]
 8011f6c:	7992      	ldrb	r2, [r2, #6]
 8011f6e:	8099      	strh	r1, [r3, #4]
 8011f70:	719a      	strb	r2, [r3, #6]
    break;
 8011f72:	e000      	b.n	8011f76 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011f74:	bf00      	nop
  }

  return (USBD_OK);
 8011f76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	200003b8 	.word	0x200003b8

08011f88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011f92:	6879      	ldr	r1, [r7, #4]
 8011f94:	4805      	ldr	r0, [pc, #20]	; (8011fac <CDC_Receive_FS+0x24>)
 8011f96:	f7fc fab7 	bl	800e508 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011f9a:	4804      	ldr	r0, [pc, #16]	; (8011fac <CDC_Receive_FS+0x24>)
 8011f9c:	f7fc faf8 	bl	800e590 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011fa0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	20004ef4 	.word	0x20004ef4

08011fb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	460b      	mov	r3, r1
 8011fba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011fc0:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <CDC_Transmit_FS+0x48>)
 8011fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d001      	beq.n	8011fd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	e00b      	b.n	8011fee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011fd6:	887b      	ldrh	r3, [r7, #2]
 8011fd8:	461a      	mov	r2, r3
 8011fda:	6879      	ldr	r1, [r7, #4]
 8011fdc:	4806      	ldr	r0, [pc, #24]	; (8011ff8 <CDC_Transmit_FS+0x48>)
 8011fde:	f7fc fa7a 	bl	800e4d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011fe2:	4805      	ldr	r0, [pc, #20]	; (8011ff8 <CDC_Transmit_FS+0x48>)
 8011fe4:	f7fc faa4 	bl	800e530 <USBD_CDC_TransmitPacket>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	20004ef4 	.word	0x20004ef4

08011ffc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b087      	sub	sp, #28
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	4613      	mov	r3, r2
 8012008:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801200e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012012:	4618      	mov	r0, r3
 8012014:	371c      	adds	r7, #28
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr
	...

08012020 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012020:	b480      	push	{r7}
 8012022:	b083      	sub	sp, #12
 8012024:	af00      	add	r7, sp, #0
 8012026:	4603      	mov	r3, r0
 8012028:	6039      	str	r1, [r7, #0]
 801202a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2212      	movs	r2, #18
 8012030:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012032:	4b03      	ldr	r3, [pc, #12]	; (8012040 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012034:	4618      	mov	r0, r3
 8012036:	370c      	adds	r7, #12
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr
 8012040:	200003f4 	.word	0x200003f4

08012044 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	4603      	mov	r3, r0
 801204c:	6039      	str	r1, [r7, #0]
 801204e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	2204      	movs	r2, #4
 8012054:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012056:	4b03      	ldr	r3, [pc, #12]	; (8012064 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012058:	4618      	mov	r0, r3
 801205a:	370c      	adds	r7, #12
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr
 8012064:	20000414 	.word	0x20000414

08012068 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	4603      	mov	r3, r0
 8012070:	6039      	str	r1, [r7, #0]
 8012072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012074:	79fb      	ldrb	r3, [r7, #7]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d105      	bne.n	8012086 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801207a:	683a      	ldr	r2, [r7, #0]
 801207c:	4907      	ldr	r1, [pc, #28]	; (801209c <USBD_FS_ProductStrDescriptor+0x34>)
 801207e:	4808      	ldr	r0, [pc, #32]	; (80120a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012080:	f7fd faff 	bl	800f682 <USBD_GetString>
 8012084:	e004      	b.n	8012090 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012086:	683a      	ldr	r2, [r7, #0]
 8012088:	4904      	ldr	r1, [pc, #16]	; (801209c <USBD_FS_ProductStrDescriptor+0x34>)
 801208a:	4805      	ldr	r0, [pc, #20]	; (80120a0 <USBD_FS_ProductStrDescriptor+0x38>)
 801208c:	f7fd faf9 	bl	800f682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012090:	4b02      	ldr	r3, [pc, #8]	; (801209c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012092:	4618      	mov	r0, r3
 8012094:	3708      	adds	r7, #8
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	200061c4 	.word	0x200061c4
 80120a0:	080185c0 	.word	0x080185c0

080120a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	6039      	str	r1, [r7, #0]
 80120ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80120b0:	683a      	ldr	r2, [r7, #0]
 80120b2:	4904      	ldr	r1, [pc, #16]	; (80120c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80120b4:	4804      	ldr	r0, [pc, #16]	; (80120c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80120b6:	f7fd fae4 	bl	800f682 <USBD_GetString>
  return USBD_StrDesc;
 80120ba:	4b02      	ldr	r3, [pc, #8]	; (80120c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	200061c4 	.word	0x200061c4
 80120c8:	080185d8 	.word	0x080185d8

080120cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	4603      	mov	r3, r0
 80120d4:	6039      	str	r1, [r7, #0]
 80120d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	221a      	movs	r2, #26
 80120dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80120de:	f000 f855 	bl	801218c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80120e2:	4b02      	ldr	r3, [pc, #8]	; (80120ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	20000418 	.word	0x20000418

080120f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	4603      	mov	r3, r0
 80120f8:	6039      	str	r1, [r7, #0]
 80120fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80120fc:	79fb      	ldrb	r3, [r7, #7]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d105      	bne.n	801210e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012102:	683a      	ldr	r2, [r7, #0]
 8012104:	4907      	ldr	r1, [pc, #28]	; (8012124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012106:	4808      	ldr	r0, [pc, #32]	; (8012128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012108:	f7fd fabb 	bl	800f682 <USBD_GetString>
 801210c:	e004      	b.n	8012118 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801210e:	683a      	ldr	r2, [r7, #0]
 8012110:	4904      	ldr	r1, [pc, #16]	; (8012124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012112:	4805      	ldr	r0, [pc, #20]	; (8012128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012114:	f7fd fab5 	bl	800f682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012118:	4b02      	ldr	r3, [pc, #8]	; (8012124 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	200061c4 	.word	0x200061c4
 8012128:	080185ec 	.word	0x080185ec

0801212c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	4603      	mov	r3, r0
 8012134:	6039      	str	r1, [r7, #0]
 8012136:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012138:	79fb      	ldrb	r3, [r7, #7]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d105      	bne.n	801214a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801213e:	683a      	ldr	r2, [r7, #0]
 8012140:	4907      	ldr	r1, [pc, #28]	; (8012160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012142:	4808      	ldr	r0, [pc, #32]	; (8012164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012144:	f7fd fa9d 	bl	800f682 <USBD_GetString>
 8012148:	e004      	b.n	8012154 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801214a:	683a      	ldr	r2, [r7, #0]
 801214c:	4904      	ldr	r1, [pc, #16]	; (8012160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801214e:	4805      	ldr	r0, [pc, #20]	; (8012164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012150:	f7fd fa97 	bl	800f682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012154:	4b02      	ldr	r3, [pc, #8]	; (8012160 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012156:	4618      	mov	r0, r3
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	200061c4 	.word	0x200061c4
 8012164:	080185f8 	.word	0x080185f8

08012168 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	4603      	mov	r3, r0
 8012170:	6039      	str	r1, [r7, #0]
 8012172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	220c      	movs	r2, #12
 8012178:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801217a:	4b03      	ldr	r3, [pc, #12]	; (8012188 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801217c:	4618      	mov	r0, r3
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr
 8012188:	20000408 	.word	0x20000408

0801218c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012192:	4b0f      	ldr	r3, [pc, #60]	; (80121d0 <Get_SerialNum+0x44>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012198:	4b0e      	ldr	r3, [pc, #56]	; (80121d4 <Get_SerialNum+0x48>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801219e:	4b0e      	ldr	r3, [pc, #56]	; (80121d8 <Get_SerialNum+0x4c>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80121a4:	68fa      	ldr	r2, [r7, #12]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4413      	add	r3, r2
 80121aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d009      	beq.n	80121c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80121b2:	2208      	movs	r2, #8
 80121b4:	4909      	ldr	r1, [pc, #36]	; (80121dc <Get_SerialNum+0x50>)
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f000 f814 	bl	80121e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80121bc:	2204      	movs	r2, #4
 80121be:	4908      	ldr	r1, [pc, #32]	; (80121e0 <Get_SerialNum+0x54>)
 80121c0:	68b8      	ldr	r0, [r7, #8]
 80121c2:	f000 f80f 	bl	80121e4 <IntToUnicode>
  }
}
 80121c6:	bf00      	nop
 80121c8:	3710      	adds	r7, #16
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	1fff7a10 	.word	0x1fff7a10
 80121d4:	1fff7a14 	.word	0x1fff7a14
 80121d8:	1fff7a18 	.word	0x1fff7a18
 80121dc:	2000041a 	.word	0x2000041a
 80121e0:	2000042a 	.word	0x2000042a

080121e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80121e4:	b480      	push	{r7}
 80121e6:	b087      	sub	sp, #28
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	4613      	mov	r3, r2
 80121f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80121f2:	2300      	movs	r3, #0
 80121f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80121f6:	2300      	movs	r3, #0
 80121f8:	75fb      	strb	r3, [r7, #23]
 80121fa:	e027      	b.n	801224c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	0f1b      	lsrs	r3, r3, #28
 8012200:	2b09      	cmp	r3, #9
 8012202:	d80b      	bhi.n	801221c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	0f1b      	lsrs	r3, r3, #28
 8012208:	b2da      	uxtb	r2, r3
 801220a:	7dfb      	ldrb	r3, [r7, #23]
 801220c:	005b      	lsls	r3, r3, #1
 801220e:	4619      	mov	r1, r3
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	440b      	add	r3, r1
 8012214:	3230      	adds	r2, #48	; 0x30
 8012216:	b2d2      	uxtb	r2, r2
 8012218:	701a      	strb	r2, [r3, #0]
 801221a:	e00a      	b.n	8012232 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	0f1b      	lsrs	r3, r3, #28
 8012220:	b2da      	uxtb	r2, r3
 8012222:	7dfb      	ldrb	r3, [r7, #23]
 8012224:	005b      	lsls	r3, r3, #1
 8012226:	4619      	mov	r1, r3
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	440b      	add	r3, r1
 801222c:	3237      	adds	r2, #55	; 0x37
 801222e:	b2d2      	uxtb	r2, r2
 8012230:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	011b      	lsls	r3, r3, #4
 8012236:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012238:	7dfb      	ldrb	r3, [r7, #23]
 801223a:	005b      	lsls	r3, r3, #1
 801223c:	3301      	adds	r3, #1
 801223e:	68ba      	ldr	r2, [r7, #8]
 8012240:	4413      	add	r3, r2
 8012242:	2200      	movs	r2, #0
 8012244:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012246:	7dfb      	ldrb	r3, [r7, #23]
 8012248:	3301      	adds	r3, #1
 801224a:	75fb      	strb	r3, [r7, #23]
 801224c:	7dfa      	ldrb	r2, [r7, #23]
 801224e:	79fb      	ldrb	r3, [r7, #7]
 8012250:	429a      	cmp	r2, r3
 8012252:	d3d3      	bcc.n	80121fc <IntToUnicode+0x18>
  }
}
 8012254:	bf00      	nop
 8012256:	371c      	adds	r7, #28
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b08a      	sub	sp, #40	; 0x28
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012268:	f107 0314 	add.w	r3, r7, #20
 801226c:	2200      	movs	r2, #0
 801226e:	601a      	str	r2, [r3, #0]
 8012270:	605a      	str	r2, [r3, #4]
 8012272:	609a      	str	r2, [r3, #8]
 8012274:	60da      	str	r2, [r3, #12]
 8012276:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012280:	d13a      	bne.n	80122f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012282:	2300      	movs	r3, #0
 8012284:	613b      	str	r3, [r7, #16]
 8012286:	4b1e      	ldr	r3, [pc, #120]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 8012288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801228a:	4a1d      	ldr	r2, [pc, #116]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 801228c:	f043 0301 	orr.w	r3, r3, #1
 8012290:	6313      	str	r3, [r2, #48]	; 0x30
 8012292:	4b1b      	ldr	r3, [pc, #108]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 8012294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012296:	f003 0301 	and.w	r3, r3, #1
 801229a:	613b      	str	r3, [r7, #16]
 801229c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801229e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80122a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122a4:	2302      	movs	r3, #2
 80122a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122a8:	2300      	movs	r3, #0
 80122aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122ac:	2303      	movs	r3, #3
 80122ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80122b0:	230a      	movs	r3, #10
 80122b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80122b4:	f107 0314 	add.w	r3, r7, #20
 80122b8:	4619      	mov	r1, r3
 80122ba:	4812      	ldr	r0, [pc, #72]	; (8012304 <HAL_PCD_MspInit+0xa4>)
 80122bc:	f7f4 fb7a 	bl	80069b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80122c0:	4b0f      	ldr	r3, [pc, #60]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 80122c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122c4:	4a0e      	ldr	r2, [pc, #56]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 80122c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122ca:	6353      	str	r3, [r2, #52]	; 0x34
 80122cc:	2300      	movs	r3, #0
 80122ce:	60fb      	str	r3, [r7, #12]
 80122d0:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 80122d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122d4:	4a0a      	ldr	r2, [pc, #40]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 80122d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80122da:	6453      	str	r3, [r2, #68]	; 0x44
 80122dc:	4b08      	ldr	r3, [pc, #32]	; (8012300 <HAL_PCD_MspInit+0xa0>)
 80122de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122e4:	60fb      	str	r3, [r7, #12]
 80122e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80122e8:	2200      	movs	r2, #0
 80122ea:	2105      	movs	r1, #5
 80122ec:	2043      	movs	r0, #67	; 0x43
 80122ee:	f7f3 ffc9 	bl	8006284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80122f2:	2043      	movs	r0, #67	; 0x43
 80122f4:	f7f3 ffe2 	bl	80062bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80122f8:	bf00      	nop
 80122fa:	3728      	adds	r7, #40	; 0x28
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	40023800 	.word	0x40023800
 8012304:	40020000 	.word	0x40020000

08012308 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801231c:	4619      	mov	r1, r3
 801231e:	4610      	mov	r0, r2
 8012320:	f7fc fa02 	bl	800e728 <USBD_LL_SetupStage>
}
 8012324:	bf00      	nop
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801233e:	78fa      	ldrb	r2, [r7, #3]
 8012340:	6879      	ldr	r1, [r7, #4]
 8012342:	4613      	mov	r3, r2
 8012344:	00db      	lsls	r3, r3, #3
 8012346:	1a9b      	subs	r3, r3, r2
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	440b      	add	r3, r1
 801234c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	78fb      	ldrb	r3, [r7, #3]
 8012354:	4619      	mov	r1, r3
 8012356:	f7fc fa3a 	bl	800e7ce <USBD_LL_DataOutStage>
}
 801235a:	bf00      	nop
 801235c:	3708      	adds	r7, #8
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b082      	sub	sp, #8
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
 801236a:	460b      	mov	r3, r1
 801236c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012374:	78fa      	ldrb	r2, [r7, #3]
 8012376:	6879      	ldr	r1, [r7, #4]
 8012378:	4613      	mov	r3, r2
 801237a:	00db      	lsls	r3, r3, #3
 801237c:	1a9b      	subs	r3, r3, r2
 801237e:	009b      	lsls	r3, r3, #2
 8012380:	440b      	add	r3, r1
 8012382:	3348      	adds	r3, #72	; 0x48
 8012384:	681a      	ldr	r2, [r3, #0]
 8012386:	78fb      	ldrb	r3, [r7, #3]
 8012388:	4619      	mov	r1, r3
 801238a:	f7fc fa83 	bl	800e894 <USBD_LL_DataInStage>
}
 801238e:	bf00      	nop
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012396:	b580      	push	{r7, lr}
 8012398:	b082      	sub	sp, #8
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fc fb87 	bl	800eab8 <USBD_LL_SOF>
}
 80123aa:	bf00      	nop
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b084      	sub	sp, #16
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80123ba:	2301      	movs	r3, #1
 80123bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d102      	bne.n	80123cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80123c6:	2300      	movs	r3, #0
 80123c8:	73fb      	strb	r3, [r7, #15]
 80123ca:	e008      	b.n	80123de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	2b02      	cmp	r3, #2
 80123d2:	d102      	bne.n	80123da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80123d4:	2301      	movs	r3, #1
 80123d6:	73fb      	strb	r3, [r7, #15]
 80123d8:	e001      	b.n	80123de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80123da:	f7f2 fbf9 	bl	8004bd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123e4:	7bfa      	ldrb	r2, [r7, #15]
 80123e6:	4611      	mov	r1, r2
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fc fb2a 	bl	800ea42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fc fae3 	bl	800e9c0 <USBD_LL_Reset>
}
 80123fa:	bf00      	nop
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
	...

08012404 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012412:	4618      	mov	r0, r3
 8012414:	f7fc fb25 	bl	800ea62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	6812      	ldr	r2, [r2, #0]
 8012426:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801242a:	f043 0301 	orr.w	r3, r3, #1
 801242e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6a1b      	ldr	r3, [r3, #32]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d005      	beq.n	8012444 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012438:	4b04      	ldr	r3, [pc, #16]	; (801244c <HAL_PCD_SuspendCallback+0x48>)
 801243a:	691b      	ldr	r3, [r3, #16]
 801243c:	4a03      	ldr	r2, [pc, #12]	; (801244c <HAL_PCD_SuspendCallback+0x48>)
 801243e:	f043 0306 	orr.w	r3, r3, #6
 8012442:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012444:	bf00      	nop
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	e000ed00 	.word	0xe000ed00

08012450 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801245e:	4618      	mov	r0, r3
 8012460:	f7fc fb14 	bl	800ea8c <USBD_LL_Resume>
}
 8012464:	bf00      	nop
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801247e:	78fa      	ldrb	r2, [r7, #3]
 8012480:	4611      	mov	r1, r2
 8012482:	4618      	mov	r0, r3
 8012484:	f7fc fb3f 	bl	800eb06 <USBD_LL_IsoOUTIncomplete>
}
 8012488:	bf00      	nop
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	460b      	mov	r3, r1
 801249a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124a2:	78fa      	ldrb	r2, [r7, #3]
 80124a4:	4611      	mov	r1, r2
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7fc fb20 	bl	800eaec <USBD_LL_IsoINIncomplete>
}
 80124ac:	bf00      	nop
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fc fb2c 	bl	800eb20 <USBD_LL_DevConnected>
}
 80124c8:	bf00      	nop
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fc fb29 	bl	800eb36 <USBD_LL_DevDisconnected>
}
 80124e4:	bf00      	nop
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d13c      	bne.n	8012576 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80124fc:	4a20      	ldr	r2, [pc, #128]	; (8012580 <USBD_LL_Init+0x94>)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	4a1e      	ldr	r2, [pc, #120]	; (8012580 <USBD_LL_Init+0x94>)
 8012508:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801250c:	4b1c      	ldr	r3, [pc, #112]	; (8012580 <USBD_LL_Init+0x94>)
 801250e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012512:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012514:	4b1a      	ldr	r3, [pc, #104]	; (8012580 <USBD_LL_Init+0x94>)
 8012516:	2206      	movs	r2, #6
 8012518:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801251a:	4b19      	ldr	r3, [pc, #100]	; (8012580 <USBD_LL_Init+0x94>)
 801251c:	2202      	movs	r2, #2
 801251e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012520:	4b17      	ldr	r3, [pc, #92]	; (8012580 <USBD_LL_Init+0x94>)
 8012522:	2200      	movs	r2, #0
 8012524:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012526:	4b16      	ldr	r3, [pc, #88]	; (8012580 <USBD_LL_Init+0x94>)
 8012528:	2202      	movs	r2, #2
 801252a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801252c:	4b14      	ldr	r3, [pc, #80]	; (8012580 <USBD_LL_Init+0x94>)
 801252e:	2200      	movs	r2, #0
 8012530:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012532:	4b13      	ldr	r3, [pc, #76]	; (8012580 <USBD_LL_Init+0x94>)
 8012534:	2200      	movs	r2, #0
 8012536:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012538:	4b11      	ldr	r3, [pc, #68]	; (8012580 <USBD_LL_Init+0x94>)
 801253a:	2200      	movs	r2, #0
 801253c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801253e:	4b10      	ldr	r3, [pc, #64]	; (8012580 <USBD_LL_Init+0x94>)
 8012540:	2200      	movs	r2, #0
 8012542:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012544:	4b0e      	ldr	r3, [pc, #56]	; (8012580 <USBD_LL_Init+0x94>)
 8012546:	2200      	movs	r2, #0
 8012548:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801254a:	480d      	ldr	r0, [pc, #52]	; (8012580 <USBD_LL_Init+0x94>)
 801254c:	f7f5 fbc1 	bl	8007cd2 <HAL_PCD_Init>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d001      	beq.n	801255a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012556:	f7f2 fb3b 	bl	8004bd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801255a:	2180      	movs	r1, #128	; 0x80
 801255c:	4808      	ldr	r0, [pc, #32]	; (8012580 <USBD_LL_Init+0x94>)
 801255e:	f7f6 fd52 	bl	8009006 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012562:	2240      	movs	r2, #64	; 0x40
 8012564:	2100      	movs	r1, #0
 8012566:	4806      	ldr	r0, [pc, #24]	; (8012580 <USBD_LL_Init+0x94>)
 8012568:	f7f6 fd06 	bl	8008f78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801256c:	2280      	movs	r2, #128	; 0x80
 801256e:	2101      	movs	r1, #1
 8012570:	4803      	ldr	r0, [pc, #12]	; (8012580 <USBD_LL_Init+0x94>)
 8012572:	f7f6 fd01 	bl	8008f78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	200063c4 	.word	0x200063c4

08012584 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801258c:	2300      	movs	r3, #0
 801258e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012590:	2300      	movs	r3, #0
 8012592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801259a:	4618      	mov	r0, r3
 801259c:	f7f5 fcbd 	bl	8007f1a <HAL_PCD_Start>
 80125a0:	4603      	mov	r3, r0
 80125a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125a4:	7bfb      	ldrb	r3, [r7, #15]
 80125a6:	4618      	mov	r0, r3
 80125a8:	f000 f978 	bl	801289c <USBD_Get_USB_Status>
 80125ac:	4603      	mov	r3, r0
 80125ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3710      	adds	r7, #16
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}

080125ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80125ba:	b580      	push	{r7, lr}
 80125bc:	b084      	sub	sp, #16
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
 80125c2:	4608      	mov	r0, r1
 80125c4:	4611      	mov	r1, r2
 80125c6:	461a      	mov	r2, r3
 80125c8:	4603      	mov	r3, r0
 80125ca:	70fb      	strb	r3, [r7, #3]
 80125cc:	460b      	mov	r3, r1
 80125ce:	70bb      	strb	r3, [r7, #2]
 80125d0:	4613      	mov	r3, r2
 80125d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125d4:	2300      	movs	r3, #0
 80125d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125d8:	2300      	movs	r3, #0
 80125da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80125e2:	78bb      	ldrb	r3, [r7, #2]
 80125e4:	883a      	ldrh	r2, [r7, #0]
 80125e6:	78f9      	ldrb	r1, [r7, #3]
 80125e8:	f7f6 f8ce 	bl	8008788 <HAL_PCD_EP_Open>
 80125ec:	4603      	mov	r3, r0
 80125ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125f0:	7bfb      	ldrb	r3, [r7, #15]
 80125f2:	4618      	mov	r0, r3
 80125f4:	f000 f952 	bl	801289c <USBD_Get_USB_Status>
 80125f8:	4603      	mov	r3, r0
 80125fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012606:	b580      	push	{r7, lr}
 8012608:	b084      	sub	sp, #16
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
 801260e:	460b      	mov	r3, r1
 8012610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012612:	2300      	movs	r3, #0
 8012614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012616:	2300      	movs	r3, #0
 8012618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012620:	78fa      	ldrb	r2, [r7, #3]
 8012622:	4611      	mov	r1, r2
 8012624:	4618      	mov	r0, r3
 8012626:	f7f6 f917 	bl	8008858 <HAL_PCD_EP_Close>
 801262a:	4603      	mov	r3, r0
 801262c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801262e:	7bfb      	ldrb	r3, [r7, #15]
 8012630:	4618      	mov	r0, r3
 8012632:	f000 f933 	bl	801289c <USBD_Get_USB_Status>
 8012636:	4603      	mov	r3, r0
 8012638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801263a:	7bbb      	ldrb	r3, [r7, #14]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	460b      	mov	r3, r1
 801264e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012650:	2300      	movs	r3, #0
 8012652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012654:	2300      	movs	r3, #0
 8012656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801265e:	78fa      	ldrb	r2, [r7, #3]
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f7f6 f9ef 	bl	8008a46 <HAL_PCD_EP_SetStall>
 8012668:	4603      	mov	r3, r0
 801266a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801266c:	7bfb      	ldrb	r3, [r7, #15]
 801266e:	4618      	mov	r0, r3
 8012670:	f000 f914 	bl	801289c <USBD_Get_USB_Status>
 8012674:	4603      	mov	r3, r0
 8012676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012678:	7bbb      	ldrb	r3, [r7, #14]
}
 801267a:	4618      	mov	r0, r3
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
 801268a:	460b      	mov	r3, r1
 801268c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801268e:	2300      	movs	r3, #0
 8012690:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012692:	2300      	movs	r3, #0
 8012694:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801269c:	78fa      	ldrb	r2, [r7, #3]
 801269e:	4611      	mov	r1, r2
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7f6 fa34 	bl	8008b0e <HAL_PCD_EP_ClrStall>
 80126a6:	4603      	mov	r3, r0
 80126a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126aa:	7bfb      	ldrb	r3, [r7, #15]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f000 f8f5 	bl	801289c <USBD_Get_USB_Status>
 80126b2:	4603      	mov	r3, r0
 80126b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3710      	adds	r7, #16
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b085      	sub	sp, #20
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	460b      	mov	r3, r1
 80126ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80126d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80126d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	da0b      	bge.n	80126f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80126dc:	78fb      	ldrb	r3, [r7, #3]
 80126de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126e2:	68f9      	ldr	r1, [r7, #12]
 80126e4:	4613      	mov	r3, r2
 80126e6:	00db      	lsls	r3, r3, #3
 80126e8:	1a9b      	subs	r3, r3, r2
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	440b      	add	r3, r1
 80126ee:	333e      	adds	r3, #62	; 0x3e
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	e00b      	b.n	801270c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80126f4:	78fb      	ldrb	r3, [r7, #3]
 80126f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126fa:	68f9      	ldr	r1, [r7, #12]
 80126fc:	4613      	mov	r3, r2
 80126fe:	00db      	lsls	r3, r3, #3
 8012700:	1a9b      	subs	r3, r3, r2
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	440b      	add	r3, r1
 8012706:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801270a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801270c:	4618      	mov	r0, r3
 801270e:	3714      	adds	r7, #20
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr

08012718 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	460b      	mov	r3, r1
 8012722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012724:	2300      	movs	r3, #0
 8012726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012728:	2300      	movs	r3, #0
 801272a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012732:	78fa      	ldrb	r2, [r7, #3]
 8012734:	4611      	mov	r1, r2
 8012736:	4618      	mov	r0, r3
 8012738:	f7f6 f801 	bl	800873e <HAL_PCD_SetAddress>
 801273c:	4603      	mov	r3, r0
 801273e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012740:	7bfb      	ldrb	r3, [r7, #15]
 8012742:	4618      	mov	r0, r3
 8012744:	f000 f8aa 	bl	801289c <USBD_Get_USB_Status>
 8012748:	4603      	mov	r3, r0
 801274a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801274c:	7bbb      	ldrb	r3, [r7, #14]
}
 801274e:	4618      	mov	r0, r3
 8012750:	3710      	adds	r7, #16
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}

08012756 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012756:	b580      	push	{r7, lr}
 8012758:	b086      	sub	sp, #24
 801275a:	af00      	add	r7, sp, #0
 801275c:	60f8      	str	r0, [r7, #12]
 801275e:	607a      	str	r2, [r7, #4]
 8012760:	603b      	str	r3, [r7, #0]
 8012762:	460b      	mov	r3, r1
 8012764:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012766:	2300      	movs	r3, #0
 8012768:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801276a:	2300      	movs	r3, #0
 801276c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012774:	7af9      	ldrb	r1, [r7, #11]
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	f7f6 f91a 	bl	80089b2 <HAL_PCD_EP_Transmit>
 801277e:	4603      	mov	r3, r0
 8012780:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012782:	7dfb      	ldrb	r3, [r7, #23]
 8012784:	4618      	mov	r0, r3
 8012786:	f000 f889 	bl	801289c <USBD_Get_USB_Status>
 801278a:	4603      	mov	r3, r0
 801278c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801278e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012790:	4618      	mov	r0, r3
 8012792:	3718      	adds	r7, #24
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b086      	sub	sp, #24
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	607a      	str	r2, [r7, #4]
 80127a2:	603b      	str	r3, [r7, #0]
 80127a4:	460b      	mov	r3, r1
 80127a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127a8:	2300      	movs	r3, #0
 80127aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127ac:	2300      	movs	r3, #0
 80127ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80127b6:	7af9      	ldrb	r1, [r7, #11]
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	f7f6 f896 	bl	80088ec <HAL_PCD_EP_Receive>
 80127c0:	4603      	mov	r3, r0
 80127c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127c4:	7dfb      	ldrb	r3, [r7, #23]
 80127c6:	4618      	mov	r0, r3
 80127c8:	f000 f868 	bl	801289c <USBD_Get_USB_Status>
 80127cc:	4603      	mov	r3, r0
 80127ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3718      	adds	r7, #24
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127da:	b580      	push	{r7, lr}
 80127dc:	b082      	sub	sp, #8
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	460b      	mov	r3, r1
 80127e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80127ec:	78fa      	ldrb	r2, [r7, #3]
 80127ee:	4611      	mov	r1, r2
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7f6 f8c6 	bl	8008982 <HAL_PCD_EP_GetRxCount>
 80127f6:	4603      	mov	r3, r0
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3708      	adds	r7, #8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	460b      	mov	r3, r1
 801280a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801280c:	78fb      	ldrb	r3, [r7, #3]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d002      	beq.n	8012818 <HAL_PCDEx_LPM_Callback+0x18>
 8012812:	2b01      	cmp	r3, #1
 8012814:	d01f      	beq.n	8012856 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012816:	e03b      	b.n	8012890 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6a1b      	ldr	r3, [r3, #32]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d007      	beq.n	8012830 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8012820:	f7f1 f8a0 	bl	8003964 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012824:	4b1c      	ldr	r3, [pc, #112]	; (8012898 <HAL_PCDEx_LPM_Callback+0x98>)
 8012826:	691b      	ldr	r3, [r3, #16]
 8012828:	4a1b      	ldr	r2, [pc, #108]	; (8012898 <HAL_PCDEx_LPM_Callback+0x98>)
 801282a:	f023 0306 	bic.w	r3, r3, #6
 801282e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	6812      	ldr	r2, [r2, #0]
 801283e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012842:	f023 0301 	bic.w	r3, r3, #1
 8012846:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801284e:	4618      	mov	r0, r3
 8012850:	f7fc f91c 	bl	800ea8c <USBD_LL_Resume>
    break;
 8012854:	e01c      	b.n	8012890 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	6812      	ldr	r2, [r2, #0]
 8012864:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012868:	f043 0301 	orr.w	r3, r3, #1
 801286c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012874:	4618      	mov	r0, r3
 8012876:	f7fc f8f4 	bl	800ea62 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6a1b      	ldr	r3, [r3, #32]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d005      	beq.n	801288e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012882:	4b05      	ldr	r3, [pc, #20]	; (8012898 <HAL_PCDEx_LPM_Callback+0x98>)
 8012884:	691b      	ldr	r3, [r3, #16]
 8012886:	4a04      	ldr	r2, [pc, #16]	; (8012898 <HAL_PCDEx_LPM_Callback+0x98>)
 8012888:	f043 0306 	orr.w	r3, r3, #6
 801288c:	6113      	str	r3, [r2, #16]
    break;
 801288e:	bf00      	nop
}
 8012890:	bf00      	nop
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}
 8012898:	e000ed00 	.word	0xe000ed00

0801289c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801289c:	b480      	push	{r7}
 801289e:	b085      	sub	sp, #20
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	4603      	mov	r3, r0
 80128a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80128aa:	79fb      	ldrb	r3, [r7, #7]
 80128ac:	2b03      	cmp	r3, #3
 80128ae:	d817      	bhi.n	80128e0 <USBD_Get_USB_Status+0x44>
 80128b0:	a201      	add	r2, pc, #4	; (adr r2, 80128b8 <USBD_Get_USB_Status+0x1c>)
 80128b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128b6:	bf00      	nop
 80128b8:	080128c9 	.word	0x080128c9
 80128bc:	080128cf 	.word	0x080128cf
 80128c0:	080128d5 	.word	0x080128d5
 80128c4:	080128db 	.word	0x080128db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80128c8:	2300      	movs	r3, #0
 80128ca:	73fb      	strb	r3, [r7, #15]
    break;
 80128cc:	e00b      	b.n	80128e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80128ce:	2303      	movs	r3, #3
 80128d0:	73fb      	strb	r3, [r7, #15]
    break;
 80128d2:	e008      	b.n	80128e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80128d4:	2301      	movs	r3, #1
 80128d6:	73fb      	strb	r3, [r7, #15]
    break;
 80128d8:	e005      	b.n	80128e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80128da:	2303      	movs	r3, #3
 80128dc:	73fb      	strb	r3, [r7, #15]
    break;
 80128de:	e002      	b.n	80128e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80128e0:	2303      	movs	r3, #3
 80128e2:	73fb      	strb	r3, [r7, #15]
    break;
 80128e4:	bf00      	nop
  }
  return usb_status;
 80128e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3714      	adds	r7, #20
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <__assert_func>:
 80128f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128f6:	461c      	mov	r4, r3
 80128f8:	4b09      	ldr	r3, [pc, #36]	; (8012920 <__assert_func+0x2c>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4605      	mov	r5, r0
 80128fe:	68d8      	ldr	r0, [r3, #12]
 8012900:	b152      	cbz	r2, 8012918 <__assert_func+0x24>
 8012902:	4b08      	ldr	r3, [pc, #32]	; (8012924 <__assert_func+0x30>)
 8012904:	9100      	str	r1, [sp, #0]
 8012906:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801290a:	4907      	ldr	r1, [pc, #28]	; (8012928 <__assert_func+0x34>)
 801290c:	462b      	mov	r3, r5
 801290e:	4622      	mov	r2, r4
 8012910:	f000 f814 	bl	801293c <fiprintf>
 8012914:	f001 f83a 	bl	801398c <abort>
 8012918:	4b04      	ldr	r3, [pc, #16]	; (801292c <__assert_func+0x38>)
 801291a:	461a      	mov	r2, r3
 801291c:	e7f2      	b.n	8012904 <__assert_func+0x10>
 801291e:	bf00      	nop
 8012920:	20000434 	.word	0x20000434
 8012924:	080186a8 	.word	0x080186a8
 8012928:	080186b5 	.word	0x080186b5
 801292c:	080186e3 	.word	0x080186e3

08012930 <__errno>:
 8012930:	4b01      	ldr	r3, [pc, #4]	; (8012938 <__errno+0x8>)
 8012932:	6818      	ldr	r0, [r3, #0]
 8012934:	4770      	bx	lr
 8012936:	bf00      	nop
 8012938:	20000434 	.word	0x20000434

0801293c <fiprintf>:
 801293c:	b40e      	push	{r1, r2, r3}
 801293e:	b503      	push	{r0, r1, lr}
 8012940:	4601      	mov	r1, r0
 8012942:	ab03      	add	r3, sp, #12
 8012944:	4805      	ldr	r0, [pc, #20]	; (801295c <fiprintf+0x20>)
 8012946:	f853 2b04 	ldr.w	r2, [r3], #4
 801294a:	6800      	ldr	r0, [r0, #0]
 801294c:	9301      	str	r3, [sp, #4]
 801294e:	f000 f921 	bl	8012b94 <_vfiprintf_r>
 8012952:	b002      	add	sp, #8
 8012954:	f85d eb04 	ldr.w	lr, [sp], #4
 8012958:	b003      	add	sp, #12
 801295a:	4770      	bx	lr
 801295c:	20000434 	.word	0x20000434

08012960 <__libc_init_array>:
 8012960:	b570      	push	{r4, r5, r6, lr}
 8012962:	4e0d      	ldr	r6, [pc, #52]	; (8012998 <__libc_init_array+0x38>)
 8012964:	4c0d      	ldr	r4, [pc, #52]	; (801299c <__libc_init_array+0x3c>)
 8012966:	1ba4      	subs	r4, r4, r6
 8012968:	10a4      	asrs	r4, r4, #2
 801296a:	2500      	movs	r5, #0
 801296c:	42a5      	cmp	r5, r4
 801296e:	d109      	bne.n	8012984 <__libc_init_array+0x24>
 8012970:	4e0b      	ldr	r6, [pc, #44]	; (80129a0 <__libc_init_array+0x40>)
 8012972:	4c0c      	ldr	r4, [pc, #48]	; (80129a4 <__libc_init_array+0x44>)
 8012974:	f005 fb26 	bl	8017fc4 <_init>
 8012978:	1ba4      	subs	r4, r4, r6
 801297a:	10a4      	asrs	r4, r4, #2
 801297c:	2500      	movs	r5, #0
 801297e:	42a5      	cmp	r5, r4
 8012980:	d105      	bne.n	801298e <__libc_init_array+0x2e>
 8012982:	bd70      	pop	{r4, r5, r6, pc}
 8012984:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012988:	4798      	blx	r3
 801298a:	3501      	adds	r5, #1
 801298c:	e7ee      	b.n	801296c <__libc_init_array+0xc>
 801298e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012992:	4798      	blx	r3
 8012994:	3501      	adds	r5, #1
 8012996:	e7f2      	b.n	801297e <__libc_init_array+0x1e>
 8012998:	08018c18 	.word	0x08018c18
 801299c:	08018c18 	.word	0x08018c18
 80129a0:	08018c18 	.word	0x08018c18
 80129a4:	08018c1c 	.word	0x08018c1c

080129a8 <malloc>:
 80129a8:	4b02      	ldr	r3, [pc, #8]	; (80129b4 <malloc+0xc>)
 80129aa:	4601      	mov	r1, r0
 80129ac:	6818      	ldr	r0, [r3, #0]
 80129ae:	f000 b86d 	b.w	8012a8c <_malloc_r>
 80129b2:	bf00      	nop
 80129b4:	20000434 	.word	0x20000434

080129b8 <free>:
 80129b8:	4b02      	ldr	r3, [pc, #8]	; (80129c4 <free+0xc>)
 80129ba:	4601      	mov	r1, r0
 80129bc:	6818      	ldr	r0, [r3, #0]
 80129be:	f000 b817 	b.w	80129f0 <_free_r>
 80129c2:	bf00      	nop
 80129c4:	20000434 	.word	0x20000434

080129c8 <memcpy>:
 80129c8:	b510      	push	{r4, lr}
 80129ca:	1e43      	subs	r3, r0, #1
 80129cc:	440a      	add	r2, r1
 80129ce:	4291      	cmp	r1, r2
 80129d0:	d100      	bne.n	80129d4 <memcpy+0xc>
 80129d2:	bd10      	pop	{r4, pc}
 80129d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129dc:	e7f7      	b.n	80129ce <memcpy+0x6>

080129de <memset>:
 80129de:	4402      	add	r2, r0
 80129e0:	4603      	mov	r3, r0
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d100      	bne.n	80129e8 <memset+0xa>
 80129e6:	4770      	bx	lr
 80129e8:	f803 1b01 	strb.w	r1, [r3], #1
 80129ec:	e7f9      	b.n	80129e2 <memset+0x4>
	...

080129f0 <_free_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	4605      	mov	r5, r0
 80129f4:	2900      	cmp	r1, #0
 80129f6:	d045      	beq.n	8012a84 <_free_r+0x94>
 80129f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129fc:	1f0c      	subs	r4, r1, #4
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	bfb8      	it	lt
 8012a02:	18e4      	addlt	r4, r4, r3
 8012a04:	f002 f837 	bl	8014a76 <__malloc_lock>
 8012a08:	4a1f      	ldr	r2, [pc, #124]	; (8012a88 <_free_r+0x98>)
 8012a0a:	6813      	ldr	r3, [r2, #0]
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	b933      	cbnz	r3, 8012a1e <_free_r+0x2e>
 8012a10:	6063      	str	r3, [r4, #4]
 8012a12:	6014      	str	r4, [r2, #0]
 8012a14:	4628      	mov	r0, r5
 8012a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a1a:	f002 b82d 	b.w	8014a78 <__malloc_unlock>
 8012a1e:	42a3      	cmp	r3, r4
 8012a20:	d90c      	bls.n	8012a3c <_free_r+0x4c>
 8012a22:	6821      	ldr	r1, [r4, #0]
 8012a24:	1862      	adds	r2, r4, r1
 8012a26:	4293      	cmp	r3, r2
 8012a28:	bf04      	itt	eq
 8012a2a:	681a      	ldreq	r2, [r3, #0]
 8012a2c:	685b      	ldreq	r3, [r3, #4]
 8012a2e:	6063      	str	r3, [r4, #4]
 8012a30:	bf04      	itt	eq
 8012a32:	1852      	addeq	r2, r2, r1
 8012a34:	6022      	streq	r2, [r4, #0]
 8012a36:	6004      	str	r4, [r0, #0]
 8012a38:	e7ec      	b.n	8012a14 <_free_r+0x24>
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	685a      	ldr	r2, [r3, #4]
 8012a3e:	b10a      	cbz	r2, 8012a44 <_free_r+0x54>
 8012a40:	42a2      	cmp	r2, r4
 8012a42:	d9fa      	bls.n	8012a3a <_free_r+0x4a>
 8012a44:	6819      	ldr	r1, [r3, #0]
 8012a46:	1858      	adds	r0, r3, r1
 8012a48:	42a0      	cmp	r0, r4
 8012a4a:	d10b      	bne.n	8012a64 <_free_r+0x74>
 8012a4c:	6820      	ldr	r0, [r4, #0]
 8012a4e:	4401      	add	r1, r0
 8012a50:	1858      	adds	r0, r3, r1
 8012a52:	4282      	cmp	r2, r0
 8012a54:	6019      	str	r1, [r3, #0]
 8012a56:	d1dd      	bne.n	8012a14 <_free_r+0x24>
 8012a58:	6810      	ldr	r0, [r2, #0]
 8012a5a:	6852      	ldr	r2, [r2, #4]
 8012a5c:	605a      	str	r2, [r3, #4]
 8012a5e:	4401      	add	r1, r0
 8012a60:	6019      	str	r1, [r3, #0]
 8012a62:	e7d7      	b.n	8012a14 <_free_r+0x24>
 8012a64:	d902      	bls.n	8012a6c <_free_r+0x7c>
 8012a66:	230c      	movs	r3, #12
 8012a68:	602b      	str	r3, [r5, #0]
 8012a6a:	e7d3      	b.n	8012a14 <_free_r+0x24>
 8012a6c:	6820      	ldr	r0, [r4, #0]
 8012a6e:	1821      	adds	r1, r4, r0
 8012a70:	428a      	cmp	r2, r1
 8012a72:	bf04      	itt	eq
 8012a74:	6811      	ldreq	r1, [r2, #0]
 8012a76:	6852      	ldreq	r2, [r2, #4]
 8012a78:	6062      	str	r2, [r4, #4]
 8012a7a:	bf04      	itt	eq
 8012a7c:	1809      	addeq	r1, r1, r0
 8012a7e:	6021      	streq	r1, [r4, #0]
 8012a80:	605c      	str	r4, [r3, #4]
 8012a82:	e7c7      	b.n	8012a14 <_free_r+0x24>
 8012a84:	bd38      	pop	{r3, r4, r5, pc}
 8012a86:	bf00      	nop
 8012a88:	200045e0 	.word	0x200045e0

08012a8c <_malloc_r>:
 8012a8c:	b570      	push	{r4, r5, r6, lr}
 8012a8e:	1ccd      	adds	r5, r1, #3
 8012a90:	f025 0503 	bic.w	r5, r5, #3
 8012a94:	3508      	adds	r5, #8
 8012a96:	2d0c      	cmp	r5, #12
 8012a98:	bf38      	it	cc
 8012a9a:	250c      	movcc	r5, #12
 8012a9c:	2d00      	cmp	r5, #0
 8012a9e:	4606      	mov	r6, r0
 8012aa0:	db01      	blt.n	8012aa6 <_malloc_r+0x1a>
 8012aa2:	42a9      	cmp	r1, r5
 8012aa4:	d903      	bls.n	8012aae <_malloc_r+0x22>
 8012aa6:	230c      	movs	r3, #12
 8012aa8:	6033      	str	r3, [r6, #0]
 8012aaa:	2000      	movs	r0, #0
 8012aac:	bd70      	pop	{r4, r5, r6, pc}
 8012aae:	f001 ffe2 	bl	8014a76 <__malloc_lock>
 8012ab2:	4a21      	ldr	r2, [pc, #132]	; (8012b38 <_malloc_r+0xac>)
 8012ab4:	6814      	ldr	r4, [r2, #0]
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	b991      	cbnz	r1, 8012ae0 <_malloc_r+0x54>
 8012aba:	4c20      	ldr	r4, [pc, #128]	; (8012b3c <_malloc_r+0xb0>)
 8012abc:	6823      	ldr	r3, [r4, #0]
 8012abe:	b91b      	cbnz	r3, 8012ac8 <_malloc_r+0x3c>
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	f000 fde9 	bl	8013698 <_sbrk_r>
 8012ac6:	6020      	str	r0, [r4, #0]
 8012ac8:	4629      	mov	r1, r5
 8012aca:	4630      	mov	r0, r6
 8012acc:	f000 fde4 	bl	8013698 <_sbrk_r>
 8012ad0:	1c43      	adds	r3, r0, #1
 8012ad2:	d124      	bne.n	8012b1e <_malloc_r+0x92>
 8012ad4:	230c      	movs	r3, #12
 8012ad6:	6033      	str	r3, [r6, #0]
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f001 ffcd 	bl	8014a78 <__malloc_unlock>
 8012ade:	e7e4      	b.n	8012aaa <_malloc_r+0x1e>
 8012ae0:	680b      	ldr	r3, [r1, #0]
 8012ae2:	1b5b      	subs	r3, r3, r5
 8012ae4:	d418      	bmi.n	8012b18 <_malloc_r+0x8c>
 8012ae6:	2b0b      	cmp	r3, #11
 8012ae8:	d90f      	bls.n	8012b0a <_malloc_r+0x7e>
 8012aea:	600b      	str	r3, [r1, #0]
 8012aec:	50cd      	str	r5, [r1, r3]
 8012aee:	18cc      	adds	r4, r1, r3
 8012af0:	4630      	mov	r0, r6
 8012af2:	f001 ffc1 	bl	8014a78 <__malloc_unlock>
 8012af6:	f104 000b 	add.w	r0, r4, #11
 8012afa:	1d23      	adds	r3, r4, #4
 8012afc:	f020 0007 	bic.w	r0, r0, #7
 8012b00:	1ac3      	subs	r3, r0, r3
 8012b02:	d0d3      	beq.n	8012aac <_malloc_r+0x20>
 8012b04:	425a      	negs	r2, r3
 8012b06:	50e2      	str	r2, [r4, r3]
 8012b08:	e7d0      	b.n	8012aac <_malloc_r+0x20>
 8012b0a:	428c      	cmp	r4, r1
 8012b0c:	684b      	ldr	r3, [r1, #4]
 8012b0e:	bf16      	itet	ne
 8012b10:	6063      	strne	r3, [r4, #4]
 8012b12:	6013      	streq	r3, [r2, #0]
 8012b14:	460c      	movne	r4, r1
 8012b16:	e7eb      	b.n	8012af0 <_malloc_r+0x64>
 8012b18:	460c      	mov	r4, r1
 8012b1a:	6849      	ldr	r1, [r1, #4]
 8012b1c:	e7cc      	b.n	8012ab8 <_malloc_r+0x2c>
 8012b1e:	1cc4      	adds	r4, r0, #3
 8012b20:	f024 0403 	bic.w	r4, r4, #3
 8012b24:	42a0      	cmp	r0, r4
 8012b26:	d005      	beq.n	8012b34 <_malloc_r+0xa8>
 8012b28:	1a21      	subs	r1, r4, r0
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f000 fdb4 	bl	8013698 <_sbrk_r>
 8012b30:	3001      	adds	r0, #1
 8012b32:	d0cf      	beq.n	8012ad4 <_malloc_r+0x48>
 8012b34:	6025      	str	r5, [r4, #0]
 8012b36:	e7db      	b.n	8012af0 <_malloc_r+0x64>
 8012b38:	200045e0 	.word	0x200045e0
 8012b3c:	200045e4 	.word	0x200045e4

08012b40 <__sfputc_r>:
 8012b40:	6893      	ldr	r3, [r2, #8]
 8012b42:	3b01      	subs	r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	b410      	push	{r4}
 8012b48:	6093      	str	r3, [r2, #8]
 8012b4a:	da08      	bge.n	8012b5e <__sfputc_r+0x1e>
 8012b4c:	6994      	ldr	r4, [r2, #24]
 8012b4e:	42a3      	cmp	r3, r4
 8012b50:	db01      	blt.n	8012b56 <__sfputc_r+0x16>
 8012b52:	290a      	cmp	r1, #10
 8012b54:	d103      	bne.n	8012b5e <__sfputc_r+0x1e>
 8012b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b5a:	f000 be45 	b.w	80137e8 <__swbuf_r>
 8012b5e:	6813      	ldr	r3, [r2, #0]
 8012b60:	1c58      	adds	r0, r3, #1
 8012b62:	6010      	str	r0, [r2, #0]
 8012b64:	7019      	strb	r1, [r3, #0]
 8012b66:	4608      	mov	r0, r1
 8012b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b6c:	4770      	bx	lr

08012b6e <__sfputs_r>:
 8012b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b70:	4606      	mov	r6, r0
 8012b72:	460f      	mov	r7, r1
 8012b74:	4614      	mov	r4, r2
 8012b76:	18d5      	adds	r5, r2, r3
 8012b78:	42ac      	cmp	r4, r5
 8012b7a:	d101      	bne.n	8012b80 <__sfputs_r+0x12>
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	e007      	b.n	8012b90 <__sfputs_r+0x22>
 8012b80:	463a      	mov	r2, r7
 8012b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b86:	4630      	mov	r0, r6
 8012b88:	f7ff ffda 	bl	8012b40 <__sfputc_r>
 8012b8c:	1c43      	adds	r3, r0, #1
 8012b8e:	d1f3      	bne.n	8012b78 <__sfputs_r+0xa>
 8012b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b94 <_vfiprintf_r>:
 8012b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b98:	460c      	mov	r4, r1
 8012b9a:	b09d      	sub	sp, #116	; 0x74
 8012b9c:	4617      	mov	r7, r2
 8012b9e:	461d      	mov	r5, r3
 8012ba0:	4606      	mov	r6, r0
 8012ba2:	b118      	cbz	r0, 8012bac <_vfiprintf_r+0x18>
 8012ba4:	6983      	ldr	r3, [r0, #24]
 8012ba6:	b90b      	cbnz	r3, 8012bac <_vfiprintf_r+0x18>
 8012ba8:	f001 fe3e 	bl	8014828 <__sinit>
 8012bac:	4b7c      	ldr	r3, [pc, #496]	; (8012da0 <_vfiprintf_r+0x20c>)
 8012bae:	429c      	cmp	r4, r3
 8012bb0:	d158      	bne.n	8012c64 <_vfiprintf_r+0xd0>
 8012bb2:	6874      	ldr	r4, [r6, #4]
 8012bb4:	89a3      	ldrh	r3, [r4, #12]
 8012bb6:	0718      	lsls	r0, r3, #28
 8012bb8:	d55e      	bpl.n	8012c78 <_vfiprintf_r+0xe4>
 8012bba:	6923      	ldr	r3, [r4, #16]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d05b      	beq.n	8012c78 <_vfiprintf_r+0xe4>
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8012bc4:	2320      	movs	r3, #32
 8012bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bca:	2330      	movs	r3, #48	; 0x30
 8012bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bd0:	9503      	str	r5, [sp, #12]
 8012bd2:	f04f 0b01 	mov.w	fp, #1
 8012bd6:	46b8      	mov	r8, r7
 8012bd8:	4645      	mov	r5, r8
 8012bda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012bde:	b10b      	cbz	r3, 8012be4 <_vfiprintf_r+0x50>
 8012be0:	2b25      	cmp	r3, #37	; 0x25
 8012be2:	d154      	bne.n	8012c8e <_vfiprintf_r+0xfa>
 8012be4:	ebb8 0a07 	subs.w	sl, r8, r7
 8012be8:	d00b      	beq.n	8012c02 <_vfiprintf_r+0x6e>
 8012bea:	4653      	mov	r3, sl
 8012bec:	463a      	mov	r2, r7
 8012bee:	4621      	mov	r1, r4
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	f7ff ffbc 	bl	8012b6e <__sfputs_r>
 8012bf6:	3001      	adds	r0, #1
 8012bf8:	f000 80c2 	beq.w	8012d80 <_vfiprintf_r+0x1ec>
 8012bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bfe:	4453      	add	r3, sl
 8012c00:	9309      	str	r3, [sp, #36]	; 0x24
 8012c02:	f898 3000 	ldrb.w	r3, [r8]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f000 80ba 	beq.w	8012d80 <_vfiprintf_r+0x1ec>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c16:	9304      	str	r3, [sp, #16]
 8012c18:	9307      	str	r3, [sp, #28]
 8012c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8012c20:	46a8      	mov	r8, r5
 8012c22:	2205      	movs	r2, #5
 8012c24:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012c28:	485e      	ldr	r0, [pc, #376]	; (8012da4 <_vfiprintf_r+0x210>)
 8012c2a:	f7ed faf9 	bl	8000220 <memchr>
 8012c2e:	9b04      	ldr	r3, [sp, #16]
 8012c30:	bb78      	cbnz	r0, 8012c92 <_vfiprintf_r+0xfe>
 8012c32:	06d9      	lsls	r1, r3, #27
 8012c34:	bf44      	itt	mi
 8012c36:	2220      	movmi	r2, #32
 8012c38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c3c:	071a      	lsls	r2, r3, #28
 8012c3e:	bf44      	itt	mi
 8012c40:	222b      	movmi	r2, #43	; 0x2b
 8012c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c46:	782a      	ldrb	r2, [r5, #0]
 8012c48:	2a2a      	cmp	r2, #42	; 0x2a
 8012c4a:	d02a      	beq.n	8012ca2 <_vfiprintf_r+0x10e>
 8012c4c:	9a07      	ldr	r2, [sp, #28]
 8012c4e:	46a8      	mov	r8, r5
 8012c50:	2000      	movs	r0, #0
 8012c52:	250a      	movs	r5, #10
 8012c54:	4641      	mov	r1, r8
 8012c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c5a:	3b30      	subs	r3, #48	; 0x30
 8012c5c:	2b09      	cmp	r3, #9
 8012c5e:	d969      	bls.n	8012d34 <_vfiprintf_r+0x1a0>
 8012c60:	b360      	cbz	r0, 8012cbc <_vfiprintf_r+0x128>
 8012c62:	e024      	b.n	8012cae <_vfiprintf_r+0x11a>
 8012c64:	4b50      	ldr	r3, [pc, #320]	; (8012da8 <_vfiprintf_r+0x214>)
 8012c66:	429c      	cmp	r4, r3
 8012c68:	d101      	bne.n	8012c6e <_vfiprintf_r+0xda>
 8012c6a:	68b4      	ldr	r4, [r6, #8]
 8012c6c:	e7a2      	b.n	8012bb4 <_vfiprintf_r+0x20>
 8012c6e:	4b4f      	ldr	r3, [pc, #316]	; (8012dac <_vfiprintf_r+0x218>)
 8012c70:	429c      	cmp	r4, r3
 8012c72:	bf08      	it	eq
 8012c74:	68f4      	ldreq	r4, [r6, #12]
 8012c76:	e79d      	b.n	8012bb4 <_vfiprintf_r+0x20>
 8012c78:	4621      	mov	r1, r4
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	f000 fe18 	bl	80138b0 <__swsetup_r>
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d09d      	beq.n	8012bc0 <_vfiprintf_r+0x2c>
 8012c84:	f04f 30ff 	mov.w	r0, #4294967295
 8012c88:	b01d      	add	sp, #116	; 0x74
 8012c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8e:	46a8      	mov	r8, r5
 8012c90:	e7a2      	b.n	8012bd8 <_vfiprintf_r+0x44>
 8012c92:	4a44      	ldr	r2, [pc, #272]	; (8012da4 <_vfiprintf_r+0x210>)
 8012c94:	1a80      	subs	r0, r0, r2
 8012c96:	fa0b f000 	lsl.w	r0, fp, r0
 8012c9a:	4318      	orrs	r0, r3
 8012c9c:	9004      	str	r0, [sp, #16]
 8012c9e:	4645      	mov	r5, r8
 8012ca0:	e7be      	b.n	8012c20 <_vfiprintf_r+0x8c>
 8012ca2:	9a03      	ldr	r2, [sp, #12]
 8012ca4:	1d11      	adds	r1, r2, #4
 8012ca6:	6812      	ldr	r2, [r2, #0]
 8012ca8:	9103      	str	r1, [sp, #12]
 8012caa:	2a00      	cmp	r2, #0
 8012cac:	db01      	blt.n	8012cb2 <_vfiprintf_r+0x11e>
 8012cae:	9207      	str	r2, [sp, #28]
 8012cb0:	e004      	b.n	8012cbc <_vfiprintf_r+0x128>
 8012cb2:	4252      	negs	r2, r2
 8012cb4:	f043 0302 	orr.w	r3, r3, #2
 8012cb8:	9207      	str	r2, [sp, #28]
 8012cba:	9304      	str	r3, [sp, #16]
 8012cbc:	f898 3000 	ldrb.w	r3, [r8]
 8012cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8012cc2:	d10e      	bne.n	8012ce2 <_vfiprintf_r+0x14e>
 8012cc4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8012cca:	d138      	bne.n	8012d3e <_vfiprintf_r+0x1aa>
 8012ccc:	9b03      	ldr	r3, [sp, #12]
 8012cce:	1d1a      	adds	r2, r3, #4
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	9203      	str	r2, [sp, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	bfb8      	it	lt
 8012cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cdc:	f108 0802 	add.w	r8, r8, #2
 8012ce0:	9305      	str	r3, [sp, #20]
 8012ce2:	4d33      	ldr	r5, [pc, #204]	; (8012db0 <_vfiprintf_r+0x21c>)
 8012ce4:	f898 1000 	ldrb.w	r1, [r8]
 8012ce8:	2203      	movs	r2, #3
 8012cea:	4628      	mov	r0, r5
 8012cec:	f7ed fa98 	bl	8000220 <memchr>
 8012cf0:	b140      	cbz	r0, 8012d04 <_vfiprintf_r+0x170>
 8012cf2:	2340      	movs	r3, #64	; 0x40
 8012cf4:	1b40      	subs	r0, r0, r5
 8012cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8012cfa:	9b04      	ldr	r3, [sp, #16]
 8012cfc:	4303      	orrs	r3, r0
 8012cfe:	f108 0801 	add.w	r8, r8, #1
 8012d02:	9304      	str	r3, [sp, #16]
 8012d04:	f898 1000 	ldrb.w	r1, [r8]
 8012d08:	482a      	ldr	r0, [pc, #168]	; (8012db4 <_vfiprintf_r+0x220>)
 8012d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d0e:	2206      	movs	r2, #6
 8012d10:	f108 0701 	add.w	r7, r8, #1
 8012d14:	f7ed fa84 	bl	8000220 <memchr>
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	d037      	beq.n	8012d8c <_vfiprintf_r+0x1f8>
 8012d1c:	4b26      	ldr	r3, [pc, #152]	; (8012db8 <_vfiprintf_r+0x224>)
 8012d1e:	bb1b      	cbnz	r3, 8012d68 <_vfiprintf_r+0x1d4>
 8012d20:	9b03      	ldr	r3, [sp, #12]
 8012d22:	3307      	adds	r3, #7
 8012d24:	f023 0307 	bic.w	r3, r3, #7
 8012d28:	3308      	adds	r3, #8
 8012d2a:	9303      	str	r3, [sp, #12]
 8012d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d2e:	444b      	add	r3, r9
 8012d30:	9309      	str	r3, [sp, #36]	; 0x24
 8012d32:	e750      	b.n	8012bd6 <_vfiprintf_r+0x42>
 8012d34:	fb05 3202 	mla	r2, r5, r2, r3
 8012d38:	2001      	movs	r0, #1
 8012d3a:	4688      	mov	r8, r1
 8012d3c:	e78a      	b.n	8012c54 <_vfiprintf_r+0xc0>
 8012d3e:	2300      	movs	r3, #0
 8012d40:	f108 0801 	add.w	r8, r8, #1
 8012d44:	9305      	str	r3, [sp, #20]
 8012d46:	4619      	mov	r1, r3
 8012d48:	250a      	movs	r5, #10
 8012d4a:	4640      	mov	r0, r8
 8012d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d50:	3a30      	subs	r2, #48	; 0x30
 8012d52:	2a09      	cmp	r2, #9
 8012d54:	d903      	bls.n	8012d5e <_vfiprintf_r+0x1ca>
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d0c3      	beq.n	8012ce2 <_vfiprintf_r+0x14e>
 8012d5a:	9105      	str	r1, [sp, #20]
 8012d5c:	e7c1      	b.n	8012ce2 <_vfiprintf_r+0x14e>
 8012d5e:	fb05 2101 	mla	r1, r5, r1, r2
 8012d62:	2301      	movs	r3, #1
 8012d64:	4680      	mov	r8, r0
 8012d66:	e7f0      	b.n	8012d4a <_vfiprintf_r+0x1b6>
 8012d68:	ab03      	add	r3, sp, #12
 8012d6a:	9300      	str	r3, [sp, #0]
 8012d6c:	4622      	mov	r2, r4
 8012d6e:	4b13      	ldr	r3, [pc, #76]	; (8012dbc <_vfiprintf_r+0x228>)
 8012d70:	a904      	add	r1, sp, #16
 8012d72:	4630      	mov	r0, r6
 8012d74:	f000 f8b8 	bl	8012ee8 <_printf_float>
 8012d78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012d7c:	4681      	mov	r9, r0
 8012d7e:	d1d5      	bne.n	8012d2c <_vfiprintf_r+0x198>
 8012d80:	89a3      	ldrh	r3, [r4, #12]
 8012d82:	065b      	lsls	r3, r3, #25
 8012d84:	f53f af7e 	bmi.w	8012c84 <_vfiprintf_r+0xf0>
 8012d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d8a:	e77d      	b.n	8012c88 <_vfiprintf_r+0xf4>
 8012d8c:	ab03      	add	r3, sp, #12
 8012d8e:	9300      	str	r3, [sp, #0]
 8012d90:	4622      	mov	r2, r4
 8012d92:	4b0a      	ldr	r3, [pc, #40]	; (8012dbc <_vfiprintf_r+0x228>)
 8012d94:	a904      	add	r1, sp, #16
 8012d96:	4630      	mov	r0, r6
 8012d98:	f000 fb5c 	bl	8013454 <_printf_i>
 8012d9c:	e7ec      	b.n	8012d78 <_vfiprintf_r+0x1e4>
 8012d9e:	bf00      	nop
 8012da0:	0801875c 	.word	0x0801875c
 8012da4:	080186e8 	.word	0x080186e8
 8012da8:	0801877c 	.word	0x0801877c
 8012dac:	0801873c 	.word	0x0801873c
 8012db0:	080186ee 	.word	0x080186ee
 8012db4:	080186f2 	.word	0x080186f2
 8012db8:	08012ee9 	.word	0x08012ee9
 8012dbc:	08012b6f 	.word	0x08012b6f

08012dc0 <__cvt>:
 8012dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc4:	ec55 4b10 	vmov	r4, r5, d0
 8012dc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012dca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012dce:	2d00      	cmp	r5, #0
 8012dd0:	460e      	mov	r6, r1
 8012dd2:	4691      	mov	r9, r2
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	bfb8      	it	lt
 8012dd8:	4622      	movlt	r2, r4
 8012dda:	462b      	mov	r3, r5
 8012ddc:	f027 0720 	bic.w	r7, r7, #32
 8012de0:	bfbb      	ittet	lt
 8012de2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012de6:	461d      	movlt	r5, r3
 8012de8:	2300      	movge	r3, #0
 8012dea:	232d      	movlt	r3, #45	; 0x2d
 8012dec:	bfb8      	it	lt
 8012dee:	4614      	movlt	r4, r2
 8012df0:	2f46      	cmp	r7, #70	; 0x46
 8012df2:	700b      	strb	r3, [r1, #0]
 8012df4:	d004      	beq.n	8012e00 <__cvt+0x40>
 8012df6:	2f45      	cmp	r7, #69	; 0x45
 8012df8:	d100      	bne.n	8012dfc <__cvt+0x3c>
 8012dfa:	3601      	adds	r6, #1
 8012dfc:	2102      	movs	r1, #2
 8012dfe:	e000      	b.n	8012e02 <__cvt+0x42>
 8012e00:	2103      	movs	r1, #3
 8012e02:	ab03      	add	r3, sp, #12
 8012e04:	9301      	str	r3, [sp, #4]
 8012e06:	ab02      	add	r3, sp, #8
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	4632      	mov	r2, r6
 8012e0c:	4653      	mov	r3, sl
 8012e0e:	ec45 4b10 	vmov	d0, r4, r5
 8012e12:	f000 fe61 	bl	8013ad8 <_dtoa_r>
 8012e16:	2f47      	cmp	r7, #71	; 0x47
 8012e18:	4680      	mov	r8, r0
 8012e1a:	d102      	bne.n	8012e22 <__cvt+0x62>
 8012e1c:	f019 0f01 	tst.w	r9, #1
 8012e20:	d026      	beq.n	8012e70 <__cvt+0xb0>
 8012e22:	2f46      	cmp	r7, #70	; 0x46
 8012e24:	eb08 0906 	add.w	r9, r8, r6
 8012e28:	d111      	bne.n	8012e4e <__cvt+0x8e>
 8012e2a:	f898 3000 	ldrb.w	r3, [r8]
 8012e2e:	2b30      	cmp	r3, #48	; 0x30
 8012e30:	d10a      	bne.n	8012e48 <__cvt+0x88>
 8012e32:	2200      	movs	r2, #0
 8012e34:	2300      	movs	r3, #0
 8012e36:	4620      	mov	r0, r4
 8012e38:	4629      	mov	r1, r5
 8012e3a:	f7ed fe65 	bl	8000b08 <__aeabi_dcmpeq>
 8012e3e:	b918      	cbnz	r0, 8012e48 <__cvt+0x88>
 8012e40:	f1c6 0601 	rsb	r6, r6, #1
 8012e44:	f8ca 6000 	str.w	r6, [sl]
 8012e48:	f8da 3000 	ldr.w	r3, [sl]
 8012e4c:	4499      	add	r9, r3
 8012e4e:	2200      	movs	r2, #0
 8012e50:	2300      	movs	r3, #0
 8012e52:	4620      	mov	r0, r4
 8012e54:	4629      	mov	r1, r5
 8012e56:	f7ed fe57 	bl	8000b08 <__aeabi_dcmpeq>
 8012e5a:	b938      	cbnz	r0, 8012e6c <__cvt+0xac>
 8012e5c:	2230      	movs	r2, #48	; 0x30
 8012e5e:	9b03      	ldr	r3, [sp, #12]
 8012e60:	454b      	cmp	r3, r9
 8012e62:	d205      	bcs.n	8012e70 <__cvt+0xb0>
 8012e64:	1c59      	adds	r1, r3, #1
 8012e66:	9103      	str	r1, [sp, #12]
 8012e68:	701a      	strb	r2, [r3, #0]
 8012e6a:	e7f8      	b.n	8012e5e <__cvt+0x9e>
 8012e6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012e70:	9b03      	ldr	r3, [sp, #12]
 8012e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e74:	eba3 0308 	sub.w	r3, r3, r8
 8012e78:	4640      	mov	r0, r8
 8012e7a:	6013      	str	r3, [r2, #0]
 8012e7c:	b004      	add	sp, #16
 8012e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012e82 <__exponent>:
 8012e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e84:	2900      	cmp	r1, #0
 8012e86:	4604      	mov	r4, r0
 8012e88:	bfba      	itte	lt
 8012e8a:	4249      	neglt	r1, r1
 8012e8c:	232d      	movlt	r3, #45	; 0x2d
 8012e8e:	232b      	movge	r3, #43	; 0x2b
 8012e90:	2909      	cmp	r1, #9
 8012e92:	f804 2b02 	strb.w	r2, [r4], #2
 8012e96:	7043      	strb	r3, [r0, #1]
 8012e98:	dd20      	ble.n	8012edc <__exponent+0x5a>
 8012e9a:	f10d 0307 	add.w	r3, sp, #7
 8012e9e:	461f      	mov	r7, r3
 8012ea0:	260a      	movs	r6, #10
 8012ea2:	fb91 f5f6 	sdiv	r5, r1, r6
 8012ea6:	fb06 1115 	mls	r1, r6, r5, r1
 8012eaa:	3130      	adds	r1, #48	; 0x30
 8012eac:	2d09      	cmp	r5, #9
 8012eae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012eb2:	f103 32ff 	add.w	r2, r3, #4294967295
 8012eb6:	4629      	mov	r1, r5
 8012eb8:	dc09      	bgt.n	8012ece <__exponent+0x4c>
 8012eba:	3130      	adds	r1, #48	; 0x30
 8012ebc:	3b02      	subs	r3, #2
 8012ebe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012ec2:	42bb      	cmp	r3, r7
 8012ec4:	4622      	mov	r2, r4
 8012ec6:	d304      	bcc.n	8012ed2 <__exponent+0x50>
 8012ec8:	1a10      	subs	r0, r2, r0
 8012eca:	b003      	add	sp, #12
 8012ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ece:	4613      	mov	r3, r2
 8012ed0:	e7e7      	b.n	8012ea2 <__exponent+0x20>
 8012ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ed6:	f804 2b01 	strb.w	r2, [r4], #1
 8012eda:	e7f2      	b.n	8012ec2 <__exponent+0x40>
 8012edc:	2330      	movs	r3, #48	; 0x30
 8012ede:	4419      	add	r1, r3
 8012ee0:	7083      	strb	r3, [r0, #2]
 8012ee2:	1d02      	adds	r2, r0, #4
 8012ee4:	70c1      	strb	r1, [r0, #3]
 8012ee6:	e7ef      	b.n	8012ec8 <__exponent+0x46>

08012ee8 <_printf_float>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	b08d      	sub	sp, #52	; 0x34
 8012eee:	460c      	mov	r4, r1
 8012ef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012ef4:	4616      	mov	r6, r2
 8012ef6:	461f      	mov	r7, r3
 8012ef8:	4605      	mov	r5, r0
 8012efa:	f001 fd1f 	bl	801493c <_localeconv_r>
 8012efe:	6803      	ldr	r3, [r0, #0]
 8012f00:	9304      	str	r3, [sp, #16]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7ed f984 	bl	8000210 <strlen>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8012f10:	9005      	str	r0, [sp, #20]
 8012f12:	3307      	adds	r3, #7
 8012f14:	f023 0307 	bic.w	r3, r3, #7
 8012f18:	f103 0208 	add.w	r2, r3, #8
 8012f1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012f20:	f8d4 b000 	ldr.w	fp, [r4]
 8012f24:	f8c8 2000 	str.w	r2, [r8]
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012f30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012f34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012f38:	9307      	str	r3, [sp, #28]
 8012f3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8012f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f42:	4ba7      	ldr	r3, [pc, #668]	; (80131e0 <_printf_float+0x2f8>)
 8012f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f48:	f7ed fe10 	bl	8000b6c <__aeabi_dcmpun>
 8012f4c:	bb70      	cbnz	r0, 8012fac <_printf_float+0xc4>
 8012f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f52:	4ba3      	ldr	r3, [pc, #652]	; (80131e0 <_printf_float+0x2f8>)
 8012f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f58:	f7ed fdea 	bl	8000b30 <__aeabi_dcmple>
 8012f5c:	bb30      	cbnz	r0, 8012fac <_printf_float+0xc4>
 8012f5e:	2200      	movs	r2, #0
 8012f60:	2300      	movs	r3, #0
 8012f62:	4640      	mov	r0, r8
 8012f64:	4649      	mov	r1, r9
 8012f66:	f7ed fdd9 	bl	8000b1c <__aeabi_dcmplt>
 8012f6a:	b110      	cbz	r0, 8012f72 <_printf_float+0x8a>
 8012f6c:	232d      	movs	r3, #45	; 0x2d
 8012f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f72:	4a9c      	ldr	r2, [pc, #624]	; (80131e4 <_printf_float+0x2fc>)
 8012f74:	4b9c      	ldr	r3, [pc, #624]	; (80131e8 <_printf_float+0x300>)
 8012f76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012f7a:	bf8c      	ite	hi
 8012f7c:	4690      	movhi	r8, r2
 8012f7e:	4698      	movls	r8, r3
 8012f80:	2303      	movs	r3, #3
 8012f82:	f02b 0204 	bic.w	r2, fp, #4
 8012f86:	6123      	str	r3, [r4, #16]
 8012f88:	6022      	str	r2, [r4, #0]
 8012f8a:	f04f 0900 	mov.w	r9, #0
 8012f8e:	9700      	str	r7, [sp, #0]
 8012f90:	4633      	mov	r3, r6
 8012f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8012f94:	4621      	mov	r1, r4
 8012f96:	4628      	mov	r0, r5
 8012f98:	f000 f9e6 	bl	8013368 <_printf_common>
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	f040 808d 	bne.w	80130bc <_printf_float+0x1d4>
 8012fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8012fa6:	b00d      	add	sp, #52	; 0x34
 8012fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fac:	4642      	mov	r2, r8
 8012fae:	464b      	mov	r3, r9
 8012fb0:	4640      	mov	r0, r8
 8012fb2:	4649      	mov	r1, r9
 8012fb4:	f7ed fdda 	bl	8000b6c <__aeabi_dcmpun>
 8012fb8:	b110      	cbz	r0, 8012fc0 <_printf_float+0xd8>
 8012fba:	4a8c      	ldr	r2, [pc, #560]	; (80131ec <_printf_float+0x304>)
 8012fbc:	4b8c      	ldr	r3, [pc, #560]	; (80131f0 <_printf_float+0x308>)
 8012fbe:	e7da      	b.n	8012f76 <_printf_float+0x8e>
 8012fc0:	6861      	ldr	r1, [r4, #4]
 8012fc2:	1c4b      	adds	r3, r1, #1
 8012fc4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012fc8:	a80a      	add	r0, sp, #40	; 0x28
 8012fca:	d13e      	bne.n	801304a <_printf_float+0x162>
 8012fcc:	2306      	movs	r3, #6
 8012fce:	6063      	str	r3, [r4, #4]
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012fd6:	ab09      	add	r3, sp, #36	; 0x24
 8012fd8:	9300      	str	r3, [sp, #0]
 8012fda:	ec49 8b10 	vmov	d0, r8, r9
 8012fde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012fe2:	6022      	str	r2, [r4, #0]
 8012fe4:	f8cd a004 	str.w	sl, [sp, #4]
 8012fe8:	6861      	ldr	r1, [r4, #4]
 8012fea:	4628      	mov	r0, r5
 8012fec:	f7ff fee8 	bl	8012dc0 <__cvt>
 8012ff0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012ff4:	2b47      	cmp	r3, #71	; 0x47
 8012ff6:	4680      	mov	r8, r0
 8012ff8:	d109      	bne.n	801300e <_printf_float+0x126>
 8012ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ffc:	1cd8      	adds	r0, r3, #3
 8012ffe:	db02      	blt.n	8013006 <_printf_float+0x11e>
 8013000:	6862      	ldr	r2, [r4, #4]
 8013002:	4293      	cmp	r3, r2
 8013004:	dd47      	ble.n	8013096 <_printf_float+0x1ae>
 8013006:	f1aa 0a02 	sub.w	sl, sl, #2
 801300a:	fa5f fa8a 	uxtb.w	sl, sl
 801300e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013012:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013014:	d824      	bhi.n	8013060 <_printf_float+0x178>
 8013016:	3901      	subs	r1, #1
 8013018:	4652      	mov	r2, sl
 801301a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801301e:	9109      	str	r1, [sp, #36]	; 0x24
 8013020:	f7ff ff2f 	bl	8012e82 <__exponent>
 8013024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013026:	1813      	adds	r3, r2, r0
 8013028:	2a01      	cmp	r2, #1
 801302a:	4681      	mov	r9, r0
 801302c:	6123      	str	r3, [r4, #16]
 801302e:	dc02      	bgt.n	8013036 <_printf_float+0x14e>
 8013030:	6822      	ldr	r2, [r4, #0]
 8013032:	07d1      	lsls	r1, r2, #31
 8013034:	d501      	bpl.n	801303a <_printf_float+0x152>
 8013036:	3301      	adds	r3, #1
 8013038:	6123      	str	r3, [r4, #16]
 801303a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801303e:	2b00      	cmp	r3, #0
 8013040:	d0a5      	beq.n	8012f8e <_printf_float+0xa6>
 8013042:	232d      	movs	r3, #45	; 0x2d
 8013044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013048:	e7a1      	b.n	8012f8e <_printf_float+0xa6>
 801304a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801304e:	f000 8177 	beq.w	8013340 <_printf_float+0x458>
 8013052:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013056:	d1bb      	bne.n	8012fd0 <_printf_float+0xe8>
 8013058:	2900      	cmp	r1, #0
 801305a:	d1b9      	bne.n	8012fd0 <_printf_float+0xe8>
 801305c:	2301      	movs	r3, #1
 801305e:	e7b6      	b.n	8012fce <_printf_float+0xe6>
 8013060:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013064:	d119      	bne.n	801309a <_printf_float+0x1b2>
 8013066:	2900      	cmp	r1, #0
 8013068:	6863      	ldr	r3, [r4, #4]
 801306a:	dd0c      	ble.n	8013086 <_printf_float+0x19e>
 801306c:	6121      	str	r1, [r4, #16]
 801306e:	b913      	cbnz	r3, 8013076 <_printf_float+0x18e>
 8013070:	6822      	ldr	r2, [r4, #0]
 8013072:	07d2      	lsls	r2, r2, #31
 8013074:	d502      	bpl.n	801307c <_printf_float+0x194>
 8013076:	3301      	adds	r3, #1
 8013078:	440b      	add	r3, r1
 801307a:	6123      	str	r3, [r4, #16]
 801307c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801307e:	65a3      	str	r3, [r4, #88]	; 0x58
 8013080:	f04f 0900 	mov.w	r9, #0
 8013084:	e7d9      	b.n	801303a <_printf_float+0x152>
 8013086:	b913      	cbnz	r3, 801308e <_printf_float+0x1a6>
 8013088:	6822      	ldr	r2, [r4, #0]
 801308a:	07d0      	lsls	r0, r2, #31
 801308c:	d501      	bpl.n	8013092 <_printf_float+0x1aa>
 801308e:	3302      	adds	r3, #2
 8013090:	e7f3      	b.n	801307a <_printf_float+0x192>
 8013092:	2301      	movs	r3, #1
 8013094:	e7f1      	b.n	801307a <_printf_float+0x192>
 8013096:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801309a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801309e:	4293      	cmp	r3, r2
 80130a0:	db05      	blt.n	80130ae <_printf_float+0x1c6>
 80130a2:	6822      	ldr	r2, [r4, #0]
 80130a4:	6123      	str	r3, [r4, #16]
 80130a6:	07d1      	lsls	r1, r2, #31
 80130a8:	d5e8      	bpl.n	801307c <_printf_float+0x194>
 80130aa:	3301      	adds	r3, #1
 80130ac:	e7e5      	b.n	801307a <_printf_float+0x192>
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	bfd4      	ite	le
 80130b2:	f1c3 0302 	rsble	r3, r3, #2
 80130b6:	2301      	movgt	r3, #1
 80130b8:	4413      	add	r3, r2
 80130ba:	e7de      	b.n	801307a <_printf_float+0x192>
 80130bc:	6823      	ldr	r3, [r4, #0]
 80130be:	055a      	lsls	r2, r3, #21
 80130c0:	d407      	bmi.n	80130d2 <_printf_float+0x1ea>
 80130c2:	6923      	ldr	r3, [r4, #16]
 80130c4:	4642      	mov	r2, r8
 80130c6:	4631      	mov	r1, r6
 80130c8:	4628      	mov	r0, r5
 80130ca:	47b8      	blx	r7
 80130cc:	3001      	adds	r0, #1
 80130ce:	d12b      	bne.n	8013128 <_printf_float+0x240>
 80130d0:	e767      	b.n	8012fa2 <_printf_float+0xba>
 80130d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80130d6:	f240 80dc 	bls.w	8013292 <_printf_float+0x3aa>
 80130da:	2200      	movs	r2, #0
 80130dc:	2300      	movs	r3, #0
 80130de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80130e2:	f7ed fd11 	bl	8000b08 <__aeabi_dcmpeq>
 80130e6:	2800      	cmp	r0, #0
 80130e8:	d033      	beq.n	8013152 <_printf_float+0x26a>
 80130ea:	2301      	movs	r3, #1
 80130ec:	4a41      	ldr	r2, [pc, #260]	; (80131f4 <_printf_float+0x30c>)
 80130ee:	4631      	mov	r1, r6
 80130f0:	4628      	mov	r0, r5
 80130f2:	47b8      	blx	r7
 80130f4:	3001      	adds	r0, #1
 80130f6:	f43f af54 	beq.w	8012fa2 <_printf_float+0xba>
 80130fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130fe:	429a      	cmp	r2, r3
 8013100:	db02      	blt.n	8013108 <_printf_float+0x220>
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	07d8      	lsls	r0, r3, #31
 8013106:	d50f      	bpl.n	8013128 <_printf_float+0x240>
 8013108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801310c:	4631      	mov	r1, r6
 801310e:	4628      	mov	r0, r5
 8013110:	47b8      	blx	r7
 8013112:	3001      	adds	r0, #1
 8013114:	f43f af45 	beq.w	8012fa2 <_printf_float+0xba>
 8013118:	f04f 0800 	mov.w	r8, #0
 801311c:	f104 091a 	add.w	r9, r4, #26
 8013120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013122:	3b01      	subs	r3, #1
 8013124:	4543      	cmp	r3, r8
 8013126:	dc09      	bgt.n	801313c <_printf_float+0x254>
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	079b      	lsls	r3, r3, #30
 801312c:	f100 8103 	bmi.w	8013336 <_printf_float+0x44e>
 8013130:	68e0      	ldr	r0, [r4, #12]
 8013132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013134:	4298      	cmp	r0, r3
 8013136:	bfb8      	it	lt
 8013138:	4618      	movlt	r0, r3
 801313a:	e734      	b.n	8012fa6 <_printf_float+0xbe>
 801313c:	2301      	movs	r3, #1
 801313e:	464a      	mov	r2, r9
 8013140:	4631      	mov	r1, r6
 8013142:	4628      	mov	r0, r5
 8013144:	47b8      	blx	r7
 8013146:	3001      	adds	r0, #1
 8013148:	f43f af2b 	beq.w	8012fa2 <_printf_float+0xba>
 801314c:	f108 0801 	add.w	r8, r8, #1
 8013150:	e7e6      	b.n	8013120 <_printf_float+0x238>
 8013152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013154:	2b00      	cmp	r3, #0
 8013156:	dc2b      	bgt.n	80131b0 <_printf_float+0x2c8>
 8013158:	2301      	movs	r3, #1
 801315a:	4a26      	ldr	r2, [pc, #152]	; (80131f4 <_printf_float+0x30c>)
 801315c:	4631      	mov	r1, r6
 801315e:	4628      	mov	r0, r5
 8013160:	47b8      	blx	r7
 8013162:	3001      	adds	r0, #1
 8013164:	f43f af1d 	beq.w	8012fa2 <_printf_float+0xba>
 8013168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801316a:	b923      	cbnz	r3, 8013176 <_printf_float+0x28e>
 801316c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801316e:	b913      	cbnz	r3, 8013176 <_printf_float+0x28e>
 8013170:	6823      	ldr	r3, [r4, #0]
 8013172:	07d9      	lsls	r1, r3, #31
 8013174:	d5d8      	bpl.n	8013128 <_printf_float+0x240>
 8013176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801317a:	4631      	mov	r1, r6
 801317c:	4628      	mov	r0, r5
 801317e:	47b8      	blx	r7
 8013180:	3001      	adds	r0, #1
 8013182:	f43f af0e 	beq.w	8012fa2 <_printf_float+0xba>
 8013186:	f04f 0900 	mov.w	r9, #0
 801318a:	f104 0a1a 	add.w	sl, r4, #26
 801318e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013190:	425b      	negs	r3, r3
 8013192:	454b      	cmp	r3, r9
 8013194:	dc01      	bgt.n	801319a <_printf_float+0x2b2>
 8013196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013198:	e794      	b.n	80130c4 <_printf_float+0x1dc>
 801319a:	2301      	movs	r3, #1
 801319c:	4652      	mov	r2, sl
 801319e:	4631      	mov	r1, r6
 80131a0:	4628      	mov	r0, r5
 80131a2:	47b8      	blx	r7
 80131a4:	3001      	adds	r0, #1
 80131a6:	f43f aefc 	beq.w	8012fa2 <_printf_float+0xba>
 80131aa:	f109 0901 	add.w	r9, r9, #1
 80131ae:	e7ee      	b.n	801318e <_printf_float+0x2a6>
 80131b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80131b4:	429a      	cmp	r2, r3
 80131b6:	bfa8      	it	ge
 80131b8:	461a      	movge	r2, r3
 80131ba:	2a00      	cmp	r2, #0
 80131bc:	4691      	mov	r9, r2
 80131be:	dd07      	ble.n	80131d0 <_printf_float+0x2e8>
 80131c0:	4613      	mov	r3, r2
 80131c2:	4631      	mov	r1, r6
 80131c4:	4642      	mov	r2, r8
 80131c6:	4628      	mov	r0, r5
 80131c8:	47b8      	blx	r7
 80131ca:	3001      	adds	r0, #1
 80131cc:	f43f aee9 	beq.w	8012fa2 <_printf_float+0xba>
 80131d0:	f104 031a 	add.w	r3, r4, #26
 80131d4:	f04f 0b00 	mov.w	fp, #0
 80131d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80131dc:	9306      	str	r3, [sp, #24]
 80131de:	e015      	b.n	801320c <_printf_float+0x324>
 80131e0:	7fefffff 	.word	0x7fefffff
 80131e4:	080186fd 	.word	0x080186fd
 80131e8:	080186f9 	.word	0x080186f9
 80131ec:	08018705 	.word	0x08018705
 80131f0:	08018701 	.word	0x08018701
 80131f4:	08018709 	.word	0x08018709
 80131f8:	2301      	movs	r3, #1
 80131fa:	9a06      	ldr	r2, [sp, #24]
 80131fc:	4631      	mov	r1, r6
 80131fe:	4628      	mov	r0, r5
 8013200:	47b8      	blx	r7
 8013202:	3001      	adds	r0, #1
 8013204:	f43f aecd 	beq.w	8012fa2 <_printf_float+0xba>
 8013208:	f10b 0b01 	add.w	fp, fp, #1
 801320c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013210:	ebaa 0309 	sub.w	r3, sl, r9
 8013214:	455b      	cmp	r3, fp
 8013216:	dcef      	bgt.n	80131f8 <_printf_float+0x310>
 8013218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801321c:	429a      	cmp	r2, r3
 801321e:	44d0      	add	r8, sl
 8013220:	db15      	blt.n	801324e <_printf_float+0x366>
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	07da      	lsls	r2, r3, #31
 8013226:	d412      	bmi.n	801324e <_printf_float+0x366>
 8013228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801322a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801322c:	eba3 020a 	sub.w	r2, r3, sl
 8013230:	eba3 0a01 	sub.w	sl, r3, r1
 8013234:	4592      	cmp	sl, r2
 8013236:	bfa8      	it	ge
 8013238:	4692      	movge	sl, r2
 801323a:	f1ba 0f00 	cmp.w	sl, #0
 801323e:	dc0e      	bgt.n	801325e <_printf_float+0x376>
 8013240:	f04f 0800 	mov.w	r8, #0
 8013244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013248:	f104 091a 	add.w	r9, r4, #26
 801324c:	e019      	b.n	8013282 <_printf_float+0x39a>
 801324e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013252:	4631      	mov	r1, r6
 8013254:	4628      	mov	r0, r5
 8013256:	47b8      	blx	r7
 8013258:	3001      	adds	r0, #1
 801325a:	d1e5      	bne.n	8013228 <_printf_float+0x340>
 801325c:	e6a1      	b.n	8012fa2 <_printf_float+0xba>
 801325e:	4653      	mov	r3, sl
 8013260:	4642      	mov	r2, r8
 8013262:	4631      	mov	r1, r6
 8013264:	4628      	mov	r0, r5
 8013266:	47b8      	blx	r7
 8013268:	3001      	adds	r0, #1
 801326a:	d1e9      	bne.n	8013240 <_printf_float+0x358>
 801326c:	e699      	b.n	8012fa2 <_printf_float+0xba>
 801326e:	2301      	movs	r3, #1
 8013270:	464a      	mov	r2, r9
 8013272:	4631      	mov	r1, r6
 8013274:	4628      	mov	r0, r5
 8013276:	47b8      	blx	r7
 8013278:	3001      	adds	r0, #1
 801327a:	f43f ae92 	beq.w	8012fa2 <_printf_float+0xba>
 801327e:	f108 0801 	add.w	r8, r8, #1
 8013282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013286:	1a9b      	subs	r3, r3, r2
 8013288:	eba3 030a 	sub.w	r3, r3, sl
 801328c:	4543      	cmp	r3, r8
 801328e:	dcee      	bgt.n	801326e <_printf_float+0x386>
 8013290:	e74a      	b.n	8013128 <_printf_float+0x240>
 8013292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013294:	2a01      	cmp	r2, #1
 8013296:	dc01      	bgt.n	801329c <_printf_float+0x3b4>
 8013298:	07db      	lsls	r3, r3, #31
 801329a:	d53a      	bpl.n	8013312 <_printf_float+0x42a>
 801329c:	2301      	movs	r3, #1
 801329e:	4642      	mov	r2, r8
 80132a0:	4631      	mov	r1, r6
 80132a2:	4628      	mov	r0, r5
 80132a4:	47b8      	blx	r7
 80132a6:	3001      	adds	r0, #1
 80132a8:	f43f ae7b 	beq.w	8012fa2 <_printf_float+0xba>
 80132ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132b0:	4631      	mov	r1, r6
 80132b2:	4628      	mov	r0, r5
 80132b4:	47b8      	blx	r7
 80132b6:	3001      	adds	r0, #1
 80132b8:	f108 0801 	add.w	r8, r8, #1
 80132bc:	f43f ae71 	beq.w	8012fa2 <_printf_float+0xba>
 80132c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132c2:	2200      	movs	r2, #0
 80132c4:	f103 3aff 	add.w	sl, r3, #4294967295
 80132c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80132cc:	2300      	movs	r3, #0
 80132ce:	f7ed fc1b 	bl	8000b08 <__aeabi_dcmpeq>
 80132d2:	b9c8      	cbnz	r0, 8013308 <_printf_float+0x420>
 80132d4:	4653      	mov	r3, sl
 80132d6:	4642      	mov	r2, r8
 80132d8:	4631      	mov	r1, r6
 80132da:	4628      	mov	r0, r5
 80132dc:	47b8      	blx	r7
 80132de:	3001      	adds	r0, #1
 80132e0:	d10e      	bne.n	8013300 <_printf_float+0x418>
 80132e2:	e65e      	b.n	8012fa2 <_printf_float+0xba>
 80132e4:	2301      	movs	r3, #1
 80132e6:	4652      	mov	r2, sl
 80132e8:	4631      	mov	r1, r6
 80132ea:	4628      	mov	r0, r5
 80132ec:	47b8      	blx	r7
 80132ee:	3001      	adds	r0, #1
 80132f0:	f43f ae57 	beq.w	8012fa2 <_printf_float+0xba>
 80132f4:	f108 0801 	add.w	r8, r8, #1
 80132f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132fa:	3b01      	subs	r3, #1
 80132fc:	4543      	cmp	r3, r8
 80132fe:	dcf1      	bgt.n	80132e4 <_printf_float+0x3fc>
 8013300:	464b      	mov	r3, r9
 8013302:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013306:	e6de      	b.n	80130c6 <_printf_float+0x1de>
 8013308:	f04f 0800 	mov.w	r8, #0
 801330c:	f104 0a1a 	add.w	sl, r4, #26
 8013310:	e7f2      	b.n	80132f8 <_printf_float+0x410>
 8013312:	2301      	movs	r3, #1
 8013314:	e7df      	b.n	80132d6 <_printf_float+0x3ee>
 8013316:	2301      	movs	r3, #1
 8013318:	464a      	mov	r2, r9
 801331a:	4631      	mov	r1, r6
 801331c:	4628      	mov	r0, r5
 801331e:	47b8      	blx	r7
 8013320:	3001      	adds	r0, #1
 8013322:	f43f ae3e 	beq.w	8012fa2 <_printf_float+0xba>
 8013326:	f108 0801 	add.w	r8, r8, #1
 801332a:	68e3      	ldr	r3, [r4, #12]
 801332c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801332e:	1a9b      	subs	r3, r3, r2
 8013330:	4543      	cmp	r3, r8
 8013332:	dcf0      	bgt.n	8013316 <_printf_float+0x42e>
 8013334:	e6fc      	b.n	8013130 <_printf_float+0x248>
 8013336:	f04f 0800 	mov.w	r8, #0
 801333a:	f104 0919 	add.w	r9, r4, #25
 801333e:	e7f4      	b.n	801332a <_printf_float+0x442>
 8013340:	2900      	cmp	r1, #0
 8013342:	f43f ae8b 	beq.w	801305c <_printf_float+0x174>
 8013346:	2300      	movs	r3, #0
 8013348:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801334c:	ab09      	add	r3, sp, #36	; 0x24
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	ec49 8b10 	vmov	d0, r8, r9
 8013354:	6022      	str	r2, [r4, #0]
 8013356:	f8cd a004 	str.w	sl, [sp, #4]
 801335a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801335e:	4628      	mov	r0, r5
 8013360:	f7ff fd2e 	bl	8012dc0 <__cvt>
 8013364:	4680      	mov	r8, r0
 8013366:	e648      	b.n	8012ffa <_printf_float+0x112>

08013368 <_printf_common>:
 8013368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801336c:	4691      	mov	r9, r2
 801336e:	461f      	mov	r7, r3
 8013370:	688a      	ldr	r2, [r1, #8]
 8013372:	690b      	ldr	r3, [r1, #16]
 8013374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013378:	4293      	cmp	r3, r2
 801337a:	bfb8      	it	lt
 801337c:	4613      	movlt	r3, r2
 801337e:	f8c9 3000 	str.w	r3, [r9]
 8013382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013386:	4606      	mov	r6, r0
 8013388:	460c      	mov	r4, r1
 801338a:	b112      	cbz	r2, 8013392 <_printf_common+0x2a>
 801338c:	3301      	adds	r3, #1
 801338e:	f8c9 3000 	str.w	r3, [r9]
 8013392:	6823      	ldr	r3, [r4, #0]
 8013394:	0699      	lsls	r1, r3, #26
 8013396:	bf42      	ittt	mi
 8013398:	f8d9 3000 	ldrmi.w	r3, [r9]
 801339c:	3302      	addmi	r3, #2
 801339e:	f8c9 3000 	strmi.w	r3, [r9]
 80133a2:	6825      	ldr	r5, [r4, #0]
 80133a4:	f015 0506 	ands.w	r5, r5, #6
 80133a8:	d107      	bne.n	80133ba <_printf_common+0x52>
 80133aa:	f104 0a19 	add.w	sl, r4, #25
 80133ae:	68e3      	ldr	r3, [r4, #12]
 80133b0:	f8d9 2000 	ldr.w	r2, [r9]
 80133b4:	1a9b      	subs	r3, r3, r2
 80133b6:	42ab      	cmp	r3, r5
 80133b8:	dc28      	bgt.n	801340c <_printf_common+0xa4>
 80133ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80133be:	6822      	ldr	r2, [r4, #0]
 80133c0:	3300      	adds	r3, #0
 80133c2:	bf18      	it	ne
 80133c4:	2301      	movne	r3, #1
 80133c6:	0692      	lsls	r2, r2, #26
 80133c8:	d42d      	bmi.n	8013426 <_printf_common+0xbe>
 80133ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80133ce:	4639      	mov	r1, r7
 80133d0:	4630      	mov	r0, r6
 80133d2:	47c0      	blx	r8
 80133d4:	3001      	adds	r0, #1
 80133d6:	d020      	beq.n	801341a <_printf_common+0xb2>
 80133d8:	6823      	ldr	r3, [r4, #0]
 80133da:	68e5      	ldr	r5, [r4, #12]
 80133dc:	f8d9 2000 	ldr.w	r2, [r9]
 80133e0:	f003 0306 	and.w	r3, r3, #6
 80133e4:	2b04      	cmp	r3, #4
 80133e6:	bf08      	it	eq
 80133e8:	1aad      	subeq	r5, r5, r2
 80133ea:	68a3      	ldr	r3, [r4, #8]
 80133ec:	6922      	ldr	r2, [r4, #16]
 80133ee:	bf0c      	ite	eq
 80133f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80133f4:	2500      	movne	r5, #0
 80133f6:	4293      	cmp	r3, r2
 80133f8:	bfc4      	itt	gt
 80133fa:	1a9b      	subgt	r3, r3, r2
 80133fc:	18ed      	addgt	r5, r5, r3
 80133fe:	f04f 0900 	mov.w	r9, #0
 8013402:	341a      	adds	r4, #26
 8013404:	454d      	cmp	r5, r9
 8013406:	d11a      	bne.n	801343e <_printf_common+0xd6>
 8013408:	2000      	movs	r0, #0
 801340a:	e008      	b.n	801341e <_printf_common+0xb6>
 801340c:	2301      	movs	r3, #1
 801340e:	4652      	mov	r2, sl
 8013410:	4639      	mov	r1, r7
 8013412:	4630      	mov	r0, r6
 8013414:	47c0      	blx	r8
 8013416:	3001      	adds	r0, #1
 8013418:	d103      	bne.n	8013422 <_printf_common+0xba>
 801341a:	f04f 30ff 	mov.w	r0, #4294967295
 801341e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013422:	3501      	adds	r5, #1
 8013424:	e7c3      	b.n	80133ae <_printf_common+0x46>
 8013426:	18e1      	adds	r1, r4, r3
 8013428:	1c5a      	adds	r2, r3, #1
 801342a:	2030      	movs	r0, #48	; 0x30
 801342c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013430:	4422      	add	r2, r4
 8013432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013436:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801343a:	3302      	adds	r3, #2
 801343c:	e7c5      	b.n	80133ca <_printf_common+0x62>
 801343e:	2301      	movs	r3, #1
 8013440:	4622      	mov	r2, r4
 8013442:	4639      	mov	r1, r7
 8013444:	4630      	mov	r0, r6
 8013446:	47c0      	blx	r8
 8013448:	3001      	adds	r0, #1
 801344a:	d0e6      	beq.n	801341a <_printf_common+0xb2>
 801344c:	f109 0901 	add.w	r9, r9, #1
 8013450:	e7d8      	b.n	8013404 <_printf_common+0x9c>
	...

08013454 <_printf_i>:
 8013454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013458:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801345c:	460c      	mov	r4, r1
 801345e:	7e09      	ldrb	r1, [r1, #24]
 8013460:	b085      	sub	sp, #20
 8013462:	296e      	cmp	r1, #110	; 0x6e
 8013464:	4617      	mov	r7, r2
 8013466:	4606      	mov	r6, r0
 8013468:	4698      	mov	r8, r3
 801346a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801346c:	f000 80b3 	beq.w	80135d6 <_printf_i+0x182>
 8013470:	d822      	bhi.n	80134b8 <_printf_i+0x64>
 8013472:	2963      	cmp	r1, #99	; 0x63
 8013474:	d036      	beq.n	80134e4 <_printf_i+0x90>
 8013476:	d80a      	bhi.n	801348e <_printf_i+0x3a>
 8013478:	2900      	cmp	r1, #0
 801347a:	f000 80b9 	beq.w	80135f0 <_printf_i+0x19c>
 801347e:	2958      	cmp	r1, #88	; 0x58
 8013480:	f000 8083 	beq.w	801358a <_printf_i+0x136>
 8013484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801348c:	e032      	b.n	80134f4 <_printf_i+0xa0>
 801348e:	2964      	cmp	r1, #100	; 0x64
 8013490:	d001      	beq.n	8013496 <_printf_i+0x42>
 8013492:	2969      	cmp	r1, #105	; 0x69
 8013494:	d1f6      	bne.n	8013484 <_printf_i+0x30>
 8013496:	6820      	ldr	r0, [r4, #0]
 8013498:	6813      	ldr	r3, [r2, #0]
 801349a:	0605      	lsls	r5, r0, #24
 801349c:	f103 0104 	add.w	r1, r3, #4
 80134a0:	d52a      	bpl.n	80134f8 <_printf_i+0xa4>
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	6011      	str	r1, [r2, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	da03      	bge.n	80134b2 <_printf_i+0x5e>
 80134aa:	222d      	movs	r2, #45	; 0x2d
 80134ac:	425b      	negs	r3, r3
 80134ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80134b2:	486f      	ldr	r0, [pc, #444]	; (8013670 <_printf_i+0x21c>)
 80134b4:	220a      	movs	r2, #10
 80134b6:	e039      	b.n	801352c <_printf_i+0xd8>
 80134b8:	2973      	cmp	r1, #115	; 0x73
 80134ba:	f000 809d 	beq.w	80135f8 <_printf_i+0x1a4>
 80134be:	d808      	bhi.n	80134d2 <_printf_i+0x7e>
 80134c0:	296f      	cmp	r1, #111	; 0x6f
 80134c2:	d020      	beq.n	8013506 <_printf_i+0xb2>
 80134c4:	2970      	cmp	r1, #112	; 0x70
 80134c6:	d1dd      	bne.n	8013484 <_printf_i+0x30>
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	f043 0320 	orr.w	r3, r3, #32
 80134ce:	6023      	str	r3, [r4, #0]
 80134d0:	e003      	b.n	80134da <_printf_i+0x86>
 80134d2:	2975      	cmp	r1, #117	; 0x75
 80134d4:	d017      	beq.n	8013506 <_printf_i+0xb2>
 80134d6:	2978      	cmp	r1, #120	; 0x78
 80134d8:	d1d4      	bne.n	8013484 <_printf_i+0x30>
 80134da:	2378      	movs	r3, #120	; 0x78
 80134dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80134e0:	4864      	ldr	r0, [pc, #400]	; (8013674 <_printf_i+0x220>)
 80134e2:	e055      	b.n	8013590 <_printf_i+0x13c>
 80134e4:	6813      	ldr	r3, [r2, #0]
 80134e6:	1d19      	adds	r1, r3, #4
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	6011      	str	r1, [r2, #0]
 80134ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134f4:	2301      	movs	r3, #1
 80134f6:	e08c      	b.n	8013612 <_printf_i+0x1be>
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	6011      	str	r1, [r2, #0]
 80134fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013500:	bf18      	it	ne
 8013502:	b21b      	sxthne	r3, r3
 8013504:	e7cf      	b.n	80134a6 <_printf_i+0x52>
 8013506:	6813      	ldr	r3, [r2, #0]
 8013508:	6825      	ldr	r5, [r4, #0]
 801350a:	1d18      	adds	r0, r3, #4
 801350c:	6010      	str	r0, [r2, #0]
 801350e:	0628      	lsls	r0, r5, #24
 8013510:	d501      	bpl.n	8013516 <_printf_i+0xc2>
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	e002      	b.n	801351c <_printf_i+0xc8>
 8013516:	0668      	lsls	r0, r5, #25
 8013518:	d5fb      	bpl.n	8013512 <_printf_i+0xbe>
 801351a:	881b      	ldrh	r3, [r3, #0]
 801351c:	4854      	ldr	r0, [pc, #336]	; (8013670 <_printf_i+0x21c>)
 801351e:	296f      	cmp	r1, #111	; 0x6f
 8013520:	bf14      	ite	ne
 8013522:	220a      	movne	r2, #10
 8013524:	2208      	moveq	r2, #8
 8013526:	2100      	movs	r1, #0
 8013528:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801352c:	6865      	ldr	r5, [r4, #4]
 801352e:	60a5      	str	r5, [r4, #8]
 8013530:	2d00      	cmp	r5, #0
 8013532:	f2c0 8095 	blt.w	8013660 <_printf_i+0x20c>
 8013536:	6821      	ldr	r1, [r4, #0]
 8013538:	f021 0104 	bic.w	r1, r1, #4
 801353c:	6021      	str	r1, [r4, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d13d      	bne.n	80135be <_printf_i+0x16a>
 8013542:	2d00      	cmp	r5, #0
 8013544:	f040 808e 	bne.w	8013664 <_printf_i+0x210>
 8013548:	4665      	mov	r5, ip
 801354a:	2a08      	cmp	r2, #8
 801354c:	d10b      	bne.n	8013566 <_printf_i+0x112>
 801354e:	6823      	ldr	r3, [r4, #0]
 8013550:	07db      	lsls	r3, r3, #31
 8013552:	d508      	bpl.n	8013566 <_printf_i+0x112>
 8013554:	6923      	ldr	r3, [r4, #16]
 8013556:	6862      	ldr	r2, [r4, #4]
 8013558:	429a      	cmp	r2, r3
 801355a:	bfde      	ittt	le
 801355c:	2330      	movle	r3, #48	; 0x30
 801355e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013562:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013566:	ebac 0305 	sub.w	r3, ip, r5
 801356a:	6123      	str	r3, [r4, #16]
 801356c:	f8cd 8000 	str.w	r8, [sp]
 8013570:	463b      	mov	r3, r7
 8013572:	aa03      	add	r2, sp, #12
 8013574:	4621      	mov	r1, r4
 8013576:	4630      	mov	r0, r6
 8013578:	f7ff fef6 	bl	8013368 <_printf_common>
 801357c:	3001      	adds	r0, #1
 801357e:	d14d      	bne.n	801361c <_printf_i+0x1c8>
 8013580:	f04f 30ff 	mov.w	r0, #4294967295
 8013584:	b005      	add	sp, #20
 8013586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801358a:	4839      	ldr	r0, [pc, #228]	; (8013670 <_printf_i+0x21c>)
 801358c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013590:	6813      	ldr	r3, [r2, #0]
 8013592:	6821      	ldr	r1, [r4, #0]
 8013594:	1d1d      	adds	r5, r3, #4
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	6015      	str	r5, [r2, #0]
 801359a:	060a      	lsls	r2, r1, #24
 801359c:	d50b      	bpl.n	80135b6 <_printf_i+0x162>
 801359e:	07ca      	lsls	r2, r1, #31
 80135a0:	bf44      	itt	mi
 80135a2:	f041 0120 	orrmi.w	r1, r1, #32
 80135a6:	6021      	strmi	r1, [r4, #0]
 80135a8:	b91b      	cbnz	r3, 80135b2 <_printf_i+0x15e>
 80135aa:	6822      	ldr	r2, [r4, #0]
 80135ac:	f022 0220 	bic.w	r2, r2, #32
 80135b0:	6022      	str	r2, [r4, #0]
 80135b2:	2210      	movs	r2, #16
 80135b4:	e7b7      	b.n	8013526 <_printf_i+0xd2>
 80135b6:	064d      	lsls	r5, r1, #25
 80135b8:	bf48      	it	mi
 80135ba:	b29b      	uxthmi	r3, r3
 80135bc:	e7ef      	b.n	801359e <_printf_i+0x14a>
 80135be:	4665      	mov	r5, ip
 80135c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80135c4:	fb02 3311 	mls	r3, r2, r1, r3
 80135c8:	5cc3      	ldrb	r3, [r0, r3]
 80135ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80135ce:	460b      	mov	r3, r1
 80135d0:	2900      	cmp	r1, #0
 80135d2:	d1f5      	bne.n	80135c0 <_printf_i+0x16c>
 80135d4:	e7b9      	b.n	801354a <_printf_i+0xf6>
 80135d6:	6813      	ldr	r3, [r2, #0]
 80135d8:	6825      	ldr	r5, [r4, #0]
 80135da:	6961      	ldr	r1, [r4, #20]
 80135dc:	1d18      	adds	r0, r3, #4
 80135de:	6010      	str	r0, [r2, #0]
 80135e0:	0628      	lsls	r0, r5, #24
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	d501      	bpl.n	80135ea <_printf_i+0x196>
 80135e6:	6019      	str	r1, [r3, #0]
 80135e8:	e002      	b.n	80135f0 <_printf_i+0x19c>
 80135ea:	066a      	lsls	r2, r5, #25
 80135ec:	d5fb      	bpl.n	80135e6 <_printf_i+0x192>
 80135ee:	8019      	strh	r1, [r3, #0]
 80135f0:	2300      	movs	r3, #0
 80135f2:	6123      	str	r3, [r4, #16]
 80135f4:	4665      	mov	r5, ip
 80135f6:	e7b9      	b.n	801356c <_printf_i+0x118>
 80135f8:	6813      	ldr	r3, [r2, #0]
 80135fa:	1d19      	adds	r1, r3, #4
 80135fc:	6011      	str	r1, [r2, #0]
 80135fe:	681d      	ldr	r5, [r3, #0]
 8013600:	6862      	ldr	r2, [r4, #4]
 8013602:	2100      	movs	r1, #0
 8013604:	4628      	mov	r0, r5
 8013606:	f7ec fe0b 	bl	8000220 <memchr>
 801360a:	b108      	cbz	r0, 8013610 <_printf_i+0x1bc>
 801360c:	1b40      	subs	r0, r0, r5
 801360e:	6060      	str	r0, [r4, #4]
 8013610:	6863      	ldr	r3, [r4, #4]
 8013612:	6123      	str	r3, [r4, #16]
 8013614:	2300      	movs	r3, #0
 8013616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801361a:	e7a7      	b.n	801356c <_printf_i+0x118>
 801361c:	6923      	ldr	r3, [r4, #16]
 801361e:	462a      	mov	r2, r5
 8013620:	4639      	mov	r1, r7
 8013622:	4630      	mov	r0, r6
 8013624:	47c0      	blx	r8
 8013626:	3001      	adds	r0, #1
 8013628:	d0aa      	beq.n	8013580 <_printf_i+0x12c>
 801362a:	6823      	ldr	r3, [r4, #0]
 801362c:	079b      	lsls	r3, r3, #30
 801362e:	d413      	bmi.n	8013658 <_printf_i+0x204>
 8013630:	68e0      	ldr	r0, [r4, #12]
 8013632:	9b03      	ldr	r3, [sp, #12]
 8013634:	4298      	cmp	r0, r3
 8013636:	bfb8      	it	lt
 8013638:	4618      	movlt	r0, r3
 801363a:	e7a3      	b.n	8013584 <_printf_i+0x130>
 801363c:	2301      	movs	r3, #1
 801363e:	464a      	mov	r2, r9
 8013640:	4639      	mov	r1, r7
 8013642:	4630      	mov	r0, r6
 8013644:	47c0      	blx	r8
 8013646:	3001      	adds	r0, #1
 8013648:	d09a      	beq.n	8013580 <_printf_i+0x12c>
 801364a:	3501      	adds	r5, #1
 801364c:	68e3      	ldr	r3, [r4, #12]
 801364e:	9a03      	ldr	r2, [sp, #12]
 8013650:	1a9b      	subs	r3, r3, r2
 8013652:	42ab      	cmp	r3, r5
 8013654:	dcf2      	bgt.n	801363c <_printf_i+0x1e8>
 8013656:	e7eb      	b.n	8013630 <_printf_i+0x1dc>
 8013658:	2500      	movs	r5, #0
 801365a:	f104 0919 	add.w	r9, r4, #25
 801365e:	e7f5      	b.n	801364c <_printf_i+0x1f8>
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1ac      	bne.n	80135be <_printf_i+0x16a>
 8013664:	7803      	ldrb	r3, [r0, #0]
 8013666:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801366a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801366e:	e76c      	b.n	801354a <_printf_i+0xf6>
 8013670:	0801870b 	.word	0x0801870b
 8013674:	0801871c 	.word	0x0801871c

08013678 <copysign>:
 8013678:	ec51 0b10 	vmov	r0, r1, d0
 801367c:	ee11 0a90 	vmov	r0, s3
 8013680:	ee10 2a10 	vmov	r2, s0
 8013684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013688:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801368c:	ea41 0300 	orr.w	r3, r1, r0
 8013690:	ec43 2b10 	vmov	d0, r2, r3
 8013694:	4770      	bx	lr
	...

08013698 <_sbrk_r>:
 8013698:	b538      	push	{r3, r4, r5, lr}
 801369a:	4c06      	ldr	r4, [pc, #24]	; (80136b4 <_sbrk_r+0x1c>)
 801369c:	2300      	movs	r3, #0
 801369e:	4605      	mov	r5, r0
 80136a0:	4608      	mov	r0, r1
 80136a2:	6023      	str	r3, [r4, #0]
 80136a4:	f7f2 f892 	bl	80057cc <_sbrk>
 80136a8:	1c43      	adds	r3, r0, #1
 80136aa:	d102      	bne.n	80136b2 <_sbrk_r+0x1a>
 80136ac:	6823      	ldr	r3, [r4, #0]
 80136ae:	b103      	cbz	r3, 80136b2 <_sbrk_r+0x1a>
 80136b0:	602b      	str	r3, [r5, #0]
 80136b2:	bd38      	pop	{r3, r4, r5, pc}
 80136b4:	200067cc 	.word	0x200067cc

080136b8 <sniprintf>:
 80136b8:	b40c      	push	{r2, r3}
 80136ba:	b530      	push	{r4, r5, lr}
 80136bc:	4b17      	ldr	r3, [pc, #92]	; (801371c <sniprintf+0x64>)
 80136be:	1e0c      	subs	r4, r1, #0
 80136c0:	b09d      	sub	sp, #116	; 0x74
 80136c2:	681d      	ldr	r5, [r3, #0]
 80136c4:	da08      	bge.n	80136d8 <sniprintf+0x20>
 80136c6:	238b      	movs	r3, #139	; 0x8b
 80136c8:	602b      	str	r3, [r5, #0]
 80136ca:	f04f 30ff 	mov.w	r0, #4294967295
 80136ce:	b01d      	add	sp, #116	; 0x74
 80136d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136d4:	b002      	add	sp, #8
 80136d6:	4770      	bx	lr
 80136d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80136dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80136e0:	bf14      	ite	ne
 80136e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80136e6:	4623      	moveq	r3, r4
 80136e8:	9304      	str	r3, [sp, #16]
 80136ea:	9307      	str	r3, [sp, #28]
 80136ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136f0:	9002      	str	r0, [sp, #8]
 80136f2:	9006      	str	r0, [sp, #24]
 80136f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80136f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80136fa:	ab21      	add	r3, sp, #132	; 0x84
 80136fc:	a902      	add	r1, sp, #8
 80136fe:	4628      	mov	r0, r5
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	f001 fd23 	bl	801514c <_svfiprintf_r>
 8013706:	1c43      	adds	r3, r0, #1
 8013708:	bfbc      	itt	lt
 801370a:	238b      	movlt	r3, #139	; 0x8b
 801370c:	602b      	strlt	r3, [r5, #0]
 801370e:	2c00      	cmp	r4, #0
 8013710:	d0dd      	beq.n	80136ce <sniprintf+0x16>
 8013712:	9b02      	ldr	r3, [sp, #8]
 8013714:	2200      	movs	r2, #0
 8013716:	701a      	strb	r2, [r3, #0]
 8013718:	e7d9      	b.n	80136ce <sniprintf+0x16>
 801371a:	bf00      	nop
 801371c:	20000434 	.word	0x20000434

08013720 <siprintf>:
 8013720:	b40e      	push	{r1, r2, r3}
 8013722:	b500      	push	{lr}
 8013724:	b09c      	sub	sp, #112	; 0x70
 8013726:	ab1d      	add	r3, sp, #116	; 0x74
 8013728:	9002      	str	r0, [sp, #8]
 801372a:	9006      	str	r0, [sp, #24]
 801372c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013730:	4809      	ldr	r0, [pc, #36]	; (8013758 <siprintf+0x38>)
 8013732:	9107      	str	r1, [sp, #28]
 8013734:	9104      	str	r1, [sp, #16]
 8013736:	4909      	ldr	r1, [pc, #36]	; (801375c <siprintf+0x3c>)
 8013738:	f853 2b04 	ldr.w	r2, [r3], #4
 801373c:	9105      	str	r1, [sp, #20]
 801373e:	6800      	ldr	r0, [r0, #0]
 8013740:	9301      	str	r3, [sp, #4]
 8013742:	a902      	add	r1, sp, #8
 8013744:	f001 fd02 	bl	801514c <_svfiprintf_r>
 8013748:	9b02      	ldr	r3, [sp, #8]
 801374a:	2200      	movs	r2, #0
 801374c:	701a      	strb	r2, [r3, #0]
 801374e:	b01c      	add	sp, #112	; 0x70
 8013750:	f85d eb04 	ldr.w	lr, [sp], #4
 8013754:	b003      	add	sp, #12
 8013756:	4770      	bx	lr
 8013758:	20000434 	.word	0x20000434
 801375c:	ffff0208 	.word	0xffff0208

08013760 <__sread>:
 8013760:	b510      	push	{r4, lr}
 8013762:	460c      	mov	r4, r1
 8013764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013768:	f001 fde8 	bl	801533c <_read_r>
 801376c:	2800      	cmp	r0, #0
 801376e:	bfab      	itete	ge
 8013770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013772:	89a3      	ldrhlt	r3, [r4, #12]
 8013774:	181b      	addge	r3, r3, r0
 8013776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801377a:	bfac      	ite	ge
 801377c:	6563      	strge	r3, [r4, #84]	; 0x54
 801377e:	81a3      	strhlt	r3, [r4, #12]
 8013780:	bd10      	pop	{r4, pc}

08013782 <__swrite>:
 8013782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013786:	461f      	mov	r7, r3
 8013788:	898b      	ldrh	r3, [r1, #12]
 801378a:	05db      	lsls	r3, r3, #23
 801378c:	4605      	mov	r5, r0
 801378e:	460c      	mov	r4, r1
 8013790:	4616      	mov	r6, r2
 8013792:	d505      	bpl.n	80137a0 <__swrite+0x1e>
 8013794:	2302      	movs	r3, #2
 8013796:	2200      	movs	r2, #0
 8013798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801379c:	f001 f8dc 	bl	8014958 <_lseek_r>
 80137a0:	89a3      	ldrh	r3, [r4, #12]
 80137a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137aa:	81a3      	strh	r3, [r4, #12]
 80137ac:	4632      	mov	r2, r6
 80137ae:	463b      	mov	r3, r7
 80137b0:	4628      	mov	r0, r5
 80137b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137b6:	f000 b869 	b.w	801388c <_write_r>

080137ba <__sseek>:
 80137ba:	b510      	push	{r4, lr}
 80137bc:	460c      	mov	r4, r1
 80137be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c2:	f001 f8c9 	bl	8014958 <_lseek_r>
 80137c6:	1c43      	adds	r3, r0, #1
 80137c8:	89a3      	ldrh	r3, [r4, #12]
 80137ca:	bf15      	itete	ne
 80137cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80137ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80137d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80137d6:	81a3      	strheq	r3, [r4, #12]
 80137d8:	bf18      	it	ne
 80137da:	81a3      	strhne	r3, [r4, #12]
 80137dc:	bd10      	pop	{r4, pc}

080137de <__sclose>:
 80137de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137e2:	f000 b8db 	b.w	801399c <_close_r>
	...

080137e8 <__swbuf_r>:
 80137e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ea:	460e      	mov	r6, r1
 80137ec:	4614      	mov	r4, r2
 80137ee:	4605      	mov	r5, r0
 80137f0:	b118      	cbz	r0, 80137fa <__swbuf_r+0x12>
 80137f2:	6983      	ldr	r3, [r0, #24]
 80137f4:	b90b      	cbnz	r3, 80137fa <__swbuf_r+0x12>
 80137f6:	f001 f817 	bl	8014828 <__sinit>
 80137fa:	4b21      	ldr	r3, [pc, #132]	; (8013880 <__swbuf_r+0x98>)
 80137fc:	429c      	cmp	r4, r3
 80137fe:	d12a      	bne.n	8013856 <__swbuf_r+0x6e>
 8013800:	686c      	ldr	r4, [r5, #4]
 8013802:	69a3      	ldr	r3, [r4, #24]
 8013804:	60a3      	str	r3, [r4, #8]
 8013806:	89a3      	ldrh	r3, [r4, #12]
 8013808:	071a      	lsls	r2, r3, #28
 801380a:	d52e      	bpl.n	801386a <__swbuf_r+0x82>
 801380c:	6923      	ldr	r3, [r4, #16]
 801380e:	b363      	cbz	r3, 801386a <__swbuf_r+0x82>
 8013810:	6923      	ldr	r3, [r4, #16]
 8013812:	6820      	ldr	r0, [r4, #0]
 8013814:	1ac0      	subs	r0, r0, r3
 8013816:	6963      	ldr	r3, [r4, #20]
 8013818:	b2f6      	uxtb	r6, r6
 801381a:	4283      	cmp	r3, r0
 801381c:	4637      	mov	r7, r6
 801381e:	dc04      	bgt.n	801382a <__swbuf_r+0x42>
 8013820:	4621      	mov	r1, r4
 8013822:	4628      	mov	r0, r5
 8013824:	f000 ff96 	bl	8014754 <_fflush_r>
 8013828:	bb28      	cbnz	r0, 8013876 <__swbuf_r+0x8e>
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	3b01      	subs	r3, #1
 801382e:	60a3      	str	r3, [r4, #8]
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	1c5a      	adds	r2, r3, #1
 8013834:	6022      	str	r2, [r4, #0]
 8013836:	701e      	strb	r6, [r3, #0]
 8013838:	6963      	ldr	r3, [r4, #20]
 801383a:	3001      	adds	r0, #1
 801383c:	4283      	cmp	r3, r0
 801383e:	d004      	beq.n	801384a <__swbuf_r+0x62>
 8013840:	89a3      	ldrh	r3, [r4, #12]
 8013842:	07db      	lsls	r3, r3, #31
 8013844:	d519      	bpl.n	801387a <__swbuf_r+0x92>
 8013846:	2e0a      	cmp	r6, #10
 8013848:	d117      	bne.n	801387a <__swbuf_r+0x92>
 801384a:	4621      	mov	r1, r4
 801384c:	4628      	mov	r0, r5
 801384e:	f000 ff81 	bl	8014754 <_fflush_r>
 8013852:	b190      	cbz	r0, 801387a <__swbuf_r+0x92>
 8013854:	e00f      	b.n	8013876 <__swbuf_r+0x8e>
 8013856:	4b0b      	ldr	r3, [pc, #44]	; (8013884 <__swbuf_r+0x9c>)
 8013858:	429c      	cmp	r4, r3
 801385a:	d101      	bne.n	8013860 <__swbuf_r+0x78>
 801385c:	68ac      	ldr	r4, [r5, #8]
 801385e:	e7d0      	b.n	8013802 <__swbuf_r+0x1a>
 8013860:	4b09      	ldr	r3, [pc, #36]	; (8013888 <__swbuf_r+0xa0>)
 8013862:	429c      	cmp	r4, r3
 8013864:	bf08      	it	eq
 8013866:	68ec      	ldreq	r4, [r5, #12]
 8013868:	e7cb      	b.n	8013802 <__swbuf_r+0x1a>
 801386a:	4621      	mov	r1, r4
 801386c:	4628      	mov	r0, r5
 801386e:	f000 f81f 	bl	80138b0 <__swsetup_r>
 8013872:	2800      	cmp	r0, #0
 8013874:	d0cc      	beq.n	8013810 <__swbuf_r+0x28>
 8013876:	f04f 37ff 	mov.w	r7, #4294967295
 801387a:	4638      	mov	r0, r7
 801387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801387e:	bf00      	nop
 8013880:	0801875c 	.word	0x0801875c
 8013884:	0801877c 	.word	0x0801877c
 8013888:	0801873c 	.word	0x0801873c

0801388c <_write_r>:
 801388c:	b538      	push	{r3, r4, r5, lr}
 801388e:	4c07      	ldr	r4, [pc, #28]	; (80138ac <_write_r+0x20>)
 8013890:	4605      	mov	r5, r0
 8013892:	4608      	mov	r0, r1
 8013894:	4611      	mov	r1, r2
 8013896:	2200      	movs	r2, #0
 8013898:	6022      	str	r2, [r4, #0]
 801389a:	461a      	mov	r2, r3
 801389c:	f7f1 ff45 	bl	800572a <_write>
 80138a0:	1c43      	adds	r3, r0, #1
 80138a2:	d102      	bne.n	80138aa <_write_r+0x1e>
 80138a4:	6823      	ldr	r3, [r4, #0]
 80138a6:	b103      	cbz	r3, 80138aa <_write_r+0x1e>
 80138a8:	602b      	str	r3, [r5, #0]
 80138aa:	bd38      	pop	{r3, r4, r5, pc}
 80138ac:	200067cc 	.word	0x200067cc

080138b0 <__swsetup_r>:
 80138b0:	4b32      	ldr	r3, [pc, #200]	; (801397c <__swsetup_r+0xcc>)
 80138b2:	b570      	push	{r4, r5, r6, lr}
 80138b4:	681d      	ldr	r5, [r3, #0]
 80138b6:	4606      	mov	r6, r0
 80138b8:	460c      	mov	r4, r1
 80138ba:	b125      	cbz	r5, 80138c6 <__swsetup_r+0x16>
 80138bc:	69ab      	ldr	r3, [r5, #24]
 80138be:	b913      	cbnz	r3, 80138c6 <__swsetup_r+0x16>
 80138c0:	4628      	mov	r0, r5
 80138c2:	f000 ffb1 	bl	8014828 <__sinit>
 80138c6:	4b2e      	ldr	r3, [pc, #184]	; (8013980 <__swsetup_r+0xd0>)
 80138c8:	429c      	cmp	r4, r3
 80138ca:	d10f      	bne.n	80138ec <__swsetup_r+0x3c>
 80138cc:	686c      	ldr	r4, [r5, #4]
 80138ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	0715      	lsls	r5, r2, #28
 80138d6:	d42c      	bmi.n	8013932 <__swsetup_r+0x82>
 80138d8:	06d0      	lsls	r0, r2, #27
 80138da:	d411      	bmi.n	8013900 <__swsetup_r+0x50>
 80138dc:	2209      	movs	r2, #9
 80138de:	6032      	str	r2, [r6, #0]
 80138e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138e4:	81a3      	strh	r3, [r4, #12]
 80138e6:	f04f 30ff 	mov.w	r0, #4294967295
 80138ea:	e03e      	b.n	801396a <__swsetup_r+0xba>
 80138ec:	4b25      	ldr	r3, [pc, #148]	; (8013984 <__swsetup_r+0xd4>)
 80138ee:	429c      	cmp	r4, r3
 80138f0:	d101      	bne.n	80138f6 <__swsetup_r+0x46>
 80138f2:	68ac      	ldr	r4, [r5, #8]
 80138f4:	e7eb      	b.n	80138ce <__swsetup_r+0x1e>
 80138f6:	4b24      	ldr	r3, [pc, #144]	; (8013988 <__swsetup_r+0xd8>)
 80138f8:	429c      	cmp	r4, r3
 80138fa:	bf08      	it	eq
 80138fc:	68ec      	ldreq	r4, [r5, #12]
 80138fe:	e7e6      	b.n	80138ce <__swsetup_r+0x1e>
 8013900:	0751      	lsls	r1, r2, #29
 8013902:	d512      	bpl.n	801392a <__swsetup_r+0x7a>
 8013904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013906:	b141      	cbz	r1, 801391a <__swsetup_r+0x6a>
 8013908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801390c:	4299      	cmp	r1, r3
 801390e:	d002      	beq.n	8013916 <__swsetup_r+0x66>
 8013910:	4630      	mov	r0, r6
 8013912:	f7ff f86d 	bl	80129f0 <_free_r>
 8013916:	2300      	movs	r3, #0
 8013918:	6363      	str	r3, [r4, #52]	; 0x34
 801391a:	89a3      	ldrh	r3, [r4, #12]
 801391c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013920:	81a3      	strh	r3, [r4, #12]
 8013922:	2300      	movs	r3, #0
 8013924:	6063      	str	r3, [r4, #4]
 8013926:	6923      	ldr	r3, [r4, #16]
 8013928:	6023      	str	r3, [r4, #0]
 801392a:	89a3      	ldrh	r3, [r4, #12]
 801392c:	f043 0308 	orr.w	r3, r3, #8
 8013930:	81a3      	strh	r3, [r4, #12]
 8013932:	6923      	ldr	r3, [r4, #16]
 8013934:	b94b      	cbnz	r3, 801394a <__swsetup_r+0x9a>
 8013936:	89a3      	ldrh	r3, [r4, #12]
 8013938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013940:	d003      	beq.n	801394a <__swsetup_r+0x9a>
 8013942:	4621      	mov	r1, r4
 8013944:	4630      	mov	r0, r6
 8013946:	f001 f83d 	bl	80149c4 <__smakebuf_r>
 801394a:	89a2      	ldrh	r2, [r4, #12]
 801394c:	f012 0301 	ands.w	r3, r2, #1
 8013950:	d00c      	beq.n	801396c <__swsetup_r+0xbc>
 8013952:	2300      	movs	r3, #0
 8013954:	60a3      	str	r3, [r4, #8]
 8013956:	6963      	ldr	r3, [r4, #20]
 8013958:	425b      	negs	r3, r3
 801395a:	61a3      	str	r3, [r4, #24]
 801395c:	6923      	ldr	r3, [r4, #16]
 801395e:	b953      	cbnz	r3, 8013976 <__swsetup_r+0xc6>
 8013960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013964:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013968:	d1ba      	bne.n	80138e0 <__swsetup_r+0x30>
 801396a:	bd70      	pop	{r4, r5, r6, pc}
 801396c:	0792      	lsls	r2, r2, #30
 801396e:	bf58      	it	pl
 8013970:	6963      	ldrpl	r3, [r4, #20]
 8013972:	60a3      	str	r3, [r4, #8]
 8013974:	e7f2      	b.n	801395c <__swsetup_r+0xac>
 8013976:	2000      	movs	r0, #0
 8013978:	e7f7      	b.n	801396a <__swsetup_r+0xba>
 801397a:	bf00      	nop
 801397c:	20000434 	.word	0x20000434
 8013980:	0801875c 	.word	0x0801875c
 8013984:	0801877c 	.word	0x0801877c
 8013988:	0801873c 	.word	0x0801873c

0801398c <abort>:
 801398c:	b508      	push	{r3, lr}
 801398e:	2006      	movs	r0, #6
 8013990:	f001 fd0e 	bl	80153b0 <raise>
 8013994:	2001      	movs	r0, #1
 8013996:	f7f1 fea1 	bl	80056dc <_exit>
	...

0801399c <_close_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4c06      	ldr	r4, [pc, #24]	; (80139b8 <_close_r+0x1c>)
 80139a0:	2300      	movs	r3, #0
 80139a2:	4605      	mov	r5, r0
 80139a4:	4608      	mov	r0, r1
 80139a6:	6023      	str	r3, [r4, #0]
 80139a8:	f7f1 fedb 	bl	8005762 <_close>
 80139ac:	1c43      	adds	r3, r0, #1
 80139ae:	d102      	bne.n	80139b6 <_close_r+0x1a>
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	b103      	cbz	r3, 80139b6 <_close_r+0x1a>
 80139b4:	602b      	str	r3, [r5, #0]
 80139b6:	bd38      	pop	{r3, r4, r5, pc}
 80139b8:	200067cc 	.word	0x200067cc

080139bc <quorem>:
 80139bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c0:	6903      	ldr	r3, [r0, #16]
 80139c2:	690c      	ldr	r4, [r1, #16]
 80139c4:	42a3      	cmp	r3, r4
 80139c6:	4680      	mov	r8, r0
 80139c8:	f2c0 8082 	blt.w	8013ad0 <quorem+0x114>
 80139cc:	3c01      	subs	r4, #1
 80139ce:	f101 0714 	add.w	r7, r1, #20
 80139d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80139d6:	f100 0614 	add.w	r6, r0, #20
 80139da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80139de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80139e2:	eb06 030c 	add.w	r3, r6, ip
 80139e6:	3501      	adds	r5, #1
 80139e8:	eb07 090c 	add.w	r9, r7, ip
 80139ec:	9301      	str	r3, [sp, #4]
 80139ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80139f2:	b395      	cbz	r5, 8013a5a <quorem+0x9e>
 80139f4:	f04f 0a00 	mov.w	sl, #0
 80139f8:	4638      	mov	r0, r7
 80139fa:	46b6      	mov	lr, r6
 80139fc:	46d3      	mov	fp, sl
 80139fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a02:	b293      	uxth	r3, r2
 8013a04:	fb05 a303 	mla	r3, r5, r3, sl
 8013a08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	ebab 0303 	sub.w	r3, fp, r3
 8013a12:	0c12      	lsrs	r2, r2, #16
 8013a14:	f8de b000 	ldr.w	fp, [lr]
 8013a18:	fb05 a202 	mla	r2, r5, r2, sl
 8013a1c:	fa13 f38b 	uxtah	r3, r3, fp
 8013a20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013a24:	fa1f fb82 	uxth.w	fp, r2
 8013a28:	f8de 2000 	ldr.w	r2, [lr]
 8013a2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013a30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a3a:	4581      	cmp	r9, r0
 8013a3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013a40:	f84e 3b04 	str.w	r3, [lr], #4
 8013a44:	d2db      	bcs.n	80139fe <quorem+0x42>
 8013a46:	f856 300c 	ldr.w	r3, [r6, ip]
 8013a4a:	b933      	cbnz	r3, 8013a5a <quorem+0x9e>
 8013a4c:	9b01      	ldr	r3, [sp, #4]
 8013a4e:	3b04      	subs	r3, #4
 8013a50:	429e      	cmp	r6, r3
 8013a52:	461a      	mov	r2, r3
 8013a54:	d330      	bcc.n	8013ab8 <quorem+0xfc>
 8013a56:	f8c8 4010 	str.w	r4, [r8, #16]
 8013a5a:	4640      	mov	r0, r8
 8013a5c:	f001 fa22 	bl	8014ea4 <__mcmp>
 8013a60:	2800      	cmp	r0, #0
 8013a62:	db25      	blt.n	8013ab0 <quorem+0xf4>
 8013a64:	3501      	adds	r5, #1
 8013a66:	4630      	mov	r0, r6
 8013a68:	f04f 0c00 	mov.w	ip, #0
 8013a6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8013a70:	f8d0 e000 	ldr.w	lr, [r0]
 8013a74:	b293      	uxth	r3, r2
 8013a76:	ebac 0303 	sub.w	r3, ip, r3
 8013a7a:	0c12      	lsrs	r2, r2, #16
 8013a7c:	fa13 f38e 	uxtah	r3, r3, lr
 8013a80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a8e:	45b9      	cmp	r9, r7
 8013a90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013a94:	f840 3b04 	str.w	r3, [r0], #4
 8013a98:	d2e8      	bcs.n	8013a6c <quorem+0xb0>
 8013a9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013a9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013aa2:	b92a      	cbnz	r2, 8013ab0 <quorem+0xf4>
 8013aa4:	3b04      	subs	r3, #4
 8013aa6:	429e      	cmp	r6, r3
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	d30b      	bcc.n	8013ac4 <quorem+0x108>
 8013aac:	f8c8 4010 	str.w	r4, [r8, #16]
 8013ab0:	4628      	mov	r0, r5
 8013ab2:	b003      	add	sp, #12
 8013ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab8:	6812      	ldr	r2, [r2, #0]
 8013aba:	3b04      	subs	r3, #4
 8013abc:	2a00      	cmp	r2, #0
 8013abe:	d1ca      	bne.n	8013a56 <quorem+0x9a>
 8013ac0:	3c01      	subs	r4, #1
 8013ac2:	e7c5      	b.n	8013a50 <quorem+0x94>
 8013ac4:	6812      	ldr	r2, [r2, #0]
 8013ac6:	3b04      	subs	r3, #4
 8013ac8:	2a00      	cmp	r2, #0
 8013aca:	d1ef      	bne.n	8013aac <quorem+0xf0>
 8013acc:	3c01      	subs	r4, #1
 8013ace:	e7ea      	b.n	8013aa6 <quorem+0xea>
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	e7ee      	b.n	8013ab2 <quorem+0xf6>
 8013ad4:	0000      	movs	r0, r0
	...

08013ad8 <_dtoa_r>:
 8013ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013adc:	ec57 6b10 	vmov	r6, r7, d0
 8013ae0:	b097      	sub	sp, #92	; 0x5c
 8013ae2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013ae4:	9106      	str	r1, [sp, #24]
 8013ae6:	4604      	mov	r4, r0
 8013ae8:	920b      	str	r2, [sp, #44]	; 0x2c
 8013aea:	9312      	str	r3, [sp, #72]	; 0x48
 8013aec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013af0:	e9cd 6700 	strd	r6, r7, [sp]
 8013af4:	b93d      	cbnz	r5, 8013b06 <_dtoa_r+0x2e>
 8013af6:	2010      	movs	r0, #16
 8013af8:	f7fe ff56 	bl	80129a8 <malloc>
 8013afc:	6260      	str	r0, [r4, #36]	; 0x24
 8013afe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b02:	6005      	str	r5, [r0, #0]
 8013b04:	60c5      	str	r5, [r0, #12]
 8013b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b08:	6819      	ldr	r1, [r3, #0]
 8013b0a:	b151      	cbz	r1, 8013b22 <_dtoa_r+0x4a>
 8013b0c:	685a      	ldr	r2, [r3, #4]
 8013b0e:	604a      	str	r2, [r1, #4]
 8013b10:	2301      	movs	r3, #1
 8013b12:	4093      	lsls	r3, r2
 8013b14:	608b      	str	r3, [r1, #8]
 8013b16:	4620      	mov	r0, r4
 8013b18:	f000 ffe3 	bl	8014ae2 <_Bfree>
 8013b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b1e:	2200      	movs	r2, #0
 8013b20:	601a      	str	r2, [r3, #0]
 8013b22:	1e3b      	subs	r3, r7, #0
 8013b24:	bfbb      	ittet	lt
 8013b26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013b2a:	9301      	strlt	r3, [sp, #4]
 8013b2c:	2300      	movge	r3, #0
 8013b2e:	2201      	movlt	r2, #1
 8013b30:	bfac      	ite	ge
 8013b32:	f8c8 3000 	strge.w	r3, [r8]
 8013b36:	f8c8 2000 	strlt.w	r2, [r8]
 8013b3a:	4baf      	ldr	r3, [pc, #700]	; (8013df8 <_dtoa_r+0x320>)
 8013b3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b40:	ea33 0308 	bics.w	r3, r3, r8
 8013b44:	d114      	bne.n	8013b70 <_dtoa_r+0x98>
 8013b46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b48:	f242 730f 	movw	r3, #9999	; 0x270f
 8013b4c:	6013      	str	r3, [r2, #0]
 8013b4e:	9b00      	ldr	r3, [sp, #0]
 8013b50:	b923      	cbnz	r3, 8013b5c <_dtoa_r+0x84>
 8013b52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013b56:	2800      	cmp	r0, #0
 8013b58:	f000 8542 	beq.w	80145e0 <_dtoa_r+0xb08>
 8013b5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013e0c <_dtoa_r+0x334>
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	f000 8544 	beq.w	80145f0 <_dtoa_r+0xb18>
 8013b68:	f10b 0303 	add.w	r3, fp, #3
 8013b6c:	f000 bd3e 	b.w	80145ec <_dtoa_r+0xb14>
 8013b70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013b74:	2200      	movs	r2, #0
 8013b76:	2300      	movs	r3, #0
 8013b78:	4630      	mov	r0, r6
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	f7ec ffc4 	bl	8000b08 <__aeabi_dcmpeq>
 8013b80:	4681      	mov	r9, r0
 8013b82:	b168      	cbz	r0, 8013ba0 <_dtoa_r+0xc8>
 8013b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b86:	2301      	movs	r3, #1
 8013b88:	6013      	str	r3, [r2, #0]
 8013b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f000 8524 	beq.w	80145da <_dtoa_r+0xb02>
 8013b92:	4b9a      	ldr	r3, [pc, #616]	; (8013dfc <_dtoa_r+0x324>)
 8013b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013b96:	f103 3bff 	add.w	fp, r3, #4294967295
 8013b9a:	6013      	str	r3, [r2, #0]
 8013b9c:	f000 bd28 	b.w	80145f0 <_dtoa_r+0xb18>
 8013ba0:	aa14      	add	r2, sp, #80	; 0x50
 8013ba2:	a915      	add	r1, sp, #84	; 0x54
 8013ba4:	ec47 6b10 	vmov	d0, r6, r7
 8013ba8:	4620      	mov	r0, r4
 8013baa:	f001 f9f2 	bl	8014f92 <__d2b>
 8013bae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013bb2:	9004      	str	r0, [sp, #16]
 8013bb4:	2d00      	cmp	r5, #0
 8013bb6:	d07c      	beq.n	8013cb2 <_dtoa_r+0x1da>
 8013bb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013bbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013bc0:	46b2      	mov	sl, r6
 8013bc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013bca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013bce:	2200      	movs	r2, #0
 8013bd0:	4b8b      	ldr	r3, [pc, #556]	; (8013e00 <_dtoa_r+0x328>)
 8013bd2:	4650      	mov	r0, sl
 8013bd4:	4659      	mov	r1, fp
 8013bd6:	f7ec fb77 	bl	80002c8 <__aeabi_dsub>
 8013bda:	a381      	add	r3, pc, #516	; (adr r3, 8013de0 <_dtoa_r+0x308>)
 8013bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be0:	f7ec fd2a 	bl	8000638 <__aeabi_dmul>
 8013be4:	a380      	add	r3, pc, #512	; (adr r3, 8013de8 <_dtoa_r+0x310>)
 8013be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bea:	f7ec fb6f 	bl	80002cc <__adddf3>
 8013bee:	4606      	mov	r6, r0
 8013bf0:	4628      	mov	r0, r5
 8013bf2:	460f      	mov	r7, r1
 8013bf4:	f7ec fcb6 	bl	8000564 <__aeabi_i2d>
 8013bf8:	a37d      	add	r3, pc, #500	; (adr r3, 8013df0 <_dtoa_r+0x318>)
 8013bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfe:	f7ec fd1b 	bl	8000638 <__aeabi_dmul>
 8013c02:	4602      	mov	r2, r0
 8013c04:	460b      	mov	r3, r1
 8013c06:	4630      	mov	r0, r6
 8013c08:	4639      	mov	r1, r7
 8013c0a:	f7ec fb5f 	bl	80002cc <__adddf3>
 8013c0e:	4606      	mov	r6, r0
 8013c10:	460f      	mov	r7, r1
 8013c12:	f7ec ffc1 	bl	8000b98 <__aeabi_d2iz>
 8013c16:	2200      	movs	r2, #0
 8013c18:	4682      	mov	sl, r0
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	4639      	mov	r1, r7
 8013c20:	f7ec ff7c 	bl	8000b1c <__aeabi_dcmplt>
 8013c24:	b148      	cbz	r0, 8013c3a <_dtoa_r+0x162>
 8013c26:	4650      	mov	r0, sl
 8013c28:	f7ec fc9c 	bl	8000564 <__aeabi_i2d>
 8013c2c:	4632      	mov	r2, r6
 8013c2e:	463b      	mov	r3, r7
 8013c30:	f7ec ff6a 	bl	8000b08 <__aeabi_dcmpeq>
 8013c34:	b908      	cbnz	r0, 8013c3a <_dtoa_r+0x162>
 8013c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c3a:	f1ba 0f16 	cmp.w	sl, #22
 8013c3e:	d859      	bhi.n	8013cf4 <_dtoa_r+0x21c>
 8013c40:	4970      	ldr	r1, [pc, #448]	; (8013e04 <_dtoa_r+0x32c>)
 8013c42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c4e:	f7ec ff83 	bl	8000b58 <__aeabi_dcmpgt>
 8013c52:	2800      	cmp	r0, #0
 8013c54:	d050      	beq.n	8013cf8 <_dtoa_r+0x220>
 8013c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c60:	1b5d      	subs	r5, r3, r5
 8013c62:	f1b5 0801 	subs.w	r8, r5, #1
 8013c66:	bf49      	itett	mi
 8013c68:	f1c5 0301 	rsbmi	r3, r5, #1
 8013c6c:	2300      	movpl	r3, #0
 8013c6e:	9305      	strmi	r3, [sp, #20]
 8013c70:	f04f 0800 	movmi.w	r8, #0
 8013c74:	bf58      	it	pl
 8013c76:	9305      	strpl	r3, [sp, #20]
 8013c78:	f1ba 0f00 	cmp.w	sl, #0
 8013c7c:	db3e      	blt.n	8013cfc <_dtoa_r+0x224>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	44d0      	add	r8, sl
 8013c82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013c86:	9307      	str	r3, [sp, #28]
 8013c88:	9b06      	ldr	r3, [sp, #24]
 8013c8a:	2b09      	cmp	r3, #9
 8013c8c:	f200 8090 	bhi.w	8013db0 <_dtoa_r+0x2d8>
 8013c90:	2b05      	cmp	r3, #5
 8013c92:	bfc4      	itt	gt
 8013c94:	3b04      	subgt	r3, #4
 8013c96:	9306      	strgt	r3, [sp, #24]
 8013c98:	9b06      	ldr	r3, [sp, #24]
 8013c9a:	f1a3 0302 	sub.w	r3, r3, #2
 8013c9e:	bfcc      	ite	gt
 8013ca0:	2500      	movgt	r5, #0
 8013ca2:	2501      	movle	r5, #1
 8013ca4:	2b03      	cmp	r3, #3
 8013ca6:	f200 808f 	bhi.w	8013dc8 <_dtoa_r+0x2f0>
 8013caa:	e8df f003 	tbb	[pc, r3]
 8013cae:	7f7d      	.short	0x7f7d
 8013cb0:	7131      	.short	0x7131
 8013cb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013cb6:	441d      	add	r5, r3
 8013cb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013cbc:	2820      	cmp	r0, #32
 8013cbe:	dd13      	ble.n	8013ce8 <_dtoa_r+0x210>
 8013cc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013cc4:	9b00      	ldr	r3, [sp, #0]
 8013cc6:	fa08 f800 	lsl.w	r8, r8, r0
 8013cca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013cce:	fa23 f000 	lsr.w	r0, r3, r0
 8013cd2:	ea48 0000 	orr.w	r0, r8, r0
 8013cd6:	f7ec fc35 	bl	8000544 <__aeabi_ui2d>
 8013cda:	2301      	movs	r3, #1
 8013cdc:	4682      	mov	sl, r0
 8013cde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013ce2:	3d01      	subs	r5, #1
 8013ce4:	9313      	str	r3, [sp, #76]	; 0x4c
 8013ce6:	e772      	b.n	8013bce <_dtoa_r+0xf6>
 8013ce8:	9b00      	ldr	r3, [sp, #0]
 8013cea:	f1c0 0020 	rsb	r0, r0, #32
 8013cee:	fa03 f000 	lsl.w	r0, r3, r0
 8013cf2:	e7f0      	b.n	8013cd6 <_dtoa_r+0x1fe>
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	e7b1      	b.n	8013c5c <_dtoa_r+0x184>
 8013cf8:	900f      	str	r0, [sp, #60]	; 0x3c
 8013cfa:	e7b0      	b.n	8013c5e <_dtoa_r+0x186>
 8013cfc:	9b05      	ldr	r3, [sp, #20]
 8013cfe:	eba3 030a 	sub.w	r3, r3, sl
 8013d02:	9305      	str	r3, [sp, #20]
 8013d04:	f1ca 0300 	rsb	r3, sl, #0
 8013d08:	9307      	str	r3, [sp, #28]
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	930e      	str	r3, [sp, #56]	; 0x38
 8013d0e:	e7bb      	b.n	8013c88 <_dtoa_r+0x1b0>
 8013d10:	2301      	movs	r3, #1
 8013d12:	930a      	str	r3, [sp, #40]	; 0x28
 8013d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	dd59      	ble.n	8013dce <_dtoa_r+0x2f6>
 8013d1a:	9302      	str	r3, [sp, #8]
 8013d1c:	4699      	mov	r9, r3
 8013d1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d20:	2200      	movs	r2, #0
 8013d22:	6072      	str	r2, [r6, #4]
 8013d24:	2204      	movs	r2, #4
 8013d26:	f102 0014 	add.w	r0, r2, #20
 8013d2a:	4298      	cmp	r0, r3
 8013d2c:	6871      	ldr	r1, [r6, #4]
 8013d2e:	d953      	bls.n	8013dd8 <_dtoa_r+0x300>
 8013d30:	4620      	mov	r0, r4
 8013d32:	f000 fea2 	bl	8014a7a <_Balloc>
 8013d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d38:	6030      	str	r0, [r6, #0]
 8013d3a:	f1b9 0f0e 	cmp.w	r9, #14
 8013d3e:	f8d3 b000 	ldr.w	fp, [r3]
 8013d42:	f200 80e6 	bhi.w	8013f12 <_dtoa_r+0x43a>
 8013d46:	2d00      	cmp	r5, #0
 8013d48:	f000 80e3 	beq.w	8013f12 <_dtoa_r+0x43a>
 8013d4c:	ed9d 7b00 	vldr	d7, [sp]
 8013d50:	f1ba 0f00 	cmp.w	sl, #0
 8013d54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013d58:	dd74      	ble.n	8013e44 <_dtoa_r+0x36c>
 8013d5a:	4a2a      	ldr	r2, [pc, #168]	; (8013e04 <_dtoa_r+0x32c>)
 8013d5c:	f00a 030f 	and.w	r3, sl, #15
 8013d60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013d64:	ed93 7b00 	vldr	d7, [r3]
 8013d68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013d6c:	06f0      	lsls	r0, r6, #27
 8013d6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013d72:	d565      	bpl.n	8013e40 <_dtoa_r+0x368>
 8013d74:	4b24      	ldr	r3, [pc, #144]	; (8013e08 <_dtoa_r+0x330>)
 8013d76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013d7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013d7e:	f7ec fd85 	bl	800088c <__aeabi_ddiv>
 8013d82:	e9cd 0100 	strd	r0, r1, [sp]
 8013d86:	f006 060f 	and.w	r6, r6, #15
 8013d8a:	2503      	movs	r5, #3
 8013d8c:	4f1e      	ldr	r7, [pc, #120]	; (8013e08 <_dtoa_r+0x330>)
 8013d8e:	e04c      	b.n	8013e2a <_dtoa_r+0x352>
 8013d90:	2301      	movs	r3, #1
 8013d92:	930a      	str	r3, [sp, #40]	; 0x28
 8013d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d96:	4453      	add	r3, sl
 8013d98:	f103 0901 	add.w	r9, r3, #1
 8013d9c:	9302      	str	r3, [sp, #8]
 8013d9e:	464b      	mov	r3, r9
 8013da0:	2b01      	cmp	r3, #1
 8013da2:	bfb8      	it	lt
 8013da4:	2301      	movlt	r3, #1
 8013da6:	e7ba      	b.n	8013d1e <_dtoa_r+0x246>
 8013da8:	2300      	movs	r3, #0
 8013daa:	e7b2      	b.n	8013d12 <_dtoa_r+0x23a>
 8013dac:	2300      	movs	r3, #0
 8013dae:	e7f0      	b.n	8013d92 <_dtoa_r+0x2ba>
 8013db0:	2501      	movs	r5, #1
 8013db2:	2300      	movs	r3, #0
 8013db4:	9306      	str	r3, [sp, #24]
 8013db6:	950a      	str	r5, [sp, #40]	; 0x28
 8013db8:	f04f 33ff 	mov.w	r3, #4294967295
 8013dbc:	9302      	str	r3, [sp, #8]
 8013dbe:	4699      	mov	r9, r3
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	2312      	movs	r3, #18
 8013dc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8013dc6:	e7aa      	b.n	8013d1e <_dtoa_r+0x246>
 8013dc8:	2301      	movs	r3, #1
 8013dca:	930a      	str	r3, [sp, #40]	; 0x28
 8013dcc:	e7f4      	b.n	8013db8 <_dtoa_r+0x2e0>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	9302      	str	r3, [sp, #8]
 8013dd2:	4699      	mov	r9, r3
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	e7f5      	b.n	8013dc4 <_dtoa_r+0x2ec>
 8013dd8:	3101      	adds	r1, #1
 8013dda:	6071      	str	r1, [r6, #4]
 8013ddc:	0052      	lsls	r2, r2, #1
 8013dde:	e7a2      	b.n	8013d26 <_dtoa_r+0x24e>
 8013de0:	636f4361 	.word	0x636f4361
 8013de4:	3fd287a7 	.word	0x3fd287a7
 8013de8:	8b60c8b3 	.word	0x8b60c8b3
 8013dec:	3fc68a28 	.word	0x3fc68a28
 8013df0:	509f79fb 	.word	0x509f79fb
 8013df4:	3fd34413 	.word	0x3fd34413
 8013df8:	7ff00000 	.word	0x7ff00000
 8013dfc:	0801870a 	.word	0x0801870a
 8013e00:	3ff80000 	.word	0x3ff80000
 8013e04:	080187c8 	.word	0x080187c8
 8013e08:	080187a0 	.word	0x080187a0
 8013e0c:	08018736 	.word	0x08018736
 8013e10:	07f1      	lsls	r1, r6, #31
 8013e12:	d508      	bpl.n	8013e26 <_dtoa_r+0x34e>
 8013e14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e1c:	f7ec fc0c 	bl	8000638 <__aeabi_dmul>
 8013e20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e24:	3501      	adds	r5, #1
 8013e26:	1076      	asrs	r6, r6, #1
 8013e28:	3708      	adds	r7, #8
 8013e2a:	2e00      	cmp	r6, #0
 8013e2c:	d1f0      	bne.n	8013e10 <_dtoa_r+0x338>
 8013e2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e36:	f7ec fd29 	bl	800088c <__aeabi_ddiv>
 8013e3a:	e9cd 0100 	strd	r0, r1, [sp]
 8013e3e:	e01a      	b.n	8013e76 <_dtoa_r+0x39e>
 8013e40:	2502      	movs	r5, #2
 8013e42:	e7a3      	b.n	8013d8c <_dtoa_r+0x2b4>
 8013e44:	f000 80a0 	beq.w	8013f88 <_dtoa_r+0x4b0>
 8013e48:	f1ca 0600 	rsb	r6, sl, #0
 8013e4c:	4b9f      	ldr	r3, [pc, #636]	; (80140cc <_dtoa_r+0x5f4>)
 8013e4e:	4fa0      	ldr	r7, [pc, #640]	; (80140d0 <_dtoa_r+0x5f8>)
 8013e50:	f006 020f 	and.w	r2, r6, #15
 8013e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013e60:	f7ec fbea 	bl	8000638 <__aeabi_dmul>
 8013e64:	e9cd 0100 	strd	r0, r1, [sp]
 8013e68:	1136      	asrs	r6, r6, #4
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	2502      	movs	r5, #2
 8013e6e:	2e00      	cmp	r6, #0
 8013e70:	d17f      	bne.n	8013f72 <_dtoa_r+0x49a>
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d1e1      	bne.n	8013e3a <_dtoa_r+0x362>
 8013e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f000 8087 	beq.w	8013f8c <_dtoa_r+0x4b4>
 8013e7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013e82:	2200      	movs	r2, #0
 8013e84:	4b93      	ldr	r3, [pc, #588]	; (80140d4 <_dtoa_r+0x5fc>)
 8013e86:	4630      	mov	r0, r6
 8013e88:	4639      	mov	r1, r7
 8013e8a:	f7ec fe47 	bl	8000b1c <__aeabi_dcmplt>
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d07c      	beq.n	8013f8c <_dtoa_r+0x4b4>
 8013e92:	f1b9 0f00 	cmp.w	r9, #0
 8013e96:	d079      	beq.n	8013f8c <_dtoa_r+0x4b4>
 8013e98:	9b02      	ldr	r3, [sp, #8]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	dd35      	ble.n	8013f0a <_dtoa_r+0x432>
 8013e9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013ea2:	9308      	str	r3, [sp, #32]
 8013ea4:	4639      	mov	r1, r7
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	4b8b      	ldr	r3, [pc, #556]	; (80140d8 <_dtoa_r+0x600>)
 8013eaa:	4630      	mov	r0, r6
 8013eac:	f7ec fbc4 	bl	8000638 <__aeabi_dmul>
 8013eb0:	e9cd 0100 	strd	r0, r1, [sp]
 8013eb4:	9f02      	ldr	r7, [sp, #8]
 8013eb6:	3501      	adds	r5, #1
 8013eb8:	4628      	mov	r0, r5
 8013eba:	f7ec fb53 	bl	8000564 <__aeabi_i2d>
 8013ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ec2:	f7ec fbb9 	bl	8000638 <__aeabi_dmul>
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	4b84      	ldr	r3, [pc, #528]	; (80140dc <_dtoa_r+0x604>)
 8013eca:	f7ec f9ff 	bl	80002cc <__adddf3>
 8013ece:	4605      	mov	r5, r0
 8013ed0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013ed4:	2f00      	cmp	r7, #0
 8013ed6:	d15d      	bne.n	8013f94 <_dtoa_r+0x4bc>
 8013ed8:	2200      	movs	r2, #0
 8013eda:	4b81      	ldr	r3, [pc, #516]	; (80140e0 <_dtoa_r+0x608>)
 8013edc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ee0:	f7ec f9f2 	bl	80002c8 <__aeabi_dsub>
 8013ee4:	462a      	mov	r2, r5
 8013ee6:	4633      	mov	r3, r6
 8013ee8:	e9cd 0100 	strd	r0, r1, [sp]
 8013eec:	f7ec fe34 	bl	8000b58 <__aeabi_dcmpgt>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	f040 8288 	bne.w	8014406 <_dtoa_r+0x92e>
 8013ef6:	462a      	mov	r2, r5
 8013ef8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013efc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f00:	f7ec fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	f040 827c 	bne.w	8014402 <_dtoa_r+0x92a>
 8013f0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f0e:	e9cd 2300 	strd	r2, r3, [sp]
 8013f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f2c0 8150 	blt.w	80141ba <_dtoa_r+0x6e2>
 8013f1a:	f1ba 0f0e 	cmp.w	sl, #14
 8013f1e:	f300 814c 	bgt.w	80141ba <_dtoa_r+0x6e2>
 8013f22:	4b6a      	ldr	r3, [pc, #424]	; (80140cc <_dtoa_r+0x5f4>)
 8013f24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013f28:	ed93 7b00 	vldr	d7, [r3]
 8013f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f34:	f280 80d8 	bge.w	80140e8 <_dtoa_r+0x610>
 8013f38:	f1b9 0f00 	cmp.w	r9, #0
 8013f3c:	f300 80d4 	bgt.w	80140e8 <_dtoa_r+0x610>
 8013f40:	f040 825e 	bne.w	8014400 <_dtoa_r+0x928>
 8013f44:	2200      	movs	r2, #0
 8013f46:	4b66      	ldr	r3, [pc, #408]	; (80140e0 <_dtoa_r+0x608>)
 8013f48:	ec51 0b17 	vmov	r0, r1, d7
 8013f4c:	f7ec fb74 	bl	8000638 <__aeabi_dmul>
 8013f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f54:	f7ec fdf6 	bl	8000b44 <__aeabi_dcmpge>
 8013f58:	464f      	mov	r7, r9
 8013f5a:	464e      	mov	r6, r9
 8013f5c:	2800      	cmp	r0, #0
 8013f5e:	f040 8234 	bne.w	80143ca <_dtoa_r+0x8f2>
 8013f62:	2331      	movs	r3, #49	; 0x31
 8013f64:	f10b 0501 	add.w	r5, fp, #1
 8013f68:	f88b 3000 	strb.w	r3, [fp]
 8013f6c:	f10a 0a01 	add.w	sl, sl, #1
 8013f70:	e22f      	b.n	80143d2 <_dtoa_r+0x8fa>
 8013f72:	07f2      	lsls	r2, r6, #31
 8013f74:	d505      	bpl.n	8013f82 <_dtoa_r+0x4aa>
 8013f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f7a:	f7ec fb5d 	bl	8000638 <__aeabi_dmul>
 8013f7e:	3501      	adds	r5, #1
 8013f80:	2301      	movs	r3, #1
 8013f82:	1076      	asrs	r6, r6, #1
 8013f84:	3708      	adds	r7, #8
 8013f86:	e772      	b.n	8013e6e <_dtoa_r+0x396>
 8013f88:	2502      	movs	r5, #2
 8013f8a:	e774      	b.n	8013e76 <_dtoa_r+0x39e>
 8013f8c:	f8cd a020 	str.w	sl, [sp, #32]
 8013f90:	464f      	mov	r7, r9
 8013f92:	e791      	b.n	8013eb8 <_dtoa_r+0x3e0>
 8013f94:	4b4d      	ldr	r3, [pc, #308]	; (80140cc <_dtoa_r+0x5f4>)
 8013f96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013f9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d047      	beq.n	8014034 <_dtoa_r+0x55c>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	460b      	mov	r3, r1
 8013fa8:	2000      	movs	r0, #0
 8013faa:	494e      	ldr	r1, [pc, #312]	; (80140e4 <_dtoa_r+0x60c>)
 8013fac:	f7ec fc6e 	bl	800088c <__aeabi_ddiv>
 8013fb0:	462a      	mov	r2, r5
 8013fb2:	4633      	mov	r3, r6
 8013fb4:	f7ec f988 	bl	80002c8 <__aeabi_dsub>
 8013fb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013fbc:	465d      	mov	r5, fp
 8013fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fc2:	f7ec fde9 	bl	8000b98 <__aeabi_d2iz>
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	f7ec facc 	bl	8000564 <__aeabi_i2d>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	460b      	mov	r3, r1
 8013fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fd4:	f7ec f978 	bl	80002c8 <__aeabi_dsub>
 8013fd8:	3630      	adds	r6, #48	; 0x30
 8013fda:	f805 6b01 	strb.w	r6, [r5], #1
 8013fde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013fe2:	e9cd 0100 	strd	r0, r1, [sp]
 8013fe6:	f7ec fd99 	bl	8000b1c <__aeabi_dcmplt>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d163      	bne.n	80140b6 <_dtoa_r+0x5de>
 8013fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	4937      	ldr	r1, [pc, #220]	; (80140d4 <_dtoa_r+0x5fc>)
 8013ff6:	f7ec f967 	bl	80002c8 <__aeabi_dsub>
 8013ffa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013ffe:	f7ec fd8d 	bl	8000b1c <__aeabi_dcmplt>
 8014002:	2800      	cmp	r0, #0
 8014004:	f040 80b7 	bne.w	8014176 <_dtoa_r+0x69e>
 8014008:	eba5 030b 	sub.w	r3, r5, fp
 801400c:	429f      	cmp	r7, r3
 801400e:	f77f af7c 	ble.w	8013f0a <_dtoa_r+0x432>
 8014012:	2200      	movs	r2, #0
 8014014:	4b30      	ldr	r3, [pc, #192]	; (80140d8 <_dtoa_r+0x600>)
 8014016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801401a:	f7ec fb0d 	bl	8000638 <__aeabi_dmul>
 801401e:	2200      	movs	r2, #0
 8014020:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014024:	4b2c      	ldr	r3, [pc, #176]	; (80140d8 <_dtoa_r+0x600>)
 8014026:	e9dd 0100 	ldrd	r0, r1, [sp]
 801402a:	f7ec fb05 	bl	8000638 <__aeabi_dmul>
 801402e:	e9cd 0100 	strd	r0, r1, [sp]
 8014032:	e7c4      	b.n	8013fbe <_dtoa_r+0x4e6>
 8014034:	462a      	mov	r2, r5
 8014036:	4633      	mov	r3, r6
 8014038:	f7ec fafe 	bl	8000638 <__aeabi_dmul>
 801403c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014040:	eb0b 0507 	add.w	r5, fp, r7
 8014044:	465e      	mov	r6, fp
 8014046:	e9dd 0100 	ldrd	r0, r1, [sp]
 801404a:	f7ec fda5 	bl	8000b98 <__aeabi_d2iz>
 801404e:	4607      	mov	r7, r0
 8014050:	f7ec fa88 	bl	8000564 <__aeabi_i2d>
 8014054:	3730      	adds	r7, #48	; 0x30
 8014056:	4602      	mov	r2, r0
 8014058:	460b      	mov	r3, r1
 801405a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801405e:	f7ec f933 	bl	80002c8 <__aeabi_dsub>
 8014062:	f806 7b01 	strb.w	r7, [r6], #1
 8014066:	42ae      	cmp	r6, r5
 8014068:	e9cd 0100 	strd	r0, r1, [sp]
 801406c:	f04f 0200 	mov.w	r2, #0
 8014070:	d126      	bne.n	80140c0 <_dtoa_r+0x5e8>
 8014072:	4b1c      	ldr	r3, [pc, #112]	; (80140e4 <_dtoa_r+0x60c>)
 8014074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014078:	f7ec f928 	bl	80002cc <__adddf3>
 801407c:	4602      	mov	r2, r0
 801407e:	460b      	mov	r3, r1
 8014080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014084:	f7ec fd68 	bl	8000b58 <__aeabi_dcmpgt>
 8014088:	2800      	cmp	r0, #0
 801408a:	d174      	bne.n	8014176 <_dtoa_r+0x69e>
 801408c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014090:	2000      	movs	r0, #0
 8014092:	4914      	ldr	r1, [pc, #80]	; (80140e4 <_dtoa_r+0x60c>)
 8014094:	f7ec f918 	bl	80002c8 <__aeabi_dsub>
 8014098:	4602      	mov	r2, r0
 801409a:	460b      	mov	r3, r1
 801409c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140a0:	f7ec fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80140a4:	2800      	cmp	r0, #0
 80140a6:	f43f af30 	beq.w	8013f0a <_dtoa_r+0x432>
 80140aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80140ae:	2b30      	cmp	r3, #48	; 0x30
 80140b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80140b4:	d002      	beq.n	80140bc <_dtoa_r+0x5e4>
 80140b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80140ba:	e04a      	b.n	8014152 <_dtoa_r+0x67a>
 80140bc:	4615      	mov	r5, r2
 80140be:	e7f4      	b.n	80140aa <_dtoa_r+0x5d2>
 80140c0:	4b05      	ldr	r3, [pc, #20]	; (80140d8 <_dtoa_r+0x600>)
 80140c2:	f7ec fab9 	bl	8000638 <__aeabi_dmul>
 80140c6:	e9cd 0100 	strd	r0, r1, [sp]
 80140ca:	e7bc      	b.n	8014046 <_dtoa_r+0x56e>
 80140cc:	080187c8 	.word	0x080187c8
 80140d0:	080187a0 	.word	0x080187a0
 80140d4:	3ff00000 	.word	0x3ff00000
 80140d8:	40240000 	.word	0x40240000
 80140dc:	401c0000 	.word	0x401c0000
 80140e0:	40140000 	.word	0x40140000
 80140e4:	3fe00000 	.word	0x3fe00000
 80140e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80140ec:	465d      	mov	r5, fp
 80140ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140f2:	4630      	mov	r0, r6
 80140f4:	4639      	mov	r1, r7
 80140f6:	f7ec fbc9 	bl	800088c <__aeabi_ddiv>
 80140fa:	f7ec fd4d 	bl	8000b98 <__aeabi_d2iz>
 80140fe:	4680      	mov	r8, r0
 8014100:	f7ec fa30 	bl	8000564 <__aeabi_i2d>
 8014104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014108:	f7ec fa96 	bl	8000638 <__aeabi_dmul>
 801410c:	4602      	mov	r2, r0
 801410e:	460b      	mov	r3, r1
 8014110:	4630      	mov	r0, r6
 8014112:	4639      	mov	r1, r7
 8014114:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014118:	f7ec f8d6 	bl	80002c8 <__aeabi_dsub>
 801411c:	f805 6b01 	strb.w	r6, [r5], #1
 8014120:	eba5 060b 	sub.w	r6, r5, fp
 8014124:	45b1      	cmp	r9, r6
 8014126:	4602      	mov	r2, r0
 8014128:	460b      	mov	r3, r1
 801412a:	d139      	bne.n	80141a0 <_dtoa_r+0x6c8>
 801412c:	f7ec f8ce 	bl	80002cc <__adddf3>
 8014130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014134:	4606      	mov	r6, r0
 8014136:	460f      	mov	r7, r1
 8014138:	f7ec fd0e 	bl	8000b58 <__aeabi_dcmpgt>
 801413c:	b9c8      	cbnz	r0, 8014172 <_dtoa_r+0x69a>
 801413e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014142:	4630      	mov	r0, r6
 8014144:	4639      	mov	r1, r7
 8014146:	f7ec fcdf 	bl	8000b08 <__aeabi_dcmpeq>
 801414a:	b110      	cbz	r0, 8014152 <_dtoa_r+0x67a>
 801414c:	f018 0f01 	tst.w	r8, #1
 8014150:	d10f      	bne.n	8014172 <_dtoa_r+0x69a>
 8014152:	9904      	ldr	r1, [sp, #16]
 8014154:	4620      	mov	r0, r4
 8014156:	f000 fcc4 	bl	8014ae2 <_Bfree>
 801415a:	2300      	movs	r3, #0
 801415c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801415e:	702b      	strb	r3, [r5, #0]
 8014160:	f10a 0301 	add.w	r3, sl, #1
 8014164:	6013      	str	r3, [r2, #0]
 8014166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014168:	2b00      	cmp	r3, #0
 801416a:	f000 8241 	beq.w	80145f0 <_dtoa_r+0xb18>
 801416e:	601d      	str	r5, [r3, #0]
 8014170:	e23e      	b.n	80145f0 <_dtoa_r+0xb18>
 8014172:	f8cd a020 	str.w	sl, [sp, #32]
 8014176:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801417a:	2a39      	cmp	r2, #57	; 0x39
 801417c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014180:	d108      	bne.n	8014194 <_dtoa_r+0x6bc>
 8014182:	459b      	cmp	fp, r3
 8014184:	d10a      	bne.n	801419c <_dtoa_r+0x6c4>
 8014186:	9b08      	ldr	r3, [sp, #32]
 8014188:	3301      	adds	r3, #1
 801418a:	9308      	str	r3, [sp, #32]
 801418c:	2330      	movs	r3, #48	; 0x30
 801418e:	f88b 3000 	strb.w	r3, [fp]
 8014192:	465b      	mov	r3, fp
 8014194:	781a      	ldrb	r2, [r3, #0]
 8014196:	3201      	adds	r2, #1
 8014198:	701a      	strb	r2, [r3, #0]
 801419a:	e78c      	b.n	80140b6 <_dtoa_r+0x5de>
 801419c:	461d      	mov	r5, r3
 801419e:	e7ea      	b.n	8014176 <_dtoa_r+0x69e>
 80141a0:	2200      	movs	r2, #0
 80141a2:	4b9b      	ldr	r3, [pc, #620]	; (8014410 <_dtoa_r+0x938>)
 80141a4:	f7ec fa48 	bl	8000638 <__aeabi_dmul>
 80141a8:	2200      	movs	r2, #0
 80141aa:	2300      	movs	r3, #0
 80141ac:	4606      	mov	r6, r0
 80141ae:	460f      	mov	r7, r1
 80141b0:	f7ec fcaa 	bl	8000b08 <__aeabi_dcmpeq>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d09a      	beq.n	80140ee <_dtoa_r+0x616>
 80141b8:	e7cb      	b.n	8014152 <_dtoa_r+0x67a>
 80141ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141bc:	2a00      	cmp	r2, #0
 80141be:	f000 808b 	beq.w	80142d8 <_dtoa_r+0x800>
 80141c2:	9a06      	ldr	r2, [sp, #24]
 80141c4:	2a01      	cmp	r2, #1
 80141c6:	dc6e      	bgt.n	80142a6 <_dtoa_r+0x7ce>
 80141c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80141ca:	2a00      	cmp	r2, #0
 80141cc:	d067      	beq.n	801429e <_dtoa_r+0x7c6>
 80141ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80141d2:	9f07      	ldr	r7, [sp, #28]
 80141d4:	9d05      	ldr	r5, [sp, #20]
 80141d6:	9a05      	ldr	r2, [sp, #20]
 80141d8:	2101      	movs	r1, #1
 80141da:	441a      	add	r2, r3
 80141dc:	4620      	mov	r0, r4
 80141de:	9205      	str	r2, [sp, #20]
 80141e0:	4498      	add	r8, r3
 80141e2:	f000 fd1e 	bl	8014c22 <__i2b>
 80141e6:	4606      	mov	r6, r0
 80141e8:	2d00      	cmp	r5, #0
 80141ea:	dd0c      	ble.n	8014206 <_dtoa_r+0x72e>
 80141ec:	f1b8 0f00 	cmp.w	r8, #0
 80141f0:	dd09      	ble.n	8014206 <_dtoa_r+0x72e>
 80141f2:	4545      	cmp	r5, r8
 80141f4:	9a05      	ldr	r2, [sp, #20]
 80141f6:	462b      	mov	r3, r5
 80141f8:	bfa8      	it	ge
 80141fa:	4643      	movge	r3, r8
 80141fc:	1ad2      	subs	r2, r2, r3
 80141fe:	9205      	str	r2, [sp, #20]
 8014200:	1aed      	subs	r5, r5, r3
 8014202:	eba8 0803 	sub.w	r8, r8, r3
 8014206:	9b07      	ldr	r3, [sp, #28]
 8014208:	b1eb      	cbz	r3, 8014246 <_dtoa_r+0x76e>
 801420a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801420c:	2b00      	cmp	r3, #0
 801420e:	d067      	beq.n	80142e0 <_dtoa_r+0x808>
 8014210:	b18f      	cbz	r7, 8014236 <_dtoa_r+0x75e>
 8014212:	4631      	mov	r1, r6
 8014214:	463a      	mov	r2, r7
 8014216:	4620      	mov	r0, r4
 8014218:	f000 fda2 	bl	8014d60 <__pow5mult>
 801421c:	9a04      	ldr	r2, [sp, #16]
 801421e:	4601      	mov	r1, r0
 8014220:	4606      	mov	r6, r0
 8014222:	4620      	mov	r0, r4
 8014224:	f000 fd06 	bl	8014c34 <__multiply>
 8014228:	9904      	ldr	r1, [sp, #16]
 801422a:	9008      	str	r0, [sp, #32]
 801422c:	4620      	mov	r0, r4
 801422e:	f000 fc58 	bl	8014ae2 <_Bfree>
 8014232:	9b08      	ldr	r3, [sp, #32]
 8014234:	9304      	str	r3, [sp, #16]
 8014236:	9b07      	ldr	r3, [sp, #28]
 8014238:	1bda      	subs	r2, r3, r7
 801423a:	d004      	beq.n	8014246 <_dtoa_r+0x76e>
 801423c:	9904      	ldr	r1, [sp, #16]
 801423e:	4620      	mov	r0, r4
 8014240:	f000 fd8e 	bl	8014d60 <__pow5mult>
 8014244:	9004      	str	r0, [sp, #16]
 8014246:	2101      	movs	r1, #1
 8014248:	4620      	mov	r0, r4
 801424a:	f000 fcea 	bl	8014c22 <__i2b>
 801424e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014250:	4607      	mov	r7, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	f000 81d0 	beq.w	80145f8 <_dtoa_r+0xb20>
 8014258:	461a      	mov	r2, r3
 801425a:	4601      	mov	r1, r0
 801425c:	4620      	mov	r0, r4
 801425e:	f000 fd7f 	bl	8014d60 <__pow5mult>
 8014262:	9b06      	ldr	r3, [sp, #24]
 8014264:	2b01      	cmp	r3, #1
 8014266:	4607      	mov	r7, r0
 8014268:	dc40      	bgt.n	80142ec <_dtoa_r+0x814>
 801426a:	9b00      	ldr	r3, [sp, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d139      	bne.n	80142e4 <_dtoa_r+0x80c>
 8014270:	9b01      	ldr	r3, [sp, #4]
 8014272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014276:	2b00      	cmp	r3, #0
 8014278:	d136      	bne.n	80142e8 <_dtoa_r+0x810>
 801427a:	9b01      	ldr	r3, [sp, #4]
 801427c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014280:	0d1b      	lsrs	r3, r3, #20
 8014282:	051b      	lsls	r3, r3, #20
 8014284:	b12b      	cbz	r3, 8014292 <_dtoa_r+0x7ba>
 8014286:	9b05      	ldr	r3, [sp, #20]
 8014288:	3301      	adds	r3, #1
 801428a:	9305      	str	r3, [sp, #20]
 801428c:	f108 0801 	add.w	r8, r8, #1
 8014290:	2301      	movs	r3, #1
 8014292:	9307      	str	r3, [sp, #28]
 8014294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014296:	2b00      	cmp	r3, #0
 8014298:	d12a      	bne.n	80142f0 <_dtoa_r+0x818>
 801429a:	2001      	movs	r0, #1
 801429c:	e030      	b.n	8014300 <_dtoa_r+0x828>
 801429e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80142a4:	e795      	b.n	80141d2 <_dtoa_r+0x6fa>
 80142a6:	9b07      	ldr	r3, [sp, #28]
 80142a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80142ac:	42bb      	cmp	r3, r7
 80142ae:	bfbf      	itttt	lt
 80142b0:	9b07      	ldrlt	r3, [sp, #28]
 80142b2:	9707      	strlt	r7, [sp, #28]
 80142b4:	1afa      	sublt	r2, r7, r3
 80142b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80142b8:	bfbb      	ittet	lt
 80142ba:	189b      	addlt	r3, r3, r2
 80142bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80142be:	1bdf      	subge	r7, r3, r7
 80142c0:	2700      	movlt	r7, #0
 80142c2:	f1b9 0f00 	cmp.w	r9, #0
 80142c6:	bfb5      	itete	lt
 80142c8:	9b05      	ldrlt	r3, [sp, #20]
 80142ca:	9d05      	ldrge	r5, [sp, #20]
 80142cc:	eba3 0509 	sublt.w	r5, r3, r9
 80142d0:	464b      	movge	r3, r9
 80142d2:	bfb8      	it	lt
 80142d4:	2300      	movlt	r3, #0
 80142d6:	e77e      	b.n	80141d6 <_dtoa_r+0x6fe>
 80142d8:	9f07      	ldr	r7, [sp, #28]
 80142da:	9d05      	ldr	r5, [sp, #20]
 80142dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80142de:	e783      	b.n	80141e8 <_dtoa_r+0x710>
 80142e0:	9a07      	ldr	r2, [sp, #28]
 80142e2:	e7ab      	b.n	801423c <_dtoa_r+0x764>
 80142e4:	2300      	movs	r3, #0
 80142e6:	e7d4      	b.n	8014292 <_dtoa_r+0x7ba>
 80142e8:	9b00      	ldr	r3, [sp, #0]
 80142ea:	e7d2      	b.n	8014292 <_dtoa_r+0x7ba>
 80142ec:	2300      	movs	r3, #0
 80142ee:	9307      	str	r3, [sp, #28]
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80142f6:	6918      	ldr	r0, [r3, #16]
 80142f8:	f000 fc45 	bl	8014b86 <__hi0bits>
 80142fc:	f1c0 0020 	rsb	r0, r0, #32
 8014300:	4440      	add	r0, r8
 8014302:	f010 001f 	ands.w	r0, r0, #31
 8014306:	d047      	beq.n	8014398 <_dtoa_r+0x8c0>
 8014308:	f1c0 0320 	rsb	r3, r0, #32
 801430c:	2b04      	cmp	r3, #4
 801430e:	dd3b      	ble.n	8014388 <_dtoa_r+0x8b0>
 8014310:	9b05      	ldr	r3, [sp, #20]
 8014312:	f1c0 001c 	rsb	r0, r0, #28
 8014316:	4403      	add	r3, r0
 8014318:	9305      	str	r3, [sp, #20]
 801431a:	4405      	add	r5, r0
 801431c:	4480      	add	r8, r0
 801431e:	9b05      	ldr	r3, [sp, #20]
 8014320:	2b00      	cmp	r3, #0
 8014322:	dd05      	ble.n	8014330 <_dtoa_r+0x858>
 8014324:	461a      	mov	r2, r3
 8014326:	9904      	ldr	r1, [sp, #16]
 8014328:	4620      	mov	r0, r4
 801432a:	f000 fd67 	bl	8014dfc <__lshift>
 801432e:	9004      	str	r0, [sp, #16]
 8014330:	f1b8 0f00 	cmp.w	r8, #0
 8014334:	dd05      	ble.n	8014342 <_dtoa_r+0x86a>
 8014336:	4639      	mov	r1, r7
 8014338:	4642      	mov	r2, r8
 801433a:	4620      	mov	r0, r4
 801433c:	f000 fd5e 	bl	8014dfc <__lshift>
 8014340:	4607      	mov	r7, r0
 8014342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014344:	b353      	cbz	r3, 801439c <_dtoa_r+0x8c4>
 8014346:	4639      	mov	r1, r7
 8014348:	9804      	ldr	r0, [sp, #16]
 801434a:	f000 fdab 	bl	8014ea4 <__mcmp>
 801434e:	2800      	cmp	r0, #0
 8014350:	da24      	bge.n	801439c <_dtoa_r+0x8c4>
 8014352:	2300      	movs	r3, #0
 8014354:	220a      	movs	r2, #10
 8014356:	9904      	ldr	r1, [sp, #16]
 8014358:	4620      	mov	r0, r4
 801435a:	f000 fbd9 	bl	8014b10 <__multadd>
 801435e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014360:	9004      	str	r0, [sp, #16]
 8014362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014366:	2b00      	cmp	r3, #0
 8014368:	f000 814d 	beq.w	8014606 <_dtoa_r+0xb2e>
 801436c:	2300      	movs	r3, #0
 801436e:	4631      	mov	r1, r6
 8014370:	220a      	movs	r2, #10
 8014372:	4620      	mov	r0, r4
 8014374:	f000 fbcc 	bl	8014b10 <__multadd>
 8014378:	9b02      	ldr	r3, [sp, #8]
 801437a:	2b00      	cmp	r3, #0
 801437c:	4606      	mov	r6, r0
 801437e:	dc4f      	bgt.n	8014420 <_dtoa_r+0x948>
 8014380:	9b06      	ldr	r3, [sp, #24]
 8014382:	2b02      	cmp	r3, #2
 8014384:	dd4c      	ble.n	8014420 <_dtoa_r+0x948>
 8014386:	e011      	b.n	80143ac <_dtoa_r+0x8d4>
 8014388:	d0c9      	beq.n	801431e <_dtoa_r+0x846>
 801438a:	9a05      	ldr	r2, [sp, #20]
 801438c:	331c      	adds	r3, #28
 801438e:	441a      	add	r2, r3
 8014390:	9205      	str	r2, [sp, #20]
 8014392:	441d      	add	r5, r3
 8014394:	4498      	add	r8, r3
 8014396:	e7c2      	b.n	801431e <_dtoa_r+0x846>
 8014398:	4603      	mov	r3, r0
 801439a:	e7f6      	b.n	801438a <_dtoa_r+0x8b2>
 801439c:	f1b9 0f00 	cmp.w	r9, #0
 80143a0:	dc38      	bgt.n	8014414 <_dtoa_r+0x93c>
 80143a2:	9b06      	ldr	r3, [sp, #24]
 80143a4:	2b02      	cmp	r3, #2
 80143a6:	dd35      	ble.n	8014414 <_dtoa_r+0x93c>
 80143a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80143ac:	9b02      	ldr	r3, [sp, #8]
 80143ae:	b963      	cbnz	r3, 80143ca <_dtoa_r+0x8f2>
 80143b0:	4639      	mov	r1, r7
 80143b2:	2205      	movs	r2, #5
 80143b4:	4620      	mov	r0, r4
 80143b6:	f000 fbab 	bl	8014b10 <__multadd>
 80143ba:	4601      	mov	r1, r0
 80143bc:	4607      	mov	r7, r0
 80143be:	9804      	ldr	r0, [sp, #16]
 80143c0:	f000 fd70 	bl	8014ea4 <__mcmp>
 80143c4:	2800      	cmp	r0, #0
 80143c6:	f73f adcc 	bgt.w	8013f62 <_dtoa_r+0x48a>
 80143ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143cc:	465d      	mov	r5, fp
 80143ce:	ea6f 0a03 	mvn.w	sl, r3
 80143d2:	f04f 0900 	mov.w	r9, #0
 80143d6:	4639      	mov	r1, r7
 80143d8:	4620      	mov	r0, r4
 80143da:	f000 fb82 	bl	8014ae2 <_Bfree>
 80143de:	2e00      	cmp	r6, #0
 80143e0:	f43f aeb7 	beq.w	8014152 <_dtoa_r+0x67a>
 80143e4:	f1b9 0f00 	cmp.w	r9, #0
 80143e8:	d005      	beq.n	80143f6 <_dtoa_r+0x91e>
 80143ea:	45b1      	cmp	r9, r6
 80143ec:	d003      	beq.n	80143f6 <_dtoa_r+0x91e>
 80143ee:	4649      	mov	r1, r9
 80143f0:	4620      	mov	r0, r4
 80143f2:	f000 fb76 	bl	8014ae2 <_Bfree>
 80143f6:	4631      	mov	r1, r6
 80143f8:	4620      	mov	r0, r4
 80143fa:	f000 fb72 	bl	8014ae2 <_Bfree>
 80143fe:	e6a8      	b.n	8014152 <_dtoa_r+0x67a>
 8014400:	2700      	movs	r7, #0
 8014402:	463e      	mov	r6, r7
 8014404:	e7e1      	b.n	80143ca <_dtoa_r+0x8f2>
 8014406:	f8dd a020 	ldr.w	sl, [sp, #32]
 801440a:	463e      	mov	r6, r7
 801440c:	e5a9      	b.n	8013f62 <_dtoa_r+0x48a>
 801440e:	bf00      	nop
 8014410:	40240000 	.word	0x40240000
 8014414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014416:	f8cd 9008 	str.w	r9, [sp, #8]
 801441a:	2b00      	cmp	r3, #0
 801441c:	f000 80fa 	beq.w	8014614 <_dtoa_r+0xb3c>
 8014420:	2d00      	cmp	r5, #0
 8014422:	dd05      	ble.n	8014430 <_dtoa_r+0x958>
 8014424:	4631      	mov	r1, r6
 8014426:	462a      	mov	r2, r5
 8014428:	4620      	mov	r0, r4
 801442a:	f000 fce7 	bl	8014dfc <__lshift>
 801442e:	4606      	mov	r6, r0
 8014430:	9b07      	ldr	r3, [sp, #28]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d04c      	beq.n	80144d0 <_dtoa_r+0x9f8>
 8014436:	6871      	ldr	r1, [r6, #4]
 8014438:	4620      	mov	r0, r4
 801443a:	f000 fb1e 	bl	8014a7a <_Balloc>
 801443e:	6932      	ldr	r2, [r6, #16]
 8014440:	3202      	adds	r2, #2
 8014442:	4605      	mov	r5, r0
 8014444:	0092      	lsls	r2, r2, #2
 8014446:	f106 010c 	add.w	r1, r6, #12
 801444a:	300c      	adds	r0, #12
 801444c:	f7fe fabc 	bl	80129c8 <memcpy>
 8014450:	2201      	movs	r2, #1
 8014452:	4629      	mov	r1, r5
 8014454:	4620      	mov	r0, r4
 8014456:	f000 fcd1 	bl	8014dfc <__lshift>
 801445a:	9b00      	ldr	r3, [sp, #0]
 801445c:	f8cd b014 	str.w	fp, [sp, #20]
 8014460:	f003 0301 	and.w	r3, r3, #1
 8014464:	46b1      	mov	r9, r6
 8014466:	9307      	str	r3, [sp, #28]
 8014468:	4606      	mov	r6, r0
 801446a:	4639      	mov	r1, r7
 801446c:	9804      	ldr	r0, [sp, #16]
 801446e:	f7ff faa5 	bl	80139bc <quorem>
 8014472:	4649      	mov	r1, r9
 8014474:	4605      	mov	r5, r0
 8014476:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801447a:	9804      	ldr	r0, [sp, #16]
 801447c:	f000 fd12 	bl	8014ea4 <__mcmp>
 8014480:	4632      	mov	r2, r6
 8014482:	9000      	str	r0, [sp, #0]
 8014484:	4639      	mov	r1, r7
 8014486:	4620      	mov	r0, r4
 8014488:	f000 fd26 	bl	8014ed8 <__mdiff>
 801448c:	68c3      	ldr	r3, [r0, #12]
 801448e:	4602      	mov	r2, r0
 8014490:	bb03      	cbnz	r3, 80144d4 <_dtoa_r+0x9fc>
 8014492:	4601      	mov	r1, r0
 8014494:	9008      	str	r0, [sp, #32]
 8014496:	9804      	ldr	r0, [sp, #16]
 8014498:	f000 fd04 	bl	8014ea4 <__mcmp>
 801449c:	9a08      	ldr	r2, [sp, #32]
 801449e:	4603      	mov	r3, r0
 80144a0:	4611      	mov	r1, r2
 80144a2:	4620      	mov	r0, r4
 80144a4:	9308      	str	r3, [sp, #32]
 80144a6:	f000 fb1c 	bl	8014ae2 <_Bfree>
 80144aa:	9b08      	ldr	r3, [sp, #32]
 80144ac:	b9a3      	cbnz	r3, 80144d8 <_dtoa_r+0xa00>
 80144ae:	9a06      	ldr	r2, [sp, #24]
 80144b0:	b992      	cbnz	r2, 80144d8 <_dtoa_r+0xa00>
 80144b2:	9a07      	ldr	r2, [sp, #28]
 80144b4:	b982      	cbnz	r2, 80144d8 <_dtoa_r+0xa00>
 80144b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80144ba:	d029      	beq.n	8014510 <_dtoa_r+0xa38>
 80144bc:	9b00      	ldr	r3, [sp, #0]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	dd01      	ble.n	80144c6 <_dtoa_r+0x9ee>
 80144c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80144c6:	9b05      	ldr	r3, [sp, #20]
 80144c8:	1c5d      	adds	r5, r3, #1
 80144ca:	f883 8000 	strb.w	r8, [r3]
 80144ce:	e782      	b.n	80143d6 <_dtoa_r+0x8fe>
 80144d0:	4630      	mov	r0, r6
 80144d2:	e7c2      	b.n	801445a <_dtoa_r+0x982>
 80144d4:	2301      	movs	r3, #1
 80144d6:	e7e3      	b.n	80144a0 <_dtoa_r+0x9c8>
 80144d8:	9a00      	ldr	r2, [sp, #0]
 80144da:	2a00      	cmp	r2, #0
 80144dc:	db04      	blt.n	80144e8 <_dtoa_r+0xa10>
 80144de:	d125      	bne.n	801452c <_dtoa_r+0xa54>
 80144e0:	9a06      	ldr	r2, [sp, #24]
 80144e2:	bb1a      	cbnz	r2, 801452c <_dtoa_r+0xa54>
 80144e4:	9a07      	ldr	r2, [sp, #28]
 80144e6:	bb0a      	cbnz	r2, 801452c <_dtoa_r+0xa54>
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	ddec      	ble.n	80144c6 <_dtoa_r+0x9ee>
 80144ec:	2201      	movs	r2, #1
 80144ee:	9904      	ldr	r1, [sp, #16]
 80144f0:	4620      	mov	r0, r4
 80144f2:	f000 fc83 	bl	8014dfc <__lshift>
 80144f6:	4639      	mov	r1, r7
 80144f8:	9004      	str	r0, [sp, #16]
 80144fa:	f000 fcd3 	bl	8014ea4 <__mcmp>
 80144fe:	2800      	cmp	r0, #0
 8014500:	dc03      	bgt.n	801450a <_dtoa_r+0xa32>
 8014502:	d1e0      	bne.n	80144c6 <_dtoa_r+0x9ee>
 8014504:	f018 0f01 	tst.w	r8, #1
 8014508:	d0dd      	beq.n	80144c6 <_dtoa_r+0x9ee>
 801450a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801450e:	d1d8      	bne.n	80144c2 <_dtoa_r+0x9ea>
 8014510:	9b05      	ldr	r3, [sp, #20]
 8014512:	9a05      	ldr	r2, [sp, #20]
 8014514:	1c5d      	adds	r5, r3, #1
 8014516:	2339      	movs	r3, #57	; 0x39
 8014518:	7013      	strb	r3, [r2, #0]
 801451a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801451e:	2b39      	cmp	r3, #57	; 0x39
 8014520:	f105 32ff 	add.w	r2, r5, #4294967295
 8014524:	d04f      	beq.n	80145c6 <_dtoa_r+0xaee>
 8014526:	3301      	adds	r3, #1
 8014528:	7013      	strb	r3, [r2, #0]
 801452a:	e754      	b.n	80143d6 <_dtoa_r+0x8fe>
 801452c:	9a05      	ldr	r2, [sp, #20]
 801452e:	2b00      	cmp	r3, #0
 8014530:	f102 0501 	add.w	r5, r2, #1
 8014534:	dd06      	ble.n	8014544 <_dtoa_r+0xa6c>
 8014536:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801453a:	d0e9      	beq.n	8014510 <_dtoa_r+0xa38>
 801453c:	f108 0801 	add.w	r8, r8, #1
 8014540:	9b05      	ldr	r3, [sp, #20]
 8014542:	e7c2      	b.n	80144ca <_dtoa_r+0x9f2>
 8014544:	9a02      	ldr	r2, [sp, #8]
 8014546:	f805 8c01 	strb.w	r8, [r5, #-1]
 801454a:	eba5 030b 	sub.w	r3, r5, fp
 801454e:	4293      	cmp	r3, r2
 8014550:	d021      	beq.n	8014596 <_dtoa_r+0xabe>
 8014552:	2300      	movs	r3, #0
 8014554:	220a      	movs	r2, #10
 8014556:	9904      	ldr	r1, [sp, #16]
 8014558:	4620      	mov	r0, r4
 801455a:	f000 fad9 	bl	8014b10 <__multadd>
 801455e:	45b1      	cmp	r9, r6
 8014560:	9004      	str	r0, [sp, #16]
 8014562:	f04f 0300 	mov.w	r3, #0
 8014566:	f04f 020a 	mov.w	r2, #10
 801456a:	4649      	mov	r1, r9
 801456c:	4620      	mov	r0, r4
 801456e:	d105      	bne.n	801457c <_dtoa_r+0xaa4>
 8014570:	f000 face 	bl	8014b10 <__multadd>
 8014574:	4681      	mov	r9, r0
 8014576:	4606      	mov	r6, r0
 8014578:	9505      	str	r5, [sp, #20]
 801457a:	e776      	b.n	801446a <_dtoa_r+0x992>
 801457c:	f000 fac8 	bl	8014b10 <__multadd>
 8014580:	4631      	mov	r1, r6
 8014582:	4681      	mov	r9, r0
 8014584:	2300      	movs	r3, #0
 8014586:	220a      	movs	r2, #10
 8014588:	4620      	mov	r0, r4
 801458a:	f000 fac1 	bl	8014b10 <__multadd>
 801458e:	4606      	mov	r6, r0
 8014590:	e7f2      	b.n	8014578 <_dtoa_r+0xaa0>
 8014592:	f04f 0900 	mov.w	r9, #0
 8014596:	2201      	movs	r2, #1
 8014598:	9904      	ldr	r1, [sp, #16]
 801459a:	4620      	mov	r0, r4
 801459c:	f000 fc2e 	bl	8014dfc <__lshift>
 80145a0:	4639      	mov	r1, r7
 80145a2:	9004      	str	r0, [sp, #16]
 80145a4:	f000 fc7e 	bl	8014ea4 <__mcmp>
 80145a8:	2800      	cmp	r0, #0
 80145aa:	dcb6      	bgt.n	801451a <_dtoa_r+0xa42>
 80145ac:	d102      	bne.n	80145b4 <_dtoa_r+0xadc>
 80145ae:	f018 0f01 	tst.w	r8, #1
 80145b2:	d1b2      	bne.n	801451a <_dtoa_r+0xa42>
 80145b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80145b8:	2b30      	cmp	r3, #48	; 0x30
 80145ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80145be:	f47f af0a 	bne.w	80143d6 <_dtoa_r+0x8fe>
 80145c2:	4615      	mov	r5, r2
 80145c4:	e7f6      	b.n	80145b4 <_dtoa_r+0xadc>
 80145c6:	4593      	cmp	fp, r2
 80145c8:	d105      	bne.n	80145d6 <_dtoa_r+0xafe>
 80145ca:	2331      	movs	r3, #49	; 0x31
 80145cc:	f10a 0a01 	add.w	sl, sl, #1
 80145d0:	f88b 3000 	strb.w	r3, [fp]
 80145d4:	e6ff      	b.n	80143d6 <_dtoa_r+0x8fe>
 80145d6:	4615      	mov	r5, r2
 80145d8:	e79f      	b.n	801451a <_dtoa_r+0xa42>
 80145da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014640 <_dtoa_r+0xb68>
 80145de:	e007      	b.n	80145f0 <_dtoa_r+0xb18>
 80145e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014644 <_dtoa_r+0xb6c>
 80145e6:	b11b      	cbz	r3, 80145f0 <_dtoa_r+0xb18>
 80145e8:	f10b 0308 	add.w	r3, fp, #8
 80145ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145ee:	6013      	str	r3, [r2, #0]
 80145f0:	4658      	mov	r0, fp
 80145f2:	b017      	add	sp, #92	; 0x5c
 80145f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f8:	9b06      	ldr	r3, [sp, #24]
 80145fa:	2b01      	cmp	r3, #1
 80145fc:	f77f ae35 	ble.w	801426a <_dtoa_r+0x792>
 8014600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014602:	9307      	str	r3, [sp, #28]
 8014604:	e649      	b.n	801429a <_dtoa_r+0x7c2>
 8014606:	9b02      	ldr	r3, [sp, #8]
 8014608:	2b00      	cmp	r3, #0
 801460a:	dc03      	bgt.n	8014614 <_dtoa_r+0xb3c>
 801460c:	9b06      	ldr	r3, [sp, #24]
 801460e:	2b02      	cmp	r3, #2
 8014610:	f73f aecc 	bgt.w	80143ac <_dtoa_r+0x8d4>
 8014614:	465d      	mov	r5, fp
 8014616:	4639      	mov	r1, r7
 8014618:	9804      	ldr	r0, [sp, #16]
 801461a:	f7ff f9cf 	bl	80139bc <quorem>
 801461e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014622:	f805 8b01 	strb.w	r8, [r5], #1
 8014626:	9a02      	ldr	r2, [sp, #8]
 8014628:	eba5 030b 	sub.w	r3, r5, fp
 801462c:	429a      	cmp	r2, r3
 801462e:	ddb0      	ble.n	8014592 <_dtoa_r+0xaba>
 8014630:	2300      	movs	r3, #0
 8014632:	220a      	movs	r2, #10
 8014634:	9904      	ldr	r1, [sp, #16]
 8014636:	4620      	mov	r0, r4
 8014638:	f000 fa6a 	bl	8014b10 <__multadd>
 801463c:	9004      	str	r0, [sp, #16]
 801463e:	e7ea      	b.n	8014616 <_dtoa_r+0xb3e>
 8014640:	08018709 	.word	0x08018709
 8014644:	0801872d 	.word	0x0801872d

08014648 <__sflush_r>:
 8014648:	898a      	ldrh	r2, [r1, #12]
 801464a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801464e:	4605      	mov	r5, r0
 8014650:	0710      	lsls	r0, r2, #28
 8014652:	460c      	mov	r4, r1
 8014654:	d458      	bmi.n	8014708 <__sflush_r+0xc0>
 8014656:	684b      	ldr	r3, [r1, #4]
 8014658:	2b00      	cmp	r3, #0
 801465a:	dc05      	bgt.n	8014668 <__sflush_r+0x20>
 801465c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801465e:	2b00      	cmp	r3, #0
 8014660:	dc02      	bgt.n	8014668 <__sflush_r+0x20>
 8014662:	2000      	movs	r0, #0
 8014664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801466a:	2e00      	cmp	r6, #0
 801466c:	d0f9      	beq.n	8014662 <__sflush_r+0x1a>
 801466e:	2300      	movs	r3, #0
 8014670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014674:	682f      	ldr	r7, [r5, #0]
 8014676:	6a21      	ldr	r1, [r4, #32]
 8014678:	602b      	str	r3, [r5, #0]
 801467a:	d032      	beq.n	80146e2 <__sflush_r+0x9a>
 801467c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801467e:	89a3      	ldrh	r3, [r4, #12]
 8014680:	075a      	lsls	r2, r3, #29
 8014682:	d505      	bpl.n	8014690 <__sflush_r+0x48>
 8014684:	6863      	ldr	r3, [r4, #4]
 8014686:	1ac0      	subs	r0, r0, r3
 8014688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801468a:	b10b      	cbz	r3, 8014690 <__sflush_r+0x48>
 801468c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801468e:	1ac0      	subs	r0, r0, r3
 8014690:	2300      	movs	r3, #0
 8014692:	4602      	mov	r2, r0
 8014694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014696:	6a21      	ldr	r1, [r4, #32]
 8014698:	4628      	mov	r0, r5
 801469a:	47b0      	blx	r6
 801469c:	1c43      	adds	r3, r0, #1
 801469e:	89a3      	ldrh	r3, [r4, #12]
 80146a0:	d106      	bne.n	80146b0 <__sflush_r+0x68>
 80146a2:	6829      	ldr	r1, [r5, #0]
 80146a4:	291d      	cmp	r1, #29
 80146a6:	d848      	bhi.n	801473a <__sflush_r+0xf2>
 80146a8:	4a29      	ldr	r2, [pc, #164]	; (8014750 <__sflush_r+0x108>)
 80146aa:	40ca      	lsrs	r2, r1
 80146ac:	07d6      	lsls	r6, r2, #31
 80146ae:	d544      	bpl.n	801473a <__sflush_r+0xf2>
 80146b0:	2200      	movs	r2, #0
 80146b2:	6062      	str	r2, [r4, #4]
 80146b4:	04d9      	lsls	r1, r3, #19
 80146b6:	6922      	ldr	r2, [r4, #16]
 80146b8:	6022      	str	r2, [r4, #0]
 80146ba:	d504      	bpl.n	80146c6 <__sflush_r+0x7e>
 80146bc:	1c42      	adds	r2, r0, #1
 80146be:	d101      	bne.n	80146c4 <__sflush_r+0x7c>
 80146c0:	682b      	ldr	r3, [r5, #0]
 80146c2:	b903      	cbnz	r3, 80146c6 <__sflush_r+0x7e>
 80146c4:	6560      	str	r0, [r4, #84]	; 0x54
 80146c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146c8:	602f      	str	r7, [r5, #0]
 80146ca:	2900      	cmp	r1, #0
 80146cc:	d0c9      	beq.n	8014662 <__sflush_r+0x1a>
 80146ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146d2:	4299      	cmp	r1, r3
 80146d4:	d002      	beq.n	80146dc <__sflush_r+0x94>
 80146d6:	4628      	mov	r0, r5
 80146d8:	f7fe f98a 	bl	80129f0 <_free_r>
 80146dc:	2000      	movs	r0, #0
 80146de:	6360      	str	r0, [r4, #52]	; 0x34
 80146e0:	e7c0      	b.n	8014664 <__sflush_r+0x1c>
 80146e2:	2301      	movs	r3, #1
 80146e4:	4628      	mov	r0, r5
 80146e6:	47b0      	blx	r6
 80146e8:	1c41      	adds	r1, r0, #1
 80146ea:	d1c8      	bne.n	801467e <__sflush_r+0x36>
 80146ec:	682b      	ldr	r3, [r5, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d0c5      	beq.n	801467e <__sflush_r+0x36>
 80146f2:	2b1d      	cmp	r3, #29
 80146f4:	d001      	beq.n	80146fa <__sflush_r+0xb2>
 80146f6:	2b16      	cmp	r3, #22
 80146f8:	d101      	bne.n	80146fe <__sflush_r+0xb6>
 80146fa:	602f      	str	r7, [r5, #0]
 80146fc:	e7b1      	b.n	8014662 <__sflush_r+0x1a>
 80146fe:	89a3      	ldrh	r3, [r4, #12]
 8014700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014704:	81a3      	strh	r3, [r4, #12]
 8014706:	e7ad      	b.n	8014664 <__sflush_r+0x1c>
 8014708:	690f      	ldr	r7, [r1, #16]
 801470a:	2f00      	cmp	r7, #0
 801470c:	d0a9      	beq.n	8014662 <__sflush_r+0x1a>
 801470e:	0793      	lsls	r3, r2, #30
 8014710:	680e      	ldr	r6, [r1, #0]
 8014712:	bf08      	it	eq
 8014714:	694b      	ldreq	r3, [r1, #20]
 8014716:	600f      	str	r7, [r1, #0]
 8014718:	bf18      	it	ne
 801471a:	2300      	movne	r3, #0
 801471c:	eba6 0807 	sub.w	r8, r6, r7
 8014720:	608b      	str	r3, [r1, #8]
 8014722:	f1b8 0f00 	cmp.w	r8, #0
 8014726:	dd9c      	ble.n	8014662 <__sflush_r+0x1a>
 8014728:	4643      	mov	r3, r8
 801472a:	463a      	mov	r2, r7
 801472c:	6a21      	ldr	r1, [r4, #32]
 801472e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014730:	4628      	mov	r0, r5
 8014732:	47b0      	blx	r6
 8014734:	2800      	cmp	r0, #0
 8014736:	dc06      	bgt.n	8014746 <__sflush_r+0xfe>
 8014738:	89a3      	ldrh	r3, [r4, #12]
 801473a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801473e:	81a3      	strh	r3, [r4, #12]
 8014740:	f04f 30ff 	mov.w	r0, #4294967295
 8014744:	e78e      	b.n	8014664 <__sflush_r+0x1c>
 8014746:	4407      	add	r7, r0
 8014748:	eba8 0800 	sub.w	r8, r8, r0
 801474c:	e7e9      	b.n	8014722 <__sflush_r+0xda>
 801474e:	bf00      	nop
 8014750:	20400001 	.word	0x20400001

08014754 <_fflush_r>:
 8014754:	b538      	push	{r3, r4, r5, lr}
 8014756:	690b      	ldr	r3, [r1, #16]
 8014758:	4605      	mov	r5, r0
 801475a:	460c      	mov	r4, r1
 801475c:	b1db      	cbz	r3, 8014796 <_fflush_r+0x42>
 801475e:	b118      	cbz	r0, 8014768 <_fflush_r+0x14>
 8014760:	6983      	ldr	r3, [r0, #24]
 8014762:	b90b      	cbnz	r3, 8014768 <_fflush_r+0x14>
 8014764:	f000 f860 	bl	8014828 <__sinit>
 8014768:	4b0c      	ldr	r3, [pc, #48]	; (801479c <_fflush_r+0x48>)
 801476a:	429c      	cmp	r4, r3
 801476c:	d109      	bne.n	8014782 <_fflush_r+0x2e>
 801476e:	686c      	ldr	r4, [r5, #4]
 8014770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014774:	b17b      	cbz	r3, 8014796 <_fflush_r+0x42>
 8014776:	4621      	mov	r1, r4
 8014778:	4628      	mov	r0, r5
 801477a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801477e:	f7ff bf63 	b.w	8014648 <__sflush_r>
 8014782:	4b07      	ldr	r3, [pc, #28]	; (80147a0 <_fflush_r+0x4c>)
 8014784:	429c      	cmp	r4, r3
 8014786:	d101      	bne.n	801478c <_fflush_r+0x38>
 8014788:	68ac      	ldr	r4, [r5, #8]
 801478a:	e7f1      	b.n	8014770 <_fflush_r+0x1c>
 801478c:	4b05      	ldr	r3, [pc, #20]	; (80147a4 <_fflush_r+0x50>)
 801478e:	429c      	cmp	r4, r3
 8014790:	bf08      	it	eq
 8014792:	68ec      	ldreq	r4, [r5, #12]
 8014794:	e7ec      	b.n	8014770 <_fflush_r+0x1c>
 8014796:	2000      	movs	r0, #0
 8014798:	bd38      	pop	{r3, r4, r5, pc}
 801479a:	bf00      	nop
 801479c:	0801875c 	.word	0x0801875c
 80147a0:	0801877c 	.word	0x0801877c
 80147a4:	0801873c 	.word	0x0801873c

080147a8 <std>:
 80147a8:	2300      	movs	r3, #0
 80147aa:	b510      	push	{r4, lr}
 80147ac:	4604      	mov	r4, r0
 80147ae:	e9c0 3300 	strd	r3, r3, [r0]
 80147b2:	6083      	str	r3, [r0, #8]
 80147b4:	8181      	strh	r1, [r0, #12]
 80147b6:	6643      	str	r3, [r0, #100]	; 0x64
 80147b8:	81c2      	strh	r2, [r0, #14]
 80147ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147be:	6183      	str	r3, [r0, #24]
 80147c0:	4619      	mov	r1, r3
 80147c2:	2208      	movs	r2, #8
 80147c4:	305c      	adds	r0, #92	; 0x5c
 80147c6:	f7fe f90a 	bl	80129de <memset>
 80147ca:	4b05      	ldr	r3, [pc, #20]	; (80147e0 <std+0x38>)
 80147cc:	6263      	str	r3, [r4, #36]	; 0x24
 80147ce:	4b05      	ldr	r3, [pc, #20]	; (80147e4 <std+0x3c>)
 80147d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80147d2:	4b05      	ldr	r3, [pc, #20]	; (80147e8 <std+0x40>)
 80147d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80147d6:	4b05      	ldr	r3, [pc, #20]	; (80147ec <std+0x44>)
 80147d8:	6224      	str	r4, [r4, #32]
 80147da:	6323      	str	r3, [r4, #48]	; 0x30
 80147dc:	bd10      	pop	{r4, pc}
 80147de:	bf00      	nop
 80147e0:	08013761 	.word	0x08013761
 80147e4:	08013783 	.word	0x08013783
 80147e8:	080137bb 	.word	0x080137bb
 80147ec:	080137df 	.word	0x080137df

080147f0 <_cleanup_r>:
 80147f0:	4901      	ldr	r1, [pc, #4]	; (80147f8 <_cleanup_r+0x8>)
 80147f2:	f000 b885 	b.w	8014900 <_fwalk_reent>
 80147f6:	bf00      	nop
 80147f8:	08014755 	.word	0x08014755

080147fc <__sfmoreglue>:
 80147fc:	b570      	push	{r4, r5, r6, lr}
 80147fe:	1e4a      	subs	r2, r1, #1
 8014800:	2568      	movs	r5, #104	; 0x68
 8014802:	4355      	muls	r5, r2
 8014804:	460e      	mov	r6, r1
 8014806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801480a:	f7fe f93f 	bl	8012a8c <_malloc_r>
 801480e:	4604      	mov	r4, r0
 8014810:	b140      	cbz	r0, 8014824 <__sfmoreglue+0x28>
 8014812:	2100      	movs	r1, #0
 8014814:	e9c0 1600 	strd	r1, r6, [r0]
 8014818:	300c      	adds	r0, #12
 801481a:	60a0      	str	r0, [r4, #8]
 801481c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014820:	f7fe f8dd 	bl	80129de <memset>
 8014824:	4620      	mov	r0, r4
 8014826:	bd70      	pop	{r4, r5, r6, pc}

08014828 <__sinit>:
 8014828:	6983      	ldr	r3, [r0, #24]
 801482a:	b510      	push	{r4, lr}
 801482c:	4604      	mov	r4, r0
 801482e:	bb33      	cbnz	r3, 801487e <__sinit+0x56>
 8014830:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014834:	6503      	str	r3, [r0, #80]	; 0x50
 8014836:	4b12      	ldr	r3, [pc, #72]	; (8014880 <__sinit+0x58>)
 8014838:	4a12      	ldr	r2, [pc, #72]	; (8014884 <__sinit+0x5c>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	6282      	str	r2, [r0, #40]	; 0x28
 801483e:	4298      	cmp	r0, r3
 8014840:	bf04      	itt	eq
 8014842:	2301      	moveq	r3, #1
 8014844:	6183      	streq	r3, [r0, #24]
 8014846:	f000 f81f 	bl	8014888 <__sfp>
 801484a:	6060      	str	r0, [r4, #4]
 801484c:	4620      	mov	r0, r4
 801484e:	f000 f81b 	bl	8014888 <__sfp>
 8014852:	60a0      	str	r0, [r4, #8]
 8014854:	4620      	mov	r0, r4
 8014856:	f000 f817 	bl	8014888 <__sfp>
 801485a:	2200      	movs	r2, #0
 801485c:	60e0      	str	r0, [r4, #12]
 801485e:	2104      	movs	r1, #4
 8014860:	6860      	ldr	r0, [r4, #4]
 8014862:	f7ff ffa1 	bl	80147a8 <std>
 8014866:	2201      	movs	r2, #1
 8014868:	2109      	movs	r1, #9
 801486a:	68a0      	ldr	r0, [r4, #8]
 801486c:	f7ff ff9c 	bl	80147a8 <std>
 8014870:	2202      	movs	r2, #2
 8014872:	2112      	movs	r1, #18
 8014874:	68e0      	ldr	r0, [r4, #12]
 8014876:	f7ff ff97 	bl	80147a8 <std>
 801487a:	2301      	movs	r3, #1
 801487c:	61a3      	str	r3, [r4, #24]
 801487e:	bd10      	pop	{r4, pc}
 8014880:	080186e4 	.word	0x080186e4
 8014884:	080147f1 	.word	0x080147f1

08014888 <__sfp>:
 8014888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801488a:	4b1b      	ldr	r3, [pc, #108]	; (80148f8 <__sfp+0x70>)
 801488c:	681e      	ldr	r6, [r3, #0]
 801488e:	69b3      	ldr	r3, [r6, #24]
 8014890:	4607      	mov	r7, r0
 8014892:	b913      	cbnz	r3, 801489a <__sfp+0x12>
 8014894:	4630      	mov	r0, r6
 8014896:	f7ff ffc7 	bl	8014828 <__sinit>
 801489a:	3648      	adds	r6, #72	; 0x48
 801489c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80148a0:	3b01      	subs	r3, #1
 80148a2:	d503      	bpl.n	80148ac <__sfp+0x24>
 80148a4:	6833      	ldr	r3, [r6, #0]
 80148a6:	b133      	cbz	r3, 80148b6 <__sfp+0x2e>
 80148a8:	6836      	ldr	r6, [r6, #0]
 80148aa:	e7f7      	b.n	801489c <__sfp+0x14>
 80148ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80148b0:	b16d      	cbz	r5, 80148ce <__sfp+0x46>
 80148b2:	3468      	adds	r4, #104	; 0x68
 80148b4:	e7f4      	b.n	80148a0 <__sfp+0x18>
 80148b6:	2104      	movs	r1, #4
 80148b8:	4638      	mov	r0, r7
 80148ba:	f7ff ff9f 	bl	80147fc <__sfmoreglue>
 80148be:	6030      	str	r0, [r6, #0]
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d1f1      	bne.n	80148a8 <__sfp+0x20>
 80148c4:	230c      	movs	r3, #12
 80148c6:	603b      	str	r3, [r7, #0]
 80148c8:	4604      	mov	r4, r0
 80148ca:	4620      	mov	r0, r4
 80148cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ce:	4b0b      	ldr	r3, [pc, #44]	; (80148fc <__sfp+0x74>)
 80148d0:	6665      	str	r5, [r4, #100]	; 0x64
 80148d2:	e9c4 5500 	strd	r5, r5, [r4]
 80148d6:	60a5      	str	r5, [r4, #8]
 80148d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80148dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80148e0:	2208      	movs	r2, #8
 80148e2:	4629      	mov	r1, r5
 80148e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80148e8:	f7fe f879 	bl	80129de <memset>
 80148ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80148f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80148f4:	e7e9      	b.n	80148ca <__sfp+0x42>
 80148f6:	bf00      	nop
 80148f8:	080186e4 	.word	0x080186e4
 80148fc:	ffff0001 	.word	0xffff0001

08014900 <_fwalk_reent>:
 8014900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014904:	4680      	mov	r8, r0
 8014906:	4689      	mov	r9, r1
 8014908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801490c:	2600      	movs	r6, #0
 801490e:	b914      	cbnz	r4, 8014916 <_fwalk_reent+0x16>
 8014910:	4630      	mov	r0, r6
 8014912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014916:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801491a:	3f01      	subs	r7, #1
 801491c:	d501      	bpl.n	8014922 <_fwalk_reent+0x22>
 801491e:	6824      	ldr	r4, [r4, #0]
 8014920:	e7f5      	b.n	801490e <_fwalk_reent+0xe>
 8014922:	89ab      	ldrh	r3, [r5, #12]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d907      	bls.n	8014938 <_fwalk_reent+0x38>
 8014928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801492c:	3301      	adds	r3, #1
 801492e:	d003      	beq.n	8014938 <_fwalk_reent+0x38>
 8014930:	4629      	mov	r1, r5
 8014932:	4640      	mov	r0, r8
 8014934:	47c8      	blx	r9
 8014936:	4306      	orrs	r6, r0
 8014938:	3568      	adds	r5, #104	; 0x68
 801493a:	e7ee      	b.n	801491a <_fwalk_reent+0x1a>

0801493c <_localeconv_r>:
 801493c:	4b04      	ldr	r3, [pc, #16]	; (8014950 <_localeconv_r+0x14>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	6a18      	ldr	r0, [r3, #32]
 8014942:	4b04      	ldr	r3, [pc, #16]	; (8014954 <_localeconv_r+0x18>)
 8014944:	2800      	cmp	r0, #0
 8014946:	bf08      	it	eq
 8014948:	4618      	moveq	r0, r3
 801494a:	30f0      	adds	r0, #240	; 0xf0
 801494c:	4770      	bx	lr
 801494e:	bf00      	nop
 8014950:	20000434 	.word	0x20000434
 8014954:	20000498 	.word	0x20000498

08014958 <_lseek_r>:
 8014958:	b538      	push	{r3, r4, r5, lr}
 801495a:	4c07      	ldr	r4, [pc, #28]	; (8014978 <_lseek_r+0x20>)
 801495c:	4605      	mov	r5, r0
 801495e:	4608      	mov	r0, r1
 8014960:	4611      	mov	r1, r2
 8014962:	2200      	movs	r2, #0
 8014964:	6022      	str	r2, [r4, #0]
 8014966:	461a      	mov	r2, r3
 8014968:	f7f0 ff22 	bl	80057b0 <_lseek>
 801496c:	1c43      	adds	r3, r0, #1
 801496e:	d102      	bne.n	8014976 <_lseek_r+0x1e>
 8014970:	6823      	ldr	r3, [r4, #0]
 8014972:	b103      	cbz	r3, 8014976 <_lseek_r+0x1e>
 8014974:	602b      	str	r3, [r5, #0]
 8014976:	bd38      	pop	{r3, r4, r5, pc}
 8014978:	200067cc 	.word	0x200067cc

0801497c <__swhatbuf_r>:
 801497c:	b570      	push	{r4, r5, r6, lr}
 801497e:	460e      	mov	r6, r1
 8014980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014984:	2900      	cmp	r1, #0
 8014986:	b096      	sub	sp, #88	; 0x58
 8014988:	4614      	mov	r4, r2
 801498a:	461d      	mov	r5, r3
 801498c:	da07      	bge.n	801499e <__swhatbuf_r+0x22>
 801498e:	2300      	movs	r3, #0
 8014990:	602b      	str	r3, [r5, #0]
 8014992:	89b3      	ldrh	r3, [r6, #12]
 8014994:	061a      	lsls	r2, r3, #24
 8014996:	d410      	bmi.n	80149ba <__swhatbuf_r+0x3e>
 8014998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801499c:	e00e      	b.n	80149bc <__swhatbuf_r+0x40>
 801499e:	466a      	mov	r2, sp
 80149a0:	f000 fd22 	bl	80153e8 <_fstat_r>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	dbf2      	blt.n	801498e <__swhatbuf_r+0x12>
 80149a8:	9a01      	ldr	r2, [sp, #4]
 80149aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80149ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80149b2:	425a      	negs	r2, r3
 80149b4:	415a      	adcs	r2, r3
 80149b6:	602a      	str	r2, [r5, #0]
 80149b8:	e7ee      	b.n	8014998 <__swhatbuf_r+0x1c>
 80149ba:	2340      	movs	r3, #64	; 0x40
 80149bc:	2000      	movs	r0, #0
 80149be:	6023      	str	r3, [r4, #0]
 80149c0:	b016      	add	sp, #88	; 0x58
 80149c2:	bd70      	pop	{r4, r5, r6, pc}

080149c4 <__smakebuf_r>:
 80149c4:	898b      	ldrh	r3, [r1, #12]
 80149c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80149c8:	079d      	lsls	r5, r3, #30
 80149ca:	4606      	mov	r6, r0
 80149cc:	460c      	mov	r4, r1
 80149ce:	d507      	bpl.n	80149e0 <__smakebuf_r+0x1c>
 80149d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	6123      	str	r3, [r4, #16]
 80149d8:	2301      	movs	r3, #1
 80149da:	6163      	str	r3, [r4, #20]
 80149dc:	b002      	add	sp, #8
 80149de:	bd70      	pop	{r4, r5, r6, pc}
 80149e0:	ab01      	add	r3, sp, #4
 80149e2:	466a      	mov	r2, sp
 80149e4:	f7ff ffca 	bl	801497c <__swhatbuf_r>
 80149e8:	9900      	ldr	r1, [sp, #0]
 80149ea:	4605      	mov	r5, r0
 80149ec:	4630      	mov	r0, r6
 80149ee:	f7fe f84d 	bl	8012a8c <_malloc_r>
 80149f2:	b948      	cbnz	r0, 8014a08 <__smakebuf_r+0x44>
 80149f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149f8:	059a      	lsls	r2, r3, #22
 80149fa:	d4ef      	bmi.n	80149dc <__smakebuf_r+0x18>
 80149fc:	f023 0303 	bic.w	r3, r3, #3
 8014a00:	f043 0302 	orr.w	r3, r3, #2
 8014a04:	81a3      	strh	r3, [r4, #12]
 8014a06:	e7e3      	b.n	80149d0 <__smakebuf_r+0xc>
 8014a08:	4b0d      	ldr	r3, [pc, #52]	; (8014a40 <__smakebuf_r+0x7c>)
 8014a0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a0c:	89a3      	ldrh	r3, [r4, #12]
 8014a0e:	6020      	str	r0, [r4, #0]
 8014a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a14:	81a3      	strh	r3, [r4, #12]
 8014a16:	9b00      	ldr	r3, [sp, #0]
 8014a18:	6163      	str	r3, [r4, #20]
 8014a1a:	9b01      	ldr	r3, [sp, #4]
 8014a1c:	6120      	str	r0, [r4, #16]
 8014a1e:	b15b      	cbz	r3, 8014a38 <__smakebuf_r+0x74>
 8014a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a24:	4630      	mov	r0, r6
 8014a26:	f000 fcf1 	bl	801540c <_isatty_r>
 8014a2a:	b128      	cbz	r0, 8014a38 <__smakebuf_r+0x74>
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	f023 0303 	bic.w	r3, r3, #3
 8014a32:	f043 0301 	orr.w	r3, r3, #1
 8014a36:	81a3      	strh	r3, [r4, #12]
 8014a38:	89a3      	ldrh	r3, [r4, #12]
 8014a3a:	431d      	orrs	r5, r3
 8014a3c:	81a5      	strh	r5, [r4, #12]
 8014a3e:	e7cd      	b.n	80149dc <__smakebuf_r+0x18>
 8014a40:	080147f1 	.word	0x080147f1

08014a44 <memmove>:
 8014a44:	4288      	cmp	r0, r1
 8014a46:	b510      	push	{r4, lr}
 8014a48:	eb01 0302 	add.w	r3, r1, r2
 8014a4c:	d807      	bhi.n	8014a5e <memmove+0x1a>
 8014a4e:	1e42      	subs	r2, r0, #1
 8014a50:	4299      	cmp	r1, r3
 8014a52:	d00a      	beq.n	8014a6a <memmove+0x26>
 8014a54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014a5c:	e7f8      	b.n	8014a50 <memmove+0xc>
 8014a5e:	4283      	cmp	r3, r0
 8014a60:	d9f5      	bls.n	8014a4e <memmove+0xa>
 8014a62:	1881      	adds	r1, r0, r2
 8014a64:	1ad2      	subs	r2, r2, r3
 8014a66:	42d3      	cmn	r3, r2
 8014a68:	d100      	bne.n	8014a6c <memmove+0x28>
 8014a6a:	bd10      	pop	{r4, pc}
 8014a6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014a74:	e7f7      	b.n	8014a66 <memmove+0x22>

08014a76 <__malloc_lock>:
 8014a76:	4770      	bx	lr

08014a78 <__malloc_unlock>:
 8014a78:	4770      	bx	lr

08014a7a <_Balloc>:
 8014a7a:	b570      	push	{r4, r5, r6, lr}
 8014a7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014a7e:	4604      	mov	r4, r0
 8014a80:	460e      	mov	r6, r1
 8014a82:	b93d      	cbnz	r5, 8014a94 <_Balloc+0x1a>
 8014a84:	2010      	movs	r0, #16
 8014a86:	f7fd ff8f 	bl	80129a8 <malloc>
 8014a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8014a8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014a90:	6005      	str	r5, [r0, #0]
 8014a92:	60c5      	str	r5, [r0, #12]
 8014a94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014a96:	68eb      	ldr	r3, [r5, #12]
 8014a98:	b183      	cbz	r3, 8014abc <_Balloc+0x42>
 8014a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a9c:	68db      	ldr	r3, [r3, #12]
 8014a9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014aa2:	b9b8      	cbnz	r0, 8014ad4 <_Balloc+0x5a>
 8014aa4:	2101      	movs	r1, #1
 8014aa6:	fa01 f506 	lsl.w	r5, r1, r6
 8014aaa:	1d6a      	adds	r2, r5, #5
 8014aac:	0092      	lsls	r2, r2, #2
 8014aae:	4620      	mov	r0, r4
 8014ab0:	f000 fabe 	bl	8015030 <_calloc_r>
 8014ab4:	b160      	cbz	r0, 8014ad0 <_Balloc+0x56>
 8014ab6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014aba:	e00e      	b.n	8014ada <_Balloc+0x60>
 8014abc:	2221      	movs	r2, #33	; 0x21
 8014abe:	2104      	movs	r1, #4
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	f000 fab5 	bl	8015030 <_calloc_r>
 8014ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ac8:	60e8      	str	r0, [r5, #12]
 8014aca:	68db      	ldr	r3, [r3, #12]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d1e4      	bne.n	8014a9a <_Balloc+0x20>
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	bd70      	pop	{r4, r5, r6, pc}
 8014ad4:	6802      	ldr	r2, [r0, #0]
 8014ad6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014ada:	2300      	movs	r3, #0
 8014adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ae0:	e7f7      	b.n	8014ad2 <_Balloc+0x58>

08014ae2 <_Bfree>:
 8014ae2:	b570      	push	{r4, r5, r6, lr}
 8014ae4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014ae6:	4606      	mov	r6, r0
 8014ae8:	460d      	mov	r5, r1
 8014aea:	b93c      	cbnz	r4, 8014afc <_Bfree+0x1a>
 8014aec:	2010      	movs	r0, #16
 8014aee:	f7fd ff5b 	bl	80129a8 <malloc>
 8014af2:	6270      	str	r0, [r6, #36]	; 0x24
 8014af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014af8:	6004      	str	r4, [r0, #0]
 8014afa:	60c4      	str	r4, [r0, #12]
 8014afc:	b13d      	cbz	r5, 8014b0e <_Bfree+0x2c>
 8014afe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014b00:	686a      	ldr	r2, [r5, #4]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b08:	6029      	str	r1, [r5, #0]
 8014b0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014b0e:	bd70      	pop	{r4, r5, r6, pc}

08014b10 <__multadd>:
 8014b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b14:	690d      	ldr	r5, [r1, #16]
 8014b16:	461f      	mov	r7, r3
 8014b18:	4606      	mov	r6, r0
 8014b1a:	460c      	mov	r4, r1
 8014b1c:	f101 0c14 	add.w	ip, r1, #20
 8014b20:	2300      	movs	r3, #0
 8014b22:	f8dc 0000 	ldr.w	r0, [ip]
 8014b26:	b281      	uxth	r1, r0
 8014b28:	fb02 7101 	mla	r1, r2, r1, r7
 8014b2c:	0c0f      	lsrs	r7, r1, #16
 8014b2e:	0c00      	lsrs	r0, r0, #16
 8014b30:	fb02 7000 	mla	r0, r2, r0, r7
 8014b34:	b289      	uxth	r1, r1
 8014b36:	3301      	adds	r3, #1
 8014b38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014b3c:	429d      	cmp	r5, r3
 8014b3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014b42:	f84c 1b04 	str.w	r1, [ip], #4
 8014b46:	dcec      	bgt.n	8014b22 <__multadd+0x12>
 8014b48:	b1d7      	cbz	r7, 8014b80 <__multadd+0x70>
 8014b4a:	68a3      	ldr	r3, [r4, #8]
 8014b4c:	42ab      	cmp	r3, r5
 8014b4e:	dc12      	bgt.n	8014b76 <__multadd+0x66>
 8014b50:	6861      	ldr	r1, [r4, #4]
 8014b52:	4630      	mov	r0, r6
 8014b54:	3101      	adds	r1, #1
 8014b56:	f7ff ff90 	bl	8014a7a <_Balloc>
 8014b5a:	6922      	ldr	r2, [r4, #16]
 8014b5c:	3202      	adds	r2, #2
 8014b5e:	f104 010c 	add.w	r1, r4, #12
 8014b62:	4680      	mov	r8, r0
 8014b64:	0092      	lsls	r2, r2, #2
 8014b66:	300c      	adds	r0, #12
 8014b68:	f7fd ff2e 	bl	80129c8 <memcpy>
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	4630      	mov	r0, r6
 8014b70:	f7ff ffb7 	bl	8014ae2 <_Bfree>
 8014b74:	4644      	mov	r4, r8
 8014b76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014b7a:	3501      	adds	r5, #1
 8014b7c:	615f      	str	r7, [r3, #20]
 8014b7e:	6125      	str	r5, [r4, #16]
 8014b80:	4620      	mov	r0, r4
 8014b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b86 <__hi0bits>:
 8014b86:	0c02      	lsrs	r2, r0, #16
 8014b88:	0412      	lsls	r2, r2, #16
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	b9b2      	cbnz	r2, 8014bbc <__hi0bits+0x36>
 8014b8e:	0403      	lsls	r3, r0, #16
 8014b90:	2010      	movs	r0, #16
 8014b92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014b96:	bf04      	itt	eq
 8014b98:	021b      	lsleq	r3, r3, #8
 8014b9a:	3008      	addeq	r0, #8
 8014b9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014ba0:	bf04      	itt	eq
 8014ba2:	011b      	lsleq	r3, r3, #4
 8014ba4:	3004      	addeq	r0, #4
 8014ba6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014baa:	bf04      	itt	eq
 8014bac:	009b      	lsleq	r3, r3, #2
 8014bae:	3002      	addeq	r0, #2
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	db06      	blt.n	8014bc2 <__hi0bits+0x3c>
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	d503      	bpl.n	8014bc0 <__hi0bits+0x3a>
 8014bb8:	3001      	adds	r0, #1
 8014bba:	4770      	bx	lr
 8014bbc:	2000      	movs	r0, #0
 8014bbe:	e7e8      	b.n	8014b92 <__hi0bits+0xc>
 8014bc0:	2020      	movs	r0, #32
 8014bc2:	4770      	bx	lr

08014bc4 <__lo0bits>:
 8014bc4:	6803      	ldr	r3, [r0, #0]
 8014bc6:	f013 0207 	ands.w	r2, r3, #7
 8014bca:	4601      	mov	r1, r0
 8014bcc:	d00b      	beq.n	8014be6 <__lo0bits+0x22>
 8014bce:	07da      	lsls	r2, r3, #31
 8014bd0:	d423      	bmi.n	8014c1a <__lo0bits+0x56>
 8014bd2:	0798      	lsls	r0, r3, #30
 8014bd4:	bf49      	itett	mi
 8014bd6:	085b      	lsrmi	r3, r3, #1
 8014bd8:	089b      	lsrpl	r3, r3, #2
 8014bda:	2001      	movmi	r0, #1
 8014bdc:	600b      	strmi	r3, [r1, #0]
 8014bde:	bf5c      	itt	pl
 8014be0:	600b      	strpl	r3, [r1, #0]
 8014be2:	2002      	movpl	r0, #2
 8014be4:	4770      	bx	lr
 8014be6:	b298      	uxth	r0, r3
 8014be8:	b9a8      	cbnz	r0, 8014c16 <__lo0bits+0x52>
 8014bea:	0c1b      	lsrs	r3, r3, #16
 8014bec:	2010      	movs	r0, #16
 8014bee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014bf2:	bf04      	itt	eq
 8014bf4:	0a1b      	lsreq	r3, r3, #8
 8014bf6:	3008      	addeq	r0, #8
 8014bf8:	071a      	lsls	r2, r3, #28
 8014bfa:	bf04      	itt	eq
 8014bfc:	091b      	lsreq	r3, r3, #4
 8014bfe:	3004      	addeq	r0, #4
 8014c00:	079a      	lsls	r2, r3, #30
 8014c02:	bf04      	itt	eq
 8014c04:	089b      	lsreq	r3, r3, #2
 8014c06:	3002      	addeq	r0, #2
 8014c08:	07da      	lsls	r2, r3, #31
 8014c0a:	d402      	bmi.n	8014c12 <__lo0bits+0x4e>
 8014c0c:	085b      	lsrs	r3, r3, #1
 8014c0e:	d006      	beq.n	8014c1e <__lo0bits+0x5a>
 8014c10:	3001      	adds	r0, #1
 8014c12:	600b      	str	r3, [r1, #0]
 8014c14:	4770      	bx	lr
 8014c16:	4610      	mov	r0, r2
 8014c18:	e7e9      	b.n	8014bee <__lo0bits+0x2a>
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	4770      	bx	lr
 8014c1e:	2020      	movs	r0, #32
 8014c20:	4770      	bx	lr

08014c22 <__i2b>:
 8014c22:	b510      	push	{r4, lr}
 8014c24:	460c      	mov	r4, r1
 8014c26:	2101      	movs	r1, #1
 8014c28:	f7ff ff27 	bl	8014a7a <_Balloc>
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	6144      	str	r4, [r0, #20]
 8014c30:	6102      	str	r2, [r0, #16]
 8014c32:	bd10      	pop	{r4, pc}

08014c34 <__multiply>:
 8014c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c38:	4614      	mov	r4, r2
 8014c3a:	690a      	ldr	r2, [r1, #16]
 8014c3c:	6923      	ldr	r3, [r4, #16]
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	bfb8      	it	lt
 8014c42:	460b      	movlt	r3, r1
 8014c44:	4688      	mov	r8, r1
 8014c46:	bfbc      	itt	lt
 8014c48:	46a0      	movlt	r8, r4
 8014c4a:	461c      	movlt	r4, r3
 8014c4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014c50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014c54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014c5c:	eb07 0609 	add.w	r6, r7, r9
 8014c60:	42b3      	cmp	r3, r6
 8014c62:	bfb8      	it	lt
 8014c64:	3101      	addlt	r1, #1
 8014c66:	f7ff ff08 	bl	8014a7a <_Balloc>
 8014c6a:	f100 0514 	add.w	r5, r0, #20
 8014c6e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014c72:	462b      	mov	r3, r5
 8014c74:	2200      	movs	r2, #0
 8014c76:	4573      	cmp	r3, lr
 8014c78:	d316      	bcc.n	8014ca8 <__multiply+0x74>
 8014c7a:	f104 0214 	add.w	r2, r4, #20
 8014c7e:	f108 0114 	add.w	r1, r8, #20
 8014c82:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014c86:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014c8a:	9300      	str	r3, [sp, #0]
 8014c8c:	9b00      	ldr	r3, [sp, #0]
 8014c8e:	9201      	str	r2, [sp, #4]
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d80c      	bhi.n	8014cae <__multiply+0x7a>
 8014c94:	2e00      	cmp	r6, #0
 8014c96:	dd03      	ble.n	8014ca0 <__multiply+0x6c>
 8014c98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d05d      	beq.n	8014d5c <__multiply+0x128>
 8014ca0:	6106      	str	r6, [r0, #16]
 8014ca2:	b003      	add	sp, #12
 8014ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca8:	f843 2b04 	str.w	r2, [r3], #4
 8014cac:	e7e3      	b.n	8014c76 <__multiply+0x42>
 8014cae:	f8b2 b000 	ldrh.w	fp, [r2]
 8014cb2:	f1bb 0f00 	cmp.w	fp, #0
 8014cb6:	d023      	beq.n	8014d00 <__multiply+0xcc>
 8014cb8:	4689      	mov	r9, r1
 8014cba:	46ac      	mov	ip, r5
 8014cbc:	f04f 0800 	mov.w	r8, #0
 8014cc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8014cc4:	f8dc a000 	ldr.w	sl, [ip]
 8014cc8:	b2a3      	uxth	r3, r4
 8014cca:	fa1f fa8a 	uxth.w	sl, sl
 8014cce:	fb0b a303 	mla	r3, fp, r3, sl
 8014cd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014cd6:	f8dc 4000 	ldr.w	r4, [ip]
 8014cda:	4443      	add	r3, r8
 8014cdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014ce0:	fb0b 840a 	mla	r4, fp, sl, r8
 8014ce4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014ce8:	46e2      	mov	sl, ip
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014cf0:	454f      	cmp	r7, r9
 8014cf2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014cf6:	f84a 3b04 	str.w	r3, [sl], #4
 8014cfa:	d82b      	bhi.n	8014d54 <__multiply+0x120>
 8014cfc:	f8cc 8004 	str.w	r8, [ip, #4]
 8014d00:	9b01      	ldr	r3, [sp, #4]
 8014d02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014d06:	3204      	adds	r2, #4
 8014d08:	f1ba 0f00 	cmp.w	sl, #0
 8014d0c:	d020      	beq.n	8014d50 <__multiply+0x11c>
 8014d0e:	682b      	ldr	r3, [r5, #0]
 8014d10:	4689      	mov	r9, r1
 8014d12:	46a8      	mov	r8, r5
 8014d14:	f04f 0b00 	mov.w	fp, #0
 8014d18:	f8b9 c000 	ldrh.w	ip, [r9]
 8014d1c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014d20:	fb0a 440c 	mla	r4, sl, ip, r4
 8014d24:	445c      	add	r4, fp
 8014d26:	46c4      	mov	ip, r8
 8014d28:	b29b      	uxth	r3, r3
 8014d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014d2e:	f84c 3b04 	str.w	r3, [ip], #4
 8014d32:	f859 3b04 	ldr.w	r3, [r9], #4
 8014d36:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014d3a:	0c1b      	lsrs	r3, r3, #16
 8014d3c:	fb0a b303 	mla	r3, sl, r3, fp
 8014d40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014d44:	454f      	cmp	r7, r9
 8014d46:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014d4a:	d805      	bhi.n	8014d58 <__multiply+0x124>
 8014d4c:	f8c8 3004 	str.w	r3, [r8, #4]
 8014d50:	3504      	adds	r5, #4
 8014d52:	e79b      	b.n	8014c8c <__multiply+0x58>
 8014d54:	46d4      	mov	ip, sl
 8014d56:	e7b3      	b.n	8014cc0 <__multiply+0x8c>
 8014d58:	46e0      	mov	r8, ip
 8014d5a:	e7dd      	b.n	8014d18 <__multiply+0xe4>
 8014d5c:	3e01      	subs	r6, #1
 8014d5e:	e799      	b.n	8014c94 <__multiply+0x60>

08014d60 <__pow5mult>:
 8014d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d64:	4615      	mov	r5, r2
 8014d66:	f012 0203 	ands.w	r2, r2, #3
 8014d6a:	4606      	mov	r6, r0
 8014d6c:	460f      	mov	r7, r1
 8014d6e:	d007      	beq.n	8014d80 <__pow5mult+0x20>
 8014d70:	3a01      	subs	r2, #1
 8014d72:	4c21      	ldr	r4, [pc, #132]	; (8014df8 <__pow5mult+0x98>)
 8014d74:	2300      	movs	r3, #0
 8014d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014d7a:	f7ff fec9 	bl	8014b10 <__multadd>
 8014d7e:	4607      	mov	r7, r0
 8014d80:	10ad      	asrs	r5, r5, #2
 8014d82:	d035      	beq.n	8014df0 <__pow5mult+0x90>
 8014d84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014d86:	b93c      	cbnz	r4, 8014d98 <__pow5mult+0x38>
 8014d88:	2010      	movs	r0, #16
 8014d8a:	f7fd fe0d 	bl	80129a8 <malloc>
 8014d8e:	6270      	str	r0, [r6, #36]	; 0x24
 8014d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d94:	6004      	str	r4, [r0, #0]
 8014d96:	60c4      	str	r4, [r0, #12]
 8014d98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014da0:	b94c      	cbnz	r4, 8014db6 <__pow5mult+0x56>
 8014da2:	f240 2171 	movw	r1, #625	; 0x271
 8014da6:	4630      	mov	r0, r6
 8014da8:	f7ff ff3b 	bl	8014c22 <__i2b>
 8014dac:	2300      	movs	r3, #0
 8014dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8014db2:	4604      	mov	r4, r0
 8014db4:	6003      	str	r3, [r0, #0]
 8014db6:	f04f 0800 	mov.w	r8, #0
 8014dba:	07eb      	lsls	r3, r5, #31
 8014dbc:	d50a      	bpl.n	8014dd4 <__pow5mult+0x74>
 8014dbe:	4639      	mov	r1, r7
 8014dc0:	4622      	mov	r2, r4
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	f7ff ff36 	bl	8014c34 <__multiply>
 8014dc8:	4639      	mov	r1, r7
 8014dca:	4681      	mov	r9, r0
 8014dcc:	4630      	mov	r0, r6
 8014dce:	f7ff fe88 	bl	8014ae2 <_Bfree>
 8014dd2:	464f      	mov	r7, r9
 8014dd4:	106d      	asrs	r5, r5, #1
 8014dd6:	d00b      	beq.n	8014df0 <__pow5mult+0x90>
 8014dd8:	6820      	ldr	r0, [r4, #0]
 8014dda:	b938      	cbnz	r0, 8014dec <__pow5mult+0x8c>
 8014ddc:	4622      	mov	r2, r4
 8014dde:	4621      	mov	r1, r4
 8014de0:	4630      	mov	r0, r6
 8014de2:	f7ff ff27 	bl	8014c34 <__multiply>
 8014de6:	6020      	str	r0, [r4, #0]
 8014de8:	f8c0 8000 	str.w	r8, [r0]
 8014dec:	4604      	mov	r4, r0
 8014dee:	e7e4      	b.n	8014dba <__pow5mult+0x5a>
 8014df0:	4638      	mov	r0, r7
 8014df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014df6:	bf00      	nop
 8014df8:	08018890 	.word	0x08018890

08014dfc <__lshift>:
 8014dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e00:	460c      	mov	r4, r1
 8014e02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014e06:	6923      	ldr	r3, [r4, #16]
 8014e08:	6849      	ldr	r1, [r1, #4]
 8014e0a:	eb0a 0903 	add.w	r9, sl, r3
 8014e0e:	68a3      	ldr	r3, [r4, #8]
 8014e10:	4607      	mov	r7, r0
 8014e12:	4616      	mov	r6, r2
 8014e14:	f109 0501 	add.w	r5, r9, #1
 8014e18:	42ab      	cmp	r3, r5
 8014e1a:	db32      	blt.n	8014e82 <__lshift+0x86>
 8014e1c:	4638      	mov	r0, r7
 8014e1e:	f7ff fe2c 	bl	8014a7a <_Balloc>
 8014e22:	2300      	movs	r3, #0
 8014e24:	4680      	mov	r8, r0
 8014e26:	f100 0114 	add.w	r1, r0, #20
 8014e2a:	461a      	mov	r2, r3
 8014e2c:	4553      	cmp	r3, sl
 8014e2e:	db2b      	blt.n	8014e88 <__lshift+0x8c>
 8014e30:	6920      	ldr	r0, [r4, #16]
 8014e32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e36:	f104 0314 	add.w	r3, r4, #20
 8014e3a:	f016 021f 	ands.w	r2, r6, #31
 8014e3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014e46:	d025      	beq.n	8014e94 <__lshift+0x98>
 8014e48:	f1c2 0e20 	rsb	lr, r2, #32
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	681e      	ldr	r6, [r3, #0]
 8014e50:	468a      	mov	sl, r1
 8014e52:	4096      	lsls	r6, r2
 8014e54:	4330      	orrs	r0, r6
 8014e56:	f84a 0b04 	str.w	r0, [sl], #4
 8014e5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8014e5e:	459c      	cmp	ip, r3
 8014e60:	fa20 f00e 	lsr.w	r0, r0, lr
 8014e64:	d814      	bhi.n	8014e90 <__lshift+0x94>
 8014e66:	6048      	str	r0, [r1, #4]
 8014e68:	b108      	cbz	r0, 8014e6e <__lshift+0x72>
 8014e6a:	f109 0502 	add.w	r5, r9, #2
 8014e6e:	3d01      	subs	r5, #1
 8014e70:	4638      	mov	r0, r7
 8014e72:	f8c8 5010 	str.w	r5, [r8, #16]
 8014e76:	4621      	mov	r1, r4
 8014e78:	f7ff fe33 	bl	8014ae2 <_Bfree>
 8014e7c:	4640      	mov	r0, r8
 8014e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e82:	3101      	adds	r1, #1
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	e7c7      	b.n	8014e18 <__lshift+0x1c>
 8014e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	e7cd      	b.n	8014e2c <__lshift+0x30>
 8014e90:	4651      	mov	r1, sl
 8014e92:	e7dc      	b.n	8014e4e <__lshift+0x52>
 8014e94:	3904      	subs	r1, #4
 8014e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8014e9e:	459c      	cmp	ip, r3
 8014ea0:	d8f9      	bhi.n	8014e96 <__lshift+0x9a>
 8014ea2:	e7e4      	b.n	8014e6e <__lshift+0x72>

08014ea4 <__mcmp>:
 8014ea4:	6903      	ldr	r3, [r0, #16]
 8014ea6:	690a      	ldr	r2, [r1, #16]
 8014ea8:	1a9b      	subs	r3, r3, r2
 8014eaa:	b530      	push	{r4, r5, lr}
 8014eac:	d10c      	bne.n	8014ec8 <__mcmp+0x24>
 8014eae:	0092      	lsls	r2, r2, #2
 8014eb0:	3014      	adds	r0, #20
 8014eb2:	3114      	adds	r1, #20
 8014eb4:	1884      	adds	r4, r0, r2
 8014eb6:	4411      	add	r1, r2
 8014eb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014ebc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014ec0:	4295      	cmp	r5, r2
 8014ec2:	d003      	beq.n	8014ecc <__mcmp+0x28>
 8014ec4:	d305      	bcc.n	8014ed2 <__mcmp+0x2e>
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	4618      	mov	r0, r3
 8014eca:	bd30      	pop	{r4, r5, pc}
 8014ecc:	42a0      	cmp	r0, r4
 8014ece:	d3f3      	bcc.n	8014eb8 <__mcmp+0x14>
 8014ed0:	e7fa      	b.n	8014ec8 <__mcmp+0x24>
 8014ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed6:	e7f7      	b.n	8014ec8 <__mcmp+0x24>

08014ed8 <__mdiff>:
 8014ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014edc:	460d      	mov	r5, r1
 8014ede:	4607      	mov	r7, r0
 8014ee0:	4611      	mov	r1, r2
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	4614      	mov	r4, r2
 8014ee6:	f7ff ffdd 	bl	8014ea4 <__mcmp>
 8014eea:	1e06      	subs	r6, r0, #0
 8014eec:	d108      	bne.n	8014f00 <__mdiff+0x28>
 8014eee:	4631      	mov	r1, r6
 8014ef0:	4638      	mov	r0, r7
 8014ef2:	f7ff fdc2 	bl	8014a7a <_Balloc>
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f00:	bfa4      	itt	ge
 8014f02:	4623      	movge	r3, r4
 8014f04:	462c      	movge	r4, r5
 8014f06:	4638      	mov	r0, r7
 8014f08:	6861      	ldr	r1, [r4, #4]
 8014f0a:	bfa6      	itte	ge
 8014f0c:	461d      	movge	r5, r3
 8014f0e:	2600      	movge	r6, #0
 8014f10:	2601      	movlt	r6, #1
 8014f12:	f7ff fdb2 	bl	8014a7a <_Balloc>
 8014f16:	692b      	ldr	r3, [r5, #16]
 8014f18:	60c6      	str	r6, [r0, #12]
 8014f1a:	6926      	ldr	r6, [r4, #16]
 8014f1c:	f105 0914 	add.w	r9, r5, #20
 8014f20:	f104 0214 	add.w	r2, r4, #20
 8014f24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014f28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014f2c:	f100 0514 	add.w	r5, r0, #20
 8014f30:	f04f 0e00 	mov.w	lr, #0
 8014f34:	f852 ab04 	ldr.w	sl, [r2], #4
 8014f38:	f859 4b04 	ldr.w	r4, [r9], #4
 8014f3c:	fa1e f18a 	uxtah	r1, lr, sl
 8014f40:	b2a3      	uxth	r3, r4
 8014f42:	1ac9      	subs	r1, r1, r3
 8014f44:	0c23      	lsrs	r3, r4, #16
 8014f46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014f4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014f4e:	b289      	uxth	r1, r1
 8014f50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014f54:	45c8      	cmp	r8, r9
 8014f56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014f5a:	4694      	mov	ip, r2
 8014f5c:	f845 3b04 	str.w	r3, [r5], #4
 8014f60:	d8e8      	bhi.n	8014f34 <__mdiff+0x5c>
 8014f62:	45bc      	cmp	ip, r7
 8014f64:	d304      	bcc.n	8014f70 <__mdiff+0x98>
 8014f66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014f6a:	b183      	cbz	r3, 8014f8e <__mdiff+0xb6>
 8014f6c:	6106      	str	r6, [r0, #16]
 8014f6e:	e7c5      	b.n	8014efc <__mdiff+0x24>
 8014f70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014f74:	fa1e f381 	uxtah	r3, lr, r1
 8014f78:	141a      	asrs	r2, r3, #16
 8014f7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014f88:	f845 3b04 	str.w	r3, [r5], #4
 8014f8c:	e7e9      	b.n	8014f62 <__mdiff+0x8a>
 8014f8e:	3e01      	subs	r6, #1
 8014f90:	e7e9      	b.n	8014f66 <__mdiff+0x8e>

08014f92 <__d2b>:
 8014f92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f96:	460e      	mov	r6, r1
 8014f98:	2101      	movs	r1, #1
 8014f9a:	ec59 8b10 	vmov	r8, r9, d0
 8014f9e:	4615      	mov	r5, r2
 8014fa0:	f7ff fd6b 	bl	8014a7a <_Balloc>
 8014fa4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014fa8:	4607      	mov	r7, r0
 8014faa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014fae:	bb34      	cbnz	r4, 8014ffe <__d2b+0x6c>
 8014fb0:	9301      	str	r3, [sp, #4]
 8014fb2:	f1b8 0300 	subs.w	r3, r8, #0
 8014fb6:	d027      	beq.n	8015008 <__d2b+0x76>
 8014fb8:	a802      	add	r0, sp, #8
 8014fba:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014fbe:	f7ff fe01 	bl	8014bc4 <__lo0bits>
 8014fc2:	9900      	ldr	r1, [sp, #0]
 8014fc4:	b1f0      	cbz	r0, 8015004 <__d2b+0x72>
 8014fc6:	9a01      	ldr	r2, [sp, #4]
 8014fc8:	f1c0 0320 	rsb	r3, r0, #32
 8014fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8014fd0:	430b      	orrs	r3, r1
 8014fd2:	40c2      	lsrs	r2, r0
 8014fd4:	617b      	str	r3, [r7, #20]
 8014fd6:	9201      	str	r2, [sp, #4]
 8014fd8:	9b01      	ldr	r3, [sp, #4]
 8014fda:	61bb      	str	r3, [r7, #24]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	bf14      	ite	ne
 8014fe0:	2102      	movne	r1, #2
 8014fe2:	2101      	moveq	r1, #1
 8014fe4:	6139      	str	r1, [r7, #16]
 8014fe6:	b1c4      	cbz	r4, 801501a <__d2b+0x88>
 8014fe8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014fec:	4404      	add	r4, r0
 8014fee:	6034      	str	r4, [r6, #0]
 8014ff0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ff4:	6028      	str	r0, [r5, #0]
 8014ff6:	4638      	mov	r0, r7
 8014ff8:	b003      	add	sp, #12
 8014ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015002:	e7d5      	b.n	8014fb0 <__d2b+0x1e>
 8015004:	6179      	str	r1, [r7, #20]
 8015006:	e7e7      	b.n	8014fd8 <__d2b+0x46>
 8015008:	a801      	add	r0, sp, #4
 801500a:	f7ff fddb 	bl	8014bc4 <__lo0bits>
 801500e:	9b01      	ldr	r3, [sp, #4]
 8015010:	617b      	str	r3, [r7, #20]
 8015012:	2101      	movs	r1, #1
 8015014:	6139      	str	r1, [r7, #16]
 8015016:	3020      	adds	r0, #32
 8015018:	e7e5      	b.n	8014fe6 <__d2b+0x54>
 801501a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801501e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015022:	6030      	str	r0, [r6, #0]
 8015024:	6918      	ldr	r0, [r3, #16]
 8015026:	f7ff fdae 	bl	8014b86 <__hi0bits>
 801502a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801502e:	e7e1      	b.n	8014ff4 <__d2b+0x62>

08015030 <_calloc_r>:
 8015030:	b538      	push	{r3, r4, r5, lr}
 8015032:	fb02 f401 	mul.w	r4, r2, r1
 8015036:	4621      	mov	r1, r4
 8015038:	f7fd fd28 	bl	8012a8c <_malloc_r>
 801503c:	4605      	mov	r5, r0
 801503e:	b118      	cbz	r0, 8015048 <_calloc_r+0x18>
 8015040:	4622      	mov	r2, r4
 8015042:	2100      	movs	r1, #0
 8015044:	f7fd fccb 	bl	80129de <memset>
 8015048:	4628      	mov	r0, r5
 801504a:	bd38      	pop	{r3, r4, r5, pc}

0801504c <_realloc_r>:
 801504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801504e:	4607      	mov	r7, r0
 8015050:	4614      	mov	r4, r2
 8015052:	460e      	mov	r6, r1
 8015054:	b921      	cbnz	r1, 8015060 <_realloc_r+0x14>
 8015056:	4611      	mov	r1, r2
 8015058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801505c:	f7fd bd16 	b.w	8012a8c <_malloc_r>
 8015060:	b922      	cbnz	r2, 801506c <_realloc_r+0x20>
 8015062:	f7fd fcc5 	bl	80129f0 <_free_r>
 8015066:	4625      	mov	r5, r4
 8015068:	4628      	mov	r0, r5
 801506a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801506c:	f000 f9f0 	bl	8015450 <_malloc_usable_size_r>
 8015070:	42a0      	cmp	r0, r4
 8015072:	d20f      	bcs.n	8015094 <_realloc_r+0x48>
 8015074:	4621      	mov	r1, r4
 8015076:	4638      	mov	r0, r7
 8015078:	f7fd fd08 	bl	8012a8c <_malloc_r>
 801507c:	4605      	mov	r5, r0
 801507e:	2800      	cmp	r0, #0
 8015080:	d0f2      	beq.n	8015068 <_realloc_r+0x1c>
 8015082:	4631      	mov	r1, r6
 8015084:	4622      	mov	r2, r4
 8015086:	f7fd fc9f 	bl	80129c8 <memcpy>
 801508a:	4631      	mov	r1, r6
 801508c:	4638      	mov	r0, r7
 801508e:	f7fd fcaf 	bl	80129f0 <_free_r>
 8015092:	e7e9      	b.n	8015068 <_realloc_r+0x1c>
 8015094:	4635      	mov	r5, r6
 8015096:	e7e7      	b.n	8015068 <_realloc_r+0x1c>

08015098 <__ssputs_r>:
 8015098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801509c:	688e      	ldr	r6, [r1, #8]
 801509e:	429e      	cmp	r6, r3
 80150a0:	4682      	mov	sl, r0
 80150a2:	460c      	mov	r4, r1
 80150a4:	4690      	mov	r8, r2
 80150a6:	4699      	mov	r9, r3
 80150a8:	d837      	bhi.n	801511a <__ssputs_r+0x82>
 80150aa:	898a      	ldrh	r2, [r1, #12]
 80150ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80150b0:	d031      	beq.n	8015116 <__ssputs_r+0x7e>
 80150b2:	6825      	ldr	r5, [r4, #0]
 80150b4:	6909      	ldr	r1, [r1, #16]
 80150b6:	1a6f      	subs	r7, r5, r1
 80150b8:	6965      	ldr	r5, [r4, #20]
 80150ba:	2302      	movs	r3, #2
 80150bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80150c4:	f109 0301 	add.w	r3, r9, #1
 80150c8:	443b      	add	r3, r7
 80150ca:	429d      	cmp	r5, r3
 80150cc:	bf38      	it	cc
 80150ce:	461d      	movcc	r5, r3
 80150d0:	0553      	lsls	r3, r2, #21
 80150d2:	d530      	bpl.n	8015136 <__ssputs_r+0x9e>
 80150d4:	4629      	mov	r1, r5
 80150d6:	f7fd fcd9 	bl	8012a8c <_malloc_r>
 80150da:	4606      	mov	r6, r0
 80150dc:	b950      	cbnz	r0, 80150f4 <__ssputs_r+0x5c>
 80150de:	230c      	movs	r3, #12
 80150e0:	f8ca 3000 	str.w	r3, [sl]
 80150e4:	89a3      	ldrh	r3, [r4, #12]
 80150e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150ea:	81a3      	strh	r3, [r4, #12]
 80150ec:	f04f 30ff 	mov.w	r0, #4294967295
 80150f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150f4:	463a      	mov	r2, r7
 80150f6:	6921      	ldr	r1, [r4, #16]
 80150f8:	f7fd fc66 	bl	80129c8 <memcpy>
 80150fc:	89a3      	ldrh	r3, [r4, #12]
 80150fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015106:	81a3      	strh	r3, [r4, #12]
 8015108:	6126      	str	r6, [r4, #16]
 801510a:	6165      	str	r5, [r4, #20]
 801510c:	443e      	add	r6, r7
 801510e:	1bed      	subs	r5, r5, r7
 8015110:	6026      	str	r6, [r4, #0]
 8015112:	60a5      	str	r5, [r4, #8]
 8015114:	464e      	mov	r6, r9
 8015116:	454e      	cmp	r6, r9
 8015118:	d900      	bls.n	801511c <__ssputs_r+0x84>
 801511a:	464e      	mov	r6, r9
 801511c:	4632      	mov	r2, r6
 801511e:	4641      	mov	r1, r8
 8015120:	6820      	ldr	r0, [r4, #0]
 8015122:	f7ff fc8f 	bl	8014a44 <memmove>
 8015126:	68a3      	ldr	r3, [r4, #8]
 8015128:	1b9b      	subs	r3, r3, r6
 801512a:	60a3      	str	r3, [r4, #8]
 801512c:	6823      	ldr	r3, [r4, #0]
 801512e:	441e      	add	r6, r3
 8015130:	6026      	str	r6, [r4, #0]
 8015132:	2000      	movs	r0, #0
 8015134:	e7dc      	b.n	80150f0 <__ssputs_r+0x58>
 8015136:	462a      	mov	r2, r5
 8015138:	f7ff ff88 	bl	801504c <_realloc_r>
 801513c:	4606      	mov	r6, r0
 801513e:	2800      	cmp	r0, #0
 8015140:	d1e2      	bne.n	8015108 <__ssputs_r+0x70>
 8015142:	6921      	ldr	r1, [r4, #16]
 8015144:	4650      	mov	r0, sl
 8015146:	f7fd fc53 	bl	80129f0 <_free_r>
 801514a:	e7c8      	b.n	80150de <__ssputs_r+0x46>

0801514c <_svfiprintf_r>:
 801514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015150:	461d      	mov	r5, r3
 8015152:	898b      	ldrh	r3, [r1, #12]
 8015154:	061f      	lsls	r7, r3, #24
 8015156:	b09d      	sub	sp, #116	; 0x74
 8015158:	4680      	mov	r8, r0
 801515a:	460c      	mov	r4, r1
 801515c:	4616      	mov	r6, r2
 801515e:	d50f      	bpl.n	8015180 <_svfiprintf_r+0x34>
 8015160:	690b      	ldr	r3, [r1, #16]
 8015162:	b96b      	cbnz	r3, 8015180 <_svfiprintf_r+0x34>
 8015164:	2140      	movs	r1, #64	; 0x40
 8015166:	f7fd fc91 	bl	8012a8c <_malloc_r>
 801516a:	6020      	str	r0, [r4, #0]
 801516c:	6120      	str	r0, [r4, #16]
 801516e:	b928      	cbnz	r0, 801517c <_svfiprintf_r+0x30>
 8015170:	230c      	movs	r3, #12
 8015172:	f8c8 3000 	str.w	r3, [r8]
 8015176:	f04f 30ff 	mov.w	r0, #4294967295
 801517a:	e0c8      	b.n	801530e <_svfiprintf_r+0x1c2>
 801517c:	2340      	movs	r3, #64	; 0x40
 801517e:	6163      	str	r3, [r4, #20]
 8015180:	2300      	movs	r3, #0
 8015182:	9309      	str	r3, [sp, #36]	; 0x24
 8015184:	2320      	movs	r3, #32
 8015186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801518a:	2330      	movs	r3, #48	; 0x30
 801518c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015190:	9503      	str	r5, [sp, #12]
 8015192:	f04f 0b01 	mov.w	fp, #1
 8015196:	4637      	mov	r7, r6
 8015198:	463d      	mov	r5, r7
 801519a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801519e:	b10b      	cbz	r3, 80151a4 <_svfiprintf_r+0x58>
 80151a0:	2b25      	cmp	r3, #37	; 0x25
 80151a2:	d13e      	bne.n	8015222 <_svfiprintf_r+0xd6>
 80151a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80151a8:	d00b      	beq.n	80151c2 <_svfiprintf_r+0x76>
 80151aa:	4653      	mov	r3, sl
 80151ac:	4632      	mov	r2, r6
 80151ae:	4621      	mov	r1, r4
 80151b0:	4640      	mov	r0, r8
 80151b2:	f7ff ff71 	bl	8015098 <__ssputs_r>
 80151b6:	3001      	adds	r0, #1
 80151b8:	f000 80a4 	beq.w	8015304 <_svfiprintf_r+0x1b8>
 80151bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151be:	4453      	add	r3, sl
 80151c0:	9309      	str	r3, [sp, #36]	; 0x24
 80151c2:	783b      	ldrb	r3, [r7, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	f000 809d 	beq.w	8015304 <_svfiprintf_r+0x1b8>
 80151ca:	2300      	movs	r3, #0
 80151cc:	f04f 32ff 	mov.w	r2, #4294967295
 80151d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151d4:	9304      	str	r3, [sp, #16]
 80151d6:	9307      	str	r3, [sp, #28]
 80151d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151dc:	931a      	str	r3, [sp, #104]	; 0x68
 80151de:	462f      	mov	r7, r5
 80151e0:	2205      	movs	r2, #5
 80151e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80151e6:	4850      	ldr	r0, [pc, #320]	; (8015328 <_svfiprintf_r+0x1dc>)
 80151e8:	f7eb f81a 	bl	8000220 <memchr>
 80151ec:	9b04      	ldr	r3, [sp, #16]
 80151ee:	b9d0      	cbnz	r0, 8015226 <_svfiprintf_r+0xda>
 80151f0:	06d9      	lsls	r1, r3, #27
 80151f2:	bf44      	itt	mi
 80151f4:	2220      	movmi	r2, #32
 80151f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80151fa:	071a      	lsls	r2, r3, #28
 80151fc:	bf44      	itt	mi
 80151fe:	222b      	movmi	r2, #43	; 0x2b
 8015200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015204:	782a      	ldrb	r2, [r5, #0]
 8015206:	2a2a      	cmp	r2, #42	; 0x2a
 8015208:	d015      	beq.n	8015236 <_svfiprintf_r+0xea>
 801520a:	9a07      	ldr	r2, [sp, #28]
 801520c:	462f      	mov	r7, r5
 801520e:	2000      	movs	r0, #0
 8015210:	250a      	movs	r5, #10
 8015212:	4639      	mov	r1, r7
 8015214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015218:	3b30      	subs	r3, #48	; 0x30
 801521a:	2b09      	cmp	r3, #9
 801521c:	d94d      	bls.n	80152ba <_svfiprintf_r+0x16e>
 801521e:	b1b8      	cbz	r0, 8015250 <_svfiprintf_r+0x104>
 8015220:	e00f      	b.n	8015242 <_svfiprintf_r+0xf6>
 8015222:	462f      	mov	r7, r5
 8015224:	e7b8      	b.n	8015198 <_svfiprintf_r+0x4c>
 8015226:	4a40      	ldr	r2, [pc, #256]	; (8015328 <_svfiprintf_r+0x1dc>)
 8015228:	1a80      	subs	r0, r0, r2
 801522a:	fa0b f000 	lsl.w	r0, fp, r0
 801522e:	4318      	orrs	r0, r3
 8015230:	9004      	str	r0, [sp, #16]
 8015232:	463d      	mov	r5, r7
 8015234:	e7d3      	b.n	80151de <_svfiprintf_r+0x92>
 8015236:	9a03      	ldr	r2, [sp, #12]
 8015238:	1d11      	adds	r1, r2, #4
 801523a:	6812      	ldr	r2, [r2, #0]
 801523c:	9103      	str	r1, [sp, #12]
 801523e:	2a00      	cmp	r2, #0
 8015240:	db01      	blt.n	8015246 <_svfiprintf_r+0xfa>
 8015242:	9207      	str	r2, [sp, #28]
 8015244:	e004      	b.n	8015250 <_svfiprintf_r+0x104>
 8015246:	4252      	negs	r2, r2
 8015248:	f043 0302 	orr.w	r3, r3, #2
 801524c:	9207      	str	r2, [sp, #28]
 801524e:	9304      	str	r3, [sp, #16]
 8015250:	783b      	ldrb	r3, [r7, #0]
 8015252:	2b2e      	cmp	r3, #46	; 0x2e
 8015254:	d10c      	bne.n	8015270 <_svfiprintf_r+0x124>
 8015256:	787b      	ldrb	r3, [r7, #1]
 8015258:	2b2a      	cmp	r3, #42	; 0x2a
 801525a:	d133      	bne.n	80152c4 <_svfiprintf_r+0x178>
 801525c:	9b03      	ldr	r3, [sp, #12]
 801525e:	1d1a      	adds	r2, r3, #4
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	9203      	str	r2, [sp, #12]
 8015264:	2b00      	cmp	r3, #0
 8015266:	bfb8      	it	lt
 8015268:	f04f 33ff 	movlt.w	r3, #4294967295
 801526c:	3702      	adds	r7, #2
 801526e:	9305      	str	r3, [sp, #20]
 8015270:	4d2e      	ldr	r5, [pc, #184]	; (801532c <_svfiprintf_r+0x1e0>)
 8015272:	7839      	ldrb	r1, [r7, #0]
 8015274:	2203      	movs	r2, #3
 8015276:	4628      	mov	r0, r5
 8015278:	f7ea ffd2 	bl	8000220 <memchr>
 801527c:	b138      	cbz	r0, 801528e <_svfiprintf_r+0x142>
 801527e:	2340      	movs	r3, #64	; 0x40
 8015280:	1b40      	subs	r0, r0, r5
 8015282:	fa03 f000 	lsl.w	r0, r3, r0
 8015286:	9b04      	ldr	r3, [sp, #16]
 8015288:	4303      	orrs	r3, r0
 801528a:	3701      	adds	r7, #1
 801528c:	9304      	str	r3, [sp, #16]
 801528e:	7839      	ldrb	r1, [r7, #0]
 8015290:	4827      	ldr	r0, [pc, #156]	; (8015330 <_svfiprintf_r+0x1e4>)
 8015292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015296:	2206      	movs	r2, #6
 8015298:	1c7e      	adds	r6, r7, #1
 801529a:	f7ea ffc1 	bl	8000220 <memchr>
 801529e:	2800      	cmp	r0, #0
 80152a0:	d038      	beq.n	8015314 <_svfiprintf_r+0x1c8>
 80152a2:	4b24      	ldr	r3, [pc, #144]	; (8015334 <_svfiprintf_r+0x1e8>)
 80152a4:	bb13      	cbnz	r3, 80152ec <_svfiprintf_r+0x1a0>
 80152a6:	9b03      	ldr	r3, [sp, #12]
 80152a8:	3307      	adds	r3, #7
 80152aa:	f023 0307 	bic.w	r3, r3, #7
 80152ae:	3308      	adds	r3, #8
 80152b0:	9303      	str	r3, [sp, #12]
 80152b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152b4:	444b      	add	r3, r9
 80152b6:	9309      	str	r3, [sp, #36]	; 0x24
 80152b8:	e76d      	b.n	8015196 <_svfiprintf_r+0x4a>
 80152ba:	fb05 3202 	mla	r2, r5, r2, r3
 80152be:	2001      	movs	r0, #1
 80152c0:	460f      	mov	r7, r1
 80152c2:	e7a6      	b.n	8015212 <_svfiprintf_r+0xc6>
 80152c4:	2300      	movs	r3, #0
 80152c6:	3701      	adds	r7, #1
 80152c8:	9305      	str	r3, [sp, #20]
 80152ca:	4619      	mov	r1, r3
 80152cc:	250a      	movs	r5, #10
 80152ce:	4638      	mov	r0, r7
 80152d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152d4:	3a30      	subs	r2, #48	; 0x30
 80152d6:	2a09      	cmp	r2, #9
 80152d8:	d903      	bls.n	80152e2 <_svfiprintf_r+0x196>
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d0c8      	beq.n	8015270 <_svfiprintf_r+0x124>
 80152de:	9105      	str	r1, [sp, #20]
 80152e0:	e7c6      	b.n	8015270 <_svfiprintf_r+0x124>
 80152e2:	fb05 2101 	mla	r1, r5, r1, r2
 80152e6:	2301      	movs	r3, #1
 80152e8:	4607      	mov	r7, r0
 80152ea:	e7f0      	b.n	80152ce <_svfiprintf_r+0x182>
 80152ec:	ab03      	add	r3, sp, #12
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	4622      	mov	r2, r4
 80152f2:	4b11      	ldr	r3, [pc, #68]	; (8015338 <_svfiprintf_r+0x1ec>)
 80152f4:	a904      	add	r1, sp, #16
 80152f6:	4640      	mov	r0, r8
 80152f8:	f7fd fdf6 	bl	8012ee8 <_printf_float>
 80152fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015300:	4681      	mov	r9, r0
 8015302:	d1d6      	bne.n	80152b2 <_svfiprintf_r+0x166>
 8015304:	89a3      	ldrh	r3, [r4, #12]
 8015306:	065b      	lsls	r3, r3, #25
 8015308:	f53f af35 	bmi.w	8015176 <_svfiprintf_r+0x2a>
 801530c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801530e:	b01d      	add	sp, #116	; 0x74
 8015310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015314:	ab03      	add	r3, sp, #12
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	4622      	mov	r2, r4
 801531a:	4b07      	ldr	r3, [pc, #28]	; (8015338 <_svfiprintf_r+0x1ec>)
 801531c:	a904      	add	r1, sp, #16
 801531e:	4640      	mov	r0, r8
 8015320:	f7fe f898 	bl	8013454 <_printf_i>
 8015324:	e7ea      	b.n	80152fc <_svfiprintf_r+0x1b0>
 8015326:	bf00      	nop
 8015328:	080186e8 	.word	0x080186e8
 801532c:	080186ee 	.word	0x080186ee
 8015330:	080186f2 	.word	0x080186f2
 8015334:	08012ee9 	.word	0x08012ee9
 8015338:	08015099 	.word	0x08015099

0801533c <_read_r>:
 801533c:	b538      	push	{r3, r4, r5, lr}
 801533e:	4c07      	ldr	r4, [pc, #28]	; (801535c <_read_r+0x20>)
 8015340:	4605      	mov	r5, r0
 8015342:	4608      	mov	r0, r1
 8015344:	4611      	mov	r1, r2
 8015346:	2200      	movs	r2, #0
 8015348:	6022      	str	r2, [r4, #0]
 801534a:	461a      	mov	r2, r3
 801534c:	f7f0 f9d0 	bl	80056f0 <_read>
 8015350:	1c43      	adds	r3, r0, #1
 8015352:	d102      	bne.n	801535a <_read_r+0x1e>
 8015354:	6823      	ldr	r3, [r4, #0]
 8015356:	b103      	cbz	r3, 801535a <_read_r+0x1e>
 8015358:	602b      	str	r3, [r5, #0]
 801535a:	bd38      	pop	{r3, r4, r5, pc}
 801535c:	200067cc 	.word	0x200067cc

08015360 <_raise_r>:
 8015360:	291f      	cmp	r1, #31
 8015362:	b538      	push	{r3, r4, r5, lr}
 8015364:	4604      	mov	r4, r0
 8015366:	460d      	mov	r5, r1
 8015368:	d904      	bls.n	8015374 <_raise_r+0x14>
 801536a:	2316      	movs	r3, #22
 801536c:	6003      	str	r3, [r0, #0]
 801536e:	f04f 30ff 	mov.w	r0, #4294967295
 8015372:	bd38      	pop	{r3, r4, r5, pc}
 8015374:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015376:	b112      	cbz	r2, 801537e <_raise_r+0x1e>
 8015378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801537c:	b94b      	cbnz	r3, 8015392 <_raise_r+0x32>
 801537e:	4620      	mov	r0, r4
 8015380:	f000 f830 	bl	80153e4 <_getpid_r>
 8015384:	462a      	mov	r2, r5
 8015386:	4601      	mov	r1, r0
 8015388:	4620      	mov	r0, r4
 801538a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801538e:	f000 b817 	b.w	80153c0 <_kill_r>
 8015392:	2b01      	cmp	r3, #1
 8015394:	d00a      	beq.n	80153ac <_raise_r+0x4c>
 8015396:	1c59      	adds	r1, r3, #1
 8015398:	d103      	bne.n	80153a2 <_raise_r+0x42>
 801539a:	2316      	movs	r3, #22
 801539c:	6003      	str	r3, [r0, #0]
 801539e:	2001      	movs	r0, #1
 80153a0:	e7e7      	b.n	8015372 <_raise_r+0x12>
 80153a2:	2400      	movs	r4, #0
 80153a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80153a8:	4628      	mov	r0, r5
 80153aa:	4798      	blx	r3
 80153ac:	2000      	movs	r0, #0
 80153ae:	e7e0      	b.n	8015372 <_raise_r+0x12>

080153b0 <raise>:
 80153b0:	4b02      	ldr	r3, [pc, #8]	; (80153bc <raise+0xc>)
 80153b2:	4601      	mov	r1, r0
 80153b4:	6818      	ldr	r0, [r3, #0]
 80153b6:	f7ff bfd3 	b.w	8015360 <_raise_r>
 80153ba:	bf00      	nop
 80153bc:	20000434 	.word	0x20000434

080153c0 <_kill_r>:
 80153c0:	b538      	push	{r3, r4, r5, lr}
 80153c2:	4c07      	ldr	r4, [pc, #28]	; (80153e0 <_kill_r+0x20>)
 80153c4:	2300      	movs	r3, #0
 80153c6:	4605      	mov	r5, r0
 80153c8:	4608      	mov	r0, r1
 80153ca:	4611      	mov	r1, r2
 80153cc:	6023      	str	r3, [r4, #0]
 80153ce:	f7f0 f975 	bl	80056bc <_kill>
 80153d2:	1c43      	adds	r3, r0, #1
 80153d4:	d102      	bne.n	80153dc <_kill_r+0x1c>
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	b103      	cbz	r3, 80153dc <_kill_r+0x1c>
 80153da:	602b      	str	r3, [r5, #0]
 80153dc:	bd38      	pop	{r3, r4, r5, pc}
 80153de:	bf00      	nop
 80153e0:	200067cc 	.word	0x200067cc

080153e4 <_getpid_r>:
 80153e4:	f7f0 b962 	b.w	80056ac <_getpid>

080153e8 <_fstat_r>:
 80153e8:	b538      	push	{r3, r4, r5, lr}
 80153ea:	4c07      	ldr	r4, [pc, #28]	; (8015408 <_fstat_r+0x20>)
 80153ec:	2300      	movs	r3, #0
 80153ee:	4605      	mov	r5, r0
 80153f0:	4608      	mov	r0, r1
 80153f2:	4611      	mov	r1, r2
 80153f4:	6023      	str	r3, [r4, #0]
 80153f6:	f7f0 f9c0 	bl	800577a <_fstat>
 80153fa:	1c43      	adds	r3, r0, #1
 80153fc:	d102      	bne.n	8015404 <_fstat_r+0x1c>
 80153fe:	6823      	ldr	r3, [r4, #0]
 8015400:	b103      	cbz	r3, 8015404 <_fstat_r+0x1c>
 8015402:	602b      	str	r3, [r5, #0]
 8015404:	bd38      	pop	{r3, r4, r5, pc}
 8015406:	bf00      	nop
 8015408:	200067cc 	.word	0x200067cc

0801540c <_isatty_r>:
 801540c:	b538      	push	{r3, r4, r5, lr}
 801540e:	4c06      	ldr	r4, [pc, #24]	; (8015428 <_isatty_r+0x1c>)
 8015410:	2300      	movs	r3, #0
 8015412:	4605      	mov	r5, r0
 8015414:	4608      	mov	r0, r1
 8015416:	6023      	str	r3, [r4, #0]
 8015418:	f7f0 f9bf 	bl	800579a <_isatty>
 801541c:	1c43      	adds	r3, r0, #1
 801541e:	d102      	bne.n	8015426 <_isatty_r+0x1a>
 8015420:	6823      	ldr	r3, [r4, #0]
 8015422:	b103      	cbz	r3, 8015426 <_isatty_r+0x1a>
 8015424:	602b      	str	r3, [r5, #0]
 8015426:	bd38      	pop	{r3, r4, r5, pc}
 8015428:	200067cc 	.word	0x200067cc

0801542c <__ascii_mbtowc>:
 801542c:	b082      	sub	sp, #8
 801542e:	b901      	cbnz	r1, 8015432 <__ascii_mbtowc+0x6>
 8015430:	a901      	add	r1, sp, #4
 8015432:	b142      	cbz	r2, 8015446 <__ascii_mbtowc+0x1a>
 8015434:	b14b      	cbz	r3, 801544a <__ascii_mbtowc+0x1e>
 8015436:	7813      	ldrb	r3, [r2, #0]
 8015438:	600b      	str	r3, [r1, #0]
 801543a:	7812      	ldrb	r2, [r2, #0]
 801543c:	1c10      	adds	r0, r2, #0
 801543e:	bf18      	it	ne
 8015440:	2001      	movne	r0, #1
 8015442:	b002      	add	sp, #8
 8015444:	4770      	bx	lr
 8015446:	4610      	mov	r0, r2
 8015448:	e7fb      	b.n	8015442 <__ascii_mbtowc+0x16>
 801544a:	f06f 0001 	mvn.w	r0, #1
 801544e:	e7f8      	b.n	8015442 <__ascii_mbtowc+0x16>

08015450 <_malloc_usable_size_r>:
 8015450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015454:	1f18      	subs	r0, r3, #4
 8015456:	2b00      	cmp	r3, #0
 8015458:	bfbc      	itt	lt
 801545a:	580b      	ldrlt	r3, [r1, r0]
 801545c:	18c0      	addlt	r0, r0, r3
 801545e:	4770      	bx	lr

08015460 <__ascii_wctomb>:
 8015460:	b149      	cbz	r1, 8015476 <__ascii_wctomb+0x16>
 8015462:	2aff      	cmp	r2, #255	; 0xff
 8015464:	bf85      	ittet	hi
 8015466:	238a      	movhi	r3, #138	; 0x8a
 8015468:	6003      	strhi	r3, [r0, #0]
 801546a:	700a      	strbls	r2, [r1, #0]
 801546c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015470:	bf98      	it	ls
 8015472:	2001      	movls	r0, #1
 8015474:	4770      	bx	lr
 8015476:	4608      	mov	r0, r1
 8015478:	4770      	bx	lr
 801547a:	0000      	movs	r0, r0
 801547c:	0000      	movs	r0, r0
	...

08015480 <cos>:
 8015480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015482:	ec51 0b10 	vmov	r0, r1, d0
 8015486:	4a1e      	ldr	r2, [pc, #120]	; (8015500 <cos+0x80>)
 8015488:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801548c:	4293      	cmp	r3, r2
 801548e:	dc06      	bgt.n	801549e <cos+0x1e>
 8015490:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80154f8 <cos+0x78>
 8015494:	f001 fd94 	bl	8016fc0 <__kernel_cos>
 8015498:	ec51 0b10 	vmov	r0, r1, d0
 801549c:	e007      	b.n	80154ae <cos+0x2e>
 801549e:	4a19      	ldr	r2, [pc, #100]	; (8015504 <cos+0x84>)
 80154a0:	4293      	cmp	r3, r2
 80154a2:	dd09      	ble.n	80154b8 <cos+0x38>
 80154a4:	ee10 2a10 	vmov	r2, s0
 80154a8:	460b      	mov	r3, r1
 80154aa:	f7ea ff0d 	bl	80002c8 <__aeabi_dsub>
 80154ae:	ec41 0b10 	vmov	d0, r0, r1
 80154b2:	b005      	add	sp, #20
 80154b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80154b8:	4668      	mov	r0, sp
 80154ba:	f001 fadd 	bl	8016a78 <__ieee754_rem_pio2>
 80154be:	f000 0003 	and.w	r0, r0, #3
 80154c2:	2801      	cmp	r0, #1
 80154c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80154c8:	ed9d 0b00 	vldr	d0, [sp]
 80154cc:	d007      	beq.n	80154de <cos+0x5e>
 80154ce:	2802      	cmp	r0, #2
 80154d0:	d00e      	beq.n	80154f0 <cos+0x70>
 80154d2:	2800      	cmp	r0, #0
 80154d4:	d0de      	beq.n	8015494 <cos+0x14>
 80154d6:	2001      	movs	r0, #1
 80154d8:	f002 f97a 	bl	80177d0 <__kernel_sin>
 80154dc:	e7dc      	b.n	8015498 <cos+0x18>
 80154de:	f002 f977 	bl	80177d0 <__kernel_sin>
 80154e2:	ec53 2b10 	vmov	r2, r3, d0
 80154e6:	ee10 0a10 	vmov	r0, s0
 80154ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80154ee:	e7de      	b.n	80154ae <cos+0x2e>
 80154f0:	f001 fd66 	bl	8016fc0 <__kernel_cos>
 80154f4:	e7f5      	b.n	80154e2 <cos+0x62>
 80154f6:	bf00      	nop
	...
 8015500:	3fe921fb 	.word	0x3fe921fb
 8015504:	7fefffff 	.word	0x7fefffff

08015508 <round>:
 8015508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801550a:	ec57 6b10 	vmov	r6, r7, d0
 801550e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015512:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015516:	2c13      	cmp	r4, #19
 8015518:	463b      	mov	r3, r7
 801551a:	463d      	mov	r5, r7
 801551c:	dc17      	bgt.n	801554e <round+0x46>
 801551e:	2c00      	cmp	r4, #0
 8015520:	da09      	bge.n	8015536 <round+0x2e>
 8015522:	3401      	adds	r4, #1
 8015524:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015528:	d103      	bne.n	8015532 <round+0x2a>
 801552a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801552e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015532:	2100      	movs	r1, #0
 8015534:	e02c      	b.n	8015590 <round+0x88>
 8015536:	4a18      	ldr	r2, [pc, #96]	; (8015598 <round+0x90>)
 8015538:	4122      	asrs	r2, r4
 801553a:	4217      	tst	r7, r2
 801553c:	d100      	bne.n	8015540 <round+0x38>
 801553e:	b19e      	cbz	r6, 8015568 <round+0x60>
 8015540:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015544:	4123      	asrs	r3, r4
 8015546:	442b      	add	r3, r5
 8015548:	ea23 0302 	bic.w	r3, r3, r2
 801554c:	e7f1      	b.n	8015532 <round+0x2a>
 801554e:	2c33      	cmp	r4, #51	; 0x33
 8015550:	dd0d      	ble.n	801556e <round+0x66>
 8015552:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015556:	d107      	bne.n	8015568 <round+0x60>
 8015558:	4630      	mov	r0, r6
 801555a:	4639      	mov	r1, r7
 801555c:	ee10 2a10 	vmov	r2, s0
 8015560:	f7ea feb4 	bl	80002cc <__adddf3>
 8015564:	4606      	mov	r6, r0
 8015566:	460f      	mov	r7, r1
 8015568:	ec47 6b10 	vmov	d0, r6, r7
 801556c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801556e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015572:	f04f 30ff 	mov.w	r0, #4294967295
 8015576:	40d0      	lsrs	r0, r2
 8015578:	4206      	tst	r6, r0
 801557a:	d0f5      	beq.n	8015568 <round+0x60>
 801557c:	2201      	movs	r2, #1
 801557e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015582:	fa02 f404 	lsl.w	r4, r2, r4
 8015586:	1931      	adds	r1, r6, r4
 8015588:	bf28      	it	cs
 801558a:	189b      	addcs	r3, r3, r2
 801558c:	ea21 0100 	bic.w	r1, r1, r0
 8015590:	461f      	mov	r7, r3
 8015592:	460e      	mov	r6, r1
 8015594:	e7e8      	b.n	8015568 <round+0x60>
 8015596:	bf00      	nop
 8015598:	000fffff 	.word	0x000fffff
 801559c:	00000000 	.word	0x00000000

080155a0 <sin>:
 80155a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155a2:	ec51 0b10 	vmov	r0, r1, d0
 80155a6:	4a20      	ldr	r2, [pc, #128]	; (8015628 <sin+0x88>)
 80155a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155ac:	4293      	cmp	r3, r2
 80155ae:	dc07      	bgt.n	80155c0 <sin+0x20>
 80155b0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8015620 <sin+0x80>
 80155b4:	2000      	movs	r0, #0
 80155b6:	f002 f90b 	bl	80177d0 <__kernel_sin>
 80155ba:	ec51 0b10 	vmov	r0, r1, d0
 80155be:	e007      	b.n	80155d0 <sin+0x30>
 80155c0:	4a1a      	ldr	r2, [pc, #104]	; (801562c <sin+0x8c>)
 80155c2:	4293      	cmp	r3, r2
 80155c4:	dd09      	ble.n	80155da <sin+0x3a>
 80155c6:	ee10 2a10 	vmov	r2, s0
 80155ca:	460b      	mov	r3, r1
 80155cc:	f7ea fe7c 	bl	80002c8 <__aeabi_dsub>
 80155d0:	ec41 0b10 	vmov	d0, r0, r1
 80155d4:	b005      	add	sp, #20
 80155d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80155da:	4668      	mov	r0, sp
 80155dc:	f001 fa4c 	bl	8016a78 <__ieee754_rem_pio2>
 80155e0:	f000 0003 	and.w	r0, r0, #3
 80155e4:	2801      	cmp	r0, #1
 80155e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80155ea:	ed9d 0b00 	vldr	d0, [sp]
 80155ee:	d004      	beq.n	80155fa <sin+0x5a>
 80155f0:	2802      	cmp	r0, #2
 80155f2:	d005      	beq.n	8015600 <sin+0x60>
 80155f4:	b970      	cbnz	r0, 8015614 <sin+0x74>
 80155f6:	2001      	movs	r0, #1
 80155f8:	e7dd      	b.n	80155b6 <sin+0x16>
 80155fa:	f001 fce1 	bl	8016fc0 <__kernel_cos>
 80155fe:	e7dc      	b.n	80155ba <sin+0x1a>
 8015600:	2001      	movs	r0, #1
 8015602:	f002 f8e5 	bl	80177d0 <__kernel_sin>
 8015606:	ec53 2b10 	vmov	r2, r3, d0
 801560a:	ee10 0a10 	vmov	r0, s0
 801560e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015612:	e7dd      	b.n	80155d0 <sin+0x30>
 8015614:	f001 fcd4 	bl	8016fc0 <__kernel_cos>
 8015618:	e7f5      	b.n	8015606 <sin+0x66>
 801561a:	bf00      	nop
 801561c:	f3af 8000 	nop.w
	...
 8015628:	3fe921fb 	.word	0x3fe921fb
 801562c:	7fefffff 	.word	0x7fefffff

08015630 <asin>:
 8015630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015632:	ed2d 8b02 	vpush	{d8}
 8015636:	4e26      	ldr	r6, [pc, #152]	; (80156d0 <asin+0xa0>)
 8015638:	b08b      	sub	sp, #44	; 0x2c
 801563a:	ec55 4b10 	vmov	r4, r5, d0
 801563e:	f000 fa1b 	bl	8015a78 <__ieee754_asin>
 8015642:	f996 3000 	ldrsb.w	r3, [r6]
 8015646:	eeb0 8a40 	vmov.f32	s16, s0
 801564a:	eef0 8a60 	vmov.f32	s17, s1
 801564e:	3301      	adds	r3, #1
 8015650:	d036      	beq.n	80156c0 <asin+0x90>
 8015652:	4622      	mov	r2, r4
 8015654:	462b      	mov	r3, r5
 8015656:	4620      	mov	r0, r4
 8015658:	4629      	mov	r1, r5
 801565a:	f7eb fa87 	bl	8000b6c <__aeabi_dcmpun>
 801565e:	4607      	mov	r7, r0
 8015660:	bb70      	cbnz	r0, 80156c0 <asin+0x90>
 8015662:	ec45 4b10 	vmov	d0, r4, r5
 8015666:	f002 fb0f 	bl	8017c88 <fabs>
 801566a:	2200      	movs	r2, #0
 801566c:	4b19      	ldr	r3, [pc, #100]	; (80156d4 <asin+0xa4>)
 801566e:	ec51 0b10 	vmov	r0, r1, d0
 8015672:	f7eb fa71 	bl	8000b58 <__aeabi_dcmpgt>
 8015676:	b318      	cbz	r0, 80156c0 <asin+0x90>
 8015678:	2301      	movs	r3, #1
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	4816      	ldr	r0, [pc, #88]	; (80156d8 <asin+0xa8>)
 801567e:	4b17      	ldr	r3, [pc, #92]	; (80156dc <asin+0xac>)
 8015680:	9301      	str	r3, [sp, #4]
 8015682:	9708      	str	r7, [sp, #32]
 8015684:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015688:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801568c:	f002 fb98 	bl	8017dc0 <nan>
 8015690:	f996 3000 	ldrsb.w	r3, [r6]
 8015694:	2b02      	cmp	r3, #2
 8015696:	ed8d 0b06 	vstr	d0, [sp, #24]
 801569a:	d104      	bne.n	80156a6 <asin+0x76>
 801569c:	f7fd f948 	bl	8012930 <__errno>
 80156a0:	2321      	movs	r3, #33	; 0x21
 80156a2:	6003      	str	r3, [r0, #0]
 80156a4:	e004      	b.n	80156b0 <asin+0x80>
 80156a6:	4668      	mov	r0, sp
 80156a8:	f002 fb86 	bl	8017db8 <matherr>
 80156ac:	2800      	cmp	r0, #0
 80156ae:	d0f5      	beq.n	801569c <asin+0x6c>
 80156b0:	9b08      	ldr	r3, [sp, #32]
 80156b2:	b11b      	cbz	r3, 80156bc <asin+0x8c>
 80156b4:	f7fd f93c 	bl	8012930 <__errno>
 80156b8:	9b08      	ldr	r3, [sp, #32]
 80156ba:	6003      	str	r3, [r0, #0]
 80156bc:	ed9d 8b06 	vldr	d8, [sp, #24]
 80156c0:	eeb0 0a48 	vmov.f32	s0, s16
 80156c4:	eef0 0a68 	vmov.f32	s1, s17
 80156c8:	b00b      	add	sp, #44	; 0x2c
 80156ca:	ecbd 8b02 	vpop	{d8}
 80156ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156d0:	20000604 	.word	0x20000604
 80156d4:	3ff00000 	.word	0x3ff00000
 80156d8:	080186e3 	.word	0x080186e3
 80156dc:	080189a7 	.word	0x080189a7

080156e0 <atan2>:
 80156e0:	f000 bbda 	b.w	8015e98 <__ieee754_atan2>

080156e4 <pow>:
 80156e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e8:	ed2d 8b04 	vpush	{d8-d9}
 80156ec:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80159c0 <pow+0x2dc>
 80156f0:	b08d      	sub	sp, #52	; 0x34
 80156f2:	ec57 6b10 	vmov	r6, r7, d0
 80156f6:	ec55 4b11 	vmov	r4, r5, d1
 80156fa:	f000 fcad 	bl	8016058 <__ieee754_pow>
 80156fe:	f999 3000 	ldrsb.w	r3, [r9]
 8015702:	9300      	str	r3, [sp, #0]
 8015704:	3301      	adds	r3, #1
 8015706:	eeb0 8a40 	vmov.f32	s16, s0
 801570a:	eef0 8a60 	vmov.f32	s17, s1
 801570e:	46c8      	mov	r8, r9
 8015710:	d05f      	beq.n	80157d2 <pow+0xee>
 8015712:	4622      	mov	r2, r4
 8015714:	462b      	mov	r3, r5
 8015716:	4620      	mov	r0, r4
 8015718:	4629      	mov	r1, r5
 801571a:	f7eb fa27 	bl	8000b6c <__aeabi_dcmpun>
 801571e:	4683      	mov	fp, r0
 8015720:	2800      	cmp	r0, #0
 8015722:	d156      	bne.n	80157d2 <pow+0xee>
 8015724:	4632      	mov	r2, r6
 8015726:	463b      	mov	r3, r7
 8015728:	4630      	mov	r0, r6
 801572a:	4639      	mov	r1, r7
 801572c:	f7eb fa1e 	bl	8000b6c <__aeabi_dcmpun>
 8015730:	9001      	str	r0, [sp, #4]
 8015732:	b1e8      	cbz	r0, 8015770 <pow+0x8c>
 8015734:	2200      	movs	r2, #0
 8015736:	2300      	movs	r3, #0
 8015738:	4620      	mov	r0, r4
 801573a:	4629      	mov	r1, r5
 801573c:	f7eb f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 8015740:	2800      	cmp	r0, #0
 8015742:	d046      	beq.n	80157d2 <pow+0xee>
 8015744:	2301      	movs	r3, #1
 8015746:	9302      	str	r3, [sp, #8]
 8015748:	4b96      	ldr	r3, [pc, #600]	; (80159a4 <pow+0x2c0>)
 801574a:	9303      	str	r3, [sp, #12]
 801574c:	4b96      	ldr	r3, [pc, #600]	; (80159a8 <pow+0x2c4>)
 801574e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015752:	2200      	movs	r2, #0
 8015754:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015758:	9b00      	ldr	r3, [sp, #0]
 801575a:	2b02      	cmp	r3, #2
 801575c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015760:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015764:	d033      	beq.n	80157ce <pow+0xea>
 8015766:	a802      	add	r0, sp, #8
 8015768:	f002 fb26 	bl	8017db8 <matherr>
 801576c:	bb48      	cbnz	r0, 80157c2 <pow+0xde>
 801576e:	e05d      	b.n	801582c <pow+0x148>
 8015770:	f04f 0a00 	mov.w	sl, #0
 8015774:	f04f 0b00 	mov.w	fp, #0
 8015778:	4652      	mov	r2, sl
 801577a:	465b      	mov	r3, fp
 801577c:	4630      	mov	r0, r6
 801577e:	4639      	mov	r1, r7
 8015780:	f7eb f9c2 	bl	8000b08 <__aeabi_dcmpeq>
 8015784:	ec4b ab19 	vmov	d9, sl, fp
 8015788:	2800      	cmp	r0, #0
 801578a:	d054      	beq.n	8015836 <pow+0x152>
 801578c:	4652      	mov	r2, sl
 801578e:	465b      	mov	r3, fp
 8015790:	4620      	mov	r0, r4
 8015792:	4629      	mov	r1, r5
 8015794:	f7eb f9b8 	bl	8000b08 <__aeabi_dcmpeq>
 8015798:	4680      	mov	r8, r0
 801579a:	b318      	cbz	r0, 80157e4 <pow+0x100>
 801579c:	2301      	movs	r3, #1
 801579e:	9302      	str	r3, [sp, #8]
 80157a0:	4b80      	ldr	r3, [pc, #512]	; (80159a4 <pow+0x2c0>)
 80157a2:	9303      	str	r3, [sp, #12]
 80157a4:	9b01      	ldr	r3, [sp, #4]
 80157a6:	930a      	str	r3, [sp, #40]	; 0x28
 80157a8:	9b00      	ldr	r3, [sp, #0]
 80157aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80157ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80157b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d0d5      	beq.n	8015766 <pow+0x82>
 80157ba:	4b7b      	ldr	r3, [pc, #492]	; (80159a8 <pow+0x2c4>)
 80157bc:	2200      	movs	r2, #0
 80157be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80157c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157c4:	b11b      	cbz	r3, 80157ce <pow+0xea>
 80157c6:	f7fd f8b3 	bl	8012930 <__errno>
 80157ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157cc:	6003      	str	r3, [r0, #0]
 80157ce:	ed9d 8b08 	vldr	d8, [sp, #32]
 80157d2:	eeb0 0a48 	vmov.f32	s0, s16
 80157d6:	eef0 0a68 	vmov.f32	s1, s17
 80157da:	b00d      	add	sp, #52	; 0x34
 80157dc:	ecbd 8b04 	vpop	{d8-d9}
 80157e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e4:	ec45 4b10 	vmov	d0, r4, r5
 80157e8:	f002 fa57 	bl	8017c9a <finite>
 80157ec:	2800      	cmp	r0, #0
 80157ee:	d0f0      	beq.n	80157d2 <pow+0xee>
 80157f0:	4652      	mov	r2, sl
 80157f2:	465b      	mov	r3, fp
 80157f4:	4620      	mov	r0, r4
 80157f6:	4629      	mov	r1, r5
 80157f8:	f7eb f990 	bl	8000b1c <__aeabi_dcmplt>
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d0e8      	beq.n	80157d2 <pow+0xee>
 8015800:	2301      	movs	r3, #1
 8015802:	9302      	str	r3, [sp, #8]
 8015804:	4b67      	ldr	r3, [pc, #412]	; (80159a4 <pow+0x2c0>)
 8015806:	9303      	str	r3, [sp, #12]
 8015808:	f999 3000 	ldrsb.w	r3, [r9]
 801580c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8015810:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015814:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015818:	b913      	cbnz	r3, 8015820 <pow+0x13c>
 801581a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801581e:	e7a2      	b.n	8015766 <pow+0x82>
 8015820:	4962      	ldr	r1, [pc, #392]	; (80159ac <pow+0x2c8>)
 8015822:	2000      	movs	r0, #0
 8015824:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015828:	2b02      	cmp	r3, #2
 801582a:	d19c      	bne.n	8015766 <pow+0x82>
 801582c:	f7fd f880 	bl	8012930 <__errno>
 8015830:	2321      	movs	r3, #33	; 0x21
 8015832:	6003      	str	r3, [r0, #0]
 8015834:	e7c5      	b.n	80157c2 <pow+0xde>
 8015836:	eeb0 0a48 	vmov.f32	s0, s16
 801583a:	eef0 0a68 	vmov.f32	s1, s17
 801583e:	f002 fa2c 	bl	8017c9a <finite>
 8015842:	9000      	str	r0, [sp, #0]
 8015844:	2800      	cmp	r0, #0
 8015846:	f040 8081 	bne.w	801594c <pow+0x268>
 801584a:	ec47 6b10 	vmov	d0, r6, r7
 801584e:	f002 fa24 	bl	8017c9a <finite>
 8015852:	2800      	cmp	r0, #0
 8015854:	d07a      	beq.n	801594c <pow+0x268>
 8015856:	ec45 4b10 	vmov	d0, r4, r5
 801585a:	f002 fa1e 	bl	8017c9a <finite>
 801585e:	2800      	cmp	r0, #0
 8015860:	d074      	beq.n	801594c <pow+0x268>
 8015862:	ec53 2b18 	vmov	r2, r3, d8
 8015866:	ee18 0a10 	vmov	r0, s16
 801586a:	4619      	mov	r1, r3
 801586c:	f7eb f97e 	bl	8000b6c <__aeabi_dcmpun>
 8015870:	f999 9000 	ldrsb.w	r9, [r9]
 8015874:	4b4b      	ldr	r3, [pc, #300]	; (80159a4 <pow+0x2c0>)
 8015876:	b1b0      	cbz	r0, 80158a6 <pow+0x1c2>
 8015878:	2201      	movs	r2, #1
 801587a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801587e:	9b00      	ldr	r3, [sp, #0]
 8015880:	930a      	str	r3, [sp, #40]	; 0x28
 8015882:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015886:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801588a:	f1b9 0f00 	cmp.w	r9, #0
 801588e:	d0c4      	beq.n	801581a <pow+0x136>
 8015890:	4652      	mov	r2, sl
 8015892:	465b      	mov	r3, fp
 8015894:	4650      	mov	r0, sl
 8015896:	4659      	mov	r1, fp
 8015898:	f7ea fff8 	bl	800088c <__aeabi_ddiv>
 801589c:	f1b9 0f02 	cmp.w	r9, #2
 80158a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80158a4:	e7c1      	b.n	801582a <pow+0x146>
 80158a6:	2203      	movs	r2, #3
 80158a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80158ac:	900a      	str	r0, [sp, #40]	; 0x28
 80158ae:	4629      	mov	r1, r5
 80158b0:	4620      	mov	r0, r4
 80158b2:	2200      	movs	r2, #0
 80158b4:	4b3e      	ldr	r3, [pc, #248]	; (80159b0 <pow+0x2cc>)
 80158b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80158ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80158be:	f7ea febb 	bl	8000638 <__aeabi_dmul>
 80158c2:	4604      	mov	r4, r0
 80158c4:	460d      	mov	r5, r1
 80158c6:	f1b9 0f00 	cmp.w	r9, #0
 80158ca:	d124      	bne.n	8015916 <pow+0x232>
 80158cc:	4b39      	ldr	r3, [pc, #228]	; (80159b4 <pow+0x2d0>)
 80158ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80158d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80158d6:	4630      	mov	r0, r6
 80158d8:	4652      	mov	r2, sl
 80158da:	465b      	mov	r3, fp
 80158dc:	4639      	mov	r1, r7
 80158de:	f7eb f91d 	bl	8000b1c <__aeabi_dcmplt>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	d056      	beq.n	8015994 <pow+0x2b0>
 80158e6:	ec45 4b10 	vmov	d0, r4, r5
 80158ea:	f002 fa71 	bl	8017dd0 <rint>
 80158ee:	4622      	mov	r2, r4
 80158f0:	462b      	mov	r3, r5
 80158f2:	ec51 0b10 	vmov	r0, r1, d0
 80158f6:	f7eb f907 	bl	8000b08 <__aeabi_dcmpeq>
 80158fa:	b920      	cbnz	r0, 8015906 <pow+0x222>
 80158fc:	4b2e      	ldr	r3, [pc, #184]	; (80159b8 <pow+0x2d4>)
 80158fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015902:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015906:	f998 3000 	ldrsb.w	r3, [r8]
 801590a:	2b02      	cmp	r3, #2
 801590c:	d142      	bne.n	8015994 <pow+0x2b0>
 801590e:	f7fd f80f 	bl	8012930 <__errno>
 8015912:	2322      	movs	r3, #34	; 0x22
 8015914:	e78d      	b.n	8015832 <pow+0x14e>
 8015916:	4b29      	ldr	r3, [pc, #164]	; (80159bc <pow+0x2d8>)
 8015918:	2200      	movs	r2, #0
 801591a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801591e:	4630      	mov	r0, r6
 8015920:	4652      	mov	r2, sl
 8015922:	465b      	mov	r3, fp
 8015924:	4639      	mov	r1, r7
 8015926:	f7eb f8f9 	bl	8000b1c <__aeabi_dcmplt>
 801592a:	2800      	cmp	r0, #0
 801592c:	d0eb      	beq.n	8015906 <pow+0x222>
 801592e:	ec45 4b10 	vmov	d0, r4, r5
 8015932:	f002 fa4d 	bl	8017dd0 <rint>
 8015936:	4622      	mov	r2, r4
 8015938:	462b      	mov	r3, r5
 801593a:	ec51 0b10 	vmov	r0, r1, d0
 801593e:	f7eb f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 8015942:	2800      	cmp	r0, #0
 8015944:	d1df      	bne.n	8015906 <pow+0x222>
 8015946:	2200      	movs	r2, #0
 8015948:	4b18      	ldr	r3, [pc, #96]	; (80159ac <pow+0x2c8>)
 801594a:	e7da      	b.n	8015902 <pow+0x21e>
 801594c:	2200      	movs	r2, #0
 801594e:	2300      	movs	r3, #0
 8015950:	ec51 0b18 	vmov	r0, r1, d8
 8015954:	f7eb f8d8 	bl	8000b08 <__aeabi_dcmpeq>
 8015958:	2800      	cmp	r0, #0
 801595a:	f43f af3a 	beq.w	80157d2 <pow+0xee>
 801595e:	ec47 6b10 	vmov	d0, r6, r7
 8015962:	f002 f99a 	bl	8017c9a <finite>
 8015966:	2800      	cmp	r0, #0
 8015968:	f43f af33 	beq.w	80157d2 <pow+0xee>
 801596c:	ec45 4b10 	vmov	d0, r4, r5
 8015970:	f002 f993 	bl	8017c9a <finite>
 8015974:	2800      	cmp	r0, #0
 8015976:	f43f af2c 	beq.w	80157d2 <pow+0xee>
 801597a:	2304      	movs	r3, #4
 801597c:	9302      	str	r3, [sp, #8]
 801597e:	4b09      	ldr	r3, [pc, #36]	; (80159a4 <pow+0x2c0>)
 8015980:	9303      	str	r3, [sp, #12]
 8015982:	2300      	movs	r3, #0
 8015984:	930a      	str	r3, [sp, #40]	; 0x28
 8015986:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801598a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801598e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8015992:	e7b8      	b.n	8015906 <pow+0x222>
 8015994:	a802      	add	r0, sp, #8
 8015996:	f002 fa0f 	bl	8017db8 <matherr>
 801599a:	2800      	cmp	r0, #0
 801599c:	f47f af11 	bne.w	80157c2 <pow+0xde>
 80159a0:	e7b5      	b.n	801590e <pow+0x22a>
 80159a2:	bf00      	nop
 80159a4:	080189ac 	.word	0x080189ac
 80159a8:	3ff00000 	.word	0x3ff00000
 80159ac:	fff00000 	.word	0xfff00000
 80159b0:	3fe00000 	.word	0x3fe00000
 80159b4:	47efffff 	.word	0x47efffff
 80159b8:	c7efffff 	.word	0xc7efffff
 80159bc:	7ff00000 	.word	0x7ff00000
 80159c0:	20000604 	.word	0x20000604

080159c4 <sqrt>:
 80159c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159c8:	ed2d 8b02 	vpush	{d8}
 80159cc:	b08b      	sub	sp, #44	; 0x2c
 80159ce:	ec55 4b10 	vmov	r4, r5, d0
 80159d2:	f001 fa43 	bl	8016e5c <__ieee754_sqrt>
 80159d6:	4b26      	ldr	r3, [pc, #152]	; (8015a70 <sqrt+0xac>)
 80159d8:	eeb0 8a40 	vmov.f32	s16, s0
 80159dc:	eef0 8a60 	vmov.f32	s17, s1
 80159e0:	f993 6000 	ldrsb.w	r6, [r3]
 80159e4:	1c73      	adds	r3, r6, #1
 80159e6:	d02a      	beq.n	8015a3e <sqrt+0x7a>
 80159e8:	4622      	mov	r2, r4
 80159ea:	462b      	mov	r3, r5
 80159ec:	4620      	mov	r0, r4
 80159ee:	4629      	mov	r1, r5
 80159f0:	f7eb f8bc 	bl	8000b6c <__aeabi_dcmpun>
 80159f4:	4607      	mov	r7, r0
 80159f6:	bb10      	cbnz	r0, 8015a3e <sqrt+0x7a>
 80159f8:	f04f 0800 	mov.w	r8, #0
 80159fc:	f04f 0900 	mov.w	r9, #0
 8015a00:	4642      	mov	r2, r8
 8015a02:	464b      	mov	r3, r9
 8015a04:	4620      	mov	r0, r4
 8015a06:	4629      	mov	r1, r5
 8015a08:	f7eb f888 	bl	8000b1c <__aeabi_dcmplt>
 8015a0c:	b1b8      	cbz	r0, 8015a3e <sqrt+0x7a>
 8015a0e:	2301      	movs	r3, #1
 8015a10:	9300      	str	r3, [sp, #0]
 8015a12:	4b18      	ldr	r3, [pc, #96]	; (8015a74 <sqrt+0xb0>)
 8015a14:	9301      	str	r3, [sp, #4]
 8015a16:	9708      	str	r7, [sp, #32]
 8015a18:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015a1c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015a20:	b9b6      	cbnz	r6, 8015a50 <sqrt+0x8c>
 8015a22:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015a26:	4668      	mov	r0, sp
 8015a28:	f002 f9c6 	bl	8017db8 <matherr>
 8015a2c:	b1d0      	cbz	r0, 8015a64 <sqrt+0xa0>
 8015a2e:	9b08      	ldr	r3, [sp, #32]
 8015a30:	b11b      	cbz	r3, 8015a3a <sqrt+0x76>
 8015a32:	f7fc ff7d 	bl	8012930 <__errno>
 8015a36:	9b08      	ldr	r3, [sp, #32]
 8015a38:	6003      	str	r3, [r0, #0]
 8015a3a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8015a3e:	eeb0 0a48 	vmov.f32	s0, s16
 8015a42:	eef0 0a68 	vmov.f32	s1, s17
 8015a46:	b00b      	add	sp, #44	; 0x2c
 8015a48:	ecbd 8b02 	vpop	{d8}
 8015a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a50:	4642      	mov	r2, r8
 8015a52:	464b      	mov	r3, r9
 8015a54:	4640      	mov	r0, r8
 8015a56:	4649      	mov	r1, r9
 8015a58:	f7ea ff18 	bl	800088c <__aeabi_ddiv>
 8015a5c:	2e02      	cmp	r6, #2
 8015a5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015a62:	d1e0      	bne.n	8015a26 <sqrt+0x62>
 8015a64:	f7fc ff64 	bl	8012930 <__errno>
 8015a68:	2321      	movs	r3, #33	; 0x21
 8015a6a:	6003      	str	r3, [r0, #0]
 8015a6c:	e7df      	b.n	8015a2e <sqrt+0x6a>
 8015a6e:	bf00      	nop
 8015a70:	20000604 	.word	0x20000604
 8015a74:	080189b0 	.word	0x080189b0

08015a78 <__ieee754_asin>:
 8015a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a7c:	ec55 4b10 	vmov	r4, r5, d0
 8015a80:	4bcb      	ldr	r3, [pc, #812]	; (8015db0 <__ieee754_asin+0x338>)
 8015a82:	b087      	sub	sp, #28
 8015a84:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8015a88:	429f      	cmp	r7, r3
 8015a8a:	9501      	str	r5, [sp, #4]
 8015a8c:	dd31      	ble.n	8015af2 <__ieee754_asin+0x7a>
 8015a8e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8015a92:	ee10 3a10 	vmov	r3, s0
 8015a96:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8015a9a:	433b      	orrs	r3, r7
 8015a9c:	d117      	bne.n	8015ace <__ieee754_asin+0x56>
 8015a9e:	a3aa      	add	r3, pc, #680	; (adr r3, 8015d48 <__ieee754_asin+0x2d0>)
 8015aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa4:	ee10 0a10 	vmov	r0, s0
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	f7ea fdc5 	bl	8000638 <__aeabi_dmul>
 8015aae:	a3a8      	add	r3, pc, #672	; (adr r3, 8015d50 <__ieee754_asin+0x2d8>)
 8015ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	460f      	mov	r7, r1
 8015ab8:	4620      	mov	r0, r4
 8015aba:	4629      	mov	r1, r5
 8015abc:	f7ea fdbc 	bl	8000638 <__aeabi_dmul>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	460b      	mov	r3, r1
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	4639      	mov	r1, r7
 8015ac8:	f7ea fc00 	bl	80002cc <__adddf3>
 8015acc:	e00a      	b.n	8015ae4 <__ieee754_asin+0x6c>
 8015ace:	ee10 2a10 	vmov	r2, s0
 8015ad2:	462b      	mov	r3, r5
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	4629      	mov	r1, r5
 8015ad8:	f7ea fbf6 	bl	80002c8 <__aeabi_dsub>
 8015adc:	4602      	mov	r2, r0
 8015ade:	460b      	mov	r3, r1
 8015ae0:	f7ea fed4 	bl	800088c <__aeabi_ddiv>
 8015ae4:	4604      	mov	r4, r0
 8015ae6:	460d      	mov	r5, r1
 8015ae8:	ec45 4b10 	vmov	d0, r4, r5
 8015aec:	b007      	add	sp, #28
 8015aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015af2:	4bb0      	ldr	r3, [pc, #704]	; (8015db4 <__ieee754_asin+0x33c>)
 8015af4:	429f      	cmp	r7, r3
 8015af6:	dc11      	bgt.n	8015b1c <__ieee754_asin+0xa4>
 8015af8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8015afc:	f280 80ae 	bge.w	8015c5c <__ieee754_asin+0x1e4>
 8015b00:	a395      	add	r3, pc, #596	; (adr r3, 8015d58 <__ieee754_asin+0x2e0>)
 8015b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b06:	ee10 0a10 	vmov	r0, s0
 8015b0a:	4629      	mov	r1, r5
 8015b0c:	f7ea fbde 	bl	80002cc <__adddf3>
 8015b10:	2200      	movs	r2, #0
 8015b12:	4ba9      	ldr	r3, [pc, #676]	; (8015db8 <__ieee754_asin+0x340>)
 8015b14:	f7eb f820 	bl	8000b58 <__aeabi_dcmpgt>
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	d1e5      	bne.n	8015ae8 <__ieee754_asin+0x70>
 8015b1c:	ec45 4b10 	vmov	d0, r4, r5
 8015b20:	f002 f8b2 	bl	8017c88 <fabs>
 8015b24:	2000      	movs	r0, #0
 8015b26:	ec53 2b10 	vmov	r2, r3, d0
 8015b2a:	49a3      	ldr	r1, [pc, #652]	; (8015db8 <__ieee754_asin+0x340>)
 8015b2c:	f7ea fbcc 	bl	80002c8 <__aeabi_dsub>
 8015b30:	2200      	movs	r2, #0
 8015b32:	4ba2      	ldr	r3, [pc, #648]	; (8015dbc <__ieee754_asin+0x344>)
 8015b34:	f7ea fd80 	bl	8000638 <__aeabi_dmul>
 8015b38:	a389      	add	r3, pc, #548	; (adr r3, 8015d60 <__ieee754_asin+0x2e8>)
 8015b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b3e:	4604      	mov	r4, r0
 8015b40:	460d      	mov	r5, r1
 8015b42:	f7ea fd79 	bl	8000638 <__aeabi_dmul>
 8015b46:	a388      	add	r3, pc, #544	; (adr r3, 8015d68 <__ieee754_asin+0x2f0>)
 8015b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b4c:	f7ea fbbe 	bl	80002cc <__adddf3>
 8015b50:	4622      	mov	r2, r4
 8015b52:	462b      	mov	r3, r5
 8015b54:	f7ea fd70 	bl	8000638 <__aeabi_dmul>
 8015b58:	a385      	add	r3, pc, #532	; (adr r3, 8015d70 <__ieee754_asin+0x2f8>)
 8015b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5e:	f7ea fbb3 	bl	80002c8 <__aeabi_dsub>
 8015b62:	4622      	mov	r2, r4
 8015b64:	462b      	mov	r3, r5
 8015b66:	f7ea fd67 	bl	8000638 <__aeabi_dmul>
 8015b6a:	a383      	add	r3, pc, #524	; (adr r3, 8015d78 <__ieee754_asin+0x300>)
 8015b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b70:	f7ea fbac 	bl	80002cc <__adddf3>
 8015b74:	4622      	mov	r2, r4
 8015b76:	462b      	mov	r3, r5
 8015b78:	f7ea fd5e 	bl	8000638 <__aeabi_dmul>
 8015b7c:	a380      	add	r3, pc, #512	; (adr r3, 8015d80 <__ieee754_asin+0x308>)
 8015b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b82:	f7ea fba1 	bl	80002c8 <__aeabi_dsub>
 8015b86:	4622      	mov	r2, r4
 8015b88:	462b      	mov	r3, r5
 8015b8a:	f7ea fd55 	bl	8000638 <__aeabi_dmul>
 8015b8e:	a37e      	add	r3, pc, #504	; (adr r3, 8015d88 <__ieee754_asin+0x310>)
 8015b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b94:	f7ea fb9a 	bl	80002cc <__adddf3>
 8015b98:	4622      	mov	r2, r4
 8015b9a:	462b      	mov	r3, r5
 8015b9c:	f7ea fd4c 	bl	8000638 <__aeabi_dmul>
 8015ba0:	a37b      	add	r3, pc, #492	; (adr r3, 8015d90 <__ieee754_asin+0x318>)
 8015ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba6:	4680      	mov	r8, r0
 8015ba8:	4689      	mov	r9, r1
 8015baa:	4620      	mov	r0, r4
 8015bac:	4629      	mov	r1, r5
 8015bae:	f7ea fd43 	bl	8000638 <__aeabi_dmul>
 8015bb2:	a379      	add	r3, pc, #484	; (adr r3, 8015d98 <__ieee754_asin+0x320>)
 8015bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb8:	f7ea fb86 	bl	80002c8 <__aeabi_dsub>
 8015bbc:	4622      	mov	r2, r4
 8015bbe:	462b      	mov	r3, r5
 8015bc0:	f7ea fd3a 	bl	8000638 <__aeabi_dmul>
 8015bc4:	a376      	add	r3, pc, #472	; (adr r3, 8015da0 <__ieee754_asin+0x328>)
 8015bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bca:	f7ea fb7f 	bl	80002cc <__adddf3>
 8015bce:	4622      	mov	r2, r4
 8015bd0:	462b      	mov	r3, r5
 8015bd2:	f7ea fd31 	bl	8000638 <__aeabi_dmul>
 8015bd6:	a374      	add	r3, pc, #464	; (adr r3, 8015da8 <__ieee754_asin+0x330>)
 8015bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bdc:	f7ea fb74 	bl	80002c8 <__aeabi_dsub>
 8015be0:	4622      	mov	r2, r4
 8015be2:	462b      	mov	r3, r5
 8015be4:	f7ea fd28 	bl	8000638 <__aeabi_dmul>
 8015be8:	4b73      	ldr	r3, [pc, #460]	; (8015db8 <__ieee754_asin+0x340>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	f7ea fb6e 	bl	80002cc <__adddf3>
 8015bf0:	ec45 4b10 	vmov	d0, r4, r5
 8015bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015bf8:	f001 f930 	bl	8016e5c <__ieee754_sqrt>
 8015bfc:	4b70      	ldr	r3, [pc, #448]	; (8015dc0 <__ieee754_asin+0x348>)
 8015bfe:	429f      	cmp	r7, r3
 8015c00:	ec5b ab10 	vmov	sl, fp, d0
 8015c04:	f340 80de 	ble.w	8015dc4 <__ieee754_asin+0x34c>
 8015c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c0c:	4640      	mov	r0, r8
 8015c0e:	4649      	mov	r1, r9
 8015c10:	f7ea fe3c 	bl	800088c <__aeabi_ddiv>
 8015c14:	4652      	mov	r2, sl
 8015c16:	465b      	mov	r3, fp
 8015c18:	f7ea fd0e 	bl	8000638 <__aeabi_dmul>
 8015c1c:	4652      	mov	r2, sl
 8015c1e:	465b      	mov	r3, fp
 8015c20:	f7ea fb54 	bl	80002cc <__adddf3>
 8015c24:	4602      	mov	r2, r0
 8015c26:	460b      	mov	r3, r1
 8015c28:	f7ea fb50 	bl	80002cc <__adddf3>
 8015c2c:	a348      	add	r3, pc, #288	; (adr r3, 8015d50 <__ieee754_asin+0x2d8>)
 8015c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c32:	f7ea fb49 	bl	80002c8 <__aeabi_dsub>
 8015c36:	4602      	mov	r2, r0
 8015c38:	460b      	mov	r3, r1
 8015c3a:	a143      	add	r1, pc, #268	; (adr r1, 8015d48 <__ieee754_asin+0x2d0>)
 8015c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c40:	f7ea fb42 	bl	80002c8 <__aeabi_dsub>
 8015c44:	9b01      	ldr	r3, [sp, #4]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	bfdc      	itt	le
 8015c4a:	4602      	movle	r2, r0
 8015c4c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8015c50:	4604      	mov	r4, r0
 8015c52:	460d      	mov	r5, r1
 8015c54:	bfdc      	itt	le
 8015c56:	4614      	movle	r4, r2
 8015c58:	461d      	movle	r5, r3
 8015c5a:	e745      	b.n	8015ae8 <__ieee754_asin+0x70>
 8015c5c:	ee10 2a10 	vmov	r2, s0
 8015c60:	ee10 0a10 	vmov	r0, s0
 8015c64:	462b      	mov	r3, r5
 8015c66:	4629      	mov	r1, r5
 8015c68:	f7ea fce6 	bl	8000638 <__aeabi_dmul>
 8015c6c:	a33c      	add	r3, pc, #240	; (adr r3, 8015d60 <__ieee754_asin+0x2e8>)
 8015c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c72:	4606      	mov	r6, r0
 8015c74:	460f      	mov	r7, r1
 8015c76:	f7ea fcdf 	bl	8000638 <__aeabi_dmul>
 8015c7a:	a33b      	add	r3, pc, #236	; (adr r3, 8015d68 <__ieee754_asin+0x2f0>)
 8015c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c80:	f7ea fb24 	bl	80002cc <__adddf3>
 8015c84:	4632      	mov	r2, r6
 8015c86:	463b      	mov	r3, r7
 8015c88:	f7ea fcd6 	bl	8000638 <__aeabi_dmul>
 8015c8c:	a338      	add	r3, pc, #224	; (adr r3, 8015d70 <__ieee754_asin+0x2f8>)
 8015c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c92:	f7ea fb19 	bl	80002c8 <__aeabi_dsub>
 8015c96:	4632      	mov	r2, r6
 8015c98:	463b      	mov	r3, r7
 8015c9a:	f7ea fccd 	bl	8000638 <__aeabi_dmul>
 8015c9e:	a336      	add	r3, pc, #216	; (adr r3, 8015d78 <__ieee754_asin+0x300>)
 8015ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca4:	f7ea fb12 	bl	80002cc <__adddf3>
 8015ca8:	4632      	mov	r2, r6
 8015caa:	463b      	mov	r3, r7
 8015cac:	f7ea fcc4 	bl	8000638 <__aeabi_dmul>
 8015cb0:	a333      	add	r3, pc, #204	; (adr r3, 8015d80 <__ieee754_asin+0x308>)
 8015cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb6:	f7ea fb07 	bl	80002c8 <__aeabi_dsub>
 8015cba:	4632      	mov	r2, r6
 8015cbc:	463b      	mov	r3, r7
 8015cbe:	f7ea fcbb 	bl	8000638 <__aeabi_dmul>
 8015cc2:	a331      	add	r3, pc, #196	; (adr r3, 8015d88 <__ieee754_asin+0x310>)
 8015cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc8:	f7ea fb00 	bl	80002cc <__adddf3>
 8015ccc:	4632      	mov	r2, r6
 8015cce:	463b      	mov	r3, r7
 8015cd0:	f7ea fcb2 	bl	8000638 <__aeabi_dmul>
 8015cd4:	a32e      	add	r3, pc, #184	; (adr r3, 8015d90 <__ieee754_asin+0x318>)
 8015cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cda:	4680      	mov	r8, r0
 8015cdc:	4689      	mov	r9, r1
 8015cde:	4630      	mov	r0, r6
 8015ce0:	4639      	mov	r1, r7
 8015ce2:	f7ea fca9 	bl	8000638 <__aeabi_dmul>
 8015ce6:	a32c      	add	r3, pc, #176	; (adr r3, 8015d98 <__ieee754_asin+0x320>)
 8015ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cec:	f7ea faec 	bl	80002c8 <__aeabi_dsub>
 8015cf0:	4632      	mov	r2, r6
 8015cf2:	463b      	mov	r3, r7
 8015cf4:	f7ea fca0 	bl	8000638 <__aeabi_dmul>
 8015cf8:	a329      	add	r3, pc, #164	; (adr r3, 8015da0 <__ieee754_asin+0x328>)
 8015cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cfe:	f7ea fae5 	bl	80002cc <__adddf3>
 8015d02:	4632      	mov	r2, r6
 8015d04:	463b      	mov	r3, r7
 8015d06:	f7ea fc97 	bl	8000638 <__aeabi_dmul>
 8015d0a:	a327      	add	r3, pc, #156	; (adr r3, 8015da8 <__ieee754_asin+0x330>)
 8015d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d10:	f7ea fada 	bl	80002c8 <__aeabi_dsub>
 8015d14:	4632      	mov	r2, r6
 8015d16:	463b      	mov	r3, r7
 8015d18:	f7ea fc8e 	bl	8000638 <__aeabi_dmul>
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	4b26      	ldr	r3, [pc, #152]	; (8015db8 <__ieee754_asin+0x340>)
 8015d20:	f7ea fad4 	bl	80002cc <__adddf3>
 8015d24:	4602      	mov	r2, r0
 8015d26:	460b      	mov	r3, r1
 8015d28:	4640      	mov	r0, r8
 8015d2a:	4649      	mov	r1, r9
 8015d2c:	f7ea fdae 	bl	800088c <__aeabi_ddiv>
 8015d30:	4622      	mov	r2, r4
 8015d32:	462b      	mov	r3, r5
 8015d34:	f7ea fc80 	bl	8000638 <__aeabi_dmul>
 8015d38:	4602      	mov	r2, r0
 8015d3a:	460b      	mov	r3, r1
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	4629      	mov	r1, r5
 8015d40:	e6c2      	b.n	8015ac8 <__ieee754_asin+0x50>
 8015d42:	bf00      	nop
 8015d44:	f3af 8000 	nop.w
 8015d48:	54442d18 	.word	0x54442d18
 8015d4c:	3ff921fb 	.word	0x3ff921fb
 8015d50:	33145c07 	.word	0x33145c07
 8015d54:	3c91a626 	.word	0x3c91a626
 8015d58:	8800759c 	.word	0x8800759c
 8015d5c:	7e37e43c 	.word	0x7e37e43c
 8015d60:	0dfdf709 	.word	0x0dfdf709
 8015d64:	3f023de1 	.word	0x3f023de1
 8015d68:	7501b288 	.word	0x7501b288
 8015d6c:	3f49efe0 	.word	0x3f49efe0
 8015d70:	b5688f3b 	.word	0xb5688f3b
 8015d74:	3fa48228 	.word	0x3fa48228
 8015d78:	0e884455 	.word	0x0e884455
 8015d7c:	3fc9c155 	.word	0x3fc9c155
 8015d80:	03eb6f7d 	.word	0x03eb6f7d
 8015d84:	3fd4d612 	.word	0x3fd4d612
 8015d88:	55555555 	.word	0x55555555
 8015d8c:	3fc55555 	.word	0x3fc55555
 8015d90:	b12e9282 	.word	0xb12e9282
 8015d94:	3fb3b8c5 	.word	0x3fb3b8c5
 8015d98:	1b8d0159 	.word	0x1b8d0159
 8015d9c:	3fe6066c 	.word	0x3fe6066c
 8015da0:	9c598ac8 	.word	0x9c598ac8
 8015da4:	40002ae5 	.word	0x40002ae5
 8015da8:	1c8a2d4b 	.word	0x1c8a2d4b
 8015dac:	40033a27 	.word	0x40033a27
 8015db0:	3fefffff 	.word	0x3fefffff
 8015db4:	3fdfffff 	.word	0x3fdfffff
 8015db8:	3ff00000 	.word	0x3ff00000
 8015dbc:	3fe00000 	.word	0x3fe00000
 8015dc0:	3fef3332 	.word	0x3fef3332
 8015dc4:	ee10 2a10 	vmov	r2, s0
 8015dc8:	ee10 0a10 	vmov	r0, s0
 8015dcc:	465b      	mov	r3, fp
 8015dce:	4659      	mov	r1, fp
 8015dd0:	f7ea fa7c 	bl	80002cc <__adddf3>
 8015dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ddc:	4640      	mov	r0, r8
 8015dde:	4649      	mov	r1, r9
 8015de0:	f7ea fd54 	bl	800088c <__aeabi_ddiv>
 8015de4:	4602      	mov	r2, r0
 8015de6:	460b      	mov	r3, r1
 8015de8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015dec:	f7ea fc24 	bl	8000638 <__aeabi_dmul>
 8015df0:	2600      	movs	r6, #0
 8015df2:	4680      	mov	r8, r0
 8015df4:	4689      	mov	r9, r1
 8015df6:	4632      	mov	r2, r6
 8015df8:	465b      	mov	r3, fp
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	4659      	mov	r1, fp
 8015dfe:	f7ea fc1b 	bl	8000638 <__aeabi_dmul>
 8015e02:	4602      	mov	r2, r0
 8015e04:	460b      	mov	r3, r1
 8015e06:	4620      	mov	r0, r4
 8015e08:	4629      	mov	r1, r5
 8015e0a:	f7ea fa5d 	bl	80002c8 <__aeabi_dsub>
 8015e0e:	4632      	mov	r2, r6
 8015e10:	4604      	mov	r4, r0
 8015e12:	460d      	mov	r5, r1
 8015e14:	465b      	mov	r3, fp
 8015e16:	4650      	mov	r0, sl
 8015e18:	4659      	mov	r1, fp
 8015e1a:	f7ea fa57 	bl	80002cc <__adddf3>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	460b      	mov	r3, r1
 8015e22:	4620      	mov	r0, r4
 8015e24:	4629      	mov	r1, r5
 8015e26:	f7ea fd31 	bl	800088c <__aeabi_ddiv>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	f7ea fa4d 	bl	80002cc <__adddf3>
 8015e32:	4602      	mov	r2, r0
 8015e34:	460b      	mov	r3, r1
 8015e36:	a114      	add	r1, pc, #80	; (adr r1, 8015e88 <__ieee754_asin+0x410>)
 8015e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e3c:	f7ea fa44 	bl	80002c8 <__aeabi_dsub>
 8015e40:	4602      	mov	r2, r0
 8015e42:	460b      	mov	r3, r1
 8015e44:	4640      	mov	r0, r8
 8015e46:	4649      	mov	r1, r9
 8015e48:	f7ea fa3e 	bl	80002c8 <__aeabi_dsub>
 8015e4c:	465f      	mov	r7, fp
 8015e4e:	4604      	mov	r4, r0
 8015e50:	460d      	mov	r5, r1
 8015e52:	4632      	mov	r2, r6
 8015e54:	465b      	mov	r3, fp
 8015e56:	4630      	mov	r0, r6
 8015e58:	4639      	mov	r1, r7
 8015e5a:	f7ea fa37 	bl	80002cc <__adddf3>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	460b      	mov	r3, r1
 8015e62:	a10b      	add	r1, pc, #44	; (adr r1, 8015e90 <__ieee754_asin+0x418>)
 8015e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e68:	f7ea fa2e 	bl	80002c8 <__aeabi_dsub>
 8015e6c:	4602      	mov	r2, r0
 8015e6e:	460b      	mov	r3, r1
 8015e70:	4620      	mov	r0, r4
 8015e72:	4629      	mov	r1, r5
 8015e74:	f7ea fa28 	bl	80002c8 <__aeabi_dsub>
 8015e78:	4602      	mov	r2, r0
 8015e7a:	460b      	mov	r3, r1
 8015e7c:	a104      	add	r1, pc, #16	; (adr r1, 8015e90 <__ieee754_asin+0x418>)
 8015e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e82:	e6dd      	b.n	8015c40 <__ieee754_asin+0x1c8>
 8015e84:	f3af 8000 	nop.w
 8015e88:	33145c07 	.word	0x33145c07
 8015e8c:	3c91a626 	.word	0x3c91a626
 8015e90:	54442d18 	.word	0x54442d18
 8015e94:	3fe921fb 	.word	0x3fe921fb

08015e98 <__ieee754_atan2>:
 8015e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e9c:	ec57 6b11 	vmov	r6, r7, d1
 8015ea0:	4273      	negs	r3, r6
 8015ea2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015ea6:	4333      	orrs	r3, r6
 8015ea8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8016050 <__ieee754_atan2+0x1b8>
 8015eac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015eb0:	4573      	cmp	r3, lr
 8015eb2:	ec51 0b10 	vmov	r0, r1, d0
 8015eb6:	ee11 8a10 	vmov	r8, s2
 8015eba:	d80a      	bhi.n	8015ed2 <__ieee754_atan2+0x3a>
 8015ebc:	4244      	negs	r4, r0
 8015ebe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015ec2:	4304      	orrs	r4, r0
 8015ec4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015ec8:	4574      	cmp	r4, lr
 8015eca:	468c      	mov	ip, r1
 8015ecc:	ee10 9a10 	vmov	r9, s0
 8015ed0:	d907      	bls.n	8015ee2 <__ieee754_atan2+0x4a>
 8015ed2:	4632      	mov	r2, r6
 8015ed4:	463b      	mov	r3, r7
 8015ed6:	f7ea f9f9 	bl	80002cc <__adddf3>
 8015eda:	ec41 0b10 	vmov	d0, r0, r1
 8015ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ee2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015ee6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015eea:	4334      	orrs	r4, r6
 8015eec:	d103      	bne.n	8015ef6 <__ieee754_atan2+0x5e>
 8015eee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ef2:	f001 bd29 	b.w	8017948 <atan>
 8015ef6:	17bc      	asrs	r4, r7, #30
 8015ef8:	f004 0402 	and.w	r4, r4, #2
 8015efc:	ea53 0909 	orrs.w	r9, r3, r9
 8015f00:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015f04:	d107      	bne.n	8015f16 <__ieee754_atan2+0x7e>
 8015f06:	2c02      	cmp	r4, #2
 8015f08:	d073      	beq.n	8015ff2 <__ieee754_atan2+0x15a>
 8015f0a:	2c03      	cmp	r4, #3
 8015f0c:	d1e5      	bne.n	8015eda <__ieee754_atan2+0x42>
 8015f0e:	a13e      	add	r1, pc, #248	; (adr r1, 8016008 <__ieee754_atan2+0x170>)
 8015f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f14:	e7e1      	b.n	8015eda <__ieee754_atan2+0x42>
 8015f16:	ea52 0808 	orrs.w	r8, r2, r8
 8015f1a:	d106      	bne.n	8015f2a <__ieee754_atan2+0x92>
 8015f1c:	f1bc 0f00 	cmp.w	ip, #0
 8015f20:	da6b      	bge.n	8015ffa <__ieee754_atan2+0x162>
 8015f22:	a13b      	add	r1, pc, #236	; (adr r1, 8016010 <__ieee754_atan2+0x178>)
 8015f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f28:	e7d7      	b.n	8015eda <__ieee754_atan2+0x42>
 8015f2a:	4572      	cmp	r2, lr
 8015f2c:	d120      	bne.n	8015f70 <__ieee754_atan2+0xd8>
 8015f2e:	4293      	cmp	r3, r2
 8015f30:	d111      	bne.n	8015f56 <__ieee754_atan2+0xbe>
 8015f32:	2c02      	cmp	r4, #2
 8015f34:	d007      	beq.n	8015f46 <__ieee754_atan2+0xae>
 8015f36:	2c03      	cmp	r4, #3
 8015f38:	d009      	beq.n	8015f4e <__ieee754_atan2+0xb6>
 8015f3a:	2c01      	cmp	r4, #1
 8015f3c:	d155      	bne.n	8015fea <__ieee754_atan2+0x152>
 8015f3e:	a136      	add	r1, pc, #216	; (adr r1, 8016018 <__ieee754_atan2+0x180>)
 8015f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f44:	e7c9      	b.n	8015eda <__ieee754_atan2+0x42>
 8015f46:	a136      	add	r1, pc, #216	; (adr r1, 8016020 <__ieee754_atan2+0x188>)
 8015f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f4c:	e7c5      	b.n	8015eda <__ieee754_atan2+0x42>
 8015f4e:	a136      	add	r1, pc, #216	; (adr r1, 8016028 <__ieee754_atan2+0x190>)
 8015f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f54:	e7c1      	b.n	8015eda <__ieee754_atan2+0x42>
 8015f56:	2c02      	cmp	r4, #2
 8015f58:	d04b      	beq.n	8015ff2 <__ieee754_atan2+0x15a>
 8015f5a:	2c03      	cmp	r4, #3
 8015f5c:	d0d7      	beq.n	8015f0e <__ieee754_atan2+0x76>
 8015f5e:	2c01      	cmp	r4, #1
 8015f60:	f04f 0000 	mov.w	r0, #0
 8015f64:	d102      	bne.n	8015f6c <__ieee754_atan2+0xd4>
 8015f66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015f6a:	e7b6      	b.n	8015eda <__ieee754_atan2+0x42>
 8015f6c:	2100      	movs	r1, #0
 8015f6e:	e7b4      	b.n	8015eda <__ieee754_atan2+0x42>
 8015f70:	4573      	cmp	r3, lr
 8015f72:	d0d3      	beq.n	8015f1c <__ieee754_atan2+0x84>
 8015f74:	1a9b      	subs	r3, r3, r2
 8015f76:	151b      	asrs	r3, r3, #20
 8015f78:	2b3c      	cmp	r3, #60	; 0x3c
 8015f7a:	dc1e      	bgt.n	8015fba <__ieee754_atan2+0x122>
 8015f7c:	2f00      	cmp	r7, #0
 8015f7e:	da01      	bge.n	8015f84 <__ieee754_atan2+0xec>
 8015f80:	333c      	adds	r3, #60	; 0x3c
 8015f82:	db1e      	blt.n	8015fc2 <__ieee754_atan2+0x12a>
 8015f84:	4632      	mov	r2, r6
 8015f86:	463b      	mov	r3, r7
 8015f88:	f7ea fc80 	bl	800088c <__aeabi_ddiv>
 8015f8c:	ec41 0b10 	vmov	d0, r0, r1
 8015f90:	f001 fe7a 	bl	8017c88 <fabs>
 8015f94:	f001 fcd8 	bl	8017948 <atan>
 8015f98:	ec51 0b10 	vmov	r0, r1, d0
 8015f9c:	2c01      	cmp	r4, #1
 8015f9e:	d013      	beq.n	8015fc8 <__ieee754_atan2+0x130>
 8015fa0:	2c02      	cmp	r4, #2
 8015fa2:	d015      	beq.n	8015fd0 <__ieee754_atan2+0x138>
 8015fa4:	2c00      	cmp	r4, #0
 8015fa6:	d098      	beq.n	8015eda <__ieee754_atan2+0x42>
 8015fa8:	a321      	add	r3, pc, #132	; (adr r3, 8016030 <__ieee754_atan2+0x198>)
 8015faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fae:	f7ea f98b 	bl	80002c8 <__aeabi_dsub>
 8015fb2:	a321      	add	r3, pc, #132	; (adr r3, 8016038 <__ieee754_atan2+0x1a0>)
 8015fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb8:	e014      	b.n	8015fe4 <__ieee754_atan2+0x14c>
 8015fba:	a121      	add	r1, pc, #132	; (adr r1, 8016040 <__ieee754_atan2+0x1a8>)
 8015fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fc0:	e7ec      	b.n	8015f9c <__ieee754_atan2+0x104>
 8015fc2:	2000      	movs	r0, #0
 8015fc4:	2100      	movs	r1, #0
 8015fc6:	e7e9      	b.n	8015f9c <__ieee754_atan2+0x104>
 8015fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015fcc:	4619      	mov	r1, r3
 8015fce:	e784      	b.n	8015eda <__ieee754_atan2+0x42>
 8015fd0:	a317      	add	r3, pc, #92	; (adr r3, 8016030 <__ieee754_atan2+0x198>)
 8015fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fd6:	f7ea f977 	bl	80002c8 <__aeabi_dsub>
 8015fda:	4602      	mov	r2, r0
 8015fdc:	460b      	mov	r3, r1
 8015fde:	a116      	add	r1, pc, #88	; (adr r1, 8016038 <__ieee754_atan2+0x1a0>)
 8015fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fe4:	f7ea f970 	bl	80002c8 <__aeabi_dsub>
 8015fe8:	e777      	b.n	8015eda <__ieee754_atan2+0x42>
 8015fea:	a117      	add	r1, pc, #92	; (adr r1, 8016048 <__ieee754_atan2+0x1b0>)
 8015fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ff0:	e773      	b.n	8015eda <__ieee754_atan2+0x42>
 8015ff2:	a111      	add	r1, pc, #68	; (adr r1, 8016038 <__ieee754_atan2+0x1a0>)
 8015ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ff8:	e76f      	b.n	8015eda <__ieee754_atan2+0x42>
 8015ffa:	a111      	add	r1, pc, #68	; (adr r1, 8016040 <__ieee754_atan2+0x1a8>)
 8015ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016000:	e76b      	b.n	8015eda <__ieee754_atan2+0x42>
 8016002:	bf00      	nop
 8016004:	f3af 8000 	nop.w
 8016008:	54442d18 	.word	0x54442d18
 801600c:	c00921fb 	.word	0xc00921fb
 8016010:	54442d18 	.word	0x54442d18
 8016014:	bff921fb 	.word	0xbff921fb
 8016018:	54442d18 	.word	0x54442d18
 801601c:	bfe921fb 	.word	0xbfe921fb
 8016020:	7f3321d2 	.word	0x7f3321d2
 8016024:	4002d97c 	.word	0x4002d97c
 8016028:	7f3321d2 	.word	0x7f3321d2
 801602c:	c002d97c 	.word	0xc002d97c
 8016030:	33145c07 	.word	0x33145c07
 8016034:	3ca1a626 	.word	0x3ca1a626
 8016038:	54442d18 	.word	0x54442d18
 801603c:	400921fb 	.word	0x400921fb
 8016040:	54442d18 	.word	0x54442d18
 8016044:	3ff921fb 	.word	0x3ff921fb
 8016048:	54442d18 	.word	0x54442d18
 801604c:	3fe921fb 	.word	0x3fe921fb
 8016050:	7ff00000 	.word	0x7ff00000
 8016054:	00000000 	.word	0x00000000

08016058 <__ieee754_pow>:
 8016058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	b091      	sub	sp, #68	; 0x44
 801605e:	ed8d 1b00 	vstr	d1, [sp]
 8016062:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016066:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801606a:	ea58 0302 	orrs.w	r3, r8, r2
 801606e:	ec57 6b10 	vmov	r6, r7, d0
 8016072:	f000 84be 	beq.w	80169f2 <__ieee754_pow+0x99a>
 8016076:	4b7a      	ldr	r3, [pc, #488]	; (8016260 <__ieee754_pow+0x208>)
 8016078:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801607c:	429c      	cmp	r4, r3
 801607e:	463d      	mov	r5, r7
 8016080:	ee10 aa10 	vmov	sl, s0
 8016084:	dc09      	bgt.n	801609a <__ieee754_pow+0x42>
 8016086:	d103      	bne.n	8016090 <__ieee754_pow+0x38>
 8016088:	b93e      	cbnz	r6, 801609a <__ieee754_pow+0x42>
 801608a:	45a0      	cmp	r8, r4
 801608c:	dc0d      	bgt.n	80160aa <__ieee754_pow+0x52>
 801608e:	e001      	b.n	8016094 <__ieee754_pow+0x3c>
 8016090:	4598      	cmp	r8, r3
 8016092:	dc02      	bgt.n	801609a <__ieee754_pow+0x42>
 8016094:	4598      	cmp	r8, r3
 8016096:	d10e      	bne.n	80160b6 <__ieee754_pow+0x5e>
 8016098:	b16a      	cbz	r2, 80160b6 <__ieee754_pow+0x5e>
 801609a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801609e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80160a2:	ea54 030a 	orrs.w	r3, r4, sl
 80160a6:	f000 84a4 	beq.w	80169f2 <__ieee754_pow+0x99a>
 80160aa:	486e      	ldr	r0, [pc, #440]	; (8016264 <__ieee754_pow+0x20c>)
 80160ac:	b011      	add	sp, #68	; 0x44
 80160ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b2:	f001 be85 	b.w	8017dc0 <nan>
 80160b6:	2d00      	cmp	r5, #0
 80160b8:	da53      	bge.n	8016162 <__ieee754_pow+0x10a>
 80160ba:	4b6b      	ldr	r3, [pc, #428]	; (8016268 <__ieee754_pow+0x210>)
 80160bc:	4598      	cmp	r8, r3
 80160be:	dc4d      	bgt.n	801615c <__ieee754_pow+0x104>
 80160c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80160c4:	4598      	cmp	r8, r3
 80160c6:	dd4c      	ble.n	8016162 <__ieee754_pow+0x10a>
 80160c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80160cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80160d0:	2b14      	cmp	r3, #20
 80160d2:	dd26      	ble.n	8016122 <__ieee754_pow+0xca>
 80160d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80160d8:	fa22 f103 	lsr.w	r1, r2, r3
 80160dc:	fa01 f303 	lsl.w	r3, r1, r3
 80160e0:	4293      	cmp	r3, r2
 80160e2:	d13e      	bne.n	8016162 <__ieee754_pow+0x10a>
 80160e4:	f001 0101 	and.w	r1, r1, #1
 80160e8:	f1c1 0b02 	rsb	fp, r1, #2
 80160ec:	2a00      	cmp	r2, #0
 80160ee:	d15b      	bne.n	80161a8 <__ieee754_pow+0x150>
 80160f0:	4b5b      	ldr	r3, [pc, #364]	; (8016260 <__ieee754_pow+0x208>)
 80160f2:	4598      	cmp	r8, r3
 80160f4:	d124      	bne.n	8016140 <__ieee754_pow+0xe8>
 80160f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80160fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80160fe:	ea53 030a 	orrs.w	r3, r3, sl
 8016102:	f000 8476 	beq.w	80169f2 <__ieee754_pow+0x99a>
 8016106:	4b59      	ldr	r3, [pc, #356]	; (801626c <__ieee754_pow+0x214>)
 8016108:	429c      	cmp	r4, r3
 801610a:	dd2d      	ble.n	8016168 <__ieee754_pow+0x110>
 801610c:	f1b9 0f00 	cmp.w	r9, #0
 8016110:	f280 8473 	bge.w	80169fa <__ieee754_pow+0x9a2>
 8016114:	2000      	movs	r0, #0
 8016116:	2100      	movs	r1, #0
 8016118:	ec41 0b10 	vmov	d0, r0, r1
 801611c:	b011      	add	sp, #68	; 0x44
 801611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016122:	2a00      	cmp	r2, #0
 8016124:	d13e      	bne.n	80161a4 <__ieee754_pow+0x14c>
 8016126:	f1c3 0314 	rsb	r3, r3, #20
 801612a:	fa48 f103 	asr.w	r1, r8, r3
 801612e:	fa01 f303 	lsl.w	r3, r1, r3
 8016132:	4543      	cmp	r3, r8
 8016134:	f040 8469 	bne.w	8016a0a <__ieee754_pow+0x9b2>
 8016138:	f001 0101 	and.w	r1, r1, #1
 801613c:	f1c1 0b02 	rsb	fp, r1, #2
 8016140:	4b4b      	ldr	r3, [pc, #300]	; (8016270 <__ieee754_pow+0x218>)
 8016142:	4598      	cmp	r8, r3
 8016144:	d118      	bne.n	8016178 <__ieee754_pow+0x120>
 8016146:	f1b9 0f00 	cmp.w	r9, #0
 801614a:	f280 845a 	bge.w	8016a02 <__ieee754_pow+0x9aa>
 801614e:	4948      	ldr	r1, [pc, #288]	; (8016270 <__ieee754_pow+0x218>)
 8016150:	4632      	mov	r2, r6
 8016152:	463b      	mov	r3, r7
 8016154:	2000      	movs	r0, #0
 8016156:	f7ea fb99 	bl	800088c <__aeabi_ddiv>
 801615a:	e7dd      	b.n	8016118 <__ieee754_pow+0xc0>
 801615c:	f04f 0b02 	mov.w	fp, #2
 8016160:	e7c4      	b.n	80160ec <__ieee754_pow+0x94>
 8016162:	f04f 0b00 	mov.w	fp, #0
 8016166:	e7c1      	b.n	80160ec <__ieee754_pow+0x94>
 8016168:	f1b9 0f00 	cmp.w	r9, #0
 801616c:	dad2      	bge.n	8016114 <__ieee754_pow+0xbc>
 801616e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016172:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016176:	e7cf      	b.n	8016118 <__ieee754_pow+0xc0>
 8016178:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801617c:	d106      	bne.n	801618c <__ieee754_pow+0x134>
 801617e:	4632      	mov	r2, r6
 8016180:	463b      	mov	r3, r7
 8016182:	4610      	mov	r0, r2
 8016184:	4619      	mov	r1, r3
 8016186:	f7ea fa57 	bl	8000638 <__aeabi_dmul>
 801618a:	e7c5      	b.n	8016118 <__ieee754_pow+0xc0>
 801618c:	4b39      	ldr	r3, [pc, #228]	; (8016274 <__ieee754_pow+0x21c>)
 801618e:	4599      	cmp	r9, r3
 8016190:	d10a      	bne.n	80161a8 <__ieee754_pow+0x150>
 8016192:	2d00      	cmp	r5, #0
 8016194:	db08      	blt.n	80161a8 <__ieee754_pow+0x150>
 8016196:	ec47 6b10 	vmov	d0, r6, r7
 801619a:	b011      	add	sp, #68	; 0x44
 801619c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a0:	f000 be5c 	b.w	8016e5c <__ieee754_sqrt>
 80161a4:	f04f 0b00 	mov.w	fp, #0
 80161a8:	ec47 6b10 	vmov	d0, r6, r7
 80161ac:	f001 fd6c 	bl	8017c88 <fabs>
 80161b0:	ec51 0b10 	vmov	r0, r1, d0
 80161b4:	f1ba 0f00 	cmp.w	sl, #0
 80161b8:	d127      	bne.n	801620a <__ieee754_pow+0x1b2>
 80161ba:	b124      	cbz	r4, 80161c6 <__ieee754_pow+0x16e>
 80161bc:	4b2c      	ldr	r3, [pc, #176]	; (8016270 <__ieee754_pow+0x218>)
 80161be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d121      	bne.n	801620a <__ieee754_pow+0x1b2>
 80161c6:	f1b9 0f00 	cmp.w	r9, #0
 80161ca:	da05      	bge.n	80161d8 <__ieee754_pow+0x180>
 80161cc:	4602      	mov	r2, r0
 80161ce:	460b      	mov	r3, r1
 80161d0:	2000      	movs	r0, #0
 80161d2:	4927      	ldr	r1, [pc, #156]	; (8016270 <__ieee754_pow+0x218>)
 80161d4:	f7ea fb5a 	bl	800088c <__aeabi_ddiv>
 80161d8:	2d00      	cmp	r5, #0
 80161da:	da9d      	bge.n	8016118 <__ieee754_pow+0xc0>
 80161dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80161e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80161e4:	ea54 030b 	orrs.w	r3, r4, fp
 80161e8:	d108      	bne.n	80161fc <__ieee754_pow+0x1a4>
 80161ea:	4602      	mov	r2, r0
 80161ec:	460b      	mov	r3, r1
 80161ee:	4610      	mov	r0, r2
 80161f0:	4619      	mov	r1, r3
 80161f2:	f7ea f869 	bl	80002c8 <__aeabi_dsub>
 80161f6:	4602      	mov	r2, r0
 80161f8:	460b      	mov	r3, r1
 80161fa:	e7ac      	b.n	8016156 <__ieee754_pow+0xfe>
 80161fc:	f1bb 0f01 	cmp.w	fp, #1
 8016200:	d18a      	bne.n	8016118 <__ieee754_pow+0xc0>
 8016202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016206:	4619      	mov	r1, r3
 8016208:	e786      	b.n	8016118 <__ieee754_pow+0xc0>
 801620a:	0fed      	lsrs	r5, r5, #31
 801620c:	1e6b      	subs	r3, r5, #1
 801620e:	930d      	str	r3, [sp, #52]	; 0x34
 8016210:	ea5b 0303 	orrs.w	r3, fp, r3
 8016214:	d102      	bne.n	801621c <__ieee754_pow+0x1c4>
 8016216:	4632      	mov	r2, r6
 8016218:	463b      	mov	r3, r7
 801621a:	e7e8      	b.n	80161ee <__ieee754_pow+0x196>
 801621c:	4b16      	ldr	r3, [pc, #88]	; (8016278 <__ieee754_pow+0x220>)
 801621e:	4598      	cmp	r8, r3
 8016220:	f340 80fe 	ble.w	8016420 <__ieee754_pow+0x3c8>
 8016224:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016228:	4598      	cmp	r8, r3
 801622a:	dd0a      	ble.n	8016242 <__ieee754_pow+0x1ea>
 801622c:	4b0f      	ldr	r3, [pc, #60]	; (801626c <__ieee754_pow+0x214>)
 801622e:	429c      	cmp	r4, r3
 8016230:	dc0d      	bgt.n	801624e <__ieee754_pow+0x1f6>
 8016232:	f1b9 0f00 	cmp.w	r9, #0
 8016236:	f6bf af6d 	bge.w	8016114 <__ieee754_pow+0xbc>
 801623a:	a307      	add	r3, pc, #28	; (adr r3, 8016258 <__ieee754_pow+0x200>)
 801623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016240:	e79f      	b.n	8016182 <__ieee754_pow+0x12a>
 8016242:	4b0e      	ldr	r3, [pc, #56]	; (801627c <__ieee754_pow+0x224>)
 8016244:	429c      	cmp	r4, r3
 8016246:	ddf4      	ble.n	8016232 <__ieee754_pow+0x1da>
 8016248:	4b09      	ldr	r3, [pc, #36]	; (8016270 <__ieee754_pow+0x218>)
 801624a:	429c      	cmp	r4, r3
 801624c:	dd18      	ble.n	8016280 <__ieee754_pow+0x228>
 801624e:	f1b9 0f00 	cmp.w	r9, #0
 8016252:	dcf2      	bgt.n	801623a <__ieee754_pow+0x1e2>
 8016254:	e75e      	b.n	8016114 <__ieee754_pow+0xbc>
 8016256:	bf00      	nop
 8016258:	8800759c 	.word	0x8800759c
 801625c:	7e37e43c 	.word	0x7e37e43c
 8016260:	7ff00000 	.word	0x7ff00000
 8016264:	080186e3 	.word	0x080186e3
 8016268:	433fffff 	.word	0x433fffff
 801626c:	3fefffff 	.word	0x3fefffff
 8016270:	3ff00000 	.word	0x3ff00000
 8016274:	3fe00000 	.word	0x3fe00000
 8016278:	41e00000 	.word	0x41e00000
 801627c:	3feffffe 	.word	0x3feffffe
 8016280:	2200      	movs	r2, #0
 8016282:	4b63      	ldr	r3, [pc, #396]	; (8016410 <__ieee754_pow+0x3b8>)
 8016284:	f7ea f820 	bl	80002c8 <__aeabi_dsub>
 8016288:	a355      	add	r3, pc, #340	; (adr r3, 80163e0 <__ieee754_pow+0x388>)
 801628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801628e:	4604      	mov	r4, r0
 8016290:	460d      	mov	r5, r1
 8016292:	f7ea f9d1 	bl	8000638 <__aeabi_dmul>
 8016296:	a354      	add	r3, pc, #336	; (adr r3, 80163e8 <__ieee754_pow+0x390>)
 8016298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801629c:	4606      	mov	r6, r0
 801629e:	460f      	mov	r7, r1
 80162a0:	4620      	mov	r0, r4
 80162a2:	4629      	mov	r1, r5
 80162a4:	f7ea f9c8 	bl	8000638 <__aeabi_dmul>
 80162a8:	2200      	movs	r2, #0
 80162aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80162ae:	4b59      	ldr	r3, [pc, #356]	; (8016414 <__ieee754_pow+0x3bc>)
 80162b0:	4620      	mov	r0, r4
 80162b2:	4629      	mov	r1, r5
 80162b4:	f7ea f9c0 	bl	8000638 <__aeabi_dmul>
 80162b8:	4602      	mov	r2, r0
 80162ba:	460b      	mov	r3, r1
 80162bc:	a14c      	add	r1, pc, #304	; (adr r1, 80163f0 <__ieee754_pow+0x398>)
 80162be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162c2:	f7ea f801 	bl	80002c8 <__aeabi_dsub>
 80162c6:	4622      	mov	r2, r4
 80162c8:	462b      	mov	r3, r5
 80162ca:	f7ea f9b5 	bl	8000638 <__aeabi_dmul>
 80162ce:	4602      	mov	r2, r0
 80162d0:	460b      	mov	r3, r1
 80162d2:	2000      	movs	r0, #0
 80162d4:	4950      	ldr	r1, [pc, #320]	; (8016418 <__ieee754_pow+0x3c0>)
 80162d6:	f7e9 fff7 	bl	80002c8 <__aeabi_dsub>
 80162da:	4622      	mov	r2, r4
 80162dc:	462b      	mov	r3, r5
 80162de:	4680      	mov	r8, r0
 80162e0:	4689      	mov	r9, r1
 80162e2:	4620      	mov	r0, r4
 80162e4:	4629      	mov	r1, r5
 80162e6:	f7ea f9a7 	bl	8000638 <__aeabi_dmul>
 80162ea:	4602      	mov	r2, r0
 80162ec:	460b      	mov	r3, r1
 80162ee:	4640      	mov	r0, r8
 80162f0:	4649      	mov	r1, r9
 80162f2:	f7ea f9a1 	bl	8000638 <__aeabi_dmul>
 80162f6:	a340      	add	r3, pc, #256	; (adr r3, 80163f8 <__ieee754_pow+0x3a0>)
 80162f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fc:	f7ea f99c 	bl	8000638 <__aeabi_dmul>
 8016300:	4602      	mov	r2, r0
 8016302:	460b      	mov	r3, r1
 8016304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016308:	f7e9 ffde 	bl	80002c8 <__aeabi_dsub>
 801630c:	4602      	mov	r2, r0
 801630e:	460b      	mov	r3, r1
 8016310:	4604      	mov	r4, r0
 8016312:	460d      	mov	r5, r1
 8016314:	4630      	mov	r0, r6
 8016316:	4639      	mov	r1, r7
 8016318:	f7e9 ffd8 	bl	80002cc <__adddf3>
 801631c:	2000      	movs	r0, #0
 801631e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016322:	4632      	mov	r2, r6
 8016324:	463b      	mov	r3, r7
 8016326:	f7e9 ffcf 	bl	80002c8 <__aeabi_dsub>
 801632a:	4602      	mov	r2, r0
 801632c:	460b      	mov	r3, r1
 801632e:	4620      	mov	r0, r4
 8016330:	4629      	mov	r1, r5
 8016332:	f7e9 ffc9 	bl	80002c8 <__aeabi_dsub>
 8016336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016338:	f10b 33ff 	add.w	r3, fp, #4294967295
 801633c:	4313      	orrs	r3, r2
 801633e:	4606      	mov	r6, r0
 8016340:	460f      	mov	r7, r1
 8016342:	f040 81eb 	bne.w	801671c <__ieee754_pow+0x6c4>
 8016346:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016400 <__ieee754_pow+0x3a8>
 801634a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801634e:	2400      	movs	r4, #0
 8016350:	4622      	mov	r2, r4
 8016352:	462b      	mov	r3, r5
 8016354:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016358:	ed8d 7b02 	vstr	d7, [sp, #8]
 801635c:	f7e9 ffb4 	bl	80002c8 <__aeabi_dsub>
 8016360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016364:	f7ea f968 	bl	8000638 <__aeabi_dmul>
 8016368:	e9dd 2300 	ldrd	r2, r3, [sp]
 801636c:	4680      	mov	r8, r0
 801636e:	4689      	mov	r9, r1
 8016370:	4630      	mov	r0, r6
 8016372:	4639      	mov	r1, r7
 8016374:	f7ea f960 	bl	8000638 <__aeabi_dmul>
 8016378:	4602      	mov	r2, r0
 801637a:	460b      	mov	r3, r1
 801637c:	4640      	mov	r0, r8
 801637e:	4649      	mov	r1, r9
 8016380:	f7e9 ffa4 	bl	80002cc <__adddf3>
 8016384:	4622      	mov	r2, r4
 8016386:	462b      	mov	r3, r5
 8016388:	4680      	mov	r8, r0
 801638a:	4689      	mov	r9, r1
 801638c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016390:	f7ea f952 	bl	8000638 <__aeabi_dmul>
 8016394:	460b      	mov	r3, r1
 8016396:	4604      	mov	r4, r0
 8016398:	460d      	mov	r5, r1
 801639a:	4602      	mov	r2, r0
 801639c:	4649      	mov	r1, r9
 801639e:	4640      	mov	r0, r8
 80163a0:	e9cd 4500 	strd	r4, r5, [sp]
 80163a4:	f7e9 ff92 	bl	80002cc <__adddf3>
 80163a8:	4b1c      	ldr	r3, [pc, #112]	; (801641c <__ieee754_pow+0x3c4>)
 80163aa:	4299      	cmp	r1, r3
 80163ac:	4606      	mov	r6, r0
 80163ae:	460f      	mov	r7, r1
 80163b0:	468b      	mov	fp, r1
 80163b2:	f340 82f7 	ble.w	80169a4 <__ieee754_pow+0x94c>
 80163b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80163ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80163be:	4303      	orrs	r3, r0
 80163c0:	f000 81ea 	beq.w	8016798 <__ieee754_pow+0x740>
 80163c4:	a310      	add	r3, pc, #64	; (adr r3, 8016408 <__ieee754_pow+0x3b0>)
 80163c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163ce:	f7ea f933 	bl	8000638 <__aeabi_dmul>
 80163d2:	a30d      	add	r3, pc, #52	; (adr r3, 8016408 <__ieee754_pow+0x3b0>)
 80163d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d8:	e6d5      	b.n	8016186 <__ieee754_pow+0x12e>
 80163da:	bf00      	nop
 80163dc:	f3af 8000 	nop.w
 80163e0:	60000000 	.word	0x60000000
 80163e4:	3ff71547 	.word	0x3ff71547
 80163e8:	f85ddf44 	.word	0xf85ddf44
 80163ec:	3e54ae0b 	.word	0x3e54ae0b
 80163f0:	55555555 	.word	0x55555555
 80163f4:	3fd55555 	.word	0x3fd55555
 80163f8:	652b82fe 	.word	0x652b82fe
 80163fc:	3ff71547 	.word	0x3ff71547
 8016400:	00000000 	.word	0x00000000
 8016404:	bff00000 	.word	0xbff00000
 8016408:	8800759c 	.word	0x8800759c
 801640c:	7e37e43c 	.word	0x7e37e43c
 8016410:	3ff00000 	.word	0x3ff00000
 8016414:	3fd00000 	.word	0x3fd00000
 8016418:	3fe00000 	.word	0x3fe00000
 801641c:	408fffff 	.word	0x408fffff
 8016420:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016424:	f04f 0200 	mov.w	r2, #0
 8016428:	da05      	bge.n	8016436 <__ieee754_pow+0x3de>
 801642a:	4bd3      	ldr	r3, [pc, #844]	; (8016778 <__ieee754_pow+0x720>)
 801642c:	f7ea f904 	bl	8000638 <__aeabi_dmul>
 8016430:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016434:	460c      	mov	r4, r1
 8016436:	1523      	asrs	r3, r4, #20
 8016438:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801643c:	4413      	add	r3, r2
 801643e:	9309      	str	r3, [sp, #36]	; 0x24
 8016440:	4bce      	ldr	r3, [pc, #824]	; (801677c <__ieee754_pow+0x724>)
 8016442:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016446:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801644a:	429c      	cmp	r4, r3
 801644c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016450:	dd08      	ble.n	8016464 <__ieee754_pow+0x40c>
 8016452:	4bcb      	ldr	r3, [pc, #812]	; (8016780 <__ieee754_pow+0x728>)
 8016454:	429c      	cmp	r4, r3
 8016456:	f340 815e 	ble.w	8016716 <__ieee754_pow+0x6be>
 801645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801645c:	3301      	adds	r3, #1
 801645e:	9309      	str	r3, [sp, #36]	; 0x24
 8016460:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016464:	f04f 0a00 	mov.w	sl, #0
 8016468:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801646c:	930c      	str	r3, [sp, #48]	; 0x30
 801646e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016470:	4bc4      	ldr	r3, [pc, #784]	; (8016784 <__ieee754_pow+0x72c>)
 8016472:	4413      	add	r3, r2
 8016474:	ed93 7b00 	vldr	d7, [r3]
 8016478:	4629      	mov	r1, r5
 801647a:	ec53 2b17 	vmov	r2, r3, d7
 801647e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016482:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016486:	f7e9 ff1f 	bl	80002c8 <__aeabi_dsub>
 801648a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801648e:	4606      	mov	r6, r0
 8016490:	460f      	mov	r7, r1
 8016492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016496:	f7e9 ff19 	bl	80002cc <__adddf3>
 801649a:	4602      	mov	r2, r0
 801649c:	460b      	mov	r3, r1
 801649e:	2000      	movs	r0, #0
 80164a0:	49b9      	ldr	r1, [pc, #740]	; (8016788 <__ieee754_pow+0x730>)
 80164a2:	f7ea f9f3 	bl	800088c <__aeabi_ddiv>
 80164a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80164aa:	4602      	mov	r2, r0
 80164ac:	460b      	mov	r3, r1
 80164ae:	4630      	mov	r0, r6
 80164b0:	4639      	mov	r1, r7
 80164b2:	f7ea f8c1 	bl	8000638 <__aeabi_dmul>
 80164b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80164be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80164c2:	2300      	movs	r3, #0
 80164c4:	9302      	str	r3, [sp, #8]
 80164c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80164ca:	106d      	asrs	r5, r5, #1
 80164cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80164d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80164d4:	2200      	movs	r2, #0
 80164d6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80164da:	4640      	mov	r0, r8
 80164dc:	4649      	mov	r1, r9
 80164de:	4614      	mov	r4, r2
 80164e0:	461d      	mov	r5, r3
 80164e2:	f7ea f8a9 	bl	8000638 <__aeabi_dmul>
 80164e6:	4602      	mov	r2, r0
 80164e8:	460b      	mov	r3, r1
 80164ea:	4630      	mov	r0, r6
 80164ec:	4639      	mov	r1, r7
 80164ee:	f7e9 feeb 	bl	80002c8 <__aeabi_dsub>
 80164f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164f6:	4606      	mov	r6, r0
 80164f8:	460f      	mov	r7, r1
 80164fa:	4620      	mov	r0, r4
 80164fc:	4629      	mov	r1, r5
 80164fe:	f7e9 fee3 	bl	80002c8 <__aeabi_dsub>
 8016502:	4602      	mov	r2, r0
 8016504:	460b      	mov	r3, r1
 8016506:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801650a:	f7e9 fedd 	bl	80002c8 <__aeabi_dsub>
 801650e:	4642      	mov	r2, r8
 8016510:	464b      	mov	r3, r9
 8016512:	f7ea f891 	bl	8000638 <__aeabi_dmul>
 8016516:	4602      	mov	r2, r0
 8016518:	460b      	mov	r3, r1
 801651a:	4630      	mov	r0, r6
 801651c:	4639      	mov	r1, r7
 801651e:	f7e9 fed3 	bl	80002c8 <__aeabi_dsub>
 8016522:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016526:	f7ea f887 	bl	8000638 <__aeabi_dmul>
 801652a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801652e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016532:	4610      	mov	r0, r2
 8016534:	4619      	mov	r1, r3
 8016536:	f7ea f87f 	bl	8000638 <__aeabi_dmul>
 801653a:	a37b      	add	r3, pc, #492	; (adr r3, 8016728 <__ieee754_pow+0x6d0>)
 801653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016540:	4604      	mov	r4, r0
 8016542:	460d      	mov	r5, r1
 8016544:	f7ea f878 	bl	8000638 <__aeabi_dmul>
 8016548:	a379      	add	r3, pc, #484	; (adr r3, 8016730 <__ieee754_pow+0x6d8>)
 801654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801654e:	f7e9 febd 	bl	80002cc <__adddf3>
 8016552:	4622      	mov	r2, r4
 8016554:	462b      	mov	r3, r5
 8016556:	f7ea f86f 	bl	8000638 <__aeabi_dmul>
 801655a:	a377      	add	r3, pc, #476	; (adr r3, 8016738 <__ieee754_pow+0x6e0>)
 801655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016560:	f7e9 feb4 	bl	80002cc <__adddf3>
 8016564:	4622      	mov	r2, r4
 8016566:	462b      	mov	r3, r5
 8016568:	f7ea f866 	bl	8000638 <__aeabi_dmul>
 801656c:	a374      	add	r3, pc, #464	; (adr r3, 8016740 <__ieee754_pow+0x6e8>)
 801656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016572:	f7e9 feab 	bl	80002cc <__adddf3>
 8016576:	4622      	mov	r2, r4
 8016578:	462b      	mov	r3, r5
 801657a:	f7ea f85d 	bl	8000638 <__aeabi_dmul>
 801657e:	a372      	add	r3, pc, #456	; (adr r3, 8016748 <__ieee754_pow+0x6f0>)
 8016580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016584:	f7e9 fea2 	bl	80002cc <__adddf3>
 8016588:	4622      	mov	r2, r4
 801658a:	462b      	mov	r3, r5
 801658c:	f7ea f854 	bl	8000638 <__aeabi_dmul>
 8016590:	a36f      	add	r3, pc, #444	; (adr r3, 8016750 <__ieee754_pow+0x6f8>)
 8016592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016596:	f7e9 fe99 	bl	80002cc <__adddf3>
 801659a:	4622      	mov	r2, r4
 801659c:	4606      	mov	r6, r0
 801659e:	460f      	mov	r7, r1
 80165a0:	462b      	mov	r3, r5
 80165a2:	4620      	mov	r0, r4
 80165a4:	4629      	mov	r1, r5
 80165a6:	f7ea f847 	bl	8000638 <__aeabi_dmul>
 80165aa:	4602      	mov	r2, r0
 80165ac:	460b      	mov	r3, r1
 80165ae:	4630      	mov	r0, r6
 80165b0:	4639      	mov	r1, r7
 80165b2:	f7ea f841 	bl	8000638 <__aeabi_dmul>
 80165b6:	4642      	mov	r2, r8
 80165b8:	4604      	mov	r4, r0
 80165ba:	460d      	mov	r5, r1
 80165bc:	464b      	mov	r3, r9
 80165be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80165c2:	f7e9 fe83 	bl	80002cc <__adddf3>
 80165c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80165ca:	f7ea f835 	bl	8000638 <__aeabi_dmul>
 80165ce:	4622      	mov	r2, r4
 80165d0:	462b      	mov	r3, r5
 80165d2:	f7e9 fe7b 	bl	80002cc <__adddf3>
 80165d6:	4642      	mov	r2, r8
 80165d8:	4606      	mov	r6, r0
 80165da:	460f      	mov	r7, r1
 80165dc:	464b      	mov	r3, r9
 80165de:	4640      	mov	r0, r8
 80165e0:	4649      	mov	r1, r9
 80165e2:	f7ea f829 	bl	8000638 <__aeabi_dmul>
 80165e6:	2200      	movs	r2, #0
 80165e8:	4b68      	ldr	r3, [pc, #416]	; (801678c <__ieee754_pow+0x734>)
 80165ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80165ee:	f7e9 fe6d 	bl	80002cc <__adddf3>
 80165f2:	4632      	mov	r2, r6
 80165f4:	463b      	mov	r3, r7
 80165f6:	f7e9 fe69 	bl	80002cc <__adddf3>
 80165fa:	9802      	ldr	r0, [sp, #8]
 80165fc:	460d      	mov	r5, r1
 80165fe:	4604      	mov	r4, r0
 8016600:	4602      	mov	r2, r0
 8016602:	460b      	mov	r3, r1
 8016604:	4640      	mov	r0, r8
 8016606:	4649      	mov	r1, r9
 8016608:	f7ea f816 	bl	8000638 <__aeabi_dmul>
 801660c:	2200      	movs	r2, #0
 801660e:	4680      	mov	r8, r0
 8016610:	4689      	mov	r9, r1
 8016612:	4b5e      	ldr	r3, [pc, #376]	; (801678c <__ieee754_pow+0x734>)
 8016614:	4620      	mov	r0, r4
 8016616:	4629      	mov	r1, r5
 8016618:	f7e9 fe56 	bl	80002c8 <__aeabi_dsub>
 801661c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016620:	f7e9 fe52 	bl	80002c8 <__aeabi_dsub>
 8016624:	4602      	mov	r2, r0
 8016626:	460b      	mov	r3, r1
 8016628:	4630      	mov	r0, r6
 801662a:	4639      	mov	r1, r7
 801662c:	f7e9 fe4c 	bl	80002c8 <__aeabi_dsub>
 8016630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016634:	f7ea f800 	bl	8000638 <__aeabi_dmul>
 8016638:	4622      	mov	r2, r4
 801663a:	4606      	mov	r6, r0
 801663c:	460f      	mov	r7, r1
 801663e:	462b      	mov	r3, r5
 8016640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016644:	f7e9 fff8 	bl	8000638 <__aeabi_dmul>
 8016648:	4602      	mov	r2, r0
 801664a:	460b      	mov	r3, r1
 801664c:	4630      	mov	r0, r6
 801664e:	4639      	mov	r1, r7
 8016650:	f7e9 fe3c 	bl	80002cc <__adddf3>
 8016654:	4606      	mov	r6, r0
 8016656:	460f      	mov	r7, r1
 8016658:	4602      	mov	r2, r0
 801665a:	460b      	mov	r3, r1
 801665c:	4640      	mov	r0, r8
 801665e:	4649      	mov	r1, r9
 8016660:	f7e9 fe34 	bl	80002cc <__adddf3>
 8016664:	9802      	ldr	r0, [sp, #8]
 8016666:	a33c      	add	r3, pc, #240	; (adr r3, 8016758 <__ieee754_pow+0x700>)
 8016668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666c:	4604      	mov	r4, r0
 801666e:	460d      	mov	r5, r1
 8016670:	f7e9 ffe2 	bl	8000638 <__aeabi_dmul>
 8016674:	4642      	mov	r2, r8
 8016676:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801667a:	464b      	mov	r3, r9
 801667c:	4620      	mov	r0, r4
 801667e:	4629      	mov	r1, r5
 8016680:	f7e9 fe22 	bl	80002c8 <__aeabi_dsub>
 8016684:	4602      	mov	r2, r0
 8016686:	460b      	mov	r3, r1
 8016688:	4630      	mov	r0, r6
 801668a:	4639      	mov	r1, r7
 801668c:	f7e9 fe1c 	bl	80002c8 <__aeabi_dsub>
 8016690:	a333      	add	r3, pc, #204	; (adr r3, 8016760 <__ieee754_pow+0x708>)
 8016692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016696:	f7e9 ffcf 	bl	8000638 <__aeabi_dmul>
 801669a:	a333      	add	r3, pc, #204	; (adr r3, 8016768 <__ieee754_pow+0x710>)
 801669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166a0:	4606      	mov	r6, r0
 80166a2:	460f      	mov	r7, r1
 80166a4:	4620      	mov	r0, r4
 80166a6:	4629      	mov	r1, r5
 80166a8:	f7e9 ffc6 	bl	8000638 <__aeabi_dmul>
 80166ac:	4602      	mov	r2, r0
 80166ae:	460b      	mov	r3, r1
 80166b0:	4630      	mov	r0, r6
 80166b2:	4639      	mov	r1, r7
 80166b4:	f7e9 fe0a 	bl	80002cc <__adddf3>
 80166b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166ba:	4b35      	ldr	r3, [pc, #212]	; (8016790 <__ieee754_pow+0x738>)
 80166bc:	4413      	add	r3, r2
 80166be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166c2:	f7e9 fe03 	bl	80002cc <__adddf3>
 80166c6:	4604      	mov	r4, r0
 80166c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166ca:	460d      	mov	r5, r1
 80166cc:	f7e9 ff4a 	bl	8000564 <__aeabi_i2d>
 80166d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166d2:	4b30      	ldr	r3, [pc, #192]	; (8016794 <__ieee754_pow+0x73c>)
 80166d4:	4413      	add	r3, r2
 80166d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80166da:	4606      	mov	r6, r0
 80166dc:	460f      	mov	r7, r1
 80166de:	4622      	mov	r2, r4
 80166e0:	462b      	mov	r3, r5
 80166e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166e6:	f7e9 fdf1 	bl	80002cc <__adddf3>
 80166ea:	4642      	mov	r2, r8
 80166ec:	464b      	mov	r3, r9
 80166ee:	f7e9 fded 	bl	80002cc <__adddf3>
 80166f2:	4632      	mov	r2, r6
 80166f4:	463b      	mov	r3, r7
 80166f6:	f7e9 fde9 	bl	80002cc <__adddf3>
 80166fa:	9802      	ldr	r0, [sp, #8]
 80166fc:	4632      	mov	r2, r6
 80166fe:	463b      	mov	r3, r7
 8016700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016704:	f7e9 fde0 	bl	80002c8 <__aeabi_dsub>
 8016708:	4642      	mov	r2, r8
 801670a:	464b      	mov	r3, r9
 801670c:	f7e9 fddc 	bl	80002c8 <__aeabi_dsub>
 8016710:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016714:	e607      	b.n	8016326 <__ieee754_pow+0x2ce>
 8016716:	f04f 0a01 	mov.w	sl, #1
 801671a:	e6a5      	b.n	8016468 <__ieee754_pow+0x410>
 801671c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016770 <__ieee754_pow+0x718>
 8016720:	e613      	b.n	801634a <__ieee754_pow+0x2f2>
 8016722:	bf00      	nop
 8016724:	f3af 8000 	nop.w
 8016728:	4a454eef 	.word	0x4a454eef
 801672c:	3fca7e28 	.word	0x3fca7e28
 8016730:	93c9db65 	.word	0x93c9db65
 8016734:	3fcd864a 	.word	0x3fcd864a
 8016738:	a91d4101 	.word	0xa91d4101
 801673c:	3fd17460 	.word	0x3fd17460
 8016740:	518f264d 	.word	0x518f264d
 8016744:	3fd55555 	.word	0x3fd55555
 8016748:	db6fabff 	.word	0xdb6fabff
 801674c:	3fdb6db6 	.word	0x3fdb6db6
 8016750:	33333303 	.word	0x33333303
 8016754:	3fe33333 	.word	0x3fe33333
 8016758:	e0000000 	.word	0xe0000000
 801675c:	3feec709 	.word	0x3feec709
 8016760:	dc3a03fd 	.word	0xdc3a03fd
 8016764:	3feec709 	.word	0x3feec709
 8016768:	145b01f5 	.word	0x145b01f5
 801676c:	be3e2fe0 	.word	0xbe3e2fe0
 8016770:	00000000 	.word	0x00000000
 8016774:	3ff00000 	.word	0x3ff00000
 8016778:	43400000 	.word	0x43400000
 801677c:	0003988e 	.word	0x0003988e
 8016780:	000bb679 	.word	0x000bb679
 8016784:	080189b8 	.word	0x080189b8
 8016788:	3ff00000 	.word	0x3ff00000
 801678c:	40080000 	.word	0x40080000
 8016790:	080189d8 	.word	0x080189d8
 8016794:	080189c8 	.word	0x080189c8
 8016798:	a3b4      	add	r3, pc, #720	; (adr r3, 8016a6c <__ieee754_pow+0xa14>)
 801679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679e:	4640      	mov	r0, r8
 80167a0:	4649      	mov	r1, r9
 80167a2:	f7e9 fd93 	bl	80002cc <__adddf3>
 80167a6:	4622      	mov	r2, r4
 80167a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80167ac:	462b      	mov	r3, r5
 80167ae:	4630      	mov	r0, r6
 80167b0:	4639      	mov	r1, r7
 80167b2:	f7e9 fd89 	bl	80002c8 <__aeabi_dsub>
 80167b6:	4602      	mov	r2, r0
 80167b8:	460b      	mov	r3, r1
 80167ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80167be:	f7ea f9cb 	bl	8000b58 <__aeabi_dcmpgt>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	f47f adfe 	bne.w	80163c4 <__ieee754_pow+0x36c>
 80167c8:	4aa3      	ldr	r2, [pc, #652]	; (8016a58 <__ieee754_pow+0xa00>)
 80167ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80167ce:	4293      	cmp	r3, r2
 80167d0:	f340 810a 	ble.w	80169e8 <__ieee754_pow+0x990>
 80167d4:	151b      	asrs	r3, r3, #20
 80167d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80167da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80167de:	fa4a f303 	asr.w	r3, sl, r3
 80167e2:	445b      	add	r3, fp
 80167e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80167e8:	4e9c      	ldr	r6, [pc, #624]	; (8016a5c <__ieee754_pow+0xa04>)
 80167ea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80167ee:	4116      	asrs	r6, r2
 80167f0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80167f4:	2000      	movs	r0, #0
 80167f6:	ea23 0106 	bic.w	r1, r3, r6
 80167fa:	f1c2 0214 	rsb	r2, r2, #20
 80167fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016802:	fa4a fa02 	asr.w	sl, sl, r2
 8016806:	f1bb 0f00 	cmp.w	fp, #0
 801680a:	4602      	mov	r2, r0
 801680c:	460b      	mov	r3, r1
 801680e:	4620      	mov	r0, r4
 8016810:	4629      	mov	r1, r5
 8016812:	bfb8      	it	lt
 8016814:	f1ca 0a00 	rsblt	sl, sl, #0
 8016818:	f7e9 fd56 	bl	80002c8 <__aeabi_dsub>
 801681c:	e9cd 0100 	strd	r0, r1, [sp]
 8016820:	4642      	mov	r2, r8
 8016822:	464b      	mov	r3, r9
 8016824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016828:	f7e9 fd50 	bl	80002cc <__adddf3>
 801682c:	2000      	movs	r0, #0
 801682e:	a378      	add	r3, pc, #480	; (adr r3, 8016a10 <__ieee754_pow+0x9b8>)
 8016830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016834:	4604      	mov	r4, r0
 8016836:	460d      	mov	r5, r1
 8016838:	f7e9 fefe 	bl	8000638 <__aeabi_dmul>
 801683c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016840:	4606      	mov	r6, r0
 8016842:	460f      	mov	r7, r1
 8016844:	4620      	mov	r0, r4
 8016846:	4629      	mov	r1, r5
 8016848:	f7e9 fd3e 	bl	80002c8 <__aeabi_dsub>
 801684c:	4602      	mov	r2, r0
 801684e:	460b      	mov	r3, r1
 8016850:	4640      	mov	r0, r8
 8016852:	4649      	mov	r1, r9
 8016854:	f7e9 fd38 	bl	80002c8 <__aeabi_dsub>
 8016858:	a36f      	add	r3, pc, #444	; (adr r3, 8016a18 <__ieee754_pow+0x9c0>)
 801685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801685e:	f7e9 feeb 	bl	8000638 <__aeabi_dmul>
 8016862:	a36f      	add	r3, pc, #444	; (adr r3, 8016a20 <__ieee754_pow+0x9c8>)
 8016864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016868:	4680      	mov	r8, r0
 801686a:	4689      	mov	r9, r1
 801686c:	4620      	mov	r0, r4
 801686e:	4629      	mov	r1, r5
 8016870:	f7e9 fee2 	bl	8000638 <__aeabi_dmul>
 8016874:	4602      	mov	r2, r0
 8016876:	460b      	mov	r3, r1
 8016878:	4640      	mov	r0, r8
 801687a:	4649      	mov	r1, r9
 801687c:	f7e9 fd26 	bl	80002cc <__adddf3>
 8016880:	4604      	mov	r4, r0
 8016882:	460d      	mov	r5, r1
 8016884:	4602      	mov	r2, r0
 8016886:	460b      	mov	r3, r1
 8016888:	4630      	mov	r0, r6
 801688a:	4639      	mov	r1, r7
 801688c:	f7e9 fd1e 	bl	80002cc <__adddf3>
 8016890:	4632      	mov	r2, r6
 8016892:	463b      	mov	r3, r7
 8016894:	4680      	mov	r8, r0
 8016896:	4689      	mov	r9, r1
 8016898:	f7e9 fd16 	bl	80002c8 <__aeabi_dsub>
 801689c:	4602      	mov	r2, r0
 801689e:	460b      	mov	r3, r1
 80168a0:	4620      	mov	r0, r4
 80168a2:	4629      	mov	r1, r5
 80168a4:	f7e9 fd10 	bl	80002c8 <__aeabi_dsub>
 80168a8:	4642      	mov	r2, r8
 80168aa:	4606      	mov	r6, r0
 80168ac:	460f      	mov	r7, r1
 80168ae:	464b      	mov	r3, r9
 80168b0:	4640      	mov	r0, r8
 80168b2:	4649      	mov	r1, r9
 80168b4:	f7e9 fec0 	bl	8000638 <__aeabi_dmul>
 80168b8:	a35b      	add	r3, pc, #364	; (adr r3, 8016a28 <__ieee754_pow+0x9d0>)
 80168ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168be:	4604      	mov	r4, r0
 80168c0:	460d      	mov	r5, r1
 80168c2:	f7e9 feb9 	bl	8000638 <__aeabi_dmul>
 80168c6:	a35a      	add	r3, pc, #360	; (adr r3, 8016a30 <__ieee754_pow+0x9d8>)
 80168c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168cc:	f7e9 fcfc 	bl	80002c8 <__aeabi_dsub>
 80168d0:	4622      	mov	r2, r4
 80168d2:	462b      	mov	r3, r5
 80168d4:	f7e9 feb0 	bl	8000638 <__aeabi_dmul>
 80168d8:	a357      	add	r3, pc, #348	; (adr r3, 8016a38 <__ieee754_pow+0x9e0>)
 80168da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168de:	f7e9 fcf5 	bl	80002cc <__adddf3>
 80168e2:	4622      	mov	r2, r4
 80168e4:	462b      	mov	r3, r5
 80168e6:	f7e9 fea7 	bl	8000638 <__aeabi_dmul>
 80168ea:	a355      	add	r3, pc, #340	; (adr r3, 8016a40 <__ieee754_pow+0x9e8>)
 80168ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f0:	f7e9 fcea 	bl	80002c8 <__aeabi_dsub>
 80168f4:	4622      	mov	r2, r4
 80168f6:	462b      	mov	r3, r5
 80168f8:	f7e9 fe9e 	bl	8000638 <__aeabi_dmul>
 80168fc:	a352      	add	r3, pc, #328	; (adr r3, 8016a48 <__ieee754_pow+0x9f0>)
 80168fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016902:	f7e9 fce3 	bl	80002cc <__adddf3>
 8016906:	4622      	mov	r2, r4
 8016908:	462b      	mov	r3, r5
 801690a:	f7e9 fe95 	bl	8000638 <__aeabi_dmul>
 801690e:	4602      	mov	r2, r0
 8016910:	460b      	mov	r3, r1
 8016912:	4640      	mov	r0, r8
 8016914:	4649      	mov	r1, r9
 8016916:	f7e9 fcd7 	bl	80002c8 <__aeabi_dsub>
 801691a:	4604      	mov	r4, r0
 801691c:	460d      	mov	r5, r1
 801691e:	4602      	mov	r2, r0
 8016920:	460b      	mov	r3, r1
 8016922:	4640      	mov	r0, r8
 8016924:	4649      	mov	r1, r9
 8016926:	f7e9 fe87 	bl	8000638 <__aeabi_dmul>
 801692a:	2200      	movs	r2, #0
 801692c:	e9cd 0100 	strd	r0, r1, [sp]
 8016930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016934:	4620      	mov	r0, r4
 8016936:	4629      	mov	r1, r5
 8016938:	f7e9 fcc6 	bl	80002c8 <__aeabi_dsub>
 801693c:	4602      	mov	r2, r0
 801693e:	460b      	mov	r3, r1
 8016940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016944:	f7e9 ffa2 	bl	800088c <__aeabi_ddiv>
 8016948:	4632      	mov	r2, r6
 801694a:	4604      	mov	r4, r0
 801694c:	460d      	mov	r5, r1
 801694e:	463b      	mov	r3, r7
 8016950:	4640      	mov	r0, r8
 8016952:	4649      	mov	r1, r9
 8016954:	f7e9 fe70 	bl	8000638 <__aeabi_dmul>
 8016958:	4632      	mov	r2, r6
 801695a:	463b      	mov	r3, r7
 801695c:	f7e9 fcb6 	bl	80002cc <__adddf3>
 8016960:	4602      	mov	r2, r0
 8016962:	460b      	mov	r3, r1
 8016964:	4620      	mov	r0, r4
 8016966:	4629      	mov	r1, r5
 8016968:	f7e9 fcae 	bl	80002c8 <__aeabi_dsub>
 801696c:	4642      	mov	r2, r8
 801696e:	464b      	mov	r3, r9
 8016970:	f7e9 fcaa 	bl	80002c8 <__aeabi_dsub>
 8016974:	4602      	mov	r2, r0
 8016976:	460b      	mov	r3, r1
 8016978:	2000      	movs	r0, #0
 801697a:	4939      	ldr	r1, [pc, #228]	; (8016a60 <__ieee754_pow+0xa08>)
 801697c:	f7e9 fca4 	bl	80002c8 <__aeabi_dsub>
 8016980:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016984:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016988:	4602      	mov	r2, r0
 801698a:	460b      	mov	r3, r1
 801698c:	da2f      	bge.n	80169ee <__ieee754_pow+0x996>
 801698e:	4650      	mov	r0, sl
 8016990:	ec43 2b10 	vmov	d0, r2, r3
 8016994:	f001 faa0 	bl	8017ed8 <scalbn>
 8016998:	ec51 0b10 	vmov	r0, r1, d0
 801699c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80169a0:	f7ff bbf1 	b.w	8016186 <__ieee754_pow+0x12e>
 80169a4:	4b2f      	ldr	r3, [pc, #188]	; (8016a64 <__ieee754_pow+0xa0c>)
 80169a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80169aa:	429e      	cmp	r6, r3
 80169ac:	f77f af0c 	ble.w	80167c8 <__ieee754_pow+0x770>
 80169b0:	4b2d      	ldr	r3, [pc, #180]	; (8016a68 <__ieee754_pow+0xa10>)
 80169b2:	440b      	add	r3, r1
 80169b4:	4303      	orrs	r3, r0
 80169b6:	d00b      	beq.n	80169d0 <__ieee754_pow+0x978>
 80169b8:	a325      	add	r3, pc, #148	; (adr r3, 8016a50 <__ieee754_pow+0x9f8>)
 80169ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169c2:	f7e9 fe39 	bl	8000638 <__aeabi_dmul>
 80169c6:	a322      	add	r3, pc, #136	; (adr r3, 8016a50 <__ieee754_pow+0x9f8>)
 80169c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169cc:	f7ff bbdb 	b.w	8016186 <__ieee754_pow+0x12e>
 80169d0:	4622      	mov	r2, r4
 80169d2:	462b      	mov	r3, r5
 80169d4:	f7e9 fc78 	bl	80002c8 <__aeabi_dsub>
 80169d8:	4642      	mov	r2, r8
 80169da:	464b      	mov	r3, r9
 80169dc:	f7ea f8b2 	bl	8000b44 <__aeabi_dcmpge>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	f43f aef1 	beq.w	80167c8 <__ieee754_pow+0x770>
 80169e6:	e7e7      	b.n	80169b8 <__ieee754_pow+0x960>
 80169e8:	f04f 0a00 	mov.w	sl, #0
 80169ec:	e718      	b.n	8016820 <__ieee754_pow+0x7c8>
 80169ee:	4621      	mov	r1, r4
 80169f0:	e7d4      	b.n	801699c <__ieee754_pow+0x944>
 80169f2:	2000      	movs	r0, #0
 80169f4:	491a      	ldr	r1, [pc, #104]	; (8016a60 <__ieee754_pow+0xa08>)
 80169f6:	f7ff bb8f 	b.w	8016118 <__ieee754_pow+0xc0>
 80169fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169fe:	f7ff bb8b 	b.w	8016118 <__ieee754_pow+0xc0>
 8016a02:	4630      	mov	r0, r6
 8016a04:	4639      	mov	r1, r7
 8016a06:	f7ff bb87 	b.w	8016118 <__ieee754_pow+0xc0>
 8016a0a:	4693      	mov	fp, r2
 8016a0c:	f7ff bb98 	b.w	8016140 <__ieee754_pow+0xe8>
 8016a10:	00000000 	.word	0x00000000
 8016a14:	3fe62e43 	.word	0x3fe62e43
 8016a18:	fefa39ef 	.word	0xfefa39ef
 8016a1c:	3fe62e42 	.word	0x3fe62e42
 8016a20:	0ca86c39 	.word	0x0ca86c39
 8016a24:	be205c61 	.word	0xbe205c61
 8016a28:	72bea4d0 	.word	0x72bea4d0
 8016a2c:	3e663769 	.word	0x3e663769
 8016a30:	c5d26bf1 	.word	0xc5d26bf1
 8016a34:	3ebbbd41 	.word	0x3ebbbd41
 8016a38:	af25de2c 	.word	0xaf25de2c
 8016a3c:	3f11566a 	.word	0x3f11566a
 8016a40:	16bebd93 	.word	0x16bebd93
 8016a44:	3f66c16c 	.word	0x3f66c16c
 8016a48:	5555553e 	.word	0x5555553e
 8016a4c:	3fc55555 	.word	0x3fc55555
 8016a50:	c2f8f359 	.word	0xc2f8f359
 8016a54:	01a56e1f 	.word	0x01a56e1f
 8016a58:	3fe00000 	.word	0x3fe00000
 8016a5c:	000fffff 	.word	0x000fffff
 8016a60:	3ff00000 	.word	0x3ff00000
 8016a64:	4090cbff 	.word	0x4090cbff
 8016a68:	3f6f3400 	.word	0x3f6f3400
 8016a6c:	652b82fe 	.word	0x652b82fe
 8016a70:	3c971547 	.word	0x3c971547
 8016a74:	00000000 	.word	0x00000000

08016a78 <__ieee754_rem_pio2>:
 8016a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a7c:	ec57 6b10 	vmov	r6, r7, d0
 8016a80:	4bc3      	ldr	r3, [pc, #780]	; (8016d90 <__ieee754_rem_pio2+0x318>)
 8016a82:	b08d      	sub	sp, #52	; 0x34
 8016a84:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016a88:	4598      	cmp	r8, r3
 8016a8a:	4604      	mov	r4, r0
 8016a8c:	9704      	str	r7, [sp, #16]
 8016a8e:	dc07      	bgt.n	8016aa0 <__ieee754_rem_pio2+0x28>
 8016a90:	2200      	movs	r2, #0
 8016a92:	2300      	movs	r3, #0
 8016a94:	ed84 0b00 	vstr	d0, [r4]
 8016a98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016a9c:	2500      	movs	r5, #0
 8016a9e:	e027      	b.n	8016af0 <__ieee754_rem_pio2+0x78>
 8016aa0:	4bbc      	ldr	r3, [pc, #752]	; (8016d94 <__ieee754_rem_pio2+0x31c>)
 8016aa2:	4598      	cmp	r8, r3
 8016aa4:	dc75      	bgt.n	8016b92 <__ieee754_rem_pio2+0x11a>
 8016aa6:	9b04      	ldr	r3, [sp, #16]
 8016aa8:	4dbb      	ldr	r5, [pc, #748]	; (8016d98 <__ieee754_rem_pio2+0x320>)
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	ee10 0a10 	vmov	r0, s0
 8016ab0:	a3a9      	add	r3, pc, #676	; (adr r3, 8016d58 <__ieee754_rem_pio2+0x2e0>)
 8016ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab6:	4639      	mov	r1, r7
 8016ab8:	dd36      	ble.n	8016b28 <__ieee754_rem_pio2+0xb0>
 8016aba:	f7e9 fc05 	bl	80002c8 <__aeabi_dsub>
 8016abe:	45a8      	cmp	r8, r5
 8016ac0:	4606      	mov	r6, r0
 8016ac2:	460f      	mov	r7, r1
 8016ac4:	d018      	beq.n	8016af8 <__ieee754_rem_pio2+0x80>
 8016ac6:	a3a6      	add	r3, pc, #664	; (adr r3, 8016d60 <__ieee754_rem_pio2+0x2e8>)
 8016ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016acc:	f7e9 fbfc 	bl	80002c8 <__aeabi_dsub>
 8016ad0:	4602      	mov	r2, r0
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	e9c4 2300 	strd	r2, r3, [r4]
 8016ad8:	4630      	mov	r0, r6
 8016ada:	4639      	mov	r1, r7
 8016adc:	f7e9 fbf4 	bl	80002c8 <__aeabi_dsub>
 8016ae0:	a39f      	add	r3, pc, #636	; (adr r3, 8016d60 <__ieee754_rem_pio2+0x2e8>)
 8016ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae6:	f7e9 fbef 	bl	80002c8 <__aeabi_dsub>
 8016aea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016aee:	2501      	movs	r5, #1
 8016af0:	4628      	mov	r0, r5
 8016af2:	b00d      	add	sp, #52	; 0x34
 8016af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016af8:	a39b      	add	r3, pc, #620	; (adr r3, 8016d68 <__ieee754_rem_pio2+0x2f0>)
 8016afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016afe:	f7e9 fbe3 	bl	80002c8 <__aeabi_dsub>
 8016b02:	a39b      	add	r3, pc, #620	; (adr r3, 8016d70 <__ieee754_rem_pio2+0x2f8>)
 8016b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b08:	4606      	mov	r6, r0
 8016b0a:	460f      	mov	r7, r1
 8016b0c:	f7e9 fbdc 	bl	80002c8 <__aeabi_dsub>
 8016b10:	4602      	mov	r2, r0
 8016b12:	460b      	mov	r3, r1
 8016b14:	e9c4 2300 	strd	r2, r3, [r4]
 8016b18:	4630      	mov	r0, r6
 8016b1a:	4639      	mov	r1, r7
 8016b1c:	f7e9 fbd4 	bl	80002c8 <__aeabi_dsub>
 8016b20:	a393      	add	r3, pc, #588	; (adr r3, 8016d70 <__ieee754_rem_pio2+0x2f8>)
 8016b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b26:	e7de      	b.n	8016ae6 <__ieee754_rem_pio2+0x6e>
 8016b28:	f7e9 fbd0 	bl	80002cc <__adddf3>
 8016b2c:	45a8      	cmp	r8, r5
 8016b2e:	4606      	mov	r6, r0
 8016b30:	460f      	mov	r7, r1
 8016b32:	d016      	beq.n	8016b62 <__ieee754_rem_pio2+0xea>
 8016b34:	a38a      	add	r3, pc, #552	; (adr r3, 8016d60 <__ieee754_rem_pio2+0x2e8>)
 8016b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3a:	f7e9 fbc7 	bl	80002cc <__adddf3>
 8016b3e:	4602      	mov	r2, r0
 8016b40:	460b      	mov	r3, r1
 8016b42:	e9c4 2300 	strd	r2, r3, [r4]
 8016b46:	4630      	mov	r0, r6
 8016b48:	4639      	mov	r1, r7
 8016b4a:	f7e9 fbbd 	bl	80002c8 <__aeabi_dsub>
 8016b4e:	a384      	add	r3, pc, #528	; (adr r3, 8016d60 <__ieee754_rem_pio2+0x2e8>)
 8016b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b54:	f7e9 fbba 	bl	80002cc <__adddf3>
 8016b58:	f04f 35ff 	mov.w	r5, #4294967295
 8016b5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016b60:	e7c6      	b.n	8016af0 <__ieee754_rem_pio2+0x78>
 8016b62:	a381      	add	r3, pc, #516	; (adr r3, 8016d68 <__ieee754_rem_pio2+0x2f0>)
 8016b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b68:	f7e9 fbb0 	bl	80002cc <__adddf3>
 8016b6c:	a380      	add	r3, pc, #512	; (adr r3, 8016d70 <__ieee754_rem_pio2+0x2f8>)
 8016b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b72:	4606      	mov	r6, r0
 8016b74:	460f      	mov	r7, r1
 8016b76:	f7e9 fba9 	bl	80002cc <__adddf3>
 8016b7a:	4602      	mov	r2, r0
 8016b7c:	460b      	mov	r3, r1
 8016b7e:	e9c4 2300 	strd	r2, r3, [r4]
 8016b82:	4630      	mov	r0, r6
 8016b84:	4639      	mov	r1, r7
 8016b86:	f7e9 fb9f 	bl	80002c8 <__aeabi_dsub>
 8016b8a:	a379      	add	r3, pc, #484	; (adr r3, 8016d70 <__ieee754_rem_pio2+0x2f8>)
 8016b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b90:	e7e0      	b.n	8016b54 <__ieee754_rem_pio2+0xdc>
 8016b92:	4b82      	ldr	r3, [pc, #520]	; (8016d9c <__ieee754_rem_pio2+0x324>)
 8016b94:	4598      	cmp	r8, r3
 8016b96:	f300 80d0 	bgt.w	8016d3a <__ieee754_rem_pio2+0x2c2>
 8016b9a:	f001 f875 	bl	8017c88 <fabs>
 8016b9e:	ec57 6b10 	vmov	r6, r7, d0
 8016ba2:	ee10 0a10 	vmov	r0, s0
 8016ba6:	a374      	add	r3, pc, #464	; (adr r3, 8016d78 <__ieee754_rem_pio2+0x300>)
 8016ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bac:	4639      	mov	r1, r7
 8016bae:	f7e9 fd43 	bl	8000638 <__aeabi_dmul>
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	4b7a      	ldr	r3, [pc, #488]	; (8016da0 <__ieee754_rem_pio2+0x328>)
 8016bb6:	f7e9 fb89 	bl	80002cc <__adddf3>
 8016bba:	f7e9 ffed 	bl	8000b98 <__aeabi_d2iz>
 8016bbe:	4605      	mov	r5, r0
 8016bc0:	f7e9 fcd0 	bl	8000564 <__aeabi_i2d>
 8016bc4:	a364      	add	r3, pc, #400	; (adr r3, 8016d58 <__ieee754_rem_pio2+0x2e0>)
 8016bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016bce:	f7e9 fd33 	bl	8000638 <__aeabi_dmul>
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	4639      	mov	r1, r7
 8016bda:	f7e9 fb75 	bl	80002c8 <__aeabi_dsub>
 8016bde:	a360      	add	r3, pc, #384	; (adr r3, 8016d60 <__ieee754_rem_pio2+0x2e8>)
 8016be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be4:	4682      	mov	sl, r0
 8016be6:	468b      	mov	fp, r1
 8016be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016bec:	f7e9 fd24 	bl	8000638 <__aeabi_dmul>
 8016bf0:	2d1f      	cmp	r5, #31
 8016bf2:	4606      	mov	r6, r0
 8016bf4:	460f      	mov	r7, r1
 8016bf6:	dc0c      	bgt.n	8016c12 <__ieee754_rem_pio2+0x19a>
 8016bf8:	1e6a      	subs	r2, r5, #1
 8016bfa:	4b6a      	ldr	r3, [pc, #424]	; (8016da4 <__ieee754_rem_pio2+0x32c>)
 8016bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c00:	4543      	cmp	r3, r8
 8016c02:	d006      	beq.n	8016c12 <__ieee754_rem_pio2+0x19a>
 8016c04:	4632      	mov	r2, r6
 8016c06:	463b      	mov	r3, r7
 8016c08:	4650      	mov	r0, sl
 8016c0a:	4659      	mov	r1, fp
 8016c0c:	f7e9 fb5c 	bl	80002c8 <__aeabi_dsub>
 8016c10:	e00e      	b.n	8016c30 <__ieee754_rem_pio2+0x1b8>
 8016c12:	4632      	mov	r2, r6
 8016c14:	463b      	mov	r3, r7
 8016c16:	4650      	mov	r0, sl
 8016c18:	4659      	mov	r1, fp
 8016c1a:	f7e9 fb55 	bl	80002c8 <__aeabi_dsub>
 8016c1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016c22:	9305      	str	r3, [sp, #20]
 8016c24:	9a05      	ldr	r2, [sp, #20]
 8016c26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016c2a:	1ad3      	subs	r3, r2, r3
 8016c2c:	2b10      	cmp	r3, #16
 8016c2e:	dc02      	bgt.n	8016c36 <__ieee754_rem_pio2+0x1be>
 8016c30:	e9c4 0100 	strd	r0, r1, [r4]
 8016c34:	e039      	b.n	8016caa <__ieee754_rem_pio2+0x232>
 8016c36:	a34c      	add	r3, pc, #304	; (adr r3, 8016d68 <__ieee754_rem_pio2+0x2f0>)
 8016c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c40:	f7e9 fcfa 	bl	8000638 <__aeabi_dmul>
 8016c44:	4606      	mov	r6, r0
 8016c46:	460f      	mov	r7, r1
 8016c48:	4602      	mov	r2, r0
 8016c4a:	460b      	mov	r3, r1
 8016c4c:	4650      	mov	r0, sl
 8016c4e:	4659      	mov	r1, fp
 8016c50:	f7e9 fb3a 	bl	80002c8 <__aeabi_dsub>
 8016c54:	4602      	mov	r2, r0
 8016c56:	460b      	mov	r3, r1
 8016c58:	4680      	mov	r8, r0
 8016c5a:	4689      	mov	r9, r1
 8016c5c:	4650      	mov	r0, sl
 8016c5e:	4659      	mov	r1, fp
 8016c60:	f7e9 fb32 	bl	80002c8 <__aeabi_dsub>
 8016c64:	4632      	mov	r2, r6
 8016c66:	463b      	mov	r3, r7
 8016c68:	f7e9 fb2e 	bl	80002c8 <__aeabi_dsub>
 8016c6c:	a340      	add	r3, pc, #256	; (adr r3, 8016d70 <__ieee754_rem_pio2+0x2f8>)
 8016c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c72:	4606      	mov	r6, r0
 8016c74:	460f      	mov	r7, r1
 8016c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c7a:	f7e9 fcdd 	bl	8000638 <__aeabi_dmul>
 8016c7e:	4632      	mov	r2, r6
 8016c80:	463b      	mov	r3, r7
 8016c82:	f7e9 fb21 	bl	80002c8 <__aeabi_dsub>
 8016c86:	4602      	mov	r2, r0
 8016c88:	460b      	mov	r3, r1
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	460f      	mov	r7, r1
 8016c8e:	4640      	mov	r0, r8
 8016c90:	4649      	mov	r1, r9
 8016c92:	f7e9 fb19 	bl	80002c8 <__aeabi_dsub>
 8016c96:	9a05      	ldr	r2, [sp, #20]
 8016c98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016c9c:	1ad3      	subs	r3, r2, r3
 8016c9e:	2b31      	cmp	r3, #49	; 0x31
 8016ca0:	dc20      	bgt.n	8016ce4 <__ieee754_rem_pio2+0x26c>
 8016ca2:	e9c4 0100 	strd	r0, r1, [r4]
 8016ca6:	46c2      	mov	sl, r8
 8016ca8:	46cb      	mov	fp, r9
 8016caa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8016cae:	4650      	mov	r0, sl
 8016cb0:	4642      	mov	r2, r8
 8016cb2:	464b      	mov	r3, r9
 8016cb4:	4659      	mov	r1, fp
 8016cb6:	f7e9 fb07 	bl	80002c8 <__aeabi_dsub>
 8016cba:	463b      	mov	r3, r7
 8016cbc:	4632      	mov	r2, r6
 8016cbe:	f7e9 fb03 	bl	80002c8 <__aeabi_dsub>
 8016cc2:	9b04      	ldr	r3, [sp, #16]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016cca:	f6bf af11 	bge.w	8016af0 <__ieee754_rem_pio2+0x78>
 8016cce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016cd2:	6063      	str	r3, [r4, #4]
 8016cd4:	f8c4 8000 	str.w	r8, [r4]
 8016cd8:	60a0      	str	r0, [r4, #8]
 8016cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016cde:	60e3      	str	r3, [r4, #12]
 8016ce0:	426d      	negs	r5, r5
 8016ce2:	e705      	b.n	8016af0 <__ieee754_rem_pio2+0x78>
 8016ce4:	a326      	add	r3, pc, #152	; (adr r3, 8016d80 <__ieee754_rem_pio2+0x308>)
 8016ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016cee:	f7e9 fca3 	bl	8000638 <__aeabi_dmul>
 8016cf2:	4606      	mov	r6, r0
 8016cf4:	460f      	mov	r7, r1
 8016cf6:	4602      	mov	r2, r0
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	4640      	mov	r0, r8
 8016cfc:	4649      	mov	r1, r9
 8016cfe:	f7e9 fae3 	bl	80002c8 <__aeabi_dsub>
 8016d02:	4602      	mov	r2, r0
 8016d04:	460b      	mov	r3, r1
 8016d06:	4682      	mov	sl, r0
 8016d08:	468b      	mov	fp, r1
 8016d0a:	4640      	mov	r0, r8
 8016d0c:	4649      	mov	r1, r9
 8016d0e:	f7e9 fadb 	bl	80002c8 <__aeabi_dsub>
 8016d12:	4632      	mov	r2, r6
 8016d14:	463b      	mov	r3, r7
 8016d16:	f7e9 fad7 	bl	80002c8 <__aeabi_dsub>
 8016d1a:	a31b      	add	r3, pc, #108	; (adr r3, 8016d88 <__ieee754_rem_pio2+0x310>)
 8016d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d20:	4606      	mov	r6, r0
 8016d22:	460f      	mov	r7, r1
 8016d24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d28:	f7e9 fc86 	bl	8000638 <__aeabi_dmul>
 8016d2c:	4632      	mov	r2, r6
 8016d2e:	463b      	mov	r3, r7
 8016d30:	f7e9 faca 	bl	80002c8 <__aeabi_dsub>
 8016d34:	4606      	mov	r6, r0
 8016d36:	460f      	mov	r7, r1
 8016d38:	e764      	b.n	8016c04 <__ieee754_rem_pio2+0x18c>
 8016d3a:	4b1b      	ldr	r3, [pc, #108]	; (8016da8 <__ieee754_rem_pio2+0x330>)
 8016d3c:	4598      	cmp	r8, r3
 8016d3e:	dd35      	ble.n	8016dac <__ieee754_rem_pio2+0x334>
 8016d40:	ee10 2a10 	vmov	r2, s0
 8016d44:	463b      	mov	r3, r7
 8016d46:	4630      	mov	r0, r6
 8016d48:	4639      	mov	r1, r7
 8016d4a:	f7e9 fabd 	bl	80002c8 <__aeabi_dsub>
 8016d4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016d52:	e9c4 0100 	strd	r0, r1, [r4]
 8016d56:	e6a1      	b.n	8016a9c <__ieee754_rem_pio2+0x24>
 8016d58:	54400000 	.word	0x54400000
 8016d5c:	3ff921fb 	.word	0x3ff921fb
 8016d60:	1a626331 	.word	0x1a626331
 8016d64:	3dd0b461 	.word	0x3dd0b461
 8016d68:	1a600000 	.word	0x1a600000
 8016d6c:	3dd0b461 	.word	0x3dd0b461
 8016d70:	2e037073 	.word	0x2e037073
 8016d74:	3ba3198a 	.word	0x3ba3198a
 8016d78:	6dc9c883 	.word	0x6dc9c883
 8016d7c:	3fe45f30 	.word	0x3fe45f30
 8016d80:	2e000000 	.word	0x2e000000
 8016d84:	3ba3198a 	.word	0x3ba3198a
 8016d88:	252049c1 	.word	0x252049c1
 8016d8c:	397b839a 	.word	0x397b839a
 8016d90:	3fe921fb 	.word	0x3fe921fb
 8016d94:	4002d97b 	.word	0x4002d97b
 8016d98:	3ff921fb 	.word	0x3ff921fb
 8016d9c:	413921fb 	.word	0x413921fb
 8016da0:	3fe00000 	.word	0x3fe00000
 8016da4:	080189e8 	.word	0x080189e8
 8016da8:	7fefffff 	.word	0x7fefffff
 8016dac:	ea4f 5528 	mov.w	r5, r8, asr #20
 8016db0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8016db4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8016db8:	4630      	mov	r0, r6
 8016dba:	460f      	mov	r7, r1
 8016dbc:	f7e9 feec 	bl	8000b98 <__aeabi_d2iz>
 8016dc0:	f7e9 fbd0 	bl	8000564 <__aeabi_i2d>
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	460b      	mov	r3, r1
 8016dc8:	4630      	mov	r0, r6
 8016dca:	4639      	mov	r1, r7
 8016dcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016dd0:	f7e9 fa7a 	bl	80002c8 <__aeabi_dsub>
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	4b1f      	ldr	r3, [pc, #124]	; (8016e54 <__ieee754_rem_pio2+0x3dc>)
 8016dd8:	f7e9 fc2e 	bl	8000638 <__aeabi_dmul>
 8016ddc:	460f      	mov	r7, r1
 8016dde:	4606      	mov	r6, r0
 8016de0:	f7e9 feda 	bl	8000b98 <__aeabi_d2iz>
 8016de4:	f7e9 fbbe 	bl	8000564 <__aeabi_i2d>
 8016de8:	4602      	mov	r2, r0
 8016dea:	460b      	mov	r3, r1
 8016dec:	4630      	mov	r0, r6
 8016dee:	4639      	mov	r1, r7
 8016df0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016df4:	f7e9 fa68 	bl	80002c8 <__aeabi_dsub>
 8016df8:	2200      	movs	r2, #0
 8016dfa:	4b16      	ldr	r3, [pc, #88]	; (8016e54 <__ieee754_rem_pio2+0x3dc>)
 8016dfc:	f7e9 fc1c 	bl	8000638 <__aeabi_dmul>
 8016e00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016e04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8016e08:	f04f 0803 	mov.w	r8, #3
 8016e0c:	2600      	movs	r6, #0
 8016e0e:	2700      	movs	r7, #0
 8016e10:	4632      	mov	r2, r6
 8016e12:	463b      	mov	r3, r7
 8016e14:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016e18:	f108 3aff 	add.w	sl, r8, #4294967295
 8016e1c:	f7e9 fe74 	bl	8000b08 <__aeabi_dcmpeq>
 8016e20:	b9b0      	cbnz	r0, 8016e50 <__ieee754_rem_pio2+0x3d8>
 8016e22:	4b0d      	ldr	r3, [pc, #52]	; (8016e58 <__ieee754_rem_pio2+0x3e0>)
 8016e24:	9301      	str	r3, [sp, #4]
 8016e26:	2302      	movs	r3, #2
 8016e28:	9300      	str	r3, [sp, #0]
 8016e2a:	462a      	mov	r2, r5
 8016e2c:	4643      	mov	r3, r8
 8016e2e:	4621      	mov	r1, r4
 8016e30:	a806      	add	r0, sp, #24
 8016e32:	f000 f98d 	bl	8017150 <__kernel_rem_pio2>
 8016e36:	9b04      	ldr	r3, [sp, #16]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	4605      	mov	r5, r0
 8016e3c:	f6bf ae58 	bge.w	8016af0 <__ieee754_rem_pio2+0x78>
 8016e40:	6863      	ldr	r3, [r4, #4]
 8016e42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016e46:	6063      	str	r3, [r4, #4]
 8016e48:	68e3      	ldr	r3, [r4, #12]
 8016e4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016e4e:	e746      	b.n	8016cde <__ieee754_rem_pio2+0x266>
 8016e50:	46d0      	mov	r8, sl
 8016e52:	e7dd      	b.n	8016e10 <__ieee754_rem_pio2+0x398>
 8016e54:	41700000 	.word	0x41700000
 8016e58:	08018a68 	.word	0x08018a68

08016e5c <__ieee754_sqrt>:
 8016e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e60:	4955      	ldr	r1, [pc, #340]	; (8016fb8 <__ieee754_sqrt+0x15c>)
 8016e62:	ec55 4b10 	vmov	r4, r5, d0
 8016e66:	43a9      	bics	r1, r5
 8016e68:	462b      	mov	r3, r5
 8016e6a:	462a      	mov	r2, r5
 8016e6c:	d112      	bne.n	8016e94 <__ieee754_sqrt+0x38>
 8016e6e:	ee10 2a10 	vmov	r2, s0
 8016e72:	ee10 0a10 	vmov	r0, s0
 8016e76:	4629      	mov	r1, r5
 8016e78:	f7e9 fbde 	bl	8000638 <__aeabi_dmul>
 8016e7c:	4602      	mov	r2, r0
 8016e7e:	460b      	mov	r3, r1
 8016e80:	4620      	mov	r0, r4
 8016e82:	4629      	mov	r1, r5
 8016e84:	f7e9 fa22 	bl	80002cc <__adddf3>
 8016e88:	4604      	mov	r4, r0
 8016e8a:	460d      	mov	r5, r1
 8016e8c:	ec45 4b10 	vmov	d0, r4, r5
 8016e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e94:	2d00      	cmp	r5, #0
 8016e96:	ee10 0a10 	vmov	r0, s0
 8016e9a:	4621      	mov	r1, r4
 8016e9c:	dc0f      	bgt.n	8016ebe <__ieee754_sqrt+0x62>
 8016e9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016ea2:	4330      	orrs	r0, r6
 8016ea4:	d0f2      	beq.n	8016e8c <__ieee754_sqrt+0x30>
 8016ea6:	b155      	cbz	r5, 8016ebe <__ieee754_sqrt+0x62>
 8016ea8:	ee10 2a10 	vmov	r2, s0
 8016eac:	4620      	mov	r0, r4
 8016eae:	4629      	mov	r1, r5
 8016eb0:	f7e9 fa0a 	bl	80002c8 <__aeabi_dsub>
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	460b      	mov	r3, r1
 8016eb8:	f7e9 fce8 	bl	800088c <__aeabi_ddiv>
 8016ebc:	e7e4      	b.n	8016e88 <__ieee754_sqrt+0x2c>
 8016ebe:	151b      	asrs	r3, r3, #20
 8016ec0:	d073      	beq.n	8016faa <__ieee754_sqrt+0x14e>
 8016ec2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016ec6:	07dd      	lsls	r5, r3, #31
 8016ec8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016ecc:	bf48      	it	mi
 8016ece:	0fc8      	lsrmi	r0, r1, #31
 8016ed0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016ed4:	bf44      	itt	mi
 8016ed6:	0049      	lslmi	r1, r1, #1
 8016ed8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016edc:	2500      	movs	r5, #0
 8016ede:	1058      	asrs	r0, r3, #1
 8016ee0:	0fcb      	lsrs	r3, r1, #31
 8016ee2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016ee6:	0049      	lsls	r1, r1, #1
 8016ee8:	2316      	movs	r3, #22
 8016eea:	462c      	mov	r4, r5
 8016eec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016ef0:	19a7      	adds	r7, r4, r6
 8016ef2:	4297      	cmp	r7, r2
 8016ef4:	bfde      	ittt	le
 8016ef6:	19bc      	addle	r4, r7, r6
 8016ef8:	1bd2      	suble	r2, r2, r7
 8016efa:	19ad      	addle	r5, r5, r6
 8016efc:	0fcf      	lsrs	r7, r1, #31
 8016efe:	3b01      	subs	r3, #1
 8016f00:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016f04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016f08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016f0c:	d1f0      	bne.n	8016ef0 <__ieee754_sqrt+0x94>
 8016f0e:	f04f 0c20 	mov.w	ip, #32
 8016f12:	469e      	mov	lr, r3
 8016f14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016f18:	42a2      	cmp	r2, r4
 8016f1a:	eb06 070e 	add.w	r7, r6, lr
 8016f1e:	dc02      	bgt.n	8016f26 <__ieee754_sqrt+0xca>
 8016f20:	d112      	bne.n	8016f48 <__ieee754_sqrt+0xec>
 8016f22:	428f      	cmp	r7, r1
 8016f24:	d810      	bhi.n	8016f48 <__ieee754_sqrt+0xec>
 8016f26:	2f00      	cmp	r7, #0
 8016f28:	eb07 0e06 	add.w	lr, r7, r6
 8016f2c:	da42      	bge.n	8016fb4 <__ieee754_sqrt+0x158>
 8016f2e:	f1be 0f00 	cmp.w	lr, #0
 8016f32:	db3f      	blt.n	8016fb4 <__ieee754_sqrt+0x158>
 8016f34:	f104 0801 	add.w	r8, r4, #1
 8016f38:	1b12      	subs	r2, r2, r4
 8016f3a:	428f      	cmp	r7, r1
 8016f3c:	bf88      	it	hi
 8016f3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016f42:	1bc9      	subs	r1, r1, r7
 8016f44:	4433      	add	r3, r6
 8016f46:	4644      	mov	r4, r8
 8016f48:	0052      	lsls	r2, r2, #1
 8016f4a:	f1bc 0c01 	subs.w	ip, ip, #1
 8016f4e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016f52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016f56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016f5a:	d1dd      	bne.n	8016f18 <__ieee754_sqrt+0xbc>
 8016f5c:	430a      	orrs	r2, r1
 8016f5e:	d006      	beq.n	8016f6e <__ieee754_sqrt+0x112>
 8016f60:	1c5c      	adds	r4, r3, #1
 8016f62:	bf13      	iteet	ne
 8016f64:	3301      	addne	r3, #1
 8016f66:	3501      	addeq	r5, #1
 8016f68:	4663      	moveq	r3, ip
 8016f6a:	f023 0301 	bicne.w	r3, r3, #1
 8016f6e:	106a      	asrs	r2, r5, #1
 8016f70:	085b      	lsrs	r3, r3, #1
 8016f72:	07e9      	lsls	r1, r5, #31
 8016f74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016f78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016f7c:	bf48      	it	mi
 8016f7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016f82:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016f86:	461c      	mov	r4, r3
 8016f88:	e780      	b.n	8016e8c <__ieee754_sqrt+0x30>
 8016f8a:	0aca      	lsrs	r2, r1, #11
 8016f8c:	3815      	subs	r0, #21
 8016f8e:	0549      	lsls	r1, r1, #21
 8016f90:	2a00      	cmp	r2, #0
 8016f92:	d0fa      	beq.n	8016f8a <__ieee754_sqrt+0x12e>
 8016f94:	02d6      	lsls	r6, r2, #11
 8016f96:	d50a      	bpl.n	8016fae <__ieee754_sqrt+0x152>
 8016f98:	f1c3 0420 	rsb	r4, r3, #32
 8016f9c:	fa21 f404 	lsr.w	r4, r1, r4
 8016fa0:	1e5d      	subs	r5, r3, #1
 8016fa2:	4099      	lsls	r1, r3
 8016fa4:	4322      	orrs	r2, r4
 8016fa6:	1b43      	subs	r3, r0, r5
 8016fa8:	e78b      	b.n	8016ec2 <__ieee754_sqrt+0x66>
 8016faa:	4618      	mov	r0, r3
 8016fac:	e7f0      	b.n	8016f90 <__ieee754_sqrt+0x134>
 8016fae:	0052      	lsls	r2, r2, #1
 8016fb0:	3301      	adds	r3, #1
 8016fb2:	e7ef      	b.n	8016f94 <__ieee754_sqrt+0x138>
 8016fb4:	46a0      	mov	r8, r4
 8016fb6:	e7bf      	b.n	8016f38 <__ieee754_sqrt+0xdc>
 8016fb8:	7ff00000 	.word	0x7ff00000
 8016fbc:	00000000 	.word	0x00000000

08016fc0 <__kernel_cos>:
 8016fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc4:	ec59 8b10 	vmov	r8, r9, d0
 8016fc8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8016fcc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8016fd0:	ed2d 8b02 	vpush	{d8}
 8016fd4:	eeb0 8a41 	vmov.f32	s16, s2
 8016fd8:	eef0 8a61 	vmov.f32	s17, s3
 8016fdc:	da07      	bge.n	8016fee <__kernel_cos+0x2e>
 8016fde:	ee10 0a10 	vmov	r0, s0
 8016fe2:	4649      	mov	r1, r9
 8016fe4:	f7e9 fdd8 	bl	8000b98 <__aeabi_d2iz>
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	f000 8089 	beq.w	8017100 <__kernel_cos+0x140>
 8016fee:	4642      	mov	r2, r8
 8016ff0:	464b      	mov	r3, r9
 8016ff2:	4640      	mov	r0, r8
 8016ff4:	4649      	mov	r1, r9
 8016ff6:	f7e9 fb1f 	bl	8000638 <__aeabi_dmul>
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	4b4e      	ldr	r3, [pc, #312]	; (8017138 <__kernel_cos+0x178>)
 8016ffe:	4604      	mov	r4, r0
 8017000:	460d      	mov	r5, r1
 8017002:	f7e9 fb19 	bl	8000638 <__aeabi_dmul>
 8017006:	a340      	add	r3, pc, #256	; (adr r3, 8017108 <__kernel_cos+0x148>)
 8017008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700c:	4682      	mov	sl, r0
 801700e:	468b      	mov	fp, r1
 8017010:	4620      	mov	r0, r4
 8017012:	4629      	mov	r1, r5
 8017014:	f7e9 fb10 	bl	8000638 <__aeabi_dmul>
 8017018:	a33d      	add	r3, pc, #244	; (adr r3, 8017110 <__kernel_cos+0x150>)
 801701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701e:	f7e9 f955 	bl	80002cc <__adddf3>
 8017022:	4622      	mov	r2, r4
 8017024:	462b      	mov	r3, r5
 8017026:	f7e9 fb07 	bl	8000638 <__aeabi_dmul>
 801702a:	a33b      	add	r3, pc, #236	; (adr r3, 8017118 <__kernel_cos+0x158>)
 801702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017030:	f7e9 f94a 	bl	80002c8 <__aeabi_dsub>
 8017034:	4622      	mov	r2, r4
 8017036:	462b      	mov	r3, r5
 8017038:	f7e9 fafe 	bl	8000638 <__aeabi_dmul>
 801703c:	a338      	add	r3, pc, #224	; (adr r3, 8017120 <__kernel_cos+0x160>)
 801703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017042:	f7e9 f943 	bl	80002cc <__adddf3>
 8017046:	4622      	mov	r2, r4
 8017048:	462b      	mov	r3, r5
 801704a:	f7e9 faf5 	bl	8000638 <__aeabi_dmul>
 801704e:	a336      	add	r3, pc, #216	; (adr r3, 8017128 <__kernel_cos+0x168>)
 8017050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017054:	f7e9 f938 	bl	80002c8 <__aeabi_dsub>
 8017058:	4622      	mov	r2, r4
 801705a:	462b      	mov	r3, r5
 801705c:	f7e9 faec 	bl	8000638 <__aeabi_dmul>
 8017060:	a333      	add	r3, pc, #204	; (adr r3, 8017130 <__kernel_cos+0x170>)
 8017062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017066:	f7e9 f931 	bl	80002cc <__adddf3>
 801706a:	4622      	mov	r2, r4
 801706c:	462b      	mov	r3, r5
 801706e:	f7e9 fae3 	bl	8000638 <__aeabi_dmul>
 8017072:	4622      	mov	r2, r4
 8017074:	462b      	mov	r3, r5
 8017076:	f7e9 fadf 	bl	8000638 <__aeabi_dmul>
 801707a:	ec53 2b18 	vmov	r2, r3, d8
 801707e:	4604      	mov	r4, r0
 8017080:	460d      	mov	r5, r1
 8017082:	4640      	mov	r0, r8
 8017084:	4649      	mov	r1, r9
 8017086:	f7e9 fad7 	bl	8000638 <__aeabi_dmul>
 801708a:	460b      	mov	r3, r1
 801708c:	4602      	mov	r2, r0
 801708e:	4629      	mov	r1, r5
 8017090:	4620      	mov	r0, r4
 8017092:	f7e9 f919 	bl	80002c8 <__aeabi_dsub>
 8017096:	4b29      	ldr	r3, [pc, #164]	; (801713c <__kernel_cos+0x17c>)
 8017098:	429e      	cmp	r6, r3
 801709a:	4680      	mov	r8, r0
 801709c:	4689      	mov	r9, r1
 801709e:	dc11      	bgt.n	80170c4 <__kernel_cos+0x104>
 80170a0:	4602      	mov	r2, r0
 80170a2:	460b      	mov	r3, r1
 80170a4:	4650      	mov	r0, sl
 80170a6:	4659      	mov	r1, fp
 80170a8:	f7e9 f90e 	bl	80002c8 <__aeabi_dsub>
 80170ac:	460b      	mov	r3, r1
 80170ae:	4924      	ldr	r1, [pc, #144]	; (8017140 <__kernel_cos+0x180>)
 80170b0:	4602      	mov	r2, r0
 80170b2:	2000      	movs	r0, #0
 80170b4:	f7e9 f908 	bl	80002c8 <__aeabi_dsub>
 80170b8:	ecbd 8b02 	vpop	{d8}
 80170bc:	ec41 0b10 	vmov	d0, r0, r1
 80170c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170c4:	4b1f      	ldr	r3, [pc, #124]	; (8017144 <__kernel_cos+0x184>)
 80170c6:	491e      	ldr	r1, [pc, #120]	; (8017140 <__kernel_cos+0x180>)
 80170c8:	429e      	cmp	r6, r3
 80170ca:	bfcc      	ite	gt
 80170cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8017148 <__kernel_cos+0x188>)
 80170ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80170d2:	2400      	movs	r4, #0
 80170d4:	4622      	mov	r2, r4
 80170d6:	462b      	mov	r3, r5
 80170d8:	2000      	movs	r0, #0
 80170da:	f7e9 f8f5 	bl	80002c8 <__aeabi_dsub>
 80170de:	4622      	mov	r2, r4
 80170e0:	4606      	mov	r6, r0
 80170e2:	460f      	mov	r7, r1
 80170e4:	462b      	mov	r3, r5
 80170e6:	4650      	mov	r0, sl
 80170e8:	4659      	mov	r1, fp
 80170ea:	f7e9 f8ed 	bl	80002c8 <__aeabi_dsub>
 80170ee:	4642      	mov	r2, r8
 80170f0:	464b      	mov	r3, r9
 80170f2:	f7e9 f8e9 	bl	80002c8 <__aeabi_dsub>
 80170f6:	4602      	mov	r2, r0
 80170f8:	460b      	mov	r3, r1
 80170fa:	4630      	mov	r0, r6
 80170fc:	4639      	mov	r1, r7
 80170fe:	e7d9      	b.n	80170b4 <__kernel_cos+0xf4>
 8017100:	2000      	movs	r0, #0
 8017102:	490f      	ldr	r1, [pc, #60]	; (8017140 <__kernel_cos+0x180>)
 8017104:	e7d8      	b.n	80170b8 <__kernel_cos+0xf8>
 8017106:	bf00      	nop
 8017108:	be8838d4 	.word	0xbe8838d4
 801710c:	bda8fae9 	.word	0xbda8fae9
 8017110:	bdb4b1c4 	.word	0xbdb4b1c4
 8017114:	3e21ee9e 	.word	0x3e21ee9e
 8017118:	809c52ad 	.word	0x809c52ad
 801711c:	3e927e4f 	.word	0x3e927e4f
 8017120:	19cb1590 	.word	0x19cb1590
 8017124:	3efa01a0 	.word	0x3efa01a0
 8017128:	16c15177 	.word	0x16c15177
 801712c:	3f56c16c 	.word	0x3f56c16c
 8017130:	5555554c 	.word	0x5555554c
 8017134:	3fa55555 	.word	0x3fa55555
 8017138:	3fe00000 	.word	0x3fe00000
 801713c:	3fd33332 	.word	0x3fd33332
 8017140:	3ff00000 	.word	0x3ff00000
 8017144:	3fe90000 	.word	0x3fe90000
 8017148:	3fd20000 	.word	0x3fd20000
 801714c:	00000000 	.word	0x00000000

08017150 <__kernel_rem_pio2>:
 8017150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017154:	ed2d 8b02 	vpush	{d8}
 8017158:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801715c:	1ed4      	subs	r4, r2, #3
 801715e:	9308      	str	r3, [sp, #32]
 8017160:	9101      	str	r1, [sp, #4]
 8017162:	4bc5      	ldr	r3, [pc, #788]	; (8017478 <__kernel_rem_pio2+0x328>)
 8017164:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8017166:	9009      	str	r0, [sp, #36]	; 0x24
 8017168:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801716c:	9304      	str	r3, [sp, #16]
 801716e:	9b08      	ldr	r3, [sp, #32]
 8017170:	3b01      	subs	r3, #1
 8017172:	9307      	str	r3, [sp, #28]
 8017174:	2318      	movs	r3, #24
 8017176:	fb94 f4f3 	sdiv	r4, r4, r3
 801717a:	f06f 0317 	mvn.w	r3, #23
 801717e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8017182:	fb04 3303 	mla	r3, r4, r3, r3
 8017186:	eb03 0a02 	add.w	sl, r3, r2
 801718a:	9b04      	ldr	r3, [sp, #16]
 801718c:	9a07      	ldr	r2, [sp, #28]
 801718e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8017468 <__kernel_rem_pio2+0x318>
 8017192:	eb03 0802 	add.w	r8, r3, r2
 8017196:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8017198:	1aa7      	subs	r7, r4, r2
 801719a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801719e:	ae22      	add	r6, sp, #136	; 0x88
 80171a0:	2500      	movs	r5, #0
 80171a2:	4545      	cmp	r5, r8
 80171a4:	dd13      	ble.n	80171ce <__kernel_rem_pio2+0x7e>
 80171a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8017468 <__kernel_rem_pio2+0x318>
 80171aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80171ae:	2600      	movs	r6, #0
 80171b0:	9b04      	ldr	r3, [sp, #16]
 80171b2:	429e      	cmp	r6, r3
 80171b4:	dc32      	bgt.n	801721c <__kernel_rem_pio2+0xcc>
 80171b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171b8:	9302      	str	r3, [sp, #8]
 80171ba:	9b08      	ldr	r3, [sp, #32]
 80171bc:	199d      	adds	r5, r3, r6
 80171be:	ab22      	add	r3, sp, #136	; 0x88
 80171c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80171c4:	9306      	str	r3, [sp, #24]
 80171c6:	ec59 8b18 	vmov	r8, r9, d8
 80171ca:	2700      	movs	r7, #0
 80171cc:	e01f      	b.n	801720e <__kernel_rem_pio2+0xbe>
 80171ce:	42ef      	cmn	r7, r5
 80171d0:	d407      	bmi.n	80171e2 <__kernel_rem_pio2+0x92>
 80171d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80171d6:	f7e9 f9c5 	bl	8000564 <__aeabi_i2d>
 80171da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80171de:	3501      	adds	r5, #1
 80171e0:	e7df      	b.n	80171a2 <__kernel_rem_pio2+0x52>
 80171e2:	ec51 0b18 	vmov	r0, r1, d8
 80171e6:	e7f8      	b.n	80171da <__kernel_rem_pio2+0x8a>
 80171e8:	9906      	ldr	r1, [sp, #24]
 80171ea:	9d02      	ldr	r5, [sp, #8]
 80171ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80171f0:	9106      	str	r1, [sp, #24]
 80171f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80171f6:	9502      	str	r5, [sp, #8]
 80171f8:	f7e9 fa1e 	bl	8000638 <__aeabi_dmul>
 80171fc:	4602      	mov	r2, r0
 80171fe:	460b      	mov	r3, r1
 8017200:	4640      	mov	r0, r8
 8017202:	4649      	mov	r1, r9
 8017204:	f7e9 f862 	bl	80002cc <__adddf3>
 8017208:	3701      	adds	r7, #1
 801720a:	4680      	mov	r8, r0
 801720c:	4689      	mov	r9, r1
 801720e:	9b07      	ldr	r3, [sp, #28]
 8017210:	429f      	cmp	r7, r3
 8017212:	dde9      	ble.n	80171e8 <__kernel_rem_pio2+0x98>
 8017214:	e8eb 8902 	strd	r8, r9, [fp], #8
 8017218:	3601      	adds	r6, #1
 801721a:	e7c9      	b.n	80171b0 <__kernel_rem_pio2+0x60>
 801721c:	9b04      	ldr	r3, [sp, #16]
 801721e:	aa0e      	add	r2, sp, #56	; 0x38
 8017220:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017224:	930c      	str	r3, [sp, #48]	; 0x30
 8017226:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8017228:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801722c:	9c04      	ldr	r4, [sp, #16]
 801722e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017230:	ab9a      	add	r3, sp, #616	; 0x268
 8017232:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8017236:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801723a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801723e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8017242:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017246:	ab9a      	add	r3, sp, #616	; 0x268
 8017248:	445b      	add	r3, fp
 801724a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801724e:	2500      	movs	r5, #0
 8017250:	1b63      	subs	r3, r4, r5
 8017252:	2b00      	cmp	r3, #0
 8017254:	dc78      	bgt.n	8017348 <__kernel_rem_pio2+0x1f8>
 8017256:	4650      	mov	r0, sl
 8017258:	ec49 8b10 	vmov	d0, r8, r9
 801725c:	f000 fe3c 	bl	8017ed8 <scalbn>
 8017260:	ec57 6b10 	vmov	r6, r7, d0
 8017264:	2200      	movs	r2, #0
 8017266:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801726a:	ee10 0a10 	vmov	r0, s0
 801726e:	4639      	mov	r1, r7
 8017270:	f7e9 f9e2 	bl	8000638 <__aeabi_dmul>
 8017274:	ec41 0b10 	vmov	d0, r0, r1
 8017278:	f000 fd1a 	bl	8017cb0 <floor>
 801727c:	2200      	movs	r2, #0
 801727e:	ec51 0b10 	vmov	r0, r1, d0
 8017282:	4b7e      	ldr	r3, [pc, #504]	; (801747c <__kernel_rem_pio2+0x32c>)
 8017284:	f7e9 f9d8 	bl	8000638 <__aeabi_dmul>
 8017288:	4602      	mov	r2, r0
 801728a:	460b      	mov	r3, r1
 801728c:	4630      	mov	r0, r6
 801728e:	4639      	mov	r1, r7
 8017290:	f7e9 f81a 	bl	80002c8 <__aeabi_dsub>
 8017294:	460f      	mov	r7, r1
 8017296:	4606      	mov	r6, r0
 8017298:	f7e9 fc7e 	bl	8000b98 <__aeabi_d2iz>
 801729c:	9006      	str	r0, [sp, #24]
 801729e:	f7e9 f961 	bl	8000564 <__aeabi_i2d>
 80172a2:	4602      	mov	r2, r0
 80172a4:	460b      	mov	r3, r1
 80172a6:	4630      	mov	r0, r6
 80172a8:	4639      	mov	r1, r7
 80172aa:	f7e9 f80d 	bl	80002c8 <__aeabi_dsub>
 80172ae:	f1ba 0f00 	cmp.w	sl, #0
 80172b2:	4606      	mov	r6, r0
 80172b4:	460f      	mov	r7, r1
 80172b6:	dd6c      	ble.n	8017392 <__kernel_rem_pio2+0x242>
 80172b8:	1e62      	subs	r2, r4, #1
 80172ba:	ab0e      	add	r3, sp, #56	; 0x38
 80172bc:	f1ca 0118 	rsb	r1, sl, #24
 80172c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80172c4:	9d06      	ldr	r5, [sp, #24]
 80172c6:	fa40 f301 	asr.w	r3, r0, r1
 80172ca:	441d      	add	r5, r3
 80172cc:	408b      	lsls	r3, r1
 80172ce:	1ac0      	subs	r0, r0, r3
 80172d0:	ab0e      	add	r3, sp, #56	; 0x38
 80172d2:	9506      	str	r5, [sp, #24]
 80172d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80172d8:	f1ca 0317 	rsb	r3, sl, #23
 80172dc:	fa40 f303 	asr.w	r3, r0, r3
 80172e0:	9302      	str	r3, [sp, #8]
 80172e2:	9b02      	ldr	r3, [sp, #8]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	dd62      	ble.n	80173ae <__kernel_rem_pio2+0x25e>
 80172e8:	9b06      	ldr	r3, [sp, #24]
 80172ea:	2200      	movs	r2, #0
 80172ec:	3301      	adds	r3, #1
 80172ee:	9306      	str	r3, [sp, #24]
 80172f0:	4615      	mov	r5, r2
 80172f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80172f6:	4294      	cmp	r4, r2
 80172f8:	f300 8095 	bgt.w	8017426 <__kernel_rem_pio2+0x2d6>
 80172fc:	f1ba 0f00 	cmp.w	sl, #0
 8017300:	dd07      	ble.n	8017312 <__kernel_rem_pio2+0x1c2>
 8017302:	f1ba 0f01 	cmp.w	sl, #1
 8017306:	f000 80a2 	beq.w	801744e <__kernel_rem_pio2+0x2fe>
 801730a:	f1ba 0f02 	cmp.w	sl, #2
 801730e:	f000 80c1 	beq.w	8017494 <__kernel_rem_pio2+0x344>
 8017312:	9b02      	ldr	r3, [sp, #8]
 8017314:	2b02      	cmp	r3, #2
 8017316:	d14a      	bne.n	80173ae <__kernel_rem_pio2+0x25e>
 8017318:	4632      	mov	r2, r6
 801731a:	463b      	mov	r3, r7
 801731c:	2000      	movs	r0, #0
 801731e:	4958      	ldr	r1, [pc, #352]	; (8017480 <__kernel_rem_pio2+0x330>)
 8017320:	f7e8 ffd2 	bl	80002c8 <__aeabi_dsub>
 8017324:	4606      	mov	r6, r0
 8017326:	460f      	mov	r7, r1
 8017328:	2d00      	cmp	r5, #0
 801732a:	d040      	beq.n	80173ae <__kernel_rem_pio2+0x25e>
 801732c:	4650      	mov	r0, sl
 801732e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8017470 <__kernel_rem_pio2+0x320>
 8017332:	f000 fdd1 	bl	8017ed8 <scalbn>
 8017336:	4630      	mov	r0, r6
 8017338:	4639      	mov	r1, r7
 801733a:	ec53 2b10 	vmov	r2, r3, d0
 801733e:	f7e8 ffc3 	bl	80002c8 <__aeabi_dsub>
 8017342:	4606      	mov	r6, r0
 8017344:	460f      	mov	r7, r1
 8017346:	e032      	b.n	80173ae <__kernel_rem_pio2+0x25e>
 8017348:	2200      	movs	r2, #0
 801734a:	4b4e      	ldr	r3, [pc, #312]	; (8017484 <__kernel_rem_pio2+0x334>)
 801734c:	4640      	mov	r0, r8
 801734e:	4649      	mov	r1, r9
 8017350:	f7e9 f972 	bl	8000638 <__aeabi_dmul>
 8017354:	f7e9 fc20 	bl	8000b98 <__aeabi_d2iz>
 8017358:	f7e9 f904 	bl	8000564 <__aeabi_i2d>
 801735c:	2200      	movs	r2, #0
 801735e:	4b4a      	ldr	r3, [pc, #296]	; (8017488 <__kernel_rem_pio2+0x338>)
 8017360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017364:	f7e9 f968 	bl	8000638 <__aeabi_dmul>
 8017368:	4602      	mov	r2, r0
 801736a:	460b      	mov	r3, r1
 801736c:	4640      	mov	r0, r8
 801736e:	4649      	mov	r1, r9
 8017370:	f7e8 ffaa 	bl	80002c8 <__aeabi_dsub>
 8017374:	f7e9 fc10 	bl	8000b98 <__aeabi_d2iz>
 8017378:	ab0e      	add	r3, sp, #56	; 0x38
 801737a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801737e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8017382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017386:	f7e8 ffa1 	bl	80002cc <__adddf3>
 801738a:	3501      	adds	r5, #1
 801738c:	4680      	mov	r8, r0
 801738e:	4689      	mov	r9, r1
 8017390:	e75e      	b.n	8017250 <__kernel_rem_pio2+0x100>
 8017392:	d105      	bne.n	80173a0 <__kernel_rem_pio2+0x250>
 8017394:	1e63      	subs	r3, r4, #1
 8017396:	aa0e      	add	r2, sp, #56	; 0x38
 8017398:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801739c:	15c3      	asrs	r3, r0, #23
 801739e:	e79f      	b.n	80172e0 <__kernel_rem_pio2+0x190>
 80173a0:	2200      	movs	r2, #0
 80173a2:	4b3a      	ldr	r3, [pc, #232]	; (801748c <__kernel_rem_pio2+0x33c>)
 80173a4:	f7e9 fbce 	bl	8000b44 <__aeabi_dcmpge>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	d139      	bne.n	8017420 <__kernel_rem_pio2+0x2d0>
 80173ac:	9002      	str	r0, [sp, #8]
 80173ae:	2200      	movs	r2, #0
 80173b0:	2300      	movs	r3, #0
 80173b2:	4630      	mov	r0, r6
 80173b4:	4639      	mov	r1, r7
 80173b6:	f7e9 fba7 	bl	8000b08 <__aeabi_dcmpeq>
 80173ba:	2800      	cmp	r0, #0
 80173bc:	f000 80c7 	beq.w	801754e <__kernel_rem_pio2+0x3fe>
 80173c0:	1e65      	subs	r5, r4, #1
 80173c2:	462b      	mov	r3, r5
 80173c4:	2200      	movs	r2, #0
 80173c6:	9904      	ldr	r1, [sp, #16]
 80173c8:	428b      	cmp	r3, r1
 80173ca:	da6a      	bge.n	80174a2 <__kernel_rem_pio2+0x352>
 80173cc:	2a00      	cmp	r2, #0
 80173ce:	f000 8088 	beq.w	80174e2 <__kernel_rem_pio2+0x392>
 80173d2:	ab0e      	add	r3, sp, #56	; 0x38
 80173d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80173d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	f000 80b4 	beq.w	801754a <__kernel_rem_pio2+0x3fa>
 80173e2:	4650      	mov	r0, sl
 80173e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8017470 <__kernel_rem_pio2+0x320>
 80173e8:	f000 fd76 	bl	8017ed8 <scalbn>
 80173ec:	00ec      	lsls	r4, r5, #3
 80173ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80173f0:	191e      	adds	r6, r3, r4
 80173f2:	ec59 8b10 	vmov	r8, r9, d0
 80173f6:	f106 0a08 	add.w	sl, r6, #8
 80173fa:	462f      	mov	r7, r5
 80173fc:	2f00      	cmp	r7, #0
 80173fe:	f280 80df 	bge.w	80175c0 <__kernel_rem_pio2+0x470>
 8017402:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8017468 <__kernel_rem_pio2+0x318>
 8017406:	f04f 0a00 	mov.w	sl, #0
 801740a:	eba5 030a 	sub.w	r3, r5, sl
 801740e:	2b00      	cmp	r3, #0
 8017410:	f2c0 810a 	blt.w	8017628 <__kernel_rem_pio2+0x4d8>
 8017414:	f8df b078 	ldr.w	fp, [pc, #120]	; 8017490 <__kernel_rem_pio2+0x340>
 8017418:	ec59 8b18 	vmov	r8, r9, d8
 801741c:	2700      	movs	r7, #0
 801741e:	e0f5      	b.n	801760c <__kernel_rem_pio2+0x4bc>
 8017420:	2302      	movs	r3, #2
 8017422:	9302      	str	r3, [sp, #8]
 8017424:	e760      	b.n	80172e8 <__kernel_rem_pio2+0x198>
 8017426:	ab0e      	add	r3, sp, #56	; 0x38
 8017428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801742c:	b94d      	cbnz	r5, 8017442 <__kernel_rem_pio2+0x2f2>
 801742e:	b12b      	cbz	r3, 801743c <__kernel_rem_pio2+0x2ec>
 8017430:	a80e      	add	r0, sp, #56	; 0x38
 8017432:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8017436:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801743a:	2301      	movs	r3, #1
 801743c:	3201      	adds	r2, #1
 801743e:	461d      	mov	r5, r3
 8017440:	e759      	b.n	80172f6 <__kernel_rem_pio2+0x1a6>
 8017442:	a80e      	add	r0, sp, #56	; 0x38
 8017444:	1acb      	subs	r3, r1, r3
 8017446:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801744a:	462b      	mov	r3, r5
 801744c:	e7f6      	b.n	801743c <__kernel_rem_pio2+0x2ec>
 801744e:	1e62      	subs	r2, r4, #1
 8017450:	ab0e      	add	r3, sp, #56	; 0x38
 8017452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017456:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801745a:	a90e      	add	r1, sp, #56	; 0x38
 801745c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017460:	e757      	b.n	8017312 <__kernel_rem_pio2+0x1c2>
 8017462:	bf00      	nop
 8017464:	f3af 8000 	nop.w
	...
 8017474:	3ff00000 	.word	0x3ff00000
 8017478:	08018bb0 	.word	0x08018bb0
 801747c:	40200000 	.word	0x40200000
 8017480:	3ff00000 	.word	0x3ff00000
 8017484:	3e700000 	.word	0x3e700000
 8017488:	41700000 	.word	0x41700000
 801748c:	3fe00000 	.word	0x3fe00000
 8017490:	08018b70 	.word	0x08018b70
 8017494:	1e62      	subs	r2, r4, #1
 8017496:	ab0e      	add	r3, sp, #56	; 0x38
 8017498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801749c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80174a0:	e7db      	b.n	801745a <__kernel_rem_pio2+0x30a>
 80174a2:	a90e      	add	r1, sp, #56	; 0x38
 80174a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80174a8:	3b01      	subs	r3, #1
 80174aa:	430a      	orrs	r2, r1
 80174ac:	e78b      	b.n	80173c6 <__kernel_rem_pio2+0x276>
 80174ae:	3301      	adds	r3, #1
 80174b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80174b4:	2900      	cmp	r1, #0
 80174b6:	d0fa      	beq.n	80174ae <__kernel_rem_pio2+0x35e>
 80174b8:	9a08      	ldr	r2, [sp, #32]
 80174ba:	4422      	add	r2, r4
 80174bc:	00d2      	lsls	r2, r2, #3
 80174be:	a922      	add	r1, sp, #136	; 0x88
 80174c0:	18e3      	adds	r3, r4, r3
 80174c2:	9206      	str	r2, [sp, #24]
 80174c4:	440a      	add	r2, r1
 80174c6:	9302      	str	r3, [sp, #8]
 80174c8:	f10b 0108 	add.w	r1, fp, #8
 80174cc:	f102 0308 	add.w	r3, r2, #8
 80174d0:	1c66      	adds	r6, r4, #1
 80174d2:	910a      	str	r1, [sp, #40]	; 0x28
 80174d4:	2500      	movs	r5, #0
 80174d6:	930d      	str	r3, [sp, #52]	; 0x34
 80174d8:	9b02      	ldr	r3, [sp, #8]
 80174da:	42b3      	cmp	r3, r6
 80174dc:	da04      	bge.n	80174e8 <__kernel_rem_pio2+0x398>
 80174de:	461c      	mov	r4, r3
 80174e0:	e6a6      	b.n	8017230 <__kernel_rem_pio2+0xe0>
 80174e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80174e4:	2301      	movs	r3, #1
 80174e6:	e7e3      	b.n	80174b0 <__kernel_rem_pio2+0x360>
 80174e8:	9b06      	ldr	r3, [sp, #24]
 80174ea:	18ef      	adds	r7, r5, r3
 80174ec:	ab22      	add	r3, sp, #136	; 0x88
 80174ee:	441f      	add	r7, r3
 80174f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80174f6:	f7e9 f835 	bl	8000564 <__aeabi_i2d>
 80174fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174fc:	461c      	mov	r4, r3
 80174fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017500:	e9c7 0100 	strd	r0, r1, [r7]
 8017504:	eb03 0b05 	add.w	fp, r3, r5
 8017508:	2700      	movs	r7, #0
 801750a:	f04f 0800 	mov.w	r8, #0
 801750e:	f04f 0900 	mov.w	r9, #0
 8017512:	9b07      	ldr	r3, [sp, #28]
 8017514:	429f      	cmp	r7, r3
 8017516:	dd08      	ble.n	801752a <__kernel_rem_pio2+0x3da>
 8017518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801751a:	aa72      	add	r2, sp, #456	; 0x1c8
 801751c:	18eb      	adds	r3, r5, r3
 801751e:	4413      	add	r3, r2
 8017520:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8017524:	3601      	adds	r6, #1
 8017526:	3508      	adds	r5, #8
 8017528:	e7d6      	b.n	80174d8 <__kernel_rem_pio2+0x388>
 801752a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801752e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8017532:	f7e9 f881 	bl	8000638 <__aeabi_dmul>
 8017536:	4602      	mov	r2, r0
 8017538:	460b      	mov	r3, r1
 801753a:	4640      	mov	r0, r8
 801753c:	4649      	mov	r1, r9
 801753e:	f7e8 fec5 	bl	80002cc <__adddf3>
 8017542:	3701      	adds	r7, #1
 8017544:	4680      	mov	r8, r0
 8017546:	4689      	mov	r9, r1
 8017548:	e7e3      	b.n	8017512 <__kernel_rem_pio2+0x3c2>
 801754a:	3d01      	subs	r5, #1
 801754c:	e741      	b.n	80173d2 <__kernel_rem_pio2+0x282>
 801754e:	f1ca 0000 	rsb	r0, sl, #0
 8017552:	ec47 6b10 	vmov	d0, r6, r7
 8017556:	f000 fcbf 	bl	8017ed8 <scalbn>
 801755a:	ec57 6b10 	vmov	r6, r7, d0
 801755e:	2200      	movs	r2, #0
 8017560:	4b99      	ldr	r3, [pc, #612]	; (80177c8 <__kernel_rem_pio2+0x678>)
 8017562:	ee10 0a10 	vmov	r0, s0
 8017566:	4639      	mov	r1, r7
 8017568:	f7e9 faec 	bl	8000b44 <__aeabi_dcmpge>
 801756c:	b1f8      	cbz	r0, 80175ae <__kernel_rem_pio2+0x45e>
 801756e:	2200      	movs	r2, #0
 8017570:	4b96      	ldr	r3, [pc, #600]	; (80177cc <__kernel_rem_pio2+0x67c>)
 8017572:	4630      	mov	r0, r6
 8017574:	4639      	mov	r1, r7
 8017576:	f7e9 f85f 	bl	8000638 <__aeabi_dmul>
 801757a:	f7e9 fb0d 	bl	8000b98 <__aeabi_d2iz>
 801757e:	4680      	mov	r8, r0
 8017580:	f7e8 fff0 	bl	8000564 <__aeabi_i2d>
 8017584:	2200      	movs	r2, #0
 8017586:	4b90      	ldr	r3, [pc, #576]	; (80177c8 <__kernel_rem_pio2+0x678>)
 8017588:	f7e9 f856 	bl	8000638 <__aeabi_dmul>
 801758c:	460b      	mov	r3, r1
 801758e:	4602      	mov	r2, r0
 8017590:	4639      	mov	r1, r7
 8017592:	4630      	mov	r0, r6
 8017594:	f7e8 fe98 	bl	80002c8 <__aeabi_dsub>
 8017598:	f7e9 fafe 	bl	8000b98 <__aeabi_d2iz>
 801759c:	1c65      	adds	r5, r4, #1
 801759e:	ab0e      	add	r3, sp, #56	; 0x38
 80175a0:	f10a 0a18 	add.w	sl, sl, #24
 80175a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80175a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80175ac:	e719      	b.n	80173e2 <__kernel_rem_pio2+0x292>
 80175ae:	4630      	mov	r0, r6
 80175b0:	4639      	mov	r1, r7
 80175b2:	f7e9 faf1 	bl	8000b98 <__aeabi_d2iz>
 80175b6:	ab0e      	add	r3, sp, #56	; 0x38
 80175b8:	4625      	mov	r5, r4
 80175ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80175be:	e710      	b.n	80173e2 <__kernel_rem_pio2+0x292>
 80175c0:	ab0e      	add	r3, sp, #56	; 0x38
 80175c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80175c6:	f7e8 ffcd 	bl	8000564 <__aeabi_i2d>
 80175ca:	4642      	mov	r2, r8
 80175cc:	464b      	mov	r3, r9
 80175ce:	f7e9 f833 	bl	8000638 <__aeabi_dmul>
 80175d2:	2200      	movs	r2, #0
 80175d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80175d8:	4b7c      	ldr	r3, [pc, #496]	; (80177cc <__kernel_rem_pio2+0x67c>)
 80175da:	4640      	mov	r0, r8
 80175dc:	4649      	mov	r1, r9
 80175de:	f7e9 f82b 	bl	8000638 <__aeabi_dmul>
 80175e2:	3f01      	subs	r7, #1
 80175e4:	4680      	mov	r8, r0
 80175e6:	4689      	mov	r9, r1
 80175e8:	e708      	b.n	80173fc <__kernel_rem_pio2+0x2ac>
 80175ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80175ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80175f6:	f7e9 f81f 	bl	8000638 <__aeabi_dmul>
 80175fa:	4602      	mov	r2, r0
 80175fc:	460b      	mov	r3, r1
 80175fe:	4640      	mov	r0, r8
 8017600:	4649      	mov	r1, r9
 8017602:	f7e8 fe63 	bl	80002cc <__adddf3>
 8017606:	3701      	adds	r7, #1
 8017608:	4680      	mov	r8, r0
 801760a:	4689      	mov	r9, r1
 801760c:	9b04      	ldr	r3, [sp, #16]
 801760e:	429f      	cmp	r7, r3
 8017610:	dc01      	bgt.n	8017616 <__kernel_rem_pio2+0x4c6>
 8017612:	45ba      	cmp	sl, r7
 8017614:	dae9      	bge.n	80175ea <__kernel_rem_pio2+0x49a>
 8017616:	ab4a      	add	r3, sp, #296	; 0x128
 8017618:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801761c:	e9c3 8900 	strd	r8, r9, [r3]
 8017620:	f10a 0a01 	add.w	sl, sl, #1
 8017624:	3e08      	subs	r6, #8
 8017626:	e6f0      	b.n	801740a <__kernel_rem_pio2+0x2ba>
 8017628:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801762a:	2b03      	cmp	r3, #3
 801762c:	d85b      	bhi.n	80176e6 <__kernel_rem_pio2+0x596>
 801762e:	e8df f003 	tbb	[pc, r3]
 8017632:	264a      	.short	0x264a
 8017634:	0226      	.short	0x0226
 8017636:	ab9a      	add	r3, sp, #616	; 0x268
 8017638:	441c      	add	r4, r3
 801763a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801763e:	46a2      	mov	sl, r4
 8017640:	46ab      	mov	fp, r5
 8017642:	f1bb 0f00 	cmp.w	fp, #0
 8017646:	dc6c      	bgt.n	8017722 <__kernel_rem_pio2+0x5d2>
 8017648:	46a2      	mov	sl, r4
 801764a:	46ab      	mov	fp, r5
 801764c:	f1bb 0f01 	cmp.w	fp, #1
 8017650:	f300 8086 	bgt.w	8017760 <__kernel_rem_pio2+0x610>
 8017654:	2000      	movs	r0, #0
 8017656:	2100      	movs	r1, #0
 8017658:	2d01      	cmp	r5, #1
 801765a:	f300 80a0 	bgt.w	801779e <__kernel_rem_pio2+0x64e>
 801765e:	9b02      	ldr	r3, [sp, #8]
 8017660:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8017664:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8017668:	2b00      	cmp	r3, #0
 801766a:	f040 809e 	bne.w	80177aa <__kernel_rem_pio2+0x65a>
 801766e:	9b01      	ldr	r3, [sp, #4]
 8017670:	e9c3 7800 	strd	r7, r8, [r3]
 8017674:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017678:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801767c:	e033      	b.n	80176e6 <__kernel_rem_pio2+0x596>
 801767e:	3408      	adds	r4, #8
 8017680:	ab4a      	add	r3, sp, #296	; 0x128
 8017682:	441c      	add	r4, r3
 8017684:	462e      	mov	r6, r5
 8017686:	2000      	movs	r0, #0
 8017688:	2100      	movs	r1, #0
 801768a:	2e00      	cmp	r6, #0
 801768c:	da3a      	bge.n	8017704 <__kernel_rem_pio2+0x5b4>
 801768e:	9b02      	ldr	r3, [sp, #8]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d03d      	beq.n	8017710 <__kernel_rem_pio2+0x5c0>
 8017694:	4602      	mov	r2, r0
 8017696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801769a:	9c01      	ldr	r4, [sp, #4]
 801769c:	e9c4 2300 	strd	r2, r3, [r4]
 80176a0:	4602      	mov	r2, r0
 80176a2:	460b      	mov	r3, r1
 80176a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80176a8:	f7e8 fe0e 	bl	80002c8 <__aeabi_dsub>
 80176ac:	ae4c      	add	r6, sp, #304	; 0x130
 80176ae:	2401      	movs	r4, #1
 80176b0:	42a5      	cmp	r5, r4
 80176b2:	da30      	bge.n	8017716 <__kernel_rem_pio2+0x5c6>
 80176b4:	9b02      	ldr	r3, [sp, #8]
 80176b6:	b113      	cbz	r3, 80176be <__kernel_rem_pio2+0x56e>
 80176b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176bc:	4619      	mov	r1, r3
 80176be:	9b01      	ldr	r3, [sp, #4]
 80176c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80176c4:	e00f      	b.n	80176e6 <__kernel_rem_pio2+0x596>
 80176c6:	ab9a      	add	r3, sp, #616	; 0x268
 80176c8:	441c      	add	r4, r3
 80176ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80176ce:	2000      	movs	r0, #0
 80176d0:	2100      	movs	r1, #0
 80176d2:	2d00      	cmp	r5, #0
 80176d4:	da10      	bge.n	80176f8 <__kernel_rem_pio2+0x5a8>
 80176d6:	9b02      	ldr	r3, [sp, #8]
 80176d8:	b113      	cbz	r3, 80176e0 <__kernel_rem_pio2+0x590>
 80176da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176de:	4619      	mov	r1, r3
 80176e0:	9b01      	ldr	r3, [sp, #4]
 80176e2:	e9c3 0100 	strd	r0, r1, [r3]
 80176e6:	9b06      	ldr	r3, [sp, #24]
 80176e8:	f003 0007 	and.w	r0, r3, #7
 80176ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80176f0:	ecbd 8b02 	vpop	{d8}
 80176f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80176fc:	f7e8 fde6 	bl	80002cc <__adddf3>
 8017700:	3d01      	subs	r5, #1
 8017702:	e7e6      	b.n	80176d2 <__kernel_rem_pio2+0x582>
 8017704:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017708:	f7e8 fde0 	bl	80002cc <__adddf3>
 801770c:	3e01      	subs	r6, #1
 801770e:	e7bc      	b.n	801768a <__kernel_rem_pio2+0x53a>
 8017710:	4602      	mov	r2, r0
 8017712:	460b      	mov	r3, r1
 8017714:	e7c1      	b.n	801769a <__kernel_rem_pio2+0x54a>
 8017716:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801771a:	f7e8 fdd7 	bl	80002cc <__adddf3>
 801771e:	3401      	adds	r4, #1
 8017720:	e7c6      	b.n	80176b0 <__kernel_rem_pio2+0x560>
 8017722:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8017726:	ed3a 7b02 	vldmdb	sl!, {d7}
 801772a:	4640      	mov	r0, r8
 801772c:	ec53 2b17 	vmov	r2, r3, d7
 8017730:	4649      	mov	r1, r9
 8017732:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017736:	f7e8 fdc9 	bl	80002cc <__adddf3>
 801773a:	4602      	mov	r2, r0
 801773c:	460b      	mov	r3, r1
 801773e:	4606      	mov	r6, r0
 8017740:	460f      	mov	r7, r1
 8017742:	4640      	mov	r0, r8
 8017744:	4649      	mov	r1, r9
 8017746:	f7e8 fdbf 	bl	80002c8 <__aeabi_dsub>
 801774a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801774e:	f7e8 fdbd 	bl	80002cc <__adddf3>
 8017752:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017756:	e9ca 0100 	strd	r0, r1, [sl]
 801775a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801775e:	e770      	b.n	8017642 <__kernel_rem_pio2+0x4f2>
 8017760:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8017764:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017768:	4630      	mov	r0, r6
 801776a:	ec53 2b17 	vmov	r2, r3, d7
 801776e:	4639      	mov	r1, r7
 8017770:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017774:	f7e8 fdaa 	bl	80002cc <__adddf3>
 8017778:	4602      	mov	r2, r0
 801777a:	460b      	mov	r3, r1
 801777c:	4680      	mov	r8, r0
 801777e:	4689      	mov	r9, r1
 8017780:	4630      	mov	r0, r6
 8017782:	4639      	mov	r1, r7
 8017784:	f7e8 fda0 	bl	80002c8 <__aeabi_dsub>
 8017788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801778c:	f7e8 fd9e 	bl	80002cc <__adddf3>
 8017790:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017794:	e9ca 0100 	strd	r0, r1, [sl]
 8017798:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801779c:	e756      	b.n	801764c <__kernel_rem_pio2+0x4fc>
 801779e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80177a2:	f7e8 fd93 	bl	80002cc <__adddf3>
 80177a6:	3d01      	subs	r5, #1
 80177a8:	e756      	b.n	8017658 <__kernel_rem_pio2+0x508>
 80177aa:	9b01      	ldr	r3, [sp, #4]
 80177ac:	9a01      	ldr	r2, [sp, #4]
 80177ae:	601f      	str	r7, [r3, #0]
 80177b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80177b4:	605c      	str	r4, [r3, #4]
 80177b6:	609d      	str	r5, [r3, #8]
 80177b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80177bc:	60d3      	str	r3, [r2, #12]
 80177be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177c2:	6110      	str	r0, [r2, #16]
 80177c4:	6153      	str	r3, [r2, #20]
 80177c6:	e78e      	b.n	80176e6 <__kernel_rem_pio2+0x596>
 80177c8:	41700000 	.word	0x41700000
 80177cc:	3e700000 	.word	0x3e700000

080177d0 <__kernel_sin>:
 80177d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177d4:	ec55 4b10 	vmov	r4, r5, d0
 80177d8:	b085      	sub	sp, #20
 80177da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80177de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80177e2:	ed8d 1b00 	vstr	d1, [sp]
 80177e6:	9002      	str	r0, [sp, #8]
 80177e8:	da06      	bge.n	80177f8 <__kernel_sin+0x28>
 80177ea:	ee10 0a10 	vmov	r0, s0
 80177ee:	4629      	mov	r1, r5
 80177f0:	f7e9 f9d2 	bl	8000b98 <__aeabi_d2iz>
 80177f4:	2800      	cmp	r0, #0
 80177f6:	d051      	beq.n	801789c <__kernel_sin+0xcc>
 80177f8:	4622      	mov	r2, r4
 80177fa:	462b      	mov	r3, r5
 80177fc:	4620      	mov	r0, r4
 80177fe:	4629      	mov	r1, r5
 8017800:	f7e8 ff1a 	bl	8000638 <__aeabi_dmul>
 8017804:	4682      	mov	sl, r0
 8017806:	468b      	mov	fp, r1
 8017808:	4602      	mov	r2, r0
 801780a:	460b      	mov	r3, r1
 801780c:	4620      	mov	r0, r4
 801780e:	4629      	mov	r1, r5
 8017810:	f7e8 ff12 	bl	8000638 <__aeabi_dmul>
 8017814:	a341      	add	r3, pc, #260	; (adr r3, 801791c <__kernel_sin+0x14c>)
 8017816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781a:	4680      	mov	r8, r0
 801781c:	4689      	mov	r9, r1
 801781e:	4650      	mov	r0, sl
 8017820:	4659      	mov	r1, fp
 8017822:	f7e8 ff09 	bl	8000638 <__aeabi_dmul>
 8017826:	a33f      	add	r3, pc, #252	; (adr r3, 8017924 <__kernel_sin+0x154>)
 8017828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801782c:	f7e8 fd4c 	bl	80002c8 <__aeabi_dsub>
 8017830:	4652      	mov	r2, sl
 8017832:	465b      	mov	r3, fp
 8017834:	f7e8 ff00 	bl	8000638 <__aeabi_dmul>
 8017838:	a33c      	add	r3, pc, #240	; (adr r3, 801792c <__kernel_sin+0x15c>)
 801783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801783e:	f7e8 fd45 	bl	80002cc <__adddf3>
 8017842:	4652      	mov	r2, sl
 8017844:	465b      	mov	r3, fp
 8017846:	f7e8 fef7 	bl	8000638 <__aeabi_dmul>
 801784a:	a33a      	add	r3, pc, #232	; (adr r3, 8017934 <__kernel_sin+0x164>)
 801784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017850:	f7e8 fd3a 	bl	80002c8 <__aeabi_dsub>
 8017854:	4652      	mov	r2, sl
 8017856:	465b      	mov	r3, fp
 8017858:	f7e8 feee 	bl	8000638 <__aeabi_dmul>
 801785c:	a337      	add	r3, pc, #220	; (adr r3, 801793c <__kernel_sin+0x16c>)
 801785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017862:	f7e8 fd33 	bl	80002cc <__adddf3>
 8017866:	9b02      	ldr	r3, [sp, #8]
 8017868:	4606      	mov	r6, r0
 801786a:	460f      	mov	r7, r1
 801786c:	b9db      	cbnz	r3, 80178a6 <__kernel_sin+0xd6>
 801786e:	4602      	mov	r2, r0
 8017870:	460b      	mov	r3, r1
 8017872:	4650      	mov	r0, sl
 8017874:	4659      	mov	r1, fp
 8017876:	f7e8 fedf 	bl	8000638 <__aeabi_dmul>
 801787a:	a325      	add	r3, pc, #148	; (adr r3, 8017910 <__kernel_sin+0x140>)
 801787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017880:	f7e8 fd22 	bl	80002c8 <__aeabi_dsub>
 8017884:	4642      	mov	r2, r8
 8017886:	464b      	mov	r3, r9
 8017888:	f7e8 fed6 	bl	8000638 <__aeabi_dmul>
 801788c:	4602      	mov	r2, r0
 801788e:	460b      	mov	r3, r1
 8017890:	4620      	mov	r0, r4
 8017892:	4629      	mov	r1, r5
 8017894:	f7e8 fd1a 	bl	80002cc <__adddf3>
 8017898:	4604      	mov	r4, r0
 801789a:	460d      	mov	r5, r1
 801789c:	ec45 4b10 	vmov	d0, r4, r5
 80178a0:	b005      	add	sp, #20
 80178a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178a6:	2200      	movs	r2, #0
 80178a8:	4b1b      	ldr	r3, [pc, #108]	; (8017918 <__kernel_sin+0x148>)
 80178aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178ae:	f7e8 fec3 	bl	8000638 <__aeabi_dmul>
 80178b2:	4632      	mov	r2, r6
 80178b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80178b8:	463b      	mov	r3, r7
 80178ba:	4640      	mov	r0, r8
 80178bc:	4649      	mov	r1, r9
 80178be:	f7e8 febb 	bl	8000638 <__aeabi_dmul>
 80178c2:	4602      	mov	r2, r0
 80178c4:	460b      	mov	r3, r1
 80178c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178ca:	f7e8 fcfd 	bl	80002c8 <__aeabi_dsub>
 80178ce:	4652      	mov	r2, sl
 80178d0:	465b      	mov	r3, fp
 80178d2:	f7e8 feb1 	bl	8000638 <__aeabi_dmul>
 80178d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178da:	f7e8 fcf5 	bl	80002c8 <__aeabi_dsub>
 80178de:	a30c      	add	r3, pc, #48	; (adr r3, 8017910 <__kernel_sin+0x140>)
 80178e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e4:	4606      	mov	r6, r0
 80178e6:	460f      	mov	r7, r1
 80178e8:	4640      	mov	r0, r8
 80178ea:	4649      	mov	r1, r9
 80178ec:	f7e8 fea4 	bl	8000638 <__aeabi_dmul>
 80178f0:	4602      	mov	r2, r0
 80178f2:	460b      	mov	r3, r1
 80178f4:	4630      	mov	r0, r6
 80178f6:	4639      	mov	r1, r7
 80178f8:	f7e8 fce8 	bl	80002cc <__adddf3>
 80178fc:	4602      	mov	r2, r0
 80178fe:	460b      	mov	r3, r1
 8017900:	4620      	mov	r0, r4
 8017902:	4629      	mov	r1, r5
 8017904:	f7e8 fce0 	bl	80002c8 <__aeabi_dsub>
 8017908:	e7c6      	b.n	8017898 <__kernel_sin+0xc8>
 801790a:	bf00      	nop
 801790c:	f3af 8000 	nop.w
 8017910:	55555549 	.word	0x55555549
 8017914:	3fc55555 	.word	0x3fc55555
 8017918:	3fe00000 	.word	0x3fe00000
 801791c:	5acfd57c 	.word	0x5acfd57c
 8017920:	3de5d93a 	.word	0x3de5d93a
 8017924:	8a2b9ceb 	.word	0x8a2b9ceb
 8017928:	3e5ae5e6 	.word	0x3e5ae5e6
 801792c:	57b1fe7d 	.word	0x57b1fe7d
 8017930:	3ec71de3 	.word	0x3ec71de3
 8017934:	19c161d5 	.word	0x19c161d5
 8017938:	3f2a01a0 	.word	0x3f2a01a0
 801793c:	1110f8a6 	.word	0x1110f8a6
 8017940:	3f811111 	.word	0x3f811111
 8017944:	00000000 	.word	0x00000000

08017948 <atan>:
 8017948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801794c:	ec55 4b10 	vmov	r4, r5, d0
 8017950:	4bc3      	ldr	r3, [pc, #780]	; (8017c60 <atan+0x318>)
 8017952:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017956:	429e      	cmp	r6, r3
 8017958:	46ab      	mov	fp, r5
 801795a:	dd18      	ble.n	801798e <atan+0x46>
 801795c:	4bc1      	ldr	r3, [pc, #772]	; (8017c64 <atan+0x31c>)
 801795e:	429e      	cmp	r6, r3
 8017960:	dc01      	bgt.n	8017966 <atan+0x1e>
 8017962:	d109      	bne.n	8017978 <atan+0x30>
 8017964:	b144      	cbz	r4, 8017978 <atan+0x30>
 8017966:	4622      	mov	r2, r4
 8017968:	462b      	mov	r3, r5
 801796a:	4620      	mov	r0, r4
 801796c:	4629      	mov	r1, r5
 801796e:	f7e8 fcad 	bl	80002cc <__adddf3>
 8017972:	4604      	mov	r4, r0
 8017974:	460d      	mov	r5, r1
 8017976:	e006      	b.n	8017986 <atan+0x3e>
 8017978:	f1bb 0f00 	cmp.w	fp, #0
 801797c:	f340 8131 	ble.w	8017be2 <atan+0x29a>
 8017980:	a59b      	add	r5, pc, #620	; (adr r5, 8017bf0 <atan+0x2a8>)
 8017982:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017986:	ec45 4b10 	vmov	d0, r4, r5
 801798a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801798e:	4bb6      	ldr	r3, [pc, #728]	; (8017c68 <atan+0x320>)
 8017990:	429e      	cmp	r6, r3
 8017992:	dc14      	bgt.n	80179be <atan+0x76>
 8017994:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017998:	429e      	cmp	r6, r3
 801799a:	dc0d      	bgt.n	80179b8 <atan+0x70>
 801799c:	a396      	add	r3, pc, #600	; (adr r3, 8017bf8 <atan+0x2b0>)
 801799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179a2:	ee10 0a10 	vmov	r0, s0
 80179a6:	4629      	mov	r1, r5
 80179a8:	f7e8 fc90 	bl	80002cc <__adddf3>
 80179ac:	2200      	movs	r2, #0
 80179ae:	4baf      	ldr	r3, [pc, #700]	; (8017c6c <atan+0x324>)
 80179b0:	f7e9 f8d2 	bl	8000b58 <__aeabi_dcmpgt>
 80179b4:	2800      	cmp	r0, #0
 80179b6:	d1e6      	bne.n	8017986 <atan+0x3e>
 80179b8:	f04f 3aff 	mov.w	sl, #4294967295
 80179bc:	e02b      	b.n	8017a16 <atan+0xce>
 80179be:	f000 f963 	bl	8017c88 <fabs>
 80179c2:	4bab      	ldr	r3, [pc, #684]	; (8017c70 <atan+0x328>)
 80179c4:	429e      	cmp	r6, r3
 80179c6:	ec55 4b10 	vmov	r4, r5, d0
 80179ca:	f300 80bf 	bgt.w	8017b4c <atan+0x204>
 80179ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80179d2:	429e      	cmp	r6, r3
 80179d4:	f300 80a0 	bgt.w	8017b18 <atan+0x1d0>
 80179d8:	ee10 2a10 	vmov	r2, s0
 80179dc:	ee10 0a10 	vmov	r0, s0
 80179e0:	462b      	mov	r3, r5
 80179e2:	4629      	mov	r1, r5
 80179e4:	f7e8 fc72 	bl	80002cc <__adddf3>
 80179e8:	2200      	movs	r2, #0
 80179ea:	4ba0      	ldr	r3, [pc, #640]	; (8017c6c <atan+0x324>)
 80179ec:	f7e8 fc6c 	bl	80002c8 <__aeabi_dsub>
 80179f0:	2200      	movs	r2, #0
 80179f2:	4606      	mov	r6, r0
 80179f4:	460f      	mov	r7, r1
 80179f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80179fa:	4620      	mov	r0, r4
 80179fc:	4629      	mov	r1, r5
 80179fe:	f7e8 fc65 	bl	80002cc <__adddf3>
 8017a02:	4602      	mov	r2, r0
 8017a04:	460b      	mov	r3, r1
 8017a06:	4630      	mov	r0, r6
 8017a08:	4639      	mov	r1, r7
 8017a0a:	f7e8 ff3f 	bl	800088c <__aeabi_ddiv>
 8017a0e:	f04f 0a00 	mov.w	sl, #0
 8017a12:	4604      	mov	r4, r0
 8017a14:	460d      	mov	r5, r1
 8017a16:	4622      	mov	r2, r4
 8017a18:	462b      	mov	r3, r5
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	4629      	mov	r1, r5
 8017a1e:	f7e8 fe0b 	bl	8000638 <__aeabi_dmul>
 8017a22:	4602      	mov	r2, r0
 8017a24:	460b      	mov	r3, r1
 8017a26:	4680      	mov	r8, r0
 8017a28:	4689      	mov	r9, r1
 8017a2a:	f7e8 fe05 	bl	8000638 <__aeabi_dmul>
 8017a2e:	a374      	add	r3, pc, #464	; (adr r3, 8017c00 <atan+0x2b8>)
 8017a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a34:	4606      	mov	r6, r0
 8017a36:	460f      	mov	r7, r1
 8017a38:	f7e8 fdfe 	bl	8000638 <__aeabi_dmul>
 8017a3c:	a372      	add	r3, pc, #456	; (adr r3, 8017c08 <atan+0x2c0>)
 8017a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a42:	f7e8 fc43 	bl	80002cc <__adddf3>
 8017a46:	4632      	mov	r2, r6
 8017a48:	463b      	mov	r3, r7
 8017a4a:	f7e8 fdf5 	bl	8000638 <__aeabi_dmul>
 8017a4e:	a370      	add	r3, pc, #448	; (adr r3, 8017c10 <atan+0x2c8>)
 8017a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a54:	f7e8 fc3a 	bl	80002cc <__adddf3>
 8017a58:	4632      	mov	r2, r6
 8017a5a:	463b      	mov	r3, r7
 8017a5c:	f7e8 fdec 	bl	8000638 <__aeabi_dmul>
 8017a60:	a36d      	add	r3, pc, #436	; (adr r3, 8017c18 <atan+0x2d0>)
 8017a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a66:	f7e8 fc31 	bl	80002cc <__adddf3>
 8017a6a:	4632      	mov	r2, r6
 8017a6c:	463b      	mov	r3, r7
 8017a6e:	f7e8 fde3 	bl	8000638 <__aeabi_dmul>
 8017a72:	a36b      	add	r3, pc, #428	; (adr r3, 8017c20 <atan+0x2d8>)
 8017a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a78:	f7e8 fc28 	bl	80002cc <__adddf3>
 8017a7c:	4632      	mov	r2, r6
 8017a7e:	463b      	mov	r3, r7
 8017a80:	f7e8 fdda 	bl	8000638 <__aeabi_dmul>
 8017a84:	a368      	add	r3, pc, #416	; (adr r3, 8017c28 <atan+0x2e0>)
 8017a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a8a:	f7e8 fc1f 	bl	80002cc <__adddf3>
 8017a8e:	4642      	mov	r2, r8
 8017a90:	464b      	mov	r3, r9
 8017a92:	f7e8 fdd1 	bl	8000638 <__aeabi_dmul>
 8017a96:	a366      	add	r3, pc, #408	; (adr r3, 8017c30 <atan+0x2e8>)
 8017a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a9c:	4680      	mov	r8, r0
 8017a9e:	4689      	mov	r9, r1
 8017aa0:	4630      	mov	r0, r6
 8017aa2:	4639      	mov	r1, r7
 8017aa4:	f7e8 fdc8 	bl	8000638 <__aeabi_dmul>
 8017aa8:	a363      	add	r3, pc, #396	; (adr r3, 8017c38 <atan+0x2f0>)
 8017aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aae:	f7e8 fc0b 	bl	80002c8 <__aeabi_dsub>
 8017ab2:	4632      	mov	r2, r6
 8017ab4:	463b      	mov	r3, r7
 8017ab6:	f7e8 fdbf 	bl	8000638 <__aeabi_dmul>
 8017aba:	a361      	add	r3, pc, #388	; (adr r3, 8017c40 <atan+0x2f8>)
 8017abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ac0:	f7e8 fc02 	bl	80002c8 <__aeabi_dsub>
 8017ac4:	4632      	mov	r2, r6
 8017ac6:	463b      	mov	r3, r7
 8017ac8:	f7e8 fdb6 	bl	8000638 <__aeabi_dmul>
 8017acc:	a35e      	add	r3, pc, #376	; (adr r3, 8017c48 <atan+0x300>)
 8017ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ad2:	f7e8 fbf9 	bl	80002c8 <__aeabi_dsub>
 8017ad6:	4632      	mov	r2, r6
 8017ad8:	463b      	mov	r3, r7
 8017ada:	f7e8 fdad 	bl	8000638 <__aeabi_dmul>
 8017ade:	a35c      	add	r3, pc, #368	; (adr r3, 8017c50 <atan+0x308>)
 8017ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ae4:	f7e8 fbf0 	bl	80002c8 <__aeabi_dsub>
 8017ae8:	4632      	mov	r2, r6
 8017aea:	463b      	mov	r3, r7
 8017aec:	f7e8 fda4 	bl	8000638 <__aeabi_dmul>
 8017af0:	4602      	mov	r2, r0
 8017af2:	460b      	mov	r3, r1
 8017af4:	4640      	mov	r0, r8
 8017af6:	4649      	mov	r1, r9
 8017af8:	f7e8 fbe8 	bl	80002cc <__adddf3>
 8017afc:	4622      	mov	r2, r4
 8017afe:	462b      	mov	r3, r5
 8017b00:	f7e8 fd9a 	bl	8000638 <__aeabi_dmul>
 8017b04:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017b08:	4602      	mov	r2, r0
 8017b0a:	460b      	mov	r3, r1
 8017b0c:	d14b      	bne.n	8017ba6 <atan+0x25e>
 8017b0e:	4620      	mov	r0, r4
 8017b10:	4629      	mov	r1, r5
 8017b12:	f7e8 fbd9 	bl	80002c8 <__aeabi_dsub>
 8017b16:	e72c      	b.n	8017972 <atan+0x2a>
 8017b18:	ee10 0a10 	vmov	r0, s0
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	4b53      	ldr	r3, [pc, #332]	; (8017c6c <atan+0x324>)
 8017b20:	4629      	mov	r1, r5
 8017b22:	f7e8 fbd1 	bl	80002c8 <__aeabi_dsub>
 8017b26:	2200      	movs	r2, #0
 8017b28:	4606      	mov	r6, r0
 8017b2a:	460f      	mov	r7, r1
 8017b2c:	4b4f      	ldr	r3, [pc, #316]	; (8017c6c <atan+0x324>)
 8017b2e:	4620      	mov	r0, r4
 8017b30:	4629      	mov	r1, r5
 8017b32:	f7e8 fbcb 	bl	80002cc <__adddf3>
 8017b36:	4602      	mov	r2, r0
 8017b38:	460b      	mov	r3, r1
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	4639      	mov	r1, r7
 8017b3e:	f7e8 fea5 	bl	800088c <__aeabi_ddiv>
 8017b42:	f04f 0a01 	mov.w	sl, #1
 8017b46:	4604      	mov	r4, r0
 8017b48:	460d      	mov	r5, r1
 8017b4a:	e764      	b.n	8017a16 <atan+0xce>
 8017b4c:	4b49      	ldr	r3, [pc, #292]	; (8017c74 <atan+0x32c>)
 8017b4e:	429e      	cmp	r6, r3
 8017b50:	dc1d      	bgt.n	8017b8e <atan+0x246>
 8017b52:	ee10 0a10 	vmov	r0, s0
 8017b56:	2200      	movs	r2, #0
 8017b58:	4b47      	ldr	r3, [pc, #284]	; (8017c78 <atan+0x330>)
 8017b5a:	4629      	mov	r1, r5
 8017b5c:	f7e8 fbb4 	bl	80002c8 <__aeabi_dsub>
 8017b60:	2200      	movs	r2, #0
 8017b62:	4606      	mov	r6, r0
 8017b64:	460f      	mov	r7, r1
 8017b66:	4b44      	ldr	r3, [pc, #272]	; (8017c78 <atan+0x330>)
 8017b68:	4620      	mov	r0, r4
 8017b6a:	4629      	mov	r1, r5
 8017b6c:	f7e8 fd64 	bl	8000638 <__aeabi_dmul>
 8017b70:	2200      	movs	r2, #0
 8017b72:	4b3e      	ldr	r3, [pc, #248]	; (8017c6c <atan+0x324>)
 8017b74:	f7e8 fbaa 	bl	80002cc <__adddf3>
 8017b78:	4602      	mov	r2, r0
 8017b7a:	460b      	mov	r3, r1
 8017b7c:	4630      	mov	r0, r6
 8017b7e:	4639      	mov	r1, r7
 8017b80:	f7e8 fe84 	bl	800088c <__aeabi_ddiv>
 8017b84:	f04f 0a02 	mov.w	sl, #2
 8017b88:	4604      	mov	r4, r0
 8017b8a:	460d      	mov	r5, r1
 8017b8c:	e743      	b.n	8017a16 <atan+0xce>
 8017b8e:	462b      	mov	r3, r5
 8017b90:	ee10 2a10 	vmov	r2, s0
 8017b94:	2000      	movs	r0, #0
 8017b96:	4939      	ldr	r1, [pc, #228]	; (8017c7c <atan+0x334>)
 8017b98:	f7e8 fe78 	bl	800088c <__aeabi_ddiv>
 8017b9c:	f04f 0a03 	mov.w	sl, #3
 8017ba0:	4604      	mov	r4, r0
 8017ba2:	460d      	mov	r5, r1
 8017ba4:	e737      	b.n	8017a16 <atan+0xce>
 8017ba6:	4b36      	ldr	r3, [pc, #216]	; (8017c80 <atan+0x338>)
 8017ba8:	4e36      	ldr	r6, [pc, #216]	; (8017c84 <atan+0x33c>)
 8017baa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8017bae:	4456      	add	r6, sl
 8017bb0:	449a      	add	sl, r3
 8017bb2:	e9da 2300 	ldrd	r2, r3, [sl]
 8017bb6:	f7e8 fb87 	bl	80002c8 <__aeabi_dsub>
 8017bba:	4622      	mov	r2, r4
 8017bbc:	462b      	mov	r3, r5
 8017bbe:	f7e8 fb83 	bl	80002c8 <__aeabi_dsub>
 8017bc2:	4602      	mov	r2, r0
 8017bc4:	460b      	mov	r3, r1
 8017bc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8017bca:	f7e8 fb7d 	bl	80002c8 <__aeabi_dsub>
 8017bce:	f1bb 0f00 	cmp.w	fp, #0
 8017bd2:	4604      	mov	r4, r0
 8017bd4:	460d      	mov	r5, r1
 8017bd6:	f6bf aed6 	bge.w	8017986 <atan+0x3e>
 8017bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017bde:	461d      	mov	r5, r3
 8017be0:	e6d1      	b.n	8017986 <atan+0x3e>
 8017be2:	a51d      	add	r5, pc, #116	; (adr r5, 8017c58 <atan+0x310>)
 8017be4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017be8:	e6cd      	b.n	8017986 <atan+0x3e>
 8017bea:	bf00      	nop
 8017bec:	f3af 8000 	nop.w
 8017bf0:	54442d18 	.word	0x54442d18
 8017bf4:	3ff921fb 	.word	0x3ff921fb
 8017bf8:	8800759c 	.word	0x8800759c
 8017bfc:	7e37e43c 	.word	0x7e37e43c
 8017c00:	e322da11 	.word	0xe322da11
 8017c04:	3f90ad3a 	.word	0x3f90ad3a
 8017c08:	24760deb 	.word	0x24760deb
 8017c0c:	3fa97b4b 	.word	0x3fa97b4b
 8017c10:	a0d03d51 	.word	0xa0d03d51
 8017c14:	3fb10d66 	.word	0x3fb10d66
 8017c18:	c54c206e 	.word	0xc54c206e
 8017c1c:	3fb745cd 	.word	0x3fb745cd
 8017c20:	920083ff 	.word	0x920083ff
 8017c24:	3fc24924 	.word	0x3fc24924
 8017c28:	5555550d 	.word	0x5555550d
 8017c2c:	3fd55555 	.word	0x3fd55555
 8017c30:	2c6a6c2f 	.word	0x2c6a6c2f
 8017c34:	bfa2b444 	.word	0xbfa2b444
 8017c38:	52defd9a 	.word	0x52defd9a
 8017c3c:	3fadde2d 	.word	0x3fadde2d
 8017c40:	af749a6d 	.word	0xaf749a6d
 8017c44:	3fb3b0f2 	.word	0x3fb3b0f2
 8017c48:	fe231671 	.word	0xfe231671
 8017c4c:	3fbc71c6 	.word	0x3fbc71c6
 8017c50:	9998ebc4 	.word	0x9998ebc4
 8017c54:	3fc99999 	.word	0x3fc99999
 8017c58:	54442d18 	.word	0x54442d18
 8017c5c:	bff921fb 	.word	0xbff921fb
 8017c60:	440fffff 	.word	0x440fffff
 8017c64:	7ff00000 	.word	0x7ff00000
 8017c68:	3fdbffff 	.word	0x3fdbffff
 8017c6c:	3ff00000 	.word	0x3ff00000
 8017c70:	3ff2ffff 	.word	0x3ff2ffff
 8017c74:	40037fff 	.word	0x40037fff
 8017c78:	3ff80000 	.word	0x3ff80000
 8017c7c:	bff00000 	.word	0xbff00000
 8017c80:	08018be0 	.word	0x08018be0
 8017c84:	08018bc0 	.word	0x08018bc0

08017c88 <fabs>:
 8017c88:	ec51 0b10 	vmov	r0, r1, d0
 8017c8c:	ee10 2a10 	vmov	r2, s0
 8017c90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017c94:	ec43 2b10 	vmov	d0, r2, r3
 8017c98:	4770      	bx	lr

08017c9a <finite>:
 8017c9a:	ee10 3a90 	vmov	r3, s1
 8017c9e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017ca2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017ca6:	0fc0      	lsrs	r0, r0, #31
 8017ca8:	4770      	bx	lr
 8017caa:	0000      	movs	r0, r0
 8017cac:	0000      	movs	r0, r0
	...

08017cb0 <floor>:
 8017cb0:	ec51 0b10 	vmov	r0, r1, d0
 8017cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017cbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017cc0:	2e13      	cmp	r6, #19
 8017cc2:	460c      	mov	r4, r1
 8017cc4:	ee10 5a10 	vmov	r5, s0
 8017cc8:	4680      	mov	r8, r0
 8017cca:	dc34      	bgt.n	8017d36 <floor+0x86>
 8017ccc:	2e00      	cmp	r6, #0
 8017cce:	da16      	bge.n	8017cfe <floor+0x4e>
 8017cd0:	a335      	add	r3, pc, #212	; (adr r3, 8017da8 <floor+0xf8>)
 8017cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd6:	f7e8 faf9 	bl	80002cc <__adddf3>
 8017cda:	2200      	movs	r2, #0
 8017cdc:	2300      	movs	r3, #0
 8017cde:	f7e8 ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 8017ce2:	b148      	cbz	r0, 8017cf8 <floor+0x48>
 8017ce4:	2c00      	cmp	r4, #0
 8017ce6:	da59      	bge.n	8017d9c <floor+0xec>
 8017ce8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017cec:	4a30      	ldr	r2, [pc, #192]	; (8017db0 <floor+0x100>)
 8017cee:	432b      	orrs	r3, r5
 8017cf0:	2500      	movs	r5, #0
 8017cf2:	42ab      	cmp	r3, r5
 8017cf4:	bf18      	it	ne
 8017cf6:	4614      	movne	r4, r2
 8017cf8:	4621      	mov	r1, r4
 8017cfa:	4628      	mov	r0, r5
 8017cfc:	e025      	b.n	8017d4a <floor+0x9a>
 8017cfe:	4f2d      	ldr	r7, [pc, #180]	; (8017db4 <floor+0x104>)
 8017d00:	4137      	asrs	r7, r6
 8017d02:	ea01 0307 	and.w	r3, r1, r7
 8017d06:	4303      	orrs	r3, r0
 8017d08:	d01f      	beq.n	8017d4a <floor+0x9a>
 8017d0a:	a327      	add	r3, pc, #156	; (adr r3, 8017da8 <floor+0xf8>)
 8017d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d10:	f7e8 fadc 	bl	80002cc <__adddf3>
 8017d14:	2200      	movs	r2, #0
 8017d16:	2300      	movs	r3, #0
 8017d18:	f7e8 ff1e 	bl	8000b58 <__aeabi_dcmpgt>
 8017d1c:	2800      	cmp	r0, #0
 8017d1e:	d0eb      	beq.n	8017cf8 <floor+0x48>
 8017d20:	2c00      	cmp	r4, #0
 8017d22:	bfbe      	ittt	lt
 8017d24:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017d28:	fa43 f606 	asrlt.w	r6, r3, r6
 8017d2c:	19a4      	addlt	r4, r4, r6
 8017d2e:	ea24 0407 	bic.w	r4, r4, r7
 8017d32:	2500      	movs	r5, #0
 8017d34:	e7e0      	b.n	8017cf8 <floor+0x48>
 8017d36:	2e33      	cmp	r6, #51	; 0x33
 8017d38:	dd0b      	ble.n	8017d52 <floor+0xa2>
 8017d3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017d3e:	d104      	bne.n	8017d4a <floor+0x9a>
 8017d40:	ee10 2a10 	vmov	r2, s0
 8017d44:	460b      	mov	r3, r1
 8017d46:	f7e8 fac1 	bl	80002cc <__adddf3>
 8017d4a:	ec41 0b10 	vmov	d0, r0, r1
 8017d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d52:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8017d56:	f04f 33ff 	mov.w	r3, #4294967295
 8017d5a:	fa23 f707 	lsr.w	r7, r3, r7
 8017d5e:	4207      	tst	r7, r0
 8017d60:	d0f3      	beq.n	8017d4a <floor+0x9a>
 8017d62:	a311      	add	r3, pc, #68	; (adr r3, 8017da8 <floor+0xf8>)
 8017d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d68:	f7e8 fab0 	bl	80002cc <__adddf3>
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	2300      	movs	r3, #0
 8017d70:	f7e8 fef2 	bl	8000b58 <__aeabi_dcmpgt>
 8017d74:	2800      	cmp	r0, #0
 8017d76:	d0bf      	beq.n	8017cf8 <floor+0x48>
 8017d78:	2c00      	cmp	r4, #0
 8017d7a:	da02      	bge.n	8017d82 <floor+0xd2>
 8017d7c:	2e14      	cmp	r6, #20
 8017d7e:	d103      	bne.n	8017d88 <floor+0xd8>
 8017d80:	3401      	adds	r4, #1
 8017d82:	ea25 0507 	bic.w	r5, r5, r7
 8017d86:	e7b7      	b.n	8017cf8 <floor+0x48>
 8017d88:	2301      	movs	r3, #1
 8017d8a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017d8e:	fa03 f606 	lsl.w	r6, r3, r6
 8017d92:	4435      	add	r5, r6
 8017d94:	4545      	cmp	r5, r8
 8017d96:	bf38      	it	cc
 8017d98:	18e4      	addcc	r4, r4, r3
 8017d9a:	e7f2      	b.n	8017d82 <floor+0xd2>
 8017d9c:	2500      	movs	r5, #0
 8017d9e:	462c      	mov	r4, r5
 8017da0:	e7aa      	b.n	8017cf8 <floor+0x48>
 8017da2:	bf00      	nop
 8017da4:	f3af 8000 	nop.w
 8017da8:	8800759c 	.word	0x8800759c
 8017dac:	7e37e43c 	.word	0x7e37e43c
 8017db0:	bff00000 	.word	0xbff00000
 8017db4:	000fffff 	.word	0x000fffff

08017db8 <matherr>:
 8017db8:	2000      	movs	r0, #0
 8017dba:	4770      	bx	lr
 8017dbc:	0000      	movs	r0, r0
	...

08017dc0 <nan>:
 8017dc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017dc8 <nan+0x8>
 8017dc4:	4770      	bx	lr
 8017dc6:	bf00      	nop
 8017dc8:	00000000 	.word	0x00000000
 8017dcc:	7ff80000 	.word	0x7ff80000

08017dd0 <rint>:
 8017dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017dd2:	ec51 0b10 	vmov	r0, r1, d0
 8017dd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017dda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8017dde:	2e13      	cmp	r6, #19
 8017de0:	460b      	mov	r3, r1
 8017de2:	ee10 4a10 	vmov	r4, s0
 8017de6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8017dea:	dc56      	bgt.n	8017e9a <rint+0xca>
 8017dec:	2e00      	cmp	r6, #0
 8017dee:	da2b      	bge.n	8017e48 <rint+0x78>
 8017df0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017df4:	4302      	orrs	r2, r0
 8017df6:	d023      	beq.n	8017e40 <rint+0x70>
 8017df8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8017dfc:	4302      	orrs	r2, r0
 8017dfe:	4254      	negs	r4, r2
 8017e00:	4314      	orrs	r4, r2
 8017e02:	0c4b      	lsrs	r3, r1, #17
 8017e04:	0b24      	lsrs	r4, r4, #12
 8017e06:	045b      	lsls	r3, r3, #17
 8017e08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8017e0c:	ea44 0103 	orr.w	r1, r4, r3
 8017e10:	460b      	mov	r3, r1
 8017e12:	492f      	ldr	r1, [pc, #188]	; (8017ed0 <rint+0x100>)
 8017e14:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017e18:	e9d1 6700 	ldrd	r6, r7, [r1]
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	4639      	mov	r1, r7
 8017e20:	4630      	mov	r0, r6
 8017e22:	f7e8 fa53 	bl	80002cc <__adddf3>
 8017e26:	e9cd 0100 	strd	r0, r1, [sp]
 8017e2a:	463b      	mov	r3, r7
 8017e2c:	4632      	mov	r2, r6
 8017e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e32:	f7e8 fa49 	bl	80002c8 <__aeabi_dsub>
 8017e36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017e3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8017e3e:	4639      	mov	r1, r7
 8017e40:	ec41 0b10 	vmov	d0, r0, r1
 8017e44:	b003      	add	sp, #12
 8017e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e48:	4a22      	ldr	r2, [pc, #136]	; (8017ed4 <rint+0x104>)
 8017e4a:	4132      	asrs	r2, r6
 8017e4c:	ea01 0702 	and.w	r7, r1, r2
 8017e50:	4307      	orrs	r7, r0
 8017e52:	d0f5      	beq.n	8017e40 <rint+0x70>
 8017e54:	0852      	lsrs	r2, r2, #1
 8017e56:	4011      	ands	r1, r2
 8017e58:	430c      	orrs	r4, r1
 8017e5a:	d00b      	beq.n	8017e74 <rint+0xa4>
 8017e5c:	ea23 0202 	bic.w	r2, r3, r2
 8017e60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017e64:	2e13      	cmp	r6, #19
 8017e66:	fa43 f306 	asr.w	r3, r3, r6
 8017e6a:	bf0c      	ite	eq
 8017e6c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017e70:	2400      	movne	r4, #0
 8017e72:	4313      	orrs	r3, r2
 8017e74:	4916      	ldr	r1, [pc, #88]	; (8017ed0 <rint+0x100>)
 8017e76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8017e7a:	4622      	mov	r2, r4
 8017e7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017e80:	4620      	mov	r0, r4
 8017e82:	4629      	mov	r1, r5
 8017e84:	f7e8 fa22 	bl	80002cc <__adddf3>
 8017e88:	e9cd 0100 	strd	r0, r1, [sp]
 8017e8c:	4622      	mov	r2, r4
 8017e8e:	462b      	mov	r3, r5
 8017e90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e94:	f7e8 fa18 	bl	80002c8 <__aeabi_dsub>
 8017e98:	e7d2      	b.n	8017e40 <rint+0x70>
 8017e9a:	2e33      	cmp	r6, #51	; 0x33
 8017e9c:	dd07      	ble.n	8017eae <rint+0xde>
 8017e9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017ea2:	d1cd      	bne.n	8017e40 <rint+0x70>
 8017ea4:	ee10 2a10 	vmov	r2, s0
 8017ea8:	f7e8 fa10 	bl	80002cc <__adddf3>
 8017eac:	e7c8      	b.n	8017e40 <rint+0x70>
 8017eae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb6:	40f2      	lsrs	r2, r6
 8017eb8:	4210      	tst	r0, r2
 8017eba:	d0c1      	beq.n	8017e40 <rint+0x70>
 8017ebc:	0852      	lsrs	r2, r2, #1
 8017ebe:	4210      	tst	r0, r2
 8017ec0:	bf1f      	itttt	ne
 8017ec2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017ec6:	ea20 0202 	bicne.w	r2, r0, r2
 8017eca:	4134      	asrne	r4, r6
 8017ecc:	4314      	orrne	r4, r2
 8017ece:	e7d1      	b.n	8017e74 <rint+0xa4>
 8017ed0:	08018c00 	.word	0x08018c00
 8017ed4:	000fffff 	.word	0x000fffff

08017ed8 <scalbn>:
 8017ed8:	b570      	push	{r4, r5, r6, lr}
 8017eda:	ec55 4b10 	vmov	r4, r5, d0
 8017ede:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017ee2:	4606      	mov	r6, r0
 8017ee4:	462b      	mov	r3, r5
 8017ee6:	b9aa      	cbnz	r2, 8017f14 <scalbn+0x3c>
 8017ee8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017eec:	4323      	orrs	r3, r4
 8017eee:	d03b      	beq.n	8017f68 <scalbn+0x90>
 8017ef0:	4b31      	ldr	r3, [pc, #196]	; (8017fb8 <scalbn+0xe0>)
 8017ef2:	4629      	mov	r1, r5
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	ee10 0a10 	vmov	r0, s0
 8017efa:	f7e8 fb9d 	bl	8000638 <__aeabi_dmul>
 8017efe:	4b2f      	ldr	r3, [pc, #188]	; (8017fbc <scalbn+0xe4>)
 8017f00:	429e      	cmp	r6, r3
 8017f02:	4604      	mov	r4, r0
 8017f04:	460d      	mov	r5, r1
 8017f06:	da12      	bge.n	8017f2e <scalbn+0x56>
 8017f08:	a327      	add	r3, pc, #156	; (adr r3, 8017fa8 <scalbn+0xd0>)
 8017f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0e:	f7e8 fb93 	bl	8000638 <__aeabi_dmul>
 8017f12:	e009      	b.n	8017f28 <scalbn+0x50>
 8017f14:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017f18:	428a      	cmp	r2, r1
 8017f1a:	d10c      	bne.n	8017f36 <scalbn+0x5e>
 8017f1c:	ee10 2a10 	vmov	r2, s0
 8017f20:	4620      	mov	r0, r4
 8017f22:	4629      	mov	r1, r5
 8017f24:	f7e8 f9d2 	bl	80002cc <__adddf3>
 8017f28:	4604      	mov	r4, r0
 8017f2a:	460d      	mov	r5, r1
 8017f2c:	e01c      	b.n	8017f68 <scalbn+0x90>
 8017f2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017f32:	460b      	mov	r3, r1
 8017f34:	3a36      	subs	r2, #54	; 0x36
 8017f36:	4432      	add	r2, r6
 8017f38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017f3c:	428a      	cmp	r2, r1
 8017f3e:	dd0b      	ble.n	8017f58 <scalbn+0x80>
 8017f40:	ec45 4b11 	vmov	d1, r4, r5
 8017f44:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017fb0 <scalbn+0xd8>
 8017f48:	f7fb fb96 	bl	8013678 <copysign>
 8017f4c:	a318      	add	r3, pc, #96	; (adr r3, 8017fb0 <scalbn+0xd8>)
 8017f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f52:	ec51 0b10 	vmov	r0, r1, d0
 8017f56:	e7da      	b.n	8017f0e <scalbn+0x36>
 8017f58:	2a00      	cmp	r2, #0
 8017f5a:	dd08      	ble.n	8017f6e <scalbn+0x96>
 8017f5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017f60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017f64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017f68:	ec45 4b10 	vmov	d0, r4, r5
 8017f6c:	bd70      	pop	{r4, r5, r6, pc}
 8017f6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017f72:	da0d      	bge.n	8017f90 <scalbn+0xb8>
 8017f74:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017f78:	429e      	cmp	r6, r3
 8017f7a:	ec45 4b11 	vmov	d1, r4, r5
 8017f7e:	dce1      	bgt.n	8017f44 <scalbn+0x6c>
 8017f80:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017fa8 <scalbn+0xd0>
 8017f84:	f7fb fb78 	bl	8013678 <copysign>
 8017f88:	a307      	add	r3, pc, #28	; (adr r3, 8017fa8 <scalbn+0xd0>)
 8017f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8e:	e7e0      	b.n	8017f52 <scalbn+0x7a>
 8017f90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017f94:	3236      	adds	r2, #54	; 0x36
 8017f96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017f9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	4b06      	ldr	r3, [pc, #24]	; (8017fc0 <scalbn+0xe8>)
 8017fa6:	e7b2      	b.n	8017f0e <scalbn+0x36>
 8017fa8:	c2f8f359 	.word	0xc2f8f359
 8017fac:	01a56e1f 	.word	0x01a56e1f
 8017fb0:	8800759c 	.word	0x8800759c
 8017fb4:	7e37e43c 	.word	0x7e37e43c
 8017fb8:	43500000 	.word	0x43500000
 8017fbc:	ffff3cb0 	.word	0xffff3cb0
 8017fc0:	3c900000 	.word	0x3c900000

08017fc4 <_init>:
 8017fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fc6:	bf00      	nop
 8017fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fca:	bc08      	pop	{r3}
 8017fcc:	469e      	mov	lr, r3
 8017fce:	4770      	bx	lr

08017fd0 <_fini>:
 8017fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fd2:	bf00      	nop
 8017fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fd6:	bc08      	pop	{r3}
 8017fd8:	469e      	mov	lr, r3
 8017fda:	4770      	bx	lr
