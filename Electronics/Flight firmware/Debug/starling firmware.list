
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017900  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  08017ad0  08017ad0  00027ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018708  08018708  00030608  2**0
                  CONTENTS
  4 .ARM          00000008  08018708  08018708  00028708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018710  08018710  00030608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018710  08018710  00028710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018714  08018714  00028714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  08018718  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006204  20000608  08018d20  00030608  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000680c  08018d20  0003680c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY
 12 .debug_info   000319ca  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000068a2  00000000  00000000  00062002  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002348  00000000  00000000  000688a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002080  00000000  00000000  0006abf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002afb6  00000000  00000000  0006cc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021983  00000000  00000000  00097c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6f0c  00000000  00000000  000b95a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a04b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8d0  00000000  00000000  001a0530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000608 	.word	0x20000608
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017ab8 	.word	0x08017ab8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000060c 	.word	0x2000060c
 800020c:	08017ab8 	.word	0x08017ab8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f005 fe0a 	bl	8006c08 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f009 fb13 	bl	800a632 <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f009 fdd3 	bl	800abcc <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f005 fde6 	bl	8006c08 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f005 fdc7 	bl	8006c08 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f009 f896 	bl	800a1b8 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f009 fd93 	bl	800abcc <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f005 fda6 	bl	8006c08 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f004 fb96 	bl	800583c <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f004 fb8e 	bl	800583c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f004 fb86 	bl	800583c <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	671a      	str	r2, [r3, #112]	; 0x70

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	675a      	str	r2, [r3, #116]	; 0x74



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f004 fb78 	bl	800583c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f004 fb70 	bl	800583c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f004 fb68 	bl	800583c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f004 fb60 	bl	800583c <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f004 fb58 	bl	800583c <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f004 fb55 	bl	800583c <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40

080011bc <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	731a      	strb	r2, [r3, #12]
 80011d2:	23a2      	movs	r3, #162	; 0xa2
 80011d4:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f005 fd11 	bl	8006c08 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	f009 fa1a 	bl	800a632 <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800120e:	bf00      	nop
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fcd9 	bl	800abcc <HAL_SPI_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d1f7      	bne.n	8001210 <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f005 fcec 	bl	8006c08 <HAL_GPIO_WritePin>

    if (status == 1) {
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b01      	cmp	r3, #1
 8001236:	d13b      	bne.n	80012b0 <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	849a      	strh	r2, [r3, #36]	; 0x24
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	84da      	strh	r2, [r3, #38]	; 0x26
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	851a      	strh	r2, [r3, #40]	; 0x28

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 800126e:	7c3b      	ldrb	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

        // convert units
        LSM_Convert(imu);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f808 	bl	80012c0 <LSM_Convert>

    }

    return status;
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	a367      	add	r3, pc, #412	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc73 	bl	8000c28 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	665a      	str	r2, [r3, #100]	; 0x64
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a35e      	add	r3, pc, #376	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fc60 	bl	8000c28 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	669a      	str	r2, [r3, #104]	; 0x68
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	a354      	add	r3, pc, #336	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f95b 	bl	8000638 <__aeabi_dmul>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc4d 	bl	8000c28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	66da      	str	r2, [r3, #108]	; 0x6c

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a32a      	add	r3, pc, #168	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbf5 	bl	8000c28 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89d 	bl	8000588 <__aeabi_f2d>
 800144e:	a31c      	add	r3, pc, #112	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8f0 	bl	8000638 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LSM_Convert+0x208>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4603      	mov	r3, r0
 800146c:	460c      	mov	r4, r1
 800146e:	4618      	mov	r0, r3
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff fbd9 	bl	8000c28 <__aeabi_d2f>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	a30e      	add	r3, pc, #56	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LSM_Convert+0x208>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fbbd 	bl	8000c28 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	54442eea 	.word	0x54442eea
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	40668000 	.word	0x40668000
 80014cc:	3a92a305 	.word	0x3a92a305
 80014d0:	40239d01 	.word	0x40239d01

080014d4 <LSM_ReadDMA>:

uint8_t LSM_ReadDMA(lsm6dso *imu) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	731a      	strb	r2, [r3, #12]
 80014ea:	23a2      	movs	r3, #162	; 0xa2
 80014ec:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6858      	ldr	r0, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	891b      	ldrh	r3, [r3, #8]
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	f005 fb85 	bl	8006c08 <HAL_GPIO_WritePin>

    if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, imu->rxBuf, 13) == HAL_OK) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f103 0217 	add.w	r2, r3, #23
 8001508:	f107 0118 	add.w	r1, r7, #24
 800150c:	230d      	movs	r3, #13
 800150e:	f009 fa33 	bl	800a978 <HAL_SPI_TransmitReceive_DMA>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LSM_ReadDMA+0x48>
        return 1;
 8001518:	2301      	movs	r3, #1
 800151a:	e008      	b.n	800152e <LSM_ReadDMA+0x5a>
    }
    else {
        HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6858      	ldr	r0, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	891b      	ldrh	r3, [r3, #8]
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	f005 fb6e 	bl	8006c08 <HAL_GPIO_WritePin>
        return 0;
 800152c:	2300      	movs	r3, #0
    }

}
 800152e:	4618      	mov	r0, r3
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LSM_ReadDMA_Complete>:

void LSM_ReadDMA_Complete(lsm6dso *imu) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6858      	ldr	r0, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f005 fb5d 	bl	8006c08 <HAL_GPIO_WritePin>

    imu->rawGyro[0] = (uint16_t) (imu->rxBuf[2] << 8 | imu->rxBuf[1]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e5b      	ldrb	r3, [r3, #25]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e1b      	ldrb	r3, [r3, #24]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	849a      	strh	r2, [r3, #36]	; 0x24
    imu->rawGyro[1] = (uint16_t) (imu->rxBuf[4] << 8 | imu->rxBuf[3]);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7edb      	ldrb	r3, [r3, #27]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e9b      	ldrb	r3, [r3, #26]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	84da      	strh	r2, [r3, #38]	; 0x26
    imu->rawGyro[2] = (uint16_t) (imu->rxBuf[6] << 8 | imu->rxBuf[5]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7f5b      	ldrb	r3, [r3, #29]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7f1b      	ldrb	r3, [r3, #28]
 8001586:	b21b      	sxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b21a      	sxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28

    imu->rawAcc[0] = (uint16_t) (imu->rxBuf[8] << 8 | imu->rxBuf[7]);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7fdb      	ldrb	r3, [r3, #31]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7f9b      	ldrb	r3, [r3, #30]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    imu->rawAcc[1] = (uint16_t) (imu->rxBuf[10] << 8 | imu->rxBuf[9]);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    imu->rawAcc[2] = (uint16_t) (imu->rxBuf[12] << 8 | imu->rxBuf[11]);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    LSM_Convert(imu);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fe6d 	bl	80012c0 <LSM_Convert>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	; 0x50
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c

    bar->basepressure = 101325;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4a65      	ldr	r2, [pc, #404]	; (80017bc <SPL06_Init+0x1cc>)
 8001628:	631a      	str	r2, [r3, #48]	; 0x30

    uint8_t txBuf[2] = {0x00, 0x00};
 800162a:	2300      	movs	r3, #0
 800162c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001630:	2300      	movs	r3, #0
 8001632:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	b299      	uxth	r1, r3
 8001640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2301      	movs	r3, #1
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	220d      	movs	r2, #13
 8001654:	f005 fd3c 	bl	80070d0 <HAL_I2C_Mem_Read>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b2da      	uxtb	r2, r3
 8001666:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800166a:	4413      	add	r3, r2
 800166c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 8001670:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001674:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001678:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800167c:	2b10      	cmp	r3, #16
 800167e:	d001      	beq.n	8001684 <SPL06_Init+0x94>

        return 0;
 8001680:	2300      	movs	r3, #0
 8001682:	e13b      	b.n	80018fc <SPL06_Init+0x30c>

    }
    HAL_Delay(10);
 8001684:	200a      	movs	r0, #10
 8001686:	f004 f8d9 	bl	800583c <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 800168a:	2390      	movs	r3, #144	; 0x90
 800168c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	b299      	uxth	r1, r3
 800169a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	2313      	movs	r3, #19
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	2210      	movs	r2, #16
 80016ae:	f005 fd0f 	bl	80070d0 <HAL_I2C_Mem_Read>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016c4:	4413      	add	r3, r2
 80016c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80016ca:	7c3b      	ldrb	r3, [r7, #16]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	7c7b      	ldrb	r3, [r7, #17]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21a      	sxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <SPL06_Init+0x112>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016f6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80016fa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80016fe:	b21b      	sxth	r3, r3
 8001700:	e002      	b.n	8001708 <SPL06_Init+0x118>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 800170c:	7c7b      	ldrb	r3, [r7, #17]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21b      	sxth	r3, r3
 8001712:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001716:	b21a      	sxth	r2, r3
 8001718:	7cbb      	ldrb	r3, [r7, #18]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21a      	sxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800172a:	b29b      	uxth	r3, r3
 800172c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <SPL06_Init+0x156>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800173a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800173e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001742:	b21b      	sxth	r3, r3
 8001744:	e002      	b.n	800174c <SPL06_Init+0x15c>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	031a      	lsls	r2, r3, #12
 8001754:	7d3b      	ldrb	r3, [r7, #20]
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4313      	orrs	r3, r2
 800175a:	7d7a      	ldrb	r2, [r7, #21]
 800175c:	0912      	lsrs	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	4313      	orrs	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <SPL06_Init+0x192>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800177c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001780:	e001      	b.n	8001786 <SPL06_Init+0x196>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 800178a:	7d7b      	ldrb	r3, [r7, #21]
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001792:	7dbb      	ldrb	r3, [r7, #22]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	4313      	orrs	r3, r2
 8001798:	7dfa      	ldrb	r2, [r7, #23]
 800179a:	4313      	orrs	r3, r2
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <SPL06_Init+0x1d0>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80017b6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80017ba:	e003      	b.n	80017c4 <SPL06_Init+0x1d4>
 80017bc:	47c5e680 	.word	0x47c5e680
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80017c8:	7e3b      	ldrb	r3, [r7, #24]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	7e7b      	ldrb	r3, [r7, #25]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80017da:	7ebb      	ldrb	r3, [r7, #26]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21a      	sxth	r2, r3
 80017e0:	7efb      	ldrb	r3, [r7, #27]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80017ec:	7f3b      	ldrb	r3, [r7, #28]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	7f7b      	ldrb	r3, [r7, #29]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80017fe:	7fbb      	ldrb	r3, [r7, #30]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b21a      	sxth	r2, r3
 8001804:	7ffb      	ldrb	r3, [r7, #31]
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21a      	sxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 8001810:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800181c:	b21b      	sxth	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b21a      	sxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001826:	2019      	movs	r0, #25
 8001828:	f004 f808 	bl	800583c <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0b00110011; // 32 Hz with 8 times oversampling
 800182c:	2333      	movs	r3, #51	; 0x33
 800182e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	b299      	uxth	r1, r3
 800183c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	2301      	movs	r3, #1
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2301      	movs	r3, #1
 800184e:	2206      	movs	r2, #6
 8001850:	f005 fb44 	bl	8006edc <HAL_I2C_Mem_Write>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf0c      	ite	eq
 800185a:	2301      	moveq	r3, #1
 800185c:	2300      	movne	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	b2da      	uxtb	r2, r3
 8001862:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001866:	4413      	add	r3, r2
 8001868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f003 ffe5 	bl	800583c <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 8001872:	23b3      	movs	r3, #179	; 0xb3
 8001874:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	791b      	ldrb	r3, [r3, #4]
 8001880:	b299      	uxth	r1, r3
 8001882:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	2207      	movs	r2, #7
 8001896:	f005 fb21 	bl	8006edc <HAL_I2C_Mem_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ac:	4413      	add	r3, r2
 80018ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 80018b2:	200a      	movs	r0, #10
 80018b4:	f003 ffc2 	bl	800583c <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 80018b8:	23ff      	movs	r3, #255	; 0xff
 80018ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	b299      	uxth	r1, r3
 80018c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	2208      	movs	r2, #8
 80018dc:	f005 fafe 	bl	8006edc <HAL_I2C_Mem_Write>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018f2:	4413      	add	r3, r2
 80018f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80018f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3740      	adds	r7, #64	; 0x40
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SPL06_Read>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (POLLING)
 *
 */
void SPL06_Read(SPL06 *bar) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]

    uint8_t txBuf[7];
    txBuf[0] = 0x00 | 0x80;
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	743b      	strb	r3, [r7, #16]

    uint8_t rxBuf[6];

    //HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x80, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500);
    HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x00, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, 500);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	b299      	uxth	r1, r3
 800191a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2306      	movs	r3, #6
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2200      	movs	r2, #0
 800192e:	f005 fbcf 	bl	80070d0 <HAL_I2C_Mem_Read>

    /* Convert raw to uncalibrated pressure and temperature */
    int32_t pres = ((uint32_t) rxBuf[0] << 16) | ((uint32_t) rxBuf[1] << 8) | ((uint32_t) rxBuf[2]);
 8001932:	7a3b      	ldrb	r3, [r7, #8]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	7a7b      	ldrb	r3, [r7, #9]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	4313      	orrs	r3, r2
 800193c:	7aba      	ldrb	r2, [r7, #10]
 800193e:	4313      	orrs	r3, r2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
            pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <SPL06_Read+0x50>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001952:	e000      	b.n	8001956 <SPL06_Read+0x52>
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t temp = ((uint32_t) rxBuf[3] << 16) | ((uint32_t) rxBuf[4] << 8) | ((uint32_t) rxBuf[5]);
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	041a      	lsls	r2, r3, #16
 800195c:	7b3b      	ldrb	r3, [r7, #12]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	4313      	orrs	r3, r2
 8001962:	7b7a      	ldrb	r2, [r7, #13]
 8001964:	4313      	orrs	r3, r2
 8001966:	623b      	str	r3, [r7, #32]
            temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <SPL06_Read+0x76>
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001978:	e000      	b.n	800197c <SPL06_Read+0x78>
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	623b      	str	r3, [r7, #32]

    /* Apply calibration */
    float tempRaw = (float) temp / 7864320.0f;
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001988:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001acc <SPL06_Read+0x1c8>
 800198c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001990:	edc7 7a07 	vstr	s15, [r7, #28]
    bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    float presRaw   = (float) pres / 7864320.0f;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001acc <SPL06_Read+0x1c8>
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	edc7 7a06 	vstr	s15, [r7, #24]
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a34:	ee37 7a27 	vadd.f32	s14, s14, s15
                    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a66:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a6a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee77 7a27 	vadd.f32	s15, s14, s15
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    bar->altitude = 44330 * (1 - powf(bar->pressure_Pa/bar->basepressure, 0.190295));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a9c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001ad0 <SPL06_Read+0x1cc>
 8001aa0:	eeb0 0a66 	vmov.f32	s0, s13
 8001aa4:	f013 fdf8 	bl	8015698 <powf>
 8001aa8:	eeb0 7a40 	vmov.f32	s14, s0
 8001aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ab4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ad4 <SPL06_Read+0x1d0>
 8001ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	4af00000 	.word	0x4af00000
 8001ad0:	3e42dcb1 	.word	0x3e42dcb1
 8001ad4:	472d2a00 	.word	0x472d2a00

08001ad8 <servo_init>:
#include "servo.h"

void servo_init(Servo *servo, TIM_HandleTypeDef *tim, volatile uint32_t *timerval) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
    servo->timer = tim;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	605a      	str	r2, [r3, #4]
    servo->timerval = timerval;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <servo_writeangle>:


void servo_writeangle(Servo *servo, uint8_t angle) {
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
    // value between 0 and 180
    uint32_t newtimerval = 1000 + (angle * 1000 / 180);
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <servo_writeangle+0x40>)
 8001b14:	fb82 1203 	smull	r1, r2, r2, r3
 8001b18:	441a      	add	r2, r3
 8001b1a:	11d2      	asrs	r2, r2, #7
 8001b1c:	17db      	asrs	r3, r3, #31
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001b24:	60fb      	str	r3, [r7, #12]
    *servo->timerval = newtimerval;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	b60b60b7 	.word	0xb60b60b7

08001b40 <servo_disable>:

void servo_writemicros(Servo *servo, uint32_t pulse) {
    *servo->timerval = pulse;
}

void servo_disable(Servo *servo) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    *servo->timerval = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	4613      	mov	r3, r2
 8001b68:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6858      	ldr	r0, [r3, #4]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	891b      	ldrh	r3, [r3, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	4619      	mov	r1, r3
 8001b76:	f005 f847 	bl	8006c08 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	f008 fb16 	bl	800a1b8 <HAL_SPI_Transmit>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6858      	ldr	r0, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	891b      	ldrh	r3, [r3, #8]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f005 f831 	bl	8006c08 <HAL_GPIO_WritePin>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6858      	ldr	r0, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	891b      	ldrh	r3, [r3, #8]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f005 f81e 	bl	8006c08 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	f008 fd27 	bl	800a632 <HAL_SPI_TransmitReceive>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6858      	ldr	r0, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	891b      	ldrh	r3, [r3, #8]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f005 f805 	bl	8006c08 <HAL_GPIO_WritePin>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	887a      	ldrh	r2, [r7, #2]
 8001c26:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <sxInit+0xbc>)
 8001c2e:	f004 ffeb 	bl	8006c08 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001c32:	2002      	movs	r0, #2
 8001c34:	f003 fe02 	bl	800583c <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2140      	movs	r1, #64	; 0x40
 8001c3c:	4821      	ldr	r0, [pc, #132]	; (8001cc4 <sxInit+0xbc>)
 8001c3e:	f004 ffe3 	bl	8006c08 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001c42:	2002      	movs	r0, #2
 8001c44:	f003 fdfa 	bl	800583c <HAL_Delay>

    SetStandbyRC(radio);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f850 	bl	8001cee <SetStandbyRC>
    HAL_Delay(3);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f003 fdf4 	bl	800583c <HAL_Delay>
    setPacketLora(radio);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f875 	bl	8001d44 <setPacketLora>
    HAL_Delay(2);
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f003 fdee 	bl	800583c <HAL_Delay>
    SetRfFrequency2(radio);
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f859 	bl	8001d18 <SetRfFrequency2>
    HAL_Delay(2);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f003 fde8 	bl	800583c <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f897 	bl	8001da4 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f003 fde0 	bl	800583c <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	2218      	movs	r2, #24
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f8a8 	bl	8001dd8 <SetModulationParams>
    HAL_Delay(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f003 fdd7 	bl	800583c <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001c8e:	2232      	movs	r2, #50	; 0x32
 8001c90:	f640 1125 	movw	r1, #2341	; 0x925
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fa1f 	bl	80020d8 <WriteRegisterByte>

    HAL_Delay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f003 fdce 	bl	800583c <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2320      	movs	r3, #32
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	210c      	movs	r1, #12
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f8b3 	bl	8001e1a <SetPacketParamsLora>
    HAL_Delay(1);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f003 fdc1 	bl	800583c <HAL_Delay>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	821a      	strh	r2, [r3, #16]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	723b      	strb	r3, [r7, #8]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001cfe:	f107 020c 	add.w	r2, r7, #12
 8001d02:	f107 0108 	add.w	r1, r7, #8
 8001d06:	2302      	movs	r3, #2
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff50 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <SetRfFrequency2+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001d26:	f107 020c 	add.w	r2, r7, #12
 8001d2a:	f107 0108 	add.w	r1, r7, #8
 8001d2e:	2304      	movs	r3, #4
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff3c 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08017ad4 	.word	0x08017ad4

08001d44 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <setPacketLora+0x28>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	f107 0108 	add.w	r1, r7, #8
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff26 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08017ad8 	.word	0x08017ad8

08001d70 <SetTxParams>:
    WriteRegisterBytes(radio, 0x916, rangingAddress, 4);


}

void SetTxParams(sx1280_custom *radio, uint8_t power, uint8_t rampTime) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
 8001d80:	238e      	movs	r3, #142	; 0x8e
 8001d82:	723b      	strb	r3, [r7, #8]
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	727b      	strb	r3, [r7, #9]
 8001d88:	78bb      	ldrb	r3, [r7, #2]
 8001d8a:	72bb      	strb	r3, [r7, #10]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
 8001d8c:	f107 020c 	add.w	r2, r7, #12
 8001d90:	f107 0108 	add.w	r1, r7, #8
 8001d94:	2303      	movs	r3, #3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff09 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
 8001db0:	4613      	mov	r3, r2
 8001db2:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001db4:	238f      	movs	r3, #143	; 0x8f
 8001db6:	723b      	strb	r3, [r7, #8]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	727b      	strb	r3, [r7, #9]
 8001dbc:	78bb      	ldrb	r3, [r7, #2]
 8001dbe:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001dc0:	f107 020c 	add.w	r2, r7, #12
 8001dc4:	f107 0108 	add.w	r1, r7, #8
 8001dc8:	2303      	movs	r3, #3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff feef 	bl	8001bae <sxSpiTransmitReceive>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	70fb      	strb	r3, [r7, #3]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70bb      	strb	r3, [r7, #2]
 8001dee:	4613      	mov	r3, r2
 8001df0:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001df2:	238b      	movs	r3, #139	; 0x8b
 8001df4:	723b      	strb	r3, [r7, #8]
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	727b      	strb	r3, [r7, #9]
 8001dfa:	78bb      	ldrb	r3, [r7, #2]
 8001dfc:	72bb      	strb	r3, [r7, #10]
 8001dfe:	787b      	ldrb	r3, [r7, #1]
 8001e00:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001e02:	f107 020c 	add.w	r2, r7, #12
 8001e06:	f107 0108 	add.w	r1, r7, #8
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fece 	bl	8001bae <sxSpiTransmitReceive>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	4608      	mov	r0, r1
 8001e24:	4611      	mov	r1, r2
 8001e26:	461a      	mov	r2, r3
 8001e28:	4603      	mov	r3, r0
 8001e2a:	70fb      	strb	r3, [r7, #3]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70bb      	strb	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001e34:	238c      	movs	r3, #140	; 0x8c
 8001e36:	723b      	strb	r3, [r7, #8]
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	727b      	strb	r3, [r7, #9]
 8001e3c:	78bb      	ldrb	r3, [r7, #2]
 8001e3e:	72bb      	strb	r3, [r7, #10]
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	72fb      	strb	r3, [r7, #11]
 8001e44:	7e3b      	ldrb	r3, [r7, #24]
 8001e46:	733b      	strb	r3, [r7, #12]
 8001e48:	7f3b      	ldrb	r3, [r7, #28]
 8001e4a:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	2206      	movs	r2, #6
 8001e52:	4619      	mov	r1, r3
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fe81 	bl	8001b5c <sxSpiTransmit>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <WriteBuffer>:

void WriteBuffer(sx1280_custom *radio, uint8_t offset, uint8_t *data, uint8_t size) {
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	72fb      	strb	r3, [r7, #11]
 8001e72:	4613      	mov	r3, r2
 8001e74:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1A, offset };
 8001e76:	231a      	movs	r3, #26
 8001e78:	753b      	strb	r3, [r7, #20]
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	757b      	strb	r3, [r7, #21]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6858      	ldr	r0, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	891b      	ldrh	r3, [r3, #8]
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f004 febd 	bl	8006c08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f107 0114 	add.w	r1, r7, #20
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f008 f98c 	bl	800a1b8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	7abb      	ldrb	r3, [r7, #10]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	f008 f983 	bl	800a1b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6858      	ldr	r0, [r3, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	891b      	ldrh	r3, [r3, #8]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f004 fea3 	bl	8006c08 <HAL_GPIO_WritePin>

}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <ReadBuffer>:

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	72fb      	strb	r3, [r7, #11]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001edc:	231b      	movs	r3, #27
 8001ede:	753b      	strb	r3, [r7, #20]
 8001ee0:	7afb      	ldrb	r3, [r7, #11]
 8001ee2:	757b      	strb	r3, [r7, #21]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6858      	ldr	r0, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	891b      	ldrh	r3, [r3, #8]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f004 fe88 	bl	8006c08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	f107 0114 	add.w	r1, r7, #20
 8001f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f04:	2203      	movs	r2, #3
 8001f06:	f008 f957 	bl	800a1b8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	7abb      	ldrb	r3, [r7, #10]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f008 fa82 	bl	800a420 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6858      	ldr	r0, [r3, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	891b      	ldrh	r3, [r3, #8]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4619      	mov	r1, r3
 8001f28:	f004 fe6e 	bl	8006c08 <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	4611      	mov	r1, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	817b      	strh	r3, [r7, #10]
 8001f46:	460b      	mov	r3, r1
 8001f48:	813b      	strh	r3, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001f4e:	238d      	movs	r3, #141	; 0x8d
 8001f50:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001f5c:	897b      	ldrh	r3, [r7, #10]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001f62:	893b      	ldrh	r3, [r7, #8]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001f82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	2209      	movs	r2, #9
 8001f98:	4619      	mov	r1, r3
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff fdde 	bl	8001b5c <sxSpiTransmit>
}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001fb4:	2397      	movs	r3, #151	; 0x97
 8001fb6:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2203      	movs	r2, #3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fdc3 	bl	8001b5c <sxSpiTransmit>
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <SetTx>:

void SetTx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	70fb      	strb	r3, [r7, #3]
 8001fea:	4613      	mov	r3, r2
 8001fec:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X83;
 8001fee:	2383      	movs	r3, #131	; 0x83
 8001ff0:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001ff6:	883b      	ldrh	r3, [r7, #0]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8002000:	883b      	ldrh	r3, [r7, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	2204      	movs	r2, #4
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fda4 	bl	8001b5c <sxSpiTransmit>
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <SetRx>:

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
 8002028:	4613      	mov	r3, r2
 800202a:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 800202c:	2382      	movs	r3, #130	; 0x82
 800202e:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8002034:	883b      	ldrh	r3, [r7, #0]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	b29b      	uxth	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 800203e:	883b      	ldrh	r3, [r7, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2204      	movs	r2, #4
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fd85 	bl	8001b5c <sxSpiTransmit>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8002062:	231d      	movs	r3, #29
 8002064:	723b      	strb	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	727b      	strb	r3, [r7, #9]
 800206a:	2300      	movs	r3, #0
 800206c:	72bb      	strb	r3, [r7, #10]
 800206e:	2300      	movs	r3, #0
 8002070:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8002072:	f107 020c 	add.w	r2, r7, #12
 8002076:	f107 0108 	add.w	r1, r7, #8
 800207a:	2304      	movs	r3, #4
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fd96 	bl	8001bae <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8002082:	7bba      	ldrb	r2, [r7, #14]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	b25a      	sxtb	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a2:	eeb1 7a67 	vneg.f32	s14, s15
 80020a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    radio->snr = ((float) radio->rawSnr)/4;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 80020e8:	2318      	movs	r3, #24
 80020ea:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2204      	movs	r2, #4
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fd27 	bl	8001b5c <sxSpiTransmit>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <encode_TLM>:
#include "main.h"
#include "telemetry.h"
#include "math.h"


void encode_TLM(TLM_decoded *dec, TLM_encoded *enc) {
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    enc->packet_state_bits = (dec->packet_type & (1<<0)) | ((0b00011111 & dec->flight_state) << 1) | ((1 & dec->is_playing_music) << 6) | ((1&dec->is_data_logging) <<7);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	b25a      	sxtb	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	b25b      	sxtb	r3, r3
 8002136:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800213a:	b25b      	sxtb	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b25a      	sxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	789b      	ldrb	r3, [r3, #2]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	b25b      	sxtb	r3, r3
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	b25b      	sxtb	r3, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	b25a      	sxtb	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	01db      	lsls	r3, r3, #7
 8002158:	b25b      	sxtb	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b25b      	sxtb	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	701a      	strb	r2, [r3, #0]

    enc->pin_states_servo = (dec->pin_states & 0b00111111) | ((dec->servo_state & 0b00000011) << 6);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	b25b      	sxtb	r3, r3
 800216a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800216e:	b25a      	sxtb	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	795b      	ldrb	r3, [r3, #5]
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	b25b      	sxtb	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b25b      	sxtb	r3, r3
 800217c:	b2da      	uxtb	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	705a      	strb	r2, [r3, #1]

    enc->systick[0] = 0xff & (dec->systick >> 16);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	b2da      	uxtb	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	709a      	strb	r2, [r3, #2]
    enc->systick[1] = 0xff & (dec->systick >> 8);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b2da      	uxtb	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	70da      	strb	r2, [r3, #3]
    enc->systick[2] = 0xff & dec->systick;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	711a      	strb	r2, [r3, #4]

    uint16_t vbat_10mV = (uint16_t) round(dec->vbat * 100); // 0.01 V/lsb
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021aa:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8002510 <encode_TLM+0x3f8>
 80021ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b2:	ee17 0a90 	vmov	r0, s15
 80021b6:	f7fe f9e7 	bl	8000588 <__aeabi_f2d>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	ec44 3b10 	vmov	d0, r3, r4
 80021c2:	f013 f921 	bl	8015408 <round>
 80021c6:	ec54 3b10 	vmov	r3, r4, d0
 80021ca:	4618      	mov	r0, r3
 80021cc:	4621      	mov	r1, r4
 80021ce:	f7fe fd0b 	bl	8000be8 <__aeabi_d2uiz>
 80021d2:	4603      	mov	r3, r0
 80021d4:	817b      	strh	r3, [r7, #10]

    enc->vbat_MSB = (uint8_t) ((vbat_10mV >> 2) & 0xFF);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	715a      	strb	r2, [r3, #5]
    enc->padding_vbat_LSB = (uint8_t) (vbat_10mV & 0b00000011);
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	719a      	strb	r2, [r3, #6]

    enc->orientation_quat[0] = (int8_t) round(dec->orientation_quat[0]*127);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80021f6:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8002514 <encode_TLM+0x3fc>
 80021fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9c1 	bl	8000588 <__aeabi_f2d>
 8002206:	4603      	mov	r3, r0
 8002208:	460c      	mov	r4, r1
 800220a:	ec44 3b10 	vmov	d0, r3, r4
 800220e:	f013 f8fb 	bl	8015408 <round>
 8002212:	ec54 3b10 	vmov	r3, r4, d0
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	f7fe fcbd 	bl	8000b98 <__aeabi_d2iz>
 800221e:	4603      	mov	r3, r0
 8002220:	b25a      	sxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	71da      	strb	r2, [r3, #7]
    enc->orientation_quat[1] = (int8_t) round(dec->orientation_quat[1]*127);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edd3 7a05 	vldr	s15, [r3, #20]
 800222c:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8002514 <encode_TLM+0x3fc>
 8002230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002234:	ee17 0a90 	vmov	r0, s15
 8002238:	f7fe f9a6 	bl	8000588 <__aeabi_f2d>
 800223c:	4603      	mov	r3, r0
 800223e:	460c      	mov	r4, r1
 8002240:	ec44 3b10 	vmov	d0, r3, r4
 8002244:	f013 f8e0 	bl	8015408 <round>
 8002248:	ec54 3b10 	vmov	r3, r4, d0
 800224c:	4618      	mov	r0, r3
 800224e:	4621      	mov	r1, r4
 8002250:	f7fe fca2 	bl	8000b98 <__aeabi_d2iz>
 8002254:	4603      	mov	r3, r0
 8002256:	b25a      	sxtb	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	721a      	strb	r2, [r3, #8]
    enc->orientation_quat[2] = (int8_t) round(dec->orientation_quat[2]*127);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002262:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002514 <encode_TLM+0x3fc>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f98b 	bl	8000588 <__aeabi_f2d>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	ec44 3b10 	vmov	d0, r3, r4
 800227a:	f013 f8c5 	bl	8015408 <round>
 800227e:	ec54 3b10 	vmov	r3, r4, d0
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	f7fe fc87 	bl	8000b98 <__aeabi_d2iz>
 800228a:	4603      	mov	r3, r0
 800228c:	b25a      	sxtb	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	725a      	strb	r2, [r3, #9]
    enc->orientation_quat[3] = (int8_t) round(dec->orientation_quat[3]*127);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	edd3 7a07 	vldr	s15, [r3, #28]
 8002298:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002514 <encode_TLM+0x3fc>
 800229c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a0:	ee17 0a90 	vmov	r0, s15
 80022a4:	f7fe f970 	bl	8000588 <__aeabi_f2d>
 80022a8:	4603      	mov	r3, r0
 80022aa:	460c      	mov	r4, r1
 80022ac:	ec44 3b10 	vmov	d0, r3, r4
 80022b0:	f013 f8aa 	bl	8015408 <round>
 80022b4:	ec54 3b10 	vmov	r3, r4, d0
 80022b8:	4618      	mov	r0, r3
 80022ba:	4621      	mov	r1, r4
 80022bc:	f7fe fc6c 	bl	8000b98 <__aeabi_d2iz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b25a      	sxtb	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	729a      	strb	r2, [r3, #10]

    for (int i = 0; i < 3; i++) {
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e01e      	b.n	800230c <encode_TLM+0x1f4>
        enc->acc[i] = dec->acc[i];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	3210      	adds	r2, #16
 80022d4:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3304      	adds	r3, #4
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	460a      	mov	r2, r1
 80022e4:	f8a3 2003 	strh.w	r2, [r3, #3]
        enc->gyro[i] = dec->gyro[i];
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3310      	adds	r3, #16
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3308      	adds	r3, #8
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	460a      	mov	r2, r1
 8002302:	f8a3 2001 	strh.w	r2, [r3, #1]
    for (int i = 0; i < 3; i++) {
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b02      	cmp	r3, #2
 8002310:	dddd      	ble.n	80022ce <encode_TLM+0x1b6>
    }

    enc->baro = (uint16_t) round(dec->baro - 50000); // 50000 Pa as zero point. Max ISA height: 5.5 km, max pressure: 115536 Pa
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002318:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002518 <encode_TLM+0x400>
 800231c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002320:	ee17 0a90 	vmov	r0, s15
 8002324:	f7fe f930 	bl	8000588 <__aeabi_f2d>
 8002328:	4603      	mov	r3, r0
 800232a:	460c      	mov	r4, r1
 800232c:	ec44 3b10 	vmov	d0, r3, r4
 8002330:	f013 f86a 	bl	8015408 <round>
 8002334:	ec54 3b10 	vmov	r3, r4, d0
 8002338:	4618      	mov	r0, r3
 800233a:	4621      	mov	r1, r4
 800233c:	f7fe fc54 	bl	8000be8 <__aeabi_d2uiz>
 8002340:	4603      	mov	r3, r0
 8002342:	b29a      	uxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f8a3 2017 	strh.w	r2, [r3, #23]

    enc->temp = (uint8_t) round(dec->temp * 4);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002350:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002358:	ee17 0a90 	vmov	r0, s15
 800235c:	f7fe f914 	bl	8000588 <__aeabi_f2d>
 8002360:	4603      	mov	r3, r0
 8002362:	460c      	mov	r4, r1
 8002364:	ec44 3b10 	vmov	d0, r3, r4
 8002368:	f013 f84e 	bl	8015408 <round>
 800236c:	ec54 3b10 	vmov	r3, r4, d0
 8002370:	4618      	mov	r0, r3
 8002372:	4621      	mov	r1, r4
 8002374:	f7fe fc38 	bl	8000be8 <__aeabi_d2uiz>
 8002378:	4603      	mov	r3, r0
 800237a:	b2da      	uxtb	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	765a      	strb	r2, [r3, #25]

    enc->altitude = (uint16_t) round((dec->altitude+48) * 16); // 0.0625m/LSB, -48 m as reference and max 2000 m.
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002386:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800251c <encode_TLM+0x404>
 800238a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800238e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002396:	ee17 0a90 	vmov	r0, s15
 800239a:	f7fe f8f5 	bl	8000588 <__aeabi_f2d>
 800239e:	4603      	mov	r3, r0
 80023a0:	460c      	mov	r4, r1
 80023a2:	ec44 3b10 	vmov	d0, r3, r4
 80023a6:	f013 f82f 	bl	8015408 <round>
 80023aa:	ec54 3b10 	vmov	r3, r4, d0
 80023ae:	4618      	mov	r0, r3
 80023b0:	4621      	mov	r1, r4
 80023b2:	f7fe fc19 	bl	8000be8 <__aeabi_d2uiz>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	835a      	strh	r2, [r3, #26]

    enc->vertical_velocity = (uint8_t) MIN(MAX(round(dec->vertical_velocity + 80),0),255); // 0-255 maps to -80-175 m/s.
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023c4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002520 <encode_TLM+0x408>
 80023c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023cc:	ee17 0a90 	vmov	r0, s15
 80023d0:	f7fe f8da 	bl	8000588 <__aeabi_f2d>
 80023d4:	4603      	mov	r3, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	ec44 3b10 	vmov	d0, r3, r4
 80023dc:	f013 f814 	bl	8015408 <round>
 80023e0:	ec51 0b10 	vmov	r0, r1, d0
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	f7fe fbb4 	bl	8000b58 <__aeabi_dcmpgt>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d020      	beq.n	8002438 <encode_TLM+0x320>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023fc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002520 <encode_TLM+0x408>
 8002400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f8be 	bl	8000588 <__aeabi_f2d>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	ec44 3b10 	vmov	d0, r3, r4
 8002414:	f012 fff8 	bl	8015408 <round>
 8002418:	ec51 0b10 	vmov	r0, r1, d0
 800241c:	2301      	movs	r3, #1
 800241e:	461c      	mov	r4, r3
 8002420:	a339      	add	r3, pc, #228	; (adr r3, 8002508 <encode_TLM+0x3f0>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fe fb79 	bl	8000b1c <__aeabi_dcmplt>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <encode_TLM+0x31c>
 8002430:	2300      	movs	r3, #0
 8002432:	461c      	mov	r4, r3
 8002434:	b2e3      	uxtb	r3, r4
 8002436:	e000      	b.n	800243a <encode_TLM+0x322>
 8002438:	2301      	movs	r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d037      	beq.n	80024ae <encode_TLM+0x396>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002444:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002520 <encode_TLM+0x408>
 8002448:	ee77 7a87 	vadd.f32	s15, s15, s14
 800244c:	ee17 0a90 	vmov	r0, s15
 8002450:	f7fe f89a 	bl	8000588 <__aeabi_f2d>
 8002454:	4603      	mov	r3, r0
 8002456:	460c      	mov	r4, r1
 8002458:	ec44 3b10 	vmov	d0, r3, r4
 800245c:	f012 ffd4 	bl	8015408 <round>
 8002460:	ec51 0b10 	vmov	r0, r1, d0
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	f7fe fb74 	bl	8000b58 <__aeabi_dcmpgt>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d019      	beq.n	80024aa <encode_TLM+0x392>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800247c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002520 <encode_TLM+0x408>
 8002480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002484:	ee17 0a90 	vmov	r0, s15
 8002488:	f7fe f87e 	bl	8000588 <__aeabi_f2d>
 800248c:	4603      	mov	r3, r0
 800248e:	460c      	mov	r4, r1
 8002490:	ec44 3b10 	vmov	d0, r3, r4
 8002494:	f012 ffb8 	bl	8015408 <round>
 8002498:	ec54 3b10 	vmov	r3, r4, d0
 800249c:	4618      	mov	r0, r3
 800249e:	4621      	mov	r1, r4
 80024a0:	f7fe fba2 	bl	8000be8 <__aeabi_d2uiz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	e002      	b.n	80024b0 <encode_TLM+0x398>
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <encode_TLM+0x398>
 80024ae:	23ff      	movs	r3, #255	; 0xff
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	7713      	strb	r3, [r2, #28]

    if (dec->packet_type == 1) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d11c      	bne.n	80024f6 <encode_TLM+0x3de>
        enc->debug_ranging = (uint16_t) round(dec->ranging * 4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80024c2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	ee17 0a90 	vmov	r0, s15
 80024ce:	f7fe f85b 	bl	8000588 <__aeabi_f2d>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	ec44 3b10 	vmov	d0, r3, r4
 80024da:	f012 ff95 	bl	8015408 <round>
 80024de:	ec54 3b10 	vmov	r3, r4, d0
 80024e2:	4618      	mov	r0, r3
 80024e4:	4621      	mov	r1, r4
 80024e6:	f7fe fb7f 	bl	8000be8 <__aeabi_d2uiz>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f8a3 201d 	strh.w	r2, [r3, #29]
    }
    else {
        enc->debug_ranging = dec->debug;
    }
}
 80024f4:	e004      	b.n	8002500 <encode_TLM+0x3e8>
        enc->debug_ranging = dec->debug;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f8a3 201d 	strh.w	r2, [r3, #29]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bd90      	pop	{r4, r7, pc}
 8002508:	00000000 	.word	0x00000000
 800250c:	406fe000 	.word	0x406fe000
 8002510:	42c80000 	.word	0x42c80000
 8002514:	42fe0000 	.word	0x42fe0000
 8002518:	47435000 	.word	0x47435000
 800251c:	42400000 	.word	0x42400000
 8002520:	42a00000 	.word	0x42a00000

08002524 <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	ed87 0a05 	vstr	s0, [r7, #20]
 800252e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002532:	ed87 1a03 	vstr	s2, [r7, #12]
 8002536:	edc7 1a02 	vstr	s3, [r7, #8]
 800253a:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <Quaternion_set+0x2a>
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <Quaternion_set+0x4c>)
 8002544:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <Quaternion_set+0x50>)
 8002546:	211b      	movs	r1, #27
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <Quaternion_set+0x54>)
 800254a:	f010 f953 	bl	80127f4 <__assert_func>
    output->w = w;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	60da      	str	r2, [r3, #12]
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	08017ae4 	.word	0x08017ae4
 8002574:	08018120 	.word	0x08018120
 8002578:	08017af4 	.word	0x08017af4

0800257c <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <Quaternion_setIdentity+0x1a>
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <Quaternion_setIdentity+0x38>)
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <Quaternion_setIdentity+0x3c>)
 800258e:	2124      	movs	r1, #36	; 0x24
 8002590:	480a      	ldr	r0, [pc, #40]	; (80025bc <Quaternion_setIdentity+0x40>)
 8002592:	f010 f92f 	bl	80127f4 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	eddf 1a09 	vldr	s3, [pc, #36]	; 80025c0 <Quaternion_setIdentity+0x44>
 800259c:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80025c0 <Quaternion_setIdentity+0x44>
 80025a0:	eddf 0a07 	vldr	s1, [pc, #28]	; 80025c0 <Quaternion_setIdentity+0x44>
 80025a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025a8:	f7ff ffbc 	bl	8002524 <Quaternion_set>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08017b10 	.word	0x08017b10
 80025b8:	08018130 	.word	0x08018130
 80025bc:	08017af4 	.word	0x08017af4
 80025c0:	00000000 	.word	0x00000000

080025c4 <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	ed93 6a03 	vldr	s12, [r3, #12]
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	eef0 1a46 	vmov.f32	s3, s12
 80025ec:	eeb0 1a66 	vmov.f32	s2, s13
 80025f0:	eef0 0a47 	vmov.f32	s1, s14
 80025f4:	eeb0 0a67 	vmov.f32	s0, s15
 80025f8:	f7ff ff94 	bl	8002524 <Quaternion_set>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	0000      	movs	r0, r0
	...

08002608 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <Quaternion_toEulerZYX+0x1c>
 8002618:	4b87      	ldr	r3, [pc, #540]	; (8002838 <Quaternion_toEulerZYX+0x230>)
 800261a:	4a88      	ldr	r2, [pc, #544]	; (800283c <Quaternion_toEulerZYX+0x234>)
 800261c:	2185      	movs	r1, #133	; 0x85
 800261e:	4888      	ldr	r0, [pc, #544]	; (8002840 <Quaternion_toEulerZYX+0x238>)
 8002620:	f010 f8e8 	bl	80127f4 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	ed93 7a00 	vldr	s14, [r3]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	edd3 6a02 	vldr	s13, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002648:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264c:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	ed93 7a01 	vldr	s14, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	edd3 7a01 	vldr	s15, [r3, #4]
 800265c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 6a02 	vldr	s13, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	edd3 7a02 	vldr	s15, [r3, #8]
 800266c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	ee17 0a90 	vmov	r0, s15
 8002678:	f7fd ff86 	bl	8000588 <__aeabi_f2d>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	f7fd fe24 	bl	80002cc <__adddf3>
 8002684:	4603      	mov	r3, r0
 8002686:	460c      	mov	r4, r1
 8002688:	461a      	mov	r2, r3
 800268a:	4623      	mov	r3, r4
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	496c      	ldr	r1, [pc, #432]	; (8002844 <Quaternion_toEulerZYX+0x23c>)
 8002692:	f7fd fe19 	bl	80002c8 <__aeabi_dsub>
 8002696:	4603      	mov	r3, r0
 8002698:	460c      	mov	r4, r1
 800269a:	4618      	mov	r0, r3
 800269c:	4621      	mov	r1, r4
 800269e:	f7fe fac3 	bl	8000c28 <__aeabi_d2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 80026a6:	69f8      	ldr	r0, [r7, #28]
 80026a8:	f7fd ff6e 	bl	8000588 <__aeabi_f2d>
 80026ac:	4604      	mov	r4, r0
 80026ae:	460d      	mov	r5, r1
 80026b0:	69b8      	ldr	r0, [r7, #24]
 80026b2:	f7fd ff69 	bl	8000588 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	ec43 2b11 	vmov	d1, r2, r3
 80026be:	ec45 4b10 	vmov	d0, r4, r5
 80026c2:	f012 ff8d 	bl	80155e0 <atan2>
 80026c6:	ec54 3b10 	vmov	r3, r4, d0
 80026ca:	4618      	mov	r0, r3
 80026cc:	4621      	mov	r1, r4
 80026ce:	f7fe faab 	bl	8000c28 <__aeabi_d2f>
 80026d2:	4602      	mov	r2, r0
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80026e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002700:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 8002704:	edd7 7a05 	vldr	s15, [r7, #20]
 8002708:	eef0 7ae7 	vabs.f32	s15, s15
 800270c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	db15      	blt.n	8002746 <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7fd ff34 	bl	8000588 <__aeabi_f2d>
 8002720:	4603      	mov	r3, r0
 8002722:	460c      	mov	r4, r1
 8002724:	ec44 3b11 	vmov	d1, r3, r4
 8002728:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8002830 <Quaternion_toEulerZYX+0x228>
 800272c:	f010 ff24 	bl	8013578 <copysign>
 8002730:	ec52 1b10 	vmov	r1, r2, d0
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	1d1c      	adds	r4, r3, #4
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	f7fe fa74 	bl	8000c28 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	e012      	b.n	800276c <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7fd ff1e 	bl	8000588 <__aeabi_f2d>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	ec44 3b10 	vmov	d0, r3, r4
 8002754:	f012 feec 	bl	8015530 <asin>
 8002758:	ec52 1b10 	vmov	r1, r2, d0
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	1d1c      	adds	r4, r3, #4
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	f7fe fa60 	bl	8000c28 <__aeabi_d2f>
 8002768:	4603      	mov	r3, r0
 800276a:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	ed93 7a00 	vldr	s14, [r3]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	edd3 7a03 	vldr	s15, [r3, #12]
 8002778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	edd3 7a02 	vldr	s15, [r3, #8]
 8002788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002790:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002794:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	ed93 7a02 	vldr	s14, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027bc:	ee17 0a90 	vmov	r0, s15
 80027c0:	f7fd fee2 	bl	8000588 <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	f7fd fd80 	bl	80002cc <__adddf3>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	f04f 0000 	mov.w	r0, #0
 80027d8:	491a      	ldr	r1, [pc, #104]	; (8002844 <Quaternion_toEulerZYX+0x23c>)
 80027da:	f7fd fd75 	bl	80002c8 <__aeabi_dsub>
 80027de:	4603      	mov	r3, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	4618      	mov	r0, r3
 80027e4:	4621      	mov	r1, r4
 80027e6:	f7fe fa1f 	bl	8000c28 <__aeabi_d2f>
 80027ea:	4603      	mov	r3, r0
 80027ec:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 80027ee:	6938      	ldr	r0, [r7, #16]
 80027f0:	f7fd feca 	bl	8000588 <__aeabi_f2d>
 80027f4:	4604      	mov	r4, r0
 80027f6:	460d      	mov	r5, r1
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7fd fec5 	bl	8000588 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b11 	vmov	d1, r2, r3
 8002806:	ec45 4b10 	vmov	d0, r4, r5
 800280a:	f012 fee9 	bl	80155e0 <atan2>
 800280e:	ec52 1b10 	vmov	r1, r2, d0
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f103 0408 	add.w	r4, r3, #8
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	f7fe fa04 	bl	8000c28 <__aeabi_d2f>
 8002820:	4603      	mov	r3, r0
 8002822:	6023      	str	r3, [r4, #0]
}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bdb0      	pop	{r4, r5, r7, pc}
 800282c:	f3af 8000 	nop.w
 8002830:	54442d18 	.word	0x54442d18
 8002834:	3ff921fb 	.word	0x3ff921fb
 8002838:	08017ae4 	.word	0x08017ae4
 800283c:	08018148 	.word	0x08018148
 8002840:	08017af4 	.word	0x08017af4
 8002844:	3ff00000 	.word	0x3ff00000

08002848 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <Quaternion_conjugate+0x1c>
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <Quaternion_conjugate+0x5c>)
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <Quaternion_conjugate+0x60>)
 800285c:	21b7      	movs	r1, #183	; 0xb7
 800285e:	4813      	ldr	r0, [pc, #76]	; (80028ac <Quaternion_conjugate+0x64>)
 8002860:	f00f ffc8 	bl	80127f4 <__assert_func>
    output->w = q->w;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002872:	eef1 7a67 	vneg.f32	s15, s15
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002882:	eef1 7a67 	vneg.f32	s15, s15
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002892:	eef1 7a67 	vneg.f32	s15, s15
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	08017ae4 	.word	0x08017ae4
 80028a8:	08018160 	.word	0x08018160
 80028ac:	08017af4 	.word	0x08017af4

080028b0 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <Quaternion_multiply+0x1e>
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <Quaternion_multiply+0x174>)
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <Quaternion_multiply+0x178>)
 80028c6:	21d2      	movs	r1, #210	; 0xd2
 80028c8:	4858      	ldr	r0, [pc, #352]	; (8002a2c <Quaternion_multiply+0x17c>)
 80028ca:	f00f ff93 	bl	80127f4 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	ed93 7a00 	vldr	s14, [r3]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	edd3 6a03 	vldr	s13, [r3, #12]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291a:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	ed93 7a01 	vldr	s14, [r3, #4]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	edd3 6a00 	vldr	s13, [r3]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	edd3 7a01 	vldr	s15, [r3, #4]
 800293a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	edd3 6a02 	vldr	s13, [r3, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	edd3 7a03 	vldr	s15, [r3, #12]
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	edd3 6a03 	vldr	s13, [r3, #12]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296a:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	edd3 7a02 	vldr	s15, [r3, #8]
 800297a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	edd3 6a01 	vldr	s13, [r3, #4]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	edd3 7a03 	vldr	s15, [r3, #12]
 800298a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	edd3 6a02 	vldr	s13, [r3, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	ed93 7a00 	vldr	s14, [r3]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80029da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	461c      	mov	r4, r3
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002a1c:	bf00      	nop
 8002a1e:	3724      	adds	r7, #36	; 0x24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	08017ae4 	.word	0x08017ae4
 8002a28:	08018178 	.word	0x08018178
 8002a2c:	08017af4 	.word	0x08017af4

08002a30 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b092      	sub	sp, #72	; 0x48
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <Quaternion_rotate+0x1e>
 8002a42:	4bbc      	ldr	r3, [pc, #752]	; (8002d34 <Quaternion_rotate+0x304>)
 8002a44:	4abc      	ldr	r2, [pc, #752]	; (8002d38 <Quaternion_rotate+0x308>)
 8002a46:	21e6      	movs	r1, #230	; 0xe6
 8002a48:	48bc      	ldr	r0, [pc, #752]	; (8002d3c <Quaternion_rotate+0x30c>)
 8002a4a:	f00f fed3 	bl	80127f4 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	ed93 7a00 	vldr	s14, [r3]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	ed93 7a00 	vldr	s14, [r3]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	ed93 7a00 	vldr	s14, [r3]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	ed93 7a00 	vldr	s14, [r3]
 8002b1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b28:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3308      	adds	r3, #8
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3304      	adds	r3, #4
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b50:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	edd3 6a00 	vldr	s13, [r3]
 8002b5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002b62:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002b66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b6a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3304      	adds	r3, #4
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b82:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3308      	adds	r3, #8
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b92:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	edd3 6a00 	vldr	s13, [r3]
 8002b9c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	edd3 6a00 	vldr	s13, [r3]
 8002bae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002bba:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002bbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002bc2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	edd3 6a00 	vldr	s13, [r3]
 8002bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002be8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002bfc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c00:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3304      	adds	r3, #4
 8002c16:	edd3 6a00 	vldr	s13, [r3]
 8002c1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	edd3 6a00 	vldr	s13, [r3]
 8002c2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c36:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002c3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3308      	adds	r3, #8
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3304      	adds	r3, #4
 8002c56:	edd3 6a00 	vldr	s13, [r3]
 8002c5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c62:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002c66:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002c6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c6e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	3304      	adds	r3, #4
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3308      	adds	r3, #8
 8002c98:	edd3 6a00 	vldr	s13, [r3]
 8002c9c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002ca8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002cac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002cba:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	edd3 6a00 	vldr	s13, [r3]
 8002cc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002cd6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3308      	adds	r3, #8
 8002cee:	edd3 6a00 	vldr	s13, [r3]
 8002cf2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3308      	adds	r3, #8
 8002d02:	edd3 6a00 	vldr	s13, [r3]
 8002d06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002d12:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3308      	adds	r3, #8
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	601a      	str	r2, [r3, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	3748      	adds	r7, #72	; 0x48
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	08017ae4 	.word	0x08017ae4
 8002d38:	0801818c 	.word	0x0801818c
 8002d3c:	08017af4 	.word	0x08017af4

08002d40 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b08b      	sub	sp, #44	; 0x2c
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d4c:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d80:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3308      	adds	r3, #8
 8002d88:	ed93 7a00 	vldr	s14, [r3]
 8002d8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9c:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8002da0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002da4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dac:	edd7 6a08 	vldr	s13, [r7, #32]
 8002db0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS*QUATERNION_EPS) {
 8002dd0:	69b8      	ldr	r0, [r7, #24]
 8002dd2:	f7fd fbd9 	bl	8000588 <__aeabi_f2d>
 8002dd6:	a336      	add	r3, pc, #216	; (adr r3, 8002eb0 <Quaternion_fromRate+0x170>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd febc 	bl	8000b58 <__aeabi_dcmpgt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d05c      	beq.n	8002ea0 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 8002de6:	69b8      	ldr	r0, [r7, #24]
 8002de8:	f7fd fbce 	bl	8000588 <__aeabi_f2d>
 8002dec:	4603      	mov	r3, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	ec44 3b10 	vmov	d0, r3, r4
 8002df4:	f012 fbf6 	bl	80155e4 <sqrt>
 8002df8:	ec54 3b10 	vmov	r3, r4, d0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4621      	mov	r1, r4
 8002e00:	f7fd ff12 	bl	8000c28 <__aeabi_d2f>
 8002e04:	4603      	mov	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 8002e08:	69b8      	ldr	r0, [r7, #24]
 8002e0a:	f7fd fbbd 	bl	8000588 <__aeabi_f2d>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460c      	mov	r4, r1
 8002e12:	ec44 3b10 	vmov	d0, r3, r4
 8002e16:	f012 fb43 	bl	80154a0 <sin>
 8002e1a:	ec56 5b10 	vmov	r5, r6, d0
 8002e1e:	69b8      	ldr	r0, [r7, #24]
 8002e20:	f7fd fbb2 	bl	8000588 <__aeabi_f2d>
 8002e24:	4603      	mov	r3, r0
 8002e26:	460c      	mov	r4, r1
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	4631      	mov	r1, r6
 8002e30:	f7fd fd2c 	bl	800088c <__aeabi_ddiv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	f7fd fef4 	bl	8000c28 <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 8002e44:	69b8      	ldr	r0, [r7, #24]
 8002e46:	f7fd fb9f 	bl	8000588 <__aeabi_f2d>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	ec44 3b10 	vmov	d0, r3, r4
 8002e52:	f012 fa95 	bl	8015380 <cos>
 8002e56:	ec54 3b10 	vmov	r3, r4, d0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	f7fd fee3 	bl	8000c28 <__aeabi_d2f>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8002e68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8002e7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8002e8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8002e9e:	e002      	b.n	8002ea6 <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fb6b 	bl	800257c <Quaternion_setIdentity>
}
 8002ea6:	bf00      	nop
 8002ea8:	372c      	adds	r7, #44	; 0x2c
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	812dea11 	.word	0x812dea11
 8002eb4:	3d719799 	.word	0x3d719799

08002eb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ec8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <vApplicationGetIdleTaskMemory+0x30>)
 8002ece:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000624 	.word	0x20000624
 8002ee8:	20000678 	.word	0x20000678
 8002eec:	00000000 	.word	0x00000000

08002ef0 <get_battery_voltage>:
void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB);
void jingleBell();
void rick();
void ksp();

float get_battery_voltage() {
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002ef6:	4816      	ldr	r0, [pc, #88]	; (8002f50 <get_battery_voltage+0x60>)
 8002ef8:	f002 fd06 	bl	8005908 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002efc:	2164      	movs	r1, #100	; 0x64
 8002efe:	4814      	ldr	r0, [pc, #80]	; (8002f50 <get_battery_voltage+0x60>)
 8002f00:	f002 fdc8 	bl	8005a94 <HAL_ADC_PollForConversion>
    float voltage = ((float) HAL_ADC_GetValue(&hadc1)) * VBAT_CALIBRATION;
 8002f04:	4812      	ldr	r0, [pc, #72]	; (8002f50 <get_battery_voltage+0x60>)
 8002f06:	f002 fe49 	bl	8005b9c <HAL_ADC_GetValue>
 8002f0a:	ee07 0a90 	vmov	s15, r0
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	ee17 0a90 	vmov	r0, s15
 8002f16:	f7fd fb37 	bl	8000588 <__aeabi_f2d>
 8002f1a:	a30b      	add	r3, pc, #44	; (adr r3, 8002f48 <get_battery_voltage+0x58>)
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f7fd fb8a 	bl	8000638 <__aeabi_dmul>
 8002f24:	4603      	mov	r3, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4618      	mov	r0, r3
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	f7fd fe7c 	bl	8000c28 <__aeabi_d2f>
 8002f30:	4603      	mov	r3, r0
 8002f32:	607b      	str	r3, [r7, #4]
    return voltage;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	ee07 3a90 	vmov	s15, r3
}
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	f3af 8000 	nop.w
 8002f48:	f34eff30 	.word	0xf34eff30
 8002f4c:	3f72b5b7 	.word	0x3f72b5b7
 8002f50:	200048ac 	.word	0x200048ac

08002f54 <is_armed>:

uint8_t is_armed() {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(RBF_GPIO_Port, RBF_Pin);// High corresponds to disconected = armed
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4803      	ldr	r0, [pc, #12]	; (8002f68 <is_armed+0x14>)
 8002f5c:	f003 fe3c 	bl	8006bd8 <HAL_GPIO_ReadPin>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020000 	.word	0x40020000

08002f6c <is_armed_debounce>:

uint8_t is_armed_debounce() {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	e00c      	b.n	8002f92 <is_armed_debounce+0x26>
        if (!is_armed()) {
 8002f78:	f7ff ffec 	bl	8002f54 <is_armed>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <is_armed_debounce+0x1a>
            return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e009      	b.n	8002f9a <is_armed_debounce+0x2e>
        }
        osDelay(1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f00c fcc4 	bl	800f914 <osDelay>
    for (int i = 0; i < 20; i++) {
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b13      	cmp	r3, #19
 8002f96:	ddef      	ble.n	8002f78 <is_armed_debounce+0xc>
    }
    return 1;
 8002f98:	2301      	movs	r3, #1
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <is_soft_enabled>:

uint8_t is_soft_enabled() {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ARM_GPIO_Port, ARM_Pin);
 8002fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <is_soft_enabled+0x14>)
 8002fae:	f003 fe13 	bl	8006bd8 <HAL_GPIO_ReadPin>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40020400 	.word	0x40020400

08002fbc <is_breakwire_connected>:

uint8_t is_breakwire_connected() {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
    return !HAL_GPIO_ReadPin(BREAKWIRE_GPIO_Port, BREAKWIRE_Pin);
 8002fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <is_breakwire_connected+0x20>)
 8002fc6:	f003 fe07 	bl	8006bd8 <HAL_GPIO_ReadPin>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40020400 	.word	0x40020400

08002fe0 <is_breakwire_broken_debounce>:

uint8_t is_breakwire_broken_debounce() {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	e00c      	b.n	8003006 <is_breakwire_broken_debounce+0x26>
        if (is_breakwire_connected()) {
 8002fec:	f7ff ffe6 	bl	8002fbc <is_breakwire_connected>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <is_breakwire_broken_debounce+0x1a>
            return 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e009      	b.n	800300e <is_breakwire_broken_debounce+0x2e>
        }
        osDelay(1);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f00c fc8a 	bl	800f914 <osDelay>
    for (int i = 0; i < 20; i++) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3301      	adds	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b13      	cmp	r3, #19
 800300a:	ddef      	ble.n	8002fec <is_breakwire_broken_debounce+0xc>
    }
    return 1;
 800300c:	2301      	movs	r3, #1
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <buzzer_beep>:

void buzzer_beep(uint8_t delayval) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
    buzzer_setting = REPEAT_BEEP;
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <buzzer_beep+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
    buzzer_delay = delayval * 20;
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <buzzer_beep+0x50>)
 8003038:	801a      	strh	r2, [r3, #0]

    if (osMessageAvailableSpace(BuzzerQueueHandle)) {
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <buzzer_beep+0x54>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f00c fd5a 	bl	800faf8 <osMessageAvailableSpace>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <buzzer_beep+0x42>
        osMessagePut(BuzzerQueueHandle, buzzer_delay, 100);
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <buzzer_beep+0x54>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <buzzer_beep+0x50>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	2264      	movs	r2, #100	; 0x64
 8003054:	4619      	mov	r1, r3
 8003056:	f00c fc9b 	bl	800f990 <osMessagePut>
    }
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000001 	.word	0x20000001
 8003068:	20000002 	.word	0x20000002
 800306c:	200048f4 	.word	0x200048f4

08003070 <buzzer_clear_queue>:

void buzzer_clear_queue() {
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
    xQueueReset(BuzzerQueueHandle);
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <buzzer_clear_queue+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f00c fdfc 	bl	800fc78 <xQueueGenericReset>
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200048f4 	.word	0x200048f4

08003088 <pulse_recording_button>:

void pulse_recording_button() {
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_SET);
 800308c:	2201      	movs	r2, #1
 800308e:	2120      	movs	r1, #32
 8003090:	4806      	ldr	r0, [pc, #24]	; (80030ac <pulse_recording_button+0x24>)
 8003092:	f003 fdb9 	bl	8006c08 <HAL_GPIO_WritePin>
    osDelay(300);
 8003096:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800309a:	f00c fc3b 	bl	800f914 <osDelay>
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	2120      	movs	r1, #32
 80030a2:	4802      	ldr	r0, [pc, #8]	; (80030ac <pulse_recording_button+0x24>)
 80030a4:	f003 fdb0 	bl	8006c08 <HAL_GPIO_WritePin>
}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40020800 	.word	0x40020800

080030b0 <enable_recording>:

void enable_recording() {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
    if (!is_camera_recording) {
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <enable_recording+0x1c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <enable_recording+0x16>
        pulse_recording_button();
 80030bc:	f7ff ffe4 	bl	8003088 <pulse_recording_button>
        is_camera_recording = 1;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <enable_recording+0x1c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
    }
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000087c 	.word	0x2000087c

080030d0 <enable_camera>:
        pulse_recording_button();
        is_camera_recording = 0;
    }
}

void enable_camera() {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_SET);
 80030d4:	2201      	movs	r2, #1
 80030d6:	2104      	movs	r1, #4
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <enable_camera+0x18>)
 80030da:	f003 fd95 	bl	8006c08 <HAL_GPIO_WritePin>
    is_camera_recording = 0;
 80030de:	4b03      	ldr	r3, [pc, #12]	; (80030ec <enable_camera+0x1c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40020000 	.word	0x40020000
 80030ec:	2000087c 	.word	0x2000087c

080030f0 <disable_camera>:

void disable_camera() {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
    if (is_camera_recording) {
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <disable_camera+0x2c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <disable_camera+0x1e>
        pulse_recording_button();
 80030fc:	f7ff ffc4 	bl	8003088 <pulse_recording_button>
        osDelay(1000);
 8003100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003104:	f00c fc06 	bl	800f914 <osDelay>
        is_camera_recording = 0;
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <disable_camera+0x2c>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_RESET);
 800310e:	2200      	movs	r2, #0
 8003110:	2104      	movs	r1, #4
 8003112:	4803      	ldr	r0, [pc, #12]	; (8003120 <disable_camera+0x30>)
 8003114:	f003 fd78 	bl	8006c08 <HAL_GPIO_WritePin>
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	2000087c 	.word	0x2000087c
 8003120:	40020000 	.word	0x40020000

08003124 <restart_camera_with_recording>:

void restart_camera_with_recording() {
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
    disable_camera();
 8003128:	f7ff ffe2 	bl	80030f0 <disable_camera>
    osDelay(300);
 800312c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003130:	f00c fbf0 	bl	800f914 <osDelay>
    enable_camera();
 8003134:	f7ff ffcc 	bl	80030d0 <enable_camera>
    osDelay(10000);
 8003138:	f242 7010 	movw	r0, #10000	; 0x2710
 800313c:	f00c fbea 	bl	800f914 <osDelay>
    enable_recording();
 8003140:	f7ff ffb6 	bl	80030b0 <enable_recording>
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}

08003148 <set_status_led>:

void set_status_led(uint8_t status_state) {
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
    // TODO
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <is_vote_asserted>:

uint8_t is_vote_asserted() {
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
    // Todo
    return 0;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <loraOrientation>:
        }

    }
}

void loraOrientation(uint8_t isTx) {
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8003178:	af0c      	add	r7, sp, #48	; 0x30
 800317a:	4602      	mov	r2, r0
 800317c:	f107 0317 	add.w	r3, r7, #23
 8003180:	701a      	strb	r2, [r3, #0]

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8003182:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	4a9a      	ldr	r2, [pc, #616]	; (80033f4 <loraOrientation+0x284>)
 800318c:	499a      	ldr	r1, [pc, #616]	; (80033f8 <loraOrientation+0x288>)
 800318e:	f7fe fd3b 	bl	8001c08 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8003192:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800319a:	4998      	ldr	r1, [pc, #608]	; (80033fc <loraOrientation+0x28c>)
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fd93 	bl	8001cc8 <sxSetDio1Pin>

    float data[4];

    char printBuffer[128];

    if (isTx) {
 80031a2:	f107 0317 	add.w	r3, r7, #23
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8133 	beq.w	8003414 <loraOrientation+0x2a4>
        //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
        SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 80031ae:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80031b2:	22e0      	movs	r2, #224	; 0xe0
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fdda 	bl	8001d70 <SetTxParams>
        HAL_Delay(3);
 80031bc:	2003      	movs	r0, #3
 80031be:	f002 fb3d 	bl	800583c <HAL_Delay>

        lsm6dso imu;
        uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 80031c2:	f107 0018 	add.w	r0, r7, #24
 80031c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ca:	4a8d      	ldr	r2, [pc, #564]	; (8003400 <loraOrientation+0x290>)
 80031cc:	498d      	ldr	r1, [pc, #564]	; (8003404 <loraOrientation+0x294>)
 80031ce:	f7fd ff7b 	bl	80010c8 <LSM_init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
        SPI2_NSS_Pin);

        Orientation ori;
        orientation_init(&ori);
 80031d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 fd2c 	bl	8004c3a <orientation_init>
        uint32_t counter = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

        data[0] = ori.orientationQuat.w;
 80031e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        data[1] = ori.orientationQuat.v[0];
 80031f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
        data[2] = ori.orientationQuat.v[1];
 80031fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        data[3] = ori.orientationQuat.v[2];
 8003206:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 8003210:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003214:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003218:	2310      	movs	r3, #16
 800321a:	2100      	movs	r1, #0
 800321c:	f7fe fe21 	bl	8001e62 <WriteBuffer>
        HAL_Delay(1);
 8003220:	2001      	movs	r0, #1
 8003222:	f002 fb0b 	bl	800583c <HAL_Delay>

        SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 8003226:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 800322a:	2300      	movs	r3, #0
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	2201      	movs	r2, #1
 8003232:	2101      	movs	r1, #1
 8003234:	f7fe fe7e 	bl	8001f34 <SetDioIrqParams>

        HAL_Delay(3);
 8003238:	2003      	movs	r0, #3
 800323a:	f002 faff 	bl	800583c <HAL_Delay>

        uint32_t lasttime = HAL_GetTick();
 800323e:	f002 faf1 	bl	8005824 <HAL_GetTick>
 8003242:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        uint32_t nowtime = HAL_GetTick();
 8003246:	f002 faed 	bl	8005824 <HAL_GetTick>
 800324a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        float dt = 0;
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        changeLed(100, 100, 100);
 8003256:	2264      	movs	r2, #100	; 0x64
 8003258:	2164      	movs	r1, #100	; 0x64
 800325a:	2064      	movs	r0, #100	; 0x64
 800325c:	f001 f808 	bl	8004270 <changeLed>

        while (1) {

            LSM_pollsensors(&imu);
 8003260:	f107 0318 	add.w	r3, r7, #24
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd ffa9 	bl	80011bc <LSM_pollsensors>
            changeLed(0, 0, 100);
 800326a:	2264      	movs	r2, #100	; 0x64
 800326c:	2100      	movs	r1, #0
 800326e:	2000      	movs	r0, #0
 8003270:	f000 fffe 	bl	8004270 <changeLed>
            nowtime = HAL_GetTick();
 8003274:	f002 fad6 	bl	8005824 <HAL_GetTick>
 8003278:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
            dt = (nowtime - lasttime) / 1000.0;
 800327c:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8003280:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f95c 	bl	8000544 <__aeabi_ui2d>
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	4b5d      	ldr	r3, [pc, #372]	; (8003408 <loraOrientation+0x298>)
 8003292:	f7fd fafb 	bl	800088c <__aeabi_ddiv>
 8003296:	4603      	mov	r3, r0
 8003298:	460c      	mov	r4, r1
 800329a:	4618      	mov	r0, r3
 800329c:	4621      	mov	r1, r4
 800329e:	f7fd fcc3 	bl	8000c28 <__aeabi_d2f>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            lasttime = nowtime;
 80032a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ac:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

            orientation_setGyro(&ori, imu.gyroRPS);
 80032b0:	f107 0318 	add.w	r3, r7, #24
 80032b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80032b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 fce9 	bl	8004c96 <orientation_setGyro>
            orientation_setAcc(&ori, imu.accMPS);
 80032c4:	f107 0318 	add.w	r3, r7, #24
 80032c8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80032cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fcf6 	bl	8004cc4 <orientation_setAcc>
            orientation_update(&ori, dt, 1);
 80032d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032dc:	2101      	movs	r1, #1
 80032de:	ed97 0a7d 	vldr	s0, [r7, #500]	; 0x1f4
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fd08 	bl	8004cf8 <orientation_update>

            counter++;
 80032e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80032ec:	3301      	adds	r3, #1
 80032ee:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

            if (counter % 20 == 0) {
 80032f2:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80032f6:	4b45      	ldr	r3, [pc, #276]	; (800340c <loraOrientation+0x29c>)
 80032f8:	fba3 2301 	umull	r2, r3, r3, r1
 80032fc:	091a      	lsrs	r2, r3, #4
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	1aca      	subs	r2, r1, r3
 8003308:	2a00      	cmp	r2, #0
 800330a:	d16e      	bne.n	80033ea <loraOrientation+0x27a>
                data[0] = ori.orientationQuat.w;
 800330c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                data[1] = ori.orientationQuat.v[0];
 8003316:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
                data[2] = ori.orientationQuat.v[1];
 8003320:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
                data[3] = ori.orientationQuat.v[2];
 800332a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003334:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f925 	bl	8000588 <__aeabi_f2d>
 800333e:	4682      	mov	sl, r0
 8003340:	468b      	mov	fp, r1
                        data[1], data[2], data[3]);
 8003342:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f91e 	bl	8000588 <__aeabi_f2d>
 800334c:	4604      	mov	r4, r0
 800334e:	460d      	mov	r5, r1
                        data[1], data[2], data[3]);
 8003350:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f917 	bl	8000588 <__aeabi_f2d>
 800335a:	4680      	mov	r8, r0
 800335c:	4689      	mov	r9, r1
                        data[1], data[2], data[3]);
 800335e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f910 	bl	8000588 <__aeabi_f2d>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8003370:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003374:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003378:	e9cd 4500 	strd	r4, r5, [sp]
 800337c:	4652      	mov	r2, sl
 800337e:	465b      	mov	r3, fp
 8003380:	4923      	ldr	r1, [pc, #140]	; (8003410 <loraOrientation+0x2a0>)
 8003382:	f010 f94d 	bl	8013620 <siprintf>
                //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
                CDC_Transmit_FS((uint8_t*) printBuffer,
                        MIN(strlen(printBuffer), 128));
 8003386:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800338a:	4618      	mov	r0, r3
 800338c:	f7fc ff40 	bl	8000210 <strlen>
 8003390:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 8003392:	2b7f      	cmp	r3, #127	; 0x7f
 8003394:	d807      	bhi.n	80033a6 <loraOrientation+0x236>
                        MIN(strlen(printBuffer), 128));
 8003396:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800339a:	4618      	mov	r0, r3
 800339c:	f7fc ff38 	bl	8000210 <strlen>
 80033a0:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	e000      	b.n	80033a8 <loraOrientation+0x238>
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f00e fd7e 	bl	8011eb0 <CDC_Transmit_FS>

                WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 80033b4:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80033b8:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 80033bc:	2310      	movs	r3, #16
 80033be:	2100      	movs	r1, #0
 80033c0:	f7fe fd4f 	bl	8001e62 <WriteBuffer>
                HAL_Delay(1);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f002 fa39 	bl	800583c <HAL_Delay>
                ClrIrqStatus(&radio, 1); // clear txdone irq
 80033ca:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fde9 	bl	8001fa8 <ClrIrqStatus>
                HAL_Delay(1);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f002 fa30 	bl	800583c <HAL_Delay>
                SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 80033dc:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80033e0:	2232      	movs	r2, #50	; 0x32
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fdfa 	bl	8001fde <SetTx>
            }

            HAL_Delay(1);
 80033ea:	2001      	movs	r0, #1
 80033ec:	f002 fa26 	bl	800583c <HAL_Delay>
            LSM_pollsensors(&imu);
 80033f0:	e736      	b.n	8003260 <loraOrientation+0xf0>
 80033f2:	bf00      	nop
 80033f4:	40020000 	.word	0x40020000
 80033f8:	20004854 	.word	0x20004854
 80033fc:	40020800 	.word	0x40020800
 8003400:	40020400 	.word	0x40020400
 8003404:	200046d8 	.word	0x200046d8
 8003408:	408f4000 	.word	0x408f4000
 800340c:	cccccccd 	.word	0xcccccccd
 8003410:	08017b38 	.word	0x08017b38

        }
    } else {
        // rx mode
        SetDioIrqParams(&radio, 1 << 1, 1 << 1, 0, 0); //rxdone on gpio1
 8003414:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003418:	2300      	movs	r3, #0
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	2202      	movs	r2, #2
 8003420:	2102      	movs	r1, #2
 8003422:	f7fe fd87 	bl	8001f34 <SetDioIrqParams>
        HAL_Delay(1);
 8003426:	2001      	movs	r0, #1
 8003428:	f002 fa08 	bl	800583c <HAL_Delay>

        uint8_t rxStartBufferPointer = 1;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff

        changeLed(0, 100, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2164      	movs	r1, #100	; 0x64
 8003436:	2000      	movs	r0, #0
 8003438:	f000 ff1a 	bl	8004270 <changeLed>
        while (1) {

            //SetRx(0x00, 0xffff); // continous rx
            SetRx(&radio, 0x00, 0); // No timeout
 800343c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003440:	2200      	movs	r2, #0
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fde9 	bl	800201c <SetRx>
            //SetRx(0x02, 200); // 200 ms timeout
            HAL_Delay(1);
 800344a:	2001      	movs	r0, #1
 800344c:	f002 f9f6 	bl	800583c <HAL_Delay>
            // wait for reception:
            while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8003450:	bf00      	nop
 8003452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003456:	4837      	ldr	r0, [pc, #220]	; (8003534 <loraOrientation+0x3c4>)
 8003458:	f003 fbbe 	bl	8006bd8 <HAL_GPIO_ReadPin>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f7      	beq.n	8003452 <loraOrientation+0x2e2>
            }

            GetPacketStatusLora(&radio);
 8003462:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fdf7 	bl	800205a <GetPacketStatusLora>
            ClrIrqStatus(&radio, 1 << 1); // clear rxdone Irq
 800346c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003470:	2102      	movs	r1, #2
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fd98 	bl	8001fa8 <ClrIrqStatus>
            HAL_Delay(1);
 8003478:	2001      	movs	r0, #1
 800347a:	f002 f9df 	bl	800583c <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(data),
 800347e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8003482:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 8003486:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 800348a:	2210      	movs	r2, #16
 800348c:	f7fe fd1d 	bl	8001eca <ReadBuffer>
                    (uint8_t*) data);
            snprintf(printBuffer, 128,
                    "Quaternion: %f, %f, %f, %f, RSSI: %f, SNR: %f\r\n",
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003490:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
            snprintf(printBuffer, 128,
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd f877 	bl	8000588 <__aeabi_f2d>
 800349a:	4604      	mov	r4, r0
 800349c:	460d      	mov	r5, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 800349e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
            snprintf(printBuffer, 128,
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd f870 	bl	8000588 <__aeabi_f2d>
 80034a8:	4680      	mov	r8, r0
 80034aa:	4689      	mov	r9, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034ac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
            snprintf(printBuffer, 128,
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd f869 	bl	8000588 <__aeabi_f2d>
 80034b6:	4682      	mov	sl, r0
 80034b8:	468b      	mov	fp, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
            snprintf(printBuffer, 128,
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd f862 	bl	8000588 <__aeabi_f2d>
 80034c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
            snprintf(printBuffer, 128,
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f85b 	bl	8000588 <__aeabi_f2d>
 80034d2:	e9c7 0100 	strd	r0, r1, [r7]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
            snprintf(printBuffer, 128,
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f854 	bl	8000588 <__aeabi_f2d>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	f507 709a 	add.w	r0, r7, #308	; 0x134
 80034e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80034ec:	ed97 7b00 	vldr	d7, [r7]
 80034f0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80034f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80034f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80034fc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003500:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003504:	e9cd 4500 	strd	r4, r5, [sp]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <loraOrientation+0x3c8>)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	f010 f854 	bl	80135b8 <sniprintf>
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8003510:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8003514:	4618      	mov	r0, r3
 8003516:	f7fc fe7b 	bl	8000210 <strlen>
 800351a:	4603      	mov	r3, r0
 800351c:	b29a      	uxth	r2, r3
 800351e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f00e fcc3 	bl	8011eb0 <CDC_Transmit_FS>
            HAL_Delay(1);
 800352a:	2001      	movs	r0, #1
 800352c:	f002 f986 	bl	800583c <HAL_Delay>
            SetRx(&radio, 0x00, 0); // No timeout
 8003530:	e784      	b.n	800343c <loraOrientation+0x2cc>
 8003532:	bf00      	nop
 8003534:	40020800 	.word	0x40020800
 8003538:	08017b58 	.word	0x08017b58

0800353c <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 8003540:	2214      	movs	r2, #20
 8003542:	2122      	movs	r1, #34	; 0x22
 8003544:	2064      	movs	r0, #100	; 0x64
 8003546:	f000 fe93 	bl	8004270 <changeLed>

    changeLed(255, 0, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	20ff      	movs	r0, #255	; 0xff
 8003550:	f000 fe8e 	bl	8004270 <changeLed>
    playtone(1046, 100, 10);
 8003554:	220a      	movs	r2, #10
 8003556:	2164      	movs	r1, #100	; 0x64
 8003558:	f240 4016 	movw	r0, #1046	; 0x416
 800355c:	f000 fd90 	bl	8004080 <playtone>
    HAL_Delay(100);
 8003560:	2064      	movs	r0, #100	; 0x64
 8003562:	f002 f96b 	bl	800583c <HAL_Delay>
    changeLed(0, 255, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	21ff      	movs	r1, #255	; 0xff
 800356a:	2000      	movs	r0, #0
 800356c:	f000 fe80 	bl	8004270 <changeLed>
    playtone(1319, 100, 10);
 8003570:	220a      	movs	r2, #10
 8003572:	2164      	movs	r1, #100	; 0x64
 8003574:	f240 5027 	movw	r0, #1319	; 0x527
 8003578:	f000 fd82 	bl	8004080 <playtone>
    return;
 800357c:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == IMU_INT_Pin && imu_ready) {
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003590:	d106      	bne.n	80035a0 <HAL_GPIO_EXTI_Callback+0x20>
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_GPIO_EXTI_Callback+0x28>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_GPIO_EXTI_Callback+0x20>
        LSM_ReadDMA(&imu);
 800359a:	4804      	ldr	r0, [pc, #16]	; (80035ac <HAL_GPIO_EXTI_Callback+0x2c>)
 800359c:	f7fd ff9a 	bl	80014d4 <LSM_ReadDMA>
    }
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	2000087d 	.word	0x2000087d
 80035ac:	20004730 	.word	0x20004730

080035b0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <HAL_SPI_TxRxCpltCallback+0x20>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d102      	bne.n	80035c8 <HAL_SPI_TxRxCpltCallback+0x18>
        LSM_ReadDMA_Complete(&imu);
 80035c2:	4804      	ldr	r0, [pc, #16]	; (80035d4 <HAL_SPI_TxRxCpltCallback+0x24>)
 80035c4:	f7fd ffb7 	bl	8001536 <LSM_ReadDMA_Complete>
    }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40003800 	.word	0x40003800
 80035d4:	20004730 	.word	0x20004730

080035d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b0ce      	sub	sp, #312	; 0x138
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035de:	f002 f8eb 	bl	80057b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035e2:	f000 f92f 	bl	8003844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035e6:	f000 fc47 	bl	8003e78 <MX_GPIO_Init>
  MX_DMA_Init();
 80035ea:	f000 fc1d 	bl	8003e28 <MX_DMA_Init>
  MX_TIM3_Init();
 80035ee:	f000 fb4b 	bl	8003c88 <MX_TIM3_Init>
  MX_SPI2_Init();
 80035f2:	f000 fa79 	bl	8003ae8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80035f6:	f000 faad 	bl	8003b54 <MX_SPI3_Init>
  MX_TIM2_Init();
 80035fa:	f000 fae1 	bl	8003bc0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80035fe:	f000 fa3d 	bl	8003a7c <MX_SPI1_Init>
  MX_FATFS_Init();
 8003602:	f009 ff25 	bl	800d450 <MX_FATFS_Init>
  MX_I2C3_Init();
 8003606:	f000 fa0b 	bl	8003a20 <MX_I2C3_Init>
  MX_ADC1_Init();
 800360a:	f000 f9b7 	bl	800397c <MX_ADC1_Init>
  MX_TIM6_Init();
 800360e:	f000 fbd5 	bl	8003dbc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003612:	210c      	movs	r1, #12
 8003614:	4875      	ldr	r0, [pc, #468]	; (80037ec <main+0x214>)
 8003616:	f007 fd6f 	bl	800b0f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800361a:	2104      	movs	r1, #4
 800361c:	4873      	ldr	r0, [pc, #460]	; (80037ec <main+0x214>)
 800361e:	f007 fd6b 	bl	800b0f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003622:	2108      	movs	r1, #8
 8003624:	4871      	ldr	r0, [pc, #452]	; (80037ec <main+0x214>)
 8003626:	f007 fd67 	bl	800b0f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800362a:	2100      	movs	r1, #0
 800362c:	486f      	ldr	r0, [pc, #444]	; (80037ec <main+0x214>)
 800362e:	f007 fd63 	bl	800b0f8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003632:	210c      	movs	r1, #12
 8003634:	486e      	ldr	r0, [pc, #440]	; (80037f0 <main+0x218>)
 8003636:	f007 fd5f 	bl	800b0f8 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start(&htim6);
 800363a:	486e      	ldr	r0, [pc, #440]	; (80037f4 <main+0x21c>)
 800363c:	f007 fce9 	bl	800b012 <HAL_TIM_Base_Start>

    startupMusic();
 8003640:	f7ff ff7c 	bl	800353c <startupMusic>
    //while (1) {rick();}

    changeLed(90, 0, 0);
 8003644:	2200      	movs	r2, #0
 8003646:	2100      	movs	r1, #0
 8003648:	205a      	movs	r0, #90	; 0x5a
 800364a:	f000 fe11 	bl	8004270 <changeLed>

    htim3.Instance->CCR2 = 0;
 800364e:	4b67      	ldr	r3, [pc, #412]	; (80037ec <main+0x214>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <main+0x214>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	22ff      	movs	r2, #255	; 0xff
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 800365e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003662:	f002 f8eb 	bl	800583c <HAL_Delay>

    //BWtest();
    uint8_t is_tx = 1;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    //loraTesting(is_tx);
    // setting to go into ground station mode
    if (!is_tx) {
 800366c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <main+0xa6>
        loraOrientation(is_tx);
 8003674:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fd79 	bl	8003170 <loraOrientation>
    }
    //servoToggleTest();

    // LSM6dso setup
    orientation_init(&ori);
 800367e:	485e      	ldr	r0, [pc, #376]	; (80037f8 <main+0x220>)
 8003680:	f001 fadb 	bl	8004c3a <orientation_init>
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 8003684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003688:	4a5c      	ldr	r2, [pc, #368]	; (80037fc <main+0x224>)
 800368a:	495d      	ldr	r1, [pc, #372]	; (8003800 <main+0x228>)
 800368c:	485d      	ldr	r0, [pc, #372]	; (8003804 <main+0x22c>)
 800368e:	f7fd fd1b 	bl	80010c8 <LSM_init>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8003698:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <main+0x21c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
    imu_ready = 1;
 80036a0:	4b59      	ldr	r3, [pc, #356]	; (8003808 <main+0x230>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]

    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 80036a6:	2277      	movs	r2, #119	; 0x77
 80036a8:	4958      	ldr	r1, [pc, #352]	; (800380c <main+0x234>)
 80036aa:	4859      	ldr	r0, [pc, #356]	; (8003810 <main+0x238>)
 80036ac:	f7fd ffa0 	bl	80015f0 <SPL06_Init>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

    if (barostatus != 5) {
 80036b6:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d00f      	beq.n	80036de <main+0x106>

            HAL_Delay(100);
 80036be:	2064      	movs	r0, #100	; 0x64
 80036c0:	f002 f8bc 	bl	800583c <HAL_Delay>
            changeLed(100, 0, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2100      	movs	r1, #0
 80036c8:	2064      	movs	r0, #100	; 0x64
 80036ca:	f000 fdd1 	bl	8004270 <changeLed>
            HAL_Delay(100);
 80036ce:	2064      	movs	r0, #100	; 0x64
 80036d0:	f002 f8b4 	bl	800583c <HAL_Delay>
            changeLed(0, 0, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	2000      	movs	r0, #0
 80036da:	f000 fdc9 	bl	8004270 <changeLed>

    }

    //SDTesting();

    float yrot = 0;
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    uint32_t lasttime = HAL_GetTick();
 80036e6:	f002 f89d 	bl	8005824 <HAL_GetTick>
 80036ea:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    uint32_t nowtime = HAL_GetTick();
 80036ee:	f002 f899 	bl	8005824 <HAL_GetTick>
 80036f2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    float dt = 0;
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    uint16_t rawadc;

    uint32_t counter = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of BuzzerQueue */
  osMessageQDef(BuzzerQueue, 6, uint16_t);
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <main+0x23c>)
 8003706:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800370a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800370c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BuzzerQueueHandle = osMessageCreate(osMessageQ(BuzzerQueue), NULL);
 8003710:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f00c f910 	bl	800f93c <osMessageCreate>
 800371c:	4602      	mov	r2, r0
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <main+0x240>)
 8003720:	601a      	str	r2, [r3, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLedTask, osPriorityBelowNormal, 0, 128);
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <main+0x244>)
 8003724:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003728:	461d      	mov	r5, r3
 800372a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800372c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800372e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8003736:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f00c f89d 	bl	800f87c <osThreadCreate>
 8003742:	4602      	mov	r2, r0
 8003744:	4b36      	ldr	r3, [pc, #216]	; (8003820 <main+0x248>)
 8003746:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8003748:	4b36      	ldr	r3, [pc, #216]	; (8003824 <main+0x24c>)
 800374a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800374e:	461d      	mov	r5, r3
 8003750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 800375c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f00c f88a 	bl	800f87c <osThreadCreate>
 8003768:	4602      	mov	r2, r0
 800376a:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <main+0x250>)
 800376c:	601a      	str	r2, [r3, #0]

  /* definition and creation of stateMachineTas */
  osThreadDef(stateMachineTas, startStateMachine, osPriorityHigh, 0, 256);
 800376e:	4b2f      	ldr	r3, [pc, #188]	; (800382c <main+0x254>)
 8003770:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003774:	461d      	mov	r5, r3
 8003776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800377a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800377e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stateMachineTasHandle = osThreadCreate(osThread(stateMachineTas), NULL);
 8003782:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f00c f877 	bl	800f87c <osThreadCreate>
 800378e:	4602      	mov	r2, r0
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <main+0x258>)
 8003792:	601a      	str	r2, [r3, #0]

  /* definition and creation of telemTask */
  osThreadDef(telemTask, StartTelemTask, osPriorityNormal, 0, 256);
 8003794:	f107 0320 	add.w	r3, r7, #32
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <main+0x25c>)
 800379a:	461c      	mov	r4, r3
 800379c:	4615      	mov	r5, r2
 800379e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemTaskHandle = osThreadCreate(osThread(telemTask), NULL);
 80037aa:	f107 0320 	add.w	r3, r7, #32
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f00c f863 	bl	800f87c <osThreadCreate>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <main+0x260>)
 80037ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of baroTask */
  osThreadDef(baroTask, StartBaroTask, osPriorityNormal, 0, 128);
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <main+0x264>)
 80037c0:	461c      	mov	r4, r3
 80037c2:	4615      	mov	r5, r2
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  baroTaskHandle = osThreadCreate(osThread(baroTask), NULL);
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f00c f851 	bl	800f87c <osThreadCreate>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b18      	ldr	r3, [pc, #96]	; (8003840 <main+0x268>)
 80037de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80037e0:	f00c f835 	bl	800f84e <osKernelStart>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        HAL_Delay(1);
 80037e4:	2001      	movs	r0, #1
 80037e6:	f002 f829 	bl	800583c <HAL_Delay>
 80037ea:	e7fb      	b.n	80037e4 <main+0x20c>
 80037ec:	20004814 	.word	0x20004814
 80037f0:	200049cc 	.word	0x200049cc
 80037f4:	20004930 	.word	0x20004930
 80037f8:	200045e8 	.word	0x200045e8
 80037fc:	40020400 	.word	0x40020400
 8003800:	200046d8 	.word	0x200046d8
 8003804:	20004730 	.word	0x20004730
 8003808:	2000087d 	.word	0x2000087d
 800380c:	20004684 	.word	0x20004684
 8003810:	200048f8 	.word	0x200048f8
 8003814:	08017d6c 	.word	0x08017d6c
 8003818:	200048f4 	.word	0x200048f4
 800381c:	08017d84 	.word	0x08017d84
 8003820:	20004810 	.word	0x20004810
 8003824:	08017dac 	.word	0x08017dac
 8003828:	20004a10 	.word	0x20004a10
 800382c:	08017dd8 	.word	0x08017dd8
 8003830:	20004970 	.word	0x20004970
 8003834:	08017e00 	.word	0x08017e00
 8003838:	20004a74 	.word	0x20004a74
 800383c:	08017e28 	.word	0x08017e28
 8003840:	20004a0c 	.word	0x20004a0c

08003844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b0ac      	sub	sp, #176	; 0xb0
 8003848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800384a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800384e:	2234      	movs	r2, #52	; 0x34
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f00f f843 	bl	80128de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003858:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	225c      	movs	r2, #92	; 0x5c
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f00f f834 	bl	80128de <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <SystemClock_Config+0x130>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a3d      	ldr	r2, [pc, #244]	; (8003974 <SystemClock_Config+0x130>)
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <SystemClock_Config+0x130>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <SystemClock_Config+0x134>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a37      	ldr	r2, [pc, #220]	; (8003978 <SystemClock_Config+0x134>)
 800389c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b35      	ldr	r3, [pc, #212]	; (8003978 <SystemClock_Config+0x134>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ba:	2302      	movs	r3, #2
 80038bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038c8:	2304      	movs	r3, #4
 80038ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80038ce:	23b4      	movs	r3, #180	; 0xb4
 80038d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038d4:	2302      	movs	r3, #2
 80038d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80038da:	2308      	movs	r3, #8
 80038dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038ea:	4618      	mov	r0, r3
 80038ec:	f006 f9a6 	bl	8009c3c <HAL_RCC_OscConfig>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80038f6:	f001 f8e9 	bl	8004acc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038fa:	f005 fb39 	bl	8008f70 <HAL_PWREx_EnableOverDrive>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003904:	f001 f8e2 	bl	8004acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003908:	230f      	movs	r3, #15
 800390a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800390c:	2302      	movs	r3, #2
 800390e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003910:	2300      	movs	r3, #0
 8003912:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003914:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003918:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800391a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800391e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003920:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003924:	2105      	movs	r1, #5
 8003926:	4618      	mov	r0, r3
 8003928:	f005 fb72 	bl	8009010 <HAL_RCC_ClockConfig>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003932:	f001 f8cb 	bl	8004acc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800393a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 800393c:	2304      	movs	r3, #4
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8003940:	2360      	movs	r3, #96	; 0x60
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003944:	2302      	movs	r3, #2
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8003948:	2304      	movs	r3, #4
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800394c:	2301      	movs	r3, #1
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8003950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003954:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4618      	mov	r0, r3
 800395c:	f005 fca4 	bl	80092a8 <HAL_RCCEx_PeriphCLKConfig>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8003966:	f001 f8b1 	bl	8004acc <Error_Handler>
  }
}
 800396a:	bf00      	nop
 800396c:	37b0      	adds	r7, #176	; 0xb0
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40007000 	.word	0x40007000

0800397c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003982:	463b      	mov	r3, r7
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <MX_ADC1_Init+0x98>)
 8003990:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <MX_ADC1_Init+0x9c>)
 8003992:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003994:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <MX_ADC1_Init+0x98>)
 8003996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800399a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <MX_ADC1_Init+0x98>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039b6:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039bc:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <MX_ADC1_Init+0xa0>)
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039d8:	2201      	movs	r2, #1
 80039da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039dc:	480d      	ldr	r0, [pc, #52]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039de:	f001 ff4f 	bl	8005880 <HAL_ADC_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80039e8:	f001 f870 	bl	8004acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80039ec:	230c      	movs	r3, #12
 80039ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039f0:	2301      	movs	r3, #1
 80039f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039f8:	463b      	mov	r3, r7
 80039fa:	4619      	mov	r1, r3
 80039fc:	4805      	ldr	r0, [pc, #20]	; (8003a14 <MX_ADC1_Init+0x98>)
 80039fe:	f002 f8db 	bl	8005bb8 <HAL_ADC_ConfigChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003a08:	f001 f860 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200048ac 	.word	0x200048ac
 8003a18:	40012000 	.word	0x40012000
 8003a1c:	0f000001 	.word	0x0f000001

08003a20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a26:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <MX_I2C3_Init+0x54>)
 8003a28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a2c:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <MX_I2C3_Init+0x58>)
 8003a2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003a36:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a5c:	4804      	ldr	r0, [pc, #16]	; (8003a70 <MX_I2C3_Init+0x50>)
 8003a5e:	f003 f905 	bl	8006c6c <HAL_I2C_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a68:	f001 f830 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20004684 	.word	0x20004684
 8003a74:	40005c00 	.word	0x40005c00
 8003a78:	000186a0 	.word	0x000186a0

08003a7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <MX_SPI1_Init+0x68>)
 8003a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ab0:	2238      	movs	r2, #56	; 0x38
 8003ab2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ac8:	220a      	movs	r2, #10
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003acc:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ace:	f006 fb0f 	bl	800a0f0 <HAL_SPI_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ad8:	f000 fff8 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20004974 	.word	0x20004974
 8003ae4:	40013000 	.word	0x40013000

08003ae8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003aee:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <MX_SPI2_Init+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003af8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b34:	220a      	movs	r2, #10
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b38:	4804      	ldr	r0, [pc, #16]	; (8003b4c <MX_SPI2_Init+0x64>)
 8003b3a:	f006 fad9 	bl	800a0f0 <HAL_SPI_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003b44:	f000 ffc2 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200046d8 	.word	0x200046d8
 8003b50:	40003800 	.word	0x40003800

08003b54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <MX_SPI3_Init+0x68>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b88:	2210      	movs	r2, #16
 8003b8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003ba0:	220a      	movs	r2, #10
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003ba4:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <MX_SPI3_Init+0x64>)
 8003ba6:	f006 faa3 	bl	800a0f0 <HAL_SPI_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003bb0:	f000 ff8c 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20004854 	.word	0x20004854
 8003bbc:	40003c00 	.word	0x40003c00

08003bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc6:	f107 0320 	add.w	r3, r7, #32
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	615a      	str	r2, [r3, #20]
 8003be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003be2:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003bea:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003bec:	2259      	movs	r2, #89	; 0x59
 8003bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf0:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003bf8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bfe:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c04:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c0a:	481e      	ldr	r0, [pc, #120]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003c0c:	f007 fa49 	bl	800b0a2 <HAL_TIM_PWM_Init>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003c16:	f000 ff59 	bl	8004acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c22:	f107 0320 	add.w	r3, r7, #32
 8003c26:	4619      	mov	r1, r3
 8003c28:	4816      	ldr	r0, [pc, #88]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003c2a:	f008 f861 	bl	800bcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003c34:	f000 ff4a 	bl	8004acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c38:	2360      	movs	r3, #96	; 0x60
 8003c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	480d      	ldr	r0, [pc, #52]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003c50:	f007 fb98 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003c5a:	f000 ff37 	bl	8004acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	220c      	movs	r2, #12
 8003c62:	4619      	mov	r1, r3
 8003c64:	4807      	ldr	r0, [pc, #28]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003c66:	f007 fb8d 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c70:	f000 ff2c 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003c74:	4803      	ldr	r0, [pc, #12]	; (8003c84 <MX_TIM2_Init+0xc4>)
 8003c76:	f001 fb79 	bl	800536c <HAL_TIM_MspPostInit>

}
 8003c7a:	bf00      	nop
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200049cc 	.word	0x200049cc

08003c88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	; 0x38
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9c:	f107 0320 	add.w	r3, r7, #32
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
 8003cb4:	615a      	str	r2, [r3, #20]
 8003cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <MX_TIM3_Init+0x130>)
 8003cbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003cc0:	2259      	movs	r2, #89	; 0x59
 8003cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8003cca:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cdc:	4835      	ldr	r0, [pc, #212]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003cde:	f007 f96d 	bl	800afbc <HAL_TIM_Base_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003ce8:	f000 fef0 	bl	8004acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	482e      	ldr	r0, [pc, #184]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003cfa:	f007 fc09 	bl	800b510 <HAL_TIM_ConfigClockSource>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003d04:	f000 fee2 	bl	8004acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d08:	482a      	ldr	r0, [pc, #168]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003d0a:	f007 f9ca 	bl	800b0a2 <HAL_TIM_PWM_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003d14:	f000 feda 	bl	8004acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d20:	f107 0320 	add.w	r3, r7, #32
 8003d24:	4619      	mov	r1, r3
 8003d26:	4823      	ldr	r0, [pc, #140]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003d28:	f007 ffe2 	bl	800bcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003d32:	f000 fecb 	bl	8004acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d36:	2360      	movs	r3, #96	; 0x60
 8003d38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d46:	1d3b      	adds	r3, r7, #4
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4819      	ldr	r0, [pc, #100]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003d4e:	f007 fb19 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003d58:	f000 feb8 	bl	8004acc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d60:	1d3b      	adds	r3, r7, #4
 8003d62:	2204      	movs	r2, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4813      	ldr	r0, [pc, #76]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003d68:	f007 fb0c 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003d72:	f000 feab 	bl	8004acc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003d76:	2302      	movs	r3, #2
 8003d78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	480c      	ldr	r0, [pc, #48]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003d82:	f007 faff 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003d8c:	f000 fe9e 	bl	8004acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	220c      	movs	r2, #12
 8003d94:	4619      	mov	r1, r3
 8003d96:	4807      	ldr	r0, [pc, #28]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003d98:	f007 faf4 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003da2:	f000 fe93 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003da6:	4803      	ldr	r0, [pc, #12]	; (8003db4 <MX_TIM3_Init+0x12c>)
 8003da8:	f001 fae0 	bl	800536c <HAL_TIM_MspPostInit>

}
 8003dac:	bf00      	nop
 8003dae:	3738      	adds	r7, #56	; 0x38
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20004814 	.word	0x20004814
 8003db8:	40000400 	.word	0x40000400

08003dbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <MX_TIM6_Init+0x64>)
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <MX_TIM6_Init+0x68>)
 8003dce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <MX_TIM6_Init+0x64>)
 8003dd2:	2259      	movs	r2, #89	; 0x59
 8003dd4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <MX_TIM6_Init+0x64>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <MX_TIM6_Init+0x64>)
 8003dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <MX_TIM6_Init+0x64>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003dea:	480d      	ldr	r0, [pc, #52]	; (8003e20 <MX_TIM6_Init+0x64>)
 8003dec:	f007 f8e6 	bl	800afbc <HAL_TIM_Base_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003df6:	f000 fe69 	bl	8004acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003e02:	463b      	mov	r3, r7
 8003e04:	4619      	mov	r1, r3
 8003e06:	4806      	ldr	r0, [pc, #24]	; (8003e20 <MX_TIM6_Init+0x64>)
 8003e08:	f007 ff72 	bl	800bcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003e12:	f000 fe5b 	bl	8004acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20004930 	.word	0x20004930
 8003e24:	40001000 	.word	0x40001000

08003e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <MX_DMA_Init+0x4c>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <MX_DMA_Init+0x4c>)
 8003e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <MX_DMA_Init+0x4c>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2105      	movs	r1, #5
 8003e4e:	200e      	movs	r0, #14
 8003e50:	f002 f998 	bl	8006184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003e54:	200e      	movs	r0, #14
 8003e56:	f002 f9b1 	bl	80061bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2105      	movs	r1, #5
 8003e5e:	200f      	movs	r0, #15
 8003e60:	f002 f990 	bl	8006184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003e64:	200f      	movs	r0, #15
 8003e66:	f002 f9a9 	bl	80061bc <HAL_NVIC_EnableIRQ>

}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800

08003e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7e:	f107 0314 	add.w	r3, r7, #20
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	605a      	str	r2, [r3, #4]
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	4b75      	ldr	r3, [pc, #468]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a74      	ldr	r2, [pc, #464]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b72      	ldr	r3, [pc, #456]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a6d      	ldr	r2, [pc, #436]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b6b      	ldr	r3, [pc, #428]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	4b67      	ldr	r3, [pc, #412]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	4a66      	ldr	r2, [pc, #408]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed6:	4b64      	ldr	r3, [pc, #400]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	4b60      	ldr	r3, [pc, #384]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a5f      	ldr	r2, [pc, #380]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4b59      	ldr	r3, [pc, #356]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a58      	ldr	r2, [pc, #352]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b56      	ldr	r3, [pc, #344]	; (8004068 <MX_GPIO_Init+0x1f0>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_POWER_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f248 0104 	movw	r1, #32772	; 0x8004
 8003f20:	4852      	ldr	r0, [pc, #328]	; (800406c <MX_GPIO_Init+0x1f4>)
 8003f22:	f002 fe71 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_NSS_Pin|VTX_BTN1_Pin, GPIO_PIN_RESET);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2130      	movs	r1, #48	; 0x30
 8003f2a:	4851      	ldr	r0, [pc, #324]	; (8004070 <MX_GPIO_Init+0x1f8>)
 8003f2c:	f002 fe6c 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f36:	484f      	ldr	r0, [pc, #316]	; (8004074 <MX_GPIO_Init+0x1fc>)
 8003f38:	f002 fe66 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	484c      	ldr	r0, [pc, #304]	; (8004074 <MX_GPIO_Init+0x1fc>)
 8003f42:	f002 fe61 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8003f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f4c:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <MX_GPIO_Init+0x200>)
 8003f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4845      	ldr	r0, [pc, #276]	; (8004070 <MX_GPIO_Init+0x1f8>)
 8003f5c:	f002 fcaa 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RBF_Pin */
  GPIO_InitStruct.Pin = RBF_Pin;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RBF_GPIO_Port, &GPIO_InitStruct);
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4619      	mov	r1, r3
 8003f72:	483e      	ldr	r0, [pc, #248]	; (800406c <MX_GPIO_Init+0x1f4>)
 8003f74:	f002 fc9e 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_POWER_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = CAM_POWER_Pin|LORA_NSS_Pin;
 8003f78:	f248 0304 	movw	r3, #32772	; 0x8004
 8003f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4836      	ldr	r0, [pc, #216]	; (800406c <MX_GPIO_Init+0x1f4>)
 8003f92:	f002 fc8f 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003f96:	2310      	movs	r3, #16
 8003f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	4619      	mov	r1, r3
 8003fac:	4830      	ldr	r0, [pc, #192]	; (8004070 <MX_GPIO_Init+0x1f8>)
 8003fae:	f002 fc81 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VTX_BTN1_Pin */
  GPIO_InitStruct.Pin = VTX_BTN1_Pin;
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VTX_BTN1_GPIO_Port, &GPIO_InitStruct);
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4829      	ldr	r0, [pc, #164]	; (8004070 <MX_GPIO_Init+0x1f8>)
 8003fca:	f002 fc73 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 8003fce:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe0:	f107 0314 	add.w	r3, r7, #20
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4823      	ldr	r0, [pc, #140]	; (8004074 <MX_GPIO_Init+0x1fc>)
 8003fe8:	f002 fc64 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 8003fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 8003ffa:	f107 0314 	add.w	r3, r7, #20
 8003ffe:	4619      	mov	r1, r3
 8004000:	481b      	ldr	r0, [pc, #108]	; (8004070 <MX_GPIO_Init+0x1f8>)
 8004002:	f002 fc57 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8004006:	2304      	movs	r3, #4
 8004008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	4619      	mov	r1, r3
 8004018:	4818      	ldr	r0, [pc, #96]	; (800407c <MX_GPIO_Init+0x204>)
 800401a:	f002 fc4b 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800401e:	2310      	movs	r3, #16
 8004020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	4619      	mov	r1, r3
 8004030:	4810      	ldr	r0, [pc, #64]	; (8004074 <MX_GPIO_Init+0x1fc>)
 8004032:	f002 fc3f 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BREAKWIRE_Pin ARM_Pin */
  GPIO_InitStruct.Pin = BREAKWIRE_Pin|ARM_Pin;
 8004036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800403a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004040:	2301      	movs	r3, #1
 8004042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	4619      	mov	r1, r3
 800404a:	480a      	ldr	r0, [pc, #40]	; (8004074 <MX_GPIO_Init+0x1fc>)
 800404c:	f002 fc32 	bl	80068b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004050:	2200      	movs	r2, #0
 8004052:	2105      	movs	r1, #5
 8004054:	2028      	movs	r0, #40	; 0x28
 8004056:	f002 f895 	bl	8006184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800405a:	2028      	movs	r0, #40	; 0x28
 800405c:	f002 f8ae 	bl	80061bc <HAL_NVIC_EnableIRQ>

}
 8004060:	bf00      	nop
 8004062:	3728      	adds	r7, #40	; 0x28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	40020000 	.word	0x40020000
 8004070:	40020800 	.word	0x40020800
 8004074:	40020400 	.word	0x40020400
 8004078:	10110000 	.word	0x10110000
 800407c:	40020c00 	.word	0x40020c00

08004080 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	80fb      	strh	r3, [r7, #6]
 800408a:	460b      	mov	r3, r1
 800408c:	80bb      	strh	r3, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <playtone+0xf0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 800409a:	4b35      	ldr	r3, [pc, #212]	; (8004170 <playtone+0xf0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 80040a2:	4b33      	ldr	r3, [pc, #204]	; (8004170 <playtone+0xf0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fa59 	bl	8000564 <__aeabi_i2d>
 80040b2:	4603      	mov	r3, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	461a      	mov	r2, r3
 80040b8:	4623      	mov	r3, r4
 80040ba:	a12b      	add	r1, pc, #172	; (adr r1, 8004168 <playtone+0xe8>)
 80040bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c0:	f7fc fbe4 	bl	800088c <__aeabi_ddiv>
 80040c4:	4603      	mov	r3, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	4618      	mov	r0, r3
 80040ca:	4621      	mov	r1, r4
 80040cc:	f7fc fd8c 	bl	8000be8 <__aeabi_d2uiz>
 80040d0:	4603      	mov	r3, r0
 80040d2:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 80040d4:	4b26      	ldr	r3, [pc, #152]	; (8004170 <playtone+0xf0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2200      	movs	r2, #0
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <playtone+0xf0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	fb02 f203 	mul.w	r2, r2, r3
 80040ec:	4b20      	ldr	r3, [pc, #128]	; (8004170 <playtone+0xf0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4920      	ldr	r1, [pc, #128]	; (8004174 <playtone+0xf4>)
 80040f2:	fba1 1202 	umull	r1, r2, r1, r2
 80040f6:	0992      	lsrs	r2, r2, #6
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 80040fa:	8afb      	ldrh	r3, [r7, #22]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	fb02 f203 	mul.w	r2, r2, r3
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <playtone+0xf0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0a12      	lsrs	r2, r2, #8
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 800410a:	8abb      	ldrh	r3, [r7, #20]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	fb02 f203 	mul.w	r2, r2, r3
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <playtone+0xf0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0a12      	lsrs	r2, r2, #8
 8004118:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 800411a:	8a7b      	ldrh	r3, [r7, #18]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	fb02 f203 	mul.w	r2, r2, r3
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <playtone+0xf0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	0a12      	lsrs	r2, r2, #8
 8004128:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 800412a:	88bb      	ldrh	r3, [r7, #4]
 800412c:	4618      	mov	r0, r3
 800412e:	f001 fb85 	bl	800583c <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <playtone+0xf0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <playtone+0xf0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	22ff      	movs	r2, #255	; 0xff
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <playtone+0xf0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	8afa      	ldrh	r2, [r7, #22]
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <playtone+0xf0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	8aba      	ldrh	r2, [r7, #20]
 8004150:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <playtone+0xf0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	8a7a      	ldrh	r2, [r7, #18]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}
 8004162:	bf00      	nop
 8004164:	f3af 8000 	nop.w
 8004168:	00000000 	.word	0x00000000
 800416c:	412e8480 	.word	0x412e8480
 8004170:	20004814 	.word	0x20004814
 8004174:	51eb851f 	.word	0x51eb851f

08004178 <playtoneRTOS>:

void playtoneRTOS(uint16_t freq, uint16_t ms, uint8_t vol) {
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	80fb      	strh	r3, [r7, #6]
 8004182:	460b      	mov	r3, r1
 8004184:	80bb      	strh	r3, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <playtoneRTOS+0xf0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8004192:	4b35      	ldr	r3, [pc, #212]	; (8004268 <playtoneRTOS+0xf0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <playtoneRTOS+0xf0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc f9dd 	bl	8000564 <__aeabi_i2d>
 80041aa:	4603      	mov	r3, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	a12b      	add	r1, pc, #172	; (adr r1, 8004260 <playtoneRTOS+0xe8>)
 80041b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041b8:	f7fc fb68 	bl	800088c <__aeabi_ddiv>
 80041bc:	4603      	mov	r3, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	4618      	mov	r0, r3
 80041c2:	4621      	mov	r1, r4
 80041c4:	f7fc fd10 	bl	8000be8 <__aeabi_d2uiz>
 80041c8:	4603      	mov	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 80041cc:	4b26      	ldr	r3, [pc, #152]	; (8004268 <playtoneRTOS+0xf0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2200      	movs	r2, #0
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 80041d4:	4b24      	ldr	r3, [pc, #144]	; (8004268 <playtoneRTOS+0xf0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	fb02 f203 	mul.w	r2, r2, r3
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <playtoneRTOS+0xf0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4920      	ldr	r1, [pc, #128]	; (800426c <playtoneRTOS+0xf4>)
 80041ea:	fba1 1202 	umull	r1, r2, r1, r2
 80041ee:	0992      	lsrs	r2, r2, #6
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 80041f2:	8afb      	ldrh	r3, [r7, #22]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	fb02 f203 	mul.w	r2, r2, r3
 80041fa:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <playtoneRTOS+0xf0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	0a12      	lsrs	r2, r2, #8
 8004200:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8004202:	8abb      	ldrh	r3, [r7, #20]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	fb02 f203 	mul.w	r2, r2, r3
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <playtoneRTOS+0xf0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0a12      	lsrs	r2, r2, #8
 8004210:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8004212:	8a7b      	ldrh	r3, [r7, #18]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	fb02 f203 	mul.w	r2, r2, r3
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <playtoneRTOS+0xf0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0a12      	lsrs	r2, r2, #8
 8004220:	641a      	str	r2, [r3, #64]	; 0x40

    osDelay(ms);
 8004222:	88bb      	ldrh	r3, [r7, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	f00b fb75 	bl	800f914 <osDelay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 800422a:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <playtoneRTOS+0xf0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <playtoneRTOS+0xf0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	22ff      	movs	r2, #255	; 0xff
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <playtoneRTOS+0xf0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	8afa      	ldrh	r2, [r7, #22]
 8004240:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <playtoneRTOS+0xf0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	8aba      	ldrh	r2, [r7, #20]
 8004248:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <playtoneRTOS+0xf0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	8a7a      	ldrh	r2, [r7, #18]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd90      	pop	{r4, r7, pc}
 800425a:	bf00      	nop
 800425c:	f3af 8000 	nop.w
 8004260:	00000000 	.word	0x00000000
 8004264:	412e8480 	.word	0x412e8480
 8004268:	20004814 	.word	0x20004814
 800426c:	51eb851f 	.word	0x51eb851f

08004270 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
 800427a:	460b      	mov	r3, r1
 800427c:	71bb      	strb	r3, [r7, #6]
 800427e:	4613      	mov	r3, r2
 8004280:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <changeLed+0x38>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	79fa      	ldrb	r2, [r7, #7]
 8004288:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <changeLed+0x38>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	79ba      	ldrb	r2, [r7, #6]
 8004290:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <changeLed+0x38>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	797a      	ldrb	r2, [r7, #5]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40

}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20004814 	.word	0x20004814

080042ac <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80042b4:	f00d fd2a 	bl	8011d0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        //changeLed(0, 100, 0);
        osDelay(1000);
 80042b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042bc:	f00b fb2a 	bl	800f914 <osDelay>
        //changeLed(0, 0, 100);
        osDelay(1000);
 80042c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042c4:	f00b fb26 	bl	800f914 <osDelay>
        osDelay(1000);
 80042c8:	e7f6      	b.n	80042b8 <StartLedTask+0xc>
	...

080042cc <StartMusicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08e      	sub	sp, #56	; 0x38
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
    /* Infinite loop */

    uint16_t vol = 13; // 10
 80042d4:	230d      	movs	r3, #13
 80042d6:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t beatlength = 50; // determines tempo
 80042d8:	2332      	movs	r3, #50	; 0x32
 80042da:	847b      	strh	r3, [r7, #34]	; 0x22
    float beatseparationconstant = 0.3;
 80042dc:	4b79      	ldr	r3, [pc, #484]	; (80044c4 <StartMusicTask+0x1f8>)
 80042de:	61fb      	str	r3, [r7, #28]

    int a = 4; // part index
 80042e0:	2304      	movs	r3, #4
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
    int b = 0; // song index
 80042e4:	2300      	movs	r3, #0
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
    int c; // lyric index

    osEvent messagebox;
    uint16_t sounddelay;

    int ksp_playhead = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
    int ksp_total = 20;
 80042ec:	2314      	movs	r3, #20
 80042ee:	61bb      	str	r3, [r7, #24]

    for (;;) {
        if (is_soft_enabled()) {
 80042f0:	f7fe fe58 	bl	8002fa4 <is_soft_enabled>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01c      	beq.n	8004334 <StartMusicTask+0x68>
            messagebox = osMessageGet(BuzzerQueueHandle, 1000);
 80042fa:	4b73      	ldr	r3, [pc, #460]	; (80044c8 <StartMusicTask+0x1fc>)
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004306:	4618      	mov	r0, r3
 8004308:	f00b fb82 	bl	800fa10 <osMessageGet>
            if (messagebox.status && messagebox.value.v) {
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <StartMusicTask+0x24>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0eb      	beq.n	80042f0 <StartMusicTask+0x24>
                sounddelay = messagebox.value.v;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	82fb      	strh	r3, [r7, #22]
                playtoneRTOS(OPTIMAL_BUZZER_FREQ, sounddelay,
 800431c:	8afb      	ldrh	r3, [r7, #22]
 800431e:	2246      	movs	r2, #70	; 0x46
 8004320:	4619      	mov	r1, r3
 8004322:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004326:	f7ff ff27 	bl	8004178 <playtoneRTOS>
                        OPTIMAL_BUZZER_DUTY);
                osDelay(sounddelay);
 800432a:	8afb      	ldrh	r3, [r7, #22]
 800432c:	4618      	mov	r0, r3
 800432e:	f00b faf1 	bl	800f914 <osDelay>
 8004332:	e7dd      	b.n	80042f0 <StartMusicTask+0x24>
            }


        }
        else if (buzzer_setting == RICK){
 8004334:	4b65      	ldr	r3, [pc, #404]	; (80044cc <StartMusicTask+0x200>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b02      	cmp	r3, #2
 800433a:	f040 80a5 	bne.w	8004488 <StartMusicTask+0x1bc>
            uint16_t notelength;
            if (a == 1 || a == 2) {
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	2b01      	cmp	r3, #1
 8004342:	d002      	beq.n	800434a <StartMusicTask+0x7e>
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	2b02      	cmp	r3, #2
 8004348:	d125      	bne.n	8004396 <StartMusicTask+0xca>
                // intro
                notelength = beatlength * song1_intro_rhythmn[b];
 800434a:	4a61      	ldr	r2, [pc, #388]	; (80044d0 <StartMusicTask+0x204>)
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004352:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004354:	fb12 f303 	smulbb	r3, r2, r3
 8004358:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_intro_melody[b] > 0) {
 800435a:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <StartMusicTask+0x208>)
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <StartMusicTask+0xae>
                    playtoneRTOS(song1_intro_melody[b], notelength, vol);
 8004366:	4a5b      	ldr	r2, [pc, #364]	; (80044d4 <StartMusicTask+0x208>)
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800436e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff feff 	bl	8004178 <playtoneRTOS>
                }
                b++;
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	3301      	adds	r3, #1
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d966      	bls.n	8004454 <StartMusicTask+0x188>
                    a++;
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	3301      	adds	r3, #1
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 8004394:	e05e      	b.n	8004454 <StartMusicTask+0x188>
                }
            } else if (a == 3 || a == 5) {
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2b03      	cmp	r3, #3
 800439a:	d002      	beq.n	80043a2 <StartMusicTask+0xd6>
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d12a      	bne.n	80043f8 <StartMusicTask+0x12c>
                // verse
                notelength = beatlength * 2 * song1_verse1_rhythmn[b];
 80043a2:	4a4d      	ldr	r2, [pc, #308]	; (80044d8 <StartMusicTask+0x20c>)
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80043ac:	fb12 f303 	smulbb	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_verse1_melody[b] > 0) {
 80043b6:	4a49      	ldr	r2, [pc, #292]	; (80044dc <StartMusicTask+0x210>)
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00c      	beq.n	80043dc <StartMusicTask+0x110>
                    playtoneRTOS(song1_verse1_melody[b], notelength, vol);
 80043c2:	4a46      	ldr	r2, [pc, #280]	; (80044dc <StartMusicTask+0x210>)
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fed1 	bl	8004178 <playtoneRTOS>
                    c++;
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	3301      	adds	r3, #1
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	3301      	adds	r3, #1
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	2b3e      	cmp	r3, #62	; 0x3e
 80043e6:	d935      	bls.n	8004454 <StartMusicTask+0x188>
                    a++;
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	3301      	adds	r3, #1
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 80043f6:	e02d      	b.n	8004454 <StartMusicTask+0x188>
                }
            } else if (a == 4 || a == 6) {
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d002      	beq.n	8004404 <StartMusicTask+0x138>
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	2b06      	cmp	r3, #6
 8004402:	d127      	bne.n	8004454 <StartMusicTask+0x188>
                // chorus
                notelength = beatlength * song1_chorus_rhythmn[b];
 8004404:	4a36      	ldr	r2, [pc, #216]	; (80044e0 <StartMusicTask+0x214>)
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800440c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800440e:	fb12 f303 	smulbb	r3, r2, r3
 8004412:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_chorus_melody[b] > 0) {
 8004414:	4a33      	ldr	r2, [pc, #204]	; (80044e4 <StartMusicTask+0x218>)
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00c      	beq.n	800443a <StartMusicTask+0x16e>
                    playtoneRTOS(song1_chorus_melody[b], notelength, vol);
 8004420:	4a30      	ldr	r2, [pc, #192]	; (80044e4 <StartMusicTask+0x218>)
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fea2 	bl	8004178 <playtoneRTOS>
                    c++;
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	3301      	adds	r3, #1
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	3301      	adds	r3, #1
 800443e:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_chorus_melody) / sizeof(uint16_t)) {
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	2b3a      	cmp	r3, #58	; 0x3a
 8004444:	d906      	bls.n	8004454 <StartMusicTask+0x188>
                    a++;
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004448:	3301      	adds	r3, #1
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            osDelay(notelength);
 8004454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004456:	4618      	mov	r0, r3
 8004458:	f00b fa5c 	bl	800f914 <osDelay>
            //noTone(piezo);

            osDelay(notelength * beatseparationconstant);
 800445c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004466:	edd7 7a07 	vldr	s15, [r7, #28]
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004472:	ee17 0a90 	vmov	r0, s15
 8004476:	f00b fa4d 	bl	800f914 <osDelay>
            if (a == 7) { // loop back around to beginning of song
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	2b07      	cmp	r3, #7
 800447e:	f47f af37 	bne.w	80042f0 <StartMusicTask+0x24>
                a = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
 8004486:	e733      	b.n	80042f0 <StartMusicTask+0x24>
            }
        }
        else if (buzzer_setting == KSP_MAIN) {
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <StartMusicTask+0x200>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	f47f af2f 	bne.w	80042f0 <StartMusicTask+0x24>
            playtoneRTOS(ksp_tunes[ksp_playhead], ksp_delays[ksp_playhead], vol);
 8004492:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <StartMusicTask+0x21c>)
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800449a:	4a14      	ldr	r2, [pc, #80]	; (80044ec <StartMusicTask+0x220>)
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7ff fe66 	bl	8004178 <playtoneRTOS>
            ksp_playhead = (ksp_playhead + 1) % ksp_total;
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	3301      	adds	r3, #1
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	fb93 f2f2 	sdiv	r2, r3, r2
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	fb01 f202 	mul.w	r2, r1, r2
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
        if (is_soft_enabled()) {
 80044c0:	e716      	b.n	80042f0 <StartMusicTask+0x24>
 80044c2:	bf00      	nop
 80044c4:	3e99999a 	.word	0x3e99999a
 80044c8:	200048f4 	.word	0x200048f4
 80044cc:	20000001 	.word	0x20000001
 80044d0:	20000020 	.word	0x20000020
 80044d4:	20000004 	.word	0x20000004
 80044d8:	200000bc 	.word	0x200000bc
 80044dc:	2000003c 	.word	0x2000003c
 80044e0:	200001b4 	.word	0x200001b4
 80044e4:	2000013c 	.word	0x2000013c
 80044e8:	2000022c 	.word	0x2000022c
 80044ec:	20000254 	.word	0x20000254

080044f0 <startStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStateMachine */
void startStateMachine(void const * argument)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStateMachine */

    uint32_t launchTime = osKernelSysTick();
 80044f8:	f00b f9b0 	bl	800f85c <osKernelSysTick>
 80044fc:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t currentTime = osKernelSysTick();
 80044fe:	f00b f9ad 	bl	800f85c <osKernelSysTick>
 8004502:	6238      	str	r0, [r7, #32]
    uint32_t timeSinceLaunch = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
    Servo deployServo;
    servo_init(&deployServo, &htim2, &htim2.Instance->CCR4);
 8004508:	4bbd      	ldr	r3, [pc, #756]	; (8004800 <startStateMachine+0x310>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004510:	f107 0308 	add.w	r3, r7, #8
 8004514:	49ba      	ldr	r1, [pc, #744]	; (8004800 <startStateMachine+0x310>)
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fade 	bl	8001ad8 <servo_init>
    servo_disable(&deployServo);
 800451c:	f107 0308 	add.w	r3, r7, #8
 8004520:	4618      	mov	r0, r3
 8004522:	f7fd fb0d 	bl	8001b40 <servo_disable>

    /* Infinite loop */
    for (;;) {

        currentTime = osKernelSysTick();
 8004526:	f00b f999 	bl	800f85c <osKernelSysTick>
 800452a:	6238      	str	r0, [r7, #32]
        timeSinceLaunch = currentTime - launchTime;
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	61fb      	str	r3, [r7, #28]

        if (is_soft_enabled()) {
 8004534:	f7fe fd36 	bl	8002fa4 <is_soft_enabled>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8133 	beq.w	80047a6 <startStateMachine+0x2b6>
            switch (flight_state) {
 8004540:	4bb0      	ldr	r3, [pc, #704]	; (8004804 <startStateMachine+0x314>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b07      	cmp	r3, #7
 8004546:	f200 8153 	bhi.w	80047f0 <startStateMachine+0x300>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <startStateMachine+0x60>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004571 	.word	0x08004571
 8004554:	080045bd 	.word	0x080045bd
 8004558:	08004635 	.word	0x08004635
 800455c:	0800467d 	.word	0x0800467d
 8004560:	080046d1 	.word	0x080046d1
 8004564:	08004715 	.word	0x08004715
 8004568:	0800477f 	.word	0x0800477f
 800456c:	0800479f 	.word	0x0800479f
            case FLIGHT_ERROR:
                // be annoying TODO
                buzzer_beep(BEEP_LONG);
 8004570:	2032      	movs	r0, #50	; 0x32
 8004572:	f7fe fd51 	bl	8003018 <buzzer_beep>

                // exit the state once we're no longer armed,
                // if battery voltage is in good state
                // and if there's a squib connected if one is necessary
                changeLed(0, 0, 0);
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	2000      	movs	r0, #0
 800457c:	f7ff fe78 	bl	8004270 <changeLed>
                if (!is_armed() && get_battery_voltage() > BATTERY_EMPTY_LIMIT) {
 8004580:	f7fe fce8 	bl	8002f54 <is_armed>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 8127 	bne.w	80047da <startStateMachine+0x2ea>
 800458c:	f7fe fcb0 	bl	8002ef0 <get_battery_voltage>
 8004590:	eeb0 7a40 	vmov.f32	s14, s0
 8004594:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8004598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	dc00      	bgt.n	80045a4 <startStateMachine+0xb4>
                    buzzer_beep(BEEP_SHORT);
                    buzzer_beep(BEEP_SHORT);
                    //set_status_led(ON);
                    flight_state = IDLE;
                }
                break;
 80045a2:	e11a      	b.n	80047da <startStateMachine+0x2ea>
                    buzzer_clear_queue();
 80045a4:	f7fe fd64 	bl	8003070 <buzzer_clear_queue>
                    buzzer_beep(BEEP_SHORT);
 80045a8:	200c      	movs	r0, #12
 80045aa:	f7fe fd35 	bl	8003018 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80045ae:	200c      	movs	r0, #12
 80045b0:	f7fe fd32 	bl	8003018 <buzzer_beep>
                    flight_state = IDLE;
 80045b4:	4b93      	ldr	r3, [pc, #588]	; (8004804 <startStateMachine+0x314>)
 80045b6:	2202      	movs	r2, #2
 80045b8:	701a      	strb	r2, [r3, #0]
                break;
 80045ba:	e10e      	b.n	80047da <startStateMachine+0x2ea>

            case SYSTEMS_CHECK:
                // this state is the entry state, it performs startup checking of some peripherals
                changeLed(100, 0, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	2064      	movs	r0, #100	; 0x64
 80045c2:	f7ff fe55 	bl	8004270 <changeLed>
                apply_complementary = 1;
 80045c6:	4b90      	ldr	r3, [pc, #576]	; (8004808 <startStateMachine+0x318>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
                // close the servo if necessary
                servo_writeangle(&deployServo, SERVO_CLOSED_POSITION);
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fa92 	bl	8001afc <servo_writeangle>

                float vbat = get_battery_voltage();
 80045d8:	f7fe fc8a 	bl	8002ef0 <get_battery_voltage>
 80045dc:	ed87 0a06 	vstr	s0, [r7, #24]

                // enable power to camera/video transmitter
                if (vbat > 7.4) {
 80045e0:	69b8      	ldr	r0, [r7, #24]
 80045e2:	f7fb ffd1 	bl	8000588 <__aeabi_f2d>
 80045e6:	a384      	add	r3, pc, #528	; (adr r3, 80047f8 <startStateMachine+0x308>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fc fab4 	bl	8000b58 <__aeabi_dcmpgt>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <startStateMachine+0x10c>
                    restart_camera_with_recording();
 80045f6:	f7fe fd95 	bl	8003124 <restart_camera_with_recording>
 80045fa:	e001      	b.n	8004600 <startStateMachine+0x110>
                } else {
                    disable_camera();
 80045fc:	f7fe fd78 	bl	80030f0 <disable_camera>
                }

                // check if the battery is empty
                if (vbat <= BATTERY_EMPTY_LIMIT) {
 8004600:	edd7 7a06 	vldr	s15, [r7, #24]
 8004604:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	d803      	bhi.n	800461a <startStateMachine+0x12a>
                    flight_state = FLIGHT_ERROR;
 8004612:	4b7c      	ldr	r3, [pc, #496]	; (8004804 <startStateMachine+0x314>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
                    break;
 8004618:	e0ea      	b.n	80047f0 <startStateMachine+0x300>
                }

                // if everything's okay, go into idle
                buzzer_beep(BEEP_SHORT);
 800461a:	200c      	movs	r0, #12
 800461c:	f7fe fcfc 	bl	8003018 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 8004620:	200c      	movs	r0, #12
 8004622:	f7fe fcf9 	bl	8003018 <buzzer_beep>
                set_status_led(1);
 8004626:	2001      	movs	r0, #1
 8004628:	f7fe fd8e 	bl	8003148 <set_status_led>
                flight_state = IDLE;
 800462c:	4b75      	ldr	r3, [pc, #468]	; (8004804 <startStateMachine+0x314>)
 800462e:	2202      	movs	r2, #2
 8004630:	701a      	strb	r2, [r3, #0]
                break;
 8004632:	e0dd      	b.n	80047f0 <startStateMachine+0x300>

            case IDLE:
                changeLed(0, 100, 0);
 8004634:	2200      	movs	r2, #0
 8004636:	2164      	movs	r1, #100	; 0x64
 8004638:	2000      	movs	r0, #0
 800463a:	f7ff fe19 	bl	8004270 <changeLed>
                apply_complementary = 1;
 800463e:	4b72      	ldr	r3, [pc, #456]	; (8004808 <startStateMachine+0x318>)
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
                if (is_armed()) {
 8004644:	f7fe fc86 	bl	8002f54 <is_armed>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <startStateMachine+0x166>
                    flight_state = FLIGHT_ERROR;
 800464e:	4b6d      	ldr	r3, [pc, #436]	; (8004804 <startStateMachine+0x314>)
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
                    break;
 8004654:	e0cc      	b.n	80047f0 <startStateMachine+0x300>
                }

                if (is_breakwire_connected()) {
 8004656:	f7fe fcb1 	bl	8002fbc <is_breakwire_connected>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80be 	beq.w	80047de <startStateMachine+0x2ee>
                    buzzer_beep(BEEP_SHORT);
 8004662:	200c      	movs	r0, #12
 8004664:	f7fe fcd8 	bl	8003018 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 8004668:	200c      	movs	r0, #12
 800466a:	f7fe fcd5 	bl	8003018 <buzzer_beep>
                    set_status_led(0);
 800466e:	2000      	movs	r0, #0
 8004670:	f7fe fd6a 	bl	8003148 <set_status_led>
                    flight_state = PREPARATION;
 8004674:	4b63      	ldr	r3, [pc, #396]	; (8004804 <startStateMachine+0x314>)
 8004676:	2203      	movs	r2, #3
 8004678:	701a      	strb	r2, [r3, #0]
                    break;
 800467a:	e0b9      	b.n	80047f0 <startStateMachine+0x300>
                }
                break;

            case PREPARATION:
                changeLed(0, 0, 100);
 800467c:	2264      	movs	r2, #100	; 0x64
 800467e:	2100      	movs	r1, #0
 8004680:	2000      	movs	r0, #0
 8004682:	f7ff fdf5 	bl	8004270 <changeLed>
                apply_complementary = 1;
 8004686:	4b60      	ldr	r3, [pc, #384]	; (8004808 <startStateMachine+0x318>)
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
                if (is_breakwire_broken_debounce()) {
 800468c:	f7fe fca8 	bl	8002fe0 <is_breakwire_broken_debounce>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <startStateMachine+0x1ba>
                    buzzer_beep(BEEP_LONG);
 8004696:	2032      	movs	r0, #50	; 0x32
 8004698:	f7fe fcbe 	bl	8003018 <buzzer_beep>
                    set_status_led(1);
 800469c:	2001      	movs	r0, #1
 800469e:	f7fe fd53 	bl	8003148 <set_status_led>
                    flight_state = IDLE;
 80046a2:	4b58      	ldr	r3, [pc, #352]	; (8004804 <startStateMachine+0x314>)
 80046a4:	2202      	movs	r2, #2
 80046a6:	701a      	strb	r2, [r3, #0]
                    break;
 80046a8:	e0a2      	b.n	80047f0 <startStateMachine+0x300>
                }

                // check arming switch with debouncing
                if (is_armed_debounce()) {
 80046aa:	f7fe fc5f 	bl	8002f6c <is_armed_debounce>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8096 	beq.w	80047e2 <startStateMachine+0x2f2>
                    buzzer_beep(BEEP_SHORT);
 80046b6:	200c      	movs	r0, #12
 80046b8:	f7fe fcae 	bl	8003018 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80046bc:	200c      	movs	r0, #12
 80046be:	f7fe fcab 	bl	8003018 <buzzer_beep>
                    set_status_led(1);
 80046c2:	2001      	movs	r0, #1
 80046c4:	f7fe fd40 	bl	8003148 <set_status_led>
                    flight_state = ARMED;
 80046c8:	4b4e      	ldr	r3, [pc, #312]	; (8004804 <startStateMachine+0x314>)
 80046ca:	2204      	movs	r2, #4
 80046cc:	701a      	strb	r2, [r3, #0]
                }
                break;
 80046ce:	e088      	b.n	80047e2 <startStateMachine+0x2f2>

            case ARMED:
                changeLed(100, 100, 0);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2164      	movs	r1, #100	; 0x64
 80046d4:	2064      	movs	r0, #100	; 0x64
 80046d6:	f7ff fdcb 	bl	8004270 <changeLed>
                apply_complementary = 1;
 80046da:	4b4b      	ldr	r3, [pc, #300]	; (8004808 <startStateMachine+0x318>)
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
                if (!is_armed()) {
 80046e0:	f7fe fc38 	bl	8002f54 <is_armed>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <startStateMachine+0x20e>
                    buzzer_beep(BEEP_LONG);
 80046ea:	2032      	movs	r0, #50	; 0x32
 80046ec:	f7fe fc94 	bl	8003018 <buzzer_beep>
                    set_status_led(0);
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7fe fd29 	bl	8003148 <set_status_led>
                    flight_state = PREPARATION;
 80046f6:	4b43      	ldr	r3, [pc, #268]	; (8004804 <startStateMachine+0x314>)
 80046f8:	2203      	movs	r2, #3
 80046fa:	701a      	strb	r2, [r3, #0]
                    break;
 80046fc:	e078      	b.n	80047f0 <startStateMachine+0x300>
                }

                if (is_breakwire_broken_debounce()) {
 80046fe:	f7fe fc6f 	bl	8002fe0 <is_breakwire_broken_debounce>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d06e      	beq.n	80047e6 <startStateMachine+0x2f6>
                    //reset_timer();

                    launchTime = currentTime;
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	627b      	str	r3, [r7, #36]	; 0x24

                    //set_launch_asserted(ON);
                    flight_state = LAUNCHED;
 800470c:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <startStateMachine+0x314>)
 800470e:	2205      	movs	r2, #5
 8004710:	701a      	strb	r2, [r3, #0]
                    break;
 8004712:	e06d      	b.n	80047f0 <startStateMachine+0x300>
                }
                break;

            case LAUNCHED:
                changeLed(100, 100, 100);
 8004714:	2264      	movs	r2, #100	; 0x64
 8004716:	2164      	movs	r1, #100	; 0x64
 8004718:	2064      	movs	r0, #100	; 0x64
 800471a:	f7ff fda9 	bl	8004270 <changeLed>
                apply_complementary = 0;
 800471e:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <startStateMachine+0x318>)
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
                buzzer_beep(BEEP_SHORT);
 8004724:	200c      	movs	r0, #12
 8004726:	f7fe fc77 	bl	8003018 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 800472a:	200c      	movs	r0, #12
 800472c:	f7fe fc74 	bl	8003018 <buzzer_beep>

                if (timeSinceLaunch >= MAX_DEPLOY_TIME
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f243 62af 	movw	r2, #13999	; 0x36af
 8004736:	4293      	cmp	r3, r2
 8004738:	d809      	bhi.n	800474e <startStateMachine+0x25e>
                        || (timeSinceLaunch >= MIN_DEPLOY_TIME
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004740:	4293      	cmp	r3, r2
 8004742:	d952      	bls.n	80047ea <startStateMachine+0x2fa>
                                && is_vote_asserted())) {
 8004744:	f7fe fd0b 	bl	800315e <is_vote_asserted>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d04d      	beq.n	80047ea <startStateMachine+0x2fa>

                    if (is_armed()) {
 800474e:	f7fe fc01 	bl	8002f54 <is_armed>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <startStateMachine+0x286>
                        servo_writeangle(&deployServo, SERVO_DEPLOY_POSITION);
 8004758:	f107 0308 	add.w	r3, r7, #8
 800475c:	21b4      	movs	r1, #180	; 0xb4
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd f9cc 	bl	8001afc <servo_writeangle>

                        last_logged_deploy_time = timeSinceLaunch;
 8004764:	4a29      	ldr	r2, [pc, #164]	; (800480c <startStateMachine+0x31c>)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	6013      	str	r3, [r2, #0]
                        buzzer_clear_queue();
 800476a:	f7fe fc81 	bl	8003070 <buzzer_clear_queue>
                        flight_state = DEPLOYED;
 800476e:	4b25      	ldr	r3, [pc, #148]	; (8004804 <startStateMachine+0x314>)
 8004770:	2206      	movs	r2, #6
 8004772:	701a      	strb	r2, [r3, #0]
                        break;
 8004774:	e03c      	b.n	80047f0 <startStateMachine+0x300>
                    } else { // go back to systems check if rearmed
                        flight_state = SYSTEMS_CHECK;
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <startStateMachine+0x314>)
 8004778:	2201      	movs	r2, #1
 800477a:	701a      	strb	r2, [r3, #0]
                        break;
 800477c:	e038      	b.n	80047f0 <startStateMachine+0x300>
                    }
                }
                break;

            case DEPLOYED:
                changeLed(100, 0, 100);
 800477e:	2264      	movs	r2, #100	; 0x64
 8004780:	2100      	movs	r1, #0
 8004782:	2064      	movs	r0, #100	; 0x64
 8004784:	f7ff fd74 	bl	8004270 <changeLed>
                buzzer_beep(BEEP_LONG);
 8004788:	2032      	movs	r0, #50	; 0x32
 800478a:	f7fe fc45 	bl	8003018 <buzzer_beep>

                if (timeSinceLaunch > 240000) {
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <startStateMachine+0x320>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d92b      	bls.n	80047ee <startStateMachine+0x2fe>
                    flight_state = LANDED;
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <startStateMachine+0x314>)
 8004798:	2207      	movs	r2, #7
 800479a:	701a      	strb	r2, [r3, #0]
                }

                break;
 800479c:	e027      	b.n	80047ee <startStateMachine+0x2fe>

            case LANDED:
                disable_camera();
 800479e:	f7fe fca7 	bl	80030f0 <disable_camera>
                break;
 80047a2:	bf00      	nop
 80047a4:	e024      	b.n	80047f0 <startStateMachine+0x300>
            }
        } else {
            // when "soft on/off switch" is off. Play some music and disable everything
            apply_complementary = 1;
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <startStateMachine+0x318>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
            changeLed(100, 0, 0);
 80047ac:	2200      	movs	r2, #0
 80047ae:	2100      	movs	r1, #0
 80047b0:	2064      	movs	r0, #100	; 0x64
 80047b2:	f7ff fd5d 	bl	8004270 <changeLed>
            buzzer_setting = KSP_MAIN;
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <startStateMachine+0x324>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]
            flight_state = SYSTEMS_CHECK;
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <startStateMachine+0x314>)
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
            servo_disable(&deployServo);
 80047c2:	f107 0308 	add.w	r3, r7, #8
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd f9ba 	bl	8001b40 <servo_disable>
            baro.basepressure = baro.pressure_Pa; // Continously "zero out" altitude when soft off
 80047cc:	4b12      	ldr	r3, [pc, #72]	; (8004818 <startStateMachine+0x328>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	4a11      	ldr	r2, [pc, #68]	; (8004818 <startStateMachine+0x328>)
 80047d2:	6313      	str	r3, [r2, #48]	; 0x30
            disable_camera();
 80047d4:	f7fe fc8c 	bl	80030f0 <disable_camera>
 80047d8:	e00a      	b.n	80047f0 <startStateMachine+0x300>
                break;
 80047da:	bf00      	nop
 80047dc:	e008      	b.n	80047f0 <startStateMachine+0x300>
                break;
 80047de:	bf00      	nop
 80047e0:	e006      	b.n	80047f0 <startStateMachine+0x300>
                break;
 80047e2:	bf00      	nop
 80047e4:	e004      	b.n	80047f0 <startStateMachine+0x300>
                break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <startStateMachine+0x300>
                break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <startStateMachine+0x300>
                break;
 80047ee:	bf00      	nop
        }
        osDelay(1);
 80047f0:	2001      	movs	r0, #1
 80047f2:	f00b f88f 	bl	800f914 <osDelay>
        currentTime = osKernelSysTick();
 80047f6:	e696      	b.n	8004526 <startStateMachine+0x36>
 80047f8:	9999999a 	.word	0x9999999a
 80047fc:	401d9999 	.word	0x401d9999
 8004800:	200049cc 	.word	0x200049cc
 8004804:	20000000 	.word	0x20000000
 8004808:	2000027c 	.word	0x2000027c
 800480c:	20000878 	.word	0x20000878
 8004810:	0003a980 	.word	0x0003a980
 8004814:	20000001 	.word	0x20000001
 8004818:	200048f8 	.word	0x200048f8

0800481c <StartTelemTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemTask */
void StartTelemTask(void const * argument)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b0ac      	sub	sp, #176	; 0xb0
 8004820:	af02      	add	r7, sp, #8
 8004822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemTask */
    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8004824:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482c:	4a6b      	ldr	r2, [pc, #428]	; (80049dc <StartTelemTask+0x1c0>)
 800482e:	496c      	ldr	r1, [pc, #432]	; (80049e0 <StartTelemTask+0x1c4>)
 8004830:	f7fd f9ea 	bl	8001c08 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8004834:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800483c:	4969      	ldr	r1, [pc, #420]	; (80049e4 <StartTelemTask+0x1c8>)
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd fa42 	bl	8001cc8 <sxSetDio1Pin>

    //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
    SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 8004844:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004848:	22e0      	movs	r2, #224	; 0xe0
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f7fd fa8f 	bl	8001d70 <SetTxParams>
    osDelay(3);
 8004852:	2003      	movs	r0, #3
 8004854:	f00b f85e 	bl	800f914 <osDelay>

    //lsm6dso imu;
    //uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,SPI2_NSS_Pin);

    uint32_t counter = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    TLM_dec.packet_type = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    TLM_dec.flight_state = 4;
 8004864:	2304      	movs	r3, #4
 8004866:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    TLM_dec.is_playing_music = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    TLM_dec.is_data_logging = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    TLM_dec.pin_states = 0b00011011;
 8004876:	231b      	movs	r3, #27
 8004878:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    TLM_dec.servo_state = 3;
 800487c:	2303      	movs	r3, #3
 800487e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    TLM_dec.vbat = 7.283;
 8004882:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <StartTelemTask+0x1cc>)
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
    TLM_dec.systick = 1232432;
 8004886:	4b59      	ldr	r3, [pc, #356]	; (80049ec <StartTelemTask+0x1d0>)
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
    TLM_dec.orientation_quat[0] = 0.143123;
 800488a:	4b59      	ldr	r3, [pc, #356]	; (80049f0 <StartTelemTask+0x1d4>)
 800488c:	63bb      	str	r3, [r7, #56]	; 0x38
    TLM_dec.acc[2] = 1337;
 800488e:	f240 5339 	movw	r3, #1337	; 0x539
 8004892:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    TLM_dec.gyro[2] = -21;
 8004896:	f64f 73eb 	movw	r3, #65515	; 0xffeb
 800489a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    TLM_dec.baro = 90001.623;
 800489e:	4b55      	ldr	r3, [pc, #340]	; (80049f4 <StartTelemTask+0x1d8>)
 80048a0:	657b      	str	r3, [r7, #84]	; 0x54
    TLM_dec.temp = 63.4;
 80048a2:	4b55      	ldr	r3, [pc, #340]	; (80049f8 <StartTelemTask+0x1dc>)
 80048a4:	65bb      	str	r3, [r7, #88]	; 0x58
    TLM_dec.vertical_velocity = 180;
 80048a6:	4b55      	ldr	r3, [pc, #340]	; (80049fc <StartTelemTask+0x1e0>)
 80048a8:	663b      	str	r3, [r7, #96]	; 0x60
    TLM_dec.altitude = 1321;
 80048aa:	4b55      	ldr	r3, [pc, #340]	; (8004a00 <StartTelemTask+0x1e4>)
 80048ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    TLM_dec.debug = 1337;
 80048ae:	f240 5339 	movw	r3, #1337	; 0x539
 80048b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    TLM_dec.ranging = 15212;
 80048b6:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <StartTelemTask+0x1e8>)
 80048b8:	66bb      	str	r3, [r7, #104]	; 0x68

    encode_TLM(&TLM_dec, &TLM_enc);
 80048ba:	f107 0208 	add.w	r2, r7, #8
 80048be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fd fc27 	bl	8002118 <encode_TLM>

    WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 80048ca:	f107 0208 	add.w	r2, r7, #8
 80048ce:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80048d2:	231f      	movs	r3, #31
 80048d4:	2100      	movs	r1, #0
 80048d6:	f7fd fac4 	bl	8001e62 <WriteBuffer>
    osDelay(1);
 80048da:	2001      	movs	r0, #1
 80048dc:	f00b f81a 	bl	800f914 <osDelay>

    SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 80048e0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80048e4:	2300      	movs	r3, #0
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2300      	movs	r3, #0
 80048ea:	2201      	movs	r2, #1
 80048ec:	2101      	movs	r1, #1
 80048ee:	f7fd fb21 	bl	8001f34 <SetDioIrqParams>

    osDelay(3);
 80048f2:	2003      	movs	r0, #3
 80048f4:	f00b f80e 	bl	800f914 <osDelay>

    uint32_t lasttime = HAL_GetTick();
 80048f8:	f000 ff94 	bl	8005824 <HAL_GetTick>
 80048fc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    uint32_t nowtime = HAL_GetTick();
 8004900:	f000 ff90 	bl	8005824 <HAL_GetTick>
 8004904:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        //changeLed(0, 0, 100);
        //nowtime = HAL_GetTick();
        //dt = (nowtime - lasttime) / 1000.0;
        //lasttime = nowtime;

        counter++;
 8004908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800490c:	3301      	adds	r3, #1
 800490e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        TLM_dec.vbat = get_battery_voltage();
 8004912:	f7fe faed 	bl	8002ef0 <get_battery_voltage>
 8004916:	eef0 7a40 	vmov.f32	s15, s0
 800491a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        TLM_dec.systick = osKernelSysTick();
 800491e:	f00a ff9d 	bl	800f85c <osKernelSysTick>
 8004922:	4603      	mov	r3, r0
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
        TLM_dec.acc[0] = imu.rawAcc[0];
 8004926:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <StartTelemTask+0x1ec>)
 8004928:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800492c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        TLM_dec.acc[1] = imu.rawAcc[1];
 8004930:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <StartTelemTask+0x1ec>)
 8004932:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004936:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        TLM_dec.acc[2] = imu.rawAcc[2];
 800493a:	4b33      	ldr	r3, [pc, #204]	; (8004a08 <StartTelemTask+0x1ec>)
 800493c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004940:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        TLM_dec.gyro[0] = imu.rawGyro[0];
 8004944:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <StartTelemTask+0x1ec>)
 8004946:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800494a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        TLM_dec.gyro[1] = imu.rawGyro[1];
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <StartTelemTask+0x1ec>)
 8004950:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004954:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        TLM_dec.gyro[2] = imu.rawGyro[2];
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <StartTelemTask+0x1ec>)
 800495a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800495e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        TLM_dec.orientation_quat[0] = ori.orientationQuat.w;
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <StartTelemTask+0x1f0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
        TLM_dec.orientation_quat[1] = ori.orientationQuat.v[0];
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <StartTelemTask+0x1f0>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
        TLM_dec.orientation_quat[2] = ori.orientationQuat.v[1];
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <StartTelemTask+0x1f0>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	643b      	str	r3, [r7, #64]	; 0x40
        TLM_dec.orientation_quat[3] = ori.orientationQuat.v[2];
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <StartTelemTask+0x1f0>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
        // SPL06_Read(&baro);
        TLM_dec.baro = baro.pressure_Pa;
 800497a:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <StartTelemTask+0x1f4>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	657b      	str	r3, [r7, #84]	; 0x54
        TLM_dec.temp = baro.temperature_C;
 8004980:	4b23      	ldr	r3, [pc, #140]	; (8004a10 <StartTelemTask+0x1f4>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	65bb      	str	r3, [r7, #88]	; 0x58
        TLM_dec.altitude = baro.altitude;
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <StartTelemTask+0x1f4>)
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	65fb      	str	r3, [r7, #92]	; 0x5c
        //        data[1], data[2], data[3]);
        //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
        //CDC_Transmit_FS((uint8_t*) printBuffer,
        //        MIN(strlen(printBuffer), 128));

        encode_TLM(&TLM_dec, &TLM_enc);
 800498c:	f107 0208 	add.w	r2, r7, #8
 8004990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f7fd fbbe 	bl	8002118 <encode_TLM>
        WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 800499c:	f107 0208 	add.w	r2, r7, #8
 80049a0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80049a4:	231f      	movs	r3, #31
 80049a6:	2100      	movs	r1, #0
 80049a8:	f7fd fa5b 	bl	8001e62 <WriteBuffer>
        //WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
        osDelay(1);
 80049ac:	2001      	movs	r0, #1
 80049ae:	f00a ffb1 	bl	800f914 <osDelay>
        ClrIrqStatus(&radio, 1); // clear txdone irq
 80049b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80049b6:	2101      	movs	r1, #1
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fd faf5 	bl	8001fa8 <ClrIrqStatus>
        osDelay(1);
 80049be:	2001      	movs	r0, #1
 80049c0:	f00a ffa8 	bl	800f914 <osDelay>
        SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 80049c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80049c8:	2232      	movs	r2, #50	; 0x32
 80049ca:	2102      	movs	r1, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fd fb06 	bl	8001fde <SetTx>


        osDelay(20);
 80049d2:	2014      	movs	r0, #20
 80049d4:	f00a ff9e 	bl	800f914 <osDelay>
        counter++;
 80049d8:	e796      	b.n	8004908 <StartTelemTask+0xec>
 80049da:	bf00      	nop
 80049dc:	40020000 	.word	0x40020000
 80049e0:	20004854 	.word	0x20004854
 80049e4:	40020800 	.word	0x40020800
 80049e8:	40e90e56 	.word	0x40e90e56
 80049ec:	0012ce30 	.word	0x0012ce30
 80049f0:	3e128ed6 	.word	0x3e128ed6
 80049f4:	47afc8d0 	.word	0x47afc8d0
 80049f8:	427d999a 	.word	0x427d999a
 80049fc:	43340000 	.word	0x43340000
 8004a00:	44a52000 	.word	0x44a52000
 8004a04:	466db000 	.word	0x466db000
 8004a08:	20004730 	.word	0x20004730
 8004a0c:	200045e8 	.word	0x200045e8
 8004a10:	200048f8 	.word	0x200048f8

08004a14 <StartBaroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBaroTask */
void StartBaroTask(void const * argument)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBaroTask */
  /* Infinite loop */
    uint32_t counter = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
    for (;;) {
        float dt = ((float) __HAL_TIM_GET_COUNTER(&htim6))/1000000;
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <StartBaroTask+0x74>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a2e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004a8c <StartBaroTask+0x78>
 8004a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a36:	edc7 7a02 	vstr	s15, [r7, #8]
        __HAL_TIM_SET_COUNTER(&htim6,0);
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <StartBaroTask+0x74>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
        orientation_setGyro(&ori, imu.gyroRPS);
 8004a42:	4913      	ldr	r1, [pc, #76]	; (8004a90 <StartBaroTask+0x7c>)
 8004a44:	4813      	ldr	r0, [pc, #76]	; (8004a94 <StartBaroTask+0x80>)
 8004a46:	f000 f926 	bl	8004c96 <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 8004a4a:	4913      	ldr	r1, [pc, #76]	; (8004a98 <StartBaroTask+0x84>)
 8004a4c:	4811      	ldr	r0, [pc, #68]	; (8004a94 <StartBaroTask+0x80>)
 8004a4e:	f000 f939 	bl	8004cc4 <orientation_setAcc>
        orientation_update(&ori, dt, apply_complementary);
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <StartBaroTask+0x88>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	ed97 0a02 	vldr	s0, [r7, #8]
 8004a5c:	480d      	ldr	r0, [pc, #52]	; (8004a94 <StartBaroTask+0x80>)
 8004a5e:	f000 f94b 	bl	8004cf8 <orientation_update>
        if (counter % 50 == 0) {
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <StartBaroTask+0x8c>)
 8004a66:	fba3 1302 	umull	r1, r3, r3, r2
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	2132      	movs	r1, #50	; 0x32
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <StartBaroTask+0x6a>
            SPL06_Read(&baro);
 8004a78:	480a      	ldr	r0, [pc, #40]	; (8004aa4 <StartBaroTask+0x90>)
 8004a7a:	f7fc ff43 	bl	8001904 <SPL06_Read>
        }
        osDelay(1);
 8004a7e:	2001      	movs	r0, #1
 8004a80:	f00a ff48 	bl	800f914 <osDelay>
    for (;;) {
 8004a84:	e7cc      	b.n	8004a20 <StartBaroTask+0xc>
 8004a86:	bf00      	nop
 8004a88:	20004930 	.word	0x20004930
 8004a8c:	49742400 	.word	0x49742400
 8004a90:	20004768 	.word	0x20004768
 8004a94:	200045e8 	.word	0x200045e8
 8004a98:	20004794 	.word	0x20004794
 8004a9c:	2000027c 	.word	0x2000027c
 8004aa0:	51eb851f 	.word	0x51eb851f
 8004aa4:	200048f8 	.word	0x200048f8

08004aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004aba:	f000 fe9f 	bl	80057fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000

08004acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ad0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8004ad2:	e7fe      	b.n	8004ad2 <Error_Handler+0x6>

08004ad4 <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	ed93 7a00 	vldr	s14, [r3]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	3308      	adds	r3, #8
 8004aec:	edd3 7a00 	vldr	s15, [r3]
 8004af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3308      	adds	r3, #8
 8004af8:	edd3 6a00 	vldr	s13, [r3]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	3304      	adds	r3, #4
 8004b00:	edd3 7a00 	vldr	s15, [r3]
 8004b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3308      	adds	r3, #8
 8004b16:	ed93 7a00 	vldr	s14, [r3]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	edd3 7a00 	vldr	s15, [r3]
 8004b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	edd3 6a00 	vldr	s13, [r3]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	edd3 7a00 	vldr	s15, [r3]
 8004b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3e:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	ed93 7a00 	vldr	s14, [r3]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	edd3 7a00 	vldr	s15, [r3]
 8004b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3304      	adds	r3, #4
 8004b58:	edd3 6a00 	vldr	s13, [r3]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	edd3 7a00 	vldr	s15, [r3]
 8004b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b6e:	edc3 7a00 	vstr	s15, [r3]
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	ed93 7a00 	vldr	s14, [r3]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	edd3 7a00 	vldr	s15, [r3]
 8004b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	ed93 7a00 	vldr	s14, [r3]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3304      	adds	r3, #4
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb8:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	ed93 7a00 	vldr	s14, [r3]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	edd3 7a00 	vldr	s15, [r3]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd4:	edc3 7a00 	vstr	s15, [r3]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	ed93 7a00 	vldr	s14, [r3]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	edd3 7a00 	vldr	s15, [r3]
 8004bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	edd3 6a00 	vldr	s13, [r3]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	edd3 7a00 	vldr	s15, [r3]
 8004c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3308      	adds	r3, #8
 8004c18:	edd3 6a00 	vldr	s13, [r3]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	edd3 7a00 	vldr	s15, [r3]
 8004c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c28:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <orientation_init>:

void orientation_init(Orientation *ori) {
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fd fc99 	bl	800257c <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3370      	adds	r3, #112	; 0x70
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fc94 	bl	800257c <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3360      	adds	r3, #96	; 0x60
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fd fc8f 	bl	800257c <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[2];
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[0];
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[1];
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[2];
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[0];
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[1];
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	0000      	movs	r0, r0
 8004cf4:	0000      	movs	r0, r0
	...

08004cf8 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt, uint8_t apply_complementary) {
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b091      	sub	sp, #68	; 0x44
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d04:	460b      	mov	r3, r1
 8004d06:	71fb      	strb	r3, [r7, #7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3348      	adds	r3, #72	; 0x48
 8004d14:	461a      	mov	r2, r3
 8004d16:	f7fd fe8b 	bl	8002a30 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3354      	adds	r3, #84	; 0x54
 8004d24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f7ff fed3 	bl	8004ad4 <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3310      	adds	r3, #16
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7fd fd86 	bl	8002848 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3310      	adds	r3, #16
 8004d40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004d44:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd fe71 	bl	8002a30 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fb fc19 	bl	8000588 <__aeabi_f2d>
 8004d56:	a348      	add	r3, pc, #288	; (adr r3, 8004e78 <orientation_update+0x180>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f7fb fc6c 	bl	8000638 <__aeabi_dmul>
 8004d60:	4603      	mov	r3, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	4618      	mov	r0, r3
 8004d66:	4621      	mov	r1, r4
 8004d68:	f7fb ff5e 	bl	8000c28 <__aeabi_d2f>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
    correctionBody[1] = correctionBody[1] * 0.1;
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fc08 	bl	8000588 <__aeabi_f2d>
 8004d78:	a33f      	add	r3, pc, #252	; (adr r3, 8004e78 <orientation_update+0x180>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fc5b 	bl	8000638 <__aeabi_dmul>
 8004d82:	4603      	mov	r3, r0
 8004d84:	460c      	mov	r4, r1
 8004d86:	4618      	mov	r0, r3
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f7fb ff4d 	bl	8000c28 <__aeabi_d2f>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
    correctionBody[2] = correctionBody[2] * 0.1;
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fb fbf7 	bl	8000588 <__aeabi_f2d>
 8004d9a:	a337      	add	r3, pc, #220	; (adr r3, 8004e78 <orientation_update+0x180>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fc4a 	bl	8000638 <__aeabi_dmul>
 8004da4:	4603      	mov	r3, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	4618      	mov	r0, r3
 8004daa:	4621      	mov	r1, r4
 8004dac:	f7fb ff3c 	bl	8000c28 <__aeabi_d2f>
 8004db0:	4603      	mov	r3, r0
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	333c      	adds	r3, #60	; 0x3c
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff13 	bl	8004be4 <vector_lenSquared>
 8004dbe:	ee10 3a10 	vmov	r3, s0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb fbe0 	bl	8000588 <__aeabi_f2d>
 8004dc8:	a32d      	add	r3, pc, #180	; (adr r3, 8004e80 <orientation_update+0x188>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb fd5d 	bl	800088c <__aeabi_ddiv>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	4621      	mov	r1, r4
 8004dda:	f7fb ff25 	bl	8000c28 <__aeabi_d2f>
 8004dde:	4603      	mov	r3, r0
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (GsSquared > 0.81 && GsSquared < 1.21 && apply_complementary) {
 8004de2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004de4:	f7fb fbd0 	bl	8000588 <__aeabi_f2d>
 8004de8:	a327      	add	r3, pc, #156	; (adr r3, 8004e88 <orientation_update+0x190>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f7fb feb3 	bl	8000b58 <__aeabi_dcmpgt>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d018      	beq.n	8004e2a <orientation_update+0x132>
 8004df8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004dfa:	f7fb fbc5 	bl	8000588 <__aeabi_f2d>
 8004dfe:	a324      	add	r3, pc, #144	; (adr r3, 8004e90 <orientation_update+0x198>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f7fb fe8a 	bl	8000b1c <__aeabi_dcmplt>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <orientation_update+0x132>
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <orientation_update+0x132>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7ff feaa 	bl	8004b7e <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3320      	adds	r3, #32
 8004e34:	4619      	mov	r1, r3
 8004e36:	ed97 0a02 	vldr	s0, [r7, #8]
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f7fd ff80 	bl	8002d40 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3320      	adds	r3, #32
 8004e46:	f107 0214 	add.w	r2, r7, #20
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f7fd fd30 	bl	80028b0 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	f107 0314 	add.w	r3, r7, #20
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fd fbb3 	bl	80025c4 <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3380      	adds	r3, #128	; 0x80
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7fd fbce 	bl	8002608 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 8004e6c:	bf00      	nop
 8004e6e:	3744      	adds	r7, #68	; 0x44
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd90      	pop	{r4, r7, pc}
 8004e74:	f3af 8000 	nop.w
 8004e78:	9999999a 	.word	0x9999999a
 8004e7c:	3fb99999 	.word	0x3fb99999
 8004e80:	9339d914 	.word	0x9339d914
 8004e84:	40580ae7 	.word	0x40580ae7
 8004e88:	1eb851ec 	.word	0x1eb851ec
 8004e8c:	3fe9eb85 	.word	0x3fe9eb85
 8004e90:	f5c28f5c 	.word	0xf5c28f5c
 8004e94:	3ff35c28 	.word	0x3ff35c28

08004e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <HAL_MspInit+0x54>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	4a11      	ldr	r2, [pc, #68]	; (8004eec <HAL_MspInit+0x54>)
 8004ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eac:	6453      	str	r3, [r2, #68]	; 0x44
 8004eae:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <HAL_MspInit+0x54>)
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_MspInit+0x54>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <HAL_MspInit+0x54>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b08      	ldr	r3, [pc, #32]	; (8004eec <HAL_MspInit+0x54>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	210f      	movs	r1, #15
 8004eda:	f06f 0001 	mvn.w	r0, #1
 8004ede:	f001 f951 	bl	8006184 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <HAL_ADC_MspInit+0x7c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d127      	bne.n	8004f62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <HAL_ADC_MspInit+0x80>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <HAL_ADC_MspInit+0x80>)
 8004f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f20:	6453      	str	r3, [r2, #68]	; 0x44
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <HAL_ADC_MspInit+0x80>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <HAL_ADC_MspInit+0x80>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <HAL_ADC_MspInit+0x80>)
 8004f38:	f043 0304 	orr.w	r3, r3, #4
 8004f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <HAL_ADC_MspInit+0x80>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8004f56:	f107 0314 	add.w	r3, r7, #20
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4805      	ldr	r0, [pc, #20]	; (8004f74 <HAL_ADC_MspInit+0x84>)
 8004f5e:	f001 fca9 	bl	80068b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f62:	bf00      	nop
 8004f64:	3728      	adds	r7, #40	; 0x28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40012000 	.word	0x40012000
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40020800 	.word	0x40020800

08004f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <HAL_I2C_MspInit+0xc4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d14b      	bne.n	8005032 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	4b28      	ldr	r3, [pc, #160]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	4a27      	ldr	r2, [pc, #156]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004faa:	4b25      	ldr	r3, [pc, #148]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b21      	ldr	r3, [pc, #132]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	4a20      	ldr	r2, [pc, #128]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc6:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fd8:	2312      	movs	r3, #18
 8004fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	4619      	mov	r1, r3
 8004fee:	4815      	ldr	r0, [pc, #84]	; (8005044 <HAL_I2C_MspInit+0xcc>)
 8004ff0:	f001 fc60 	bl	80068b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ffa:	2312      	movs	r3, #18
 8004ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ffe:	2301      	movs	r3, #1
 8005000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005002:	2303      	movs	r3, #3
 8005004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005006:	2304      	movs	r3, #4
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	4619      	mov	r1, r3
 8005010:	480d      	ldr	r0, [pc, #52]	; (8005048 <HAL_I2C_MspInit+0xd0>)
 8005012:	f001 fc4f 	bl	80068b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	4a08      	ldr	r2, [pc, #32]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8005020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005024:	6413      	str	r3, [r2, #64]	; 0x40
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_I2C_MspInit+0xc8>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005032:	bf00      	nop
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40005c00 	.word	0x40005c00
 8005040:	40023800 	.word	0x40023800
 8005044:	40020800 	.word	0x40020800
 8005048:	40020000 	.word	0x40020000

0800504c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	; 0x38
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	60da      	str	r2, [r3, #12]
 8005062:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a89      	ldr	r2, [pc, #548]	; (8005290 <HAL_SPI_MspInit+0x244>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d12c      	bne.n	80050c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	623b      	str	r3, [r7, #32]
 8005072:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	4a87      	ldr	r2, [pc, #540]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800507c:	6453      	str	r3, [r2, #68]	; 0x44
 800507e:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005086:	623b      	str	r3, [r7, #32]
 8005088:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
 800508e:	4b81      	ldr	r3, [pc, #516]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	4a80      	ldr	r2, [pc, #512]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6313      	str	r3, [r2, #48]	; 0x30
 800509a:	4b7e      	ldr	r3, [pc, #504]	; (8005294 <HAL_SPI_MspInit+0x248>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80050a6:	23e0      	movs	r3, #224	; 0xe0
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050aa:	2302      	movs	r3, #2
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b2:	2303      	movs	r3, #3
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80050b6:	2305      	movs	r3, #5
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050be:	4619      	mov	r1, r3
 80050c0:	4875      	ldr	r0, [pc, #468]	; (8005298 <HAL_SPI_MspInit+0x24c>)
 80050c2:	f001 fbf7 	bl	80068b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80050c6:	e0df      	b.n	8005288 <HAL_SPI_MspInit+0x23c>
  else if(hspi->Instance==SPI2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a73      	ldr	r2, [pc, #460]	; (800529c <HAL_SPI_MspInit+0x250>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f040 808a 	bne.w	80051e8 <HAL_SPI_MspInit+0x19c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80050d4:	2300      	movs	r3, #0
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	4b6e      	ldr	r3, [pc, #440]	; (8005294 <HAL_SPI_MspInit+0x248>)
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	4a6d      	ldr	r2, [pc, #436]	; (8005294 <HAL_SPI_MspInit+0x248>)
 80050de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050e2:	6413      	str	r3, [r2, #64]	; 0x40
 80050e4:	4b6b      	ldr	r3, [pc, #428]	; (8005294 <HAL_SPI_MspInit+0x248>)
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	4b67      	ldr	r3, [pc, #412]	; (8005294 <HAL_SPI_MspInit+0x248>)
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	4a66      	ldr	r2, [pc, #408]	; (8005294 <HAL_SPI_MspInit+0x248>)
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005100:	4b64      	ldr	r3, [pc, #400]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800510c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005112:	2302      	movs	r3, #2
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005116:	2300      	movs	r3, #0
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511a:	2303      	movs	r3, #3
 800511c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800511e:	2305      	movs	r3, #5
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005126:	4619      	mov	r1, r3
 8005128:	485d      	ldr	r0, [pc, #372]	; (80052a0 <HAL_SPI_MspInit+0x254>)
 800512a:	f001 fbc3 	bl	80068b4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800512e:	4b5d      	ldr	r3, [pc, #372]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005130:	4a5d      	ldr	r2, [pc, #372]	; (80052a8 <HAL_SPI_MspInit+0x25c>)
 8005132:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005134:	4b5b      	ldr	r3, [pc, #364]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800513a:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 800513c:	2200      	movs	r2, #0
 800513e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005140:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005142:	2200      	movs	r2, #0
 8005144:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005146:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800514c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800514e:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005150:	2200      	movs	r2, #0
 8005152:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005154:	4b53      	ldr	r3, [pc, #332]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005156:	2200      	movs	r2, #0
 8005158:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800515a:	4b52      	ldr	r3, [pc, #328]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 800515c:	2200      	movs	r2, #0
 800515e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005160:	4b50      	ldr	r3, [pc, #320]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005162:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005166:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005168:	4b4e      	ldr	r3, [pc, #312]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 800516a:	2200      	movs	r2, #0
 800516c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800516e:	484d      	ldr	r0, [pc, #308]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005170:	f001 f832 	bl	80061d8 <HAL_DMA_Init>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_SPI_MspInit+0x132>
      Error_Handler();
 800517a:	f7ff fca7 	bl	8004acc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a48      	ldr	r2, [pc, #288]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005182:	64da      	str	r2, [r3, #76]	; 0x4c
 8005184:	4a47      	ldr	r2, [pc, #284]	; (80052a4 <HAL_SPI_MspInit+0x258>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800518a:	4b48      	ldr	r3, [pc, #288]	; (80052ac <HAL_SPI_MspInit+0x260>)
 800518c:	4a48      	ldr	r2, [pc, #288]	; (80052b0 <HAL_SPI_MspInit+0x264>)
 800518e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005190:	4b46      	ldr	r3, [pc, #280]	; (80052ac <HAL_SPI_MspInit+0x260>)
 8005192:	2200      	movs	r2, #0
 8005194:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005196:	4b45      	ldr	r3, [pc, #276]	; (80052ac <HAL_SPI_MspInit+0x260>)
 8005198:	2240      	movs	r2, #64	; 0x40
 800519a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800519c:	4b43      	ldr	r3, [pc, #268]	; (80052ac <HAL_SPI_MspInit+0x260>)
 800519e:	2200      	movs	r2, #0
 80051a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051a2:	4b42      	ldr	r3, [pc, #264]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051aa:	4b40      	ldr	r3, [pc, #256]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051b0:	4b3e      	ldr	r3, [pc, #248]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80051b6:	4b3d      	ldr	r3, [pc, #244]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051c4:	4b39      	ldr	r3, [pc, #228]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80051ca:	4838      	ldr	r0, [pc, #224]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051cc:	f001 f804 	bl	80061d8 <HAL_DMA_Init>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_SPI_MspInit+0x18e>
      Error_Handler();
 80051d6:	f7ff fc79 	bl	8004acc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a33      	ldr	r2, [pc, #204]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051de:	649a      	str	r2, [r3, #72]	; 0x48
 80051e0:	4a32      	ldr	r2, [pc, #200]	; (80052ac <HAL_SPI_MspInit+0x260>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80051e6:	e04f      	b.n	8005288 <HAL_SPI_MspInit+0x23c>
  else if(hspi->Instance==SPI3)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_SPI_MspInit+0x268>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d14a      	bne.n	8005288 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_SPI_MspInit+0x248>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	4a26      	ldr	r2, [pc, #152]	; (8005294 <HAL_SPI_MspInit+0x248>)
 80051fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005200:	6413      	str	r3, [r2, #64]	; 0x40
 8005202:	4b24      	ldr	r3, [pc, #144]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	4b20      	ldr	r3, [pc, #128]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	6313      	str	r3, [r2, #48]	; 0x30
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_SPI_MspInit+0x248>)
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	6313      	str	r3, [r2, #48]	; 0x30
 800523a:	4b16      	ldr	r3, [pc, #88]	; (8005294 <HAL_SPI_MspInit+0x248>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005246:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524c:	2302      	movs	r3, #2
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005250:	2300      	movs	r3, #0
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005254:	2303      	movs	r3, #3
 8005256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005258:	2306      	movs	r3, #6
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800525c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005260:	4619      	mov	r1, r3
 8005262:	4815      	ldr	r0, [pc, #84]	; (80052b8 <HAL_SPI_MspInit+0x26c>)
 8005264:	f001 fb26 	bl	80068b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005268:	2320      	movs	r3, #32
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526c:	2302      	movs	r3, #2
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	2300      	movs	r3, #0
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005274:	2303      	movs	r3, #3
 8005276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005278:	2306      	movs	r3, #6
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005280:	4619      	mov	r1, r3
 8005282:	4807      	ldr	r0, [pc, #28]	; (80052a0 <HAL_SPI_MspInit+0x254>)
 8005284:	f001 fb16 	bl	80068b4 <HAL_GPIO_Init>
}
 8005288:	bf00      	nop
 800528a:	3738      	adds	r7, #56	; 0x38
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40013000 	.word	0x40013000
 8005294:	40023800 	.word	0x40023800
 8005298:	40020000 	.word	0x40020000
 800529c:	40003800 	.word	0x40003800
 80052a0:	40020400 	.word	0x40020400
 80052a4:	200047b0 	.word	0x200047b0
 80052a8:	40026058 	.word	0x40026058
 80052ac:	20004a14 	.word	0x20004a14
 80052b0:	40026070 	.word	0x40026070
 80052b4:	40003c00 	.word	0x40003c00
 80052b8:	40020800 	.word	0x40020800

080052bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d10d      	bne.n	80052ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800

080052fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_TIM_Base_MspInit+0x64>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10e      	bne.n	800532c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <HAL_TIM_Base_MspInit+0x68>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	4a13      	ldr	r2, [pc, #76]	; (8005364 <HAL_TIM_Base_MspInit+0x68>)
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	6413      	str	r3, [r2, #64]	; 0x40
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <HAL_TIM_Base_MspInit+0x68>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800532a:	e012      	b.n	8005352 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0d      	ldr	r2, [pc, #52]	; (8005368 <HAL_TIM_Base_MspInit+0x6c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d10d      	bne.n	8005352 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <HAL_TIM_Base_MspInit+0x68>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <HAL_TIM_Base_MspInit+0x68>)
 8005340:	f043 0310 	orr.w	r3, r3, #16
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <HAL_TIM_Base_MspInit+0x68>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40000400 	.word	0x40000400
 8005364:	40023800 	.word	0x40023800
 8005368:	40001000 	.word	0x40001000

0800536c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	; 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d11e      	bne.n	80053cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	4b31      	ldr	r3, [pc, #196]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	4a30      	ldr	r2, [pc, #192]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	6313      	str	r3, [r2, #48]	; 0x30
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80053aa:	230a      	movs	r3, #10
 80053ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ae:	2302      	movs	r3, #2
 80053b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b6:	2300      	movs	r3, #0
 80053b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053ba:	2301      	movs	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	4619      	mov	r1, r3
 80053c4:	4825      	ldr	r0, [pc, #148]	; (800545c <HAL_TIM_MspPostInit+0xf0>)
 80053c6:	f001 fa75 	bl	80068b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80053ca:	e041      	b.n	8005450 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a23      	ldr	r2, [pc, #140]	; (8005460 <HAL_TIM_MspPostInit+0xf4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d13c      	bne.n	8005450 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30
 80053e6:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	4a17      	ldr	r2, [pc, #92]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	6313      	str	r3, [r2, #48]	; 0x30
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <HAL_TIM_MspPostInit+0xec>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800540e:	2302      	movs	r3, #2
 8005410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005412:	2302      	movs	r3, #2
 8005414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800541e:	2302      	movs	r3, #2
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005422:	f107 0314 	add.w	r3, r7, #20
 8005426:	4619      	mov	r1, r3
 8005428:	480e      	ldr	r0, [pc, #56]	; (8005464 <HAL_TIM_MspPostInit+0xf8>)
 800542a:	f001 fa43 	bl	80068b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800542e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005434:	2302      	movs	r3, #2
 8005436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543c:	2300      	movs	r3, #0
 800543e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005440:	2302      	movs	r3, #2
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005444:	f107 0314 	add.w	r3, r7, #20
 8005448:	4619      	mov	r1, r3
 800544a:	4807      	ldr	r0, [pc, #28]	; (8005468 <HAL_TIM_MspPostInit+0xfc>)
 800544c:	f001 fa32 	bl	80068b4 <HAL_GPIO_Init>
}
 8005450:	bf00      	nop
 8005452:	3728      	adds	r7, #40	; 0x28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	40020000 	.word	0x40020000
 8005460:	40000400 	.word	0x40000400
 8005464:	40020400 	.word	0x40020400
 8005468:	40020800 	.word	0x40020800

0800546c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800547c:	2200      	movs	r2, #0
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	2019      	movs	r0, #25
 8005482:	f000 fe7f 	bl	8006184 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005486:	2019      	movs	r0, #25
 8005488:	f000 fe98 	bl	80061bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <HAL_InitTick+0xa4>)
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <HAL_InitTick+0xa4>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6453      	str	r3, [r2, #68]	; 0x44
 800549c:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <HAL_InitTick+0xa4>)
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054a8:	f107 0210 	add.w	r2, r7, #16
 80054ac:	f107 0314 	add.w	r3, r7, #20
 80054b0:	4611      	mov	r1, r2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f003 fec6 	bl	8009244 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80054b8:	f003 feb0 	bl	800921c <HAL_RCC_GetPCLK2Freq>
 80054bc:	4603      	mov	r3, r0
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	4a13      	ldr	r2, [pc, #76]	; (8005514 <HAL_InitTick+0xa8>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	0c9b      	lsrs	r3, r3, #18
 80054cc:	3b01      	subs	r3, #1
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <HAL_InitTick+0xac>)
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <HAL_InitTick+0xb0>)
 80054d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <HAL_InitTick+0xac>)
 80054d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80054de:	4a0e      	ldr	r2, [pc, #56]	; (8005518 <HAL_InitTick+0xac>)
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <HAL_InitTick+0xac>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_InitTick+0xac>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80054f0:	4809      	ldr	r0, [pc, #36]	; (8005518 <HAL_InitTick+0xac>)
 80054f2:	f005 fd63 	bl	800afbc <HAL_TIM_Base_Init>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80054fc:	4806      	ldr	r0, [pc, #24]	; (8005518 <HAL_InitTick+0xac>)
 80054fe:	f005 fdac 	bl	800b05a <HAL_TIM_Base_Start_IT>
 8005502:	4603      	mov	r3, r0
 8005504:	e000      	b.n	8005508 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
}
 8005508:	4618      	mov	r0, r3
 800550a:	3730      	adds	r7, #48	; 0x30
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40023800 	.word	0x40023800
 8005514:	431bde83 	.word	0x431bde83
 8005518:	20004a78 	.word	0x20004a78
 800551c:	40010000 	.word	0x40010000

08005520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005524:	e7fe      	b.n	8005524 <NMI_Handler+0x4>

08005526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800552a:	e7fe      	b.n	800552a <HardFault_Handler+0x4>

0800552c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005530:	e7fe      	b.n	8005530 <MemManage_Handler+0x4>

08005532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005532:	b480      	push	{r7}
 8005534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005536:	e7fe      	b.n	8005536 <BusFault_Handler+0x4>

08005538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800553c:	e7fe      	b.n	800553c <UsageFault_Handler+0x4>

0800553e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800553e:	b480      	push	{r7}
 8005540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005550:	4802      	ldr	r0, [pc, #8]	; (800555c <DMA1_Stream3_IRQHandler+0x10>)
 8005552:	f000 ff47 	bl	80063e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	200047b0 	.word	0x200047b0

08005560 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005564:	4802      	ldr	r0, [pc, #8]	; (8005570 <DMA1_Stream4_IRQHandler+0x10>)
 8005566:	f000 ff3d 	bl	80063e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20004a14 	.word	0x20004a14

08005574 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005578:	4802      	ldr	r0, [pc, #8]	; (8005584 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800557a:	f005 fdfb 	bl	800b174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20004a78 	.word	0x20004a78

08005588 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800558c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005590:	f001 fb54 	bl	8006c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005594:	bf00      	nop
 8005596:	bd80      	pop	{r7, pc}

08005598 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <OTG_FS_IRQHandler+0x10>)
 800559e:	f002 fc6f 	bl	8007e80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20006400 	.word	0x20006400

080055ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
	return 1;
 80055b0:	2301      	movs	r3, #1
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <_kill>:

int _kill(int pid, int sig)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055c6:	f00d f933 	bl	8012830 <__errno>
 80055ca:	4602      	mov	r2, r0
 80055cc:	2316      	movs	r3, #22
 80055ce:	6013      	str	r3, [r2, #0]
	return -1;
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <_exit>:

void _exit (int status)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055e4:	f04f 31ff 	mov.w	r1, #4294967295
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ffe7 	bl	80055bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80055ee:	e7fe      	b.n	80055ee <_exit+0x12>

080055f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e00a      	b.n	8005618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005602:	f3af 8000 	nop.w
 8005606:	4601      	mov	r1, r0
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	60ba      	str	r2, [r7, #8]
 800560e:	b2ca      	uxtb	r2, r1
 8005610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	3301      	adds	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	dbf0      	blt.n	8005602 <_read+0x12>
	}

return len;
 8005620:	687b      	ldr	r3, [r7, #4]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b086      	sub	sp, #24
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e009      	b.n	8005650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	60ba      	str	r2, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	3301      	adds	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	dbf1      	blt.n	800563c <_write+0x12>
	}
	return len;
 8005658:	687b      	ldr	r3, [r7, #4]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <_close>:

int _close(int file)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
	return -1;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800568a:	605a      	str	r2, [r3, #4]
	return 0;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <_isatty>:

int _isatty(int file)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
	return 1;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
	return 0;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056d4:	4a14      	ldr	r2, [pc, #80]	; (8005728 <_sbrk+0x5c>)
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <_sbrk+0x60>)
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <_sbrk+0x64>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056e8:	4b11      	ldr	r3, [pc, #68]	; (8005730 <_sbrk+0x64>)
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <_sbrk+0x68>)
 80056ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <_sbrk+0x64>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d207      	bcs.n	800570c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056fc:	f00d f898 	bl	8012830 <__errno>
 8005700:	4602      	mov	r2, r0
 8005702:	230c      	movs	r3, #12
 8005704:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	e009      	b.n	8005720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <_sbrk+0x64>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <_sbrk+0x64>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	4a05      	ldr	r2, [pc, #20]	; (8005730 <_sbrk+0x64>)
 800571c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800571e:	68fb      	ldr	r3, [r7, #12]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20020000 	.word	0x20020000
 800572c:	00000400 	.word	0x00000400
 8005730:	20000880 	.word	0x20000880
 8005734:	20006810 	.word	0x20006810

08005738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <SystemInit+0x28>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	4a07      	ldr	r2, [pc, #28]	; (8005760 <SystemInit+0x28>)
 8005744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <SystemInit+0x28>)
 800574e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005752:	609a      	str	r2, [r3, #8]
#endif
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800579c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005768:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800576a:	e003      	b.n	8005774 <LoopCopyDataInit>

0800576c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800576c:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800576e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005770:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005772:	3104      	adds	r1, #4

08005774 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005774:	480b      	ldr	r0, [pc, #44]	; (80057a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005778:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800577a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800577c:	d3f6      	bcc.n	800576c <CopyDataInit>
  ldr  r2, =_sbss
 800577e:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005780:	e002      	b.n	8005788 <LoopFillZerobss>

08005782 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005782:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005784:	f842 3b04 	str.w	r3, [r2], #4

08005788 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800578a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800578c:	d3f9      	bcc.n	8005782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800578e:	f7ff ffd3 	bl	8005738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005792:	f00d f865 	bl	8012860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005796:	f7fd ff1f 	bl	80035d8 <main>
  bx  lr    
 800579a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800579c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80057a0:	08018718 	.word	0x08018718
  ldr  r0, =_sdata
 80057a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80057a8:	20000608 	.word	0x20000608
  ldr  r2, =_sbss
 80057ac:	20000608 	.word	0x20000608
  ldr  r3, = _ebss
 80057b0:	2000680c 	.word	0x2000680c

080057b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057b4:	e7fe      	b.n	80057b4 <ADC_IRQHandler>
	...

080057b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057bc:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <HAL_Init+0x40>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0d      	ldr	r2, [pc, #52]	; (80057f8 <HAL_Init+0x40>)
 80057c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_Init+0x40>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <HAL_Init+0x40>)
 80057ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_Init+0x40>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <HAL_Init+0x40>)
 80057da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057e0:	2003      	movs	r0, #3
 80057e2:	f000 fcc4 	bl	800616e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7ff fe40 	bl	800546c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057ec:	f7ff fb54 	bl	8004e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40023c00 	.word	0x40023c00

080057fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_IncTick+0x20>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	4b06      	ldr	r3, [pc, #24]	; (8005820 <HAL_IncTick+0x24>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4413      	add	r3, r2
 800580c:	4a04      	ldr	r2, [pc, #16]	; (8005820 <HAL_IncTick+0x24>)
 800580e:	6013      	str	r3, [r2, #0]
}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000288 	.word	0x20000288
 8005820:	20004ab8 	.word	0x20004ab8

08005824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return uwTick;
 8005828:	4b03      	ldr	r3, [pc, #12]	; (8005838 <HAL_GetTick+0x14>)
 800582a:	681b      	ldr	r3, [r3, #0]
}
 800582c:	4618      	mov	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20004ab8 	.word	0x20004ab8

0800583c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005844:	f7ff ffee 	bl	8005824 <HAL_GetTick>
 8005848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d005      	beq.n	8005862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <HAL_Delay+0x40>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005862:	bf00      	nop
 8005864:	f7ff ffde 	bl	8005824 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	429a      	cmp	r2, r3
 8005872:	d8f7      	bhi.n	8005864 <HAL_Delay+0x28>
  {
  }
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000288 	.word	0x20000288

08005880 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e033      	b.n	80058fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fb26 	bl	8004ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d118      	bne.n	80058f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058c6:	f023 0302 	bic.w	r3, r3, #2
 80058ca:	f043 0202 	orr.w	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 faa2 	bl	8005e1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	f043 0201 	orr.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
 80058ee:	e001      	b.n	80058f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_ADC_Start+0x1a>
 800591e:	2302      	movs	r3, #2
 8005920:	e0a5      	b.n	8005a6e <HAL_ADC_Start+0x166>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d018      	beq.n	800596a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005948:	4b4c      	ldr	r3, [pc, #304]	; (8005a7c <HAL_ADC_Start+0x174>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a4c      	ldr	r2, [pc, #304]	; (8005a80 <HAL_ADC_Start+0x178>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	0c9a      	lsrs	r2, r3, #18
 8005954:	4613      	mov	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	4413      	add	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800595c:	e002      	b.n	8005964 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3b01      	subs	r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f9      	bne.n	800595e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d179      	bne.n	8005a6c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b6:	d106      	bne.n	80059c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	f023 0206 	bic.w	r2, r3, #6
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44
 80059c4:	e002      	b.n	80059cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059d4:	4b2b      	ldr	r3, [pc, #172]	; (8005a84 <HAL_ADC_Start+0x17c>)
 80059d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80059e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d12a      	bne.n	8005a44 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <HAL_ADC_Start+0x180>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d015      	beq.n	8005a24 <HAL_ADC_Start+0x11c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <HAL_ADC_Start+0x184>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d105      	bne.n	8005a0e <HAL_ADC_Start+0x106>
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_ADC_Start+0x17c>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <HAL_ADC_Start+0x188>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d129      	bne.n	8005a6c <HAL_ADC_Start+0x164>
 8005a18:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <HAL_ADC_Start+0x17c>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2b0f      	cmp	r3, #15
 8005a22:	d823      	bhi.n	8005a6c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11c      	bne.n	8005a6c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a40:	609a      	str	r2, [r3, #8]
 8005a42:	e013      	b.n	8005a6c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0f      	ldr	r2, [pc, #60]	; (8005a88 <HAL_ADC_Start+0x180>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d10e      	bne.n	8005a6c <HAL_ADC_Start+0x164>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d107      	bne.n	8005a6c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a6a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000280 	.word	0x20000280
 8005a80:	431bde83 	.word	0x431bde83
 8005a84:	40012300 	.word	0x40012300
 8005a88:	40012000 	.word	0x40012000
 8005a8c:	40012100 	.word	0x40012100
 8005a90:	40012200 	.word	0x40012200

08005a94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d113      	bne.n	8005ada <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac0:	d10b      	bne.n	8005ada <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e05c      	b.n	8005b94 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005ada:	f7ff fea3 	bl	8005824 <HAL_GetTick>
 8005ade:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ae0:	e01a      	b.n	8005b18 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d016      	beq.n	8005b18 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <HAL_ADC_PollForConversion+0x6c>
 8005af0:	f7ff fe98 	bl	8005824 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d20b      	bcs.n	8005b18 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	f043 0204 	orr.w	r2, r3, #4
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e03d      	b.n	8005b94 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d1dd      	bne.n	8005ae2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f06f 0212 	mvn.w	r2, #18
 8005b2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d123      	bne.n	8005b92 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11f      	bne.n	8005b92 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d006      	beq.n	8005b6e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d111      	bne.n	8005b92 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d105      	bne.n	8005b92 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x1c>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e113      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x244>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b09      	cmp	r3, #9
 8005be2:	d925      	bls.n	8005c30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68d9      	ldr	r1, [r3, #12]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3b1e      	subs	r3, #30
 8005bfa:	2207      	movs	r2, #7
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43da      	mvns	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	400a      	ands	r2, r1
 8005c08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68d9      	ldr	r1, [r3, #12]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4403      	add	r3, r0
 8005c22:	3b1e      	subs	r3, #30
 8005c24:	409a      	lsls	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	e022      	b.n	8005c76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6919      	ldr	r1, [r3, #16]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4613      	mov	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	2207      	movs	r2, #7
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43da      	mvns	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	400a      	ands	r2, r1
 8005c52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6919      	ldr	r1, [r3, #16]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	4618      	mov	r0, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4403      	add	r3, r0
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d824      	bhi.n	8005cc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3b05      	subs	r3, #5
 8005c90:	221f      	movs	r2, #31
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43da      	mvns	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4618      	mov	r0, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3b05      	subs	r3, #5
 8005cba:	fa00 f203 	lsl.w	r2, r0, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8005cc6:	e04c      	b.n	8005d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b0c      	cmp	r3, #12
 8005cce:	d824      	bhi.n	8005d1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	3b23      	subs	r3, #35	; 0x23
 8005ce2:	221f      	movs	r2, #31
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	400a      	ands	r2, r1
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4618      	mov	r0, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	3b23      	subs	r3, #35	; 0x23
 8005d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
 8005d18:	e023      	b.n	8005d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	3b41      	subs	r3, #65	; 0x41
 8005d2c:	221f      	movs	r2, #31
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43da      	mvns	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	400a      	ands	r2, r1
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4618      	mov	r0, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	3b41      	subs	r3, #65	; 0x41
 8005d56:	fa00 f203 	lsl.w	r2, r0, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d62:	4b29      	ldr	r3, [pc, #164]	; (8005e08 <HAL_ADC_ConfigChannel+0x250>)
 8005d64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a28      	ldr	r2, [pc, #160]	; (8005e0c <HAL_ADC_ConfigChannel+0x254>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10f      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x1d8>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b12      	cmp	r3, #18
 8005d76:	d10b      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1d      	ldr	r2, [pc, #116]	; (8005e0c <HAL_ADC_ConfigChannel+0x254>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d12b      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x23a>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1c      	ldr	r2, [pc, #112]	; (8005e10 <HAL_ADC_ConfigChannel+0x258>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <HAL_ADC_ConfigChannel+0x1f4>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b11      	cmp	r3, #17
 8005daa:	d122      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a11      	ldr	r2, [pc, #68]	; (8005e10 <HAL_ADC_ConfigChannel+0x258>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d111      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <HAL_ADC_ConfigChannel+0x25c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <HAL_ADC_ConfigChannel+0x260>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	0c9a      	lsrs	r2, r3, #18
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005de4:	e002      	b.n	8005dec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f9      	bne.n	8005de6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40012300 	.word	0x40012300
 8005e0c:	40012000 	.word	0x40012000
 8005e10:	10000012 	.word	0x10000012
 8005e14:	20000280 	.word	0x20000280
 8005e18:	431bde83 	.word	0x431bde83

08005e1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e24:	4b79      	ldr	r3, [pc, #484]	; (800600c <ADC_Init+0x1f0>)
 8005e26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6859      	ldr	r1, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	021a      	lsls	r2, r3, #8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6899      	ldr	r1, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	4a58      	ldr	r2, [pc, #352]	; (8006010 <ADC_Init+0x1f4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d022      	beq.n	8005efa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6899      	ldr	r1, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
 8005ef8:	e00f      	b.n	8005f1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0202 	bic.w	r2, r2, #2
 8005f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6899      	ldr	r1, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7e1b      	ldrb	r3, [r3, #24]
 8005f34:	005a      	lsls	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	3b01      	subs	r3, #1
 8005f74:	035a      	lsls	r2, r3, #13
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	e007      	b.n	8005f90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	051a      	lsls	r2, r3, #20
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fd2:	025a      	lsls	r2, r3, #9
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6899      	ldr	r1, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	029a      	lsls	r2, r3, #10
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40012300 	.word	0x40012300
 8006010:	0f000001 	.word	0x0f000001

08006014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <__NVIC_SetPriorityGrouping+0x44>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006030:	4013      	ands	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800603c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006046:	4a04      	ldr	r2, [pc, #16]	; (8006058 <__NVIC_SetPriorityGrouping+0x44>)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	60d3      	str	r3, [r2, #12]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006060:	4b04      	ldr	r3, [pc, #16]	; (8006074 <__NVIC_GetPriorityGrouping+0x18>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 0307 	and.w	r3, r3, #7
}
 800606a:	4618      	mov	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	e000ed00 	.word	0xe000ed00

08006078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	2b00      	cmp	r3, #0
 8006088:	db0b      	blt.n	80060a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	f003 021f 	and.w	r2, r3, #31
 8006090:	4907      	ldr	r1, [pc, #28]	; (80060b0 <__NVIC_EnableIRQ+0x38>)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2001      	movs	r0, #1
 800609a:	fa00 f202 	lsl.w	r2, r0, r2
 800609e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	e000e100 	.word	0xe000e100

080060b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	6039      	str	r1, [r7, #0]
 80060be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	db0a      	blt.n	80060de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	490c      	ldr	r1, [pc, #48]	; (8006100 <__NVIC_SetPriority+0x4c>)
 80060ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d2:	0112      	lsls	r2, r2, #4
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	440b      	add	r3, r1
 80060d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060dc:	e00a      	b.n	80060f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4908      	ldr	r1, [pc, #32]	; (8006104 <__NVIC_SetPriority+0x50>)
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	3b04      	subs	r3, #4
 80060ec:	0112      	lsls	r2, r2, #4
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	440b      	add	r3, r1
 80060f2:	761a      	strb	r2, [r3, #24]
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	e000e100 	.word	0xe000e100
 8006104:	e000ed00 	.word	0xe000ed00

08006108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006108:	b480      	push	{r7}
 800610a:	b089      	sub	sp, #36	; 0x24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f1c3 0307 	rsb	r3, r3, #7
 8006122:	2b04      	cmp	r3, #4
 8006124:	bf28      	it	cs
 8006126:	2304      	movcs	r3, #4
 8006128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3304      	adds	r3, #4
 800612e:	2b06      	cmp	r3, #6
 8006130:	d902      	bls.n	8006138 <NVIC_EncodePriority+0x30>
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3b03      	subs	r3, #3
 8006136:	e000      	b.n	800613a <NVIC_EncodePriority+0x32>
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800613c:	f04f 32ff 	mov.w	r2, #4294967295
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43da      	mvns	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	401a      	ands	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006150:	f04f 31ff 	mov.w	r1, #4294967295
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	fa01 f303 	lsl.w	r3, r1, r3
 800615a:	43d9      	mvns	r1, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006160:	4313      	orrs	r3, r2
         );
}
 8006162:	4618      	mov	r0, r3
 8006164:	3724      	adds	r7, #36	; 0x24
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff ff4c 	bl	8006014 <__NVIC_SetPriorityGrouping>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006196:	f7ff ff61 	bl	800605c <__NVIC_GetPriorityGrouping>
 800619a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	6978      	ldr	r0, [r7, #20]
 80061a2:	f7ff ffb1 	bl	8006108 <NVIC_EncodePriority>
 80061a6:	4602      	mov	r2, r0
 80061a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ff80 	bl	80060b4 <__NVIC_SetPriority>
}
 80061b4:	bf00      	nop
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ff54 	bl	8006078 <__NVIC_EnableIRQ>
}
 80061d0:	bf00      	nop
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061e4:	f7ff fb1e 	bl	8005824 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e099      	b.n	8006328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006214:	e00f      	b.n	8006236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006216:	f7ff fb05 	bl	8005824 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b05      	cmp	r3, #5
 8006222:	d908      	bls.n	8006236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2203      	movs	r2, #3
 800622e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e078      	b.n	8006328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e8      	bne.n	8006216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4b38      	ldr	r3, [pc, #224]	; (8006330 <HAL_DMA_Init+0x158>)
 8006250:	4013      	ands	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800626e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800627a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	2b04      	cmp	r3, #4
 800628e:	d107      	bne.n	80062a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	4313      	orrs	r3, r2
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d117      	bne.n	80062fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00e      	beq.n	80062fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa6f 	bl	80067c0 <DMA_CheckFifoParam>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2240      	movs	r2, #64	; 0x40
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80062f6:	2301      	movs	r3, #1
 80062f8:	e016      	b.n	8006328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa26 	bl	8006754 <DMA_CalcBaseAndBitshift>
 8006308:	4603      	mov	r3, r0
 800630a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	223f      	movs	r2, #63	; 0x3f
 8006312:	409a      	lsls	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	f010803f 	.word	0xf010803f

08006334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_DMA_Start_IT+0x26>
 8006356:	2302      	movs	r3, #2
 8006358:	e040      	b.n	80063dc <HAL_DMA_Start_IT+0xa8>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d12f      	bne.n	80063ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f9b8 	bl	80066f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	223f      	movs	r2, #63	; 0x3f
 800638e:	409a      	lsls	r2, r3
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0216 	orr.w	r2, r2, #22
 80063a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0208 	orr.w	r2, r2, #8
 80063ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	e005      	b.n	80063da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063f0:	4b92      	ldr	r3, [pc, #584]	; (800663c <HAL_DMA_IRQHandler+0x258>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a92      	ldr	r2, [pc, #584]	; (8006640 <HAL_DMA_IRQHandler+0x25c>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	0a9b      	lsrs	r3, r3, #10
 80063fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	2208      	movs	r2, #8
 8006410:	409a      	lsls	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4013      	ands	r3, r2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01a      	beq.n	8006450 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0204 	bic.w	r2, r2, #4
 8006436:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	2208      	movs	r2, #8
 800643e:	409a      	lsls	r2, r3
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006448:	f043 0201 	orr.w	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	2201      	movs	r2, #1
 8006456:	409a      	lsls	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d012      	beq.n	8006486 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006472:	2201      	movs	r2, #1
 8006474:	409a      	lsls	r2, r3
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	f043 0202 	orr.w	r2, r3, #2
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648a:	2204      	movs	r2, #4
 800648c:	409a      	lsls	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d012      	beq.n	80064bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a8:	2204      	movs	r2, #4
 80064aa:	409a      	lsls	r2, r3
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b4:	f043 0204 	orr.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	2210      	movs	r2, #16
 80064c2:	409a      	lsls	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d043      	beq.n	8006554 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d03c      	beq.n	8006554 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064de:	2210      	movs	r2, #16
 80064e0:	409a      	lsls	r2, r3
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d018      	beq.n	8006526 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d108      	bne.n	8006514 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d024      	beq.n	8006554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
 8006512:	e01f      	b.n	8006554 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
 8006524:	e016      	b.n	8006554 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006530:	2b00      	cmp	r3, #0
 8006532:	d107      	bne.n	8006544 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0208 	bic.w	r2, r2, #8
 8006542:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	2220      	movs	r2, #32
 800655a:	409a      	lsls	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4013      	ands	r3, r2
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 808e 	beq.w	8006682 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8086 	beq.w	8006682 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657a:	2220      	movs	r2, #32
 800657c:	409a      	lsls	r2, r3
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b05      	cmp	r3, #5
 800658c:	d136      	bne.n	80065fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0216 	bic.w	r2, r2, #22
 800659c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <HAL_DMA_IRQHandler+0x1da>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0208 	bic.w	r2, r2, #8
 80065cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d2:	223f      	movs	r2, #63	; 0x3f
 80065d4:	409a      	lsls	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d07d      	beq.n	80066ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
        }
        return;
 80065fa:	e078      	b.n	80066ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01c      	beq.n	8006644 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d108      	bne.n	800662a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	2b00      	cmp	r3, #0
 800661e:	d030      	beq.n	8006682 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
 8006628:	e02b      	b.n	8006682 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d027      	beq.n	8006682 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
 800663a:	e022      	b.n	8006682 <HAL_DMA_IRQHandler+0x29e>
 800663c:	20000280 	.word	0x20000280
 8006640:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0210 	bic.w	r2, r2, #16
 8006660:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	2b00      	cmp	r3, #0
 8006688:	d032      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d022      	beq.n	80066dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2205      	movs	r2, #5
 800669a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d307      	bcc.n	80066ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f2      	bne.n	80066ae <HAL_DMA_IRQHandler+0x2ca>
 80066c8:	e000      	b.n	80066cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80066ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
 80066ec:	e000      	b.n	80066f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80066ee:	bf00      	nop
    }
  }
}
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop

080066f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006714:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d108      	bne.n	8006738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006736:	e007      	b.n	8006748 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	3b10      	subs	r3, #16
 8006764:	4a14      	ldr	r2, [pc, #80]	; (80067b8 <DMA_CalcBaseAndBitshift+0x64>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	091b      	lsrs	r3, r3, #4
 800676c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <DMA_CalcBaseAndBitshift+0x68>)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b03      	cmp	r3, #3
 8006780:	d909      	bls.n	8006796 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800678a:	f023 0303 	bic.w	r3, r3, #3
 800678e:	1d1a      	adds	r2, r3, #4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	659a      	str	r2, [r3, #88]	; 0x58
 8006794:	e007      	b.n	80067a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	aaaaaaab 	.word	0xaaaaaaab
 80067bc:	080181b8 	.word	0x080181b8

080067c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d11f      	bne.n	800681a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d855      	bhi.n	800688c <DMA_CheckFifoParam+0xcc>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <DMA_CheckFifoParam+0x28>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	080067f9 	.word	0x080067f9
 80067ec:	0800680b 	.word	0x0800680b
 80067f0:	080067f9 	.word	0x080067f9
 80067f4:	0800688d 	.word	0x0800688d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d045      	beq.n	8006890 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006808:	e042      	b.n	8006890 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006812:	d13f      	bne.n	8006894 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006818:	e03c      	b.n	8006894 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006822:	d121      	bne.n	8006868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d836      	bhi.n	8006898 <DMA_CheckFifoParam+0xd8>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <DMA_CheckFifoParam+0x70>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006841 	.word	0x08006841
 8006834:	08006847 	.word	0x08006847
 8006838:	08006841 	.word	0x08006841
 800683c:	08006859 	.word	0x08006859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
      break;
 8006844:	e02f      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d024      	beq.n	800689c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006856:	e021      	b.n	800689c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006860:	d11e      	bne.n	80068a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006866:	e01b      	b.n	80068a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d902      	bls.n	8006874 <DMA_CheckFifoParam+0xb4>
 800686e:	2b03      	cmp	r3, #3
 8006870:	d003      	beq.n	800687a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006872:	e018      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
      break;
 8006878:	e015      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00e      	beq.n	80068a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
      break;
 800688a:	e00b      	b.n	80068a4 <DMA_CheckFifoParam+0xe4>
      break;
 800688c:	bf00      	nop
 800688e:	e00a      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006890:	bf00      	nop
 8006892:	e008      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006894:	bf00      	nop
 8006896:	e006      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      break;
 8006898:	bf00      	nop
 800689a:	e004      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      break;
 800689c:	bf00      	nop
 800689e:	e002      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <DMA_CheckFifoParam+0xe6>
      break;
 80068a4:	bf00      	nop
    }
  } 
  
  return status; 
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b089      	sub	sp, #36	; 0x24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	e165      	b.n	8006b9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068d0:	2201      	movs	r2, #1
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4013      	ands	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	f040 8154 	bne.w	8006b96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d00b      	beq.n	800690e <HAL_GPIO_Init+0x5a>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d007      	beq.n	800690e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006902:	2b11      	cmp	r3, #17
 8006904:	d003      	beq.n	800690e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b12      	cmp	r3, #18
 800690c:	d130      	bne.n	8006970 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	2203      	movs	r2, #3
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	43db      	mvns	r3, r3
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	4013      	ands	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	4313      	orrs	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006944:	2201      	movs	r2, #1
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	43db      	mvns	r3, r3
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4013      	ands	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 0201 	and.w	r2, r3, #1
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4313      	orrs	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	2203      	movs	r2, #3
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	43db      	mvns	r3, r3
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	4013      	ands	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	4313      	orrs	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d003      	beq.n	80069b0 <HAL_GPIO_Init+0xfc>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b12      	cmp	r3, #18
 80069ae:	d123      	bne.n	80069f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	08da      	lsrs	r2, r3, #3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3208      	adds	r2, #8
 80069b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	220f      	movs	r2, #15
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	4013      	ands	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	08da      	lsrs	r2, r3, #3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3208      	adds	r2, #8
 80069f2:	69b9      	ldr	r1, [r7, #24]
 80069f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	2203      	movs	r2, #3
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 0203 	and.w	r2, r3, #3
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80ae 	beq.w	8006b96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	4b5c      	ldr	r3, [pc, #368]	; (8006bb0 <HAL_GPIO_Init+0x2fc>)
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	4a5b      	ldr	r2, [pc, #364]	; (8006bb0 <HAL_GPIO_Init+0x2fc>)
 8006a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a48:	6453      	str	r3, [r2, #68]	; 0x44
 8006a4a:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <HAL_GPIO_Init+0x2fc>)
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a56:	4a57      	ldr	r2, [pc, #348]	; (8006bb4 <HAL_GPIO_Init+0x300>)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	089b      	lsrs	r3, r3, #2
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	220f      	movs	r2, #15
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a4e      	ldr	r2, [pc, #312]	; (8006bb8 <HAL_GPIO_Init+0x304>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d025      	beq.n	8006ace <HAL_GPIO_Init+0x21a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a4d      	ldr	r2, [pc, #308]	; (8006bbc <HAL_GPIO_Init+0x308>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01f      	beq.n	8006aca <HAL_GPIO_Init+0x216>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a4c      	ldr	r2, [pc, #304]	; (8006bc0 <HAL_GPIO_Init+0x30c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d019      	beq.n	8006ac6 <HAL_GPIO_Init+0x212>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a4b      	ldr	r2, [pc, #300]	; (8006bc4 <HAL_GPIO_Init+0x310>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_GPIO_Init+0x20e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a4a      	ldr	r2, [pc, #296]	; (8006bc8 <HAL_GPIO_Init+0x314>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00d      	beq.n	8006abe <HAL_GPIO_Init+0x20a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a49      	ldr	r2, [pc, #292]	; (8006bcc <HAL_GPIO_Init+0x318>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d007      	beq.n	8006aba <HAL_GPIO_Init+0x206>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a48      	ldr	r2, [pc, #288]	; (8006bd0 <HAL_GPIO_Init+0x31c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d101      	bne.n	8006ab6 <HAL_GPIO_Init+0x202>
 8006ab2:	2306      	movs	r3, #6
 8006ab4:	e00c      	b.n	8006ad0 <HAL_GPIO_Init+0x21c>
 8006ab6:	2307      	movs	r3, #7
 8006ab8:	e00a      	b.n	8006ad0 <HAL_GPIO_Init+0x21c>
 8006aba:	2305      	movs	r3, #5
 8006abc:	e008      	b.n	8006ad0 <HAL_GPIO_Init+0x21c>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	e006      	b.n	8006ad0 <HAL_GPIO_Init+0x21c>
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e004      	b.n	8006ad0 <HAL_GPIO_Init+0x21c>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e002      	b.n	8006ad0 <HAL_GPIO_Init+0x21c>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_GPIO_Init+0x21c>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	f002 0203 	and.w	r2, r2, #3
 8006ad6:	0092      	lsls	r2, r2, #2
 8006ad8:	4093      	lsls	r3, r2
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ae0:	4934      	ldr	r1, [pc, #208]	; (8006bb4 <HAL_GPIO_Init+0x300>)
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	089b      	lsrs	r3, r3, #2
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006aee:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b12:	4a30      	ldr	r2, [pc, #192]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006b18:	4b2e      	ldr	r3, [pc, #184]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4013      	ands	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b3c:	4a25      	ldr	r2, [pc, #148]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b42:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b66:	4a1b      	ldr	r2, [pc, #108]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b6c:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b90:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <HAL_GPIO_Init+0x320>)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b0f      	cmp	r3, #15
 8006ba0:	f67f ae96 	bls.w	80068d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3724      	adds	r7, #36	; 0x24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40013800 	.word	0x40013800
 8006bb8:	40020000 	.word	0x40020000
 8006bbc:	40020400 	.word	0x40020400
 8006bc0:	40020800 	.word	0x40020800
 8006bc4:	40020c00 	.word	0x40020c00
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	40021400 	.word	0x40021400
 8006bd0:	40021800 	.word	0x40021800
 8006bd4:	40013c00 	.word	0x40013c00

08006bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	887b      	ldrh	r3, [r7, #2]
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	73fb      	strb	r3, [r7, #15]
 8006bf4:	e001      	b.n	8006bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
 8006c14:	4613      	mov	r3, r2
 8006c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c18:	787b      	ldrb	r3, [r7, #1]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c1e:	887a      	ldrh	r2, [r7, #2]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c24:	e003      	b.n	8006c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c26:	887b      	ldrh	r3, [r7, #2]
 8006c28:	041a      	lsls	r2, r3, #16
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	619a      	str	r2, [r3, #24]
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c46:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c48:	695a      	ldr	r2, [r3, #20]
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d006      	beq.n	8006c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c52:	4a05      	ldr	r2, [pc, #20]	; (8006c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fc fc90 	bl	8003580 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40013c00 	.word	0x40013c00

08006c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e11f      	b.n	8006ebe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fe f970 	bl	8004f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2224      	movs	r2, #36	; 0x24
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f002 fa90 	bl	80091f4 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	4a7b      	ldr	r2, [pc, #492]	; (8006ec8 <HAL_I2C_Init+0x25c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d807      	bhi.n	8006cf0 <HAL_I2C_Init+0x84>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a7a      	ldr	r2, [pc, #488]	; (8006ecc <HAL_I2C_Init+0x260>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	bf94      	ite	ls
 8006ce8:	2301      	movls	r3, #1
 8006cea:	2300      	movhi	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	e006      	b.n	8006cfe <HAL_I2C_Init+0x92>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4a77      	ldr	r2, [pc, #476]	; (8006ed0 <HAL_I2C_Init+0x264>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	bf94      	ite	ls
 8006cf8:	2301      	movls	r3, #1
 8006cfa:	2300      	movhi	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e0db      	b.n	8006ebe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a72      	ldr	r2, [pc, #456]	; (8006ed4 <HAL_I2C_Init+0x268>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	0c9b      	lsrs	r3, r3, #18
 8006d10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	4a64      	ldr	r2, [pc, #400]	; (8006ec8 <HAL_I2C_Init+0x25c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d802      	bhi.n	8006d40 <HAL_I2C_Init+0xd4>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	e009      	b.n	8006d54 <HAL_I2C_Init+0xe8>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	4a63      	ldr	r2, [pc, #396]	; (8006ed8 <HAL_I2C_Init+0x26c>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	099b      	lsrs	r3, r3, #6
 8006d52:	3301      	adds	r3, #1
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006d66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4956      	ldr	r1, [pc, #344]	; (8006ec8 <HAL_I2C_Init+0x25c>)
 8006d70:	428b      	cmp	r3, r1
 8006d72:	d80d      	bhi.n	8006d90 <HAL_I2C_Init+0x124>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	1e59      	subs	r1, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d82:	3301      	adds	r3, #1
 8006d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	bf38      	it	cc
 8006d8c:	2304      	movcc	r3, #4
 8006d8e:	e04f      	b.n	8006e30 <HAL_I2C_Init+0x1c4>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d111      	bne.n	8006dbc <HAL_I2C_Init+0x150>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	1e58      	subs	r0, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6859      	ldr	r1, [r3, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	440b      	add	r3, r1
 8006da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006daa:	3301      	adds	r3, #1
 8006dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf0c      	ite	eq
 8006db4:	2301      	moveq	r3, #1
 8006db6:	2300      	movne	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	e012      	b.n	8006de2 <HAL_I2C_Init+0x176>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	1e58      	subs	r0, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6859      	ldr	r1, [r3, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	0099      	lsls	r1, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bf0c      	ite	eq
 8006ddc:	2301      	moveq	r3, #1
 8006dde:	2300      	movne	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_I2C_Init+0x17e>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e022      	b.n	8006e30 <HAL_I2C_Init+0x1c4>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10e      	bne.n	8006e10 <HAL_I2C_Init+0x1a4>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1e58      	subs	r0, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6859      	ldr	r1, [r3, #4]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	440b      	add	r3, r1
 8006e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e04:	3301      	adds	r3, #1
 8006e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0e:	e00f      	b.n	8006e30 <HAL_I2C_Init+0x1c4>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	1e58      	subs	r0, r3, #1
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6859      	ldr	r1, [r3, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	0099      	lsls	r1, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e26:	3301      	adds	r3, #1
 8006e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	6809      	ldr	r1, [r1, #0]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69da      	ldr	r2, [r3, #28]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6911      	ldr	r1, [r2, #16]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68d2      	ldr	r2, [r2, #12]
 8006e6a:	4311      	orrs	r1, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	000186a0 	.word	0x000186a0
 8006ecc:	001e847f 	.word	0x001e847f
 8006ed0:	003d08ff 	.word	0x003d08ff
 8006ed4:	431bde83 	.word	0x431bde83
 8006ed8:	10624dd3 	.word	0x10624dd3

08006edc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	817b      	strh	r3, [r7, #10]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	813b      	strh	r3, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ef6:	f7fe fc95 	bl	8005824 <HAL_GetTick>
 8006efa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	f040 80d9 	bne.w	80070bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	2319      	movs	r3, #25
 8006f10:	2201      	movs	r2, #1
 8006f12:	496d      	ldr	r1, [pc, #436]	; (80070c8 <HAL_I2C_Mem_Write+0x1ec>)
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fc7f 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
 8006f22:	e0cc      	b.n	80070be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_I2C_Mem_Write+0x56>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e0c5      	b.n	80070be <HAL_I2C_Mem_Write+0x1e2>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d007      	beq.n	8006f58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2221      	movs	r2, #33	; 0x21
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2240      	movs	r2, #64	; 0x40
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a3a      	ldr	r2, [r7, #32]
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4a4d      	ldr	r2, [pc, #308]	; (80070cc <HAL_I2C_Mem_Write+0x1f0>)
 8006f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f9a:	88f8      	ldrh	r0, [r7, #6]
 8006f9c:	893a      	ldrh	r2, [r7, #8]
 8006f9e:	8979      	ldrh	r1, [r7, #10]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fab6 	bl	800751c <I2C_RequestMemoryWrite>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d052      	beq.n	800705c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e081      	b.n	80070be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 fd00 	bl	80079c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d107      	bne.n	8006fe2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e06b      	b.n	80070be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b04      	cmp	r3, #4
 8007022:	d11b      	bne.n	800705c <HAL_I2C_Mem_Write+0x180>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007028:	2b00      	cmp	r3, #0
 800702a:	d017      	beq.n	800705c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1aa      	bne.n	8006fba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fcec 	bl	8007a46 <I2C_WaitOnBTFFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00d      	beq.n	8007090 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	2b04      	cmp	r3, #4
 800707a:	d107      	bne.n	800708c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800708a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e016      	b.n	80070be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800709e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	00100002 	.word	0x00100002
 80070cc:	ffff0000 	.word	0xffff0000

080070d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	; 0x30
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	4603      	mov	r3, r0
 80070e0:	817b      	strh	r3, [r7, #10]
 80070e2:	460b      	mov	r3, r1
 80070e4:	813b      	strh	r3, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070ea:	f7fe fb9b 	bl	8005824 <HAL_GetTick>
 80070ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	f040 8208 	bne.w	800750e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2319      	movs	r3, #25
 8007104:	2201      	movs	r2, #1
 8007106:	497b      	ldr	r1, [pc, #492]	; (80072f4 <HAL_I2C_Mem_Read+0x224>)
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fb85 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007114:	2302      	movs	r3, #2
 8007116:	e1fb      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_I2C_Mem_Read+0x56>
 8007122:	2302      	movs	r3, #2
 8007124:	e1f4      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b01      	cmp	r3, #1
 800713a:	d007      	beq.n	800714c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800715a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2222      	movs	r2, #34	; 0x22
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2240      	movs	r2, #64	; 0x40
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800717c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4a5b      	ldr	r2, [pc, #364]	; (80072f8 <HAL_I2C_Mem_Read+0x228>)
 800718c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800718e:	88f8      	ldrh	r0, [r7, #6]
 8007190:	893a      	ldrh	r2, [r7, #8]
 8007192:	8979      	ldrh	r1, [r7, #10]
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4603      	mov	r3, r0
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fa52 	bl	8007648 <I2C_RequestMemoryRead>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e1b0      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d113      	bne.n	80071de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	623b      	str	r3, [r7, #32]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	623b      	str	r3, [r7, #32]
 80071ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	e184      	b.n	80074e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d11b      	bne.n	800721e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	e164      	b.n	80074e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007222:	2b02      	cmp	r3, #2
 8007224:	d11b      	bne.n	800725e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007234:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007246:	2300      	movs	r3, #0
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	e144      	b.n	80074e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007274:	e138      	b.n	80074e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727a:	2b03      	cmp	r3, #3
 800727c:	f200 80f1 	bhi.w	8007462 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007284:	2b01      	cmp	r3, #1
 8007286:	d123      	bne.n	80072d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fc1b 	bl	8007ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e139      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072ce:	e10b      	b.n	80074e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d14e      	bne.n	8007376 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	2200      	movs	r2, #0
 80072e0:	4906      	ldr	r1, [pc, #24]	; (80072fc <HAL_I2C_Mem_Read+0x22c>)
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fa98 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e10e      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
 80072f2:	bf00      	nop
 80072f4:	00100002 	.word	0x00100002
 80072f8:	ffff0000 	.word	0xffff0000
 80072fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800730e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007374:	e0b8      	b.n	80074e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2200      	movs	r2, #0
 800737e:	4966      	ldr	r1, [pc, #408]	; (8007518 <HAL_I2C_Mem_Read+0x448>)
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fa49 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e0bf      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	2200      	movs	r2, #0
 80073da:	494f      	ldr	r1, [pc, #316]	; (8007518 <HAL_I2C_Mem_Read+0x448>)
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fa1b 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e091      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007460:	e042      	b.n	80074e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fb2e 	bl	8007ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e04c      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d118      	bne.n	80074e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f47f aec2 	bne.w	8007276 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	e000      	b.n	8007510 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800750e:	2302      	movs	r3, #2
  }
}
 8007510:	4618      	mov	r0, r3
 8007512:	3728      	adds	r7, #40	; 0x28
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	00010004 	.word	0x00010004

0800751c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	4608      	mov	r0, r1
 8007526:	4611      	mov	r1, r2
 8007528:	461a      	mov	r2, r3
 800752a:	4603      	mov	r3, r0
 800752c:	817b      	strh	r3, [r7, #10]
 800752e:	460b      	mov	r3, r1
 8007530:	813b      	strh	r3, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	2200      	movs	r2, #0
 800754e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f960 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00d      	beq.n	800757a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756c:	d103      	bne.n	8007576 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007574:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e05f      	b.n	800763a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800757a:	897b      	ldrh	r3, [r7, #10]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	492d      	ldr	r1, [pc, #180]	; (8007644 <I2C_RequestMemoryWrite+0x128>)
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f998 	bl	80078c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e04c      	b.n	800763a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b8:	6a39      	ldr	r1, [r7, #32]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fa02 	bl	80079c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00d      	beq.n	80075e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d107      	bne.n	80075de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e02b      	b.n	800763a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d105      	bne.n	80075f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075e8:	893b      	ldrh	r3, [r7, #8]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	611a      	str	r2, [r3, #16]
 80075f2:	e021      	b.n	8007638 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075f4:	893b      	ldrh	r3, [r7, #8]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007604:	6a39      	ldr	r1, [r7, #32]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f9dc 	bl	80079c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00d      	beq.n	800762e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	2b04      	cmp	r3, #4
 8007618:	d107      	bne.n	800762a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e005      	b.n	800763a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800762e:	893b      	ldrh	r3, [r7, #8]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	00010002 	.word	0x00010002

08007648 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	4608      	mov	r0, r1
 8007652:	4611      	mov	r1, r2
 8007654:	461a      	mov	r2, r3
 8007656:	4603      	mov	r3, r0
 8007658:	817b      	strh	r3, [r7, #10]
 800765a:	460b      	mov	r3, r1
 800765c:	813b      	strh	r3, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007670:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007680:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	2200      	movs	r2, #0
 800768a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f8c2 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00d      	beq.n	80076b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a8:	d103      	bne.n	80076b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e0aa      	b.n	800780c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076b6:	897b      	ldrh	r3, [r7, #10]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	6a3a      	ldr	r2, [r7, #32]
 80076ca:	4952      	ldr	r1, [pc, #328]	; (8007814 <I2C_RequestMemoryRead+0x1cc>)
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 f8fa 	bl	80078c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e097      	b.n	800780c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f4:	6a39      	ldr	r1, [r7, #32]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f964 	bl	80079c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	2b04      	cmp	r3, #4
 8007708:	d107      	bne.n	800771a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007718:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e076      	b.n	800780c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d105      	bne.n	8007730 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	611a      	str	r2, [r3, #16]
 800772e:	e021      	b.n	8007774 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	b29b      	uxth	r3, r3
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800773e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007740:	6a39      	ldr	r1, [r7, #32]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f93e 	bl	80079c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	2b04      	cmp	r3, #4
 8007754:	d107      	bne.n	8007766 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007764:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e050      	b.n	800780c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800776a:	893b      	ldrh	r3, [r7, #8]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007776:	6a39      	ldr	r1, [r7, #32]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f923 	bl	80079c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00d      	beq.n	80077a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	2b04      	cmp	r3, #4
 800778a:	d107      	bne.n	800779c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800779a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e035      	b.n	800780c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f82b 	bl	8007818 <I2C_WaitOnFlagUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d6:	d103      	bne.n	80077e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e013      	b.n	800780c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077e4:	897b      	ldrh	r3, [r7, #10]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	6a3a      	ldr	r2, [r7, #32]
 80077f8:	4906      	ldr	r1, [pc, #24]	; (8007814 <I2C_RequestMemoryRead+0x1cc>)
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f863 	bl	80078c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	00010002 	.word	0x00010002

08007818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4613      	mov	r3, r2
 8007826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007828:	e025      	b.n	8007876 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d021      	beq.n	8007876 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007832:	f7fd fff7 	bl	8005824 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d116      	bne.n	8007876 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f043 0220 	orr.w	r2, r3, #32
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e023      	b.n	80078be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	0c1b      	lsrs	r3, r3, #16
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d10d      	bne.n	800789c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	43da      	mvns	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf0c      	ite	eq
 8007892:	2301      	moveq	r3, #1
 8007894:	2300      	movne	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	e00c      	b.n	80078b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	43da      	mvns	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4013      	ands	r3, r2
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	bf0c      	ite	eq
 80078ae:	2301      	moveq	r3, #1
 80078b0:	2300      	movne	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d0b6      	beq.n	800782a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078d4:	e051      	b.n	800797a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e4:	d123      	bne.n	800792e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f043 0204 	orr.w	r2, r3, #4
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e046      	b.n	80079bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d021      	beq.n	800797a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007936:	f7fd ff75 	bl	8005824 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d302      	bcc.n	800794c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d116      	bne.n	800797a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	f043 0220 	orr.w	r2, r3, #32
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e020      	b.n	80079bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	0c1b      	lsrs	r3, r3, #16
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10c      	bne.n	800799e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	43da      	mvns	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4013      	ands	r3, r2
 8007990:	b29b      	uxth	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	e00b      	b.n	80079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	43da      	mvns	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4013      	ands	r3, r2
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d18d      	bne.n	80078d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079d0:	e02d      	b.n	8007a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f8ce 	bl	8007b74 <I2C_IsAcknowledgeFailed>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e02d      	b.n	8007a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e8:	d021      	beq.n	8007a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ea:	f7fd ff1b 	bl	8005824 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d302      	bcc.n	8007a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d116      	bne.n	8007a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f043 0220 	orr.w	r2, r3, #32
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e007      	b.n	8007a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d1ca      	bne.n	80079d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a52:	e02d      	b.n	8007ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f88d 	bl	8007b74 <I2C_IsAcknowledgeFailed>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e02d      	b.n	8007ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d021      	beq.n	8007ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6c:	f7fd feda 	bl	8005824 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d302      	bcc.n	8007a82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d116      	bne.n	8007ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	f043 0220 	orr.w	r2, r3, #32
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e007      	b.n	8007ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d1ca      	bne.n	8007a54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ad4:	e042      	b.n	8007b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d119      	bne.n	8007b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0210 	mvn.w	r2, #16
 8007aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e029      	b.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b18:	f7fd fe84 	bl	8005824 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d302      	bcc.n	8007b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d116      	bne.n	8007b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	f043 0220 	orr.w	r2, r3, #32
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e007      	b.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d1b5      	bne.n	8007ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b8a:	d11b      	bne.n	8007bc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	f043 0204 	orr.w	r2, r3, #4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd4:	b08f      	sub	sp, #60	; 0x3c
 8007bd6:	af0a      	add	r7, sp, #40	; 0x28
 8007bd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e116      	b.n	8007e12 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f00a faae 	bl	8012160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2203      	movs	r2, #3
 8007c08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f004 fa09 	bl	800c03a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	603b      	str	r3, [r7, #0]
 8007c2e:	687e      	ldr	r6, [r7, #4]
 8007c30:	466d      	mov	r5, sp
 8007c32:	f106 0410 	add.w	r4, r6, #16
 8007c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c42:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c46:	1d33      	adds	r3, r6, #4
 8007c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c4a:	6838      	ldr	r0, [r7, #0]
 8007c4c:	f004 f8e0 	bl	800be10 <USB_CoreInit>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e0d7      	b.n	8007e12 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2100      	movs	r1, #0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f004 f9f7 	bl	800c05c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	e04a      	b.n	8007d0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c74:	7bfa      	ldrb	r2, [r7, #15]
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	333d      	adds	r3, #61	; 0x3d
 8007c84:	2201      	movs	r2, #1
 8007c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007c88:	7bfa      	ldrb	r2, [r7, #15]
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	333c      	adds	r3, #60	; 0x3c
 8007c98:	7bfa      	ldrb	r2, [r7, #15]
 8007c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007c9c:	7bfa      	ldrb	r2, [r7, #15]
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	b298      	uxth	r0, r3
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	3342      	adds	r3, #66	; 0x42
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cb4:	7bfa      	ldrb	r2, [r7, #15]
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	333f      	adds	r3, #63	; 0x3f
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007cc8:	7bfa      	ldrb	r2, [r7, #15]
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	3344      	adds	r3, #68	; 0x44
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007cdc:	7bfa      	ldrb	r2, [r7, #15]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	3348      	adds	r3, #72	; 0x48
 8007cec:	2200      	movs	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007cf0:	7bfa      	ldrb	r2, [r7, #15]
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	3350      	adds	r3, #80	; 0x50
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	3301      	adds	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	7bfa      	ldrb	r2, [r7, #15]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d3af      	bcc.n	8007c74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
 8007d18:	e044      	b.n	8007da4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d1a:	7bfa      	ldrb	r2, [r7, #15]
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d30:	7bfa      	ldrb	r2, [r7, #15]
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	4613      	mov	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d46:	7bfa      	ldrb	r2, [r7, #15]
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d5c:	7bfa      	ldrb	r2, [r7, #15]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d72:	7bfa      	ldrb	r2, [r7, #15]
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	1a9b      	subs	r3, r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d88:	7bfa      	ldrb	r2, [r7, #15]
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	3301      	adds	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
 8007da4:	7bfa      	ldrb	r2, [r7, #15]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d3b5      	bcc.n	8007d1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	687e      	ldr	r6, [r7, #4]
 8007db6:	466d      	mov	r5, sp
 8007db8:	f106 0410 	add.w	r4, r6, #16
 8007dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007dc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007dcc:	1d33      	adds	r3, r6, #4
 8007dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dd0:	6838      	ldr	r0, [r7, #0]
 8007dd2:	f004 f96d 	bl	800c0b0 <USB_DevInit>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e014      	b.n	8007e12 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d102      	bne.n	8007e06 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f891 	bl	8008f28 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f005 f9a8 	bl	800d160 <USB_DevDisconnect>

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_PCD_Start+0x1c>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e020      	b.n	8007e78 <HAL_PCD_Start+0x5e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d109      	bne.n	8007e5a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d005      	beq.n	8007e5a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f004 f8da 	bl	800c018 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f005 f958 	bl	800d11e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007e80:	b590      	push	{r4, r7, lr}
 8007e82:	b08d      	sub	sp, #52	; 0x34
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f005 fa16 	bl	800d2c8 <USB_GetMode>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 83ca 	bne.w	8008638 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f005 f97a 	bl	800d1a2 <USB_ReadInterrupts>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 83c0 	beq.w	8008636 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f005 f971 	bl	800d1a2 <USB_ReadInterrupts>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d107      	bne.n	8007eda <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695a      	ldr	r2, [r3, #20]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f002 0202 	and.w	r2, r2, #2
 8007ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f005 f95f 	bl	800d1a2 <USB_ReadInterrupts>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f003 0310 	and.w	r3, r3, #16
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	d161      	bne.n	8007fb2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	699a      	ldr	r2, [r3, #24]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0210 	bic.w	r2, r2, #16
 8007efc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f003 020f 	and.w	r2, r3, #15
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	1a9b      	subs	r3, r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	0c5b      	lsrs	r3, r3, #17
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d124      	bne.n	8007f74 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d035      	beq.n	8007fa2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	091b      	lsrs	r3, r3, #4
 8007f3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	461a      	mov	r2, r3
 8007f48:	6a38      	ldr	r0, [r7, #32]
 8007f4a:	f004 ffc5 	bl	800ced8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	091b      	lsrs	r3, r3, #4
 8007f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f5a:	441a      	add	r2, r3
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	699a      	ldr	r2, [r3, #24]
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	091b      	lsrs	r3, r3, #4
 8007f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f6c:	441a      	add	r2, r3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	619a      	str	r2, [r3, #24]
 8007f72:	e016      	b.n	8007fa2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	0c5b      	lsrs	r3, r3, #17
 8007f78:	f003 030f 	and.w	r3, r3, #15
 8007f7c:	2b06      	cmp	r3, #6
 8007f7e:	d110      	bne.n	8007fa2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f86:	2208      	movs	r2, #8
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6a38      	ldr	r0, [r7, #32]
 8007f8c:	f004 ffa4 	bl	800ced8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	699a      	ldr	r2, [r3, #24]
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	091b      	lsrs	r3, r3, #4
 8007f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f9c:	441a      	add	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699a      	ldr	r2, [r3, #24]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0210 	orr.w	r2, r2, #16
 8007fb0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f005 f8f3 	bl	800d1a2 <USB_ReadInterrupts>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fc6:	d16e      	bne.n	80080a6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f005 f8f9 	bl	800d1c8 <USB_ReadDevAllOutEpInterrupt>
 8007fd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007fd8:	e062      	b.n	80080a0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d057      	beq.n	8008094 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f005 f91e 	bl	800d230 <USB_ReadDevOutEPInterrupt>
 8007ff4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00c      	beq.n	800801a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	461a      	mov	r2, r3
 800800e:	2301      	movs	r3, #1
 8008010:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fddd 	bl	8008bd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f003 0308 	and.w	r3, r3, #8
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00c      	beq.n	800803e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008030:	461a      	mov	r2, r3
 8008032:	2308      	movs	r3, #8
 8008034:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fed7 	bl	8008dec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008054:	461a      	mov	r2, r3
 8008056:	2310      	movs	r3, #16
 8008058:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b00      	cmp	r3, #0
 8008062:	d008      	beq.n	8008076 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	461a      	mov	r2, r3
 8008072:	2320      	movs	r3, #32
 8008074:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	461a      	mov	r2, r3
 800808e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008092:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	3301      	adds	r3, #1
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	085b      	lsrs	r3, r3, #1
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d199      	bne.n	8007fda <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f005 f879 	bl	800d1a2 <USB_ReadInterrupts>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080ba:	f040 80c0 	bne.w	800823e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f005 f89a 	bl	800d1fc <USB_ReadDevAllInEpInterrupt>
 80080c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80080ce:	e0b2      	b.n	8008236 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80a7 	beq.w	800822a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	4611      	mov	r1, r2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f005 f8c0 	bl	800d26c <USB_ReadDevInEPInterrupt>
 80080ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d057      	beq.n	80081a8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	2201      	movs	r2, #1
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	43db      	mvns	r3, r3
 8008112:	69f9      	ldr	r1, [r7, #28]
 8008114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008118:	4013      	ands	r3, r2
 800811a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008128:	461a      	mov	r2, r3
 800812a:	2301      	movs	r3, #1
 800812c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d132      	bne.n	800819c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813a:	4613      	mov	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	3348      	adds	r3, #72	; 0x48
 8008146:	6819      	ldr	r1, [r3, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814c:	4613      	mov	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4403      	add	r3, r0
 8008156:	3344      	adds	r3, #68	; 0x44
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4419      	add	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008160:	4613      	mov	r3, r2
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4403      	add	r3, r0
 800816a:	3348      	adds	r3, #72	; 0x48
 800816c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	d113      	bne.n	800819c <HAL_PCD_IRQHandler+0x31c>
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008178:	4613      	mov	r3, r2
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	3350      	adds	r3, #80	; 0x50
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d108      	bne.n	800819c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008194:	461a      	mov	r2, r3
 8008196:	2101      	movs	r1, #1
 8008198:	f005 f8c8 	bl	800d32c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f00a f85d 	bl	8012262 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f003 0308 	and.w	r3, r3, #8
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081be:	461a      	mov	r2, r3
 80081c0:	2308      	movs	r3, #8
 80081c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f003 0310 	and.w	r3, r3, #16
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081da:	461a      	mov	r2, r3
 80081dc:	2310      	movs	r3, #16
 80081de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f6:	461a      	mov	r2, r3
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	461a      	mov	r2, r3
 8008214:	2302      	movs	r3, #2
 8008216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fc48 	bl	8008aba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	3301      	adds	r3, #1
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f af49 	bne.w	80080d0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f004 ffad 	bl	800d1a2 <USB_ReadInterrupts>
 8008248:	4603      	mov	r3, r0
 800824a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800824e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008252:	d122      	bne.n	800829a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800826e:	2b01      	cmp	r3, #1
 8008270:	d108      	bne.n	8008284 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f00a fa3f 	bl	8012700 <HAL_PCDEx_LPM_Callback>
 8008282:	e002      	b.n	800828a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f00a f863 	bl	8012350 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f004 ff7f 	bl	800d1a2 <USB_ReadInterrupts>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ae:	d112      	bne.n	80082d6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d102      	bne.n	80082c6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f00a f81f 	bl	8012304 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80082d4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f004 ff61 	bl	800d1a2 <USB_ReadInterrupts>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082ea:	d121      	bne.n	8008330 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80082fa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008302:	2b00      	cmp	r3, #0
 8008304:	d111      	bne.n	800832a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008314:	089b      	lsrs	r3, r3, #2
 8008316:	f003 020f 	and.w	r2, r3, #15
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008320:	2101      	movs	r1, #1
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f00a f9ec 	bl	8012700 <HAL_PCDEx_LPM_Callback>
 8008328:	e002      	b.n	8008330 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f009 ffea 	bl	8012304 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f004 ff34 	bl	800d1a2 <USB_ReadInterrupts>
 800833a:	4603      	mov	r3, r0
 800833c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008344:	f040 80c7 	bne.w	80084d6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2110      	movs	r1, #16
 8008362:	4618      	mov	r0, r3
 8008364:	f004 f802 	bl	800c36c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008368:	2300      	movs	r3, #0
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836c:	e056      	b.n	800841c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837a:	461a      	mov	r2, r3
 800837c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008380:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008392:	0151      	lsls	r1, r2, #5
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	440a      	add	r2, r1
 8008398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800839c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083a0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b2:	0151      	lsls	r1, r2, #5
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	440a      	add	r2, r1
 80083b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ce:	461a      	mov	r2, r3
 80083d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e6:	0151      	lsls	r1, r2, #5
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	440a      	add	r2, r1
 80083ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	440a      	add	r2, r1
 800840c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008410:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008414:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	3301      	adds	r3, #1
 800841a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008422:	429a      	cmp	r2, r3
 8008424:	d3a3      	bcc.n	800836e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008434:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008438:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	2b00      	cmp	r3, #0
 8008440:	d016      	beq.n	8008470 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008452:	f043 030b 	orr.w	r3, r3, #11
 8008456:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008468:	f043 030b 	orr.w	r3, r3, #11
 800846c:	6453      	str	r3, [r2, #68]	; 0x44
 800846e:	e015      	b.n	800849c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800847e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008482:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008486:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008496:	f043 030b 	orr.w	r3, r3, #11
 800849a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80084c0:	461a      	mov	r2, r3
 80084c2:	f004 ff33 	bl	800d32c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80084d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f004 fe61 	bl	800d1a2 <USB_ReadInterrupts>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ea:	d124      	bne.n	8008536 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f004 fef7 	bl	800d2e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f003 ff97 	bl	800c42e <USB_GetDevSpeed>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681c      	ldr	r4, [r3, #0]
 800850c:	f000 fe66 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 8008510:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008516:	b2db      	uxtb	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	4620      	mov	r0, r4
 800851c:	f003 fcda 	bl	800bed4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f009 fec6 	bl	80122b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695a      	ldr	r2, [r3, #20]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008534:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f004 fe31 	bl	800d1a2 <USB_ReadInterrupts>
 8008540:	4603      	mov	r3, r0
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b08      	cmp	r3, #8
 8008548:	d10a      	bne.n	8008560 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f009 fea3 	bl	8012296 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695a      	ldr	r2, [r3, #20]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f002 0208 	and.w	r2, r2, #8
 800855e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f004 fe1c 	bl	800d1a2 <USB_ReadInterrupts>
 800856a:	4603      	mov	r3, r0
 800856c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008574:	d10f      	bne.n	8008596 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	b2db      	uxtb	r3, r3
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f009 ff05 	bl	8012390 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f004 fe01 	bl	800d1a2 <USB_ReadInterrupts>
 80085a0:	4603      	mov	r3, r0
 80085a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085aa:	d10f      	bne.n	80085cc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f009 fed8 	bl	801236c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	695a      	ldr	r2, [r3, #20]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80085ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f004 fde6 	bl	800d1a2 <USB_ReadInterrupts>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e0:	d10a      	bne.n	80085f8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f009 fee6 	bl	80123b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80085f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f004 fdd0 	bl	800d1a2 <USB_ReadInterrupts>
 8008602:	4603      	mov	r3, r0
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b04      	cmp	r3, #4
 800860a:	d115      	bne.n	8008638 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f009 fed6 	bl	80123d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6859      	ldr	r1, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	430a      	orrs	r2, r1
 8008632:	605a      	str	r2, [r3, #4]
 8008634:	e000      	b.n	8008638 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008636:	bf00      	nop
    }
  }
}
 8008638:	3734      	adds	r7, #52	; 0x34
 800863a:	46bd      	mov	sp, r7
 800863c:	bd90      	pop	{r4, r7, pc}

0800863e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <HAL_PCD_SetAddress+0x1a>
 8008654:	2302      	movs	r3, #2
 8008656:	e013      	b.n	8008680 <HAL_PCD_SetAddress+0x42>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f004 fd2e 	bl	800d0d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	461a      	mov	r2, r3
 8008696:	4603      	mov	r3, r0
 8008698:	70fb      	strb	r3, [r7, #3]
 800869a:	460b      	mov	r3, r1
 800869c:	803b      	strh	r3, [r7, #0]
 800869e:	4613      	mov	r3, r2
 80086a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80086a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da0f      	bge.n	80086ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	4613      	mov	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	3338      	adds	r3, #56	; 0x38
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	3304      	adds	r3, #4
 80086c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	705a      	strb	r2, [r3, #1]
 80086cc:	e00f      	b.n	80086ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	1a9b      	subs	r3, r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80086fa:	883a      	ldrh	r2, [r7, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	78ba      	ldrb	r2, [r7, #2]
 8008704:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008718:	78bb      	ldrb	r3, [r7, #2]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d102      	bne.n	8008724 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_PCD_EP_Open+0xaa>
 800872e:	2302      	movs	r3, #2
 8008730:	e00e      	b.n	8008750 <HAL_PCD_EP_Open+0xc8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	4618      	mov	r0, r3
 8008742:	f003 fe99 	bl	800c478 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800874e:	7afb      	ldrb	r3, [r7, #11]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008768:	2b00      	cmp	r3, #0
 800876a:	da0f      	bge.n	800878c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	f003 020f 	and.w	r2, r3, #15
 8008772:	4613      	mov	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	3338      	adds	r3, #56	; 0x38
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4413      	add	r3, r2
 8008780:	3304      	adds	r3, #4
 8008782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	705a      	strb	r2, [r3, #1]
 800878a:	e00f      	b.n	80087ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	3304      	adds	r3, #4
 80087a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_PCD_EP_Close+0x6e>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e00e      	b.n	80087e4 <HAL_PCD_EP_Close+0x8c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f003 fed7 	bl	800c588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	607a      	str	r2, [r7, #4]
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	460b      	mov	r3, r1
 80087fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	f003 020f 	and.w	r2, r3, #15
 8008802:	4613      	mov	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	3304      	adds	r3, #4
 8008814:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2200      	movs	r2, #0
 8008826:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2200      	movs	r2, #0
 800882c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800882e:	7afb      	ldrb	r3, [r7, #11]
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	b2da      	uxtb	r2, r3
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d102      	bne.n	8008848 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008848:	7afb      	ldrb	r3, [r7, #11]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	6979      	ldr	r1, [r7, #20]
 8008860:	f004 f9b2 	bl	800cbc8 <USB_EP0StartXfer>
 8008864:	e008      	b.n	8008878 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	6979      	ldr	r1, [r7, #20]
 8008874:	f003 ff64 	bl	800c740 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	f003 020f 	and.w	r2, r3, #15
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	4613      	mov	r3, r2
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	440b      	add	r3, r1
 80088a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80088a4:	681b      	ldr	r3, [r3, #0]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b086      	sub	sp, #24
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	460b      	mov	r3, r1
 80088c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088c2:	7afb      	ldrb	r3, [r7, #11]
 80088c4:	f003 020f 	and.w	r2, r3, #15
 80088c8:	4613      	mov	r3, r2
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	1a9b      	subs	r3, r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	3338      	adds	r3, #56	; 0x38
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4413      	add	r3, r2
 80088d6:	3304      	adds	r3, #4
 80088d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2200      	movs	r2, #0
 80088ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2201      	movs	r2, #1
 80088f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d102      	bne.n	800890c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	6979      	ldr	r1, [r7, #20]
 8008924:	f004 f950 	bl	800cbc8 <USB_EP0StartXfer>
 8008928:	e008      	b.n	800893c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	b2db      	uxtb	r3, r3
 8008934:	461a      	mov	r2, r3
 8008936:	6979      	ldr	r1, [r7, #20]
 8008938:	f003 ff02 	bl	800c740 <USB_EPStartXfer>
  }

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	f003 020f 	and.w	r2, r3, #15
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	429a      	cmp	r2, r3
 800895e:	d901      	bls.n	8008964 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e050      	b.n	8008a06 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008968:	2b00      	cmp	r3, #0
 800896a:	da0f      	bge.n	800898c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	f003 020f 	and.w	r2, r3, #15
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	1a9b      	subs	r3, r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3338      	adds	r3, #56	; 0x38
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4413      	add	r3, r2
 8008980:	3304      	adds	r3, #4
 8008982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	705a      	strb	r2, [r3, #1]
 800898a:	e00d      	b.n	80089a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800898c:	78fa      	ldrb	r2, [r7, #3]
 800898e:	4613      	mov	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	3304      	adds	r3, #4
 80089a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	f003 030f 	and.w	r3, r3, #15
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_PCD_EP_SetStall+0x82>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e01e      	b.n	8008a06 <HAL_PCD_EP_SetStall+0xc0>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68f9      	ldr	r1, [r7, #12]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f004 faa7 	bl	800cf2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	b2d9      	uxtb	r1, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089f6:	461a      	mov	r2, r3
 80089f8:	f004 fc98 	bl	800d32c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	f003 020f 	and.w	r2, r3, #15
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d901      	bls.n	8008a2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e042      	b.n	8008ab2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da0f      	bge.n	8008a54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	f003 020f 	and.w	r2, r3, #15
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	3338      	adds	r3, #56	; 0x38
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	4413      	add	r3, r2
 8008a48:	3304      	adds	r3, #4
 8008a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	705a      	strb	r2, [r3, #1]
 8008a52:	e00f      	b.n	8008a74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	f003 020f 	and.w	r2, r3, #15
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	1a9b      	subs	r3, r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	4413      	add	r3, r2
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_PCD_EP_ClrStall+0x86>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e00e      	b.n	8008ab2 <HAL_PCD_EP_ClrStall+0xa4>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68f9      	ldr	r1, [r7, #12]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f004 faaf 	bl	800d006 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b08a      	sub	sp, #40	; 0x28
 8008abe:	af02      	add	r7, sp, #8
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	3338      	adds	r3, #56	; 0x38
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	3304      	adds	r3, #4
 8008ae0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d901      	bls.n	8008af2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e06c      	b.n	8008bcc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	695a      	ldr	r2, [r3, #20]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d902      	bls.n	8008b0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	3303      	adds	r3, #3
 8008b12:	089b      	lsrs	r3, r3, #2
 8008b14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b16:	e02b      	b.n	8008b70 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	695a      	ldr	r2, [r3, #20]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d902      	bls.n	8008b34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	3303      	adds	r3, #3
 8008b38:	089b      	lsrs	r3, r3, #2
 8008b3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	68d9      	ldr	r1, [r3, #12]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4603      	mov	r3, r0
 8008b52:	6978      	ldr	r0, [r7, #20]
 8008b54:	f004 f98b 	bl	800ce6e <USB_WritePacket>

    ep->xfer_buff  += len;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	441a      	add	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d809      	bhi.n	8008b9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699a      	ldr	r2, [r3, #24]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d203      	bcs.n	8008b9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1be      	bne.n	8008b18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d811      	bhi.n	8008bca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	2201      	movs	r2, #1
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	6939      	ldr	r1, [r7, #16]
 8008bc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3720      	adds	r7, #32
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	333c      	adds	r3, #60	; 0x3c
 8008bec:	3304      	adds	r3, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	f040 80a0 	bne.w	8008d4c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d015      	beq.n	8008c42 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4a72      	ldr	r2, [pc, #456]	; (8008de4 <PCD_EP_OutXfrComplete_int+0x210>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	f240 80dd 	bls.w	8008dda <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 80d7 	beq.w	8008dda <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c3e:	6093      	str	r3, [r2, #8]
 8008c40:	e0cb      	b.n	8008dda <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2320      	movs	r3, #32
 8008c5c:	6093      	str	r3, [r2, #8]
 8008c5e:	e0bc      	b.n	8008dda <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f040 80b7 	bne.w	8008dda <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4a5d      	ldr	r2, [pc, #372]	; (8008de4 <PCD_EP_OutXfrComplete_int+0x210>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d90f      	bls.n	8008c94 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c90:	6093      	str	r3, [r2, #8]
 8008c92:	e0a2      	b.n	8008dda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ca6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	0159      	lsls	r1, r3, #5
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	440b      	add	r3, r1
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008cba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4403      	add	r3, r0
 8008cca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008cce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ce2:	6819      	ldr	r1, [r3, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4403      	add	r3, r0
 8008cf2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4419      	add	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4403      	add	r3, r0
 8008d08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d0c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d114      	bne.n	8008d3e <PCD_EP_OutXfrComplete_int+0x16a>
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d108      	bne.n	8008d3e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d36:	461a      	mov	r2, r3
 8008d38:	2101      	movs	r1, #1
 8008d3a:	f004 faf7 	bl	800d32c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f009 fa71 	bl	801222c <HAL_PCD_DataOutStageCallback>
 8008d4a:	e046      	b.n	8008dda <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a26      	ldr	r2, [pc, #152]	; (8008de8 <PCD_EP_OutXfrComplete_int+0x214>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d124      	bne.n	8008d9e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d70:	6093      	str	r3, [r2, #8]
 8008d72:	e032      	b.n	8008dda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d008      	beq.n	8008d90 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f009 fa48 	bl	801222c <HAL_PCD_DataOutStageCallback>
 8008d9c:	e01d      	b.n	8008dda <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d114      	bne.n	8008dce <PCD_EP_OutXfrComplete_int+0x1fa>
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d108      	bne.n	8008dce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2100      	movs	r1, #0
 8008dca:	f004 faaf 	bl	800d32c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f009 fa29 	bl	801222c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	4f54300a 	.word	0x4f54300a
 8008de8:	4f54310a 	.word	0x4f54310a

08008dec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	333c      	adds	r3, #60	; 0x3c
 8008e04:	3304      	adds	r3, #4
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4a15      	ldr	r2, [pc, #84]	; (8008e74 <PCD_EP_OutSetupPacket_int+0x88>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d90e      	bls.n	8008e40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d009      	beq.n	8008e40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f009 f9e1 	bl	8012208 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4a0a      	ldr	r2, [pc, #40]	; (8008e74 <PCD_EP_OutSetupPacket_int+0x88>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d90c      	bls.n	8008e68 <PCD_EP_OutSetupPacket_int+0x7c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d108      	bne.n	8008e68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e60:	461a      	mov	r2, r3
 8008e62:	2101      	movs	r1, #1
 8008e64:	f004 fa62 	bl	800d32c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	4f54300a 	.word	0x4f54300a

08008e78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
 8008e84:	4613      	mov	r3, r2
 8008e86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d107      	bne.n	8008ea6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008e96:	883b      	ldrh	r3, [r7, #0]
 8008e98:	0419      	lsls	r1, r3, #16
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ea4:	e028      	b.n	8008ef8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	0c1b      	lsrs	r3, r3, #16
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	73fb      	strb	r3, [r7, #15]
 8008eb8:	e00d      	b.n	8008ed6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	3340      	adds	r3, #64	; 0x40
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4413      	add	r3, r2
 8008ece:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	73fb      	strb	r3, [r7, #15]
 8008ed6:	7bfa      	ldrb	r2, [r7, #15]
 8008ed8:	78fb      	ldrb	r3, [r7, #3]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d3ec      	bcc.n	8008eba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ee0:	883b      	ldrh	r3, [r7, #0]
 8008ee2:	0418      	lsls	r0, r3, #16
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6819      	ldr	r1, [r3, #0]
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	4302      	orrs	r2, r0
 8008ef0:	3340      	adds	r3, #64	; 0x40
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	887a      	ldrh	r2, [r7, #2]
 8008f18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f5a:	f043 0303 	orr.w	r3, r3, #3
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	603b      	str	r3, [r7, #0]
 8008f7e:	4b20      	ldr	r3, [pc, #128]	; (8009000 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	4a1f      	ldr	r2, [pc, #124]	; (8009000 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f88:	6413      	str	r3, [r2, #64]	; 0x40
 8008f8a:	4b1d      	ldr	r3, [pc, #116]	; (8009000 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f96:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <HAL_PWREx_EnableOverDrive+0x94>)
 8008f98:	2201      	movs	r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f9c:	f7fc fc42 	bl	8005824 <HAL_GetTick>
 8008fa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008fa2:	e009      	b.n	8008fb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008fa4:	f7fc fc3e 	bl	8005824 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fb2:	d901      	bls.n	8008fb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e01f      	b.n	8008ff8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008fb8:	4b13      	ldr	r3, [pc, #76]	; (8009008 <HAL_PWREx_EnableOverDrive+0x98>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc4:	d1ee      	bne.n	8008fa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008fc6:	4b11      	ldr	r3, [pc, #68]	; (800900c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fc8:	2201      	movs	r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fcc:	f7fc fc2a 	bl	8005824 <HAL_GetTick>
 8008fd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008fd2:	e009      	b.n	8008fe8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008fd4:	f7fc fc26 	bl	8005824 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fe2:	d901      	bls.n	8008fe8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e007      	b.n	8008ff8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <HAL_PWREx_EnableOverDrive+0x98>)
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff4:	d1ee      	bne.n	8008fd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	40023800 	.word	0x40023800
 8009004:	420e0040 	.word	0x420e0040
 8009008:	40007000 	.word	0x40007000
 800900c:	420e0044 	.word	0x420e0044

08009010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e0cc      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009024:	4b68      	ldr	r3, [pc, #416]	; (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 030f 	and.w	r3, r3, #15
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d90c      	bls.n	800904c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009032:	4b65      	ldr	r3, [pc, #404]	; (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800903a:	4b63      	ldr	r3, [pc, #396]	; (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d001      	beq.n	800904c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e0b8      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d020      	beq.n	800909a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009064:	4b59      	ldr	r3, [pc, #356]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	4a58      	ldr	r2, [pc, #352]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800906a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800906e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800907c:	4b53      	ldr	r3, [pc, #332]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	4a52      	ldr	r2, [pc, #328]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009088:	4b50      	ldr	r3, [pc, #320]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	494d      	ldr	r1, [pc, #308]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009096:	4313      	orrs	r3, r2
 8009098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d044      	beq.n	8009130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d107      	bne.n	80090be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ae:	4b47      	ldr	r3, [pc, #284]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d119      	bne.n	80090ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e07f      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d003      	beq.n	80090ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d107      	bne.n	80090de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ce:	4b3f      	ldr	r3, [pc, #252]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d109      	bne.n	80090ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e06f      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090de:	4b3b      	ldr	r3, [pc, #236]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e067      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090ee:	4b37      	ldr	r3, [pc, #220]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f023 0203 	bic.w	r2, r3, #3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	4934      	ldr	r1, [pc, #208]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009100:	f7fc fb90 	bl	8005824 <HAL_GetTick>
 8009104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009106:	e00a      	b.n	800911e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009108:	f7fc fb8c 	bl	8005824 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f241 3288 	movw	r2, #5000	; 0x1388
 8009116:	4293      	cmp	r3, r2
 8009118:	d901      	bls.n	800911e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e04f      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800911e:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 020c 	and.w	r2, r3, #12
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	429a      	cmp	r2, r3
 800912e:	d1eb      	bne.n	8009108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d20c      	bcs.n	8009158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800913e:	4b22      	ldr	r3, [pc, #136]	; (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009146:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d001      	beq.n	8009158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e032      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d008      	beq.n	8009176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009164:	4b19      	ldr	r3, [pc, #100]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	4916      	ldr	r1, [pc, #88]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009172:	4313      	orrs	r3, r2
 8009174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d009      	beq.n	8009196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009182:	4b12      	ldr	r3, [pc, #72]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	490e      	ldr	r1, [pc, #56]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009192:	4313      	orrs	r3, r2
 8009194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009196:	f000 fbb1 	bl	80098fc <HAL_RCC_GetSysClockFreq>
 800919a:	4601      	mov	r1, r0
 800919c:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	091b      	lsrs	r3, r3, #4
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	4a0a      	ldr	r2, [pc, #40]	; (80091d0 <HAL_RCC_ClockConfig+0x1c0>)
 80091a8:	5cd3      	ldrb	r3, [r2, r3]
 80091aa:	fa21 f303 	lsr.w	r3, r1, r3
 80091ae:	4a09      	ldr	r2, [pc, #36]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 80091b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fc f958 	bl	800546c <HAL_InitTick>

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	40023c00 	.word	0x40023c00
 80091cc:	40023800 	.word	0x40023800
 80091d0:	080181a0 	.word	0x080181a0
 80091d4:	20000280 	.word	0x20000280
 80091d8:	20000284 	.word	0x20000284

080091dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091e0:	4b03      	ldr	r3, [pc, #12]	; (80091f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091e2:	681b      	ldr	r3, [r3, #0]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20000280 	.word	0x20000280

080091f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091f8:	f7ff fff0 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 80091fc:	4601      	mov	r1, r0
 80091fe:	4b05      	ldr	r3, [pc, #20]	; (8009214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	0a9b      	lsrs	r3, r3, #10
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	4a03      	ldr	r2, [pc, #12]	; (8009218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800920a:	5cd3      	ldrb	r3, [r2, r3]
 800920c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009210:	4618      	mov	r0, r3
 8009212:	bd80      	pop	{r7, pc}
 8009214:	40023800 	.word	0x40023800
 8009218:	080181b0 	.word	0x080181b0

0800921c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009220:	f7ff ffdc 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 8009224:	4601      	mov	r1, r0
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	0b5b      	lsrs	r3, r3, #13
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	4a03      	ldr	r2, [pc, #12]	; (8009240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009232:	5cd3      	ldrb	r3, [r2, r3]
 8009234:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009238:	4618      	mov	r0, r3
 800923a:	bd80      	pop	{r7, pc}
 800923c:	40023800 	.word	0x40023800
 8009240:	080181b0 	.word	0x080181b0

08009244 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	220f      	movs	r2, #15
 8009252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009254:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f003 0203 	and.w	r2, r3, #3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009260:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800926c:	4b0c      	ldr	r3, [pc, #48]	; (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009278:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	08db      	lsrs	r3, r3, #3
 800927e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009286:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <HAL_RCC_GetClockConfig+0x60>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 020f 	and.w	r2, r3, #15
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	601a      	str	r2, [r3, #0]
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	40023800 	.word	0x40023800
 80092a4:	40023c00 	.word	0x40023c00

080092a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08c      	sub	sp, #48	; 0x30
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d010      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80092e0:	4b6f      	ldr	r3, [pc, #444]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80092e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092e6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	496c      	ldr	r1, [pc, #432]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80092fe:	2301      	movs	r3, #1
 8009300:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d010      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800930e:	4b64      	ldr	r3, [pc, #400]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009314:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931c:	4960      	ldr	r1, [pc, #384]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800931e:	4313      	orrs	r3, r2
 8009320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800932c:	2301      	movs	r3, #1
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d017      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800933c:	4b58      	ldr	r3, [pc, #352]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800933e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934a:	4955      	ldr	r1, [pc, #340]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800934c:	4313      	orrs	r3, r2
 800934e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800935a:	d101      	bne.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800935c:	2301      	movs	r3, #1
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8009368:	2301      	movs	r3, #1
 800936a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0308 	and.w	r3, r3, #8
 8009374:	2b00      	cmp	r3, #0
 8009376:	d017      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009378:	4b49      	ldr	r3, [pc, #292]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800937a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800937e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009386:	4946      	ldr	r1, [pc, #280]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009388:	4313      	orrs	r3, r2
 800938a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009396:	d101      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009398:	2301      	movs	r3, #1
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80093a4:	2301      	movs	r3, #1
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 808a 	beq.w	80094ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	4b39      	ldr	r3, [pc, #228]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	4a38      	ldr	r2, [pc, #224]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80093c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c4:	6413      	str	r3, [r2, #64]	; 0x40
 80093c6:	4b36      	ldr	r3, [pc, #216]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ce:	60bb      	str	r3, [r7, #8]
 80093d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80093d2:	4b34      	ldr	r3, [pc, #208]	; (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a33      	ldr	r2, [pc, #204]	; (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80093d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093de:	f7fc fa21 	bl	8005824 <HAL_GetTick>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80093e4:	e008      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80093e6:	f7fc fa1d 	bl	8005824 <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d901      	bls.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e278      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0f0      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009404:	4b26      	ldr	r3, [pc, #152]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800940c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d02f      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941c:	6a3a      	ldr	r2, [r7, #32]
 800941e:	429a      	cmp	r2, r3
 8009420:	d028      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009422:	4b1f      	ldr	r3, [pc, #124]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800942a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800942c:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800942e:	2201      	movs	r2, #1
 8009430:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009432:	4b1d      	ldr	r3, [pc, #116]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009438:	4a19      	ldr	r2, [pc, #100]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800943e:	4b18      	ldr	r3, [pc, #96]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b01      	cmp	r3, #1
 8009448:	d114      	bne.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800944a:	f7fc f9eb 	bl	8005824 <HAL_GetTick>
 800944e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009450:	e00a      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009452:	f7fc f9e7 	bl	8005824 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009460:	4293      	cmp	r3, r2
 8009462:	d901      	bls.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e240      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009468:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800946a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0ee      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800947c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009480:	d114      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8009482:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009496:	4902      	ldr	r1, [pc, #8]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009498:	4313      	orrs	r3, r2
 800949a:	608b      	str	r3, [r1, #8]
 800949c:	e00c      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800949e:	bf00      	nop
 80094a0:	40023800 	.word	0x40023800
 80094a4:	40007000 	.word	0x40007000
 80094a8:	42470e40 	.word	0x42470e40
 80094ac:	4b4a      	ldr	r3, [pc, #296]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	4a49      	ldr	r2, [pc, #292]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80094b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80094b6:	6093      	str	r3, [r2, #8]
 80094b8:	4b47      	ldr	r3, [pc, #284]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80094ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094c4:	4944      	ldr	r1, [pc, #272]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0310 	and.w	r3, r3, #16
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d004      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80094dc:	4b3f      	ldr	r3, [pc, #252]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80094de:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00a      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80094ec:	4b3a      	ldr	r3, [pc, #232]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80094ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094fa:	4937      	ldr	r1, [pc, #220]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800950e:	4b32      	ldr	r3, [pc, #200]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009514:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800951c:	492e      	ldr	r1, [pc, #184]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800951e:	4313      	orrs	r3, r2
 8009520:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952c:	2b00      	cmp	r3, #0
 800952e:	d011      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009530:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009536:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953e:	4926      	ldr	r1, [pc, #152]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009540:	4313      	orrs	r3, r2
 8009542:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800954e:	d101      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009550:	2301      	movs	r3, #1
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00a      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009560:	4b1d      	ldr	r3, [pc, #116]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009566:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	491a      	ldr	r1, [pc, #104]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009570:	4313      	orrs	r3, r2
 8009572:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800957e:	2b00      	cmp	r3, #0
 8009580:	d011      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8009582:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009588:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009590:	4911      	ldr	r1, [pc, #68]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009592:	4313      	orrs	r3, r2
 8009594:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a0:	d101      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80095a2:	2301      	movs	r3, #1
 80095a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d005      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b4:	f040 80ff 	bne.w	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80095b8:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095be:	f7fc f931 	bl	8005824 <HAL_GetTick>
 80095c2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095c4:	e00e      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80095c6:	f7fc f92d 	bl	8005824 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d907      	bls.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e188      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80095d8:	40023800 	.word	0x40023800
 80095dc:	424711e0 	.word	0x424711e0
 80095e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095e4:	4b7e      	ldr	r3, [pc, #504]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1ea      	bne.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009600:	2b00      	cmp	r3, #0
 8009602:	d009      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800960c:	2b00      	cmp	r3, #0
 800960e:	d028      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009614:	2b00      	cmp	r3, #0
 8009616:	d124      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009618:	4b71      	ldr	r3, [pc, #452]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800961a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800961e:	0c1b      	lsrs	r3, r3, #16
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	3301      	adds	r3, #1
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800962a:	4b6d      	ldr	r3, [pc, #436]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800962c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009630:	0e1b      	lsrs	r3, r3, #24
 8009632:	f003 030f 	and.w	r3, r3, #15
 8009636:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	019b      	lsls	r3, r3, #6
 8009642:	431a      	orrs	r2, r3
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	3b01      	subs	r3, #1
 800964a:	041b      	lsls	r3, r3, #16
 800964c:	431a      	orrs	r2, r3
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	061b      	lsls	r3, r3, #24
 8009652:	431a      	orrs	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	071b      	lsls	r3, r3, #28
 800965a:	4961      	ldr	r1, [pc, #388]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	d004      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009676:	d00a      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009680:	2b00      	cmp	r3, #0
 8009682:	d035      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800968c:	d130      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800968e:	4b54      	ldr	r3, [pc, #336]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	3301      	adds	r3, #1
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80096a0:	4b4f      	ldr	r3, [pc, #316]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80096a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096a6:	0f1b      	lsrs	r3, r3, #28
 80096a8:	f003 0307 	and.w	r3, r3, #7
 80096ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	019b      	lsls	r3, r3, #6
 80096b8:	431a      	orrs	r2, r3
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	085b      	lsrs	r3, r3, #1
 80096be:	3b01      	subs	r3, #1
 80096c0:	041b      	lsls	r3, r3, #16
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	061b      	lsls	r3, r3, #24
 80096ca:	431a      	orrs	r2, r3
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	071b      	lsls	r3, r3, #28
 80096d0:	4943      	ldr	r1, [pc, #268]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80096d8:	4b41      	ldr	r3, [pc, #260]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80096da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096de:	f023 021f 	bic.w	r2, r3, #31
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e6:	3b01      	subs	r3, #1
 80096e8:	493d      	ldr	r1, [pc, #244]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d029      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009704:	d124      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009706:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800970c:	0c1b      	lsrs	r3, r3, #16
 800970e:	f003 0303 	and.w	r3, r3, #3
 8009712:	3301      	adds	r3, #1
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009718:	4b31      	ldr	r3, [pc, #196]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800971a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800971e:	0f1b      	lsrs	r3, r3, #28
 8009720:	f003 0307 	and.w	r3, r3, #7
 8009724:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	019b      	lsls	r3, r3, #6
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	085b      	lsrs	r3, r3, #1
 8009738:	3b01      	subs	r3, #1
 800973a:	041b      	lsls	r3, r3, #16
 800973c:	431a      	orrs	r2, r3
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	061b      	lsls	r3, r3, #24
 8009742:	431a      	orrs	r2, r3
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	071b      	lsls	r3, r3, #28
 8009748:	4925      	ldr	r1, [pc, #148]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800974a:	4313      	orrs	r3, r2
 800974c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009758:	2b00      	cmp	r3, #0
 800975a:	d016      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	019b      	lsls	r3, r3, #6
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	085b      	lsrs	r3, r3, #1
 800976e:	3b01      	subs	r3, #1
 8009770:	041b      	lsls	r3, r3, #16
 8009772:	431a      	orrs	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	061b      	lsls	r3, r3, #24
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	071b      	lsls	r3, r3, #28
 8009782:	4917      	ldr	r1, [pc, #92]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009784:	4313      	orrs	r3, r2
 8009786:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800978a:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800978c:	2201      	movs	r2, #1
 800978e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009790:	f7fc f848 	bl	8005824 <HAL_GetTick>
 8009794:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009796:	e008      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009798:	f7fc f844 	bl	8005824 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d901      	bls.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e09f      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f0      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	f040 8095 	bne.w	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80097be:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097c4:	f7fc f82e 	bl	8005824 <HAL_GetTick>
 80097c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80097ca:	e00f      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80097cc:	f7fc f82a 	bl	8005824 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d908      	bls.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e085      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80097de:	bf00      	nop
 80097e0:	40023800 	.word	0x40023800
 80097e4:	42470068 	.word	0x42470068
 80097e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80097ec:	4b41      	ldr	r3, [pc, #260]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f8:	d0e8      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0304 	and.w	r3, r3, #4
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009816:	2b00      	cmp	r3, #0
 8009818:	d02b      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981e:	2b00      	cmp	r3, #0
 8009820:	d127      	bne.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009822:	4b34      	ldr	r3, [pc, #208]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009828:	0c1b      	lsrs	r3, r3, #16
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	3301      	adds	r3, #1
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	699a      	ldr	r2, [r3, #24]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	019b      	lsls	r3, r3, #6
 800983e:	431a      	orrs	r2, r3
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	085b      	lsrs	r3, r3, #1
 8009844:	3b01      	subs	r3, #1
 8009846:	041b      	lsls	r3, r3, #16
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	061b      	lsls	r3, r3, #24
 8009850:	4928      	ldr	r1, [pc, #160]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009852:	4313      	orrs	r3, r2
 8009854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009858:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800985a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800985e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009866:	3b01      	subs	r3, #1
 8009868:	021b      	lsls	r3, r3, #8
 800986a:	4922      	ldr	r1, [pc, #136]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800986c:	4313      	orrs	r3, r2
 800986e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	2b00      	cmp	r3, #0
 800987c:	d01d      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x612>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009886:	d118      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009888:	4b1a      	ldr	r3, [pc, #104]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800988a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988e:	0e1b      	lsrs	r3, r3, #24
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	699a      	ldr	r2, [r3, #24]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	019b      	lsls	r3, r3, #6
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	085b      	lsrs	r3, r3, #1
 80098a8:	3b01      	subs	r3, #1
 80098aa:	041b      	lsls	r3, r3, #16
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	061b      	lsls	r3, r3, #24
 80098b2:	4910      	ldr	r1, [pc, #64]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80098ba:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80098bc:	2201      	movs	r2, #1
 80098be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80098c0:	f7fb ffb0 	bl	8005824 <HAL_GetTick>
 80098c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098c6:	e008      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80098c8:	f7fb ffac 	bl	8005824 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d901      	bls.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e007      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098da:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e6:	d1ef      	bne.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3730      	adds	r7, #48	; 0x30
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	40023800 	.word	0x40023800
 80098f8:	42470070 	.word	0x42470070

080098fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009916:	4bc6      	ldr	r3, [pc, #792]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f003 030c 	and.w	r3, r3, #12
 800991e:	2b0c      	cmp	r3, #12
 8009920:	f200 817e 	bhi.w	8009c20 <HAL_RCC_GetSysClockFreq+0x324>
 8009924:	a201      	add	r2, pc, #4	; (adr r2, 800992c <HAL_RCC_GetSysClockFreq+0x30>)
 8009926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992a:	bf00      	nop
 800992c:	08009961 	.word	0x08009961
 8009930:	08009c21 	.word	0x08009c21
 8009934:	08009c21 	.word	0x08009c21
 8009938:	08009c21 	.word	0x08009c21
 800993c:	08009967 	.word	0x08009967
 8009940:	08009c21 	.word	0x08009c21
 8009944:	08009c21 	.word	0x08009c21
 8009948:	08009c21 	.word	0x08009c21
 800994c:	0800996d 	.word	0x0800996d
 8009950:	08009c21 	.word	0x08009c21
 8009954:	08009c21 	.word	0x08009c21
 8009958:	08009c21 	.word	0x08009c21
 800995c:	08009ac9 	.word	0x08009ac9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009960:	4bb4      	ldr	r3, [pc, #720]	; (8009c34 <HAL_RCC_GetSysClockFreq+0x338>)
 8009962:	613b      	str	r3, [r7, #16]
       break;
 8009964:	e15f      	b.n	8009c26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009966:	4bb4      	ldr	r3, [pc, #720]	; (8009c38 <HAL_RCC_GetSysClockFreq+0x33c>)
 8009968:	613b      	str	r3, [r7, #16]
      break;
 800996a:	e15c      	b.n	8009c26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800996c:	4bb0      	ldr	r3, [pc, #704]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009974:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009976:	4bae      	ldr	r3, [pc, #696]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d04a      	beq.n	8009a18 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009982:	4bab      	ldr	r3, [pc, #684]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	099b      	lsrs	r3, r3, #6
 8009988:	f04f 0400 	mov.w	r4, #0
 800998c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	ea03 0501 	and.w	r5, r3, r1
 8009998:	ea04 0602 	and.w	r6, r4, r2
 800999c:	4629      	mov	r1, r5
 800999e:	4632      	mov	r2, r6
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	f04f 0400 	mov.w	r4, #0
 80099a8:	0154      	lsls	r4, r2, #5
 80099aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80099ae:	014b      	lsls	r3, r1, #5
 80099b0:	4619      	mov	r1, r3
 80099b2:	4622      	mov	r2, r4
 80099b4:	1b49      	subs	r1, r1, r5
 80099b6:	eb62 0206 	sbc.w	r2, r2, r6
 80099ba:	f04f 0300 	mov.w	r3, #0
 80099be:	f04f 0400 	mov.w	r4, #0
 80099c2:	0194      	lsls	r4, r2, #6
 80099c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80099c8:	018b      	lsls	r3, r1, #6
 80099ca:	1a5b      	subs	r3, r3, r1
 80099cc:	eb64 0402 	sbc.w	r4, r4, r2
 80099d0:	f04f 0100 	mov.w	r1, #0
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	00e2      	lsls	r2, r4, #3
 80099da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80099de:	00d9      	lsls	r1, r3, #3
 80099e0:	460b      	mov	r3, r1
 80099e2:	4614      	mov	r4, r2
 80099e4:	195b      	adds	r3, r3, r5
 80099e6:	eb44 0406 	adc.w	r4, r4, r6
 80099ea:	f04f 0100 	mov.w	r1, #0
 80099ee:	f04f 0200 	mov.w	r2, #0
 80099f2:	0262      	lsls	r2, r4, #9
 80099f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80099f8:	0259      	lsls	r1, r3, #9
 80099fa:	460b      	mov	r3, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	4618      	mov	r0, r3
 8009a00:	4621      	mov	r1, r4
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f04f 0400 	mov.w	r4, #0
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4623      	mov	r3, r4
 8009a0c:	f7f7 f95c 	bl	8000cc8 <__aeabi_uldivmod>
 8009a10:	4603      	mov	r3, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	e049      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a18:	4b85      	ldr	r3, [pc, #532]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	099b      	lsrs	r3, r3, #6
 8009a1e:	f04f 0400 	mov.w	r4, #0
 8009a22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009a26:	f04f 0200 	mov.w	r2, #0
 8009a2a:	ea03 0501 	and.w	r5, r3, r1
 8009a2e:	ea04 0602 	and.w	r6, r4, r2
 8009a32:	4629      	mov	r1, r5
 8009a34:	4632      	mov	r2, r6
 8009a36:	f04f 0300 	mov.w	r3, #0
 8009a3a:	f04f 0400 	mov.w	r4, #0
 8009a3e:	0154      	lsls	r4, r2, #5
 8009a40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009a44:	014b      	lsls	r3, r1, #5
 8009a46:	4619      	mov	r1, r3
 8009a48:	4622      	mov	r2, r4
 8009a4a:	1b49      	subs	r1, r1, r5
 8009a4c:	eb62 0206 	sbc.w	r2, r2, r6
 8009a50:	f04f 0300 	mov.w	r3, #0
 8009a54:	f04f 0400 	mov.w	r4, #0
 8009a58:	0194      	lsls	r4, r2, #6
 8009a5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009a5e:	018b      	lsls	r3, r1, #6
 8009a60:	1a5b      	subs	r3, r3, r1
 8009a62:	eb64 0402 	sbc.w	r4, r4, r2
 8009a66:	f04f 0100 	mov.w	r1, #0
 8009a6a:	f04f 0200 	mov.w	r2, #0
 8009a6e:	00e2      	lsls	r2, r4, #3
 8009a70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009a74:	00d9      	lsls	r1, r3, #3
 8009a76:	460b      	mov	r3, r1
 8009a78:	4614      	mov	r4, r2
 8009a7a:	195b      	adds	r3, r3, r5
 8009a7c:	eb44 0406 	adc.w	r4, r4, r6
 8009a80:	f04f 0100 	mov.w	r1, #0
 8009a84:	f04f 0200 	mov.w	r2, #0
 8009a88:	02a2      	lsls	r2, r4, #10
 8009a8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009a8e:	0299      	lsls	r1, r3, #10
 8009a90:	460b      	mov	r3, r1
 8009a92:	4614      	mov	r4, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	4621      	mov	r1, r4
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f04f 0400 	mov.w	r4, #0
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	f7f7 f911 	bl	8000cc8 <__aeabi_uldivmod>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009aac:	4b60      	ldr	r3, [pc, #384]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	0c1b      	lsrs	r3, r3, #16
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac4:	613b      	str	r3, [r7, #16]
      break;
 8009ac6:	e0ae      	b.n	8009c26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ac8:	4b59      	ldr	r3, [pc, #356]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ad0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ad2:	4b57      	ldr	r3, [pc, #348]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d04a      	beq.n	8009b74 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ade:	4b54      	ldr	r3, [pc, #336]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	099b      	lsrs	r3, r3, #6
 8009ae4:	f04f 0400 	mov.w	r4, #0
 8009ae8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	ea03 0501 	and.w	r5, r3, r1
 8009af4:	ea04 0602 	and.w	r6, r4, r2
 8009af8:	4629      	mov	r1, r5
 8009afa:	4632      	mov	r2, r6
 8009afc:	f04f 0300 	mov.w	r3, #0
 8009b00:	f04f 0400 	mov.w	r4, #0
 8009b04:	0154      	lsls	r4, r2, #5
 8009b06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009b0a:	014b      	lsls	r3, r1, #5
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4622      	mov	r2, r4
 8009b10:	1b49      	subs	r1, r1, r5
 8009b12:	eb62 0206 	sbc.w	r2, r2, r6
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	f04f 0400 	mov.w	r4, #0
 8009b1e:	0194      	lsls	r4, r2, #6
 8009b20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009b24:	018b      	lsls	r3, r1, #6
 8009b26:	1a5b      	subs	r3, r3, r1
 8009b28:	eb64 0402 	sbc.w	r4, r4, r2
 8009b2c:	f04f 0100 	mov.w	r1, #0
 8009b30:	f04f 0200 	mov.w	r2, #0
 8009b34:	00e2      	lsls	r2, r4, #3
 8009b36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009b3a:	00d9      	lsls	r1, r3, #3
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4614      	mov	r4, r2
 8009b40:	195b      	adds	r3, r3, r5
 8009b42:	eb44 0406 	adc.w	r4, r4, r6
 8009b46:	f04f 0100 	mov.w	r1, #0
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	0262      	lsls	r2, r4, #9
 8009b50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009b54:	0259      	lsls	r1, r3, #9
 8009b56:	460b      	mov	r3, r1
 8009b58:	4614      	mov	r4, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f04f 0400 	mov.w	r4, #0
 8009b64:	461a      	mov	r2, r3
 8009b66:	4623      	mov	r3, r4
 8009b68:	f7f7 f8ae 	bl	8000cc8 <__aeabi_uldivmod>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	e049      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b74:	4b2e      	ldr	r3, [pc, #184]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	099b      	lsrs	r3, r3, #6
 8009b7a:	f04f 0400 	mov.w	r4, #0
 8009b7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009b82:	f04f 0200 	mov.w	r2, #0
 8009b86:	ea03 0501 	and.w	r5, r3, r1
 8009b8a:	ea04 0602 	and.w	r6, r4, r2
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4632      	mov	r2, r6
 8009b92:	f04f 0300 	mov.w	r3, #0
 8009b96:	f04f 0400 	mov.w	r4, #0
 8009b9a:	0154      	lsls	r4, r2, #5
 8009b9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009ba0:	014b      	lsls	r3, r1, #5
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	1b49      	subs	r1, r1, r5
 8009ba8:	eb62 0206 	sbc.w	r2, r2, r6
 8009bac:	f04f 0300 	mov.w	r3, #0
 8009bb0:	f04f 0400 	mov.w	r4, #0
 8009bb4:	0194      	lsls	r4, r2, #6
 8009bb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009bba:	018b      	lsls	r3, r1, #6
 8009bbc:	1a5b      	subs	r3, r3, r1
 8009bbe:	eb64 0402 	sbc.w	r4, r4, r2
 8009bc2:	f04f 0100 	mov.w	r1, #0
 8009bc6:	f04f 0200 	mov.w	r2, #0
 8009bca:	00e2      	lsls	r2, r4, #3
 8009bcc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009bd0:	00d9      	lsls	r1, r3, #3
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	195b      	adds	r3, r3, r5
 8009bd8:	eb44 0406 	adc.w	r4, r4, r6
 8009bdc:	f04f 0100 	mov.w	r1, #0
 8009be0:	f04f 0200 	mov.w	r2, #0
 8009be4:	02a2      	lsls	r2, r4, #10
 8009be6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009bea:	0299      	lsls	r1, r3, #10
 8009bec:	460b      	mov	r3, r1
 8009bee:	4614      	mov	r4, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f04f 0400 	mov.w	r4, #0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	f7f7 f863 	bl	8000cc8 <__aeabi_uldivmod>
 8009c02:	4603      	mov	r3, r0
 8009c04:	460c      	mov	r4, r1
 8009c06:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <HAL_RCC_GetSysClockFreq+0x334>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	0f1b      	lsrs	r3, r3, #28
 8009c0e:	f003 0307 	and.w	r3, r3, #7
 8009c12:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c1c:	613b      	str	r3, [r7, #16]
      break;
 8009c1e:	e002      	b.n	8009c26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009c20:	4b04      	ldr	r3, [pc, #16]	; (8009c34 <HAL_RCC_GetSysClockFreq+0x338>)
 8009c22:	613b      	str	r3, [r7, #16]
      break;
 8009c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c26:	693b      	ldr	r3, [r7, #16]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	371c      	adds	r7, #28
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c30:	40023800 	.word	0x40023800
 8009c34:	00f42400 	.word	0x00f42400
 8009c38:	007a1200 	.word	0x007a1200

08009c3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c44:	2300      	movs	r3, #0
 8009c46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8083 	beq.w	8009d5c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009c56:	4b95      	ldr	r3, [pc, #596]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f003 030c 	and.w	r3, r3, #12
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	d019      	beq.n	8009c96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009c62:	4b92      	ldr	r3, [pc, #584]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d106      	bne.n	8009c7c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009c6e:	4b8f      	ldr	r3, [pc, #572]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c7a:	d00c      	beq.n	8009c96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c7c:	4b8b      	ldr	r3, [pc, #556]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009c84:	2b0c      	cmp	r3, #12
 8009c86:	d112      	bne.n	8009cae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c88:	4b88      	ldr	r3, [pc, #544]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c94:	d10b      	bne.n	8009cae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c96:	4b85      	ldr	r3, [pc, #532]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d05b      	beq.n	8009d5a <HAL_RCC_OscConfig+0x11e>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d157      	bne.n	8009d5a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e216      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb6:	d106      	bne.n	8009cc6 <HAL_RCC_OscConfig+0x8a>
 8009cb8:	4b7c      	ldr	r3, [pc, #496]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a7b      	ldr	r2, [pc, #492]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	e01d      	b.n	8009d02 <HAL_RCC_OscConfig+0xc6>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cce:	d10c      	bne.n	8009cea <HAL_RCC_OscConfig+0xae>
 8009cd0:	4b76      	ldr	r3, [pc, #472]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a75      	ldr	r2, [pc, #468]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	4b73      	ldr	r3, [pc, #460]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a72      	ldr	r2, [pc, #456]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	e00b      	b.n	8009d02 <HAL_RCC_OscConfig+0xc6>
 8009cea:	4b70      	ldr	r3, [pc, #448]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a6f      	ldr	r2, [pc, #444]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	4b6d      	ldr	r3, [pc, #436]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a6c      	ldr	r2, [pc, #432]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d013      	beq.n	8009d32 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d0a:	f7fb fd8b 	bl	8005824 <HAL_GetTick>
 8009d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d10:	e008      	b.n	8009d24 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d12:	f7fb fd87 	bl	8005824 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b64      	cmp	r3, #100	; 0x64
 8009d1e:	d901      	bls.n	8009d24 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e1db      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d24:	4b61      	ldr	r3, [pc, #388]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <HAL_RCC_OscConfig+0xd6>
 8009d30:	e014      	b.n	8009d5c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d32:	f7fb fd77 	bl	8005824 <HAL_GetTick>
 8009d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d38:	e008      	b.n	8009d4c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d3a:	f7fb fd73 	bl	8005824 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	2b64      	cmp	r3, #100	; 0x64
 8009d46:	d901      	bls.n	8009d4c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e1c7      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d4c:	4b57      	ldr	r3, [pc, #348]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1f0      	bne.n	8009d3a <HAL_RCC_OscConfig+0xfe>
 8009d58:	e000      	b.n	8009d5c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d06f      	beq.n	8009e48 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009d68:	4b50      	ldr	r3, [pc, #320]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 030c 	and.w	r3, r3, #12
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d017      	beq.n	8009da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009d74:	4b4d      	ldr	r3, [pc, #308]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	d105      	bne.n	8009d8c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009d80:	4b4a      	ldr	r3, [pc, #296]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d8c:	4b47      	ldr	r3, [pc, #284]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009d94:	2b0c      	cmp	r3, #12
 8009d96:	d11c      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d98:	4b44      	ldr	r3, [pc, #272]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d116      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009da4:	4b41      	ldr	r3, [pc, #260]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d005      	beq.n	8009dbc <HAL_RCC_OscConfig+0x180>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d001      	beq.n	8009dbc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e18f      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dbc:	4b3b      	ldr	r3, [pc, #236]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	00db      	lsls	r3, r3, #3
 8009dca:	4938      	ldr	r1, [pc, #224]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dd0:	e03a      	b.n	8009e48 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d020      	beq.n	8009e1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009dda:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009ddc:	2201      	movs	r2, #1
 8009dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de0:	f7fb fd20 	bl	8005824 <HAL_GetTick>
 8009de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009de6:	e008      	b.n	8009dfa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009de8:	f7fb fd1c 	bl	8005824 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e170      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dfa:	4b2c      	ldr	r3, [pc, #176]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0f0      	beq.n	8009de8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e06:	4b29      	ldr	r3, [pc, #164]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	4925      	ldr	r1, [pc, #148]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	600b      	str	r3, [r1, #0]
 8009e1a:	e015      	b.n	8009e48 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e1c:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e22:	f7fb fcff 	bl	8005824 <HAL_GetTick>
 8009e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e28:	e008      	b.n	8009e3c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e2a:	f7fb fcfb 	bl	8005824 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d901      	bls.n	8009e3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e14f      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e3c:	4b1b      	ldr	r3, [pc, #108]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1f0      	bne.n	8009e2a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d037      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d016      	beq.n	8009e8a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e5c:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <HAL_RCC_OscConfig+0x278>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e62:	f7fb fcdf 	bl	8005824 <HAL_GetTick>
 8009e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e68:	e008      	b.n	8009e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e6a:	f7fb fcdb 	bl	8005824 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d901      	bls.n	8009e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e12f      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e7c:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <HAL_RCC_OscConfig+0x270>)
 8009e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e80:	f003 0302 	and.w	r3, r3, #2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0f0      	beq.n	8009e6a <HAL_RCC_OscConfig+0x22e>
 8009e88:	e01c      	b.n	8009ec4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <HAL_RCC_OscConfig+0x278>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e90:	f7fb fcc8 	bl	8005824 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e96:	e00f      	b.n	8009eb8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e98:	f7fb fcc4 	bl	8005824 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d908      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e118      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
 8009eaa:	bf00      	nop
 8009eac:	40023800 	.word	0x40023800
 8009eb0:	42470000 	.word	0x42470000
 8009eb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eb8:	4b8a      	ldr	r3, [pc, #552]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ebc:	f003 0302 	and.w	r3, r3, #2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e9      	bne.n	8009e98 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 8097 	beq.w	800a000 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ed6:	4b83      	ldr	r3, [pc, #524]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10f      	bne.n	8009f02 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	4b7f      	ldr	r3, [pc, #508]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	4a7e      	ldr	r2, [pc, #504]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ef2:	4b7c      	ldr	r3, [pc, #496]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009efe:	2301      	movs	r3, #1
 8009f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f02:	4b79      	ldr	r3, [pc, #484]	; (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d118      	bne.n	8009f40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f0e:	4b76      	ldr	r3, [pc, #472]	; (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a75      	ldr	r2, [pc, #468]	; (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f1a:	f7fb fc83 	bl	8005824 <HAL_GetTick>
 8009f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f20:	e008      	b.n	8009f34 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f22:	f7fb fc7f 	bl	8005824 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d901      	bls.n	8009f34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e0d3      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f34:	4b6c      	ldr	r3, [pc, #432]	; (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0f0      	beq.n	8009f22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d106      	bne.n	8009f56 <HAL_RCC_OscConfig+0x31a>
 8009f48:	4b66      	ldr	r3, [pc, #408]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f4c:	4a65      	ldr	r2, [pc, #404]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	6713      	str	r3, [r2, #112]	; 0x70
 8009f54:	e01c      	b.n	8009f90 <HAL_RCC_OscConfig+0x354>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d10c      	bne.n	8009f78 <HAL_RCC_OscConfig+0x33c>
 8009f5e:	4b61      	ldr	r3, [pc, #388]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f62:	4a60      	ldr	r2, [pc, #384]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f64:	f043 0304 	orr.w	r3, r3, #4
 8009f68:	6713      	str	r3, [r2, #112]	; 0x70
 8009f6a:	4b5e      	ldr	r3, [pc, #376]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	4a5d      	ldr	r2, [pc, #372]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f70:	f043 0301 	orr.w	r3, r3, #1
 8009f74:	6713      	str	r3, [r2, #112]	; 0x70
 8009f76:	e00b      	b.n	8009f90 <HAL_RCC_OscConfig+0x354>
 8009f78:	4b5a      	ldr	r3, [pc, #360]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7c:	4a59      	ldr	r2, [pc, #356]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	6713      	str	r3, [r2, #112]	; 0x70
 8009f84:	4b57      	ldr	r3, [pc, #348]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f88:	4a56      	ldr	r2, [pc, #344]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009f8a:	f023 0304 	bic.w	r3, r3, #4
 8009f8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d015      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f98:	f7fb fc44 	bl	8005824 <HAL_GetTick>
 8009f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f9e:	e00a      	b.n	8009fb6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fa0:	f7fb fc40 	bl	8005824 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e092      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fb6:	4b4b      	ldr	r3, [pc, #300]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0ee      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x364>
 8009fc2:	e014      	b.n	8009fee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fc4:	f7fb fc2e 	bl	8005824 <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fca:	e00a      	b.n	8009fe2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fcc:	f7fb fc2a 	bl	8005824 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e07c      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fe2:	4b40      	ldr	r3, [pc, #256]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1ee      	bne.n	8009fcc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d105      	bne.n	800a000 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ff4:	4b3b      	ldr	r3, [pc, #236]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	4a3a      	ldr	r2, [pc, #232]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 8009ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ffe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d068      	beq.n	800a0da <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a008:	4b36      	ldr	r3, [pc, #216]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f003 030c 	and.w	r3, r3, #12
 800a010:	2b08      	cmp	r3, #8
 800a012:	d060      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d145      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a01c:	4b33      	ldr	r3, [pc, #204]	; (800a0ec <HAL_RCC_OscConfig+0x4b0>)
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a022:	f7fb fbff 	bl	8005824 <HAL_GetTick>
 800a026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a028:	e008      	b.n	800a03c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a02a:	f7fb fbfb 	bl	8005824 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e04f      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a03c:	4b29      	ldr	r3, [pc, #164]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1f0      	bne.n	800a02a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	019b      	lsls	r3, r3, #6
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	3b01      	subs	r3, #1
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	431a      	orrs	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06a:	061b      	lsls	r3, r3, #24
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a072:	071b      	lsls	r3, r3, #28
 800a074:	491b      	ldr	r1, [pc, #108]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 800a076:	4313      	orrs	r3, r2
 800a078:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a07a:	4b1c      	ldr	r3, [pc, #112]	; (800a0ec <HAL_RCC_OscConfig+0x4b0>)
 800a07c:	2201      	movs	r2, #1
 800a07e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a080:	f7fb fbd0 	bl	8005824 <HAL_GetTick>
 800a084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a088:	f7fb fbcc 	bl	8005824 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e020      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a09a:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0f0      	beq.n	800a088 <HAL_RCC_OscConfig+0x44c>
 800a0a6:	e018      	b.n	800a0da <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0a8:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <HAL_RCC_OscConfig+0x4b0>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ae:	f7fb fbb9 	bl	8005824 <HAL_GetTick>
 800a0b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0b4:	e008      	b.n	800a0c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0b6:	f7fb fbb5 	bl	8005824 <HAL_GetTick>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d901      	bls.n	800a0c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e009      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <HAL_RCC_OscConfig+0x4a8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1f0      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x47a>
 800a0d4:	e001      	b.n	800a0da <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	40007000 	.word	0x40007000
 800a0ec:	42470060 	.word	0x42470060

0800a0f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e056      	b.n	800a1b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7fa ff95 	bl	800504c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2202      	movs	r2, #2
 800a126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a138:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	431a      	orrs	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	431a      	orrs	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	431a      	orrs	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	431a      	orrs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a15e:	431a      	orrs	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	ea42 0103 	orr.w	r1, r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	0c1b      	lsrs	r3, r3, #16
 800a180:	f003 0104 	and.w	r1, r3, #4
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	430a      	orrs	r2, r1
 800a18e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69da      	ldr	r2, [r3, #28]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a19e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d101      	bne.n	800a1da <HAL_SPI_Transmit+0x22>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e11e      	b.n	800a418 <HAL_SPI_Transmit+0x260>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1e2:	f7fb fb1f 	bl	8005824 <HAL_GetTick>
 800a1e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a1e8:	88fb      	ldrh	r3, [r7, #6]
 800a1ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d002      	beq.n	800a1fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a1fc:	e103      	b.n	800a406 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <HAL_SPI_Transmit+0x52>
 800a204:	88fb      	ldrh	r3, [r7, #6]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a20e:	e0fa      	b.n	800a406 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2203      	movs	r2, #3
 800a214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	88fa      	ldrh	r2, [r7, #6]
 800a228:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	88fa      	ldrh	r2, [r7, #6]
 800a22e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a256:	d107      	bne.n	800a268 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a266:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a272:	2b40      	cmp	r3, #64	; 0x40
 800a274:	d007      	beq.n	800a286 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a28e:	d14b      	bne.n	800a328 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <HAL_SPI_Transmit+0xe6>
 800a298:	8afb      	ldrh	r3, [r7, #22]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d13e      	bne.n	800a31c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a2:	881a      	ldrh	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ae:	1c9a      	adds	r2, r3, #2
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a2c2:	e02b      	b.n	800a31c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d112      	bne.n	800a2f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d6:	881a      	ldrh	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	1c9a      	adds	r2, r3, #2
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a2f6:	e011      	b.n	800a31c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2f8:	f7fb fa94 	bl	8005824 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d803      	bhi.n	800a310 <HAL_SPI_Transmit+0x158>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30e:	d102      	bne.n	800a316 <HAL_SPI_Transmit+0x15e>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d102      	bne.n	800a31c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a31a:	e074      	b.n	800a406 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a320:	b29b      	uxth	r3, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1ce      	bne.n	800a2c4 <HAL_SPI_Transmit+0x10c>
 800a326:	e04c      	b.n	800a3c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <HAL_SPI_Transmit+0x17e>
 800a330:	8afb      	ldrh	r3, [r7, #22]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d140      	bne.n	800a3b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	330c      	adds	r3, #12
 800a340:	7812      	ldrb	r2, [r2, #0]
 800a342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a352:	b29b      	uxth	r3, r3
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a35c:	e02c      	b.n	800a3b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d113      	bne.n	800a394 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	330c      	adds	r3, #12
 800a376:	7812      	ldrb	r2, [r2, #0]
 800a378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	86da      	strh	r2, [r3, #54]	; 0x36
 800a392:	e011      	b.n	800a3b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a394:	f7fb fa46 	bl	8005824 <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d803      	bhi.n	800a3ac <HAL_SPI_Transmit+0x1f4>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d102      	bne.n	800a3b2 <HAL_SPI_Transmit+0x1fa>
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a3b6:	e026      	b.n	800a406 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1cd      	bne.n	800a35e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 fdb6 	bl	800af38 <SPI_EndRxTxTransaction>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10a      	bne.n	800a3f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	613b      	str	r3, [r7, #16]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	77fb      	strb	r3, [r7, #31]
 800a402:	e000      	b.n	800a406 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a404:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a416:	7ffb      	ldrb	r3, [r7, #31]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3720      	adds	r7, #32
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	af02      	add	r7, sp, #8
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	4613      	mov	r3, r2
 800a42e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a43c:	d112      	bne.n	800a464 <HAL_SPI_Receive+0x44>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10e      	bne.n	800a464 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2204      	movs	r2, #4
 800a44a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a44e:	88fa      	ldrh	r2, [r7, #6]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	4613      	mov	r3, r2
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	68b9      	ldr	r1, [r7, #8]
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 f8e9 	bl	800a632 <HAL_SPI_TransmitReceive>
 800a460:	4603      	mov	r3, r0
 800a462:	e0e2      	b.n	800a62a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d101      	bne.n	800a472 <HAL_SPI_Receive+0x52>
 800a46e:	2302      	movs	r3, #2
 800a470:	e0db      	b.n	800a62a <HAL_SPI_Receive+0x20a>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a47a:	f7fb f9d3 	bl	8005824 <HAL_GetTick>
 800a47e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d002      	beq.n	800a492 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a48c:	2302      	movs	r3, #2
 800a48e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a490:	e0c2      	b.n	800a618 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <HAL_SPI_Receive+0x7e>
 800a498:	88fb      	ldrh	r3, [r7, #6]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a4a2:	e0b9      	b.n	800a618 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2204      	movs	r2, #4
 800a4a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	88fa      	ldrh	r2, [r7, #6]
 800a4bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4ea:	d107      	bne.n	800a4fc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a4fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a506:	2b40      	cmp	r3, #64	; 0x40
 800a508:	d007      	beq.n	800a51a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a518:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d162      	bne.n	800a5e8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a522:	e02e      	b.n	800a582 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d115      	bne.n	800a55e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f103 020c 	add.w	r2, r3, #12
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	b2d2      	uxtb	r2, r2
 800a542:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a55c:	e011      	b.n	800a582 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a55e:	f7fb f961 	bl	8005824 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d803      	bhi.n	800a576 <HAL_SPI_Receive+0x156>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a574:	d102      	bne.n	800a57c <HAL_SPI_Receive+0x15c>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a580:	e04a      	b.n	800a618 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a586:	b29b      	uxth	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1cb      	bne.n	800a524 <HAL_SPI_Receive+0x104>
 800a58c:	e031      	b.n	800a5f2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d113      	bne.n	800a5c4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a6:	b292      	uxth	r2, r2
 800a5a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ae:	1c9a      	adds	r2, r3, #2
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a5c2:	e011      	b.n	800a5e8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5c4:	f7fb f92e 	bl	8005824 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d803      	bhi.n	800a5dc <HAL_SPI_Receive+0x1bc>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5da:	d102      	bne.n	800a5e2 <HAL_SPI_Receive+0x1c2>
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d102      	bne.n	800a5e8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a5e6:	e017      	b.n	800a618 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1cd      	bne.n	800a58e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fc38 	bl	800ae6c <SPI_EndRxTransaction>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	75fb      	strb	r3, [r7, #23]
 800a614:	e000      	b.n	800a618 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a628:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b08c      	sub	sp, #48	; 0x30
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
 800a63e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a640:	2301      	movs	r3, #1
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a650:	2b01      	cmp	r3, #1
 800a652:	d101      	bne.n	800a658 <HAL_SPI_TransmitReceive+0x26>
 800a654:	2302      	movs	r3, #2
 800a656:	e18a      	b.n	800a96e <HAL_SPI_TransmitReceive+0x33c>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a660:	f7fb f8e0 	bl	8005824 <HAL_GetTick>
 800a664:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a66c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a676:	887b      	ldrh	r3, [r7, #2]
 800a678:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a67a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d00f      	beq.n	800a6a2 <HAL_SPI_TransmitReceive+0x70>
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a688:	d107      	bne.n	800a69a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d103      	bne.n	800a69a <HAL_SPI_TransmitReceive+0x68>
 800a692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a696:	2b04      	cmp	r3, #4
 800a698:	d003      	beq.n	800a6a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a69a:	2302      	movs	r3, #2
 800a69c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a6a0:	e15b      	b.n	800a95a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d005      	beq.n	800a6b4 <HAL_SPI_TransmitReceive+0x82>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <HAL_SPI_TransmitReceive+0x82>
 800a6ae:	887b      	ldrh	r3, [r7, #2]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d103      	bne.n	800a6bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a6ba:	e14e      	b.n	800a95a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d003      	beq.n	800a6d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2205      	movs	r2, #5
 800a6cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	887a      	ldrh	r2, [r7, #2]
 800a6e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	887a      	ldrh	r2, [r7, #2]
 800a6e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	887a      	ldrh	r2, [r7, #2]
 800a6f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	887a      	ldrh	r2, [r7, #2]
 800a6f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a710:	2b40      	cmp	r3, #64	; 0x40
 800a712:	d007      	beq.n	800a724 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a72c:	d178      	bne.n	800a820 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <HAL_SPI_TransmitReceive+0x10a>
 800a736:	8b7b      	ldrh	r3, [r7, #26]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d166      	bne.n	800a80a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	881a      	ldrh	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74c:	1c9a      	adds	r2, r3, #2
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a756:	b29b      	uxth	r3, r3
 800a758:	3b01      	subs	r3, #1
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a760:	e053      	b.n	800a80a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d11b      	bne.n	800a7a8 <HAL_SPI_TransmitReceive+0x176>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a774:	b29b      	uxth	r3, r3
 800a776:	2b00      	cmp	r3, #0
 800a778:	d016      	beq.n	800a7a8 <HAL_SPI_TransmitReceive+0x176>
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d113      	bne.n	800a7a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	881a      	ldrh	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	1c9a      	adds	r2, r3, #2
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	3b01      	subs	r3, #1
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d119      	bne.n	800a7ea <HAL_SPI_TransmitReceive+0x1b8>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d014      	beq.n	800a7ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68da      	ldr	r2, [r3, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	b292      	uxth	r2, r2
 800a7cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d2:	1c9a      	adds	r2, r3, #2
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a7ea:	f7fb f81b 	bl	8005824 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d807      	bhi.n	800a80a <HAL_SPI_TransmitReceive+0x1d8>
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d003      	beq.n	800a80a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a808:	e0a7      	b.n	800a95a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a80e:	b29b      	uxth	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1a6      	bne.n	800a762 <HAL_SPI_TransmitReceive+0x130>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a818:	b29b      	uxth	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1a1      	bne.n	800a762 <HAL_SPI_TransmitReceive+0x130>
 800a81e:	e07c      	b.n	800a91a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <HAL_SPI_TransmitReceive+0x1fc>
 800a828:	8b7b      	ldrh	r3, [r7, #26]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d16b      	bne.n	800a906 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	330c      	adds	r3, #12
 800a838:	7812      	ldrb	r2, [r2, #0]
 800a83a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	3b01      	subs	r3, #1
 800a84e:	b29a      	uxth	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a854:	e057      	b.n	800a906 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b02      	cmp	r3, #2
 800a862:	d11c      	bne.n	800a89e <HAL_SPI_TransmitReceive+0x26c>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a868:	b29b      	uxth	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d017      	beq.n	800a89e <HAL_SPI_TransmitReceive+0x26c>
 800a86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a870:	2b01      	cmp	r3, #1
 800a872:	d114      	bne.n	800a89e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	330c      	adds	r3, #12
 800a87e:	7812      	ldrb	r2, [r2, #0]
 800a880:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a890:	b29b      	uxth	r3, r3
 800a892:	3b01      	subs	r3, #1
 800a894:	b29a      	uxth	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d119      	bne.n	800a8e0 <HAL_SPI_TransmitReceive+0x2ae>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d014      	beq.n	800a8e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c0:	b2d2      	uxtb	r2, r2
 800a8c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a8e0:	f7fa ffa0 	bl	8005824 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d803      	bhi.n	800a8f8 <HAL_SPI_TransmitReceive+0x2c6>
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f6:	d102      	bne.n	800a8fe <HAL_SPI_TransmitReceive+0x2cc>
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d103      	bne.n	800a906 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a904:	e029      	b.n	800a95a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1a2      	bne.n	800a856 <HAL_SPI_TransmitReceive+0x224>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a914:	b29b      	uxth	r3, r3
 800a916:	2b00      	cmp	r3, #0
 800a918:	d19d      	bne.n	800a856 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a91c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f000 fb0a 	bl	800af38 <SPI_EndRxTxTransaction>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2220      	movs	r2, #32
 800a934:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a936:	e010      	b.n	800a95a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10b      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	e000      	b.n	800a95a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a958:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a96a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3730      	adds	r7, #48	; 0x30
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a990:	2b01      	cmp	r3, #1
 800a992:	d101      	bne.n	800a998 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a994:	2302      	movs	r3, #2
 800a996:	e0e3      	b.n	800ab60 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9a6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a9ae:	7dbb      	ldrb	r3, [r7, #22]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d00d      	beq.n	800a9d0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9ba:	d106      	bne.n	800a9ca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <HAL_SPI_TransmitReceive_DMA+0x52>
 800a9c4:	7dbb      	ldrb	r3, [r7, #22]
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	d002      	beq.n	800a9d0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a9ce:	e0c2      	b.n	800ab56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d005      	beq.n	800a9e2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a9dc:	887b      	ldrh	r3, [r7, #2]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a9e6:	e0b6      	b.n	800ab56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b04      	cmp	r3, #4
 800a9f2:	d003      	beq.n	800a9fc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2205      	movs	r2, #5
 800a9f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	887a      	ldrh	r2, [r7, #2]
 800aa0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	887a      	ldrh	r2, [r7, #2]
 800aa12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	887a      	ldrh	r2, [r7, #2]
 800aa1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	887a      	ldrh	r2, [r7, #2]
 800aa24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d108      	bne.n	800aa50 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa42:	4a49      	ldr	r2, [pc, #292]	; (800ab68 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800aa44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa4a:	4a48      	ldr	r2, [pc, #288]	; (800ab6c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800aa4c:	63da      	str	r2, [r3, #60]	; 0x3c
 800aa4e:	e007      	b.n	800aa60 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa54:	4a46      	ldr	r2, [pc, #280]	; (800ab70 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800aa56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5c:	4a45      	ldr	r2, [pc, #276]	; (800ab74 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800aa5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa64:	4a44      	ldr	r2, [pc, #272]	; (800ab78 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800aa66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	330c      	adds	r3, #12
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aa88:	f7fb fc54 	bl	8006334 <HAL_DMA_Start_IT>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00c      	beq.n	800aaac <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa96:	f043 0210 	orr.w	r2, r3, #16
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800aaaa:	e054      	b.n	800ab56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac0:	2200      	movs	r2, #0
 800aac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac8:	2200      	movs	r2, #0
 800aaca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad0:	2200      	movs	r2, #0
 800aad2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad8:	2200      	movs	r2, #0
 800aada:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae4:	4619      	mov	r1, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	330c      	adds	r3, #12
 800aaec:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aaf2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800aaf4:	f7fb fc1e 	bl	8006334 <HAL_DMA_Start_IT>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00c      	beq.n	800ab18 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab02:	f043 0210 	orr.w	r2, r3, #16
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ab16:	e01e      	b.n	800ab56 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab22:	2b40      	cmp	r3, #64	; 0x40
 800ab24:	d007      	beq.n	800ab36 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab34:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f042 0220 	orr.w	r2, r2, #32
 800ab44:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f042 0202 	orr.w	r2, r2, #2
 800ab54:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	0800ad21 	.word	0x0800ad21
 800ab6c:	0800abe9 	.word	0x0800abe9
 800ab70:	0800ad3d 	.word	0x0800ad3d
 800ab74:	0800ac91 	.word	0x0800ac91
 800ab78:	0800ad59 	.word	0x0800ad59

0800ab7c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abda:	b2db      	uxtb	r3, r3
}
 800abdc:	4618      	mov	r0, r3
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abf6:	f7fa fe15 	bl	8005824 <HAL_GetTick>
 800abfa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac0a:	d03b      	beq.n	800ac84 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f022 0220 	bic.w	r2, r2, #32
 800ac1a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10d      	bne.n	800ac40 <SPI_DMAReceiveCplt+0x58>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac2c:	d108      	bne.n	800ac40 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f022 0203 	bic.w	r2, r2, #3
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	e007      	b.n	800ac50 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0201 	bic.w	r2, r2, #1
 800ac4e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	2164      	movs	r1, #100	; 0x64
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 f909 	bl	800ae6c <SPI_EndRxTransaction>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2220      	movs	r2, #32
 800ac64:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff ff9b 	bl	800abb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac82:	e002      	b.n	800ac8a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff ff79 	bl	800ab7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac9e:	f7fa fdc1 	bl	8005824 <HAL_GetTick>
 800aca2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acb2:	d02f      	beq.n	800ad14 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0220 	bic.w	r2, r2, #32
 800acc2:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	2164      	movs	r1, #100	; 0x64
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 f935 	bl	800af38 <SPI_EndRxTxTransaction>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d005      	beq.n	800ace0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd8:	f043 0220 	orr.w	r2, r3, #32
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 0203 	bic.w	r2, r2, #3
 800acee:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7ff ff53 	bl	800abb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ad12:	e002      	b.n	800ad1a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f7f8 fc4b 	bl	80035b0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f7ff ff2e 	bl	800ab90 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad48:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7ff ff2a 	bl	800aba4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad64:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0203 	bic.w	r2, r2, #3
 800ad74:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	f043 0210 	orr.w	r2, r3, #16
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7ff ff14 	bl	800abb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad90:	bf00      	nop
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ada8:	e04c      	b.n	800ae44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d048      	beq.n	800ae44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800adb2:	f7fa fd37 	bl	8005824 <HAL_GetTick>
 800adb6:	4602      	mov	r2, r0
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d902      	bls.n	800adc8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d13d      	bne.n	800ae44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800add6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ade0:	d111      	bne.n	800ae06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adea:	d004      	beq.n	800adf6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adf4:	d107      	bne.n	800ae06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae0e:	d10f      	bne.n	800ae30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e00f      	b.n	800ae64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	bf0c      	ite	eq
 800ae54:	2301      	moveq	r3, #1
 800ae56:	2300      	movne	r3, #0
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d1a3      	bne.n	800adaa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af02      	add	r7, sp, #8
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae80:	d111      	bne.n	800aea6 <SPI_EndRxTransaction+0x3a>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae8a:	d004      	beq.n	800ae96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae94:	d107      	bne.n	800aea6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aea4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aeae:	d12a      	bne.n	800af06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeb8:	d012      	beq.n	800aee0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2200      	movs	r2, #0
 800aec2:	2180      	movs	r1, #128	; 0x80
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7ff ff67 	bl	800ad98 <SPI_WaitFlagStateUntilTimeout>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d02d      	beq.n	800af2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed4:	f043 0220 	orr.w	r2, r3, #32
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e026      	b.n	800af2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2200      	movs	r2, #0
 800aee8:	2101      	movs	r1, #1
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff ff54 	bl	800ad98 <SPI_WaitFlagStateUntilTimeout>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01a      	beq.n	800af2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefa:	f043 0220 	orr.w	r2, r3, #32
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e013      	b.n	800af2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2200      	movs	r2, #0
 800af0e:	2101      	movs	r1, #1
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff ff41 	bl	800ad98 <SPI_WaitFlagStateUntilTimeout>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af20:	f043 0220 	orr.w	r2, r3, #32
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e000      	b.n	800af2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800af44:	4b1b      	ldr	r3, [pc, #108]	; (800afb4 <SPI_EndRxTxTransaction+0x7c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1b      	ldr	r2, [pc, #108]	; (800afb8 <SPI_EndRxTxTransaction+0x80>)
 800af4a:	fba2 2303 	umull	r2, r3, r2, r3
 800af4e:	0d5b      	lsrs	r3, r3, #21
 800af50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af54:	fb02 f303 	mul.w	r3, r2, r3
 800af58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af62:	d112      	bne.n	800af8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2200      	movs	r2, #0
 800af6c:	2180      	movs	r1, #128	; 0x80
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f7ff ff12 	bl	800ad98 <SPI_WaitFlagStateUntilTimeout>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d016      	beq.n	800afa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af7e:	f043 0220 	orr.w	r2, r3, #32
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800af86:	2303      	movs	r3, #3
 800af88:	e00f      	b.n	800afaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	3b01      	subs	r3, #1
 800af94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa0:	2b80      	cmp	r3, #128	; 0x80
 800afa2:	d0f2      	beq.n	800af8a <SPI_EndRxTxTransaction+0x52>
 800afa4:	e000      	b.n	800afa8 <SPI_EndRxTxTransaction+0x70>
        break;
 800afa6:	bf00      	nop
  }

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000280 	.word	0x20000280
 800afb8:	165e9f81 	.word	0x165e9f81

0800afbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e01d      	b.n	800b00a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d106      	bne.n	800afe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7fa f98a 	bl	80052fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2202      	movs	r2, #2
 800afec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3304      	adds	r3, #4
 800aff8:	4619      	mov	r1, r3
 800affa:	4610      	mov	r0, r2
 800affc:	f000 fb68 	bl	800b6d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b012:	b480      	push	{r7}
 800b014:	b085      	sub	sp, #20
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2202      	movs	r2, #2
 800b01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b06      	cmp	r3, #6
 800b032:	d007      	beq.n	800b044 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f042 0201 	orr.w	r2, r2, #1
 800b042:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68da      	ldr	r2, [r3, #12]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f042 0201 	orr.w	r2, r2, #1
 800b070:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f003 0307 	and.w	r3, r3, #7
 800b07c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b06      	cmp	r3, #6
 800b082:	d007      	beq.n	800b094 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f042 0201 	orr.w	r2, r2, #1
 800b092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e01d      	b.n	800b0f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d106      	bne.n	800b0ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7fa f8f7 	bl	80052bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	f000 faf5 	bl	800b6d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2201      	movs	r2, #1
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fdca 	bl	800bca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a15      	ldr	r2, [pc, #84]	; (800b16c <HAL_TIM_PWM_Start+0x74>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d004      	beq.n	800b124 <HAL_TIM_PWM_Start+0x2c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a14      	ldr	r2, [pc, #80]	; (800b170 <HAL_TIM_PWM_Start+0x78>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d101      	bne.n	800b128 <HAL_TIM_PWM_Start+0x30>
 800b124:	2301      	movs	r3, #1
 800b126:	e000      	b.n	800b12a <HAL_TIM_PWM_Start+0x32>
 800b128:	2300      	movs	r3, #0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d007      	beq.n	800b13e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b13c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f003 0307 	and.w	r3, r3, #7
 800b148:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b06      	cmp	r3, #6
 800b14e:	d007      	beq.n	800b160 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0201 	orr.w	r2, r2, #1
 800b15e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40010000 	.word	0x40010000
 800b170:	40010400 	.word	0x40010400

0800b174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b02      	cmp	r3, #2
 800b188:	d122      	bne.n	800b1d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b02      	cmp	r3, #2
 800b196:	d11b      	bne.n	800b1d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f06f 0202 	mvn.w	r2, #2
 800b1a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa6b 	bl	800b692 <HAL_TIM_IC_CaptureCallback>
 800b1bc:	e005      	b.n	800b1ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa5d 	bl	800b67e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fa6e 	bl	800b6a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d122      	bne.n	800b224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	d11b      	bne.n	800b224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f06f 0204 	mvn.w	r2, #4
 800b1f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fa41 	bl	800b692 <HAL_TIM_IC_CaptureCallback>
 800b210:	e005      	b.n	800b21e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa33 	bl	800b67e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fa44 	bl	800b6a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f003 0308 	and.w	r3, r3, #8
 800b22e:	2b08      	cmp	r3, #8
 800b230:	d122      	bne.n	800b278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f003 0308 	and.w	r3, r3, #8
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	d11b      	bne.n	800b278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f06f 0208 	mvn.w	r2, #8
 800b248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2204      	movs	r2, #4
 800b24e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	69db      	ldr	r3, [r3, #28]
 800b256:	f003 0303 	and.w	r3, r3, #3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fa17 	bl	800b692 <HAL_TIM_IC_CaptureCallback>
 800b264:	e005      	b.n	800b272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fa09 	bl	800b67e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fa1a 	bl	800b6a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	2b10      	cmp	r3, #16
 800b284:	d122      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f003 0310 	and.w	r3, r3, #16
 800b290:	2b10      	cmp	r3, #16
 800b292:	d11b      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f06f 0210 	mvn.w	r2, #16
 800b29c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f9ed 	bl	800b692 <HAL_TIM_IC_CaptureCallback>
 800b2b8:	e005      	b.n	800b2c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f9df 	bl	800b67e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f9f0 	bl	800b6a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d10e      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d107      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0201 	mvn.w	r2, #1
 800b2f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7f9 fbd8 	bl	8004aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b302:	2b80      	cmp	r3, #128	; 0x80
 800b304:	d10e      	bne.n	800b324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b310:	2b80      	cmp	r3, #128	; 0x80
 800b312:	d107      	bne.n	800b324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b31c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fd6c 	bl	800bdfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32e:	2b40      	cmp	r3, #64	; 0x40
 800b330:	d10e      	bne.n	800b350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33c:	2b40      	cmp	r3, #64	; 0x40
 800b33e:	d107      	bne.n	800b350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f9b5 	bl	800b6ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 0320 	and.w	r3, r3, #32
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d10e      	bne.n	800b37c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f003 0320 	and.w	r3, r3, #32
 800b368:	2b20      	cmp	r3, #32
 800b36a:	d107      	bne.n	800b37c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f06f 0220 	mvn.w	r2, #32
 800b374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fd36 	bl	800bde8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b396:	2b01      	cmp	r3, #1
 800b398:	d101      	bne.n	800b39e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b39a:	2302      	movs	r3, #2
 800b39c:	e0b4      	b.n	800b508 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b0c      	cmp	r3, #12
 800b3b2:	f200 809f 	bhi.w	800b4f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b3b6:	a201      	add	r2, pc, #4	; (adr r2, 800b3bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3bc:	0800b3f1 	.word	0x0800b3f1
 800b3c0:	0800b4f5 	.word	0x0800b4f5
 800b3c4:	0800b4f5 	.word	0x0800b4f5
 800b3c8:	0800b4f5 	.word	0x0800b4f5
 800b3cc:	0800b431 	.word	0x0800b431
 800b3d0:	0800b4f5 	.word	0x0800b4f5
 800b3d4:	0800b4f5 	.word	0x0800b4f5
 800b3d8:	0800b4f5 	.word	0x0800b4f5
 800b3dc:	0800b473 	.word	0x0800b473
 800b3e0:	0800b4f5 	.word	0x0800b4f5
 800b3e4:	0800b4f5 	.word	0x0800b4f5
 800b3e8:	0800b4f5 	.word	0x0800b4f5
 800b3ec:	0800b4b3 	.word	0x0800b4b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68b9      	ldr	r1, [r7, #8]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fa0a 	bl	800b810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f042 0208 	orr.w	r2, r2, #8
 800b40a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	699a      	ldr	r2, [r3, #24]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0204 	bic.w	r2, r2, #4
 800b41a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6999      	ldr	r1, [r3, #24]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	691a      	ldr	r2, [r3, #16]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	430a      	orrs	r2, r1
 800b42c:	619a      	str	r2, [r3, #24]
      break;
 800b42e:	e062      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fa5a 	bl	800b8f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	699a      	ldr	r2, [r3, #24]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b44a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699a      	ldr	r2, [r3, #24]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b45a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6999      	ldr	r1, [r3, #24]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	021a      	lsls	r2, r3, #8
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	619a      	str	r2, [r3, #24]
      break;
 800b470:	e041      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 faaf 	bl	800b9dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	69da      	ldr	r2, [r3, #28]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f042 0208 	orr.w	r2, r2, #8
 800b48c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	69da      	ldr	r2, [r3, #28]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f022 0204 	bic.w	r2, r2, #4
 800b49c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	69d9      	ldr	r1, [r3, #28]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	691a      	ldr	r2, [r3, #16]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	61da      	str	r2, [r3, #28]
      break;
 800b4b0:	e021      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fb03 	bl	800bac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	69da      	ldr	r2, [r3, #28]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	69da      	ldr	r2, [r3, #28]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69d9      	ldr	r1, [r3, #28]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	021a      	lsls	r2, r3, #8
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	61da      	str	r2, [r3, #28]
      break;
 800b4f2:	e000      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b4f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b520:	2b01      	cmp	r3, #1
 800b522:	d101      	bne.n	800b528 <HAL_TIM_ConfigClockSource+0x18>
 800b524:	2302      	movs	r3, #2
 800b526:	e0a6      	b.n	800b676 <HAL_TIM_ConfigClockSource+0x166>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2202      	movs	r2, #2
 800b534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b54e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b40      	cmp	r3, #64	; 0x40
 800b55e:	d067      	beq.n	800b630 <HAL_TIM_ConfigClockSource+0x120>
 800b560:	2b40      	cmp	r3, #64	; 0x40
 800b562:	d80b      	bhi.n	800b57c <HAL_TIM_ConfigClockSource+0x6c>
 800b564:	2b10      	cmp	r3, #16
 800b566:	d073      	beq.n	800b650 <HAL_TIM_ConfigClockSource+0x140>
 800b568:	2b10      	cmp	r3, #16
 800b56a:	d802      	bhi.n	800b572 <HAL_TIM_ConfigClockSource+0x62>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d06f      	beq.n	800b650 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b570:	e078      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b572:	2b20      	cmp	r3, #32
 800b574:	d06c      	beq.n	800b650 <HAL_TIM_ConfigClockSource+0x140>
 800b576:	2b30      	cmp	r3, #48	; 0x30
 800b578:	d06a      	beq.n	800b650 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b57a:	e073      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b57c:	2b70      	cmp	r3, #112	; 0x70
 800b57e:	d00d      	beq.n	800b59c <HAL_TIM_ConfigClockSource+0x8c>
 800b580:	2b70      	cmp	r3, #112	; 0x70
 800b582:	d804      	bhi.n	800b58e <HAL_TIM_ConfigClockSource+0x7e>
 800b584:	2b50      	cmp	r3, #80	; 0x50
 800b586:	d033      	beq.n	800b5f0 <HAL_TIM_ConfigClockSource+0xe0>
 800b588:	2b60      	cmp	r3, #96	; 0x60
 800b58a:	d041      	beq.n	800b610 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b58c:	e06a      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b592:	d066      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x152>
 800b594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b598:	d017      	beq.n	800b5ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b59a:	e063      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	6899      	ldr	r1, [r3, #8]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f000 fb5a 	bl	800bc64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	609a      	str	r2, [r3, #8]
      break;
 800b5c8:	e04c      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	6899      	ldr	r1, [r3, #8]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	f000 fb43 	bl	800bc64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5ec:	609a      	str	r2, [r3, #8]
      break;
 800b5ee:	e039      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6818      	ldr	r0, [r3, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	6859      	ldr	r1, [r3, #4]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	f000 fab7 	bl	800bb70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2150      	movs	r1, #80	; 0x50
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fb10 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b60e:	e029      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	6859      	ldr	r1, [r3, #4]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	461a      	mov	r2, r3
 800b61e:	f000 fad6 	bl	800bbce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2160      	movs	r1, #96	; 0x60
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fb00 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b62e:	e019      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	6859      	ldr	r1, [r3, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	461a      	mov	r2, r3
 800b63e:	f000 fa97 	bl	800bb70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2140      	movs	r1, #64	; 0x40
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 faf0 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b64e:	e009      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4619      	mov	r1, r3
 800b65a:	4610      	mov	r0, r2
 800b65c:	f000 fae7 	bl	800bc2e <TIM_ITRx_SetConfig>
      break;
 800b660:	e000      	b.n	800b664 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a40      	ldr	r2, [pc, #256]	; (800b7e4 <TIM_Base_SetConfig+0x114>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d013      	beq.n	800b710 <TIM_Base_SetConfig+0x40>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ee:	d00f      	beq.n	800b710 <TIM_Base_SetConfig+0x40>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a3d      	ldr	r2, [pc, #244]	; (800b7e8 <TIM_Base_SetConfig+0x118>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d00b      	beq.n	800b710 <TIM_Base_SetConfig+0x40>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a3c      	ldr	r2, [pc, #240]	; (800b7ec <TIM_Base_SetConfig+0x11c>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d007      	beq.n	800b710 <TIM_Base_SetConfig+0x40>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a3b      	ldr	r2, [pc, #236]	; (800b7f0 <TIM_Base_SetConfig+0x120>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d003      	beq.n	800b710 <TIM_Base_SetConfig+0x40>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a3a      	ldr	r2, [pc, #232]	; (800b7f4 <TIM_Base_SetConfig+0x124>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d108      	bne.n	800b722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	4313      	orrs	r3, r2
 800b720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a2f      	ldr	r2, [pc, #188]	; (800b7e4 <TIM_Base_SetConfig+0x114>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d02b      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b730:	d027      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a2c      	ldr	r2, [pc, #176]	; (800b7e8 <TIM_Base_SetConfig+0x118>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d023      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a2b      	ldr	r2, [pc, #172]	; (800b7ec <TIM_Base_SetConfig+0x11c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d01f      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a2a      	ldr	r2, [pc, #168]	; (800b7f0 <TIM_Base_SetConfig+0x120>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d01b      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a29      	ldr	r2, [pc, #164]	; (800b7f4 <TIM_Base_SetConfig+0x124>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d017      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a28      	ldr	r2, [pc, #160]	; (800b7f8 <TIM_Base_SetConfig+0x128>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d013      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a27      	ldr	r2, [pc, #156]	; (800b7fc <TIM_Base_SetConfig+0x12c>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d00f      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a26      	ldr	r2, [pc, #152]	; (800b800 <TIM_Base_SetConfig+0x130>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d00b      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a25      	ldr	r2, [pc, #148]	; (800b804 <TIM_Base_SetConfig+0x134>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d007      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a24      	ldr	r2, [pc, #144]	; (800b808 <TIM_Base_SetConfig+0x138>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d003      	beq.n	800b782 <TIM_Base_SetConfig+0xb2>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a23      	ldr	r2, [pc, #140]	; (800b80c <TIM_Base_SetConfig+0x13c>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d108      	bne.n	800b794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4313      	orrs	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	689a      	ldr	r2, [r3, #8]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a0a      	ldr	r2, [pc, #40]	; (800b7e4 <TIM_Base_SetConfig+0x114>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d003      	beq.n	800b7c8 <TIM_Base_SetConfig+0xf8>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a0c      	ldr	r2, [pc, #48]	; (800b7f4 <TIM_Base_SetConfig+0x124>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d103      	bne.n	800b7d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	691a      	ldr	r2, [r3, #16]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	615a      	str	r2, [r3, #20]
}
 800b7d6:	bf00      	nop
 800b7d8:	3714      	adds	r7, #20
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	40010000 	.word	0x40010000
 800b7e8:	40000400 	.word	0x40000400
 800b7ec:	40000800 	.word	0x40000800
 800b7f0:	40000c00 	.word	0x40000c00
 800b7f4:	40010400 	.word	0x40010400
 800b7f8:	40014000 	.word	0x40014000
 800b7fc:	40014400 	.word	0x40014400
 800b800:	40014800 	.word	0x40014800
 800b804:	40001800 	.word	0x40001800
 800b808:	40001c00 	.word	0x40001c00
 800b80c:	40002000 	.word	0x40002000

0800b810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b810:	b480      	push	{r7}
 800b812:	b087      	sub	sp, #28
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	f023 0201 	bic.w	r2, r3, #1
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f023 0303 	bic.w	r3, r3, #3
 800b846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	4313      	orrs	r3, r2
 800b850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f023 0302 	bic.w	r3, r3, #2
 800b858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	4313      	orrs	r3, r2
 800b862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a20      	ldr	r2, [pc, #128]	; (800b8e8 <TIM_OC1_SetConfig+0xd8>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d003      	beq.n	800b874 <TIM_OC1_SetConfig+0x64>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a1f      	ldr	r2, [pc, #124]	; (800b8ec <TIM_OC1_SetConfig+0xdc>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d10c      	bne.n	800b88e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f023 0308 	bic.w	r3, r3, #8
 800b87a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	4313      	orrs	r3, r2
 800b884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f023 0304 	bic.w	r3, r3, #4
 800b88c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <TIM_OC1_SetConfig+0xd8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d003      	beq.n	800b89e <TIM_OC1_SetConfig+0x8e>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a14      	ldr	r2, [pc, #80]	; (800b8ec <TIM_OC1_SetConfig+0xdc>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d111      	bne.n	800b8c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	621a      	str	r2, [r3, #32]
}
 800b8dc:	bf00      	nop
 800b8de:	371c      	adds	r7, #28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	40010000 	.word	0x40010000
 800b8ec:	40010400 	.word	0x40010400

0800b8f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	f023 0210 	bic.w	r2, r3, #16
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	021b      	lsls	r3, r3, #8
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	4313      	orrs	r3, r2
 800b932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f023 0320 	bic.w	r3, r3, #32
 800b93a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	011b      	lsls	r3, r3, #4
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	4313      	orrs	r3, r2
 800b946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a22      	ldr	r2, [pc, #136]	; (800b9d4 <TIM_OC2_SetConfig+0xe4>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d003      	beq.n	800b958 <TIM_OC2_SetConfig+0x68>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a21      	ldr	r2, [pc, #132]	; (800b9d8 <TIM_OC2_SetConfig+0xe8>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d10d      	bne.n	800b974 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b95e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	4313      	orrs	r3, r2
 800b96a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a17      	ldr	r2, [pc, #92]	; (800b9d4 <TIM_OC2_SetConfig+0xe4>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d003      	beq.n	800b984 <TIM_OC2_SetConfig+0x94>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a16      	ldr	r2, [pc, #88]	; (800b9d8 <TIM_OC2_SetConfig+0xe8>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d113      	bne.n	800b9ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b98a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	621a      	str	r2, [r3, #32]
}
 800b9c6:	bf00      	nop
 800b9c8:	371c      	adds	r7, #28
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	40010000 	.word	0x40010000
 800b9d8:	40010400 	.word	0x40010400

0800b9dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 0303 	bic.w	r3, r3, #3
 800ba12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	021b      	lsls	r3, r3, #8
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a21      	ldr	r2, [pc, #132]	; (800babc <TIM_OC3_SetConfig+0xe0>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d003      	beq.n	800ba42 <TIM_OC3_SetConfig+0x66>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a20      	ldr	r2, [pc, #128]	; (800bac0 <TIM_OC3_SetConfig+0xe4>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d10d      	bne.n	800ba5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	021b      	lsls	r3, r3, #8
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a16      	ldr	r2, [pc, #88]	; (800babc <TIM_OC3_SetConfig+0xe0>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d003      	beq.n	800ba6e <TIM_OC3_SetConfig+0x92>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a15      	ldr	r2, [pc, #84]	; (800bac0 <TIM_OC3_SetConfig+0xe4>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d113      	bne.n	800ba96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	621a      	str	r2, [r3, #32]
}
 800bab0:	bf00      	nop
 800bab2:	371c      	adds	r7, #28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	40010000 	.word	0x40010000
 800bac0:	40010400 	.word	0x40010400

0800bac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bafa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	021b      	lsls	r3, r3, #8
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	031b      	lsls	r3, r3, #12
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a12      	ldr	r2, [pc, #72]	; (800bb68 <TIM_OC4_SetConfig+0xa4>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d003      	beq.n	800bb2c <TIM_OC4_SetConfig+0x68>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a11      	ldr	r2, [pc, #68]	; (800bb6c <TIM_OC4_SetConfig+0xa8>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d109      	bne.n	800bb40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	695b      	ldr	r3, [r3, #20]
 800bb38:	019b      	lsls	r3, r3, #6
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	621a      	str	r2, [r3, #32]
}
 800bb5a:	bf00      	nop
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	40010000 	.word	0x40010000
 800bb6c:	40010400 	.word	0x40010400

0800bb70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	f023 0201 	bic.w	r2, r3, #1
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f023 030a 	bic.w	r3, r3, #10
 800bbac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	621a      	str	r2, [r3, #32]
}
 800bbc2:	bf00      	nop
 800bbc4:	371c      	adds	r7, #28
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b087      	sub	sp, #28
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	f023 0210 	bic.w	r2, r3, #16
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	031b      	lsls	r3, r3, #12
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	011b      	lsls	r3, r3, #4
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	621a      	str	r2, [r3, #32]
}
 800bc22:	bf00      	nop
 800bc24:	371c      	adds	r7, #28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b085      	sub	sp, #20
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	f043 0307 	orr.w	r3, r3, #7
 800bc50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	609a      	str	r2, [r3, #8]
}
 800bc58:	bf00      	nop
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	021a      	lsls	r2, r3, #8
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	431a      	orrs	r2, r3
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	609a      	str	r2, [r3, #8]
}
 800bc98:	bf00      	nop
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f003 031f 	and.w	r3, r3, #31
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6a1a      	ldr	r2, [r3, #32]
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	43db      	mvns	r3, r3
 800bcc6:	401a      	ands	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6a1a      	ldr	r2, [r3, #32]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f003 031f 	and.w	r3, r3, #31
 800bcd6:	6879      	ldr	r1, [r7, #4]
 800bcd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	621a      	str	r2, [r3, #32]
}
 800bce2:	bf00      	nop
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
	...

0800bcf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d101      	bne.n	800bd08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd04:	2302      	movs	r3, #2
 800bd06:	e05a      	b.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2202      	movs	r2, #2
 800bd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a21      	ldr	r2, [pc, #132]	; (800bdcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d022      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd54:	d01d      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a1d      	ldr	r2, [pc, #116]	; (800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d018      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a1b      	ldr	r2, [pc, #108]	; (800bdd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d013      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a1a      	ldr	r2, [pc, #104]	; (800bdd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d00e      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a18      	ldr	r2, [pc, #96]	; (800bddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d009      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a17      	ldr	r2, [pc, #92]	; (800bde0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d004      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a15      	ldr	r2, [pc, #84]	; (800bde4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d10c      	bne.n	800bdac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	40010000 	.word	0x40010000
 800bdd0:	40000400 	.word	0x40000400
 800bdd4:	40000800 	.word	0x40000800
 800bdd8:	40000c00 	.word	0x40000c00
 800bddc:	40010400 	.word	0x40010400
 800bde0:	40014000 	.word	0x40014000
 800bde4:	40001800 	.word	0x40001800

0800bde8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be10:	b084      	sub	sp, #16
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	f107 001c 	add.w	r0, r7, #28
 800be1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	2b01      	cmp	r3, #1
 800be26:	d122      	bne.n	800be6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800be3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be52:	2b01      	cmp	r3, #1
 800be54:	d105      	bne.n	800be62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 fac0 	bl	800d3e8 <USB_CoreReset>
 800be68:	4603      	mov	r3, r0
 800be6a:	73fb      	strb	r3, [r7, #15]
 800be6c:	e01a      	b.n	800bea4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f001 fab4 	bl	800d3e8 <USB_CoreReset>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	639a      	str	r2, [r3, #56]	; 0x38
 800be96:	e005      	b.n	800bea4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d10b      	bne.n	800bec2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f043 0206 	orr.w	r2, r3, #6
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f043 0220 	orr.w	r2, r3, #32
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bece:	b004      	add	sp, #16
 800bed0:	4770      	bx	lr
	...

0800bed4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bee2:	79fb      	ldrb	r3, [r7, #7]
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d165      	bne.n	800bfb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	4a41      	ldr	r2, [pc, #260]	; (800bff0 <USB_SetTurnaroundTime+0x11c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d906      	bls.n	800befe <USB_SetTurnaroundTime+0x2a>
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	4a40      	ldr	r2, [pc, #256]	; (800bff4 <USB_SetTurnaroundTime+0x120>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d802      	bhi.n	800befe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bef8:	230f      	movs	r3, #15
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	e062      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	4a3c      	ldr	r2, [pc, #240]	; (800bff4 <USB_SetTurnaroundTime+0x120>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d906      	bls.n	800bf14 <USB_SetTurnaroundTime+0x40>
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4a3b      	ldr	r2, [pc, #236]	; (800bff8 <USB_SetTurnaroundTime+0x124>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d802      	bhi.n	800bf14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bf0e:	230e      	movs	r3, #14
 800bf10:	617b      	str	r3, [r7, #20]
 800bf12:	e057      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	4a38      	ldr	r2, [pc, #224]	; (800bff8 <USB_SetTurnaroundTime+0x124>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d906      	bls.n	800bf2a <USB_SetTurnaroundTime+0x56>
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	4a37      	ldr	r2, [pc, #220]	; (800bffc <USB_SetTurnaroundTime+0x128>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d802      	bhi.n	800bf2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bf24:	230d      	movs	r3, #13
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e04c      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	4a33      	ldr	r2, [pc, #204]	; (800bffc <USB_SetTurnaroundTime+0x128>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d906      	bls.n	800bf40 <USB_SetTurnaroundTime+0x6c>
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	4a32      	ldr	r2, [pc, #200]	; (800c000 <USB_SetTurnaroundTime+0x12c>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d802      	bhi.n	800bf40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bf3a:	230c      	movs	r3, #12
 800bf3c:	617b      	str	r3, [r7, #20]
 800bf3e:	e041      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	4a2f      	ldr	r2, [pc, #188]	; (800c000 <USB_SetTurnaroundTime+0x12c>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d906      	bls.n	800bf56 <USB_SetTurnaroundTime+0x82>
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	4a2e      	ldr	r2, [pc, #184]	; (800c004 <USB_SetTurnaroundTime+0x130>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d802      	bhi.n	800bf56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bf50:	230b      	movs	r3, #11
 800bf52:	617b      	str	r3, [r7, #20]
 800bf54:	e036      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	4a2a      	ldr	r2, [pc, #168]	; (800c004 <USB_SetTurnaroundTime+0x130>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d906      	bls.n	800bf6c <USB_SetTurnaroundTime+0x98>
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	4a29      	ldr	r2, [pc, #164]	; (800c008 <USB_SetTurnaroundTime+0x134>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d802      	bhi.n	800bf6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bf66:	230a      	movs	r3, #10
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	e02b      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	4a26      	ldr	r2, [pc, #152]	; (800c008 <USB_SetTurnaroundTime+0x134>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d906      	bls.n	800bf82 <USB_SetTurnaroundTime+0xae>
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	4a25      	ldr	r2, [pc, #148]	; (800c00c <USB_SetTurnaroundTime+0x138>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d802      	bhi.n	800bf82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bf7c:	2309      	movs	r3, #9
 800bf7e:	617b      	str	r3, [r7, #20]
 800bf80:	e020      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	4a21      	ldr	r2, [pc, #132]	; (800c00c <USB_SetTurnaroundTime+0x138>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d906      	bls.n	800bf98 <USB_SetTurnaroundTime+0xc4>
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	4a20      	ldr	r2, [pc, #128]	; (800c010 <USB_SetTurnaroundTime+0x13c>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d802      	bhi.n	800bf98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf92:	2308      	movs	r3, #8
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e015      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	4a1d      	ldr	r2, [pc, #116]	; (800c010 <USB_SetTurnaroundTime+0x13c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d906      	bls.n	800bfae <USB_SetTurnaroundTime+0xda>
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	4a1c      	ldr	r2, [pc, #112]	; (800c014 <USB_SetTurnaroundTime+0x140>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d802      	bhi.n	800bfae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bfa8:	2307      	movs	r3, #7
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e00a      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bfae:	2306      	movs	r3, #6
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	e007      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bfba:	2309      	movs	r3, #9
 800bfbc:	617b      	str	r3, [r7, #20]
 800bfbe:	e001      	b.n	800bfc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bfc0:	2309      	movs	r3, #9
 800bfc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	029b      	lsls	r3, r3, #10
 800bfd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	371c      	adds	r7, #28
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	00d8acbf 	.word	0x00d8acbf
 800bff4:	00e4e1bf 	.word	0x00e4e1bf
 800bff8:	00f423ff 	.word	0x00f423ff
 800bffc:	0106737f 	.word	0x0106737f
 800c000:	011a499f 	.word	0x011a499f
 800c004:	01312cff 	.word	0x01312cff
 800c008:	014ca43f 	.word	0x014ca43f
 800c00c:	016e35ff 	.word	0x016e35ff
 800c010:	01a6ab1f 	.word	0x01a6ab1f
 800c014:	01e847ff 	.word	0x01e847ff

0800c018 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	f043 0201 	orr.w	r2, r3, #1
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f023 0201 	bic.w	r2, r3, #1
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c074:	78fb      	ldrb	r3, [r7, #3]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d106      	bne.n	800c088 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	60da      	str	r2, [r3, #12]
 800c086:	e00b      	b.n	800c0a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	60da      	str	r2, [r3, #12]
 800c09a:	e001      	b.n	800c0a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	e003      	b.n	800c0a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c0a0:	2032      	movs	r0, #50	; 0x32
 800c0a2:	f7f9 fbcb 	bl	800583c <HAL_Delay>

  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b086      	sub	sp, #24
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c0be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	613b      	str	r3, [r7, #16]
 800c0ce:	e009      	b.n	800c0e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	3340      	adds	r3, #64	; 0x40
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	2200      	movs	r2, #0
 800c0dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	613b      	str	r3, [r7, #16]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	2b0e      	cmp	r3, #14
 800c0e8:	d9f2      	bls.n	800c0d0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d11c      	bne.n	800c12a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0fe:	f043 0302 	orr.w	r3, r3, #2
 800c102:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c108:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	e005      	b.n	800c136 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c13c:	461a      	mov	r2, r3
 800c13e:	2300      	movs	r3, #0
 800c140:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c148:	4619      	mov	r1, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c150:	461a      	mov	r2, r3
 800c152:	680b      	ldr	r3, [r1, #0]
 800c154:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d10c      	bne.n	800c176 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d104      	bne.n	800c16c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c162:	2100      	movs	r1, #0
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f949 	bl	800c3fc <USB_SetDevSpeed>
 800c16a:	e008      	b.n	800c17e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c16c:	2101      	movs	r1, #1
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f944 	bl	800c3fc <USB_SetDevSpeed>
 800c174:	e003      	b.n	800c17e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c176:	2103      	movs	r1, #3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f93f 	bl	800c3fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c17e:	2110      	movs	r1, #16
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f8f3 	bl	800c36c <USB_FlushTxFifo>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f911 	bl	800c3b8 <USB_FlushRxFifo>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1be:	461a      	mov	r2, r3
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	613b      	str	r3, [r7, #16]
 800c1c8:	e043      	b.n	800c252 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1e0:	d118      	bne.n	800c214 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10a      	bne.n	800c1fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	015a      	lsls	r2, r3, #5
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	e013      	b.n	800c226 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20a:	461a      	mov	r2, r3
 800c20c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	e008      	b.n	800c226 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c220:	461a      	mov	r2, r3
 800c222:	2300      	movs	r3, #0
 800c224:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c232:	461a      	mov	r2, r3
 800c234:	2300      	movs	r3, #0
 800c236:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c244:	461a      	mov	r2, r3
 800c246:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c24a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	3301      	adds	r3, #1
 800c250:	613b      	str	r3, [r7, #16]
 800c252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	429a      	cmp	r2, r3
 800c258:	d3b7      	bcc.n	800c1ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c25a:	2300      	movs	r3, #0
 800c25c:	613b      	str	r3, [r7, #16]
 800c25e:	e043      	b.n	800c2e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	015a      	lsls	r2, r3, #5
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4413      	add	r3, r2
 800c268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c276:	d118      	bne.n	800c2aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	4413      	add	r3, r2
 800c286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c28a:	461a      	mov	r2, r3
 800c28c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	e013      	b.n	800c2bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2a6:	6013      	str	r3, [r2, #0]
 800c2a8:	e008      	b.n	800c2bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	015a      	lsls	r2, r3, #5
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	015a      	lsls	r2, r3, #5
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	613b      	str	r3, [r7, #16]
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d3b7      	bcc.n	800c260 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c302:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c310:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	2b00      	cmp	r3, #0
 800c316:	d105      	bne.n	800c324 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	f043 0210 	orr.w	r2, r3, #16
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	699a      	ldr	r2, [r3, #24]
 800c328:	4b0f      	ldr	r3, [pc, #60]	; (800c368 <USB_DevInit+0x2b8>)
 800c32a:	4313      	orrs	r3, r2
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c332:	2b00      	cmp	r3, #0
 800c334:	d005      	beq.n	800c342 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	f043 0208 	orr.w	r2, r3, #8
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c344:	2b01      	cmp	r3, #1
 800c346:	d107      	bne.n	800c358 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c350:	f043 0304 	orr.w	r3, r3, #4
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c358:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c364:	b004      	add	sp, #16
 800c366:	4770      	bx	lr
 800c368:	803c3800 	.word	0x803c3800

0800c36c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c376:	2300      	movs	r3, #0
 800c378:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	019b      	lsls	r3, r3, #6
 800c37e:	f043 0220 	orr.w	r2, r3, #32
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3301      	adds	r3, #1
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	4a09      	ldr	r2, [pc, #36]	; (800c3b4 <USB_FlushTxFifo+0x48>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d901      	bls.n	800c398 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e006      	b.n	800c3a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	f003 0320 	and.w	r3, r3, #32
 800c3a0:	2b20      	cmp	r3, #32
 800c3a2:	d0f0      	beq.n	800c386 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3714      	adds	r7, #20
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	00030d40 	.word	0x00030d40

0800c3b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2210      	movs	r2, #16
 800c3c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	60fb      	str	r3, [r7, #12]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4a09      	ldr	r2, [pc, #36]	; (800c3f8 <USB_FlushRxFifo+0x40>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d901      	bls.n	800c3dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e006      	b.n	800c3ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	f003 0310 	and.w	r3, r3, #16
 800c3e4:	2b10      	cmp	r3, #16
 800c3e6:	d0f0      	beq.n	800c3ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	00030d40 	.word	0x00030d40

0800c3fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	68f9      	ldr	r1, [r7, #12]
 800c418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c41c:	4313      	orrs	r3, r2
 800c41e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c42e:	b480      	push	{r7}
 800c430:	b087      	sub	sp, #28
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	f003 0306 	and.w	r3, r3, #6
 800c446:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d102      	bne.n	800c454 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c44e:	2300      	movs	r3, #0
 800c450:	75fb      	strb	r3, [r7, #23]
 800c452:	e00a      	b.n	800c46a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b02      	cmp	r3, #2
 800c458:	d002      	beq.n	800c460 <USB_GetDevSpeed+0x32>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2b06      	cmp	r3, #6
 800c45e:	d102      	bne.n	800c466 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c460:	2302      	movs	r3, #2
 800c462:	75fb      	strb	r3, [r7, #23]
 800c464:	e001      	b.n	800c46a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c466:	230f      	movs	r3, #15
 800c468:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	371c      	adds	r7, #28
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	785b      	ldrb	r3, [r3, #1]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d13a      	bne.n	800c50a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c49a:	69da      	ldr	r2, [r3, #28]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	f003 030f 	and.w	r3, r3, #15
 800c4a4:	2101      	movs	r1, #1
 800c4a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	68f9      	ldr	r1, [r7, #12]
 800c4ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	015a      	lsls	r2, r3, #5
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	4413      	add	r3, r2
 800c4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d155      	bne.n	800c578 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	78db      	ldrb	r3, [r3, #3]
 800c4e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	059b      	lsls	r3, r3, #22
 800c4ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	0151      	lsls	r1, r2, #5
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	440a      	add	r2, r1
 800c4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c506:	6013      	str	r3, [r2, #0]
 800c508:	e036      	b.n	800c578 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c510:	69da      	ldr	r2, [r3, #28]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	f003 030f 	and.w	r3, r3, #15
 800c51a:	2101      	movs	r1, #1
 800c51c:	fa01 f303 	lsl.w	r3, r1, r3
 800c520:	041b      	lsls	r3, r3, #16
 800c522:	68f9      	ldr	r1, [r7, #12]
 800c524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c528:	4313      	orrs	r3, r2
 800c52a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d11a      	bne.n	800c578 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	015a      	lsls	r2, r3, #5
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	4413      	add	r3, r2
 800c54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	78db      	ldrb	r3, [r3, #3]
 800c55c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c55e:	430b      	orrs	r3, r1
 800c560:	4313      	orrs	r3, r2
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	0151      	lsls	r1, r2, #5
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	440a      	add	r2, r1
 800c56a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c56e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c576:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
	...

0800c588 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	785b      	ldrb	r3, [r3, #1]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d161      	bne.n	800c668 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5ba:	d11f      	bne.n	800c5fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	0151      	lsls	r1, r2, #5
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	440a      	add	r2, r1
 800c5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	0151      	lsls	r1, r2, #5
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	440a      	add	r2, r1
 800c5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	f003 030f 	and.w	r3, r3, #15
 800c60c:	2101      	movs	r1, #1
 800c60e:	fa01 f303 	lsl.w	r3, r1, r3
 800c612:	b29b      	uxth	r3, r3
 800c614:	43db      	mvns	r3, r3
 800c616:	68f9      	ldr	r1, [r7, #12]
 800c618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c61c:	4013      	ands	r3, r2
 800c61e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c626:	69da      	ldr	r2, [r3, #28]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	f003 030f 	and.w	r3, r3, #15
 800c630:	2101      	movs	r1, #1
 800c632:	fa01 f303 	lsl.w	r3, r1, r3
 800c636:	b29b      	uxth	r3, r3
 800c638:	43db      	mvns	r3, r3
 800c63a:	68f9      	ldr	r1, [r7, #12]
 800c63c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c640:	4013      	ands	r3, r2
 800c642:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	015a      	lsls	r2, r3, #5
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4413      	add	r3, r2
 800c64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	0159      	lsls	r1, r3, #5
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	440b      	add	r3, r1
 800c65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65e:	4619      	mov	r1, r3
 800c660:	4b35      	ldr	r3, [pc, #212]	; (800c738 <USB_DeactivateEndpoint+0x1b0>)
 800c662:	4013      	ands	r3, r2
 800c664:	600b      	str	r3, [r1, #0]
 800c666:	e060      	b.n	800c72a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	015a      	lsls	r2, r3, #5
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	4413      	add	r3, r2
 800c670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c67a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c67e:	d11f      	bne.n	800c6c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	4413      	add	r3, r2
 800c688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	0151      	lsls	r1, r2, #5
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	440a      	add	r2, r1
 800c696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c69a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c69e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	015a      	lsls	r2, r3, #5
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	0151      	lsls	r1, r2, #5
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	440a      	add	r2, r1
 800c6b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f003 030f 	and.w	r3, r3, #15
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d6:	041b      	lsls	r3, r3, #16
 800c6d8:	43db      	mvns	r3, r3
 800c6da:	68f9      	ldr	r1, [r7, #12]
 800c6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ea:	69da      	ldr	r2, [r3, #28]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	f003 030f 	and.w	r3, r3, #15
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6fa:	041b      	lsls	r3, r3, #16
 800c6fc:	43db      	mvns	r3, r3
 800c6fe:	68f9      	ldr	r1, [r7, #12]
 800c700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c704:	4013      	ands	r3, r2
 800c706:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	015a      	lsls	r2, r3, #5
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	0159      	lsls	r1, r3, #5
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	440b      	add	r3, r1
 800c71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c722:	4619      	mov	r1, r3
 800c724:	4b05      	ldr	r3, [pc, #20]	; (800c73c <USB_DeactivateEndpoint+0x1b4>)
 800c726:	4013      	ands	r3, r2
 800c728:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	ec337800 	.word	0xec337800
 800c73c:	eff37800 	.word	0xeff37800

0800c740 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08a      	sub	sp, #40	; 0x28
 800c744:	af02      	add	r7, sp, #8
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4613      	mov	r3, r2
 800c74c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	785b      	ldrb	r3, [r3, #1]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	f040 815c 	bne.w	800ca1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d132      	bne.n	800c7d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	4413      	add	r3, r2
 800c772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c776:	691b      	ldr	r3, [r3, #16]
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	0151      	lsls	r1, r2, #5
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	440a      	add	r2, r1
 800c780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c78c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	69ba      	ldr	r2, [r7, #24]
 800c79e:	0151      	lsls	r1, r2, #5
 800c7a0:	69fa      	ldr	r2, [r7, #28]
 800c7a2:	440a      	add	r2, r1
 800c7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	015a      	lsls	r2, r3, #5
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	69ba      	ldr	r2, [r7, #24]
 800c7be:	0151      	lsls	r1, r2, #5
 800c7c0:	69fa      	ldr	r2, [r7, #28]
 800c7c2:	440a      	add	r2, r1
 800c7c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7c8:	0cdb      	lsrs	r3, r3, #19
 800c7ca:	04db      	lsls	r3, r3, #19
 800c7cc:	6113      	str	r3, [r2, #16]
 800c7ce:	e074      	b.n	800c8ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	015a      	lsls	r2, r3, #5
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	0151      	lsls	r1, r2, #5
 800c7e2:	69fa      	ldr	r2, [r7, #28]
 800c7e4:	440a      	add	r2, r1
 800c7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ea:	0cdb      	lsrs	r3, r3, #19
 800c7ec:	04db      	lsls	r3, r3, #19
 800c7ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	69ba      	ldr	r2, [r7, #24]
 800c800:	0151      	lsls	r1, r2, #5
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	440a      	add	r2, r1
 800c806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c80a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c80e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c812:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c820:	691a      	ldr	r2, [r3, #16]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	6959      	ldr	r1, [r3, #20]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	440b      	add	r3, r1
 800c82c:	1e59      	subs	r1, r3, #1
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	fbb1 f3f3 	udiv	r3, r1, r3
 800c836:	04d9      	lsls	r1, r3, #19
 800c838:	4b9d      	ldr	r3, [pc, #628]	; (800cab0 <USB_EPStartXfer+0x370>)
 800c83a:	400b      	ands	r3, r1
 800c83c:	69b9      	ldr	r1, [r7, #24]
 800c83e:	0148      	lsls	r0, r1, #5
 800c840:	69f9      	ldr	r1, [r7, #28]
 800c842:	4401      	add	r1, r0
 800c844:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c848:	4313      	orrs	r3, r2
 800c84a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	015a      	lsls	r2, r3, #5
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	4413      	add	r3, r2
 800c854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c858:	691a      	ldr	r2, [r3, #16]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c862:	69b9      	ldr	r1, [r7, #24]
 800c864:	0148      	lsls	r0, r1, #5
 800c866:	69f9      	ldr	r1, [r7, #28]
 800c868:	4401      	add	r1, r0
 800c86a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c86e:	4313      	orrs	r3, r2
 800c870:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	78db      	ldrb	r3, [r3, #3]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d11f      	bne.n	800c8ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	015a      	lsls	r2, r3, #5
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	4413      	add	r3, r2
 800c882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	69ba      	ldr	r2, [r7, #24]
 800c88a:	0151      	lsls	r1, r2, #5
 800c88c:	69fa      	ldr	r2, [r7, #28]
 800c88e:	440a      	add	r2, r1
 800c890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c894:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c898:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	015a      	lsls	r2, r3, #5
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	69ba      	ldr	r2, [r7, #24]
 800c8aa:	0151      	lsls	r1, r2, #5
 800c8ac:	69fa      	ldr	r2, [r7, #28]
 800c8ae:	440a      	add	r2, r1
 800c8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d14b      	bne.n	800c958 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d009      	beq.n	800c8dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	015a      	lsls	r2, r3, #5
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	78db      	ldrb	r3, [r3, #3]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d128      	bne.n	800c936 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d110      	bne.n	800c916 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	0151      	lsls	r1, r2, #5
 800c906:	69fa      	ldr	r2, [r7, #28]
 800c908:	440a      	add	r2, r1
 800c90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c90e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	e00f      	b.n	800c936 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	69ba      	ldr	r2, [r7, #24]
 800c926:	0151      	lsls	r1, r2, #5
 800c928:	69fa      	ldr	r2, [r7, #28]
 800c92a:	440a      	add	r2, r1
 800c92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c934:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	015a      	lsls	r2, r3, #5
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	4413      	add	r3, r2
 800c93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	0151      	lsls	r1, r2, #5
 800c948:	69fa      	ldr	r2, [r7, #28]
 800c94a:	440a      	add	r2, r1
 800c94c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c954:	6013      	str	r3, [r2, #0]
 800c956:	e12f      	b.n	800cbb8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	015a      	lsls	r2, r3, #5
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	4413      	add	r3, r2
 800c960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	69ba      	ldr	r2, [r7, #24]
 800c968:	0151      	lsls	r1, r2, #5
 800c96a:	69fa      	ldr	r2, [r7, #28]
 800c96c:	440a      	add	r2, r1
 800c96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c972:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c976:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	78db      	ldrb	r3, [r3, #3]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d015      	beq.n	800c9ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 8117 	beq.w	800cbb8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	f003 030f 	and.w	r3, r3, #15
 800c99a:	2101      	movs	r1, #1
 800c99c:	fa01 f303 	lsl.w	r3, r1, r3
 800c9a0:	69f9      	ldr	r1, [r7, #28]
 800c9a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	634b      	str	r3, [r1, #52]	; 0x34
 800c9aa:	e105      	b.n	800cbb8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d110      	bne.n	800c9de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69ba      	ldr	r2, [r7, #24]
 800c9cc:	0151      	lsls	r1, r2, #5
 800c9ce:	69fa      	ldr	r2, [r7, #28]
 800c9d0:	440a      	add	r2, r1
 800c9d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	e00f      	b.n	800c9fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	015a      	lsls	r2, r3, #5
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	69ba      	ldr	r2, [r7, #24]
 800c9ee:	0151      	lsls	r1, r2, #5
 800c9f0:	69fa      	ldr	r2, [r7, #28]
 800c9f2:	440a      	add	r2, r1
 800c9f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	68d9      	ldr	r1, [r3, #12]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	b298      	uxth	r0, r3
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	4603      	mov	r3, r0
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 fa2b 	bl	800ce6e <USB_WritePacket>
 800ca18:	e0ce      	b.n	800cbb8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	015a      	lsls	r2, r3, #5
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	4413      	add	r3, r2
 800ca22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	0151      	lsls	r1, r2, #5
 800ca2c:	69fa      	ldr	r2, [r7, #28]
 800ca2e:	440a      	add	r2, r1
 800ca30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca34:	0cdb      	lsrs	r3, r3, #19
 800ca36:	04db      	lsls	r3, r3, #19
 800ca38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	015a      	lsls	r2, r3, #5
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	4413      	add	r3, r2
 800ca42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	69ba      	ldr	r2, [r7, #24]
 800ca4a:	0151      	lsls	r1, r2, #5
 800ca4c:	69fa      	ldr	r2, [r7, #28]
 800ca4e:	440a      	add	r2, r1
 800ca50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d126      	bne.n	800cab4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	015a      	lsls	r2, r3, #5
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca72:	691a      	ldr	r2, [r3, #16]
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca7c:	69b9      	ldr	r1, [r7, #24]
 800ca7e:	0148      	lsls	r0, r1, #5
 800ca80:	69f9      	ldr	r1, [r7, #28]
 800ca82:	4401      	add	r1, r0
 800ca84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	69ba      	ldr	r2, [r7, #24]
 800ca9c:	0151      	lsls	r1, r2, #5
 800ca9e:	69fa      	ldr	r2, [r7, #28]
 800caa0:	440a      	add	r2, r1
 800caa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800caaa:	6113      	str	r3, [r2, #16]
 800caac:	e036      	b.n	800cb1c <USB_EPStartXfer+0x3dc>
 800caae:	bf00      	nop
 800cab0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	695a      	ldr	r2, [r3, #20]
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	4413      	add	r3, r2
 800cabe:	1e5a      	subs	r2, r3, #1
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	015a      	lsls	r2, r3, #5
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	4413      	add	r3, r2
 800cad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad6:	691a      	ldr	r2, [r3, #16]
 800cad8:	8afb      	ldrh	r3, [r7, #22]
 800cada:	04d9      	lsls	r1, r3, #19
 800cadc:	4b39      	ldr	r3, [pc, #228]	; (800cbc4 <USB_EPStartXfer+0x484>)
 800cade:	400b      	ands	r3, r1
 800cae0:	69b9      	ldr	r1, [r7, #24]
 800cae2:	0148      	lsls	r0, r1, #5
 800cae4:	69f9      	ldr	r1, [r7, #28]
 800cae6:	4401      	add	r1, r0
 800cae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800caec:	4313      	orrs	r3, r2
 800caee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	015a      	lsls	r2, r3, #5
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	4413      	add	r3, r2
 800caf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafc:	691a      	ldr	r2, [r3, #16]
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	8af9      	ldrh	r1, [r7, #22]
 800cb04:	fb01 f303 	mul.w	r3, r1, r3
 800cb08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb0c:	69b9      	ldr	r1, [r7, #24]
 800cb0e:	0148      	lsls	r0, r1, #5
 800cb10:	69f9      	ldr	r1, [r7, #28]
 800cb12:	4401      	add	r1, r0
 800cb14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cb1c:	79fb      	ldrb	r3, [r7, #7]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d10d      	bne.n	800cb3e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d009      	beq.n	800cb3e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	68d9      	ldr	r1, [r3, #12]
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	015a      	lsls	r2, r3, #5
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	4413      	add	r3, r2
 800cb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb3a:	460a      	mov	r2, r1
 800cb3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	78db      	ldrb	r3, [r3, #3]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d128      	bne.n	800cb98 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d110      	bne.n	800cb78 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	015a      	lsls	r2, r3, #5
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	69ba      	ldr	r2, [r7, #24]
 800cb66:	0151      	lsls	r1, r2, #5
 800cb68:	69fa      	ldr	r2, [r7, #28]
 800cb6a:	440a      	add	r2, r1
 800cb6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb74:	6013      	str	r3, [r2, #0]
 800cb76:	e00f      	b.n	800cb98 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	015a      	lsls	r2, r3, #5
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	4413      	add	r3, r2
 800cb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	69ba      	ldr	r2, [r7, #24]
 800cb88:	0151      	lsls	r1, r2, #5
 800cb8a:	69fa      	ldr	r2, [r7, #28]
 800cb8c:	440a      	add	r2, r1
 800cb8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	015a      	lsls	r2, r3, #5
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	4413      	add	r3, r2
 800cba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	69ba      	ldr	r2, [r7, #24]
 800cba8:	0151      	lsls	r1, r2, #5
 800cbaa:	69fa      	ldr	r2, [r7, #28]
 800cbac:	440a      	add	r2, r1
 800cbae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cbb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3720      	adds	r7, #32
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	1ff80000 	.word	0x1ff80000

0800cbc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	785b      	ldrb	r3, [r3, #1]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	f040 80cd 	bne.w	800cd84 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d132      	bne.n	800cc58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	015a      	lsls	r2, r3, #5
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbfe:	691b      	ldr	r3, [r3, #16]
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	0151      	lsls	r1, r2, #5
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	440a      	add	r2, r1
 800cc08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	015a      	lsls	r2, r3, #5
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	0151      	lsls	r1, r2, #5
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	440a      	add	r2, r1
 800cc2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	015a      	lsls	r2, r3, #5
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	0151      	lsls	r1, r2, #5
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	440a      	add	r2, r1
 800cc4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc50:	0cdb      	lsrs	r3, r3, #19
 800cc52:	04db      	lsls	r3, r3, #19
 800cc54:	6113      	str	r3, [r2, #16]
 800cc56:	e04e      	b.n	800ccf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	015a      	lsls	r2, r3, #5
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	4413      	add	r3, r2
 800cc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	0151      	lsls	r1, r2, #5
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	440a      	add	r2, r1
 800cc6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc72:	0cdb      	lsrs	r3, r3, #19
 800cc74:	04db      	lsls	r3, r3, #19
 800cc76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	693a      	ldr	r2, [r7, #16]
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	695a      	ldr	r2, [r3, #20]
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d903      	bls.n	800ccb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	689a      	ldr	r2, [r3, #8]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	693a      	ldr	r2, [r7, #16]
 800ccc0:	0151      	lsls	r1, r2, #5
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	440a      	add	r2, r1
 800ccc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccdc:	691a      	ldr	r2, [r3, #16]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cce6:	6939      	ldr	r1, [r7, #16]
 800cce8:	0148      	lsls	r0, r1, #5
 800ccea:	6979      	ldr	r1, [r7, #20]
 800ccec:	4401      	add	r1, r0
 800ccee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d11e      	bne.n	800cd3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d009      	beq.n	800cd18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd10:	461a      	mov	r2, r3
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	015a      	lsls	r2, r3, #5
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	693a      	ldr	r2, [r7, #16]
 800cd28:	0151      	lsls	r1, r2, #5
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	440a      	add	r2, r1
 800cd2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	e092      	b.n	800ce60 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	015a      	lsls	r2, r3, #5
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	4413      	add	r3, r2
 800cd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	0151      	lsls	r1, r2, #5
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	440a      	add	r2, r1
 800cd50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d07e      	beq.n	800ce60 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	f003 030f 	and.w	r3, r3, #15
 800cd72:	2101      	movs	r1, #1
 800cd74:	fa01 f303 	lsl.w	r3, r1, r3
 800cd78:	6979      	ldr	r1, [r7, #20]
 800cd7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	634b      	str	r3, [r1, #52]	; 0x34
 800cd82:	e06d      	b.n	800ce60 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd90:	691b      	ldr	r3, [r3, #16]
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	0151      	lsls	r1, r2, #5
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	440a      	add	r2, r1
 800cd9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd9e:	0cdb      	lsrs	r3, r3, #19
 800cda0:	04db      	lsls	r3, r3, #19
 800cda2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	0151      	lsls	r1, r2, #5
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	440a      	add	r2, r1
 800cdba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cdc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cdc6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d003      	beq.n	800cdd8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	015a      	lsls	r2, r3, #5
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	4413      	add	r3, r2
 800cde0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	0151      	lsls	r1, r2, #5
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	440a      	add	r2, r1
 800cdee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	015a      	lsls	r2, r3, #5
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	4413      	add	r3, r2
 800ce00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce04:	691a      	ldr	r2, [r3, #16]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce0e:	6939      	ldr	r1, [r7, #16]
 800ce10:	0148      	lsls	r0, r1, #5
 800ce12:	6979      	ldr	r1, [r7, #20]
 800ce14:	4401      	add	r1, r0
 800ce16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ce1e:	79fb      	ldrb	r3, [r7, #7]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d10d      	bne.n	800ce40 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d009      	beq.n	800ce40 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	68d9      	ldr	r1, [r3, #12]
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	015a      	lsls	r2, r3, #5
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	4413      	add	r3, r2
 800ce38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce3c:	460a      	mov	r2, r1
 800ce3e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	015a      	lsls	r2, r3, #5
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	4413      	add	r3, r2
 800ce48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	0151      	lsls	r1, r2, #5
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	440a      	add	r2, r1
 800ce56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	371c      	adds	r7, #28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b089      	sub	sp, #36	; 0x24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	60b9      	str	r1, [r7, #8]
 800ce78:	4611      	mov	r1, r2
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	71fb      	strb	r3, [r7, #7]
 800ce80:	4613      	mov	r3, r2
 800ce82:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ce8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11a      	bne.n	800ceca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ce94:	88bb      	ldrh	r3, [r7, #4]
 800ce96:	3303      	adds	r3, #3
 800ce98:	089b      	lsrs	r3, r3, #2
 800ce9a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	61bb      	str	r3, [r7, #24]
 800cea0:	e00f      	b.n	800cec2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	031a      	lsls	r2, r3, #12
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceae:	461a      	mov	r2, r3
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	3304      	adds	r3, #4
 800ceba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	3301      	adds	r3, #1
 800cec0:	61bb      	str	r3, [r7, #24]
 800cec2:	69ba      	ldr	r2, [r7, #24]
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d3eb      	bcc.n	800cea2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3724      	adds	r7, #36	; 0x24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b089      	sub	sp, #36	; 0x24
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	4613      	mov	r3, r2
 800cee4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ceee:	88fb      	ldrh	r3, [r7, #6]
 800cef0:	3303      	adds	r3, #3
 800cef2:	089b      	lsrs	r3, r3, #2
 800cef4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cef6:	2300      	movs	r3, #0
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	e00b      	b.n	800cf14 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	601a      	str	r2, [r3, #0]
    pDest++;
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	3301      	adds	r3, #1
 800cf12:	61bb      	str	r3, [r7, #24]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d3ef      	bcc.n	800cefc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cf1c:	69fb      	ldr	r3, [r7, #28]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3724      	adds	r7, #36	; 0x24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b085      	sub	sp, #20
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	785b      	ldrb	r3, [r3, #1]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d12c      	bne.n	800cfa0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	015a      	lsls	r2, r3, #5
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	db12      	blt.n	800cf7e <USB_EPSetStall+0x54>
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00f      	beq.n	800cf7e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	015a      	lsls	r2, r3, #5
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	4413      	add	r3, r2
 800cf66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	0151      	lsls	r1, r2, #5
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	440a      	add	r2, r1
 800cf74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf7c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	015a      	lsls	r2, r3, #5
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	4413      	add	r3, r2
 800cf86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	0151      	lsls	r1, r2, #5
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	440a      	add	r2, r1
 800cf94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	e02b      	b.n	800cff8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	015a      	lsls	r2, r3, #5
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	db12      	blt.n	800cfd8 <USB_EPSetStall+0xae>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00f      	beq.n	800cfd8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	0151      	lsls	r1, r2, #5
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	440a      	add	r2, r1
 800cfce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cfd6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	0151      	lsls	r1, r2, #5
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	440a      	add	r2, r1
 800cfee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d006:	b480      	push	{r7}
 800d008:	b085      	sub	sp, #20
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	785b      	ldrb	r3, [r3, #1]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d128      	bne.n	800d074 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	015a      	lsls	r2, r3, #5
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	4413      	add	r3, r2
 800d02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	0151      	lsls	r1, r2, #5
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	440a      	add	r2, r1
 800d038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d03c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d040:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	78db      	ldrb	r3, [r3, #3]
 800d046:	2b03      	cmp	r3, #3
 800d048:	d003      	beq.n	800d052 <USB_EPClearStall+0x4c>
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	78db      	ldrb	r3, [r3, #3]
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d138      	bne.n	800d0c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	015a      	lsls	r2, r3, #5
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4413      	add	r3, r2
 800d05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	0151      	lsls	r1, r2, #5
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	440a      	add	r2, r1
 800d068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d06c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d070:	6013      	str	r3, [r2, #0]
 800d072:	e027      	b.n	800d0c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	015a      	lsls	r2, r3, #5
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	4413      	add	r3, r2
 800d07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	0151      	lsls	r1, r2, #5
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	440a      	add	r2, r1
 800d08a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d08e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d092:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	78db      	ldrb	r3, [r3, #3]
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d003      	beq.n	800d0a4 <USB_EPClearStall+0x9e>
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	78db      	ldrb	r3, [r3, #3]
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d10f      	bne.n	800d0c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	015a      	lsls	r2, r3, #5
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	0151      	lsls	r1, r2, #5
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	440a      	add	r2, r1
 800d0ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	b085      	sub	sp, #20
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	460b      	mov	r3, r1
 800d0dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d0f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	78fb      	ldrb	r3, [r7, #3]
 800d100:	011b      	lsls	r3, r3, #4
 800d102:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d106:	68f9      	ldr	r1, [r7, #12]
 800d108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d10c:	4313      	orrs	r3, r2
 800d10e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3714      	adds	r7, #20
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d11e:	b480      	push	{r7}
 800d120:	b085      	sub	sp, #20
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d138:	f023 0303 	bic.w	r3, r3, #3
 800d13c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d14c:	f023 0302 	bic.w	r3, r3, #2
 800d150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d17a:	f023 0303 	bic.w	r3, r3, #3
 800d17e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d18e:	f043 0302 	orr.w	r3, r3, #2
 800d192:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3714      	adds	r7, #20
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	b085      	sub	sp, #20
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	699b      	ldr	r3, [r3, #24]
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	0c1b      	lsrs	r3, r3, #16
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d20e:	699b      	ldr	r3, [r3, #24]
 800d210:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	4013      	ands	r3, r2
 800d21e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	b29b      	uxth	r3, r3
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d240:	78fb      	ldrb	r3, [r7, #3]
 800d242:	015a      	lsls	r2, r3, #5
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4413      	add	r3, r2
 800d248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d256:	695b      	ldr	r3, [r3, #20]
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	4013      	ands	r3, r2
 800d25c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d25e:	68bb      	ldr	r3, [r7, #8]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d290:	78fb      	ldrb	r3, [r7, #3]
 800d292:	f003 030f 	and.w	r3, r3, #15
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	fa22 f303 	lsr.w	r3, r2, r3
 800d29c:	01db      	lsls	r3, r3, #7
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d2a6:	78fb      	ldrb	r3, [r7, #3]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	693a      	ldr	r2, [r7, #16]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d2ba:	68bb      	ldr	r3, [r7, #8]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	371c      	adds	r7, #28
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	f003 0301 	and.w	r3, r3, #1
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d302:	f023 0307 	bic.w	r3, r3, #7
 800d306:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d31a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
	...

0800d32c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b087      	sub	sp, #28
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	460b      	mov	r3, r1
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	333c      	adds	r3, #60	; 0x3c
 800d342:	3304      	adds	r3, #4
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	4a26      	ldr	r2, [pc, #152]	; (800d3e4 <USB_EP0_OutStart+0xb8>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d90a      	bls.n	800d366 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d35c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d360:	d101      	bne.n	800d366 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	e037      	b.n	800d3d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d36c:	461a      	mov	r2, r3
 800d36e:	2300      	movs	r3, #0
 800d370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d394:	f043 0318 	orr.w	r3, r3, #24
 800d398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	697a      	ldr	r2, [r7, #20]
 800d3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d3ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d3ae:	7afb      	ldrb	r3, [r7, #11]
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d10f      	bne.n	800d3d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	697a      	ldr	r2, [r7, #20]
 800d3ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d3d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	371c      	adds	r7, #28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	4f54300a 	.word	0x4f54300a

0800d3e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	4a13      	ldr	r2, [pc, #76]	; (800d44c <USB_CoreReset+0x64>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d901      	bls.n	800d406 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d402:	2303      	movs	r3, #3
 800d404:	e01b      	b.n	800d43e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	daf2      	bge.n	800d3f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	f043 0201 	orr.w	r2, r3, #1
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3301      	adds	r3, #1
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	4a09      	ldr	r2, [pc, #36]	; (800d44c <USB_CoreReset+0x64>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d901      	bls.n	800d430 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d42c:	2303      	movs	r3, #3
 800d42e:	e006      	b.n	800d43e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d0f0      	beq.n	800d41e <USB_CoreReset+0x36>

  return HAL_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3714      	adds	r7, #20
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	00030d40 	.word	0x00030d40

0800d450 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d454:	4904      	ldr	r1, [pc, #16]	; (800d468 <MX_FATFS_Init+0x18>)
 800d456:	4805      	ldr	r0, [pc, #20]	; (800d46c <MX_FATFS_Init+0x1c>)
 800d458:	f002 f9c0 	bl	800f7dc <FATFS_LinkDriver>
 800d45c:	4603      	mov	r3, r0
 800d45e:	461a      	mov	r2, r3
 800d460:	4b03      	ldr	r3, [pc, #12]	; (800d470 <MX_FATFS_Init+0x20>)
 800d462:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d464:	bf00      	nop
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20004abc 	.word	0x20004abc
 800d46c:	2000028c 	.word	0x2000028c
 800d470:	20004ac0 	.word	0x20004ac0

0800d474 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800d47e:	79fb      	ldrb	r3, [r7, #7]
 800d480:	4618      	mov	r0, r3
 800d482:	f000 f9d7 	bl	800d834 <USER_SPI_initialize>
 800d486:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3708      	adds	r7, #8
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f000 fab3 	bl	800da08 <USER_SPI_status>
 800d4a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800d4bc:	7bf8      	ldrb	r0, [r7, #15]
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	68b9      	ldr	r1, [r7, #8]
 800d4c4:	f000 fab6 	bl	800da34 <USER_SPI_read>
 800d4c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	603b      	str	r3, [r7, #0]
 800d4de:	4603      	mov	r3, r0
 800d4e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800d4e2:	7bf8      	ldrb	r0, [r7, #15]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	f000 fb09 	bl	800db00 <USER_SPI_write>
 800d4ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	603a      	str	r2, [r7, #0]
 800d502:	71fb      	strb	r3, [r7, #7]
 800d504:	460b      	mov	r3, r1
 800d506:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800d508:	79b9      	ldrb	r1, [r7, #6]
 800d50a:	79fb      	ldrb	r3, [r7, #7]
 800d50c:	683a      	ldr	r2, [r7, #0]
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fb72 	bl	800dbf8 <USER_SPI_ioctl>
 800d514:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d516:	4618      	mov	r0, r3
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d528:	f7f8 f97c 	bl	8005824 <HAL_GetTick>
 800d52c:	4602      	mov	r2, r0
 800d52e:	4b04      	ldr	r3, [pc, #16]	; (800d540 <SPI_Timer_On+0x20>)
 800d530:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800d532:	4a04      	ldr	r2, [pc, #16]	; (800d544 <SPI_Timer_On+0x24>)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6013      	str	r3, [r2, #0]
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	20004f28 	.word	0x20004f28
 800d544:	20004f2c 	.word	0x20004f2c

0800d548 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d548:	b580      	push	{r7, lr}
 800d54a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d54c:	f7f8 f96a 	bl	8005824 <HAL_GetTick>
 800d550:	4602      	mov	r2, r0
 800d552:	4b06      	ldr	r3, [pc, #24]	; (800d56c <SPI_Timer_Status+0x24>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	1ad2      	subs	r2, r2, r3
 800d558:	4b05      	ldr	r3, [pc, #20]	; (800d570 <SPI_Timer_Status+0x28>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	bf34      	ite	cc
 800d560:	2301      	movcc	r3, #1
 800d562:	2300      	movcs	r3, #0
 800d564:	b2db      	uxtb	r3, r3
}
 800d566:	4618      	mov	r0, r3
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20004f28 	.word	0x20004f28
 800d570:	20004f2c 	.word	0x20004f2c

0800d574 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af02      	add	r7, sp, #8
 800d57a:	4603      	mov	r3, r0
 800d57c:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800d57e:	f107 020f 	add.w	r2, r7, #15
 800d582:	1df9      	adds	r1, r7, #7
 800d584:	2332      	movs	r3, #50	; 0x32
 800d586:	9300      	str	r3, [sp, #0]
 800d588:	2301      	movs	r3, #1
 800d58a:	4804      	ldr	r0, [pc, #16]	; (800d59c <xchg_spi+0x28>)
 800d58c:	f7fd f851 	bl	800a632 <HAL_SPI_TransmitReceive>
    return rxDat;
 800d590:	7bfb      	ldrb	r3, [r7, #15]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20004974 	.word	0x20004974

0800d5a0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800d5a0:	b590      	push	{r4, r7, lr}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e00a      	b.n	800d5c6 <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	18d4      	adds	r4, r2, r3
 800d5b6:	20ff      	movs	r0, #255	; 0xff
 800d5b8:	f7ff ffdc 	bl	800d574 <xchg_spi>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d3f0      	bcc.n	800d5b0 <rcvr_spi_multi+0x10>
    }
}
 800d5ce:	bf00      	nop
 800d5d0:	3714      	adds	r7, #20
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd90      	pop	{r4, r7, pc}

0800d5d6 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	e009      	b.n	800d5fa <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff ffc0 	bl	800d574 <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d3f1      	bcc.n	800d5e6 <xmit_spi_multi+0x10>
    }
}
 800d602:	bf00      	nop
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b086      	sub	sp, #24
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800d612:	f7f8 f907 	bl	8005824 <HAL_GetTick>
 800d616:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800d61c:	20ff      	movs	r0, #255	; 0xff
 800d61e:	f7ff ffa9 	bl	800d574 <xchg_spi>
 800d622:	4603      	mov	r3, r0
 800d624:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2bff      	cmp	r3, #255	; 0xff
 800d62a:	d007      	beq.n	800d63c <wait_ready+0x32>
 800d62c:	f7f8 f8fa 	bl	8005824 <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	693a      	ldr	r2, [r7, #16]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d8ef      	bhi.n	800d61c <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	2bff      	cmp	r3, #255	; 0xff
 800d640:	bf0c      	ite	eq
 800d642:	2301      	moveq	r3, #1
 800d644:	2300      	movne	r3, #0
 800d646:	b2db      	uxtb	r3, r3
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800d654:	2201      	movs	r2, #1
 800d656:	2110      	movs	r1, #16
 800d658:	4803      	ldr	r0, [pc, #12]	; (800d668 <despiselect+0x18>)
 800d65a:	f7f9 fad5 	bl	8006c08 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800d65e:	20ff      	movs	r0, #255	; 0xff
 800d660:	f7ff ff88 	bl	800d574 <xchg_spi>

}
 800d664:	bf00      	nop
 800d666:	bd80      	pop	{r7, pc}
 800d668:	40020800 	.word	0x40020800

0800d66c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800d670:	2200      	movs	r2, #0
 800d672:	2110      	movs	r1, #16
 800d674:	4809      	ldr	r0, [pc, #36]	; (800d69c <spiselect+0x30>)
 800d676:	f7f9 fac7 	bl	8006c08 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800d67a:	20ff      	movs	r0, #255	; 0xff
 800d67c:	f7ff ff7a 	bl	800d574 <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800d680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d684:	f7ff ffc1 	bl	800d60a <wait_ready>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d001      	beq.n	800d692 <spiselect+0x26>
 800d68e:	2301      	movs	r3, #1
 800d690:	e002      	b.n	800d698 <spiselect+0x2c>

    despiselect();
 800d692:	f7ff ffdd 	bl	800d650 <despiselect>
    return 0;   /* Timeout */
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	40020800 	.word	0x40020800

0800d6a0 <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800d6aa:	20c8      	movs	r0, #200	; 0xc8
 800d6ac:	f7ff ff38 	bl	800d520 <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800d6b0:	20ff      	movs	r0, #255	; 0xff
 800d6b2:	f7ff ff5f 	bl	800d574 <xchg_spi>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800d6ba:	7bfb      	ldrb	r3, [r7, #15]
 800d6bc:	2bff      	cmp	r3, #255	; 0xff
 800d6be:	d104      	bne.n	800d6ca <rcvr_datablock+0x2a>
 800d6c0:	f7ff ff42 	bl	800d548 <SPI_Timer_Status>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1f2      	bne.n	800d6b0 <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
 800d6cc:	2bfe      	cmp	r3, #254	; 0xfe
 800d6ce:	d001      	beq.n	800d6d4 <rcvr_datablock+0x34>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	e00a      	b.n	800d6ea <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800d6d4:	6839      	ldr	r1, [r7, #0]
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7ff ff62 	bl	800d5a0 <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800d6dc:	20ff      	movs	r0, #255	; 0xff
 800d6de:	f7ff ff49 	bl	800d574 <xchg_spi>
 800d6e2:	20ff      	movs	r0, #255	; 0xff
 800d6e4:	f7ff ff46 	bl	800d574 <xchg_spi>

    return 1;                       /* Function succeeded */
 800d6e8:	2301      	movs	r3, #1
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b084      	sub	sp, #16
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800d6fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d702:	f7ff ff82 	bl	800d60a <wait_ready>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <xmit_datablock+0x1e>
 800d70c:	2300      	movs	r3, #0
 800d70e:	e01e      	b.n	800d74e <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff ff2e 	bl	800d574 <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800d718:	78fb      	ldrb	r3, [r7, #3]
 800d71a:	2bfd      	cmp	r3, #253	; 0xfd
 800d71c:	d016      	beq.n	800d74c <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800d71e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff ff57 	bl	800d5d6 <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800d728:	20ff      	movs	r0, #255	; 0xff
 800d72a:	f7ff ff23 	bl	800d574 <xchg_spi>
 800d72e:	20ff      	movs	r0, #255	; 0xff
 800d730:	f7ff ff20 	bl	800d574 <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800d734:	20ff      	movs	r0, #255	; 0xff
 800d736:	f7ff ff1d 	bl	800d574 <xchg_spi>
 800d73a:	4603      	mov	r3, r0
 800d73c:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
 800d740:	f003 031f 	and.w	r3, r3, #31
 800d744:	2b05      	cmp	r3, #5
 800d746:	d001      	beq.n	800d74c <xmit_datablock+0x5a>
 800d748:	2300      	movs	r3, #0
 800d74a:	e000      	b.n	800d74e <xmit_datablock+0x5c>
    }
    return 1;
 800d74c:	2301      	movs	r3, #1
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	4603      	mov	r3, r0
 800d75e:	6039      	str	r1, [r7, #0]
 800d760:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800d762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d766:	2b00      	cmp	r3, #0
 800d768:	da0e      	bge.n	800d788 <send_cmd+0x32>
        cmd &= 0x7F;
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d770:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800d772:	2100      	movs	r1, #0
 800d774:	2037      	movs	r0, #55	; 0x37
 800d776:	f7ff ffee 	bl	800d756 <send_cmd>
 800d77a:	4603      	mov	r3, r0
 800d77c:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800d77e:	7bbb      	ldrb	r3, [r7, #14]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d901      	bls.n	800d788 <send_cmd+0x32>
 800d784:	7bbb      	ldrb	r3, [r7, #14]
 800d786:	e051      	b.n	800d82c <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b0c      	cmp	r3, #12
 800d78c:	d008      	beq.n	800d7a0 <send_cmd+0x4a>
        despiselect();
 800d78e:	f7ff ff5f 	bl	800d650 <despiselect>
        if (!spiselect()) return 0xFF;
 800d792:	f7ff ff6b 	bl	800d66c <spiselect>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d101      	bne.n	800d7a0 <send_cmd+0x4a>
 800d79c:	23ff      	movs	r3, #255	; 0xff
 800d79e:	e045      	b.n	800d82c <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff fee3 	bl	800d574 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	0e1b      	lsrs	r3, r3, #24
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff fedd 	bl	800d574 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	0c1b      	lsrs	r3, r3, #16
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff fed7 	bl	800d574 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	0a1b      	lsrs	r3, r3, #8
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7ff fed1 	bl	800d574 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7ff fecc 	bl	800d574 <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800d7dc:	2301      	movs	r3, #1
 800d7de:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d101      	bne.n	800d7ea <send_cmd+0x94>
 800d7e6:	2395      	movs	r3, #149	; 0x95
 800d7e8:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800d7ea:	79fb      	ldrb	r3, [r7, #7]
 800d7ec:	2b08      	cmp	r3, #8
 800d7ee:	d101      	bne.n	800d7f4 <send_cmd+0x9e>
 800d7f0:	2387      	movs	r3, #135	; 0x87
 800d7f2:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7ff febc 	bl	800d574 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800d7fc:	79fb      	ldrb	r3, [r7, #7]
 800d7fe:	2b0c      	cmp	r3, #12
 800d800:	d102      	bne.n	800d808 <send_cmd+0xb2>
 800d802:	20ff      	movs	r0, #255	; 0xff
 800d804:	f7ff feb6 	bl	800d574 <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800d808:	230a      	movs	r3, #10
 800d80a:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800d80c:	20ff      	movs	r0, #255	; 0xff
 800d80e:	f7ff feb1 	bl	800d574 <xchg_spi>
 800d812:	4603      	mov	r3, r0
 800d814:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800d816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	da05      	bge.n	800d82a <send_cmd+0xd4>
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	3b01      	subs	r3, #1
 800d822:	73fb      	strb	r3, [r7, #15]
 800d824:	7bfb      	ldrb	r3, [r7, #15]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1f0      	bne.n	800d80c <send_cmd+0xb6>

    return res;                         /* Return received response */
 800d82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800d834:	b590      	push	{r4, r7, lr}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800d83e:	79fb      	ldrb	r3, [r7, #7]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d001      	beq.n	800d848 <USER_SPI_initialize+0x14>
 800d844:	2301      	movs	r3, #1
 800d846:	e0d4      	b.n	800d9f2 <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800d848:	4b6c      	ldr	r3, [pc, #432]	; (800d9fc <USER_SPI_initialize+0x1c8>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <USER_SPI_initialize+0x2a>
 800d856:	4b69      	ldr	r3, [pc, #420]	; (800d9fc <USER_SPI_initialize+0x1c8>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	e0c9      	b.n	800d9f2 <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800d85e:	4b68      	ldr	r3, [pc, #416]	; (800da00 <USER_SPI_initialize+0x1cc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	4b66      	ldr	r3, [pc, #408]	; (800da00 <USER_SPI_initialize+0x1cc>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800d86c:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800d86e:	230a      	movs	r3, #10
 800d870:	73fb      	strb	r3, [r7, #15]
 800d872:	e005      	b.n	800d880 <USER_SPI_initialize+0x4c>
 800d874:	20ff      	movs	r0, #255	; 0xff
 800d876:	f7ff fe7d 	bl	800d574 <xchg_spi>
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	73fb      	strb	r3, [r7, #15]
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1f6      	bne.n	800d874 <USER_SPI_initialize+0x40>

    ty = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800d88a:	2100      	movs	r1, #0
 800d88c:	2000      	movs	r0, #0
 800d88e:	f7ff ff62 	bl	800d756 <send_cmd>
 800d892:	4603      	mov	r3, r0
 800d894:	2b01      	cmp	r3, #1
 800d896:	f040 808b 	bne.w	800d9b0 <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800d89a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d89e:	f7ff fe3f 	bl	800d520 <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800d8a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d8a6:	2008      	movs	r0, #8
 800d8a8:	f7ff ff55 	bl	800d756 <send_cmd>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d151      	bne.n	800d956 <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]
 800d8b6:	e00d      	b.n	800d8d4 <USER_SPI_initialize+0xa0>
 800d8b8:	7bfc      	ldrb	r4, [r7, #15]
 800d8ba:	20ff      	movs	r0, #255	; 0xff
 800d8bc:	f7ff fe5a 	bl	800d574 <xchg_spi>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	f107 0310 	add.w	r3, r7, #16
 800d8c8:	4423      	add	r3, r4
 800d8ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	73fb      	strb	r3, [r7, #15]
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d9ee      	bls.n	800d8b8 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800d8da:	7abb      	ldrb	r3, [r7, #10]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d167      	bne.n	800d9b0 <USER_SPI_initialize+0x17c>
 800d8e0:	7afb      	ldrb	r3, [r7, #11]
 800d8e2:	2baa      	cmp	r3, #170	; 0xaa
 800d8e4:	d164      	bne.n	800d9b0 <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800d8e6:	bf00      	nop
 800d8e8:	f7ff fe2e 	bl	800d548 <SPI_Timer_Status>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d007      	beq.n	800d902 <USER_SPI_initialize+0xce>
 800d8f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d8f6:	20a9      	movs	r0, #169	; 0xa9
 800d8f8:	f7ff ff2d 	bl	800d756 <send_cmd>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1f2      	bne.n	800d8e8 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800d902:	f7ff fe21 	bl	800d548 <SPI_Timer_Status>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d051      	beq.n	800d9b0 <USER_SPI_initialize+0x17c>
 800d90c:	2100      	movs	r1, #0
 800d90e:	203a      	movs	r0, #58	; 0x3a
 800d910:	f7ff ff21 	bl	800d756 <send_cmd>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d14a      	bne.n	800d9b0 <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800d91a:	2300      	movs	r3, #0
 800d91c:	73fb      	strb	r3, [r7, #15]
 800d91e:	e00d      	b.n	800d93c <USER_SPI_initialize+0x108>
 800d920:	7bfc      	ldrb	r4, [r7, #15]
 800d922:	20ff      	movs	r0, #255	; 0xff
 800d924:	f7ff fe26 	bl	800d574 <xchg_spi>
 800d928:	4603      	mov	r3, r0
 800d92a:	461a      	mov	r2, r3
 800d92c:	f107 0310 	add.w	r3, r7, #16
 800d930:	4423      	add	r3, r4
 800d932:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	3301      	adds	r3, #1
 800d93a:	73fb      	strb	r3, [r7, #15]
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d9ee      	bls.n	800d920 <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800d942:	7a3b      	ldrb	r3, [r7, #8]
 800d944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <USER_SPI_initialize+0x11c>
 800d94c:	230c      	movs	r3, #12
 800d94e:	e000      	b.n	800d952 <USER_SPI_initialize+0x11e>
 800d950:	2304      	movs	r3, #4
 800d952:	737b      	strb	r3, [r7, #13]
 800d954:	e02c      	b.n	800d9b0 <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800d956:	2100      	movs	r1, #0
 800d958:	20a9      	movs	r0, #169	; 0xa9
 800d95a:	f7ff fefc 	bl	800d756 <send_cmd>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b01      	cmp	r3, #1
 800d962:	d804      	bhi.n	800d96e <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800d964:	2302      	movs	r3, #2
 800d966:	737b      	strb	r3, [r7, #13]
 800d968:	23a9      	movs	r3, #169	; 0xa9
 800d96a:	73bb      	strb	r3, [r7, #14]
 800d96c:	e003      	b.n	800d976 <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800d96e:	2301      	movs	r3, #1
 800d970:	737b      	strb	r3, [r7, #13]
 800d972:	2301      	movs	r3, #1
 800d974:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800d976:	bf00      	nop
 800d978:	f7ff fde6 	bl	800d548 <SPI_Timer_Status>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d007      	beq.n	800d992 <USER_SPI_initialize+0x15e>
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	2100      	movs	r1, #0
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fee5 	bl	800d756 <send_cmd>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1f2      	bne.n	800d978 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800d992:	f7ff fdd9 	bl	800d548 <SPI_Timer_Status>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d007      	beq.n	800d9ac <USER_SPI_initialize+0x178>
 800d99c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9a0:	2010      	movs	r0, #16
 800d9a2:	f7ff fed8 	bl	800d756 <send_cmd>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <USER_SPI_initialize+0x17c>
                ty = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800d9b0:	4a14      	ldr	r2, [pc, #80]	; (800da04 <USER_SPI_initialize+0x1d0>)
 800d9b2:	7b7b      	ldrb	r3, [r7, #13]
 800d9b4:	7013      	strb	r3, [r2, #0]
    despiselect();
 800d9b6:	f7ff fe4b 	bl	800d650 <despiselect>

    if (ty) {           /* OK */
 800d9ba:	7b7b      	ldrb	r3, [r7, #13]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d012      	beq.n	800d9e6 <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800d9c0:	4b0f      	ldr	r3, [pc, #60]	; (800da00 <USER_SPI_initialize+0x1cc>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d9ca:	4b0d      	ldr	r3, [pc, #52]	; (800da00 <USER_SPI_initialize+0x1cc>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f042 0220 	orr.w	r2, r2, #32
 800d9d2:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800d9d4:	4b09      	ldr	r3, [pc, #36]	; (800d9fc <USER_SPI_initialize+0x1c8>)
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f023 0301 	bic.w	r3, r3, #1
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	4b06      	ldr	r3, [pc, #24]	; (800d9fc <USER_SPI_initialize+0x1c8>)
 800d9e2:	701a      	strb	r2, [r3, #0]
 800d9e4:	e002      	b.n	800d9ec <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800d9e6:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <USER_SPI_initialize+0x1c8>)
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800d9ec:	4b03      	ldr	r3, [pc, #12]	; (800d9fc <USER_SPI_initialize+0x1c8>)
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	b2db      	uxtb	r3, r3
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd90      	pop	{r4, r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	200002a0 	.word	0x200002a0
 800da00:	20004974 	.word	0x20004974
 800da04:	20000884 	.word	0x20000884

0800da08 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <USER_SPI_status+0x14>
 800da18:	2301      	movs	r3, #1
 800da1a:	e002      	b.n	800da22 <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800da1c:	4b04      	ldr	r3, [pc, #16]	; (800da30 <USER_SPI_status+0x28>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	b2db      	uxtb	r3, r3
}
 800da22:	4618      	mov	r0, r3
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	200002a0 	.word	0x200002a0

0800da34 <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60b9      	str	r1, [r7, #8]
 800da3c:	607a      	str	r2, [r7, #4]
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d102      	bne.n	800da50 <USER_SPI_read+0x1c>
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <USER_SPI_read+0x20>
 800da50:	2304      	movs	r3, #4
 800da52:	e04d      	b.n	800daf0 <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800da54:	4b28      	ldr	r3, [pc, #160]	; (800daf8 <USER_SPI_read+0xc4>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	f003 0301 	and.w	r3, r3, #1
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <USER_SPI_read+0x32>
 800da62:	2303      	movs	r3, #3
 800da64:	e044      	b.n	800daf0 <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800da66:	4b25      	ldr	r3, [pc, #148]	; (800dafc <USER_SPI_read+0xc8>)
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	f003 0308 	and.w	r3, r3, #8
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d102      	bne.n	800da78 <USER_SPI_read+0x44>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	025b      	lsls	r3, r3, #9
 800da76:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d111      	bne.n	800daa2 <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800da7e:	6879      	ldr	r1, [r7, #4]
 800da80:	2011      	movs	r0, #17
 800da82:	f7ff fe68 	bl	800d756 <send_cmd>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d129      	bne.n	800dae0 <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800da8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da90:	68b8      	ldr	r0, [r7, #8]
 800da92:	f7ff fe05 	bl	800d6a0 <rcvr_datablock>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d021      	beq.n	800dae0 <USER_SPI_read+0xac>
            count = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	603b      	str	r3, [r7, #0]
 800daa0:	e01e      	b.n	800dae0 <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800daa2:	6879      	ldr	r1, [r7, #4]
 800daa4:	2012      	movs	r0, #18
 800daa6:	f7ff fe56 	bl	800d756 <send_cmd>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d117      	bne.n	800dae0 <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800dab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dab4:	68b8      	ldr	r0, [r7, #8]
 800dab6:	f7ff fdf3 	bl	800d6a0 <rcvr_datablock>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00a      	beq.n	800dad6 <USER_SPI_read+0xa2>
                buff += 512;
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dac6:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	3b01      	subs	r3, #1
 800dacc:	603b      	str	r3, [r7, #0]
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1ed      	bne.n	800dab0 <USER_SPI_read+0x7c>
 800dad4:	e000      	b.n	800dad8 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800dad6:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800dad8:	2100      	movs	r1, #0
 800dada:	200c      	movs	r0, #12
 800dadc:	f7ff fe3b 	bl	800d756 <send_cmd>
        }
    }
    despiselect();
 800dae0:	f7ff fdb6 	bl	800d650 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	bf14      	ite	ne
 800daea:	2301      	movne	r3, #1
 800daec:	2300      	moveq	r3, #0
 800daee:	b2db      	uxtb	r3, r3
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	200002a0 	.word	0x200002a0
 800dafc:	20000884 	.word	0x20000884

0800db00 <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	60b9      	str	r1, [r7, #8]
 800db08:	607a      	str	r2, [r7, #4]
 800db0a:	603b      	str	r3, [r7, #0]
 800db0c:	4603      	mov	r3, r0
 800db0e:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800db10:	7bfb      	ldrb	r3, [r7, #15]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d102      	bne.n	800db1c <USER_SPI_write+0x1c>
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <USER_SPI_write+0x20>
 800db1c:	2304      	movs	r3, #4
 800db1e:	e063      	b.n	800dbe8 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800db20:	4b33      	ldr	r3, [pc, #204]	; (800dbf0 <USER_SPI_write+0xf0>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	b2db      	uxtb	r3, r3
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <USER_SPI_write+0x32>
 800db2e:	2303      	movs	r3, #3
 800db30:	e05a      	b.n	800dbe8 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800db32:	4b2f      	ldr	r3, [pc, #188]	; (800dbf0 <USER_SPI_write+0xf0>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	b2db      	uxtb	r3, r3
 800db38:	f003 0304 	and.w	r3, r3, #4
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <USER_SPI_write+0x44>
 800db40:	2302      	movs	r3, #2
 800db42:	e051      	b.n	800dbe8 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800db44:	4b2b      	ldr	r3, [pc, #172]	; (800dbf4 <USER_SPI_write+0xf4>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	f003 0308 	and.w	r3, r3, #8
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d102      	bne.n	800db56 <USER_SPI_write+0x56>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	025b      	lsls	r3, r3, #9
 800db54:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d110      	bne.n	800db7e <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800db5c:	6879      	ldr	r1, [r7, #4]
 800db5e:	2018      	movs	r0, #24
 800db60:	f7ff fdf9 	bl	800d756 <send_cmd>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d136      	bne.n	800dbd8 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800db6a:	21fe      	movs	r1, #254	; 0xfe
 800db6c:	68b8      	ldr	r0, [r7, #8]
 800db6e:	f7ff fdc0 	bl	800d6f2 <xmit_datablock>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d02f      	beq.n	800dbd8 <USER_SPI_write+0xd8>
            count = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	603b      	str	r3, [r7, #0]
 800db7c:	e02c      	b.n	800dbd8 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800db7e:	4b1d      	ldr	r3, [pc, #116]	; (800dbf4 <USER_SPI_write+0xf4>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	f003 0306 	and.w	r3, r3, #6
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <USER_SPI_write+0x92>
 800db8a:	6839      	ldr	r1, [r7, #0]
 800db8c:	2097      	movs	r0, #151	; 0x97
 800db8e:	f7ff fde2 	bl	800d756 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800db92:	6879      	ldr	r1, [r7, #4]
 800db94:	2019      	movs	r0, #25
 800db96:	f7ff fdde 	bl	800d756 <send_cmd>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d11b      	bne.n	800dbd8 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800dba0:	21fc      	movs	r1, #252	; 0xfc
 800dba2:	68b8      	ldr	r0, [r7, #8]
 800dba4:	f7ff fda5 	bl	800d6f2 <xmit_datablock>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <USER_SPI_write+0xc4>
                buff += 512;
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dbb4:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	603b      	str	r3, [r7, #0]
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1ee      	bne.n	800dba0 <USER_SPI_write+0xa0>
 800dbc2:	e000      	b.n	800dbc6 <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800dbc4:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800dbc6:	21fd      	movs	r1, #253	; 0xfd
 800dbc8:	2000      	movs	r0, #0
 800dbca:	f7ff fd92 	bl	800d6f2 <xmit_datablock>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <USER_SPI_write+0xd8>
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800dbd8:	f7ff fd3a 	bl	800d650 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	bf14      	ite	ne
 800dbe2:	2301      	movne	r3, #1
 800dbe4:	2300      	moveq	r3, #0
 800dbe6:	b2db      	uxtb	r3, r3
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	200002a0 	.word	0x200002a0
 800dbf4:	20000884 	.word	0x20000884

0800dbf8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08c      	sub	sp, #48	; 0x30
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	603a      	str	r2, [r7, #0]
 800dc02:	71fb      	strb	r3, [r7, #7]
 800dc04:	460b      	mov	r3, r1
 800dc06:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800dc08:	79fb      	ldrb	r3, [r7, #7]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <USER_SPI_ioctl+0x1a>
 800dc0e:	2304      	movs	r3, #4
 800dc10:	e15a      	b.n	800dec8 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800dc12:	4baf      	ldr	r3, [pc, #700]	; (800ded0 <USER_SPI_ioctl+0x2d8>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <USER_SPI_ioctl+0x2c>
 800dc20:	2303      	movs	r3, #3
 800dc22:	e151      	b.n	800dec8 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800dc2a:	79bb      	ldrb	r3, [r7, #6]
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	f200 8136 	bhi.w	800de9e <USER_SPI_ioctl+0x2a6>
 800dc32:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <USER_SPI_ioctl+0x40>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dc4d 	.word	0x0800dc4d
 800dc3c:	0800dc61 	.word	0x0800dc61
 800dc40:	0800de9f 	.word	0x0800de9f
 800dc44:	0800dd0d 	.word	0x0800dd0d
 800dc48:	0800de03 	.word	0x0800de03
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800dc4c:	f7ff fd0e 	bl	800d66c <spiselect>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 8127 	beq.w	800dea6 <USER_SPI_ioctl+0x2ae>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800dc5e:	e122      	b.n	800dea6 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800dc60:	2100      	movs	r1, #0
 800dc62:	2009      	movs	r0, #9
 800dc64:	f7ff fd77 	bl	800d756 <send_cmd>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f040 811d 	bne.w	800deaa <USER_SPI_ioctl+0x2b2>
 800dc70:	f107 030c 	add.w	r3, r7, #12
 800dc74:	2110      	movs	r1, #16
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7ff fd12 	bl	800d6a0 <rcvr_datablock>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f000 8113 	beq.w	800deaa <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800dc84:	7b3b      	ldrb	r3, [r7, #12]
 800dc86:	099b      	lsrs	r3, r3, #6
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d111      	bne.n	800dcb2 <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800dc8e:	7d7b      	ldrb	r3, [r7, #21]
 800dc90:	461a      	mov	r2, r3
 800dc92:	7d3b      	ldrb	r3, [r7, #20]
 800dc94:	021b      	lsls	r3, r3, #8
 800dc96:	4413      	add	r3, r2
 800dc98:	461a      	mov	r2, r3
 800dc9a:	7cfb      	ldrb	r3, [r7, #19]
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800dca2:	4413      	add	r3, r2
 800dca4:	3301      	adds	r3, #1
 800dca6:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	029a      	lsls	r2, r3, #10
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	601a      	str	r2, [r3, #0]
 800dcb0:	e028      	b.n	800dd04 <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800dcb2:	7c7b      	ldrb	r3, [r7, #17]
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	7dbb      	ldrb	r3, [r7, #22]
 800dcbc:	09db      	lsrs	r3, r3, #7
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	4413      	add	r3, r2
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	7d7b      	ldrb	r3, [r7, #21]
 800dcc6:	005b      	lsls	r3, r3, #1
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	f003 0306 	and.w	r3, r3, #6
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	4413      	add	r3, r2
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	3302      	adds	r3, #2
 800dcd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800dcda:	7d3b      	ldrb	r3, [r7, #20]
 800dcdc:	099b      	lsrs	r3, r3, #6
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	461a      	mov	r2, r3
 800dce2:	7cfb      	ldrb	r3, [r7, #19]
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	441a      	add	r2, r3
 800dce8:	7cbb      	ldrb	r3, [r7, #18]
 800dcea:	029b      	lsls	r3, r3, #10
 800dcec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dcf0:	4413      	add	r3, r2
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800dcf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dcfa:	3b09      	subs	r3, #9
 800dcfc:	69fa      	ldr	r2, [r7, #28]
 800dcfe:	409a      	lsls	r2, r3
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800dd0a:	e0ce      	b.n	800deaa <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800dd0c:	4b71      	ldr	r3, [pc, #452]	; (800ded4 <USER_SPI_ioctl+0x2dc>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d031      	beq.n	800dd7c <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800dd18:	2100      	movs	r1, #0
 800dd1a:	208d      	movs	r0, #141	; 0x8d
 800dd1c:	f7ff fd1b 	bl	800d756 <send_cmd>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f040 80c3 	bne.w	800deae <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800dd28:	20ff      	movs	r0, #255	; 0xff
 800dd2a:	f7ff fc23 	bl	800d574 <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800dd2e:	f107 030c 	add.w	r3, r7, #12
 800dd32:	2110      	movs	r1, #16
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff fcb3 	bl	800d6a0 <rcvr_datablock>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 80b6 	beq.w	800deae <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800dd42:	2330      	movs	r3, #48	; 0x30
 800dd44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800dd48:	e007      	b.n	800dd5a <USER_SPI_ioctl+0x162>
 800dd4a:	20ff      	movs	r0, #255	; 0xff
 800dd4c:	f7ff fc12 	bl	800d574 <xchg_spi>
 800dd50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dd54:	3b01      	subs	r3, #1
 800dd56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800dd5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1f3      	bne.n	800dd4a <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800dd62:	7dbb      	ldrb	r3, [r7, #22]
 800dd64:	091b      	lsrs	r3, r3, #4
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	461a      	mov	r2, r3
 800dd6a:	2310      	movs	r3, #16
 800dd6c:	fa03 f202 	lsl.w	r2, r3, r2
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800dd7a:	e098      	b.n	800deae <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	2009      	movs	r0, #9
 800dd80:	f7ff fce9 	bl	800d756 <send_cmd>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f040 8091 	bne.w	800deae <USER_SPI_ioctl+0x2b6>
 800dd8c:	f107 030c 	add.w	r3, r7, #12
 800dd90:	2110      	movs	r1, #16
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7ff fc84 	bl	800d6a0 <rcvr_datablock>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 8087 	beq.w	800deae <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800dda0:	4b4c      	ldr	r3, [pc, #304]	; (800ded4 <USER_SPI_ioctl+0x2dc>)
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	f003 0302 	and.w	r3, r3, #2
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d012      	beq.n	800ddd2 <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ddac:	7dbb      	ldrb	r3, [r7, #22]
 800ddae:	005b      	lsls	r3, r3, #1
 800ddb0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ddb4:	7dfa      	ldrb	r2, [r7, #23]
 800ddb6:	09d2      	lsrs	r2, r2, #7
 800ddb8:	b2d2      	uxtb	r2, r2
 800ddba:	4413      	add	r3, r2
 800ddbc:	1c5a      	adds	r2, r3, #1
 800ddbe:	7e7b      	ldrb	r3, [r7, #25]
 800ddc0:	099b      	lsrs	r3, r3, #6
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddca:	461a      	mov	r2, r3
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	601a      	str	r2, [r3, #0]
 800ddd0:	e013      	b.n	800ddfa <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ddd2:	7dbb      	ldrb	r3, [r7, #22]
 800ddd4:	109b      	asrs	r3, r3, #2
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	f003 031f 	and.w	r3, r3, #31
 800dddc:	3301      	adds	r3, #1
 800ddde:	7dfa      	ldrb	r2, [r7, #23]
 800dde0:	00d2      	lsls	r2, r2, #3
 800dde2:	f002 0218 	and.w	r2, r2, #24
 800dde6:	7df9      	ldrb	r1, [r7, #23]
 800dde8:	0949      	lsrs	r1, r1, #5
 800ddea:	b2c9      	uxtb	r1, r1
 800ddec:	440a      	add	r2, r1
 800ddee:	3201      	adds	r2, #1
 800ddf0:	fb02 f303 	mul.w	r3, r2, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800de00:	e055      	b.n	800deae <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800de02:	4b34      	ldr	r3, [pc, #208]	; (800ded4 <USER_SPI_ioctl+0x2dc>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	f003 0306 	and.w	r3, r3, #6
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d051      	beq.n	800deb2 <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800de0e:	f107 020c 	add.w	r2, r7, #12
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	210b      	movs	r1, #11
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff feee 	bl	800dbf8 <USER_SPI_ioctl>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d149      	bne.n	800deb6 <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800de22:	7b3b      	ldrb	r3, [r7, #12]
 800de24:	099b      	lsrs	r3, r3, #6
 800de26:	b2db      	uxtb	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d104      	bne.n	800de36 <USER_SPI_ioctl+0x23e>
 800de2c:	7dbb      	ldrb	r3, [r7, #22]
 800de2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de32:	2b00      	cmp	r3, #0
 800de34:	d041      	beq.n	800deba <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	623b      	str	r3, [r7, #32]
 800de3a:	6a3b      	ldr	r3, [r7, #32]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de40:	6a3b      	ldr	r3, [r7, #32]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800de46:	4b23      	ldr	r3, [pc, #140]	; (800ded4 <USER_SPI_ioctl+0x2dc>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	f003 0308 	and.w	r3, r3, #8
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d105      	bne.n	800de5e <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800de52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de54:	025b      	lsls	r3, r3, #9
 800de56:	62bb      	str	r3, [r7, #40]	; 0x28
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	025b      	lsls	r3, r3, #9
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800de5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de60:	2020      	movs	r0, #32
 800de62:	f7ff fc78 	bl	800d756 <send_cmd>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d128      	bne.n	800debe <USER_SPI_ioctl+0x2c6>
 800de6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de6e:	2021      	movs	r0, #33	; 0x21
 800de70:	f7ff fc71 	bl	800d756 <send_cmd>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d121      	bne.n	800debe <USER_SPI_ioctl+0x2c6>
 800de7a:	2100      	movs	r1, #0
 800de7c:	2026      	movs	r0, #38	; 0x26
 800de7e:	f7ff fc6a 	bl	800d756 <send_cmd>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d11a      	bne.n	800debe <USER_SPI_ioctl+0x2c6>
 800de88:	f247 5030 	movw	r0, #30000	; 0x7530
 800de8c:	f7ff fbbd 	bl	800d60a <wait_ready>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d013      	beq.n	800debe <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800de96:	2300      	movs	r3, #0
 800de98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800de9c:	e00f      	b.n	800debe <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800de9e:	2304      	movs	r3, #4
 800dea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dea4:	e00c      	b.n	800dec0 <USER_SPI_ioctl+0x2c8>
        break;
 800dea6:	bf00      	nop
 800dea8:	e00a      	b.n	800dec0 <USER_SPI_ioctl+0x2c8>
        break;
 800deaa:	bf00      	nop
 800deac:	e008      	b.n	800dec0 <USER_SPI_ioctl+0x2c8>
        break;
 800deae:	bf00      	nop
 800deb0:	e006      	b.n	800dec0 <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800deb2:	bf00      	nop
 800deb4:	e004      	b.n	800dec0 <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800deb6:	bf00      	nop
 800deb8:	e002      	b.n	800dec0 <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800deba:	bf00      	nop
 800debc:	e000      	b.n	800dec0 <USER_SPI_ioctl+0x2c8>
        break;
 800debe:	bf00      	nop
    }

    despiselect();
 800dec0:	f7ff fbc6 	bl	800d650 <despiselect>

    return res;
 800dec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3730      	adds	r7, #48	; 0x30
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	200002a0 	.word	0x200002a0
 800ded4:	20000884 	.word	0x20000884

0800ded8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	460b      	mov	r3, r1
 800dee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dee4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dee8:	f004 fcde 	bl	80128a8 <malloc>
 800deec:	4603      	mov	r3, r0
 800deee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d105      	bne.n	800df02 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800defe:	2302      	movs	r3, #2
 800df00:	e066      	b.n	800dfd0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7c1b      	ldrb	r3, [r3, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d119      	bne.n	800df46 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df16:	2202      	movs	r2, #2
 800df18:	2181      	movs	r1, #129	; 0x81
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f004 facd 	bl	80124ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df2a:	2202      	movs	r2, #2
 800df2c:	2101      	movs	r1, #1
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f004 fac3 	bl	80124ba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2210      	movs	r2, #16
 800df40:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800df44:	e016      	b.n	800df74 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df46:	2340      	movs	r3, #64	; 0x40
 800df48:	2202      	movs	r2, #2
 800df4a:	2181      	movs	r1, #129	; 0x81
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f004 fab4 	bl	80124ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df58:	2340      	movs	r3, #64	; 0x40
 800df5a:	2202      	movs	r2, #2
 800df5c:	2101      	movs	r1, #1
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f004 faab 	bl	80124ba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2210      	movs	r2, #16
 800df70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df74:	2308      	movs	r3, #8
 800df76:	2203      	movs	r2, #3
 800df78:	2182      	movs	r1, #130	; 0x82
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f004 fa9d 	bl	80124ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	7c1b      	ldrb	r3, [r3, #16]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d109      	bne.n	800dfbe <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f004 fb6e 	bl	8012698 <USBD_LL_PrepareReceive>
 800dfbc:	e007      	b.n	800dfce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfc4:	2340      	movs	r3, #64	; 0x40
 800dfc6:	2101      	movs	r1, #1
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f004 fb65 	bl	8012698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dfe8:	2181      	movs	r1, #129	; 0x81
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f004 fa8b 	bl	8012506 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dff6:	2101      	movs	r1, #1
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f004 fa84 	bl	8012506 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e006:	2182      	movs	r1, #130	; 0x82
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f004 fa7c 	bl	8012506 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00e      	beq.n	800e046 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e038:	4618      	mov	r0, r3
 800e03a:	f004 fc3d 	bl	80128b8 <free>
    pdev->pClassData = NULL;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e046:	7bfb      	ldrb	r3, [r7, #15]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e060:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e062:	2300      	movs	r3, #0
 800e064:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e066:	2300      	movs	r3, #0
 800e068:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e076:	2b00      	cmp	r3, #0
 800e078:	d03a      	beq.n	800e0f0 <USBD_CDC_Setup+0xa0>
 800e07a:	2b20      	cmp	r3, #32
 800e07c:	f040 8097 	bne.w	800e1ae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	88db      	ldrh	r3, [r3, #6]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d029      	beq.n	800e0dc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	b25b      	sxtb	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	da11      	bge.n	800e0b6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	683a      	ldr	r2, [r7, #0]
 800e09c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e09e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0a0:	683a      	ldr	r2, [r7, #0]
 800e0a2:	88d2      	ldrh	r2, [r2, #6]
 800e0a4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e0a6:	6939      	ldr	r1, [r7, #16]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	88db      	ldrh	r3, [r3, #6]
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f001 fac7 	bl	800f642 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e0b4:	e082      	b.n	800e1bc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	785a      	ldrb	r2, [r3, #1]
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	88db      	ldrh	r3, [r3, #6]
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e0cc:	6939      	ldr	r1, [r7, #16]
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	88db      	ldrh	r3, [r3, #6]
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f001 fae0 	bl	800f69a <USBD_CtlPrepareRx>
    break;
 800e0da:	e06f      	b.n	800e1bc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	7850      	ldrb	r0, [r2, #1]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	4798      	blx	r3
    break;
 800e0ee:	e065      	b.n	800e1bc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	785b      	ldrb	r3, [r3, #1]
 800e0f4:	2b0b      	cmp	r3, #11
 800e0f6:	d84f      	bhi.n	800e198 <USBD_CDC_Setup+0x148>
 800e0f8:	a201      	add	r2, pc, #4	; (adr r2, 800e100 <USBD_CDC_Setup+0xb0>)
 800e0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fe:	bf00      	nop
 800e100:	0800e131 	.word	0x0800e131
 800e104:	0800e1a7 	.word	0x0800e1a7
 800e108:	0800e199 	.word	0x0800e199
 800e10c:	0800e199 	.word	0x0800e199
 800e110:	0800e199 	.word	0x0800e199
 800e114:	0800e199 	.word	0x0800e199
 800e118:	0800e199 	.word	0x0800e199
 800e11c:	0800e199 	.word	0x0800e199
 800e120:	0800e199 	.word	0x0800e199
 800e124:	0800e199 	.word	0x0800e199
 800e128:	0800e159 	.word	0x0800e159
 800e12c:	0800e181 	.word	0x0800e181
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e136:	2b03      	cmp	r3, #3
 800e138:	d107      	bne.n	800e14a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e13a:	f107 030c 	add.w	r3, r7, #12
 800e13e:	2202      	movs	r2, #2
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f001 fa7d 	bl	800f642 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e148:	e030      	b.n	800e1ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e14a:	6839      	ldr	r1, [r7, #0]
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f001 fa07 	bl	800f560 <USBD_CtlError>
        ret = USBD_FAIL;
 800e152:	2303      	movs	r3, #3
 800e154:	75fb      	strb	r3, [r7, #23]
      break;
 800e156:	e029      	b.n	800e1ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d107      	bne.n	800e172 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e162:	f107 030f 	add.w	r3, r7, #15
 800e166:	2201      	movs	r2, #1
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f001 fa69 	bl	800f642 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e170:	e01c      	b.n	800e1ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f001 f9f3 	bl	800f560 <USBD_CtlError>
        ret = USBD_FAIL;
 800e17a:	2303      	movs	r3, #3
 800e17c:	75fb      	strb	r3, [r7, #23]
      break;
 800e17e:	e015      	b.n	800e1ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e186:	2b03      	cmp	r3, #3
 800e188:	d00f      	beq.n	800e1aa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f001 f9e7 	bl	800f560 <USBD_CtlError>
        ret = USBD_FAIL;
 800e192:	2303      	movs	r3, #3
 800e194:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e196:	e008      	b.n	800e1aa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f001 f9e0 	bl	800f560 <USBD_CtlError>
      ret = USBD_FAIL;
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a4:	e002      	b.n	800e1ac <USBD_CDC_Setup+0x15c>
      break;
 800e1a6:	bf00      	nop
 800e1a8:	e008      	b.n	800e1bc <USBD_CDC_Setup+0x16c>
      break;
 800e1aa:	bf00      	nop
    }
    break;
 800e1ac:	e006      	b.n	800e1bc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f001 f9d5 	bl	800f560 <USBD_CtlError>
    ret = USBD_FAIL;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	75fb      	strb	r3, [r7, #23]
    break;
 800e1ba:	bf00      	nop
  }

  return (uint8_t)ret;
 800e1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop

0800e1c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d101      	bne.n	800e1ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e1e6:	2303      	movs	r3, #3
 800e1e8:	e049      	b.n	800e27e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e1f2:	78fa      	ldrb	r2, [r7, #3]
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	440b      	add	r3, r1
 800e200:	3318      	adds	r3, #24
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d029      	beq.n	800e25c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e208:	78fa      	ldrb	r2, [r7, #3]
 800e20a:	6879      	ldr	r1, [r7, #4]
 800e20c:	4613      	mov	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	440b      	add	r3, r1
 800e216:	3318      	adds	r3, #24
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	78f9      	ldrb	r1, [r7, #3]
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	460b      	mov	r3, r1
 800e220:	00db      	lsls	r3, r3, #3
 800e222:	1a5b      	subs	r3, r3, r1
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4403      	add	r3, r0
 800e228:	3344      	adds	r3, #68	; 0x44
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e230:	fb03 f301 	mul.w	r3, r3, r1
 800e234:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e236:	2b00      	cmp	r3, #0
 800e238:	d110      	bne.n	800e25c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e23a:	78fa      	ldrb	r2, [r7, #3]
 800e23c:	6879      	ldr	r1, [r7, #4]
 800e23e:	4613      	mov	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4413      	add	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	440b      	add	r3, r1
 800e248:	3318      	adds	r3, #24
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e24e:	78f9      	ldrb	r1, [r7, #3]
 800e250:	2300      	movs	r3, #0
 800e252:	2200      	movs	r2, #0
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f004 f9fe 	bl	8012656 <USBD_LL_Transmit>
 800e25a:	e00f      	b.n	800e27c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2200      	movs	r2, #0
 800e260:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e26a:	691b      	ldr	r3, [r3, #16]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e278:	78fa      	ldrb	r2, [r7, #3]
 800e27a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	460b      	mov	r3, r1
 800e290:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e298:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	e015      	b.n	800e2d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e2a8:	78fb      	ldrb	r3, [r7, #3]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f004 fa14 	bl	80126da <USBD_LL_GetRxDataSize>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d015      	beq.n	800e322 <USBD_CDC_EP0_RxReady+0x46>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e2fc:	2bff      	cmp	r3, #255	; 0xff
 800e2fe:	d010      	beq.n	800e322 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e30e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e316:	b292      	uxth	r2, r2
 800e318:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	22ff      	movs	r2, #255	; 0xff
 800e31e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2243      	movs	r2, #67	; 0x43
 800e338:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e33a:	4b03      	ldr	r3, [pc, #12]	; (800e348 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	2000032c 	.word	0x2000032c

0800e34c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2243      	movs	r2, #67	; 0x43
 800e358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e35a:	4b03      	ldr	r3, [pc, #12]	; (800e368 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	200002e8 	.word	0x200002e8

0800e36c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2243      	movs	r2, #67	; 0x43
 800e378:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e37a:	4b03      	ldr	r3, [pc, #12]	; (800e388 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr
 800e388:	20000370 	.word	0x20000370

0800e38c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	220a      	movs	r2, #10
 800e398:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e39a:	4b03      	ldr	r3, [pc, #12]	; (800e3a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	200002a4 	.word	0x200002a4

0800e3ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d101      	bne.n	800e3c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e3bc:	2303      	movs	r3, #3
 800e3be:	e004      	b.n	800e3ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	370c      	adds	r7, #12
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr

0800e3d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e3d6:	b480      	push	{r7}
 800e3d8:	b087      	sub	sp, #28
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	371c      	adds	r7, #28
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e418:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	683a      	ldr	r2, [r7, #0]
 800e41e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e422:	2300      	movs	r3, #0
}
 800e424:	4618      	mov	r0, r3
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e43e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e440:	2301      	movs	r3, #1
 800e442:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e44e:	2303      	movs	r3, #3
 800e450:	e01a      	b.n	800e488 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d114      	bne.n	800e486 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2201      	movs	r2, #1
 800e460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e47a:	2181      	movs	r1, #129	; 0x81
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f004 f8ea 	bl	8012656 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e486:	7bfb      	ldrb	r3, [r7, #15]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e49e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	e016      	b.n	800e4dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	7c1b      	ldrb	r3, [r3, #16]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d109      	bne.n	800e4ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e4bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f004 f8e8 	bl	8012698 <USBD_LL_PrepareReceive>
 800e4c8:	e007      	b.n	800e4da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e4d0:	2340      	movs	r3, #64	; 0x40
 800e4d2:	2101      	movs	r1, #1
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f004 f8df 	bl	8012698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e4da:	2300      	movs	r3, #0
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e025      	b.n	800e548 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2200      	movs	r2, #0
 800e50a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e514:	2b00      	cmp	r3, #0
 800e516:	d003      	beq.n	800e520 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d003      	beq.n	800e52e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2201      	movs	r2, #1
 800e532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	79fa      	ldrb	r2, [r7, #7]
 800e53a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f003 ff55 	bl	80123ec <USBD_LL_Init>
 800e542:	4603      	mov	r3, r0
 800e544:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e546:	7dfb      	ldrb	r3, [r7, #23]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e55a:	2300      	movs	r3, #0
 800e55c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e564:	2303      	movs	r3, #3
 800e566:	e010      	b.n	800e58a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e578:	f107 020e 	add.w	r2, r7, #14
 800e57c:	4610      	mov	r0, r2
 800e57e:	4798      	blx	r3
 800e580:	4602      	mov	r2, r0
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b082      	sub	sp, #8
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f003 ff72 	bl	8012484 <USBD_LL_Start>
 800e5a0:	4603      	mov	r3, r0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e5aa:	b480      	push	{r7}
 800e5ac:	b083      	sub	sp, #12
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e5cc:	2303      	movs	r3, #3
 800e5ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d009      	beq.n	800e5ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	78fa      	ldrb	r2, [r7, #3]
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	4798      	blx	r3
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	460b      	mov	r3, r1
 800e602:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d007      	beq.n	800e61e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	78fa      	ldrb	r2, [r7, #3]
 800e618:	4611      	mov	r1, r2
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	4798      	blx	r3
  }

  return USBD_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 ff56 	bl	800f4ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e64e:	461a      	mov	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e65c:	f003 031f 	and.w	r3, r3, #31
 800e660:	2b01      	cmp	r3, #1
 800e662:	d00e      	beq.n	800e682 <USBD_LL_SetupStage+0x5a>
 800e664:	2b01      	cmp	r3, #1
 800e666:	d302      	bcc.n	800e66e <USBD_LL_SetupStage+0x46>
 800e668:	2b02      	cmp	r3, #2
 800e66a:	d014      	beq.n	800e696 <USBD_LL_SetupStage+0x6e>
 800e66c:	e01d      	b.n	800e6aa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e674:	4619      	mov	r1, r3
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fa18 	bl	800eaac <USBD_StdDevReq>
 800e67c:	4603      	mov	r3, r0
 800e67e:	73fb      	strb	r3, [r7, #15]
      break;
 800e680:	e020      	b.n	800e6c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fa7c 	bl	800eb88 <USBD_StdItfReq>
 800e690:	4603      	mov	r3, r0
 800e692:	73fb      	strb	r3, [r7, #15]
      break;
 800e694:	e016      	b.n	800e6c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fab8 	bl	800ec14 <USBD_StdEPReq>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e6a8:	e00c      	b.n	800e6c4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e6b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f003 ff43 	bl	8012544 <USBD_LL_StallEP>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	73fb      	strb	r3, [r7, #15]
      break;
 800e6c2:	bf00      	nop
  }

  return ret;
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b086      	sub	sp, #24
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	60f8      	str	r0, [r7, #12]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	607a      	str	r2, [r7, #4]
 800e6da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e6dc:	7afb      	ldrb	r3, [r7, #11]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d137      	bne.n	800e752 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e6e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6f0:	2b03      	cmp	r3, #3
 800e6f2:	d14a      	bne.n	800e78a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	689a      	ldr	r2, [r3, #8]
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d913      	bls.n	800e728 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	689a      	ldr	r2, [r3, #8]
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	1ad2      	subs	r2, r2, r3
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	68da      	ldr	r2, [r3, #12]
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	4293      	cmp	r3, r2
 800e718:	bf28      	it	cs
 800e71a:	4613      	movcs	r3, r2
 800e71c:	461a      	mov	r2, r3
 800e71e:	6879      	ldr	r1, [r7, #4]
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f000 ffd7 	bl	800f6d4 <USBD_CtlContinueRx>
 800e726:	e030      	b.n	800e78a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00a      	beq.n	800e74a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d105      	bne.n	800e74a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	68f8      	ldr	r0, [r7, #12]
 800e748:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f000 ffd3 	bl	800f6f6 <USBD_CtlSendStatus>
 800e750:	e01b      	b.n	800e78a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d013      	beq.n	800e786 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e764:	2b03      	cmp	r3, #3
 800e766:	d10e      	bne.n	800e786 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	7afa      	ldrb	r2, [r7, #11]
 800e772:	4611      	mov	r1, r2
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	4798      	blx	r3
 800e778:	4603      	mov	r3, r0
 800e77a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e77c:	7dfb      	ldrb	r3, [r7, #23]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e782:	7dfb      	ldrb	r3, [r7, #23]
 800e784:	e002      	b.n	800e78c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e786:	2303      	movs	r3, #3
 800e788:	e000      	b.n	800e78c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	460b      	mov	r3, r1
 800e79e:	607a      	str	r2, [r7, #4]
 800e7a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e7a2:	7afb      	ldrb	r3, [r7, #11]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d16a      	bne.n	800e87e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	3314      	adds	r3, #20
 800e7ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d155      	bne.n	800e864 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	689a      	ldr	r2, [r3, #8]
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d914      	bls.n	800e7ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	689a      	ldr	r2, [r3, #8]
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	1ad2      	subs	r2, r2, r3
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f000 ff4c 	bl	800f678 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f003 ff56 	bl	8012698 <USBD_LL_PrepareReceive>
 800e7ec:	e03a      	b.n	800e864 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d11c      	bne.n	800e834 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	685a      	ldr	r2, [r3, #4]
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e802:	429a      	cmp	r2, r3
 800e804:	d316      	bcc.n	800e834 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	685a      	ldr	r2, [r3, #4]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e810:	429a      	cmp	r2, r3
 800e812:	d20f      	bcs.n	800e834 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e814:	2200      	movs	r2, #0
 800e816:	2100      	movs	r1, #0
 800e818:	68f8      	ldr	r0, [r7, #12]
 800e81a:	f000 ff2d 	bl	800f678 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e826:	2300      	movs	r3, #0
 800e828:	2200      	movs	r2, #0
 800e82a:	2100      	movs	r1, #0
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f003 ff33 	bl	8012698 <USBD_LL_PrepareReceive>
 800e832:	e017      	b.n	800e864 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00a      	beq.n	800e856 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e846:	2b03      	cmp	r3, #3
 800e848:	d105      	bne.n	800e856 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e856:	2180      	movs	r1, #128	; 0x80
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f003 fe73 	bl	8012544 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f000 ff5c 	bl	800f71c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d123      	bne.n	800e8b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7ff fe9b 	bl	800e5aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e87c:	e01b      	b.n	800e8b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e884:	695b      	ldr	r3, [r3, #20]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d013      	beq.n	800e8b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e890:	2b03      	cmp	r3, #3
 800e892:	d10e      	bne.n	800e8b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e89a:	695b      	ldr	r3, [r3, #20]
 800e89c:	7afa      	ldrb	r2, [r7, #11]
 800e89e:	4611      	mov	r1, r2
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	4798      	blx	r3
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e8a8:	7dfb      	ldrb	r3, [r7, #23]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d003      	beq.n	800e8b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e8ae:	7dfb      	ldrb	r3, [r7, #23]
 800e8b0:	e002      	b.n	800e8b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e8b2:	2303      	movs	r3, #3
 800e8b4:	e000      	b.n	800e8b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3718      	adds	r7, #24
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d009      	beq.n	800e904 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	6852      	ldr	r2, [r2, #4]
 800e8fc:	b2d2      	uxtb	r2, r2
 800e8fe:	4611      	mov	r1, r2
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e904:	2340      	movs	r3, #64	; 0x40
 800e906:	2200      	movs	r2, #0
 800e908:	2100      	movs	r1, #0
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f003 fdd5 	bl	80124ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2240      	movs	r2, #64	; 0x40
 800e91c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e920:	2340      	movs	r3, #64	; 0x40
 800e922:	2200      	movs	r2, #0
 800e924:	2180      	movs	r1, #128	; 0x80
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f003 fdc7 	bl	80124ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2240      	movs	r2, #64	; 0x40
 800e936:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e938:	2300      	movs	r3, #0
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e942:	b480      	push	{r7}
 800e944:	b083      	sub	sp, #12
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	460b      	mov	r3, r1
 800e94c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	78fa      	ldrb	r2, [r7, #3]
 800e952:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr

0800e962 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e962:	b480      	push	{r7}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2204      	movs	r2, #4
 800e97a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e99a:	2b04      	cmp	r3, #4
 800e99c:	d105      	bne.n	800e9aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d10b      	bne.n	800e9e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d0:	69db      	ldr	r3, [r3, #28]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d005      	beq.n	800e9e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9dc:	69db      	ldr	r3, [r3, #28]
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e9e2:	2300      	movs	r3, #0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	370c      	adds	r7, #12
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr

0800ea06 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ea06:	b480      	push	{r7}
 800ea08:	b083      	sub	sp, #12
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	460b      	mov	r3, r1
 800ea10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d009      	beq.n	800ea64 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	6852      	ldr	r2, [r2, #4]
 800ea5c:	b2d2      	uxtb	r2, r2
 800ea5e:	4611      	mov	r1, r2
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	4798      	blx	r3
  }

  return USBD_OK;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b087      	sub	sp, #28
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	3301      	adds	r3, #1
 800ea84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ea8c:	8a3b      	ldrh	r3, [r7, #16]
 800ea8e:	021b      	lsls	r3, r3, #8
 800ea90:	b21a      	sxth	r2, r3
 800ea92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	b21b      	sxth	r3, r3
 800ea9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ea9c:	89fb      	ldrh	r3, [r7, #14]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
	...

0800eaac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eab6:	2300      	movs	r3, #0
 800eab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eac2:	2b20      	cmp	r3, #32
 800eac4:	d004      	beq.n	800ead0 <USBD_StdDevReq+0x24>
 800eac6:	2b40      	cmp	r3, #64	; 0x40
 800eac8:	d002      	beq.n	800ead0 <USBD_StdDevReq+0x24>
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00a      	beq.n	800eae4 <USBD_StdDevReq+0x38>
 800eace:	e050      	b.n	800eb72 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	4798      	blx	r3
 800eade:	4603      	mov	r3, r0
 800eae0:	73fb      	strb	r3, [r7, #15]
    break;
 800eae2:	e04b      	b.n	800eb7c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	785b      	ldrb	r3, [r3, #1]
 800eae8:	2b09      	cmp	r3, #9
 800eaea:	d83c      	bhi.n	800eb66 <USBD_StdDevReq+0xba>
 800eaec:	a201      	add	r2, pc, #4	; (adr r2, 800eaf4 <USBD_StdDevReq+0x48>)
 800eaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf2:	bf00      	nop
 800eaf4:	0800eb49 	.word	0x0800eb49
 800eaf8:	0800eb5d 	.word	0x0800eb5d
 800eafc:	0800eb67 	.word	0x0800eb67
 800eb00:	0800eb53 	.word	0x0800eb53
 800eb04:	0800eb67 	.word	0x0800eb67
 800eb08:	0800eb27 	.word	0x0800eb27
 800eb0c:	0800eb1d 	.word	0x0800eb1d
 800eb10:	0800eb67 	.word	0x0800eb67
 800eb14:	0800eb3f 	.word	0x0800eb3f
 800eb18:	0800eb31 	.word	0x0800eb31
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f9ce 	bl	800eec0 <USBD_GetDescriptor>
      break;
 800eb24:	e024      	b.n	800eb70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fb5d 	bl	800f1e8 <USBD_SetAddress>
      break;
 800eb2e:	e01f      	b.n	800eb70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800eb30:	6839      	ldr	r1, [r7, #0]
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 fb9a 	bl	800f26c <USBD_SetConfig>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb3c:	e018      	b.n	800eb70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 fc37 	bl	800f3b4 <USBD_GetConfig>
      break;
 800eb46:	e013      	b.n	800eb70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800eb48:	6839      	ldr	r1, [r7, #0]
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 fc66 	bl	800f41c <USBD_GetStatus>
      break;
 800eb50:	e00e      	b.n	800eb70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800eb52:	6839      	ldr	r1, [r7, #0]
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f000 fc94 	bl	800f482 <USBD_SetFeature>
      break;
 800eb5a:	e009      	b.n	800eb70 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800eb5c:	6839      	ldr	r1, [r7, #0]
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 fca3 	bl	800f4aa <USBD_ClrFeature>
      break;
 800eb64:	e004      	b.n	800eb70 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800eb66:	6839      	ldr	r1, [r7, #0]
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 fcf9 	bl	800f560 <USBD_CtlError>
      break;
 800eb6e:	bf00      	nop
    }
    break;
 800eb70:	e004      	b.n	800eb7c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 fcf3 	bl	800f560 <USBD_CtlError>
    break;
 800eb7a:	bf00      	nop
  }

  return ret;
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop

0800eb88 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb9e:	2b20      	cmp	r3, #32
 800eba0:	d003      	beq.n	800ebaa <USBD_StdItfReq+0x22>
 800eba2:	2b40      	cmp	r3, #64	; 0x40
 800eba4:	d001      	beq.n	800ebaa <USBD_StdItfReq+0x22>
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d12a      	bne.n	800ec00 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	d81d      	bhi.n	800ebf2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	889b      	ldrh	r3, [r3, #4]
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d813      	bhi.n	800ebe8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	4798      	blx	r3
 800ebce:	4603      	mov	r3, r0
 800ebd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	88db      	ldrh	r3, [r3, #6]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d110      	bne.n	800ebfc <USBD_StdItfReq+0x74>
 800ebda:	7bfb      	ldrb	r3, [r7, #15]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d10d      	bne.n	800ebfc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 fd88 	bl	800f6f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ebe6:	e009      	b.n	800ebfc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ebe8:	6839      	ldr	r1, [r7, #0]
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 fcb8 	bl	800f560 <USBD_CtlError>
      break;
 800ebf0:	e004      	b.n	800ebfc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ebf2:	6839      	ldr	r1, [r7, #0]
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fcb3 	bl	800f560 <USBD_CtlError>
      break;
 800ebfa:	e000      	b.n	800ebfe <USBD_StdItfReq+0x76>
      break;
 800ebfc:	bf00      	nop
    }
    break;
 800ebfe:	e004      	b.n	800ec0a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fcac 	bl	800f560 <USBD_CtlError>
    break;
 800ec08:	bf00      	nop
  }

  return ret;
 800ec0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	889b      	ldrh	r3, [r3, #4]
 800ec26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec30:	2b20      	cmp	r3, #32
 800ec32:	d004      	beq.n	800ec3e <USBD_StdEPReq+0x2a>
 800ec34:	2b40      	cmp	r3, #64	; 0x40
 800ec36:	d002      	beq.n	800ec3e <USBD_StdEPReq+0x2a>
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00a      	beq.n	800ec52 <USBD_StdEPReq+0x3e>
 800ec3c:	e135      	b.n	800eeaa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	4798      	blx	r3
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec50:	e130      	b.n	800eeb4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	785b      	ldrb	r3, [r3, #1]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d03e      	beq.n	800ecd8 <USBD_StdEPReq+0xc4>
 800ec5a:	2b03      	cmp	r3, #3
 800ec5c:	d002      	beq.n	800ec64 <USBD_StdEPReq+0x50>
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d077      	beq.n	800ed52 <USBD_StdEPReq+0x13e>
 800ec62:	e11c      	b.n	800ee9e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d002      	beq.n	800ec74 <USBD_StdEPReq+0x60>
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d015      	beq.n	800ec9e <USBD_StdEPReq+0x8a>
 800ec72:	e02b      	b.n	800eccc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec74:	7bbb      	ldrb	r3, [r7, #14]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00c      	beq.n	800ec94 <USBD_StdEPReq+0x80>
 800ec7a:	7bbb      	ldrb	r3, [r7, #14]
 800ec7c:	2b80      	cmp	r3, #128	; 0x80
 800ec7e:	d009      	beq.n	800ec94 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec80:	7bbb      	ldrb	r3, [r7, #14]
 800ec82:	4619      	mov	r1, r3
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f003 fc5d 	bl	8012544 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec8a:	2180      	movs	r1, #128	; 0x80
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f003 fc59 	bl	8012544 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ec92:	e020      	b.n	800ecd6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fc62 	bl	800f560 <USBD_CtlError>
        break;
 800ec9c:	e01b      	b.n	800ecd6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	885b      	ldrh	r3, [r3, #2]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10e      	bne.n	800ecc4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eca6:	7bbb      	ldrb	r3, [r7, #14]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00b      	beq.n	800ecc4 <USBD_StdEPReq+0xb0>
 800ecac:	7bbb      	ldrb	r3, [r7, #14]
 800ecae:	2b80      	cmp	r3, #128	; 0x80
 800ecb0:	d008      	beq.n	800ecc4 <USBD_StdEPReq+0xb0>
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	88db      	ldrh	r3, [r3, #6]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d104      	bne.n	800ecc4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecba:	7bbb      	ldrb	r3, [r7, #14]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f003 fc40 	bl	8012544 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 fd16 	bl	800f6f6 <USBD_CtlSendStatus>

        break;
 800ecca:	e004      	b.n	800ecd6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800eccc:	6839      	ldr	r1, [r7, #0]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fc46 	bl	800f560 <USBD_CtlError>
        break;
 800ecd4:	bf00      	nop
      }
      break;
 800ecd6:	e0e7      	b.n	800eea8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d002      	beq.n	800ece8 <USBD_StdEPReq+0xd4>
 800ece2:	2b03      	cmp	r3, #3
 800ece4:	d015      	beq.n	800ed12 <USBD_StdEPReq+0xfe>
 800ece6:	e02d      	b.n	800ed44 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ece8:	7bbb      	ldrb	r3, [r7, #14]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00c      	beq.n	800ed08 <USBD_StdEPReq+0xf4>
 800ecee:	7bbb      	ldrb	r3, [r7, #14]
 800ecf0:	2b80      	cmp	r3, #128	; 0x80
 800ecf2:	d009      	beq.n	800ed08 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecf4:	7bbb      	ldrb	r3, [r7, #14]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f003 fc23 	bl	8012544 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecfe:	2180      	movs	r1, #128	; 0x80
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f003 fc1f 	bl	8012544 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed06:	e023      	b.n	800ed50 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 fc28 	bl	800f560 <USBD_CtlError>
        break;
 800ed10:	e01e      	b.n	800ed50 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	885b      	ldrh	r3, [r3, #2]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d119      	bne.n	800ed4e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ed1a:	7bbb      	ldrb	r3, [r7, #14]
 800ed1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d004      	beq.n	800ed2e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	4619      	mov	r1, r3
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f003 fc2a 	bl	8012582 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 fce1 	bl	800f6f6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	4798      	blx	r3
        }
        break;
 800ed42:	e004      	b.n	800ed4e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ed44:	6839      	ldr	r1, [r7, #0]
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fc0a 	bl	800f560 <USBD_CtlError>
        break;
 800ed4c:	e000      	b.n	800ed50 <USBD_StdEPReq+0x13c>
        break;
 800ed4e:	bf00      	nop
      }
      break;
 800ed50:	e0aa      	b.n	800eea8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	d002      	beq.n	800ed62 <USBD_StdEPReq+0x14e>
 800ed5c:	2b03      	cmp	r3, #3
 800ed5e:	d032      	beq.n	800edc6 <USBD_StdEPReq+0x1b2>
 800ed60:	e097      	b.n	800ee92 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed62:	7bbb      	ldrb	r3, [r7, #14]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d007      	beq.n	800ed78 <USBD_StdEPReq+0x164>
 800ed68:	7bbb      	ldrb	r3, [r7, #14]
 800ed6a:	2b80      	cmp	r3, #128	; 0x80
 800ed6c:	d004      	beq.n	800ed78 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ed6e:	6839      	ldr	r1, [r7, #0]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 fbf5 	bl	800f560 <USBD_CtlError>
          break;
 800ed76:	e091      	b.n	800ee9c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	da0b      	bge.n	800ed98 <USBD_StdEPReq+0x184>
 800ed80:	7bbb      	ldrb	r3, [r7, #14]
 800ed82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed86:	4613      	mov	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	3310      	adds	r3, #16
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	4413      	add	r3, r2
 800ed94:	3304      	adds	r3, #4
 800ed96:	e00b      	b.n	800edb0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ed98:	7bbb      	ldrb	r3, [r7, #14]
 800ed9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed9e:	4613      	mov	r3, r2
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4413      	add	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	4413      	add	r3, r2
 800edae:	3304      	adds	r3, #4
 800edb0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	2200      	movs	r2, #0
 800edb6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	2202      	movs	r2, #2
 800edbc:	4619      	mov	r1, r3
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fc3f 	bl	800f642 <USBD_CtlSendData>
        break;
 800edc4:	e06a      	b.n	800ee9c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800edc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	da11      	bge.n	800edf2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800edce:	7bbb      	ldrb	r3, [r7, #14]
 800edd0:	f003 020f 	and.w	r2, r3, #15
 800edd4:	6879      	ldr	r1, [r7, #4]
 800edd6:	4613      	mov	r3, r2
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	4413      	add	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	440b      	add	r3, r1
 800ede0:	3324      	adds	r3, #36	; 0x24
 800ede2:	881b      	ldrh	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d117      	bne.n	800ee18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ede8:	6839      	ldr	r1, [r7, #0]
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 fbb8 	bl	800f560 <USBD_CtlError>
            break;
 800edf0:	e054      	b.n	800ee9c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800edf2:	7bbb      	ldrb	r3, [r7, #14]
 800edf4:	f003 020f 	and.w	r2, r3, #15
 800edf8:	6879      	ldr	r1, [r7, #4]
 800edfa:	4613      	mov	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4413      	add	r3, r2
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	440b      	add	r3, r1
 800ee04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d104      	bne.n	800ee18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ee0e:	6839      	ldr	r1, [r7, #0]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 fba5 	bl	800f560 <USBD_CtlError>
            break;
 800ee16:	e041      	b.n	800ee9c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	da0b      	bge.n	800ee38 <USBD_StdEPReq+0x224>
 800ee20:	7bbb      	ldrb	r3, [r7, #14]
 800ee22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee26:	4613      	mov	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	3310      	adds	r3, #16
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	4413      	add	r3, r2
 800ee34:	3304      	adds	r3, #4
 800ee36:	e00b      	b.n	800ee50 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ee38:	7bbb      	ldrb	r3, [r7, #14]
 800ee3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	3304      	adds	r3, #4
 800ee50:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ee52:	7bbb      	ldrb	r3, [r7, #14]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <USBD_StdEPReq+0x24a>
 800ee58:	7bbb      	ldrb	r3, [r7, #14]
 800ee5a:	2b80      	cmp	r3, #128	; 0x80
 800ee5c:	d103      	bne.n	800ee66 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2200      	movs	r2, #0
 800ee62:	601a      	str	r2, [r3, #0]
 800ee64:	e00e      	b.n	800ee84 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee66:	7bbb      	ldrb	r3, [r7, #14]
 800ee68:	4619      	mov	r1, r3
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f003 fba8 	bl	80125c0 <USBD_LL_IsStallEP>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d003      	beq.n	800ee7e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	e002      	b.n	800ee84 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	2202      	movs	r2, #2
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fbd9 	bl	800f642 <USBD_CtlSendData>
          break;
 800ee90:	e004      	b.n	800ee9c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ee92:	6839      	ldr	r1, [r7, #0]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fb63 	bl	800f560 <USBD_CtlError>
        break;
 800ee9a:	bf00      	nop
      }
      break;
 800ee9c:	e004      	b.n	800eea8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 fb5d 	bl	800f560 <USBD_CtlError>
      break;
 800eea6:	bf00      	nop
    }
    break;
 800eea8:	e004      	b.n	800eeb4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800eeaa:	6839      	ldr	r1, [r7, #0]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 fb57 	bl	800f560 <USBD_CtlError>
    break;
 800eeb2:	bf00      	nop
  }

  return ret;
 800eeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eeca:	2300      	movs	r3, #0
 800eecc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eed2:	2300      	movs	r3, #0
 800eed4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	885b      	ldrh	r3, [r3, #2]
 800eeda:	0a1b      	lsrs	r3, r3, #8
 800eedc:	b29b      	uxth	r3, r3
 800eede:	3b01      	subs	r3, #1
 800eee0:	2b0e      	cmp	r3, #14
 800eee2:	f200 8152 	bhi.w	800f18a <USBD_GetDescriptor+0x2ca>
 800eee6:	a201      	add	r2, pc, #4	; (adr r2, 800eeec <USBD_GetDescriptor+0x2c>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800ef5d 	.word	0x0800ef5d
 800eef0:	0800ef75 	.word	0x0800ef75
 800eef4:	0800efb5 	.word	0x0800efb5
 800eef8:	0800f18b 	.word	0x0800f18b
 800eefc:	0800f18b 	.word	0x0800f18b
 800ef00:	0800f12b 	.word	0x0800f12b
 800ef04:	0800f157 	.word	0x0800f157
 800ef08:	0800f18b 	.word	0x0800f18b
 800ef0c:	0800f18b 	.word	0x0800f18b
 800ef10:	0800f18b 	.word	0x0800f18b
 800ef14:	0800f18b 	.word	0x0800f18b
 800ef18:	0800f18b 	.word	0x0800f18b
 800ef1c:	0800f18b 	.word	0x0800f18b
 800ef20:	0800f18b 	.word	0x0800f18b
 800ef24:	0800ef29 	.word	0x0800ef29
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef2e:	69db      	ldr	r3, [r3, #28]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00b      	beq.n	800ef4c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef3a:	69db      	ldr	r3, [r3, #28]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	7c12      	ldrb	r2, [r2, #16]
 800ef40:	f107 0108 	add.w	r1, r7, #8
 800ef44:	4610      	mov	r0, r2
 800ef46:	4798      	blx	r3
 800ef48:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ef4a:	e126      	b.n	800f19a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 fb06 	bl	800f560 <USBD_CtlError>
      err++;
 800ef54:	7afb      	ldrb	r3, [r7, #11]
 800ef56:	3301      	adds	r3, #1
 800ef58:	72fb      	strb	r3, [r7, #11]
    break;
 800ef5a:	e11e      	b.n	800f19a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	7c12      	ldrb	r2, [r2, #16]
 800ef68:	f107 0108 	add.w	r1, r7, #8
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	4798      	blx	r3
 800ef70:	60f8      	str	r0, [r7, #12]
    break;
 800ef72:	e112      	b.n	800f19a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7c1b      	ldrb	r3, [r3, #16]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10d      	bne.n	800ef98 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef84:	f107 0208 	add.w	r2, r7, #8
 800ef88:	4610      	mov	r0, r2
 800ef8a:	4798      	blx	r3
 800ef8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	3301      	adds	r3, #1
 800ef92:	2202      	movs	r2, #2
 800ef94:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ef96:	e100      	b.n	800f19a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa0:	f107 0208 	add.w	r2, r7, #8
 800efa4:	4610      	mov	r0, r2
 800efa6:	4798      	blx	r3
 800efa8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	3301      	adds	r3, #1
 800efae:	2202      	movs	r2, #2
 800efb0:	701a      	strb	r2, [r3, #0]
    break;
 800efb2:	e0f2      	b.n	800f19a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	885b      	ldrh	r3, [r3, #2]
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	2b05      	cmp	r3, #5
 800efbc:	f200 80ac 	bhi.w	800f118 <USBD_GetDescriptor+0x258>
 800efc0:	a201      	add	r2, pc, #4	; (adr r2, 800efc8 <USBD_GetDescriptor+0x108>)
 800efc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc6:	bf00      	nop
 800efc8:	0800efe1 	.word	0x0800efe1
 800efcc:	0800f015 	.word	0x0800f015
 800efd0:	0800f049 	.word	0x0800f049
 800efd4:	0800f07d 	.word	0x0800f07d
 800efd8:	0800f0b1 	.word	0x0800f0b1
 800efdc:	0800f0e5 	.word	0x0800f0e5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00b      	beq.n	800f004 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	7c12      	ldrb	r2, [r2, #16]
 800eff8:	f107 0108 	add.w	r1, r7, #8
 800effc:	4610      	mov	r0, r2
 800effe:	4798      	blx	r3
 800f000:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f002:	e091      	b.n	800f128 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 faaa 	bl	800f560 <USBD_CtlError>
        err++;
 800f00c:	7afb      	ldrb	r3, [r7, #11]
 800f00e:	3301      	adds	r3, #1
 800f010:	72fb      	strb	r3, [r7, #11]
      break;
 800f012:	e089      	b.n	800f128 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00b      	beq.n	800f038 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f026:	689b      	ldr	r3, [r3, #8]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	7c12      	ldrb	r2, [r2, #16]
 800f02c:	f107 0108 	add.w	r1, r7, #8
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
 800f034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f036:	e077      	b.n	800f128 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f038:	6839      	ldr	r1, [r7, #0]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fa90 	bl	800f560 <USBD_CtlError>
        err++;
 800f040:	7afb      	ldrb	r3, [r7, #11]
 800f042:	3301      	adds	r3, #1
 800f044:	72fb      	strb	r3, [r7, #11]
      break;
 800f046:	e06f      	b.n	800f128 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d00b      	beq.n	800f06c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	7c12      	ldrb	r2, [r2, #16]
 800f060:	f107 0108 	add.w	r1, r7, #8
 800f064:	4610      	mov	r0, r2
 800f066:	4798      	blx	r3
 800f068:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f06a:	e05d      	b.n	800f128 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f06c:	6839      	ldr	r1, [r7, #0]
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fa76 	bl	800f560 <USBD_CtlError>
        err++;
 800f074:	7afb      	ldrb	r3, [r7, #11]
 800f076:	3301      	adds	r3, #1
 800f078:	72fb      	strb	r3, [r7, #11]
      break;
 800f07a:	e055      	b.n	800f128 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00b      	beq.n	800f0a0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	7c12      	ldrb	r2, [r2, #16]
 800f094:	f107 0108 	add.w	r1, r7, #8
 800f098:	4610      	mov	r0, r2
 800f09a:	4798      	blx	r3
 800f09c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f09e:	e043      	b.n	800f128 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 fa5c 	bl	800f560 <USBD_CtlError>
        err++;
 800f0a8:	7afb      	ldrb	r3, [r7, #11]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	72fb      	strb	r3, [r7, #11]
      break;
 800f0ae:	e03b      	b.n	800f128 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0b6:	695b      	ldr	r3, [r3, #20]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00b      	beq.n	800f0d4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0c2:	695b      	ldr	r3, [r3, #20]
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	7c12      	ldrb	r2, [r2, #16]
 800f0c8:	f107 0108 	add.w	r1, r7, #8
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	4798      	blx	r3
 800f0d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0d2:	e029      	b.n	800f128 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f0d4:	6839      	ldr	r1, [r7, #0]
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 fa42 	bl	800f560 <USBD_CtlError>
        err++;
 800f0dc:	7afb      	ldrb	r3, [r7, #11]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	72fb      	strb	r3, [r7, #11]
      break;
 800f0e2:	e021      	b.n	800f128 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ea:	699b      	ldr	r3, [r3, #24]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00b      	beq.n	800f108 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	7c12      	ldrb	r2, [r2, #16]
 800f0fc:	f107 0108 	add.w	r1, r7, #8
 800f100:	4610      	mov	r0, r2
 800f102:	4798      	blx	r3
 800f104:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f106:	e00f      	b.n	800f128 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f108:	6839      	ldr	r1, [r7, #0]
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fa28 	bl	800f560 <USBD_CtlError>
        err++;
 800f110:	7afb      	ldrb	r3, [r7, #11]
 800f112:	3301      	adds	r3, #1
 800f114:	72fb      	strb	r3, [r7, #11]
      break;
 800f116:	e007      	b.n	800f128 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f118:	6839      	ldr	r1, [r7, #0]
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fa20 	bl	800f560 <USBD_CtlError>
      err++;
 800f120:	7afb      	ldrb	r3, [r7, #11]
 800f122:	3301      	adds	r3, #1
 800f124:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f126:	bf00      	nop
    }
    break;
 800f128:	e037      	b.n	800f19a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	7c1b      	ldrb	r3, [r3, #16]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d109      	bne.n	800f146 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f13a:	f107 0208 	add.w	r2, r7, #8
 800f13e:	4610      	mov	r0, r2
 800f140:	4798      	blx	r3
 800f142:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f144:	e029      	b.n	800f19a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f146:	6839      	ldr	r1, [r7, #0]
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 fa09 	bl	800f560 <USBD_CtlError>
      err++;
 800f14e:	7afb      	ldrb	r3, [r7, #11]
 800f150:	3301      	adds	r3, #1
 800f152:	72fb      	strb	r3, [r7, #11]
    break;
 800f154:	e021      	b.n	800f19a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	7c1b      	ldrb	r3, [r3, #16]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10d      	bne.n	800f17a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f166:	f107 0208 	add.w	r2, r7, #8
 800f16a:	4610      	mov	r0, r2
 800f16c:	4798      	blx	r3
 800f16e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	3301      	adds	r3, #1
 800f174:	2207      	movs	r2, #7
 800f176:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f178:	e00f      	b.n	800f19a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 f9ef 	bl	800f560 <USBD_CtlError>
      err++;
 800f182:	7afb      	ldrb	r3, [r7, #11]
 800f184:	3301      	adds	r3, #1
 800f186:	72fb      	strb	r3, [r7, #11]
    break;
 800f188:	e007      	b.n	800f19a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f18a:	6839      	ldr	r1, [r7, #0]
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 f9e7 	bl	800f560 <USBD_CtlError>
    err++;
 800f192:	7afb      	ldrb	r3, [r7, #11]
 800f194:	3301      	adds	r3, #1
 800f196:	72fb      	strb	r3, [r7, #11]
    break;
 800f198:	bf00      	nop
  }

  if (err != 0U)
 800f19a:	7afb      	ldrb	r3, [r7, #11]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d11e      	bne.n	800f1de <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	88db      	ldrh	r3, [r3, #6]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d016      	beq.n	800f1d6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f1a8:	893b      	ldrh	r3, [r7, #8]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00e      	beq.n	800f1cc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	88da      	ldrh	r2, [r3, #6]
 800f1b2:	893b      	ldrh	r3, [r7, #8]
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	bf28      	it	cs
 800f1b8:	4613      	movcs	r3, r2
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f1be:	893b      	ldrh	r3, [r7, #8]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	68f9      	ldr	r1, [r7, #12]
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 fa3c 	bl	800f642 <USBD_CtlSendData>
 800f1ca:	e009      	b.n	800f1e0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f9c6 	bl	800f560 <USBD_CtlError>
 800f1d4:	e004      	b.n	800f1e0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 fa8d 	bl	800f6f6 <USBD_CtlSendStatus>
 800f1dc:	e000      	b.n	800f1e0 <USBD_GetDescriptor+0x320>
    return;
 800f1de:	bf00      	nop
    }
  }
}
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop

0800f1e8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	889b      	ldrh	r3, [r3, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d130      	bne.n	800f25c <USBD_SetAddress+0x74>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	88db      	ldrh	r3, [r3, #6]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d12c      	bne.n	800f25c <USBD_SetAddress+0x74>
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	885b      	ldrh	r3, [r3, #2]
 800f206:	2b7f      	cmp	r3, #127	; 0x7f
 800f208:	d828      	bhi.n	800f25c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	885b      	ldrh	r3, [r3, #2]
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f214:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f21c:	2b03      	cmp	r3, #3
 800f21e:	d104      	bne.n	800f22a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f220:	6839      	ldr	r1, [r7, #0]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f99c 	bl	800f560 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f228:	e01c      	b.n	800f264 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	7bfa      	ldrb	r2, [r7, #15]
 800f22e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f232:	7bfb      	ldrb	r3, [r7, #15]
 800f234:	4619      	mov	r1, r3
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f003 f9ee 	bl	8012618 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 fa5a 	bl	800f6f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d004      	beq.n	800f252 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2202      	movs	r2, #2
 800f24c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f250:	e008      	b.n	800f264 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2201      	movs	r2, #1
 800f256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f25a:	e003      	b.n	800f264 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f25c:	6839      	ldr	r1, [r7, #0]
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 f97e 	bl	800f560 <USBD_CtlError>
  }
}
 800f264:	bf00      	nop
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f276:	2300      	movs	r3, #0
 800f278:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	885b      	ldrh	r3, [r3, #2]
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	4b4b      	ldr	r3, [pc, #300]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f282:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f284:	4b4a      	ldr	r3, [pc, #296]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d905      	bls.n	800f298 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f28c:	6839      	ldr	r1, [r7, #0]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f966 	bl	800f560 <USBD_CtlError>
    return USBD_FAIL;
 800f294:	2303      	movs	r3, #3
 800f296:	e087      	b.n	800f3a8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d002      	beq.n	800f2a8 <USBD_SetConfig+0x3c>
 800f2a2:	2b03      	cmp	r3, #3
 800f2a4:	d025      	beq.n	800f2f2 <USBD_SetConfig+0x86>
 800f2a6:	e071      	b.n	800f38c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f2a8:	4b41      	ldr	r3, [pc, #260]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d01c      	beq.n	800f2ea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f2b0:	4b3f      	ldr	r3, [pc, #252]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2ba:	4b3d      	ldr	r3, [pc, #244]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7ff f97d 	bl	800e5c0 <USBD_SetClassConfig>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d004      	beq.n	800f2da <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f2d0:	6839      	ldr	r1, [r7, #0]
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f944 	bl	800f560 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f2d8:	e065      	b.n	800f3a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fa0b 	bl	800f6f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2203      	movs	r2, #3
 800f2e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f2e8:	e05d      	b.n	800f3a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa03 	bl	800f6f6 <USBD_CtlSendStatus>
    break;
 800f2f0:	e059      	b.n	800f3a6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f2f2:	4b2f      	ldr	r3, [pc, #188]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d112      	bne.n	800f320 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2202      	movs	r2, #2
 800f2fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f302:	4b2b      	ldr	r3, [pc, #172]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f30c:	4b28      	ldr	r3, [pc, #160]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff f970 	bl	800e5f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 f9ec 	bl	800f6f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f31e:	e042      	b.n	800f3a6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f320:	4b23      	ldr	r3, [pc, #140]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	461a      	mov	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d02a      	beq.n	800f384 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	b2db      	uxtb	r3, r3
 800f334:	4619      	mov	r1, r3
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7ff f95e 	bl	800e5f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f33c:	4b1c      	ldr	r3, [pc, #112]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f346:	4b1a      	ldr	r3, [pc, #104]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	4619      	mov	r1, r3
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7ff f937 	bl	800e5c0 <USBD_SetClassConfig>
 800f352:	4603      	mov	r3, r0
 800f354:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f356:	7bfb      	ldrb	r3, [r7, #15]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d00f      	beq.n	800f37c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f35c:	6839      	ldr	r1, [r7, #0]
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f8fe 	bl	800f560 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	4619      	mov	r1, r3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff f943 	bl	800e5f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2202      	movs	r2, #2
 800f376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f37a:	e014      	b.n	800f3a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f9ba 	bl	800f6f6 <USBD_CtlSendStatus>
    break;
 800f382:	e010      	b.n	800f3a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 f9b6 	bl	800f6f6 <USBD_CtlSendStatus>
    break;
 800f38a:	e00c      	b.n	800f3a6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f8e6 	bl	800f560 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f394:	4b06      	ldr	r3, [pc, #24]	; (800f3b0 <USBD_SetConfig+0x144>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	4619      	mov	r1, r3
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7ff f92c 	bl	800e5f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f3a0:	2303      	movs	r3, #3
 800f3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a4:	bf00      	nop
  }

  return ret;
 800f3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	20000885 	.word	0x20000885

0800f3b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	88db      	ldrh	r3, [r3, #6]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d004      	beq.n	800f3d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 f8c9 	bl	800f560 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f3ce:	e021      	b.n	800f414 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	db17      	blt.n	800f40a <USBD_GetConfig+0x56>
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	dd02      	ble.n	800f3e4 <USBD_GetConfig+0x30>
 800f3de:	2b03      	cmp	r3, #3
 800f3e0:	d00b      	beq.n	800f3fa <USBD_GetConfig+0x46>
 800f3e2:	e012      	b.n	800f40a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 f925 	bl	800f642 <USBD_CtlSendData>
      break;
 800f3f8:	e00c      	b.n	800f414 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	3304      	adds	r3, #4
 800f3fe:	2201      	movs	r2, #1
 800f400:	4619      	mov	r1, r3
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 f91d 	bl	800f642 <USBD_CtlSendData>
      break;
 800f408:	e004      	b.n	800f414 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 f8a7 	bl	800f560 <USBD_CtlError>
      break;
 800f412:	bf00      	nop
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f42c:	3b01      	subs	r3, #1
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d81e      	bhi.n	800f470 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	88db      	ldrh	r3, [r3, #6]
 800f436:	2b02      	cmp	r3, #2
 800f438:	d004      	beq.n	800f444 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f43a:	6839      	ldr	r1, [r7, #0]
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f88f 	bl	800f560 <USBD_CtlError>
      break;
 800f442:	e01a      	b.n	800f47a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	f043 0202 	orr.w	r2, r3, #2
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	330c      	adds	r3, #12
 800f464:	2202      	movs	r2, #2
 800f466:	4619      	mov	r1, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 f8ea 	bl	800f642 <USBD_CtlSendData>
    break;
 800f46e:	e004      	b.n	800f47a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f874 	bl	800f560 <USBD_CtlError>
    break;
 800f478:	bf00      	nop
  }
}
 800f47a:	bf00      	nop
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b082      	sub	sp, #8
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	885b      	ldrh	r3, [r3, #2]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d106      	bne.n	800f4a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f92a 	bl	800f6f6 <USBD_CtlSendStatus>
  }
}
 800f4a2:	bf00      	nop
 800f4a4:	3708      	adds	r7, #8
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}

0800f4aa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b082      	sub	sp, #8
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	6078      	str	r0, [r7, #4]
 800f4b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	2b02      	cmp	r3, #2
 800f4be:	d80b      	bhi.n	800f4d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	885b      	ldrh	r3, [r3, #2]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d10c      	bne.n	800f4e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f910 	bl	800f6f6 <USBD_CtlSendStatus>
      }
      break;
 800f4d6:	e004      	b.n	800f4e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f840 	bl	800f560 <USBD_CtlError>
      break;
 800f4e0:	e000      	b.n	800f4e4 <USBD_ClrFeature+0x3a>
      break;
 800f4e2:	bf00      	nop
  }
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	781a      	ldrb	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	3301      	adds	r3, #1
 800f506:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	781a      	ldrb	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	3301      	adds	r3, #1
 800f514:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f7ff faa9 	bl	800ea6e <SWAPBYTE>
 800f51c:	4603      	mov	r3, r0
 800f51e:	461a      	mov	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	3301      	adds	r3, #1
 800f528:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	3301      	adds	r3, #1
 800f52e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f7ff fa9c 	bl	800ea6e <SWAPBYTE>
 800f536:	4603      	mov	r3, r0
 800f538:	461a      	mov	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	3301      	adds	r3, #1
 800f542:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	3301      	adds	r3, #1
 800f548:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f7ff fa8f 	bl	800ea6e <SWAPBYTE>
 800f550:	4603      	mov	r3, r0
 800f552:	461a      	mov	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	80da      	strh	r2, [r3, #6]
}
 800f558:	bf00      	nop
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f56a:	2180      	movs	r1, #128	; 0x80
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f002 ffe9 	bl	8012544 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f572:	2100      	movs	r1, #0
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f002 ffe5 	bl	8012544 <USBD_LL_StallEP>
}
 800f57a:	bf00      	nop
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b086      	sub	sp, #24
 800f586:	af00      	add	r7, sp, #0
 800f588:	60f8      	str	r0, [r7, #12]
 800f58a:	60b9      	str	r1, [r7, #8]
 800f58c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f58e:	2300      	movs	r3, #0
 800f590:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d036      	beq.n	800f606 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f59c:	6938      	ldr	r0, [r7, #16]
 800f59e:	f000 f836 	bl	800f60e <USBD_GetLen>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	005b      	lsls	r3, r3, #1
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f5b0:	7dfb      	ldrb	r3, [r7, #23]
 800f5b2:	68ba      	ldr	r2, [r7, #8]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	7812      	ldrb	r2, [r2, #0]
 800f5ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800f5bc:	7dfb      	ldrb	r3, [r7, #23]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f5c2:	7dfb      	ldrb	r3, [r7, #23]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	2203      	movs	r2, #3
 800f5ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800f5cc:	7dfb      	ldrb	r3, [r7, #23]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f5d2:	e013      	b.n	800f5fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f5d4:	7dfb      	ldrb	r3, [r7, #23]
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	4413      	add	r3, r2
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	7812      	ldrb	r2, [r2, #0]
 800f5de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	613b      	str	r3, [r7, #16]
    idx++;
 800f5e6:	7dfb      	ldrb	r3, [r7, #23]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f5ec:	7dfb      	ldrb	r3, [r7, #23]
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d1e7      	bne.n	800f5d4 <USBD_GetString+0x52>
 800f604:	e000      	b.n	800f608 <USBD_GetString+0x86>
    return;
 800f606:	bf00      	nop
  }
}
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f60e:	b480      	push	{r7}
 800f610:	b085      	sub	sp, #20
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f616:	2300      	movs	r3, #0
 800f618:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f61e:	e005      	b.n	800f62c <USBD_GetLen+0x1e>
  {
    len++;
 800f620:	7bfb      	ldrb	r3, [r7, #15]
 800f622:	3301      	adds	r3, #1
 800f624:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	3301      	adds	r3, #1
 800f62a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1f5      	bne.n	800f620 <USBD_GetLen+0x12>
  }

  return len;
 800f634:	7bfb      	ldrb	r3, [r7, #15]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	60f8      	str	r0, [r7, #12]
 800f64a:	60b9      	str	r1, [r7, #8]
 800f64c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2202      	movs	r2, #2
 800f652:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	2100      	movs	r1, #0
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	f002 fff4 	bl	8012656 <USBD_LL_Transmit>

  return USBD_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	2100      	movs	r1, #0
 800f68a:	68f8      	ldr	r0, [r7, #12]
 800f68c:	f002 ffe3 	bl	8012656 <USBD_LL_Transmit>

  return USBD_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b084      	sub	sp, #16
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	60f8      	str	r0, [r7, #12]
 800f6a2:	60b9      	str	r1, [r7, #8]
 800f6a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2203      	movs	r2, #3
 800f6aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f002 ffe7 	bl	8012698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f002 ffd6 	bl	8012698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b082      	sub	sp, #8
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2204      	movs	r2, #4
 800f702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f706:	2300      	movs	r3, #0
 800f708:	2200      	movs	r2, #0
 800f70a:	2100      	movs	r1, #0
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f002 ffa2 	bl	8012656 <USBD_LL_Transmit>

  return USBD_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2205      	movs	r2, #5
 800f728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f72c:	2300      	movs	r3, #0
 800f72e:	2200      	movs	r2, #0
 800f730:	2100      	movs	r1, #0
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f002 ffb0 	bl	8012698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
	...

0800f744 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f744:	b480      	push	{r7}
 800f746:	b087      	sub	sp, #28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	4613      	mov	r3, r2
 800f750:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f752:	2301      	movs	r3, #1
 800f754:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f75a:	4b1f      	ldr	r3, [pc, #124]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f75c:	7a5b      	ldrb	r3, [r3, #9]
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d131      	bne.n	800f7c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f764:	4b1c      	ldr	r3, [pc, #112]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f766:	7a5b      	ldrb	r3, [r3, #9]
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	461a      	mov	r2, r3
 800f76c:	4b1a      	ldr	r3, [pc, #104]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f76e:	2100      	movs	r1, #0
 800f770:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f772:	4b19      	ldr	r3, [pc, #100]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f774:	7a5b      	ldrb	r3, [r3, #9]
 800f776:	b2db      	uxtb	r3, r3
 800f778:	4a17      	ldr	r2, [pc, #92]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f782:	4b15      	ldr	r3, [pc, #84]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f784:	7a5b      	ldrb	r3, [r3, #9]
 800f786:	b2db      	uxtb	r3, r3
 800f788:	461a      	mov	r2, r3
 800f78a:	4b13      	ldr	r3, [pc, #76]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f78c:	4413      	add	r3, r2
 800f78e:	79fa      	ldrb	r2, [r7, #7]
 800f790:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f792:	4b11      	ldr	r3, [pc, #68]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f794:	7a5b      	ldrb	r3, [r3, #9]
 800f796:	b2db      	uxtb	r3, r3
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	b2d1      	uxtb	r1, r2
 800f79c:	4a0e      	ldr	r2, [pc, #56]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f79e:	7251      	strb	r1, [r2, #9]
 800f7a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f7a2:	7dbb      	ldrb	r3, [r7, #22]
 800f7a4:	3330      	adds	r3, #48	; 0x30
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	223a      	movs	r2, #58	; 0x3a
 800f7b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	3302      	adds	r3, #2
 800f7b8:	222f      	movs	r2, #47	; 0x2f
 800f7ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	3303      	adds	r3, #3
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	371c      	adds	r7, #28
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	20000888 	.word	0x20000888

0800f7dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7ff ffaa 	bl	800f744 <FATFS_LinkDriverEx>
 800f7f0:	4603      	mov	r3, r0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f7fa:	b480      	push	{r7}
 800f7fc:	b085      	sub	sp, #20
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	4603      	mov	r3, r0
 800f802:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f804:	2300      	movs	r3, #0
 800f806:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f80c:	2b84      	cmp	r3, #132	; 0x84
 800f80e:	d005      	beq.n	800f81c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f810:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	4413      	add	r3, r2
 800f818:	3303      	adds	r3, #3
 800f81a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f81c:	68fb      	ldr	r3, [r7, #12]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3714      	adds	r7, #20
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr

0800f82a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f82a:	b480      	push	{r7}
 800f82c:	b083      	sub	sp, #12
 800f82e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f830:	f3ef 8305 	mrs	r3, IPSR
 800f834:	607b      	str	r3, [r7, #4]
  return(result);
 800f836:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f838:	2b00      	cmp	r3, #0
 800f83a:	bf14      	ite	ne
 800f83c:	2301      	movne	r3, #1
 800f83e:	2300      	moveq	r3, #0
 800f840:	b2db      	uxtb	r3, r3
}
 800f842:	4618      	mov	r0, r3
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f852:	f001 f927 	bl	8010aa4 <vTaskStartScheduler>
  
  return osOK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f860:	f7ff ffe3 	bl	800f82a <inHandlerMode>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d003      	beq.n	800f872 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f86a:	f001 fa33 	bl	8010cd4 <xTaskGetTickCountFromISR>
 800f86e:	4603      	mov	r3, r0
 800f870:	e002      	b.n	800f878 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f872:	f001 fa1f 	bl	8010cb4 <xTaskGetTickCount>
 800f876:	4603      	mov	r3, r0
  }
}
 800f878:	4618      	mov	r0, r3
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f87e:	b089      	sub	sp, #36	; 0x24
 800f880:	af04      	add	r7, sp, #16
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	695b      	ldr	r3, [r3, #20]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d020      	beq.n	800f8d0 <osThreadCreate+0x54>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	699b      	ldr	r3, [r3, #24]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d01c      	beq.n	800f8d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	685c      	ldr	r4, [r3, #4]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681d      	ldr	r5, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	691e      	ldr	r6, [r3, #16]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7ff ffa6 	bl	800f7fa <makeFreeRtosPriority>
 800f8ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	695b      	ldr	r3, [r3, #20]
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8b8:	9202      	str	r2, [sp, #8]
 800f8ba:	9301      	str	r3, [sp, #4]
 800f8bc:	9100      	str	r1, [sp, #0]
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	4632      	mov	r2, r6
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f000 ff2a 	bl	801071e <xTaskCreateStatic>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	60fb      	str	r3, [r7, #12]
 800f8ce:	e01c      	b.n	800f90a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	685c      	ldr	r4, [r3, #4]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8dc:	b29e      	uxth	r6, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7ff ff88 	bl	800f7fa <makeFreeRtosPriority>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	f107 030c 	add.w	r3, r7, #12
 800f8f0:	9301      	str	r3, [sp, #4]
 800f8f2:	9200      	str	r2, [sp, #0]
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	4632      	mov	r2, r6
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f000 ff69 	bl	80107d2 <xTaskCreate>
 800f900:	4603      	mov	r3, r0
 800f902:	2b01      	cmp	r3, #1
 800f904:	d001      	beq.n	800f90a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f906:	2300      	movs	r3, #0
 800f908:	e000      	b.n	800f90c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f90a:	68fb      	ldr	r3, [r7, #12]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3714      	adds	r7, #20
 800f910:	46bd      	mov	sp, r7
 800f912:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f914 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <osDelay+0x16>
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	e000      	b.n	800f92c <osDelay+0x18>
 800f92a:	2301      	movs	r3, #1
 800f92c:	4618      	mov	r0, r3
 800f92e:	f001 f885 	bl	8010a3c <vTaskDelay>
  
  return osOK;
 800f932:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f93c:	b590      	push	{r4, r7, lr}
 800f93e:	b085      	sub	sp, #20
 800f940:	af02      	add	r7, sp, #8
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d012      	beq.n	800f974 <osMessageCreate+0x38>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00e      	beq.n	800f974 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6818      	ldr	r0, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6859      	ldr	r1, [r3, #4]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	689a      	ldr	r2, [r3, #8]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	68dc      	ldr	r4, [r3, #12]
 800f966:	2300      	movs	r3, #0
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	4623      	mov	r3, r4
 800f96c:	f000 f9ec 	bl	800fd48 <xQueueGenericCreateStatic>
 800f970:	4603      	mov	r3, r0
 800f972:	e008      	b.n	800f986 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6818      	ldr	r0, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	4619      	mov	r1, r3
 800f980:	f000 fa55 	bl	800fe2e <xQueueGenericCreate>
 800f984:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f986:	4618      	mov	r0, r3
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd90      	pop	{r4, r7, pc}
	...

0800f990 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f99c:	2300      	movs	r3, #0
 800f99e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d101      	bne.n	800f9ae <osMessagePut+0x1e>
    ticks = 1;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f9ae:	f7ff ff3c 	bl	800f82a <inHandlerMode>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d018      	beq.n	800f9ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f9b8:	f107 0210 	add.w	r2, r7, #16
 800f9bc:	f107 0108 	add.w	r1, r7, #8
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f000 fb8c 	bl	80100e0 <xQueueGenericSendFromISR>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d001      	beq.n	800f9d2 <osMessagePut+0x42>
      return osErrorOS;
 800f9ce:	23ff      	movs	r3, #255	; 0xff
 800f9d0:	e018      	b.n	800fa04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d014      	beq.n	800fa02 <osMessagePut+0x72>
 800f9d8:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <osMessagePut+0x7c>)
 800f9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9de:	601a      	str	r2, [r3, #0]
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	e00b      	b.n	800fa02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f9ea:	f107 0108 	add.w	r1, r7, #8
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f000 fa7a 	bl	800feec <xQueueGenericSend>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	d001      	beq.n	800fa02 <osMessagePut+0x72>
      return osErrorOS;
 800f9fe:	23ff      	movs	r3, #255	; 0xff
 800fa00:	e000      	b.n	800fa04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fa02:	2300      	movs	r3, #0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3718      	adds	r7, #24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	e000ed04 	.word	0xe000ed04

0800fa10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fa10:	b590      	push	{r4, r7, lr}
 800fa12:	b08b      	sub	sp, #44	; 0x2c
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fa20:	2300      	movs	r3, #0
 800fa22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d10a      	bne.n	800fa40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fa2a:	2380      	movs	r3, #128	; 0x80
 800fa2c:	617b      	str	r3, [r7, #20]
    return event;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	461c      	mov	r4, r3
 800fa32:	f107 0314 	add.w	r3, r7, #20
 800fa36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fa3e:	e054      	b.n	800faea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fa40:	2300      	movs	r3, #0
 800fa42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4e:	d103      	bne.n	800fa58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fa50:	f04f 33ff 	mov.w	r3, #4294967295
 800fa54:	627b      	str	r3, [r7, #36]	; 0x24
 800fa56:	e009      	b.n	800fa6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d006      	beq.n	800fa6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d101      	bne.n	800fa6c <osMessageGet+0x5c>
      ticks = 1;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fa6c:	f7ff fedd 	bl	800f82a <inHandlerMode>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d01c      	beq.n	800fab0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fa76:	f107 0220 	add.w	r2, r7, #32
 800fa7a:	f107 0314 	add.w	r3, r7, #20
 800fa7e:	3304      	adds	r3, #4
 800fa80:	4619      	mov	r1, r3
 800fa82:	68b8      	ldr	r0, [r7, #8]
 800fa84:	f000 fc9c 	bl	80103c0 <xQueueReceiveFromISR>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d102      	bne.n	800fa94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fa8e:	2310      	movs	r3, #16
 800fa90:	617b      	str	r3, [r7, #20]
 800fa92:	e001      	b.n	800fa98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fa94:	2300      	movs	r3, #0
 800fa96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fa98:	6a3b      	ldr	r3, [r7, #32]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d01d      	beq.n	800fada <osMessageGet+0xca>
 800fa9e:	4b15      	ldr	r3, [pc, #84]	; (800faf4 <osMessageGet+0xe4>)
 800faa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	f3bf 8f4f 	dsb	sy
 800faaa:	f3bf 8f6f 	isb	sy
 800faae:	e014      	b.n	800fada <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fab0:	f107 0314 	add.w	r3, r7, #20
 800fab4:	3304      	adds	r3, #4
 800fab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fab8:	4619      	mov	r1, r3
 800faba:	68b8      	ldr	r0, [r7, #8]
 800fabc:	f000 fba4 	bl	8010208 <xQueueReceive>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	d102      	bne.n	800facc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fac6:	2310      	movs	r3, #16
 800fac8:	617b      	str	r3, [r7, #20]
 800faca:	e006      	b.n	800fada <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800facc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800face:	2b00      	cmp	r3, #0
 800fad0:	d101      	bne.n	800fad6 <osMessageGet+0xc6>
 800fad2:	2300      	movs	r3, #0
 800fad4:	e000      	b.n	800fad8 <osMessageGet+0xc8>
 800fad6:	2340      	movs	r3, #64	; 0x40
 800fad8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	461c      	mov	r4, r3
 800fade:	f107 0314 	add.w	r3, r7, #20
 800fae2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	372c      	adds	r7, #44	; 0x2c
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd90      	pop	{r4, r7, pc}
 800faf2:	bf00      	nop
 800faf4:	e000ed04 	.word	0xe000ed04

0800faf8 <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f000 fcda 	bl	80104ba <uxQueueSpacesAvailable>
 800fb06:	4603      	mov	r3, r0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f103 0208 	add.w	r2, r3, #8
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f04f 32ff 	mov.w	r2, #4294967295
 800fb28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f103 0208 	add.w	r2, r3, #8
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f103 0208 	add.w	r2, r3, #8
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb5e:	bf00      	nop
 800fb60:	370c      	adds	r7, #12
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b085      	sub	sp, #20
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	689a      	ldr	r2, [r3, #8]
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	683a      	ldr	r2, [r7, #0]
 800fb94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	1c5a      	adds	r2, r3, #1
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	601a      	str	r2, [r3, #0]
}
 800fba6:	bf00      	nop
 800fba8:	3714      	adds	r7, #20
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr

0800fbb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fbb2:	b480      	push	{r7}
 800fbb4:	b085      	sub	sp, #20
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
 800fbba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc8:	d103      	bne.n	800fbd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	e00c      	b.n	800fbec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	3308      	adds	r3, #8
 800fbd6:	60fb      	str	r3, [r7, #12]
 800fbd8:	e002      	b.n	800fbe0 <vListInsert+0x2e>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	60fb      	str	r3, [r7, #12]
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	68ba      	ldr	r2, [r7, #8]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d2f6      	bcs.n	800fbda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	685a      	ldr	r2, [r3, #4]
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	683a      	ldr	r2, [r7, #0]
 800fbfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	68fa      	ldr	r2, [r7, #12]
 800fc00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	1c5a      	adds	r2, r3, #1
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	601a      	str	r2, [r3, #0]
}
 800fc18:	bf00      	nop
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	691b      	ldr	r3, [r3, #16]
 800fc30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	6892      	ldr	r2, [r2, #8]
 800fc3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	6852      	ldr	r2, [r2, #4]
 800fc44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d103      	bne.n	800fc58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	689a      	ldr	r2, [r3, #8]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	1e5a      	subs	r2, r3, #1
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3714      	adds	r7, #20
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d109      	bne.n	800fca0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc90:	f383 8811 	msr	BASEPRI, r3
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	60bb      	str	r3, [r7, #8]
 800fc9e:	e7fe      	b.n	800fc9e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fca0:	f001 fd44 	bl	801172c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcac:	68f9      	ldr	r1, [r7, #12]
 800fcae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fcb0:	fb01 f303 	mul.w	r3, r1, r3
 800fcb4:	441a      	add	r2, r3
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	68f9      	ldr	r1, [r7, #12]
 800fcd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fcd6:	fb01 f303 	mul.w	r3, r1, r3
 800fcda:	441a      	add	r2, r3
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	22ff      	movs	r2, #255	; 0xff
 800fce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	22ff      	movs	r2, #255	; 0xff
 800fcec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d114      	bne.n	800fd20 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	691b      	ldr	r3, [r3, #16]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d01a      	beq.n	800fd34 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	3310      	adds	r3, #16
 800fd02:	4618      	mov	r0, r3
 800fd04:	f001 f92e 	bl	8010f64 <xTaskRemoveFromEventList>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d012      	beq.n	800fd34 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fd0e:	4b0d      	ldr	r3, [pc, #52]	; (800fd44 <xQueueGenericReset+0xcc>)
 800fd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	e009      	b.n	800fd34 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	3310      	adds	r3, #16
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff fef3 	bl	800fb10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	3324      	adds	r3, #36	; 0x24
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff feee 	bl	800fb10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fd34:	f001 fd28 	bl	8011788 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fd38:	2301      	movs	r3, #1
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3710      	adds	r7, #16
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	e000ed04 	.word	0xe000ed04

0800fd48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b08e      	sub	sp, #56	; 0x38
 800fd4c:	af02      	add	r7, sp, #8
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d109      	bne.n	800fd70 <xQueueGenericCreateStatic+0x28>
 800fd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd6e:	e7fe      	b.n	800fd6e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d109      	bne.n	800fd8a <xQueueGenericCreateStatic+0x42>
 800fd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7a:	f383 8811 	msr	BASEPRI, r3
 800fd7e:	f3bf 8f6f 	isb	sy
 800fd82:	f3bf 8f4f 	dsb	sy
 800fd86:	627b      	str	r3, [r7, #36]	; 0x24
 800fd88:	e7fe      	b.n	800fd88 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <xQueueGenericCreateStatic+0x4e>
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <xQueueGenericCreateStatic+0x52>
 800fd96:	2301      	movs	r3, #1
 800fd98:	e000      	b.n	800fd9c <xQueueGenericCreateStatic+0x54>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d109      	bne.n	800fdb4 <xQueueGenericCreateStatic+0x6c>
 800fda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	623b      	str	r3, [r7, #32]
 800fdb2:	e7fe      	b.n	800fdb2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d102      	bne.n	800fdc0 <xQueueGenericCreateStatic+0x78>
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <xQueueGenericCreateStatic+0x7c>
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e000      	b.n	800fdc6 <xQueueGenericCreateStatic+0x7e>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d109      	bne.n	800fdde <xQueueGenericCreateStatic+0x96>
 800fdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdce:	f383 8811 	msr	BASEPRI, r3
 800fdd2:	f3bf 8f6f 	isb	sy
 800fdd6:	f3bf 8f4f 	dsb	sy
 800fdda:	61fb      	str	r3, [r7, #28]
 800fddc:	e7fe      	b.n	800fddc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fdde:	2348      	movs	r3, #72	; 0x48
 800fde0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2b48      	cmp	r3, #72	; 0x48
 800fde6:	d009      	beq.n	800fdfc <xQueueGenericCreateStatic+0xb4>
 800fde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdec:	f383 8811 	msr	BASEPRI, r3
 800fdf0:	f3bf 8f6f 	isb	sy
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	61bb      	str	r3, [r7, #24]
 800fdfa:	e7fe      	b.n	800fdfa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fdfc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fe02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00d      	beq.n	800fe24 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe10:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fe14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	4613      	mov	r3, r2
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	68b9      	ldr	r1, [r7, #8]
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f000 f844 	bl	800feac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3730      	adds	r7, #48	; 0x30
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b08a      	sub	sp, #40	; 0x28
 800fe32:	af02      	add	r7, sp, #8
 800fe34:	60f8      	str	r0, [r7, #12]
 800fe36:	60b9      	str	r1, [r7, #8]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d109      	bne.n	800fe56 <xQueueGenericCreate+0x28>
 800fe42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe46:	f383 8811 	msr	BASEPRI, r3
 800fe4a:	f3bf 8f6f 	isb	sy
 800fe4e:	f3bf 8f4f 	dsb	sy
 800fe52:	613b      	str	r3, [r7, #16]
 800fe54:	e7fe      	b.n	800fe54 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d102      	bne.n	800fe62 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	61fb      	str	r3, [r7, #28]
 800fe60:	e004      	b.n	800fe6c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	68ba      	ldr	r2, [r7, #8]
 800fe66:	fb02 f303 	mul.w	r3, r2, r3
 800fe6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	3348      	adds	r3, #72	; 0x48
 800fe70:	4618      	mov	r0, r3
 800fe72:	f001 fd75 	bl	8011960 <pvPortMalloc>
 800fe76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d011      	beq.n	800fea2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fe7e:	69bb      	ldr	r3, [r7, #24]
 800fe80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	3348      	adds	r3, #72	; 0x48
 800fe86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe90:	79fa      	ldrb	r2, [r7, #7]
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	4613      	mov	r3, r2
 800fe98:	697a      	ldr	r2, [r7, #20]
 800fe9a:	68b9      	ldr	r1, [r7, #8]
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f000 f805 	bl	800feac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fea2:	69bb      	ldr	r3, [r7, #24]
	}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3720      	adds	r7, #32
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
 800feb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d103      	bne.n	800fec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	69ba      	ldr	r2, [r7, #24]
 800fec4:	601a      	str	r2, [r3, #0]
 800fec6:	e002      	b.n	800fece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	68fa      	ldr	r2, [r7, #12]
 800fed2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	68ba      	ldr	r2, [r7, #8]
 800fed8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800feda:	2101      	movs	r1, #1
 800fedc:	69b8      	ldr	r0, [r7, #24]
 800fede:	f7ff fecb 	bl	800fc78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fee2:	bf00      	nop
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
	...

0800feec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08e      	sub	sp, #56	; 0x38
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fefa:	2300      	movs	r3, #0
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d109      	bne.n	800ff1c <xQueueGenericSend+0x30>
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff1a:	e7fe      	b.n	800ff1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d103      	bne.n	800ff2a <xQueueGenericSend+0x3e>
 800ff22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d101      	bne.n	800ff2e <xQueueGenericSend+0x42>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e000      	b.n	800ff30 <xQueueGenericSend+0x44>
 800ff2e:	2300      	movs	r3, #0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d109      	bne.n	800ff48 <xQueueGenericSend+0x5c>
 800ff34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff38:	f383 8811 	msr	BASEPRI, r3
 800ff3c:	f3bf 8f6f 	isb	sy
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	627b      	str	r3, [r7, #36]	; 0x24
 800ff46:	e7fe      	b.n	800ff46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	d103      	bne.n	800ff56 <xQueueGenericSend+0x6a>
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d101      	bne.n	800ff5a <xQueueGenericSend+0x6e>
 800ff56:	2301      	movs	r3, #1
 800ff58:	e000      	b.n	800ff5c <xQueueGenericSend+0x70>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d109      	bne.n	800ff74 <xQueueGenericSend+0x88>
 800ff60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff64:	f383 8811 	msr	BASEPRI, r3
 800ff68:	f3bf 8f6f 	isb	sy
 800ff6c:	f3bf 8f4f 	dsb	sy
 800ff70:	623b      	str	r3, [r7, #32]
 800ff72:	e7fe      	b.n	800ff72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff74:	f001 f9ac 	bl	80112d0 <xTaskGetSchedulerState>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d102      	bne.n	800ff84 <xQueueGenericSend+0x98>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <xQueueGenericSend+0x9c>
 800ff84:	2301      	movs	r3, #1
 800ff86:	e000      	b.n	800ff8a <xQueueGenericSend+0x9e>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d109      	bne.n	800ffa2 <xQueueGenericSend+0xb6>
 800ff8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	61fb      	str	r3, [r7, #28]
 800ffa0:	e7fe      	b.n	800ffa0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffa2:	f001 fbc3 	bl	801172c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d302      	bcc.n	800ffb8 <xQueueGenericSend+0xcc>
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	d129      	bne.n	801000c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	68b9      	ldr	r1, [r7, #8]
 800ffbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffbe:	f000 fa9e 	bl	80104fe <prvCopyDataToQueue>
 800ffc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d010      	beq.n	800ffee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffce:	3324      	adds	r3, #36	; 0x24
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 ffc7 	bl	8010f64 <xTaskRemoveFromEventList>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d013      	beq.n	8010004 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ffdc:	4b3f      	ldr	r3, [pc, #252]	; (80100dc <xQueueGenericSend+0x1f0>)
 800ffde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffe2:	601a      	str	r2, [r3, #0]
 800ffe4:	f3bf 8f4f 	dsb	sy
 800ffe8:	f3bf 8f6f 	isb	sy
 800ffec:	e00a      	b.n	8010004 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ffee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d007      	beq.n	8010004 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fff4:	4b39      	ldr	r3, [pc, #228]	; (80100dc <xQueueGenericSend+0x1f0>)
 800fff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fffa:	601a      	str	r2, [r3, #0]
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010004:	f001 fbc0 	bl	8011788 <vPortExitCritical>
				return pdPASS;
 8010008:	2301      	movs	r3, #1
 801000a:	e063      	b.n	80100d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d103      	bne.n	801001a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010012:	f001 fbb9 	bl	8011788 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010016:	2300      	movs	r3, #0
 8010018:	e05c      	b.n	80100d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801001a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801001c:	2b00      	cmp	r3, #0
 801001e:	d106      	bne.n	801002e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010020:	f107 0314 	add.w	r3, r7, #20
 8010024:	4618      	mov	r0, r3
 8010026:	f000 ffff 	bl	8011028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801002a:	2301      	movs	r3, #1
 801002c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801002e:	f001 fbab 	bl	8011788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010032:	f000 fd95 	bl	8010b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010036:	f001 fb79 	bl	801172c <vPortEnterCritical>
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010040:	b25b      	sxtb	r3, r3
 8010042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010046:	d103      	bne.n	8010050 <xQueueGenericSend+0x164>
 8010048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004a:	2200      	movs	r2, #0
 801004c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010056:	b25b      	sxtb	r3, r3
 8010058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801005c:	d103      	bne.n	8010066 <xQueueGenericSend+0x17a>
 801005e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010060:	2200      	movs	r2, #0
 8010062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010066:	f001 fb8f 	bl	8011788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801006a:	1d3a      	adds	r2, r7, #4
 801006c:	f107 0314 	add.w	r3, r7, #20
 8010070:	4611      	mov	r1, r2
 8010072:	4618      	mov	r0, r3
 8010074:	f000 ffee 	bl	8011054 <xTaskCheckForTimeOut>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d124      	bne.n	80100c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801007e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010080:	f000 fb35 	bl	80106ee <prvIsQueueFull>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d018      	beq.n	80100bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801008a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008c:	3310      	adds	r3, #16
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	4611      	mov	r1, r2
 8010092:	4618      	mov	r0, r3
 8010094:	f000 ff42 	bl	8010f1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801009a:	f000 fac0 	bl	801061e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801009e:	f000 fd6d 	bl	8010b7c <xTaskResumeAll>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f47f af7c 	bne.w	800ffa2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80100aa:	4b0c      	ldr	r3, [pc, #48]	; (80100dc <xQueueGenericSend+0x1f0>)
 80100ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	e772      	b.n	800ffa2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100be:	f000 faae 	bl	801061e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100c2:	f000 fd5b 	bl	8010b7c <xTaskResumeAll>
 80100c6:	e76c      	b.n	800ffa2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100ca:	f000 faa8 	bl	801061e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100ce:	f000 fd55 	bl	8010b7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3738      	adds	r7, #56	; 0x38
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	e000ed04 	.word	0xe000ed04

080100e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b08e      	sub	sp, #56	; 0x38
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	607a      	str	r2, [r7, #4]
 80100ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80100f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d109      	bne.n	801010c <xQueueGenericSendFromISR+0x2c>
 80100f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fc:	f383 8811 	msr	BASEPRI, r3
 8010100:	f3bf 8f6f 	isb	sy
 8010104:	f3bf 8f4f 	dsb	sy
 8010108:	627b      	str	r3, [r7, #36]	; 0x24
 801010a:	e7fe      	b.n	801010a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d103      	bne.n	801011a <xQueueGenericSendFromISR+0x3a>
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010116:	2b00      	cmp	r3, #0
 8010118:	d101      	bne.n	801011e <xQueueGenericSendFromISR+0x3e>
 801011a:	2301      	movs	r3, #1
 801011c:	e000      	b.n	8010120 <xQueueGenericSendFromISR+0x40>
 801011e:	2300      	movs	r3, #0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d109      	bne.n	8010138 <xQueueGenericSendFromISR+0x58>
 8010124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	623b      	str	r3, [r7, #32]
 8010136:	e7fe      	b.n	8010136 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2b02      	cmp	r3, #2
 801013c:	d103      	bne.n	8010146 <xQueueGenericSendFromISR+0x66>
 801013e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010142:	2b01      	cmp	r3, #1
 8010144:	d101      	bne.n	801014a <xQueueGenericSendFromISR+0x6a>
 8010146:	2301      	movs	r3, #1
 8010148:	e000      	b.n	801014c <xQueueGenericSendFromISR+0x6c>
 801014a:	2300      	movs	r3, #0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d109      	bne.n	8010164 <xQueueGenericSendFromISR+0x84>
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	61fb      	str	r3, [r7, #28]
 8010162:	e7fe      	b.n	8010162 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010164:	f001 fbbe 	bl	80118e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010168:	f3ef 8211 	mrs	r2, BASEPRI
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	f383 8811 	msr	BASEPRI, r3
 8010174:	f3bf 8f6f 	isb	sy
 8010178:	f3bf 8f4f 	dsb	sy
 801017c:	61ba      	str	r2, [r7, #24]
 801017e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010180:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010182:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801018c:	429a      	cmp	r2, r3
 801018e:	d302      	bcc.n	8010196 <xQueueGenericSendFromISR+0xb6>
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	2b02      	cmp	r3, #2
 8010194:	d12c      	bne.n	80101f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801019c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101a6:	f000 f9aa 	bl	80104fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80101ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b2:	d112      	bne.n	80101da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d016      	beq.n	80101ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101be:	3324      	adds	r3, #36	; 0x24
 80101c0:	4618      	mov	r0, r3
 80101c2:	f000 fecf 	bl	8010f64 <xTaskRemoveFromEventList>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d00e      	beq.n	80101ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00b      	beq.n	80101ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2201      	movs	r2, #1
 80101d6:	601a      	str	r2, [r3, #0]
 80101d8:	e007      	b.n	80101ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101de:	3301      	adds	r3, #1
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	b25a      	sxtb	r2, r3
 80101e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80101ea:	2301      	movs	r3, #1
 80101ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80101ee:	e001      	b.n	80101f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101f0:	2300      	movs	r3, #0
 80101f2:	637b      	str	r3, [r7, #52]	; 0x34
 80101f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010200:	4618      	mov	r0, r3
 8010202:	3738      	adds	r7, #56	; 0x38
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b08c      	sub	sp, #48	; 0x30
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010214:	2300      	movs	r3, #0
 8010216:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801021c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021e:	2b00      	cmp	r3, #0
 8010220:	d109      	bne.n	8010236 <xQueueReceive+0x2e>
	__asm volatile
 8010222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010226:	f383 8811 	msr	BASEPRI, r3
 801022a:	f3bf 8f6f 	isb	sy
 801022e:	f3bf 8f4f 	dsb	sy
 8010232:	623b      	str	r3, [r7, #32]
 8010234:	e7fe      	b.n	8010234 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d103      	bne.n	8010244 <xQueueReceive+0x3c>
 801023c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <xQueueReceive+0x40>
 8010244:	2301      	movs	r3, #1
 8010246:	e000      	b.n	801024a <xQueueReceive+0x42>
 8010248:	2300      	movs	r3, #0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d109      	bne.n	8010262 <xQueueReceive+0x5a>
 801024e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	61fb      	str	r3, [r7, #28]
 8010260:	e7fe      	b.n	8010260 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010262:	f001 f835 	bl	80112d0 <xTaskGetSchedulerState>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d102      	bne.n	8010272 <xQueueReceive+0x6a>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d101      	bne.n	8010276 <xQueueReceive+0x6e>
 8010272:	2301      	movs	r3, #1
 8010274:	e000      	b.n	8010278 <xQueueReceive+0x70>
 8010276:	2300      	movs	r3, #0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d109      	bne.n	8010290 <xQueueReceive+0x88>
 801027c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010280:	f383 8811 	msr	BASEPRI, r3
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	61bb      	str	r3, [r7, #24]
 801028e:	e7fe      	b.n	801028e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010290:	f001 fa4c 	bl	801172c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010298:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029c:	2b00      	cmp	r3, #0
 801029e:	d01f      	beq.n	80102e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102a0:	68b9      	ldr	r1, [r7, #8]
 80102a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a4:	f000 f995 	bl	80105d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102aa:	1e5a      	subs	r2, r3, #1
 80102ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00f      	beq.n	80102d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ba:	3310      	adds	r3, #16
 80102bc:	4618      	mov	r0, r3
 80102be:	f000 fe51 	bl	8010f64 <xTaskRemoveFromEventList>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d007      	beq.n	80102d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102c8:	4b3c      	ldr	r3, [pc, #240]	; (80103bc <xQueueReceive+0x1b4>)
 80102ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102ce:	601a      	str	r2, [r3, #0]
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102d8:	f001 fa56 	bl	8011788 <vPortExitCritical>
				return pdPASS;
 80102dc:	2301      	movs	r3, #1
 80102de:	e069      	b.n	80103b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d103      	bne.n	80102ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102e6:	f001 fa4f 	bl	8011788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e062      	b.n	80103b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d106      	bne.n	8010302 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102f4:	f107 0310 	add.w	r3, r7, #16
 80102f8:	4618      	mov	r0, r3
 80102fa:	f000 fe95 	bl	8011028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102fe:	2301      	movs	r3, #1
 8010300:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010302:	f001 fa41 	bl	8011788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010306:	f000 fc2b 	bl	8010b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801030a:	f001 fa0f 	bl	801172c <vPortEnterCritical>
 801030e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010314:	b25b      	sxtb	r3, r3
 8010316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801031a:	d103      	bne.n	8010324 <xQueueReceive+0x11c>
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	2200      	movs	r2, #0
 8010320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801032a:	b25b      	sxtb	r3, r3
 801032c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010330:	d103      	bne.n	801033a <xQueueReceive+0x132>
 8010332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801033a:	f001 fa25 	bl	8011788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801033e:	1d3a      	adds	r2, r7, #4
 8010340:	f107 0310 	add.w	r3, r7, #16
 8010344:	4611      	mov	r1, r2
 8010346:	4618      	mov	r0, r3
 8010348:	f000 fe84 	bl	8011054 <xTaskCheckForTimeOut>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d123      	bne.n	801039a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010354:	f000 f9b5 	bl	80106c2 <prvIsQueueEmpty>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d017      	beq.n	801038e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801035e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010360:	3324      	adds	r3, #36	; 0x24
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	4611      	mov	r1, r2
 8010366:	4618      	mov	r0, r3
 8010368:	f000 fdd8 	bl	8010f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801036c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801036e:	f000 f956 	bl	801061e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010372:	f000 fc03 	bl	8010b7c <xTaskResumeAll>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d189      	bne.n	8010290 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 801037c:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <xQueueReceive+0x1b4>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	e780      	b.n	8010290 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801038e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010390:	f000 f945 	bl	801061e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010394:	f000 fbf2 	bl	8010b7c <xTaskResumeAll>
 8010398:	e77a      	b.n	8010290 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801039a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801039c:	f000 f93f 	bl	801061e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103a0:	f000 fbec 	bl	8010b7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103a6:	f000 f98c 	bl	80106c2 <prvIsQueueEmpty>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f43f af6f 	beq.w	8010290 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3730      	adds	r7, #48	; 0x30
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	e000ed04 	.word	0xe000ed04

080103c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b08e      	sub	sp, #56	; 0x38
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80103d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d109      	bne.n	80103ea <xQueueReceiveFromISR+0x2a>
 80103d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103da:	f383 8811 	msr	BASEPRI, r3
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f3bf 8f4f 	dsb	sy
 80103e6:	623b      	str	r3, [r7, #32]
 80103e8:	e7fe      	b.n	80103e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d103      	bne.n	80103f8 <xQueueReceiveFromISR+0x38>
 80103f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d101      	bne.n	80103fc <xQueueReceiveFromISR+0x3c>
 80103f8:	2301      	movs	r3, #1
 80103fa:	e000      	b.n	80103fe <xQueueReceiveFromISR+0x3e>
 80103fc:	2300      	movs	r3, #0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d109      	bne.n	8010416 <xQueueReceiveFromISR+0x56>
 8010402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	61fb      	str	r3, [r7, #28]
 8010414:	e7fe      	b.n	8010414 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010416:	f001 fa65 	bl	80118e4 <vPortValidateInterruptPriority>
	__asm volatile
 801041a:	f3ef 8211 	mrs	r2, BASEPRI
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	61ba      	str	r2, [r7, #24]
 8010430:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010432:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801043a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043e:	2b00      	cmp	r3, #0
 8010440:	d02f      	beq.n	80104a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801044c:	68b9      	ldr	r1, [r7, #8]
 801044e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010450:	f000 f8bf 	bl	80105d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010456:	1e5a      	subs	r2, r3, #1
 8010458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801045c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010464:	d112      	bne.n	801048c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d016      	beq.n	801049c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010470:	3310      	adds	r3, #16
 8010472:	4618      	mov	r0, r3
 8010474:	f000 fd76 	bl	8010f64 <xTaskRemoveFromEventList>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00e      	beq.n	801049c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00b      	beq.n	801049c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2201      	movs	r2, #1
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	e007      	b.n	801049c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801048c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010490:	3301      	adds	r3, #1
 8010492:	b2db      	uxtb	r3, r3
 8010494:	b25a      	sxtb	r2, r3
 8010496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801049c:	2301      	movs	r3, #1
 801049e:	637b      	str	r3, [r7, #52]	; 0x34
 80104a0:	e001      	b.n	80104a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80104a2:	2300      	movs	r3, #0
 80104a4:	637b      	str	r3, [r7, #52]	; 0x34
 80104a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3738      	adds	r7, #56	; 0x38
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b086      	sub	sp, #24
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d109      	bne.n	80104e0 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 80104cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d0:	f383 8811 	msr	BASEPRI, r3
 80104d4:	f3bf 8f6f 	isb	sy
 80104d8:	f3bf 8f4f 	dsb	sy
 80104dc:	60fb      	str	r3, [r7, #12]
 80104de:	e7fe      	b.n	80104de <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 80104e0:	f001 f924 	bl	801172c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ec:	1ad3      	subs	r3, r2, r3
 80104ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80104f0:	f001 f94a 	bl	8011788 <vPortExitCritical>

	return uxReturn;
 80104f4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80104f6:	4618      	mov	r0, r3
 80104f8:	3718      	adds	r7, #24
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b086      	sub	sp, #24
 8010502:	af00      	add	r7, sp, #0
 8010504:	60f8      	str	r0, [r7, #12]
 8010506:	60b9      	str	r1, [r7, #8]
 8010508:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801050a:	2300      	movs	r3, #0
 801050c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010512:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10d      	bne.n	8010538 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d14d      	bne.n	80105c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	4618      	mov	r0, r3
 801052a:	f000 feef 	bl	801130c <xTaskPriorityDisinherit>
 801052e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2200      	movs	r2, #0
 8010534:	609a      	str	r2, [r3, #8]
 8010536:	e043      	b.n	80105c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d119      	bne.n	8010572 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6858      	ldr	r0, [r3, #4]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010546:	461a      	mov	r2, r3
 8010548:	68b9      	ldr	r1, [r7, #8]
 801054a:	f002 f9bd 	bl	80128c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	685a      	ldr	r2, [r3, #4]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010556:	441a      	add	r2, r3
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	685a      	ldr	r2, [r3, #4]
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	689b      	ldr	r3, [r3, #8]
 8010564:	429a      	cmp	r2, r3
 8010566:	d32b      	bcc.n	80105c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	605a      	str	r2, [r3, #4]
 8010570:	e026      	b.n	80105c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	68d8      	ldr	r0, [r3, #12]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801057a:	461a      	mov	r2, r3
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	f002 f9a3 	bl	80128c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	68da      	ldr	r2, [r3, #12]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801058a:	425b      	negs	r3, r3
 801058c:	441a      	add	r2, r3
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	68da      	ldr	r2, [r3, #12]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	429a      	cmp	r2, r3
 801059c:	d207      	bcs.n	80105ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	689a      	ldr	r2, [r3, #8]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105a6:	425b      	negs	r3, r3
 80105a8:	441a      	add	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2b02      	cmp	r3, #2
 80105b2:	d105      	bne.n	80105c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	3b01      	subs	r3, #1
 80105be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	1c5a      	adds	r2, r3, #1
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80105c8:	697b      	ldr	r3, [r7, #20]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3718      	adds	r7, #24
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b082      	sub	sp, #8
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d018      	beq.n	8010616 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	68da      	ldr	r2, [r3, #12]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ec:	441a      	add	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	68da      	ldr	r2, [r3, #12]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d303      	bcc.n	8010606 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68d9      	ldr	r1, [r3, #12]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801060e:	461a      	mov	r2, r3
 8010610:	6838      	ldr	r0, [r7, #0]
 8010612:	f002 f959 	bl	80128c8 <memcpy>
	}
}
 8010616:	bf00      	nop
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}

0801061e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801061e:	b580      	push	{r7, lr}
 8010620:	b084      	sub	sp, #16
 8010622:	af00      	add	r7, sp, #0
 8010624:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010626:	f001 f881 	bl	801172c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010630:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010632:	e011      	b.n	8010658 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010638:	2b00      	cmp	r3, #0
 801063a:	d012      	beq.n	8010662 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3324      	adds	r3, #36	; 0x24
 8010640:	4618      	mov	r0, r3
 8010642:	f000 fc8f 	bl	8010f64 <xTaskRemoveFromEventList>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d001      	beq.n	8010650 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801064c:	f000 fd62 	bl	8011114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	3b01      	subs	r3, #1
 8010654:	b2db      	uxtb	r3, r3
 8010656:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801065c:	2b00      	cmp	r3, #0
 801065e:	dce9      	bgt.n	8010634 <prvUnlockQueue+0x16>
 8010660:	e000      	b.n	8010664 <prvUnlockQueue+0x46>
					break;
 8010662:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	22ff      	movs	r2, #255	; 0xff
 8010668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801066c:	f001 f88c 	bl	8011788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010670:	f001 f85c 	bl	801172c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801067a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801067c:	e011      	b.n	80106a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	691b      	ldr	r3, [r3, #16]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d012      	beq.n	80106ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	3310      	adds	r3, #16
 801068a:	4618      	mov	r0, r3
 801068c:	f000 fc6a 	bl	8010f64 <xTaskRemoveFromEventList>
 8010690:	4603      	mov	r3, r0
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010696:	f000 fd3d 	bl	8011114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801069a:	7bbb      	ldrb	r3, [r7, #14]
 801069c:	3b01      	subs	r3, #1
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80106a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	dce9      	bgt.n	801067e <prvUnlockQueue+0x60>
 80106aa:	e000      	b.n	80106ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80106ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	22ff      	movs	r2, #255	; 0xff
 80106b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80106b6:	f001 f867 	bl	8011788 <vPortExitCritical>
}
 80106ba:	bf00      	nop
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b084      	sub	sp, #16
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80106ca:	f001 f82f 	bl	801172c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d102      	bne.n	80106dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80106d6:	2301      	movs	r3, #1
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	e001      	b.n	80106e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80106dc:	2300      	movs	r3, #0
 80106de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80106e0:	f001 f852 	bl	8011788 <vPortExitCritical>

	return xReturn;
 80106e4:	68fb      	ldr	r3, [r7, #12]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b084      	sub	sp, #16
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80106f6:	f001 f819 	bl	801172c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010702:	429a      	cmp	r2, r3
 8010704:	d102      	bne.n	801070c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010706:	2301      	movs	r3, #1
 8010708:	60fb      	str	r3, [r7, #12]
 801070a:	e001      	b.n	8010710 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801070c:	2300      	movs	r3, #0
 801070e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010710:	f001 f83a 	bl	8011788 <vPortExitCritical>

	return xReturn;
 8010714:	68fb      	ldr	r3, [r7, #12]
}
 8010716:	4618      	mov	r0, r3
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801071e:	b580      	push	{r7, lr}
 8010720:	b08e      	sub	sp, #56	; 0x38
 8010722:	af04      	add	r7, sp, #16
 8010724:	60f8      	str	r0, [r7, #12]
 8010726:	60b9      	str	r1, [r7, #8]
 8010728:	607a      	str	r2, [r7, #4]
 801072a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801072e:	2b00      	cmp	r3, #0
 8010730:	d109      	bne.n	8010746 <xTaskCreateStatic+0x28>
 8010732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010736:	f383 8811 	msr	BASEPRI, r3
 801073a:	f3bf 8f6f 	isb	sy
 801073e:	f3bf 8f4f 	dsb	sy
 8010742:	623b      	str	r3, [r7, #32]
 8010744:	e7fe      	b.n	8010744 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010748:	2b00      	cmp	r3, #0
 801074a:	d109      	bne.n	8010760 <xTaskCreateStatic+0x42>
 801074c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	61fb      	str	r3, [r7, #28]
 801075e:	e7fe      	b.n	801075e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010760:	2354      	movs	r3, #84	; 0x54
 8010762:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	2b54      	cmp	r3, #84	; 0x54
 8010768:	d009      	beq.n	801077e <xTaskCreateStatic+0x60>
 801076a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	61bb      	str	r3, [r7, #24]
 801077c:	e7fe      	b.n	801077c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801077e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	2b00      	cmp	r3, #0
 8010784:	d01e      	beq.n	80107c4 <xTaskCreateStatic+0xa6>
 8010786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010788:	2b00      	cmp	r3, #0
 801078a:	d01b      	beq.n	80107c4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801078c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010794:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010798:	2202      	movs	r2, #2
 801079a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801079e:	2300      	movs	r3, #0
 80107a0:	9303      	str	r3, [sp, #12]
 80107a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a4:	9302      	str	r3, [sp, #8]
 80107a6:	f107 0314 	add.w	r3, r7, #20
 80107aa:	9301      	str	r3, [sp, #4]
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	68b9      	ldr	r1, [r7, #8]
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f000 f850 	bl	801085c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107be:	f000 f8d3 	bl	8010968 <prvAddNewTaskToReadyList>
 80107c2:	e001      	b.n	80107c8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80107c4:	2300      	movs	r3, #0
 80107c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80107c8:	697b      	ldr	r3, [r7, #20]
	}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3728      	adds	r7, #40	; 0x28
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b08c      	sub	sp, #48	; 0x30
 80107d6:	af04      	add	r7, sp, #16
 80107d8:	60f8      	str	r0, [r7, #12]
 80107da:	60b9      	str	r1, [r7, #8]
 80107dc:	603b      	str	r3, [r7, #0]
 80107de:	4613      	mov	r3, r2
 80107e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80107e2:	88fb      	ldrh	r3, [r7, #6]
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4618      	mov	r0, r3
 80107e8:	f001 f8ba 	bl	8011960 <pvPortMalloc>
 80107ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00e      	beq.n	8010812 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80107f4:	2054      	movs	r0, #84	; 0x54
 80107f6:	f001 f8b3 	bl	8011960 <pvPortMalloc>
 80107fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d003      	beq.n	801080a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	697a      	ldr	r2, [r7, #20]
 8010806:	631a      	str	r2, [r3, #48]	; 0x30
 8010808:	e005      	b.n	8010816 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801080a:	6978      	ldr	r0, [r7, #20]
 801080c:	f001 f96a 	bl	8011ae4 <vPortFree>
 8010810:	e001      	b.n	8010816 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010812:	2300      	movs	r3, #0
 8010814:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d017      	beq.n	801084c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	2200      	movs	r2, #0
 8010820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010824:	88fa      	ldrh	r2, [r7, #6]
 8010826:	2300      	movs	r3, #0
 8010828:	9303      	str	r3, [sp, #12]
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	9302      	str	r3, [sp, #8]
 801082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010830:	9301      	str	r3, [sp, #4]
 8010832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f000 f80e 	bl	801085c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010840:	69f8      	ldr	r0, [r7, #28]
 8010842:	f000 f891 	bl	8010968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010846:	2301      	movs	r3, #1
 8010848:	61bb      	str	r3, [r7, #24]
 801084a:	e002      	b.n	8010852 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801084c:	f04f 33ff 	mov.w	r3, #4294967295
 8010850:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010852:	69bb      	ldr	r3, [r7, #24]
	}
 8010854:	4618      	mov	r0, r3
 8010856:	3720      	adds	r7, #32
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b088      	sub	sp, #32
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
 8010868:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010874:	3b01      	subs	r3, #1
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	4413      	add	r3, r2
 801087a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	f023 0307 	bic.w	r3, r3, #7
 8010882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	f003 0307 	and.w	r3, r3, #7
 801088a:	2b00      	cmp	r3, #0
 801088c:	d009      	beq.n	80108a2 <prvInitialiseNewTask+0x46>
 801088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	617b      	str	r3, [r7, #20]
 80108a0:	e7fe      	b.n	80108a0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d01f      	beq.n	80108e8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108a8:	2300      	movs	r3, #0
 80108aa:	61fb      	str	r3, [r7, #28]
 80108ac:	e012      	b.n	80108d4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80108ae:	68ba      	ldr	r2, [r7, #8]
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	4413      	add	r3, r2
 80108b4:	7819      	ldrb	r1, [r3, #0]
 80108b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	4413      	add	r3, r2
 80108bc:	3334      	adds	r3, #52	; 0x34
 80108be:	460a      	mov	r2, r1
 80108c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	4413      	add	r3, r2
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d006      	beq.n	80108dc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108ce:	69fb      	ldr	r3, [r7, #28]
 80108d0:	3301      	adds	r3, #1
 80108d2:	61fb      	str	r3, [r7, #28]
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	2b0f      	cmp	r3, #15
 80108d8:	d9e9      	bls.n	80108ae <prvInitialiseNewTask+0x52>
 80108da:	e000      	b.n	80108de <prvInitialiseNewTask+0x82>
			{
				break;
 80108dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108e6:	e003      	b.n	80108f0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80108e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ea:	2200      	movs	r2, #0
 80108ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	2b06      	cmp	r3, #6
 80108f4:	d901      	bls.n	80108fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80108f6:	2306      	movs	r3, #6
 80108f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80108fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010904:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010908:	2200      	movs	r2, #0
 801090a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090e:	3304      	adds	r3, #4
 8010910:	4618      	mov	r0, r3
 8010912:	f7ff f91d 	bl	800fb50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010918:	3318      	adds	r3, #24
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff f918 	bl	800fb50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010928:	f1c3 0207 	rsb	r2, r3, #7
 801092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010934:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010938:	2200      	movs	r2, #0
 801093a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093e:	2200      	movs	r2, #0
 8010940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	68f9      	ldr	r1, [r7, #12]
 8010948:	69b8      	ldr	r0, [r7, #24]
 801094a:	f000 fdc9 	bl	80114e0 <pxPortInitialiseStack>
 801094e:	4602      	mov	r2, r0
 8010950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010952:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010956:	2b00      	cmp	r3, #0
 8010958:	d002      	beq.n	8010960 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801095e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010960:	bf00      	nop
 8010962:	3720      	adds	r7, #32
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010970:	f000 fedc 	bl	801172c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010974:	4b2a      	ldr	r3, [pc, #168]	; (8010a20 <prvAddNewTaskToReadyList+0xb8>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	3301      	adds	r3, #1
 801097a:	4a29      	ldr	r2, [pc, #164]	; (8010a20 <prvAddNewTaskToReadyList+0xb8>)
 801097c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801097e:	4b29      	ldr	r3, [pc, #164]	; (8010a24 <prvAddNewTaskToReadyList+0xbc>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d109      	bne.n	801099a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010986:	4a27      	ldr	r2, [pc, #156]	; (8010a24 <prvAddNewTaskToReadyList+0xbc>)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801098c:	4b24      	ldr	r3, [pc, #144]	; (8010a20 <prvAddNewTaskToReadyList+0xb8>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d110      	bne.n	80109b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010994:	f000 fbe2 	bl	801115c <prvInitialiseTaskLists>
 8010998:	e00d      	b.n	80109b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801099a:	4b23      	ldr	r3, [pc, #140]	; (8010a28 <prvAddNewTaskToReadyList+0xc0>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d109      	bne.n	80109b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80109a2:	4b20      	ldr	r3, [pc, #128]	; (8010a24 <prvAddNewTaskToReadyList+0xbc>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d802      	bhi.n	80109b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80109b0:	4a1c      	ldr	r2, [pc, #112]	; (8010a24 <prvAddNewTaskToReadyList+0xbc>)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80109b6:	4b1d      	ldr	r3, [pc, #116]	; (8010a2c <prvAddNewTaskToReadyList+0xc4>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	3301      	adds	r3, #1
 80109bc:	4a1b      	ldr	r2, [pc, #108]	; (8010a2c <prvAddNewTaskToReadyList+0xc4>)
 80109be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c4:	2201      	movs	r2, #1
 80109c6:	409a      	lsls	r2, r3
 80109c8:	4b19      	ldr	r3, [pc, #100]	; (8010a30 <prvAddNewTaskToReadyList+0xc8>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	4a18      	ldr	r2, [pc, #96]	; (8010a30 <prvAddNewTaskToReadyList+0xc8>)
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109d6:	4613      	mov	r3, r2
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	4413      	add	r3, r2
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4a15      	ldr	r2, [pc, #84]	; (8010a34 <prvAddNewTaskToReadyList+0xcc>)
 80109e0:	441a      	add	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	3304      	adds	r3, #4
 80109e6:	4619      	mov	r1, r3
 80109e8:	4610      	mov	r0, r2
 80109ea:	f7ff f8be 	bl	800fb6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80109ee:	f000 fecb 	bl	8011788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80109f2:	4b0d      	ldr	r3, [pc, #52]	; (8010a28 <prvAddNewTaskToReadyList+0xc0>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00e      	beq.n	8010a18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80109fa:	4b0a      	ldr	r3, [pc, #40]	; (8010a24 <prvAddNewTaskToReadyList+0xbc>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d207      	bcs.n	8010a18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a08:	4b0b      	ldr	r3, [pc, #44]	; (8010a38 <prvAddNewTaskToReadyList+0xd0>)
 8010a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a0e:	601a      	str	r2, [r3, #0]
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	20000994 	.word	0x20000994
 8010a24:	20000894 	.word	0x20000894
 8010a28:	200009a0 	.word	0x200009a0
 8010a2c:	200009b0 	.word	0x200009b0
 8010a30:	2000099c 	.word	0x2000099c
 8010a34:	20000898 	.word	0x20000898
 8010a38:	e000ed04 	.word	0xe000ed04

08010a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010a44:	2300      	movs	r3, #0
 8010a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d016      	beq.n	8010a7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010a4e:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <vTaskDelay+0x60>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d009      	beq.n	8010a6a <vTaskDelay+0x2e>
 8010a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5a:	f383 8811 	msr	BASEPRI, r3
 8010a5e:	f3bf 8f6f 	isb	sy
 8010a62:	f3bf 8f4f 	dsb	sy
 8010a66:	60bb      	str	r3, [r7, #8]
 8010a68:	e7fe      	b.n	8010a68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010a6a:	f000 f879 	bl	8010b60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010a6e:	2100      	movs	r1, #0
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 fccf 	bl	8011414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010a76:	f000 f881 	bl	8010b7c <xTaskResumeAll>
 8010a7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d107      	bne.n	8010a92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010a82:	4b07      	ldr	r3, [pc, #28]	; (8010aa0 <vTaskDelay+0x64>)
 8010a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a88:	601a      	str	r2, [r3, #0]
 8010a8a:	f3bf 8f4f 	dsb	sy
 8010a8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a92:	bf00      	nop
 8010a94:	3710      	adds	r7, #16
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	200009bc 	.word	0x200009bc
 8010aa0:	e000ed04 	.word	0xe000ed04

08010aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b08a      	sub	sp, #40	; 0x28
 8010aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010ab2:	463a      	mov	r2, r7
 8010ab4:	1d39      	adds	r1, r7, #4
 8010ab6:	f107 0308 	add.w	r3, r7, #8
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f2 f9fc 	bl	8002eb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010ac0:	6839      	ldr	r1, [r7, #0]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	68ba      	ldr	r2, [r7, #8]
 8010ac6:	9202      	str	r2, [sp, #8]
 8010ac8:	9301      	str	r3, [sp, #4]
 8010aca:	2300      	movs	r3, #0
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	2300      	movs	r3, #0
 8010ad0:	460a      	mov	r2, r1
 8010ad2:	491d      	ldr	r1, [pc, #116]	; (8010b48 <vTaskStartScheduler+0xa4>)
 8010ad4:	481d      	ldr	r0, [pc, #116]	; (8010b4c <vTaskStartScheduler+0xa8>)
 8010ad6:	f7ff fe22 	bl	801071e <xTaskCreateStatic>
 8010ada:	4602      	mov	r2, r0
 8010adc:	4b1c      	ldr	r3, [pc, #112]	; (8010b50 <vTaskStartScheduler+0xac>)
 8010ade:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ae0:	4b1b      	ldr	r3, [pc, #108]	; (8010b50 <vTaskStartScheduler+0xac>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	617b      	str	r3, [r7, #20]
 8010aec:	e001      	b.n	8010af2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010aee:	2300      	movs	r3, #0
 8010af0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d115      	bne.n	8010b24 <vTaskStartScheduler+0x80>
 8010af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afc:	f383 8811 	msr	BASEPRI, r3
 8010b00:	f3bf 8f6f 	isb	sy
 8010b04:	f3bf 8f4f 	dsb	sy
 8010b08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b0a:	4b12      	ldr	r3, [pc, #72]	; (8010b54 <vTaskStartScheduler+0xb0>)
 8010b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010b12:	4b11      	ldr	r3, [pc, #68]	; (8010b58 <vTaskStartScheduler+0xb4>)
 8010b14:	2201      	movs	r2, #1
 8010b16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010b18:	4b10      	ldr	r3, [pc, #64]	; (8010b5c <vTaskStartScheduler+0xb8>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b1e:	f000 fd67 	bl	80115f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010b22:	e00d      	b.n	8010b40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b2a:	d109      	bne.n	8010b40 <vTaskStartScheduler+0x9c>
 8010b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	60fb      	str	r3, [r7, #12]
 8010b3e:	e7fe      	b.n	8010b3e <vTaskStartScheduler+0x9a>
}
 8010b40:	bf00      	nop
 8010b42:	3718      	adds	r7, #24
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	080180d0 	.word	0x080180d0
 8010b4c:	0801112d 	.word	0x0801112d
 8010b50:	200009b8 	.word	0x200009b8
 8010b54:	200009b4 	.word	0x200009b4
 8010b58:	200009a0 	.word	0x200009a0
 8010b5c:	20000998 	.word	0x20000998

08010b60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010b60:	b480      	push	{r7}
 8010b62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010b64:	4b04      	ldr	r3, [pc, #16]	; (8010b78 <vTaskSuspendAll+0x18>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	4a03      	ldr	r2, [pc, #12]	; (8010b78 <vTaskSuspendAll+0x18>)
 8010b6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010b6e:	bf00      	nop
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	200009bc 	.word	0x200009bc

08010b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010b82:	2300      	movs	r3, #0
 8010b84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010b86:	2300      	movs	r3, #0
 8010b88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010b8a:	4b41      	ldr	r3, [pc, #260]	; (8010c90 <xTaskResumeAll+0x114>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d109      	bne.n	8010ba6 <xTaskResumeAll+0x2a>
 8010b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	603b      	str	r3, [r7, #0]
 8010ba4:	e7fe      	b.n	8010ba4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010ba6:	f000 fdc1 	bl	801172c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010baa:	4b39      	ldr	r3, [pc, #228]	; (8010c90 <xTaskResumeAll+0x114>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	4a37      	ldr	r2, [pc, #220]	; (8010c90 <xTaskResumeAll+0x114>)
 8010bb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bb4:	4b36      	ldr	r3, [pc, #216]	; (8010c90 <xTaskResumeAll+0x114>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d161      	bne.n	8010c80 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010bbc:	4b35      	ldr	r3, [pc, #212]	; (8010c94 <xTaskResumeAll+0x118>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d05d      	beq.n	8010c80 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bc4:	e02e      	b.n	8010c24 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bc6:	4b34      	ldr	r3, [pc, #208]	; (8010c98 <xTaskResumeAll+0x11c>)
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	3318      	adds	r3, #24
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7ff f826 	bl	800fc24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	3304      	adds	r3, #4
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff f821 	bl	800fc24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be6:	2201      	movs	r2, #1
 8010be8:	409a      	lsls	r2, r3
 8010bea:	4b2c      	ldr	r3, [pc, #176]	; (8010c9c <xTaskResumeAll+0x120>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	4a2a      	ldr	r2, [pc, #168]	; (8010c9c <xTaskResumeAll+0x120>)
 8010bf2:	6013      	str	r3, [r2, #0]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	4a27      	ldr	r2, [pc, #156]	; (8010ca0 <xTaskResumeAll+0x124>)
 8010c02:	441a      	add	r2, r3
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	3304      	adds	r3, #4
 8010c08:	4619      	mov	r1, r3
 8010c0a:	4610      	mov	r0, r2
 8010c0c:	f7fe ffad 	bl	800fb6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c14:	4b23      	ldr	r3, [pc, #140]	; (8010ca4 <xTaskResumeAll+0x128>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d302      	bcc.n	8010c24 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8010c1e:	4b22      	ldr	r3, [pc, #136]	; (8010ca8 <xTaskResumeAll+0x12c>)
 8010c20:	2201      	movs	r2, #1
 8010c22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c24:	4b1c      	ldr	r3, [pc, #112]	; (8010c98 <xTaskResumeAll+0x11c>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d1cc      	bne.n	8010bc6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d001      	beq.n	8010c36 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010c32:	f000 fb2d 	bl	8011290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010c36:	4b1d      	ldr	r3, [pc, #116]	; (8010cac <xTaskResumeAll+0x130>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d010      	beq.n	8010c64 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010c42:	f000 f859 	bl	8010cf8 <xTaskIncrementTick>
 8010c46:	4603      	mov	r3, r0
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d002      	beq.n	8010c52 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8010c4c:	4b16      	ldr	r3, [pc, #88]	; (8010ca8 <xTaskResumeAll+0x12c>)
 8010c4e:	2201      	movs	r2, #1
 8010c50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	3b01      	subs	r3, #1
 8010c56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1f1      	bne.n	8010c42 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8010c5e:	4b13      	ldr	r3, [pc, #76]	; (8010cac <xTaskResumeAll+0x130>)
 8010c60:	2200      	movs	r2, #0
 8010c62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010c64:	4b10      	ldr	r3, [pc, #64]	; (8010ca8 <xTaskResumeAll+0x12c>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d009      	beq.n	8010c80 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010c70:	4b0f      	ldr	r3, [pc, #60]	; (8010cb0 <xTaskResumeAll+0x134>)
 8010c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c76:	601a      	str	r2, [r3, #0]
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c80:	f000 fd82 	bl	8011788 <vPortExitCritical>

	return xAlreadyYielded;
 8010c84:	68bb      	ldr	r3, [r7, #8]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	200009bc 	.word	0x200009bc
 8010c94:	20000994 	.word	0x20000994
 8010c98:	20000954 	.word	0x20000954
 8010c9c:	2000099c 	.word	0x2000099c
 8010ca0:	20000898 	.word	0x20000898
 8010ca4:	20000894 	.word	0x20000894
 8010ca8:	200009a8 	.word	0x200009a8
 8010cac:	200009a4 	.word	0x200009a4
 8010cb0:	e000ed04 	.word	0xe000ed04

08010cb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010cba:	4b05      	ldr	r3, [pc, #20]	; (8010cd0 <xTaskGetTickCount+0x1c>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010cc0:	687b      	ldr	r3, [r7, #4]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	370c      	adds	r7, #12
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	20000998 	.word	0x20000998

08010cd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cda:	f000 fe03 	bl	80118e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010cde:	2300      	movs	r3, #0
 8010ce0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010ce2:	4b04      	ldr	r3, [pc, #16]	; (8010cf4 <xTaskGetTickCountFromISR+0x20>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ce8:	683b      	ldr	r3, [r7, #0]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	20000998 	.word	0x20000998

08010cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d02:	4b4e      	ldr	r3, [pc, #312]	; (8010e3c <xTaskIncrementTick+0x144>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f040 8087 	bne.w	8010e1a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d0c:	4b4c      	ldr	r3, [pc, #304]	; (8010e40 <xTaskIncrementTick+0x148>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	3301      	adds	r3, #1
 8010d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d14:	4a4a      	ldr	r2, [pc, #296]	; (8010e40 <xTaskIncrementTick+0x148>)
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d11f      	bne.n	8010d60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d20:	4b48      	ldr	r3, [pc, #288]	; (8010e44 <xTaskIncrementTick+0x14c>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d009      	beq.n	8010d3e <xTaskIncrementTick+0x46>
 8010d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2e:	f383 8811 	msr	BASEPRI, r3
 8010d32:	f3bf 8f6f 	isb	sy
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	603b      	str	r3, [r7, #0]
 8010d3c:	e7fe      	b.n	8010d3c <xTaskIncrementTick+0x44>
 8010d3e:	4b41      	ldr	r3, [pc, #260]	; (8010e44 <xTaskIncrementTick+0x14c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	60fb      	str	r3, [r7, #12]
 8010d44:	4b40      	ldr	r3, [pc, #256]	; (8010e48 <xTaskIncrementTick+0x150>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4a3e      	ldr	r2, [pc, #248]	; (8010e44 <xTaskIncrementTick+0x14c>)
 8010d4a:	6013      	str	r3, [r2, #0]
 8010d4c:	4a3e      	ldr	r2, [pc, #248]	; (8010e48 <xTaskIncrementTick+0x150>)
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	6013      	str	r3, [r2, #0]
 8010d52:	4b3e      	ldr	r3, [pc, #248]	; (8010e4c <xTaskIncrementTick+0x154>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	3301      	adds	r3, #1
 8010d58:	4a3c      	ldr	r2, [pc, #240]	; (8010e4c <xTaskIncrementTick+0x154>)
 8010d5a:	6013      	str	r3, [r2, #0]
 8010d5c:	f000 fa98 	bl	8011290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d60:	4b3b      	ldr	r3, [pc, #236]	; (8010e50 <xTaskIncrementTick+0x158>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	693a      	ldr	r2, [r7, #16]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d348      	bcc.n	8010dfc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d6a:	4b36      	ldr	r3, [pc, #216]	; (8010e44 <xTaskIncrementTick+0x14c>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d104      	bne.n	8010d7e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d74:	4b36      	ldr	r3, [pc, #216]	; (8010e50 <xTaskIncrementTick+0x158>)
 8010d76:	f04f 32ff 	mov.w	r2, #4294967295
 8010d7a:	601a      	str	r2, [r3, #0]
					break;
 8010d7c:	e03e      	b.n	8010dfc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d7e:	4b31      	ldr	r3, [pc, #196]	; (8010e44 <xTaskIncrementTick+0x14c>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010d8e:	693a      	ldr	r2, [r7, #16]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d203      	bcs.n	8010d9e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010d96:	4a2e      	ldr	r2, [pc, #184]	; (8010e50 <xTaskIncrementTick+0x158>)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010d9c:	e02e      	b.n	8010dfc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	3304      	adds	r3, #4
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7fe ff3e 	bl	800fc24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d004      	beq.n	8010dba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	3318      	adds	r3, #24
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fe ff35 	bl	800fc24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	409a      	lsls	r2, r3
 8010dc2:	4b24      	ldr	r3, [pc, #144]	; (8010e54 <xTaskIncrementTick+0x15c>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	4a22      	ldr	r2, [pc, #136]	; (8010e54 <xTaskIncrementTick+0x15c>)
 8010dca:	6013      	str	r3, [r2, #0]
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	4a1f      	ldr	r2, [pc, #124]	; (8010e58 <xTaskIncrementTick+0x160>)
 8010dda:	441a      	add	r2, r3
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	3304      	adds	r3, #4
 8010de0:	4619      	mov	r1, r3
 8010de2:	4610      	mov	r0, r2
 8010de4:	f7fe fec1 	bl	800fb6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dec:	4b1b      	ldr	r3, [pc, #108]	; (8010e5c <xTaskIncrementTick+0x164>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d3b9      	bcc.n	8010d6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010df6:	2301      	movs	r3, #1
 8010df8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010dfa:	e7b6      	b.n	8010d6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010dfc:	4b17      	ldr	r3, [pc, #92]	; (8010e5c <xTaskIncrementTick+0x164>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e02:	4915      	ldr	r1, [pc, #84]	; (8010e58 <xTaskIncrementTick+0x160>)
 8010e04:	4613      	mov	r3, r2
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	4413      	add	r3, r2
 8010e0a:	009b      	lsls	r3, r3, #2
 8010e0c:	440b      	add	r3, r1
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d907      	bls.n	8010e24 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8010e14:	2301      	movs	r3, #1
 8010e16:	617b      	str	r3, [r7, #20]
 8010e18:	e004      	b.n	8010e24 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010e1a:	4b11      	ldr	r3, [pc, #68]	; (8010e60 <xTaskIncrementTick+0x168>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	3301      	adds	r3, #1
 8010e20:	4a0f      	ldr	r2, [pc, #60]	; (8010e60 <xTaskIncrementTick+0x168>)
 8010e22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010e24:	4b0f      	ldr	r3, [pc, #60]	; (8010e64 <xTaskIncrementTick+0x16c>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d001      	beq.n	8010e30 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010e30:	697b      	ldr	r3, [r7, #20]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	200009bc 	.word	0x200009bc
 8010e40:	20000998 	.word	0x20000998
 8010e44:	2000094c 	.word	0x2000094c
 8010e48:	20000950 	.word	0x20000950
 8010e4c:	200009ac 	.word	0x200009ac
 8010e50:	200009b4 	.word	0x200009b4
 8010e54:	2000099c 	.word	0x2000099c
 8010e58:	20000898 	.word	0x20000898
 8010e5c:	20000894 	.word	0x20000894
 8010e60:	200009a4 	.word	0x200009a4
 8010e64:	200009a8 	.word	0x200009a8

08010e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b087      	sub	sp, #28
 8010e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010e6e:	4b26      	ldr	r3, [pc, #152]	; (8010f08 <vTaskSwitchContext+0xa0>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d003      	beq.n	8010e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010e76:	4b25      	ldr	r3, [pc, #148]	; (8010f0c <vTaskSwitchContext+0xa4>)
 8010e78:	2201      	movs	r2, #1
 8010e7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010e7c:	e03e      	b.n	8010efc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010e7e:	4b23      	ldr	r3, [pc, #140]	; (8010f0c <vTaskSwitchContext+0xa4>)
 8010e80:	2200      	movs	r2, #0
 8010e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e84:	4b22      	ldr	r3, [pc, #136]	; (8010f10 <vTaskSwitchContext+0xa8>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	fab3 f383 	clz	r3, r3
 8010e90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010e92:	7afb      	ldrb	r3, [r7, #11]
 8010e94:	f1c3 031f 	rsb	r3, r3, #31
 8010e98:	617b      	str	r3, [r7, #20]
 8010e9a:	491e      	ldr	r1, [pc, #120]	; (8010f14 <vTaskSwitchContext+0xac>)
 8010e9c:	697a      	ldr	r2, [r7, #20]
 8010e9e:	4613      	mov	r3, r2
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	4413      	add	r3, r2
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	440b      	add	r3, r1
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d109      	bne.n	8010ec2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8010eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb2:	f383 8811 	msr	BASEPRI, r3
 8010eb6:	f3bf 8f6f 	isb	sy
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	607b      	str	r3, [r7, #4]
 8010ec0:	e7fe      	b.n	8010ec0 <vTaskSwitchContext+0x58>
 8010ec2:	697a      	ldr	r2, [r7, #20]
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	4413      	add	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4a11      	ldr	r2, [pc, #68]	; (8010f14 <vTaskSwitchContext+0xac>)
 8010ece:	4413      	add	r3, r2
 8010ed0:	613b      	str	r3, [r7, #16]
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	685a      	ldr	r2, [r3, #4]
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	605a      	str	r2, [r3, #4]
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	685a      	ldr	r2, [r3, #4]
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	3308      	adds	r3, #8
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d104      	bne.n	8010ef2 <vTaskSwitchContext+0x8a>
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	685a      	ldr	r2, [r3, #4]
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	605a      	str	r2, [r3, #4]
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	4a07      	ldr	r2, [pc, #28]	; (8010f18 <vTaskSwitchContext+0xb0>)
 8010efa:	6013      	str	r3, [r2, #0]
}
 8010efc:	bf00      	nop
 8010efe:	371c      	adds	r7, #28
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr
 8010f08:	200009bc 	.word	0x200009bc
 8010f0c:	200009a8 	.word	0x200009a8
 8010f10:	2000099c 	.word	0x2000099c
 8010f14:	20000898 	.word	0x20000898
 8010f18:	20000894 	.word	0x20000894

08010f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d109      	bne.n	8010f40 <vTaskPlaceOnEventList+0x24>
 8010f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f30:	f383 8811 	msr	BASEPRI, r3
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	f3bf 8f4f 	dsb	sy
 8010f3c:	60fb      	str	r3, [r7, #12]
 8010f3e:	e7fe      	b.n	8010f3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f40:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <vTaskPlaceOnEventList+0x44>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	3318      	adds	r3, #24
 8010f46:	4619      	mov	r1, r3
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f7fe fe32 	bl	800fbb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f4e:	2101      	movs	r1, #1
 8010f50:	6838      	ldr	r0, [r7, #0]
 8010f52:	f000 fa5f 	bl	8011414 <prvAddCurrentTaskToDelayedList>
}
 8010f56:	bf00      	nop
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	20000894 	.word	0x20000894

08010f64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d109      	bne.n	8010f8e <xTaskRemoveFromEventList+0x2a>
 8010f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7e:	f383 8811 	msr	BASEPRI, r3
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	f3bf 8f4f 	dsb	sy
 8010f8a:	60fb      	str	r3, [r7, #12]
 8010f8c:	e7fe      	b.n	8010f8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	3318      	adds	r3, #24
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fe fe46 	bl	800fc24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f98:	4b1d      	ldr	r3, [pc, #116]	; (8011010 <xTaskRemoveFromEventList+0xac>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d11c      	bne.n	8010fda <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	3304      	adds	r3, #4
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fe fe3d 	bl	800fc24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fae:	2201      	movs	r2, #1
 8010fb0:	409a      	lsls	r2, r3
 8010fb2:	4b18      	ldr	r3, [pc, #96]	; (8011014 <xTaskRemoveFromEventList+0xb0>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	4a16      	ldr	r2, [pc, #88]	; (8011014 <xTaskRemoveFromEventList+0xb0>)
 8010fba:	6013      	str	r3, [r2, #0]
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	009b      	lsls	r3, r3, #2
 8010fc4:	4413      	add	r3, r2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	4a13      	ldr	r2, [pc, #76]	; (8011018 <xTaskRemoveFromEventList+0xb4>)
 8010fca:	441a      	add	r2, r3
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	3304      	adds	r3, #4
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	4610      	mov	r0, r2
 8010fd4:	f7fe fdc9 	bl	800fb6a <vListInsertEnd>
 8010fd8:	e005      	b.n	8010fe6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	3318      	adds	r3, #24
 8010fde:	4619      	mov	r1, r3
 8010fe0:	480e      	ldr	r0, [pc, #56]	; (801101c <xTaskRemoveFromEventList+0xb8>)
 8010fe2:	f7fe fdc2 	bl	800fb6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fea:	4b0d      	ldr	r3, [pc, #52]	; (8011020 <xTaskRemoveFromEventList+0xbc>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d905      	bls.n	8011000 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <xTaskRemoveFromEventList+0xc0>)
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	601a      	str	r2, [r3, #0]
 8010ffe:	e001      	b.n	8011004 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8011000:	2300      	movs	r3, #0
 8011002:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011004:	697b      	ldr	r3, [r7, #20]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3718      	adds	r7, #24
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	200009bc 	.word	0x200009bc
 8011014:	2000099c 	.word	0x2000099c
 8011018:	20000898 	.word	0x20000898
 801101c:	20000954 	.word	0x20000954
 8011020:	20000894 	.word	0x20000894
 8011024:	200009a8 	.word	0x200009a8

08011028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011030:	4b06      	ldr	r3, [pc, #24]	; (801104c <vTaskInternalSetTimeOutState+0x24>)
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011038:	4b05      	ldr	r3, [pc, #20]	; (8011050 <vTaskInternalSetTimeOutState+0x28>)
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	605a      	str	r2, [r3, #4]
}
 8011040:	bf00      	nop
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr
 801104c:	200009ac 	.word	0x200009ac
 8011050:	20000998 	.word	0x20000998

08011054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b088      	sub	sp, #32
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d109      	bne.n	8011078 <xTaskCheckForTimeOut+0x24>
 8011064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011068:	f383 8811 	msr	BASEPRI, r3
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	613b      	str	r3, [r7, #16]
 8011076:	e7fe      	b.n	8011076 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d109      	bne.n	8011092 <xTaskCheckForTimeOut+0x3e>
 801107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	60fb      	str	r3, [r7, #12]
 8011090:	e7fe      	b.n	8011090 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011092:	f000 fb4b 	bl	801172c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011096:	4b1d      	ldr	r3, [pc, #116]	; (801110c <xTaskCheckForTimeOut+0xb8>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	69ba      	ldr	r2, [r7, #24]
 80110a2:	1ad3      	subs	r3, r2, r3
 80110a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ae:	d102      	bne.n	80110b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80110b0:	2300      	movs	r3, #0
 80110b2:	61fb      	str	r3, [r7, #28]
 80110b4:	e023      	b.n	80110fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	4b15      	ldr	r3, [pc, #84]	; (8011110 <xTaskCheckForTimeOut+0xbc>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	429a      	cmp	r2, r3
 80110c0:	d007      	beq.n	80110d2 <xTaskCheckForTimeOut+0x7e>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	69ba      	ldr	r2, [r7, #24]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d302      	bcc.n	80110d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80110cc:	2301      	movs	r3, #1
 80110ce:	61fb      	str	r3, [r7, #28]
 80110d0:	e015      	b.n	80110fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	697a      	ldr	r2, [r7, #20]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d20b      	bcs.n	80110f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	1ad2      	subs	r2, r2, r3
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7ff ff9d 	bl	8011028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80110ee:	2300      	movs	r3, #0
 80110f0:	61fb      	str	r3, [r7, #28]
 80110f2:	e004      	b.n	80110fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	2200      	movs	r2, #0
 80110f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80110fa:	2301      	movs	r3, #1
 80110fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80110fe:	f000 fb43 	bl	8011788 <vPortExitCritical>

	return xReturn;
 8011102:	69fb      	ldr	r3, [r7, #28]
}
 8011104:	4618      	mov	r0, r3
 8011106:	3720      	adds	r7, #32
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}
 801110c:	20000998 	.word	0x20000998
 8011110:	200009ac 	.word	0x200009ac

08011114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011114:	b480      	push	{r7}
 8011116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011118:	4b03      	ldr	r3, [pc, #12]	; (8011128 <vTaskMissedYield+0x14>)
 801111a:	2201      	movs	r2, #1
 801111c:	601a      	str	r2, [r3, #0]
}
 801111e:	bf00      	nop
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	200009a8 	.word	0x200009a8

0801112c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011134:	f000 f852 	bl	80111dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011138:	4b06      	ldr	r3, [pc, #24]	; (8011154 <prvIdleTask+0x28>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b01      	cmp	r3, #1
 801113e:	d9f9      	bls.n	8011134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011140:	4b05      	ldr	r3, [pc, #20]	; (8011158 <prvIdleTask+0x2c>)
 8011142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011146:	601a      	str	r2, [r3, #0]
 8011148:	f3bf 8f4f 	dsb	sy
 801114c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011150:	e7f0      	b.n	8011134 <prvIdleTask+0x8>
 8011152:	bf00      	nop
 8011154:	20000898 	.word	0x20000898
 8011158:	e000ed04 	.word	0xe000ed04

0801115c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011162:	2300      	movs	r3, #0
 8011164:	607b      	str	r3, [r7, #4]
 8011166:	e00c      	b.n	8011182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	4613      	mov	r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	4413      	add	r3, r2
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	4a12      	ldr	r2, [pc, #72]	; (80111bc <prvInitialiseTaskLists+0x60>)
 8011174:	4413      	add	r3, r2
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe fcca 	bl	800fb10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	3301      	adds	r3, #1
 8011180:	607b      	str	r3, [r7, #4]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2b06      	cmp	r3, #6
 8011186:	d9ef      	bls.n	8011168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011188:	480d      	ldr	r0, [pc, #52]	; (80111c0 <prvInitialiseTaskLists+0x64>)
 801118a:	f7fe fcc1 	bl	800fb10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801118e:	480d      	ldr	r0, [pc, #52]	; (80111c4 <prvInitialiseTaskLists+0x68>)
 8011190:	f7fe fcbe 	bl	800fb10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011194:	480c      	ldr	r0, [pc, #48]	; (80111c8 <prvInitialiseTaskLists+0x6c>)
 8011196:	f7fe fcbb 	bl	800fb10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801119a:	480c      	ldr	r0, [pc, #48]	; (80111cc <prvInitialiseTaskLists+0x70>)
 801119c:	f7fe fcb8 	bl	800fb10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80111a0:	480b      	ldr	r0, [pc, #44]	; (80111d0 <prvInitialiseTaskLists+0x74>)
 80111a2:	f7fe fcb5 	bl	800fb10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80111a6:	4b0b      	ldr	r3, [pc, #44]	; (80111d4 <prvInitialiseTaskLists+0x78>)
 80111a8:	4a05      	ldr	r2, [pc, #20]	; (80111c0 <prvInitialiseTaskLists+0x64>)
 80111aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80111ac:	4b0a      	ldr	r3, [pc, #40]	; (80111d8 <prvInitialiseTaskLists+0x7c>)
 80111ae:	4a05      	ldr	r2, [pc, #20]	; (80111c4 <prvInitialiseTaskLists+0x68>)
 80111b0:	601a      	str	r2, [r3, #0]
}
 80111b2:	bf00      	nop
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	20000898 	.word	0x20000898
 80111c0:	20000924 	.word	0x20000924
 80111c4:	20000938 	.word	0x20000938
 80111c8:	20000954 	.word	0x20000954
 80111cc:	20000968 	.word	0x20000968
 80111d0:	20000980 	.word	0x20000980
 80111d4:	2000094c 	.word	0x2000094c
 80111d8:	20000950 	.word	0x20000950

080111dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111e2:	e019      	b.n	8011218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80111e4:	f000 faa2 	bl	801172c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e8:	4b0f      	ldr	r3, [pc, #60]	; (8011228 <prvCheckTasksWaitingTermination+0x4c>)
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	3304      	adds	r3, #4
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7fe fd15 	bl	800fc24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80111fa:	4b0c      	ldr	r3, [pc, #48]	; (801122c <prvCheckTasksWaitingTermination+0x50>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	3b01      	subs	r3, #1
 8011200:	4a0a      	ldr	r2, [pc, #40]	; (801122c <prvCheckTasksWaitingTermination+0x50>)
 8011202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011204:	4b0a      	ldr	r3, [pc, #40]	; (8011230 <prvCheckTasksWaitingTermination+0x54>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	3b01      	subs	r3, #1
 801120a:	4a09      	ldr	r2, [pc, #36]	; (8011230 <prvCheckTasksWaitingTermination+0x54>)
 801120c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801120e:	f000 fabb 	bl	8011788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f80e 	bl	8011234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011218:	4b05      	ldr	r3, [pc, #20]	; (8011230 <prvCheckTasksWaitingTermination+0x54>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d1e1      	bne.n	80111e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011220:	bf00      	nop
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	20000968 	.word	0x20000968
 801122c:	20000994 	.word	0x20000994
 8011230:	2000097c 	.word	0x2000097c

08011234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011242:	2b00      	cmp	r3, #0
 8011244:	d108      	bne.n	8011258 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801124a:	4618      	mov	r0, r3
 801124c:	f000 fc4a 	bl	8011ae4 <vPortFree>
				vPortFree( pxTCB );
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 fc47 	bl	8011ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011256:	e017      	b.n	8011288 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801125e:	2b01      	cmp	r3, #1
 8011260:	d103      	bne.n	801126a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 fc3e 	bl	8011ae4 <vPortFree>
	}
 8011268:	e00e      	b.n	8011288 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011270:	2b02      	cmp	r3, #2
 8011272:	d009      	beq.n	8011288 <prvDeleteTCB+0x54>
 8011274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011278:	f383 8811 	msr	BASEPRI, r3
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	60fb      	str	r3, [r7, #12]
 8011286:	e7fe      	b.n	8011286 <prvDeleteTCB+0x52>
	}
 8011288:	bf00      	nop
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011296:	4b0c      	ldr	r3, [pc, #48]	; (80112c8 <prvResetNextTaskUnblockTime+0x38>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d104      	bne.n	80112aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80112a0:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <prvResetNextTaskUnblockTime+0x3c>)
 80112a2:	f04f 32ff 	mov.w	r2, #4294967295
 80112a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80112a8:	e008      	b.n	80112bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112aa:	4b07      	ldr	r3, [pc, #28]	; (80112c8 <prvResetNextTaskUnblockTime+0x38>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	4a04      	ldr	r2, [pc, #16]	; (80112cc <prvResetNextTaskUnblockTime+0x3c>)
 80112ba:	6013      	str	r3, [r2, #0]
}
 80112bc:	bf00      	nop
 80112be:	370c      	adds	r7, #12
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	2000094c 	.word	0x2000094c
 80112cc:	200009b4 	.word	0x200009b4

080112d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80112d6:	4b0b      	ldr	r3, [pc, #44]	; (8011304 <xTaskGetSchedulerState+0x34>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d102      	bne.n	80112e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80112de:	2301      	movs	r3, #1
 80112e0:	607b      	str	r3, [r7, #4]
 80112e2:	e008      	b.n	80112f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112e4:	4b08      	ldr	r3, [pc, #32]	; (8011308 <xTaskGetSchedulerState+0x38>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d102      	bne.n	80112f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80112ec:	2302      	movs	r3, #2
 80112ee:	607b      	str	r3, [r7, #4]
 80112f0:	e001      	b.n	80112f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80112f2:	2300      	movs	r3, #0
 80112f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80112f6:	687b      	ldr	r3, [r7, #4]
	}
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	200009a0 	.word	0x200009a0
 8011308:	200009bc 	.word	0x200009bc

0801130c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011318:	2300      	movs	r3, #0
 801131a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d06c      	beq.n	80113fc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011322:	4b39      	ldr	r3, [pc, #228]	; (8011408 <xTaskPriorityDisinherit+0xfc>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	693a      	ldr	r2, [r7, #16]
 8011328:	429a      	cmp	r2, r3
 801132a:	d009      	beq.n	8011340 <xTaskPriorityDisinherit+0x34>
 801132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011330:	f383 8811 	msr	BASEPRI, r3
 8011334:	f3bf 8f6f 	isb	sy
 8011338:	f3bf 8f4f 	dsb	sy
 801133c:	60fb      	str	r3, [r7, #12]
 801133e:	e7fe      	b.n	801133e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011344:	2b00      	cmp	r3, #0
 8011346:	d109      	bne.n	801135c <xTaskPriorityDisinherit+0x50>
 8011348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134c:	f383 8811 	msr	BASEPRI, r3
 8011350:	f3bf 8f6f 	isb	sy
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	60bb      	str	r3, [r7, #8]
 801135a:	e7fe      	b.n	801135a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011360:	1e5a      	subs	r2, r3, #1
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801136e:	429a      	cmp	r2, r3
 8011370:	d044      	beq.n	80113fc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011376:	2b00      	cmp	r3, #0
 8011378:	d140      	bne.n	80113fc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	3304      	adds	r3, #4
 801137e:	4618      	mov	r0, r3
 8011380:	f7fe fc50 	bl	800fc24 <uxListRemove>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d115      	bne.n	80113b6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801138e:	491f      	ldr	r1, [pc, #124]	; (801140c <xTaskPriorityDisinherit+0x100>)
 8011390:	4613      	mov	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4413      	add	r3, r2
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	440b      	add	r3, r1
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d10a      	bne.n	80113b6 <xTaskPriorityDisinherit+0xaa>
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a4:	2201      	movs	r2, #1
 80113a6:	fa02 f303 	lsl.w	r3, r2, r3
 80113aa:	43da      	mvns	r2, r3
 80113ac:	4b18      	ldr	r3, [pc, #96]	; (8011410 <xTaskPriorityDisinherit+0x104>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4013      	ands	r3, r2
 80113b2:	4a17      	ldr	r2, [pc, #92]	; (8011410 <xTaskPriorityDisinherit+0x104>)
 80113b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c2:	f1c3 0207 	rsb	r2, r3, #7
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ce:	2201      	movs	r2, #1
 80113d0:	409a      	lsls	r2, r3
 80113d2:	4b0f      	ldr	r3, [pc, #60]	; (8011410 <xTaskPriorityDisinherit+0x104>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	4313      	orrs	r3, r2
 80113d8:	4a0d      	ldr	r2, [pc, #52]	; (8011410 <xTaskPriorityDisinherit+0x104>)
 80113da:	6013      	str	r3, [r2, #0]
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113e0:	4613      	mov	r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	4413      	add	r3, r2
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4a08      	ldr	r2, [pc, #32]	; (801140c <xTaskPriorityDisinherit+0x100>)
 80113ea:	441a      	add	r2, r3
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	3304      	adds	r3, #4
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fe fbb9 	bl	800fb6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80113f8:	2301      	movs	r3, #1
 80113fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80113fc:	697b      	ldr	r3, [r7, #20]
	}
 80113fe:	4618      	mov	r0, r3
 8011400:	3718      	adds	r7, #24
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	20000894 	.word	0x20000894
 801140c:	20000898 	.word	0x20000898
 8011410:	2000099c 	.word	0x2000099c

08011414 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801141e:	4b29      	ldr	r3, [pc, #164]	; (80114c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011424:	4b28      	ldr	r3, [pc, #160]	; (80114c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	3304      	adds	r3, #4
 801142a:	4618      	mov	r0, r3
 801142c:	f7fe fbfa 	bl	800fc24 <uxListRemove>
 8011430:	4603      	mov	r3, r0
 8011432:	2b00      	cmp	r3, #0
 8011434:	d10b      	bne.n	801144e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011436:	4b24      	ldr	r3, [pc, #144]	; (80114c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801143c:	2201      	movs	r2, #1
 801143e:	fa02 f303 	lsl.w	r3, r2, r3
 8011442:	43da      	mvns	r2, r3
 8011444:	4b21      	ldr	r3, [pc, #132]	; (80114cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4013      	ands	r3, r2
 801144a:	4a20      	ldr	r2, [pc, #128]	; (80114cc <prvAddCurrentTaskToDelayedList+0xb8>)
 801144c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011454:	d10a      	bne.n	801146c <prvAddCurrentTaskToDelayedList+0x58>
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d007      	beq.n	801146c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801145c:	4b1a      	ldr	r3, [pc, #104]	; (80114c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	3304      	adds	r3, #4
 8011462:	4619      	mov	r1, r3
 8011464:	481a      	ldr	r0, [pc, #104]	; (80114d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011466:	f7fe fb80 	bl	800fb6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801146a:	e026      	b.n	80114ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4413      	add	r3, r2
 8011472:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011474:	4b14      	ldr	r3, [pc, #80]	; (80114c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801147c:	68ba      	ldr	r2, [r7, #8]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	429a      	cmp	r2, r3
 8011482:	d209      	bcs.n	8011498 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011484:	4b13      	ldr	r3, [pc, #76]	; (80114d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	4b0f      	ldr	r3, [pc, #60]	; (80114c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	3304      	adds	r3, #4
 801148e:	4619      	mov	r1, r3
 8011490:	4610      	mov	r0, r2
 8011492:	f7fe fb8e 	bl	800fbb2 <vListInsert>
}
 8011496:	e010      	b.n	80114ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011498:	4b0f      	ldr	r3, [pc, #60]	; (80114d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	4b0a      	ldr	r3, [pc, #40]	; (80114c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	3304      	adds	r3, #4
 80114a2:	4619      	mov	r1, r3
 80114a4:	4610      	mov	r0, r2
 80114a6:	f7fe fb84 	bl	800fbb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80114aa:	4b0c      	ldr	r3, [pc, #48]	; (80114dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d202      	bcs.n	80114ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80114b4:	4a09      	ldr	r2, [pc, #36]	; (80114dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	6013      	str	r3, [r2, #0]
}
 80114ba:	bf00      	nop
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	20000998 	.word	0x20000998
 80114c8:	20000894 	.word	0x20000894
 80114cc:	2000099c 	.word	0x2000099c
 80114d0:	20000980 	.word	0x20000980
 80114d4:	20000950 	.word	0x20000950
 80114d8:	2000094c 	.word	0x2000094c
 80114dc:	200009b4 	.word	0x200009b4

080114e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80114e0:	b480      	push	{r7}
 80114e2:	b085      	sub	sp, #20
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	3b04      	subs	r3, #4
 80114f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80114f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	3b04      	subs	r3, #4
 80114fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	f023 0201 	bic.w	r2, r3, #1
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	3b04      	subs	r3, #4
 801150e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011510:	4a0c      	ldr	r2, [pc, #48]	; (8011544 <pxPortInitialiseStack+0x64>)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	3b14      	subs	r3, #20
 801151a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	3b04      	subs	r3, #4
 8011526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f06f 0202 	mvn.w	r2, #2
 801152e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	3b20      	subs	r3, #32
 8011534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011536:	68fb      	ldr	r3, [r7, #12]
}
 8011538:	4618      	mov	r0, r3
 801153a:	3714      	adds	r7, #20
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr
 8011544:	08011549 	.word	0x08011549

08011548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011552:	4b11      	ldr	r3, [pc, #68]	; (8011598 <prvTaskExitError+0x50>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801155a:	d009      	beq.n	8011570 <prvTaskExitError+0x28>
 801155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011560:	f383 8811 	msr	BASEPRI, r3
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	f3bf 8f4f 	dsb	sy
 801156c:	60fb      	str	r3, [r7, #12]
 801156e:	e7fe      	b.n	801156e <prvTaskExitError+0x26>
 8011570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011574:	f383 8811 	msr	BASEPRI, r3
 8011578:	f3bf 8f6f 	isb	sy
 801157c:	f3bf 8f4f 	dsb	sy
 8011580:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011582:	bf00      	nop
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d0fc      	beq.n	8011584 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801158a:	bf00      	nop
 801158c:	3714      	adds	r7, #20
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr
 8011596:	bf00      	nop
 8011598:	200003b4 	.word	0x200003b4
 801159c:	00000000 	.word	0x00000000

080115a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80115a0:	4b07      	ldr	r3, [pc, #28]	; (80115c0 <pxCurrentTCBConst2>)
 80115a2:	6819      	ldr	r1, [r3, #0]
 80115a4:	6808      	ldr	r0, [r1, #0]
 80115a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115aa:	f380 8809 	msr	PSP, r0
 80115ae:	f3bf 8f6f 	isb	sy
 80115b2:	f04f 0000 	mov.w	r0, #0
 80115b6:	f380 8811 	msr	BASEPRI, r0
 80115ba:	4770      	bx	lr
 80115bc:	f3af 8000 	nop.w

080115c0 <pxCurrentTCBConst2>:
 80115c0:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80115c4:	bf00      	nop
 80115c6:	bf00      	nop

080115c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80115c8:	4808      	ldr	r0, [pc, #32]	; (80115ec <prvPortStartFirstTask+0x24>)
 80115ca:	6800      	ldr	r0, [r0, #0]
 80115cc:	6800      	ldr	r0, [r0, #0]
 80115ce:	f380 8808 	msr	MSP, r0
 80115d2:	f04f 0000 	mov.w	r0, #0
 80115d6:	f380 8814 	msr	CONTROL, r0
 80115da:	b662      	cpsie	i
 80115dc:	b661      	cpsie	f
 80115de:	f3bf 8f4f 	dsb	sy
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	df00      	svc	0
 80115e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80115ea:	bf00      	nop
 80115ec:	e000ed08 	.word	0xe000ed08

080115f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b086      	sub	sp, #24
 80115f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80115f6:	4b44      	ldr	r3, [pc, #272]	; (8011708 <xPortStartScheduler+0x118>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4a44      	ldr	r2, [pc, #272]	; (801170c <xPortStartScheduler+0x11c>)
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d109      	bne.n	8011614 <xPortStartScheduler+0x24>
 8011600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011604:	f383 8811 	msr	BASEPRI, r3
 8011608:	f3bf 8f6f 	isb	sy
 801160c:	f3bf 8f4f 	dsb	sy
 8011610:	613b      	str	r3, [r7, #16]
 8011612:	e7fe      	b.n	8011612 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011614:	4b3c      	ldr	r3, [pc, #240]	; (8011708 <xPortStartScheduler+0x118>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4a3d      	ldr	r2, [pc, #244]	; (8011710 <xPortStartScheduler+0x120>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d109      	bne.n	8011632 <xPortStartScheduler+0x42>
 801161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011622:	f383 8811 	msr	BASEPRI, r3
 8011626:	f3bf 8f6f 	isb	sy
 801162a:	f3bf 8f4f 	dsb	sy
 801162e:	60fb      	str	r3, [r7, #12]
 8011630:	e7fe      	b.n	8011630 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011632:	4b38      	ldr	r3, [pc, #224]	; (8011714 <xPortStartScheduler+0x124>)
 8011634:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	b2db      	uxtb	r3, r3
 801163c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	22ff      	movs	r2, #255	; 0xff
 8011642:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	b2db      	uxtb	r3, r3
 801164a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801164c:	78fb      	ldrb	r3, [r7, #3]
 801164e:	b2db      	uxtb	r3, r3
 8011650:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011654:	b2da      	uxtb	r2, r3
 8011656:	4b30      	ldr	r3, [pc, #192]	; (8011718 <xPortStartScheduler+0x128>)
 8011658:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801165a:	4b30      	ldr	r3, [pc, #192]	; (801171c <xPortStartScheduler+0x12c>)
 801165c:	2207      	movs	r2, #7
 801165e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011660:	e009      	b.n	8011676 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011662:	4b2e      	ldr	r3, [pc, #184]	; (801171c <xPortStartScheduler+0x12c>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	3b01      	subs	r3, #1
 8011668:	4a2c      	ldr	r2, [pc, #176]	; (801171c <xPortStartScheduler+0x12c>)
 801166a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801166c:	78fb      	ldrb	r3, [r7, #3]
 801166e:	b2db      	uxtb	r3, r3
 8011670:	005b      	lsls	r3, r3, #1
 8011672:	b2db      	uxtb	r3, r3
 8011674:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011676:	78fb      	ldrb	r3, [r7, #3]
 8011678:	b2db      	uxtb	r3, r3
 801167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801167e:	2b80      	cmp	r3, #128	; 0x80
 8011680:	d0ef      	beq.n	8011662 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011682:	4b26      	ldr	r3, [pc, #152]	; (801171c <xPortStartScheduler+0x12c>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f1c3 0307 	rsb	r3, r3, #7
 801168a:	2b04      	cmp	r3, #4
 801168c:	d009      	beq.n	80116a2 <xPortStartScheduler+0xb2>
 801168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011692:	f383 8811 	msr	BASEPRI, r3
 8011696:	f3bf 8f6f 	isb	sy
 801169a:	f3bf 8f4f 	dsb	sy
 801169e:	60bb      	str	r3, [r7, #8]
 80116a0:	e7fe      	b.n	80116a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80116a2:	4b1e      	ldr	r3, [pc, #120]	; (801171c <xPortStartScheduler+0x12c>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	021b      	lsls	r3, r3, #8
 80116a8:	4a1c      	ldr	r2, [pc, #112]	; (801171c <xPortStartScheduler+0x12c>)
 80116aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116ac:	4b1b      	ldr	r3, [pc, #108]	; (801171c <xPortStartScheduler+0x12c>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116b4:	4a19      	ldr	r2, [pc, #100]	; (801171c <xPortStartScheduler+0x12c>)
 80116b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80116c0:	4b17      	ldr	r3, [pc, #92]	; (8011720 <xPortStartScheduler+0x130>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4a16      	ldr	r2, [pc, #88]	; (8011720 <xPortStartScheduler+0x130>)
 80116c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80116ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80116cc:	4b14      	ldr	r3, [pc, #80]	; (8011720 <xPortStartScheduler+0x130>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4a13      	ldr	r2, [pc, #76]	; (8011720 <xPortStartScheduler+0x130>)
 80116d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80116d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80116d8:	f000 f8d6 	bl	8011888 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80116dc:	4b11      	ldr	r3, [pc, #68]	; (8011724 <xPortStartScheduler+0x134>)
 80116de:	2200      	movs	r2, #0
 80116e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80116e2:	f000 f8f5 	bl	80118d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80116e6:	4b10      	ldr	r3, [pc, #64]	; (8011728 <xPortStartScheduler+0x138>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	4a0f      	ldr	r2, [pc, #60]	; (8011728 <xPortStartScheduler+0x138>)
 80116ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80116f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80116f2:	f7ff ff69 	bl	80115c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80116f6:	f7ff fbb7 	bl	8010e68 <vTaskSwitchContext>
	prvTaskExitError();
 80116fa:	f7ff ff25 	bl	8011548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80116fe:	2300      	movs	r3, #0
}
 8011700:	4618      	mov	r0, r3
 8011702:	3718      	adds	r7, #24
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	e000ed00 	.word	0xe000ed00
 801170c:	410fc271 	.word	0x410fc271
 8011710:	410fc270 	.word	0x410fc270
 8011714:	e000e400 	.word	0xe000e400
 8011718:	200009c0 	.word	0x200009c0
 801171c:	200009c4 	.word	0x200009c4
 8011720:	e000ed20 	.word	0xe000ed20
 8011724:	200003b4 	.word	0x200003b4
 8011728:	e000ef34 	.word	0xe000ef34

0801172c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011736:	f383 8811 	msr	BASEPRI, r3
 801173a:	f3bf 8f6f 	isb	sy
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011744:	4b0e      	ldr	r3, [pc, #56]	; (8011780 <vPortEnterCritical+0x54>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	3301      	adds	r3, #1
 801174a:	4a0d      	ldr	r2, [pc, #52]	; (8011780 <vPortEnterCritical+0x54>)
 801174c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801174e:	4b0c      	ldr	r3, [pc, #48]	; (8011780 <vPortEnterCritical+0x54>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2b01      	cmp	r3, #1
 8011754:	d10e      	bne.n	8011774 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011756:	4b0b      	ldr	r3, [pc, #44]	; (8011784 <vPortEnterCritical+0x58>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	b2db      	uxtb	r3, r3
 801175c:	2b00      	cmp	r3, #0
 801175e:	d009      	beq.n	8011774 <vPortEnterCritical+0x48>
 8011760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011764:	f383 8811 	msr	BASEPRI, r3
 8011768:	f3bf 8f6f 	isb	sy
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	603b      	str	r3, [r7, #0]
 8011772:	e7fe      	b.n	8011772 <vPortEnterCritical+0x46>
	}
}
 8011774:	bf00      	nop
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr
 8011780:	200003b4 	.word	0x200003b4
 8011784:	e000ed04 	.word	0xe000ed04

08011788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801178e:	4b11      	ldr	r3, [pc, #68]	; (80117d4 <vPortExitCritical+0x4c>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d109      	bne.n	80117aa <vPortExitCritical+0x22>
 8011796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179a:	f383 8811 	msr	BASEPRI, r3
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	f3bf 8f4f 	dsb	sy
 80117a6:	607b      	str	r3, [r7, #4]
 80117a8:	e7fe      	b.n	80117a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80117aa:	4b0a      	ldr	r3, [pc, #40]	; (80117d4 <vPortExitCritical+0x4c>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	3b01      	subs	r3, #1
 80117b0:	4a08      	ldr	r2, [pc, #32]	; (80117d4 <vPortExitCritical+0x4c>)
 80117b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80117b4:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <vPortExitCritical+0x4c>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d104      	bne.n	80117c6 <vPortExitCritical+0x3e>
 80117bc:	2300      	movs	r3, #0
 80117be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80117c6:	bf00      	nop
 80117c8:	370c      	adds	r7, #12
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop
 80117d4:	200003b4 	.word	0x200003b4
	...

080117e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80117e0:	f3ef 8009 	mrs	r0, PSP
 80117e4:	f3bf 8f6f 	isb	sy
 80117e8:	4b15      	ldr	r3, [pc, #84]	; (8011840 <pxCurrentTCBConst>)
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	f01e 0f10 	tst.w	lr, #16
 80117f0:	bf08      	it	eq
 80117f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80117f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fa:	6010      	str	r0, [r2, #0]
 80117fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011804:	f380 8811 	msr	BASEPRI, r0
 8011808:	f3bf 8f4f 	dsb	sy
 801180c:	f3bf 8f6f 	isb	sy
 8011810:	f7ff fb2a 	bl	8010e68 <vTaskSwitchContext>
 8011814:	f04f 0000 	mov.w	r0, #0
 8011818:	f380 8811 	msr	BASEPRI, r0
 801181c:	bc09      	pop	{r0, r3}
 801181e:	6819      	ldr	r1, [r3, #0]
 8011820:	6808      	ldr	r0, [r1, #0]
 8011822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011826:	f01e 0f10 	tst.w	lr, #16
 801182a:	bf08      	it	eq
 801182c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011830:	f380 8809 	msr	PSP, r0
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	f3af 8000 	nop.w

08011840 <pxCurrentTCBConst>:
 8011840:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011844:	bf00      	nop
 8011846:	bf00      	nop

08011848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
	__asm volatile
 801184e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011852:	f383 8811 	msr	BASEPRI, r3
 8011856:	f3bf 8f6f 	isb	sy
 801185a:	f3bf 8f4f 	dsb	sy
 801185e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011860:	f7ff fa4a 	bl	8010cf8 <xTaskIncrementTick>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d003      	beq.n	8011872 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801186a:	4b06      	ldr	r3, [pc, #24]	; (8011884 <SysTick_Handler+0x3c>)
 801186c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011870:	601a      	str	r2, [r3, #0]
 8011872:	2300      	movs	r3, #0
 8011874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801187c:	bf00      	nop
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	e000ed04 	.word	0xe000ed04

08011888 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011888:	b480      	push	{r7}
 801188a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801188c:	4b0b      	ldr	r3, [pc, #44]	; (80118bc <vPortSetupTimerInterrupt+0x34>)
 801188e:	2200      	movs	r2, #0
 8011890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011892:	4b0b      	ldr	r3, [pc, #44]	; (80118c0 <vPortSetupTimerInterrupt+0x38>)
 8011894:	2200      	movs	r2, #0
 8011896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011898:	4b0a      	ldr	r3, [pc, #40]	; (80118c4 <vPortSetupTimerInterrupt+0x3c>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a0a      	ldr	r2, [pc, #40]	; (80118c8 <vPortSetupTimerInterrupt+0x40>)
 801189e:	fba2 2303 	umull	r2, r3, r2, r3
 80118a2:	099b      	lsrs	r3, r3, #6
 80118a4:	4a09      	ldr	r2, [pc, #36]	; (80118cc <vPortSetupTimerInterrupt+0x44>)
 80118a6:	3b01      	subs	r3, #1
 80118a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80118aa:	4b04      	ldr	r3, [pc, #16]	; (80118bc <vPortSetupTimerInterrupt+0x34>)
 80118ac:	2207      	movs	r2, #7
 80118ae:	601a      	str	r2, [r3, #0]
}
 80118b0:	bf00      	nop
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	e000e010 	.word	0xe000e010
 80118c0:	e000e018 	.word	0xe000e018
 80118c4:	20000280 	.word	0x20000280
 80118c8:	10624dd3 	.word	0x10624dd3
 80118cc:	e000e014 	.word	0xe000e014

080118d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80118d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80118e0 <vPortEnableVFP+0x10>
 80118d4:	6801      	ldr	r1, [r0, #0]
 80118d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80118da:	6001      	str	r1, [r0, #0]
 80118dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80118de:	bf00      	nop
 80118e0:	e000ed88 	.word	0xe000ed88

080118e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80118e4:	b480      	push	{r7}
 80118e6:	b085      	sub	sp, #20
 80118e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80118ea:	f3ef 8305 	mrs	r3, IPSR
 80118ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2b0f      	cmp	r3, #15
 80118f4:	d913      	bls.n	801191e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80118f6:	4a16      	ldr	r2, [pc, #88]	; (8011950 <vPortValidateInterruptPriority+0x6c>)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	4413      	add	r3, r2
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011900:	4b14      	ldr	r3, [pc, #80]	; (8011954 <vPortValidateInterruptPriority+0x70>)
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	7afa      	ldrb	r2, [r7, #11]
 8011906:	429a      	cmp	r2, r3
 8011908:	d209      	bcs.n	801191e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190e:	f383 8811 	msr	BASEPRI, r3
 8011912:	f3bf 8f6f 	isb	sy
 8011916:	f3bf 8f4f 	dsb	sy
 801191a:	607b      	str	r3, [r7, #4]
 801191c:	e7fe      	b.n	801191c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801191e:	4b0e      	ldr	r3, [pc, #56]	; (8011958 <vPortValidateInterruptPriority+0x74>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011926:	4b0d      	ldr	r3, [pc, #52]	; (801195c <vPortValidateInterruptPriority+0x78>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	429a      	cmp	r2, r3
 801192c:	d909      	bls.n	8011942 <vPortValidateInterruptPriority+0x5e>
 801192e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011932:	f383 8811 	msr	BASEPRI, r3
 8011936:	f3bf 8f6f 	isb	sy
 801193a:	f3bf 8f4f 	dsb	sy
 801193e:	603b      	str	r3, [r7, #0]
 8011940:	e7fe      	b.n	8011940 <vPortValidateInterruptPriority+0x5c>
	}
 8011942:	bf00      	nop
 8011944:	3714      	adds	r7, #20
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr
 801194e:	bf00      	nop
 8011950:	e000e3f0 	.word	0xe000e3f0
 8011954:	200009c0 	.word	0x200009c0
 8011958:	e000ed0c 	.word	0xe000ed0c
 801195c:	200009c4 	.word	0x200009c4

08011960 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b08a      	sub	sp, #40	; 0x28
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011968:	2300      	movs	r3, #0
 801196a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801196c:	f7ff f8f8 	bl	8010b60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011970:	4b57      	ldr	r3, [pc, #348]	; (8011ad0 <pvPortMalloc+0x170>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d101      	bne.n	801197c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011978:	f000 f90c 	bl	8011b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801197c:	4b55      	ldr	r3, [pc, #340]	; (8011ad4 <pvPortMalloc+0x174>)
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	4013      	ands	r3, r2
 8011984:	2b00      	cmp	r3, #0
 8011986:	f040 808c 	bne.w	8011aa2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d01c      	beq.n	80119ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011990:	2208      	movs	r2, #8
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4413      	add	r3, r2
 8011996:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f003 0307 	and.w	r3, r3, #7
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d013      	beq.n	80119ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f023 0307 	bic.w	r3, r3, #7
 80119a8:	3308      	adds	r3, #8
 80119aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f003 0307 	and.w	r3, r3, #7
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d009      	beq.n	80119ca <pvPortMalloc+0x6a>
 80119b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ba:	f383 8811 	msr	BASEPRI, r3
 80119be:	f3bf 8f6f 	isb	sy
 80119c2:	f3bf 8f4f 	dsb	sy
 80119c6:	617b      	str	r3, [r7, #20]
 80119c8:	e7fe      	b.n	80119c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d068      	beq.n	8011aa2 <pvPortMalloc+0x142>
 80119d0:	4b41      	ldr	r3, [pc, #260]	; (8011ad8 <pvPortMalloc+0x178>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d863      	bhi.n	8011aa2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119da:	4b40      	ldr	r3, [pc, #256]	; (8011adc <pvPortMalloc+0x17c>)
 80119dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119de:	4b3f      	ldr	r3, [pc, #252]	; (8011adc <pvPortMalloc+0x17c>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119e4:	e004      	b.n	80119f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80119e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d903      	bls.n	8011a02 <pvPortMalloc+0xa2>
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1f1      	bne.n	80119e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a02:	4b33      	ldr	r3, [pc, #204]	; (8011ad0 <pvPortMalloc+0x170>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d04a      	beq.n	8011aa2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a0c:	6a3b      	ldr	r3, [r7, #32]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	2208      	movs	r2, #8
 8011a12:	4413      	add	r3, r2
 8011a14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	6a3b      	ldr	r3, [r7, #32]
 8011a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a20:	685a      	ldr	r2, [r3, #4]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	1ad2      	subs	r2, r2, r3
 8011a26:	2308      	movs	r3, #8
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d91e      	bls.n	8011a6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	4413      	add	r3, r2
 8011a34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	f003 0307 	and.w	r3, r3, #7
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d009      	beq.n	8011a54 <pvPortMalloc+0xf4>
 8011a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a44:	f383 8811 	msr	BASEPRI, r3
 8011a48:	f3bf 8f6f 	isb	sy
 8011a4c:	f3bf 8f4f 	dsb	sy
 8011a50:	613b      	str	r3, [r7, #16]
 8011a52:	e7fe      	b.n	8011a52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a56:	685a      	ldr	r2, [r3, #4]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	1ad2      	subs	r2, r2, r3
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a66:	69b8      	ldr	r0, [r7, #24]
 8011a68:	f000 f8f6 	bl	8011c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a6c:	4b1a      	ldr	r3, [pc, #104]	; (8011ad8 <pvPortMalloc+0x178>)
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	4a18      	ldr	r2, [pc, #96]	; (8011ad8 <pvPortMalloc+0x178>)
 8011a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a7a:	4b17      	ldr	r3, [pc, #92]	; (8011ad8 <pvPortMalloc+0x178>)
 8011a7c:	681a      	ldr	r2, [r3, #0]
 8011a7e:	4b18      	ldr	r3, [pc, #96]	; (8011ae0 <pvPortMalloc+0x180>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d203      	bcs.n	8011a8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a86:	4b14      	ldr	r3, [pc, #80]	; (8011ad8 <pvPortMalloc+0x178>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4a15      	ldr	r2, [pc, #84]	; (8011ae0 <pvPortMalloc+0x180>)
 8011a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a90:	685a      	ldr	r2, [r3, #4]
 8011a92:	4b10      	ldr	r3, [pc, #64]	; (8011ad4 <pvPortMalloc+0x174>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	431a      	orrs	r2, r3
 8011a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011aa2:	f7ff f86b 	bl	8010b7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	f003 0307 	and.w	r3, r3, #7
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d009      	beq.n	8011ac4 <pvPortMalloc+0x164>
 8011ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab4:	f383 8811 	msr	BASEPRI, r3
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	f3bf 8f4f 	dsb	sy
 8011ac0:	60fb      	str	r3, [r7, #12]
 8011ac2:	e7fe      	b.n	8011ac2 <pvPortMalloc+0x162>
	return pvReturn;
 8011ac4:	69fb      	ldr	r3, [r7, #28]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3728      	adds	r7, #40	; 0x28
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	200045d0 	.word	0x200045d0
 8011ad4:	200045dc 	.word	0x200045dc
 8011ad8:	200045d4 	.word	0x200045d4
 8011adc:	200045c8 	.word	0x200045c8
 8011ae0:	200045d8 	.word	0x200045d8

08011ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b086      	sub	sp, #24
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d046      	beq.n	8011b84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011af6:	2308      	movs	r3, #8
 8011af8:	425b      	negs	r3, r3
 8011afa:	697a      	ldr	r2, [r7, #20]
 8011afc:	4413      	add	r3, r2
 8011afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	685a      	ldr	r2, [r3, #4]
 8011b08:	4b20      	ldr	r3, [pc, #128]	; (8011b8c <vPortFree+0xa8>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	4013      	ands	r3, r2
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d109      	bne.n	8011b26 <vPortFree+0x42>
 8011b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b16:	f383 8811 	msr	BASEPRI, r3
 8011b1a:	f3bf 8f6f 	isb	sy
 8011b1e:	f3bf 8f4f 	dsb	sy
 8011b22:	60fb      	str	r3, [r7, #12]
 8011b24:	e7fe      	b.n	8011b24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d009      	beq.n	8011b42 <vPortFree+0x5e>
 8011b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b32:	f383 8811 	msr	BASEPRI, r3
 8011b36:	f3bf 8f6f 	isb	sy
 8011b3a:	f3bf 8f4f 	dsb	sy
 8011b3e:	60bb      	str	r3, [r7, #8]
 8011b40:	e7fe      	b.n	8011b40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	685a      	ldr	r2, [r3, #4]
 8011b46:	4b11      	ldr	r3, [pc, #68]	; (8011b8c <vPortFree+0xa8>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d019      	beq.n	8011b84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d115      	bne.n	8011b84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	685a      	ldr	r2, [r3, #4]
 8011b5c:	4b0b      	ldr	r3, [pc, #44]	; (8011b8c <vPortFree+0xa8>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	43db      	mvns	r3, r3
 8011b62:	401a      	ands	r2, r3
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b68:	f7fe fffa 	bl	8010b60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	685a      	ldr	r2, [r3, #4]
 8011b70:	4b07      	ldr	r3, [pc, #28]	; (8011b90 <vPortFree+0xac>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4413      	add	r3, r2
 8011b76:	4a06      	ldr	r2, [pc, #24]	; (8011b90 <vPortFree+0xac>)
 8011b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b7a:	6938      	ldr	r0, [r7, #16]
 8011b7c:	f000 f86c 	bl	8011c58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011b80:	f7fe fffc 	bl	8010b7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b84:	bf00      	nop
 8011b86:	3718      	adds	r7, #24
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	200045dc 	.word	0x200045dc
 8011b90:	200045d4 	.word	0x200045d4

08011b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ba0:	4b27      	ldr	r3, [pc, #156]	; (8011c40 <prvHeapInit+0xac>)
 8011ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f003 0307 	and.w	r3, r3, #7
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00c      	beq.n	8011bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	3307      	adds	r3, #7
 8011bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f023 0307 	bic.w	r3, r3, #7
 8011bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	4a1f      	ldr	r2, [pc, #124]	; (8011c40 <prvHeapInit+0xac>)
 8011bc4:	4413      	add	r3, r2
 8011bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011bcc:	4a1d      	ldr	r2, [pc, #116]	; (8011c44 <prvHeapInit+0xb0>)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011bd2:	4b1c      	ldr	r3, [pc, #112]	; (8011c44 <prvHeapInit+0xb0>)
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	4413      	add	r3, r2
 8011bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011be0:	2208      	movs	r2, #8
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	1a9b      	subs	r3, r3, r2
 8011be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f023 0307 	bic.w	r3, r3, #7
 8011bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	4a15      	ldr	r2, [pc, #84]	; (8011c48 <prvHeapInit+0xb4>)
 8011bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011bf6:	4b14      	ldr	r3, [pc, #80]	; (8011c48 <prvHeapInit+0xb4>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bfe:	4b12      	ldr	r3, [pc, #72]	; (8011c48 <prvHeapInit+0xb4>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2200      	movs	r2, #0
 8011c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	68fa      	ldr	r2, [r7, #12]
 8011c0e:	1ad2      	subs	r2, r2, r3
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c14:	4b0c      	ldr	r3, [pc, #48]	; (8011c48 <prvHeapInit+0xb4>)
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	4a0a      	ldr	r2, [pc, #40]	; (8011c4c <prvHeapInit+0xb8>)
 8011c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	4a09      	ldr	r2, [pc, #36]	; (8011c50 <prvHeapInit+0xbc>)
 8011c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c2c:	4b09      	ldr	r3, [pc, #36]	; (8011c54 <prvHeapInit+0xc0>)
 8011c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c32:	601a      	str	r2, [r3, #0]
}
 8011c34:	bf00      	nop
 8011c36:	3714      	adds	r7, #20
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr
 8011c40:	200009c8 	.word	0x200009c8
 8011c44:	200045c8 	.word	0x200045c8
 8011c48:	200045d0 	.word	0x200045d0
 8011c4c:	200045d8 	.word	0x200045d8
 8011c50:	200045d4 	.word	0x200045d4
 8011c54:	200045dc 	.word	0x200045dc

08011c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b085      	sub	sp, #20
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c60:	4b28      	ldr	r3, [pc, #160]	; (8011d04 <prvInsertBlockIntoFreeList+0xac>)
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	e002      	b.n	8011c6c <prvInsertBlockIntoFreeList+0x14>
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	60fb      	str	r3, [r7, #12]
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d8f7      	bhi.n	8011c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	4413      	add	r3, r2
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d108      	bne.n	8011c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	685a      	ldr	r2, [r3, #4]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	441a      	add	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	68ba      	ldr	r2, [r7, #8]
 8011ca4:	441a      	add	r2, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d118      	bne.n	8011ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681a      	ldr	r2, [r3, #0]
 8011cb2:	4b15      	ldr	r3, [pc, #84]	; (8011d08 <prvInsertBlockIntoFreeList+0xb0>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d00d      	beq.n	8011cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	685a      	ldr	r2, [r3, #4]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	441a      	add	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	601a      	str	r2, [r3, #0]
 8011cd4:	e008      	b.n	8011ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011cd6:	4b0c      	ldr	r3, [pc, #48]	; (8011d08 <prvInsertBlockIntoFreeList+0xb0>)
 8011cd8:	681a      	ldr	r2, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	601a      	str	r2, [r3, #0]
 8011cde:	e003      	b.n	8011ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681a      	ldr	r2, [r3, #0]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d002      	beq.n	8011cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cf6:	bf00      	nop
 8011cf8:	3714      	adds	r7, #20
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	200045c8 	.word	0x200045c8
 8011d08:	200045d0 	.word	0x200045d0

08011d0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011d10:	2200      	movs	r2, #0
 8011d12:	4912      	ldr	r1, [pc, #72]	; (8011d5c <MX_USB_DEVICE_Init+0x50>)
 8011d14:	4812      	ldr	r0, [pc, #72]	; (8011d60 <MX_USB_DEVICE_Init+0x54>)
 8011d16:	f7fc fbe5 	bl	800e4e4 <USBD_Init>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d001      	beq.n	8011d24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011d20:	f7f2 fed4 	bl	8004acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011d24:	490f      	ldr	r1, [pc, #60]	; (8011d64 <MX_USB_DEVICE_Init+0x58>)
 8011d26:	480e      	ldr	r0, [pc, #56]	; (8011d60 <MX_USB_DEVICE_Init+0x54>)
 8011d28:	f7fc fc12 	bl	800e550 <USBD_RegisterClass>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011d32:	f7f2 fecb 	bl	8004acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011d36:	490c      	ldr	r1, [pc, #48]	; (8011d68 <MX_USB_DEVICE_Init+0x5c>)
 8011d38:	4809      	ldr	r0, [pc, #36]	; (8011d60 <MX_USB_DEVICE_Init+0x54>)
 8011d3a:	f7fc fb37 	bl	800e3ac <USBD_CDC_RegisterInterface>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d001      	beq.n	8011d48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011d44:	f7f2 fec2 	bl	8004acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011d48:	4805      	ldr	r0, [pc, #20]	; (8011d60 <MX_USB_DEVICE_Init+0x54>)
 8011d4a:	f7fc fc22 	bl	800e592 <USBD_Start>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d001      	beq.n	8011d58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011d54:	f7f2 feba 	bl	8004acc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011d58:	bf00      	nop
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	200003d4 	.word	0x200003d4
 8011d60:	20004f30 	.word	0x20004f30
 8011d64:	200002b0 	.word	0x200002b0
 8011d68:	200003c0 	.word	0x200003c0

08011d6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011d70:	2200      	movs	r2, #0
 8011d72:	4905      	ldr	r1, [pc, #20]	; (8011d88 <CDC_Init_FS+0x1c>)
 8011d74:	4805      	ldr	r0, [pc, #20]	; (8011d8c <CDC_Init_FS+0x20>)
 8011d76:	f7fc fb2e 	bl	800e3d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011d7a:	4905      	ldr	r1, [pc, #20]	; (8011d90 <CDC_Init_FS+0x24>)
 8011d7c:	4803      	ldr	r0, [pc, #12]	; (8011d8c <CDC_Init_FS+0x20>)
 8011d7e:	f7fc fb43 	bl	800e408 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011d82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	20005a00 	.word	0x20005a00
 8011d8c:	20004f30 	.word	0x20004f30
 8011d90:	20005200 	.word	0x20005200

08011d94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011d94:	b480      	push	{r7}
 8011d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011d98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	4603      	mov	r3, r0
 8011dac:	6039      	str	r1, [r7, #0]
 8011dae:	71fb      	strb	r3, [r7, #7]
 8011db0:	4613      	mov	r3, r2
 8011db2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011db4:	79fb      	ldrb	r3, [r7, #7]
 8011db6:	2b23      	cmp	r3, #35	; 0x23
 8011db8:	d85c      	bhi.n	8011e74 <CDC_Control_FS+0xd0>
 8011dba:	a201      	add	r2, pc, #4	; (adr r2, 8011dc0 <CDC_Control_FS+0x1c>)
 8011dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc0:	08011e75 	.word	0x08011e75
 8011dc4:	08011e75 	.word	0x08011e75
 8011dc8:	08011e75 	.word	0x08011e75
 8011dcc:	08011e75 	.word	0x08011e75
 8011dd0:	08011e75 	.word	0x08011e75
 8011dd4:	08011e75 	.word	0x08011e75
 8011dd8:	08011e75 	.word	0x08011e75
 8011ddc:	08011e75 	.word	0x08011e75
 8011de0:	08011e75 	.word	0x08011e75
 8011de4:	08011e75 	.word	0x08011e75
 8011de8:	08011e75 	.word	0x08011e75
 8011dec:	08011e75 	.word	0x08011e75
 8011df0:	08011e75 	.word	0x08011e75
 8011df4:	08011e75 	.word	0x08011e75
 8011df8:	08011e75 	.word	0x08011e75
 8011dfc:	08011e75 	.word	0x08011e75
 8011e00:	08011e75 	.word	0x08011e75
 8011e04:	08011e75 	.word	0x08011e75
 8011e08:	08011e75 	.word	0x08011e75
 8011e0c:	08011e75 	.word	0x08011e75
 8011e10:	08011e75 	.word	0x08011e75
 8011e14:	08011e75 	.word	0x08011e75
 8011e18:	08011e75 	.word	0x08011e75
 8011e1c:	08011e75 	.word	0x08011e75
 8011e20:	08011e75 	.word	0x08011e75
 8011e24:	08011e75 	.word	0x08011e75
 8011e28:	08011e75 	.word	0x08011e75
 8011e2c:	08011e75 	.word	0x08011e75
 8011e30:	08011e75 	.word	0x08011e75
 8011e34:	08011e75 	.word	0x08011e75
 8011e38:	08011e75 	.word	0x08011e75
 8011e3c:	08011e75 	.word	0x08011e75
 8011e40:	08011e51 	.word	0x08011e51
 8011e44:	08011e63 	.word	0x08011e63
 8011e48:	08011e75 	.word	0x08011e75
 8011e4c:	08011e75 	.word	0x08011e75
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8011e50:	4b0c      	ldr	r3, [pc, #48]	; (8011e84 <CDC_Control_FS+0xe0>)
 8011e52:	683a      	ldr	r2, [r7, #0]
 8011e54:	6810      	ldr	r0, [r2, #0]
 8011e56:	6018      	str	r0, [r3, #0]
 8011e58:	8891      	ldrh	r1, [r2, #4]
 8011e5a:	7992      	ldrb	r2, [r2, #6]
 8011e5c:	8099      	strh	r1, [r3, #4]
 8011e5e:	719a      	strb	r2, [r3, #6]
    break;
 8011e60:	e009      	b.n	8011e76 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	4a07      	ldr	r2, [pc, #28]	; (8011e84 <CDC_Control_FS+0xe0>)
 8011e66:	6810      	ldr	r0, [r2, #0]
 8011e68:	6018      	str	r0, [r3, #0]
 8011e6a:	8891      	ldrh	r1, [r2, #4]
 8011e6c:	7992      	ldrb	r2, [r2, #6]
 8011e6e:	8099      	strh	r1, [r3, #4]
 8011e70:	719a      	strb	r2, [r3, #6]
    break;
 8011e72:	e000      	b.n	8011e76 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011e74:	bf00      	nop
  }

  return (USBD_OK);
 8011e76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr
 8011e84:	200003b8 	.word	0x200003b8

08011e88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011e92:	6879      	ldr	r1, [r7, #4]
 8011e94:	4805      	ldr	r0, [pc, #20]	; (8011eac <CDC_Receive_FS+0x24>)
 8011e96:	f7fc fab7 	bl	800e408 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011e9a:	4804      	ldr	r0, [pc, #16]	; (8011eac <CDC_Receive_FS+0x24>)
 8011e9c:	f7fc faf8 	bl	800e490 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011ea0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	20004f30 	.word	0x20004f30

08011eb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011ec0:	4b0d      	ldr	r3, [pc, #52]	; (8011ef8 <CDC_Transmit_FS+0x48>)
 8011ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ec6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d001      	beq.n	8011ed6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	e00b      	b.n	8011eee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011ed6:	887b      	ldrh	r3, [r7, #2]
 8011ed8:	461a      	mov	r2, r3
 8011eda:	6879      	ldr	r1, [r7, #4]
 8011edc:	4806      	ldr	r0, [pc, #24]	; (8011ef8 <CDC_Transmit_FS+0x48>)
 8011ede:	f7fc fa7a 	bl	800e3d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011ee2:	4805      	ldr	r0, [pc, #20]	; (8011ef8 <CDC_Transmit_FS+0x48>)
 8011ee4:	f7fc faa4 	bl	800e430 <USBD_CDC_TransmitPacket>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	20004f30 	.word	0x20004f30

08011efc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b087      	sub	sp, #28
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	4613      	mov	r3, r2
 8011f08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	371c      	adds	r7, #28
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
	...

08011f20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	4603      	mov	r3, r0
 8011f28:	6039      	str	r1, [r7, #0]
 8011f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	2212      	movs	r2, #18
 8011f30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011f32:	4b03      	ldr	r3, [pc, #12]	; (8011f40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	370c      	adds	r7, #12
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr
 8011f40:	200003f4 	.word	0x200003f4

08011f44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	6039      	str	r1, [r7, #0]
 8011f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	2204      	movs	r2, #4
 8011f54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011f56:	4b03      	ldr	r3, [pc, #12]	; (8011f64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	20000414 	.word	0x20000414

08011f68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	4603      	mov	r3, r0
 8011f70:	6039      	str	r1, [r7, #0]
 8011f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d105      	bne.n	8011f86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011f7a:	683a      	ldr	r2, [r7, #0]
 8011f7c:	4907      	ldr	r1, [pc, #28]	; (8011f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8011f7e:	4808      	ldr	r0, [pc, #32]	; (8011fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011f80:	f7fd faff 	bl	800f582 <USBD_GetString>
 8011f84:	e004      	b.n	8011f90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011f86:	683a      	ldr	r2, [r7, #0]
 8011f88:	4904      	ldr	r1, [pc, #16]	; (8011f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8011f8a:	4805      	ldr	r0, [pc, #20]	; (8011fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011f8c:	f7fd faf9 	bl	800f582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f90:	4b02      	ldr	r3, [pc, #8]	; (8011f9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3708      	adds	r7, #8
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	20006200 	.word	0x20006200
 8011fa0:	080180d8 	.word	0x080180d8

08011fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	4603      	mov	r3, r0
 8011fac:	6039      	str	r1, [r7, #0]
 8011fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011fb0:	683a      	ldr	r2, [r7, #0]
 8011fb2:	4904      	ldr	r1, [pc, #16]	; (8011fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011fb4:	4804      	ldr	r0, [pc, #16]	; (8011fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011fb6:	f7fd fae4 	bl	800f582 <USBD_GetString>
  return USBD_StrDesc;
 8011fba:	4b02      	ldr	r3, [pc, #8]	; (8011fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	20006200 	.word	0x20006200
 8011fc8:	080180f0 	.word	0x080180f0

08011fcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	6039      	str	r1, [r7, #0]
 8011fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	221a      	movs	r2, #26
 8011fdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011fde:	f000 f855 	bl	801208c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011fe2:	4b02      	ldr	r3, [pc, #8]	; (8011fec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	20000418 	.word	0x20000418

08011ff0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	6039      	str	r1, [r7, #0]
 8011ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011ffc:	79fb      	ldrb	r3, [r7, #7]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d105      	bne.n	801200e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012002:	683a      	ldr	r2, [r7, #0]
 8012004:	4907      	ldr	r1, [pc, #28]	; (8012024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012006:	4808      	ldr	r0, [pc, #32]	; (8012028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012008:	f7fd fabb 	bl	800f582 <USBD_GetString>
 801200c:	e004      	b.n	8012018 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801200e:	683a      	ldr	r2, [r7, #0]
 8012010:	4904      	ldr	r1, [pc, #16]	; (8012024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012012:	4805      	ldr	r0, [pc, #20]	; (8012028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012014:	f7fd fab5 	bl	800f582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012018:	4b02      	ldr	r3, [pc, #8]	; (8012024 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801201a:	4618      	mov	r0, r3
 801201c:	3708      	adds	r7, #8
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}
 8012022:	bf00      	nop
 8012024:	20006200 	.word	0x20006200
 8012028:	08018104 	.word	0x08018104

0801202c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	4603      	mov	r3, r0
 8012034:	6039      	str	r1, [r7, #0]
 8012036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012038:	79fb      	ldrb	r3, [r7, #7]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d105      	bne.n	801204a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801203e:	683a      	ldr	r2, [r7, #0]
 8012040:	4907      	ldr	r1, [pc, #28]	; (8012060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012042:	4808      	ldr	r0, [pc, #32]	; (8012064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012044:	f7fd fa9d 	bl	800f582 <USBD_GetString>
 8012048:	e004      	b.n	8012054 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801204a:	683a      	ldr	r2, [r7, #0]
 801204c:	4904      	ldr	r1, [pc, #16]	; (8012060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801204e:	4805      	ldr	r0, [pc, #20]	; (8012064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012050:	f7fd fa97 	bl	800f582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012054:	4b02      	ldr	r3, [pc, #8]	; (8012060 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012056:	4618      	mov	r0, r3
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	20006200 	.word	0x20006200
 8012064:	08018110 	.word	0x08018110

08012068 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	4603      	mov	r3, r0
 8012070:	6039      	str	r1, [r7, #0]
 8012072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	220c      	movs	r2, #12
 8012078:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801207a:	4b03      	ldr	r3, [pc, #12]	; (8012088 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801207c:	4618      	mov	r0, r3
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	20000408 	.word	0x20000408

0801208c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012092:	4b0f      	ldr	r3, [pc, #60]	; (80120d0 <Get_SerialNum+0x44>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012098:	4b0e      	ldr	r3, [pc, #56]	; (80120d4 <Get_SerialNum+0x48>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801209e:	4b0e      	ldr	r3, [pc, #56]	; (80120d8 <Get_SerialNum+0x4c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4413      	add	r3, r2
 80120aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d009      	beq.n	80120c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80120b2:	2208      	movs	r2, #8
 80120b4:	4909      	ldr	r1, [pc, #36]	; (80120dc <Get_SerialNum+0x50>)
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f000 f814 	bl	80120e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80120bc:	2204      	movs	r2, #4
 80120be:	4908      	ldr	r1, [pc, #32]	; (80120e0 <Get_SerialNum+0x54>)
 80120c0:	68b8      	ldr	r0, [r7, #8]
 80120c2:	f000 f80f 	bl	80120e4 <IntToUnicode>
  }
}
 80120c6:	bf00      	nop
 80120c8:	3710      	adds	r7, #16
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	1fff7a10 	.word	0x1fff7a10
 80120d4:	1fff7a14 	.word	0x1fff7a14
 80120d8:	1fff7a18 	.word	0x1fff7a18
 80120dc:	2000041a 	.word	0x2000041a
 80120e0:	2000042a 	.word	0x2000042a

080120e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80120e4:	b480      	push	{r7}
 80120e6:	b087      	sub	sp, #28
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	4613      	mov	r3, r2
 80120f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80120f2:	2300      	movs	r3, #0
 80120f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80120f6:	2300      	movs	r3, #0
 80120f8:	75fb      	strb	r3, [r7, #23]
 80120fa:	e027      	b.n	801214c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	0f1b      	lsrs	r3, r3, #28
 8012100:	2b09      	cmp	r3, #9
 8012102:	d80b      	bhi.n	801211c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	0f1b      	lsrs	r3, r3, #28
 8012108:	b2da      	uxtb	r2, r3
 801210a:	7dfb      	ldrb	r3, [r7, #23]
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	4619      	mov	r1, r3
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	440b      	add	r3, r1
 8012114:	3230      	adds	r2, #48	; 0x30
 8012116:	b2d2      	uxtb	r2, r2
 8012118:	701a      	strb	r2, [r3, #0]
 801211a:	e00a      	b.n	8012132 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	0f1b      	lsrs	r3, r3, #28
 8012120:	b2da      	uxtb	r2, r3
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	005b      	lsls	r3, r3, #1
 8012126:	4619      	mov	r1, r3
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	440b      	add	r3, r1
 801212c:	3237      	adds	r2, #55	; 0x37
 801212e:	b2d2      	uxtb	r2, r2
 8012130:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	011b      	lsls	r3, r3, #4
 8012136:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012138:	7dfb      	ldrb	r3, [r7, #23]
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	3301      	adds	r3, #1
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	4413      	add	r3, r2
 8012142:	2200      	movs	r2, #0
 8012144:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012146:	7dfb      	ldrb	r3, [r7, #23]
 8012148:	3301      	adds	r3, #1
 801214a:	75fb      	strb	r3, [r7, #23]
 801214c:	7dfa      	ldrb	r2, [r7, #23]
 801214e:	79fb      	ldrb	r3, [r7, #7]
 8012150:	429a      	cmp	r2, r3
 8012152:	d3d3      	bcc.n	80120fc <IntToUnicode+0x18>
  }
}
 8012154:	bf00      	nop
 8012156:	371c      	adds	r7, #28
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr

08012160 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b08a      	sub	sp, #40	; 0x28
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012168:	f107 0314 	add.w	r3, r7, #20
 801216c:	2200      	movs	r2, #0
 801216e:	601a      	str	r2, [r3, #0]
 8012170:	605a      	str	r2, [r3, #4]
 8012172:	609a      	str	r2, [r3, #8]
 8012174:	60da      	str	r2, [r3, #12]
 8012176:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012180:	d13a      	bne.n	80121f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012182:	2300      	movs	r3, #0
 8012184:	613b      	str	r3, [r7, #16]
 8012186:	4b1e      	ldr	r3, [pc, #120]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 8012188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801218a:	4a1d      	ldr	r2, [pc, #116]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 801218c:	f043 0301 	orr.w	r3, r3, #1
 8012190:	6313      	str	r3, [r2, #48]	; 0x30
 8012192:	4b1b      	ldr	r3, [pc, #108]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 8012194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012196:	f003 0301 	and.w	r3, r3, #1
 801219a:	613b      	str	r3, [r7, #16]
 801219c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801219e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80121a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121a4:	2302      	movs	r3, #2
 80121a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121a8:	2300      	movs	r3, #0
 80121aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80121ac:	2303      	movs	r3, #3
 80121ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80121b0:	230a      	movs	r3, #10
 80121b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80121b4:	f107 0314 	add.w	r3, r7, #20
 80121b8:	4619      	mov	r1, r3
 80121ba:	4812      	ldr	r0, [pc, #72]	; (8012204 <HAL_PCD_MspInit+0xa4>)
 80121bc:	f7f4 fb7a 	bl	80068b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80121c0:	4b0f      	ldr	r3, [pc, #60]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 80121c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121c4:	4a0e      	ldr	r2, [pc, #56]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 80121c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121ca:	6353      	str	r3, [r2, #52]	; 0x34
 80121cc:	2300      	movs	r3, #0
 80121ce:	60fb      	str	r3, [r7, #12]
 80121d0:	4b0b      	ldr	r3, [pc, #44]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 80121d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121d4:	4a0a      	ldr	r2, [pc, #40]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 80121d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80121da:	6453      	str	r3, [r2, #68]	; 0x44
 80121dc:	4b08      	ldr	r3, [pc, #32]	; (8012200 <HAL_PCD_MspInit+0xa0>)
 80121de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121e4:	60fb      	str	r3, [r7, #12]
 80121e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80121e8:	2200      	movs	r2, #0
 80121ea:	2105      	movs	r1, #5
 80121ec:	2043      	movs	r0, #67	; 0x43
 80121ee:	f7f3 ffc9 	bl	8006184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80121f2:	2043      	movs	r0, #67	; 0x43
 80121f4:	f7f3 ffe2 	bl	80061bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80121f8:	bf00      	nop
 80121fa:	3728      	adds	r7, #40	; 0x28
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	40023800 	.word	0x40023800
 8012204:	40020000 	.word	0x40020000

08012208 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801221c:	4619      	mov	r1, r3
 801221e:	4610      	mov	r0, r2
 8012220:	f7fc fa02 	bl	800e628 <USBD_LL_SetupStage>
}
 8012224:	bf00      	nop
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	460b      	mov	r3, r1
 8012236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801223e:	78fa      	ldrb	r2, [r7, #3]
 8012240:	6879      	ldr	r1, [r7, #4]
 8012242:	4613      	mov	r3, r2
 8012244:	00db      	lsls	r3, r3, #3
 8012246:	1a9b      	subs	r3, r3, r2
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	440b      	add	r3, r1
 801224c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	78fb      	ldrb	r3, [r7, #3]
 8012254:	4619      	mov	r1, r3
 8012256:	f7fc fa3a 	bl	800e6ce <USBD_LL_DataOutStage>
}
 801225a:	bf00      	nop
 801225c:	3708      	adds	r7, #8
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b082      	sub	sp, #8
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
 801226a:	460b      	mov	r3, r1
 801226c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012274:	78fa      	ldrb	r2, [r7, #3]
 8012276:	6879      	ldr	r1, [r7, #4]
 8012278:	4613      	mov	r3, r2
 801227a:	00db      	lsls	r3, r3, #3
 801227c:	1a9b      	subs	r3, r3, r2
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	440b      	add	r3, r1
 8012282:	3348      	adds	r3, #72	; 0x48
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	78fb      	ldrb	r3, [r7, #3]
 8012288:	4619      	mov	r1, r3
 801228a:	f7fc fa83 	bl	800e794 <USBD_LL_DataInStage>
}
 801228e:	bf00      	nop
 8012290:	3708      	adds	r7, #8
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012296:	b580      	push	{r7, lr}
 8012298:	b082      	sub	sp, #8
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7fc fb87 	bl	800e9b8 <USBD_LL_SOF>
}
 80122aa:	bf00      	nop
 80122ac:	3708      	adds	r7, #8
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}

080122b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122b2:	b580      	push	{r7, lr}
 80122b4:	b084      	sub	sp, #16
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80122ba:	2301      	movs	r3, #1
 80122bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d102      	bne.n	80122cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80122c6:	2300      	movs	r3, #0
 80122c8:	73fb      	strb	r3, [r7, #15]
 80122ca:	e008      	b.n	80122de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	d102      	bne.n	80122da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80122d4:	2301      	movs	r3, #1
 80122d6:	73fb      	strb	r3, [r7, #15]
 80122d8:	e001      	b.n	80122de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80122da:	f7f2 fbf7 	bl	8004acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122e4:	7bfa      	ldrb	r2, [r7, #15]
 80122e6:	4611      	mov	r1, r2
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7fc fb2a 	bl	800e942 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fc fae3 	bl	800e8c0 <USBD_LL_Reset>
}
 80122fa:	bf00      	nop
 80122fc:	3710      	adds	r7, #16
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
	...

08012304 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012312:	4618      	mov	r0, r3
 8012314:	f7fc fb25 	bl	800e962 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	6812      	ldr	r2, [r2, #0]
 8012326:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801232a:	f043 0301 	orr.w	r3, r3, #1
 801232e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6a1b      	ldr	r3, [r3, #32]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d005      	beq.n	8012344 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012338:	4b04      	ldr	r3, [pc, #16]	; (801234c <HAL_PCD_SuspendCallback+0x48>)
 801233a:	691b      	ldr	r3, [r3, #16]
 801233c:	4a03      	ldr	r2, [pc, #12]	; (801234c <HAL_PCD_SuspendCallback+0x48>)
 801233e:	f043 0306 	orr.w	r3, r3, #6
 8012342:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012344:	bf00      	nop
 8012346:	3708      	adds	r7, #8
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	e000ed00 	.word	0xe000ed00

08012350 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801235e:	4618      	mov	r0, r3
 8012360:	f7fc fb14 	bl	800e98c <USBD_LL_Resume>
}
 8012364:	bf00      	nop
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	460b      	mov	r3, r1
 8012376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801237e:	78fa      	ldrb	r2, [r7, #3]
 8012380:	4611      	mov	r1, r2
 8012382:	4618      	mov	r0, r3
 8012384:	f7fc fb3f 	bl	800ea06 <USBD_LL_IsoOUTIncomplete>
}
 8012388:	bf00      	nop
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	460b      	mov	r3, r1
 801239a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123a2:	78fa      	ldrb	r2, [r7, #3]
 80123a4:	4611      	mov	r1, r2
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fc fb20 	bl	800e9ec <USBD_LL_IsoINIncomplete>
}
 80123ac:	bf00      	nop
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7fc fb2c 	bl	800ea20 <USBD_LL_DevConnected>
}
 80123c8:	bf00      	nop
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fc fb29 	bl	800ea36 <USBD_LL_DevDisconnected>
}
 80123e4:	bf00      	nop
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d13c      	bne.n	8012476 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80123fc:	4a20      	ldr	r2, [pc, #128]	; (8012480 <USBD_LL_Init+0x94>)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	4a1e      	ldr	r2, [pc, #120]	; (8012480 <USBD_LL_Init+0x94>)
 8012408:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801240c:	4b1c      	ldr	r3, [pc, #112]	; (8012480 <USBD_LL_Init+0x94>)
 801240e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012412:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012414:	4b1a      	ldr	r3, [pc, #104]	; (8012480 <USBD_LL_Init+0x94>)
 8012416:	2206      	movs	r2, #6
 8012418:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801241a:	4b19      	ldr	r3, [pc, #100]	; (8012480 <USBD_LL_Init+0x94>)
 801241c:	2202      	movs	r2, #2
 801241e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012420:	4b17      	ldr	r3, [pc, #92]	; (8012480 <USBD_LL_Init+0x94>)
 8012422:	2200      	movs	r2, #0
 8012424:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012426:	4b16      	ldr	r3, [pc, #88]	; (8012480 <USBD_LL_Init+0x94>)
 8012428:	2202      	movs	r2, #2
 801242a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801242c:	4b14      	ldr	r3, [pc, #80]	; (8012480 <USBD_LL_Init+0x94>)
 801242e:	2200      	movs	r2, #0
 8012430:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012432:	4b13      	ldr	r3, [pc, #76]	; (8012480 <USBD_LL_Init+0x94>)
 8012434:	2200      	movs	r2, #0
 8012436:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012438:	4b11      	ldr	r3, [pc, #68]	; (8012480 <USBD_LL_Init+0x94>)
 801243a:	2200      	movs	r2, #0
 801243c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801243e:	4b10      	ldr	r3, [pc, #64]	; (8012480 <USBD_LL_Init+0x94>)
 8012440:	2200      	movs	r2, #0
 8012442:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012444:	4b0e      	ldr	r3, [pc, #56]	; (8012480 <USBD_LL_Init+0x94>)
 8012446:	2200      	movs	r2, #0
 8012448:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801244a:	480d      	ldr	r0, [pc, #52]	; (8012480 <USBD_LL_Init+0x94>)
 801244c:	f7f5 fbc1 	bl	8007bd2 <HAL_PCD_Init>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d001      	beq.n	801245a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012456:	f7f2 fb39 	bl	8004acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801245a:	2180      	movs	r1, #128	; 0x80
 801245c:	4808      	ldr	r0, [pc, #32]	; (8012480 <USBD_LL_Init+0x94>)
 801245e:	f7f6 fd52 	bl	8008f06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012462:	2240      	movs	r2, #64	; 0x40
 8012464:	2100      	movs	r1, #0
 8012466:	4806      	ldr	r0, [pc, #24]	; (8012480 <USBD_LL_Init+0x94>)
 8012468:	f7f6 fd06 	bl	8008e78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801246c:	2280      	movs	r2, #128	; 0x80
 801246e:	2101      	movs	r1, #1
 8012470:	4803      	ldr	r0, [pc, #12]	; (8012480 <USBD_LL_Init+0x94>)
 8012472:	f7f6 fd01 	bl	8008e78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}
 8012480:	20006400 	.word	0x20006400

08012484 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b084      	sub	sp, #16
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801248c:	2300      	movs	r3, #0
 801248e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012490:	2300      	movs	r3, #0
 8012492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801249a:	4618      	mov	r0, r3
 801249c:	f7f5 fcbd 	bl	8007e1a <HAL_PCD_Start>
 80124a0:	4603      	mov	r3, r0
 80124a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 f978 	bl	801279c <USBD_Get_USB_Status>
 80124ac:	4603      	mov	r3, r0
 80124ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b084      	sub	sp, #16
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
 80124c2:	4608      	mov	r0, r1
 80124c4:	4611      	mov	r1, r2
 80124c6:	461a      	mov	r2, r3
 80124c8:	4603      	mov	r3, r0
 80124ca:	70fb      	strb	r3, [r7, #3]
 80124cc:	460b      	mov	r3, r1
 80124ce:	70bb      	strb	r3, [r7, #2]
 80124d0:	4613      	mov	r3, r2
 80124d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124d4:	2300      	movs	r3, #0
 80124d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124d8:	2300      	movs	r3, #0
 80124da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80124e2:	78bb      	ldrb	r3, [r7, #2]
 80124e4:	883a      	ldrh	r2, [r7, #0]
 80124e6:	78f9      	ldrb	r1, [r7, #3]
 80124e8:	f7f6 f8ce 	bl	8008688 <HAL_PCD_EP_Open>
 80124ec:	4603      	mov	r3, r0
 80124ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124f0:	7bfb      	ldrb	r3, [r7, #15]
 80124f2:	4618      	mov	r0, r3
 80124f4:	f000 f952 	bl	801279c <USBD_Get_USB_Status>
 80124f8:	4603      	mov	r3, r0
 80124fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3710      	adds	r7, #16
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b084      	sub	sp, #16
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
 801250e:	460b      	mov	r3, r1
 8012510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012512:	2300      	movs	r3, #0
 8012514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012516:	2300      	movs	r3, #0
 8012518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012520:	78fa      	ldrb	r2, [r7, #3]
 8012522:	4611      	mov	r1, r2
 8012524:	4618      	mov	r0, r3
 8012526:	f7f6 f917 	bl	8008758 <HAL_PCD_EP_Close>
 801252a:	4603      	mov	r3, r0
 801252c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801252e:	7bfb      	ldrb	r3, [r7, #15]
 8012530:	4618      	mov	r0, r3
 8012532:	f000 f933 	bl	801279c <USBD_Get_USB_Status>
 8012536:	4603      	mov	r3, r0
 8012538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801253a:	7bbb      	ldrb	r3, [r7, #14]
}
 801253c:	4618      	mov	r0, r3
 801253e:	3710      	adds	r7, #16
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012550:	2300      	movs	r3, #0
 8012552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012554:	2300      	movs	r3, #0
 8012556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801255e:	78fa      	ldrb	r2, [r7, #3]
 8012560:	4611      	mov	r1, r2
 8012562:	4618      	mov	r0, r3
 8012564:	f7f6 f9ef 	bl	8008946 <HAL_PCD_EP_SetStall>
 8012568:	4603      	mov	r3, r0
 801256a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801256c:	7bfb      	ldrb	r3, [r7, #15]
 801256e:	4618      	mov	r0, r3
 8012570:	f000 f914 	bl	801279c <USBD_Get_USB_Status>
 8012574:	4603      	mov	r3, r0
 8012576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012578:	7bbb      	ldrb	r3, [r7, #14]
}
 801257a:	4618      	mov	r0, r3
 801257c:	3710      	adds	r7, #16
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}

08012582 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012582:	b580      	push	{r7, lr}
 8012584:	b084      	sub	sp, #16
 8012586:	af00      	add	r7, sp, #0
 8012588:	6078      	str	r0, [r7, #4]
 801258a:	460b      	mov	r3, r1
 801258c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801258e:	2300      	movs	r3, #0
 8012590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012592:	2300      	movs	r3, #0
 8012594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801259c:	78fa      	ldrb	r2, [r7, #3]
 801259e:	4611      	mov	r1, r2
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7f6 fa34 	bl	8008a0e <HAL_PCD_EP_ClrStall>
 80125a6:	4603      	mov	r3, r0
 80125a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125aa:	7bfb      	ldrb	r3, [r7, #15]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 f8f5 	bl	801279c <USBD_Get_USB_Status>
 80125b2:	4603      	mov	r3, r0
 80125b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	460b      	mov	r3, r1
 80125ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80125d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80125d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	da0b      	bge.n	80125f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80125dc:	78fb      	ldrb	r3, [r7, #3]
 80125de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125e2:	68f9      	ldr	r1, [r7, #12]
 80125e4:	4613      	mov	r3, r2
 80125e6:	00db      	lsls	r3, r3, #3
 80125e8:	1a9b      	subs	r3, r3, r2
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	440b      	add	r3, r1
 80125ee:	333e      	adds	r3, #62	; 0x3e
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	e00b      	b.n	801260c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80125f4:	78fb      	ldrb	r3, [r7, #3]
 80125f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125fa:	68f9      	ldr	r1, [r7, #12]
 80125fc:	4613      	mov	r3, r2
 80125fe:	00db      	lsls	r3, r3, #3
 8012600:	1a9b      	subs	r3, r3, r2
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	440b      	add	r3, r1
 8012606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801260a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801260c:	4618      	mov	r0, r3
 801260e:	3714      	adds	r7, #20
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	460b      	mov	r3, r1
 8012622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012624:	2300      	movs	r3, #0
 8012626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012632:	78fa      	ldrb	r2, [r7, #3]
 8012634:	4611      	mov	r1, r2
 8012636:	4618      	mov	r0, r3
 8012638:	f7f6 f801 	bl	800863e <HAL_PCD_SetAddress>
 801263c:	4603      	mov	r3, r0
 801263e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012640:	7bfb      	ldrb	r3, [r7, #15]
 8012642:	4618      	mov	r0, r3
 8012644:	f000 f8aa 	bl	801279c <USBD_Get_USB_Status>
 8012648:	4603      	mov	r3, r0
 801264a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801264c:	7bbb      	ldrb	r3, [r7, #14]
}
 801264e:	4618      	mov	r0, r3
 8012650:	3710      	adds	r7, #16
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012656:	b580      	push	{r7, lr}
 8012658:	b086      	sub	sp, #24
 801265a:	af00      	add	r7, sp, #0
 801265c:	60f8      	str	r0, [r7, #12]
 801265e:	607a      	str	r2, [r7, #4]
 8012660:	603b      	str	r3, [r7, #0]
 8012662:	460b      	mov	r3, r1
 8012664:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012666:	2300      	movs	r3, #0
 8012668:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801266a:	2300      	movs	r3, #0
 801266c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012674:	7af9      	ldrb	r1, [r7, #11]
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	f7f6 f91a 	bl	80088b2 <HAL_PCD_EP_Transmit>
 801267e:	4603      	mov	r3, r0
 8012680:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	4618      	mov	r0, r3
 8012686:	f000 f889 	bl	801279c <USBD_Get_USB_Status>
 801268a:	4603      	mov	r3, r0
 801268c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801268e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012690:	4618      	mov	r0, r3
 8012692:	3718      	adds	r7, #24
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b086      	sub	sp, #24
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	607a      	str	r2, [r7, #4]
 80126a2:	603b      	str	r3, [r7, #0]
 80126a4:	460b      	mov	r3, r1
 80126a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126a8:	2300      	movs	r3, #0
 80126aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126ac:	2300      	movs	r3, #0
 80126ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80126b6:	7af9      	ldrb	r1, [r7, #11]
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	f7f6 f896 	bl	80087ec <HAL_PCD_EP_Receive>
 80126c0:	4603      	mov	r3, r0
 80126c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126c4:	7dfb      	ldrb	r3, [r7, #23]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f000 f868 	bl	801279c <USBD_Get_USB_Status>
 80126cc:	4603      	mov	r3, r0
 80126ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80126d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3718      	adds	r7, #24
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b082      	sub	sp, #8
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
 80126e2:	460b      	mov	r3, r1
 80126e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80126ec:	78fa      	ldrb	r2, [r7, #3]
 80126ee:	4611      	mov	r1, r2
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7f6 f8c6 	bl	8008882 <HAL_PCD_EP_GetRxCount>
 80126f6:	4603      	mov	r3, r0
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	460b      	mov	r3, r1
 801270a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801270c:	78fb      	ldrb	r3, [r7, #3]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d002      	beq.n	8012718 <HAL_PCDEx_LPM_Callback+0x18>
 8012712:	2b01      	cmp	r3, #1
 8012714:	d01f      	beq.n	8012756 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012716:	e03b      	b.n	8012790 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6a1b      	ldr	r3, [r3, #32]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d007      	beq.n	8012730 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8012720:	f7f1 f890 	bl	8003844 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012724:	4b1c      	ldr	r3, [pc, #112]	; (8012798 <HAL_PCDEx_LPM_Callback+0x98>)
 8012726:	691b      	ldr	r3, [r3, #16]
 8012728:	4a1b      	ldr	r2, [pc, #108]	; (8012798 <HAL_PCDEx_LPM_Callback+0x98>)
 801272a:	f023 0306 	bic.w	r3, r3, #6
 801272e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	6812      	ldr	r2, [r2, #0]
 801273e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012742:	f023 0301 	bic.w	r3, r3, #1
 8012746:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801274e:	4618      	mov	r0, r3
 8012750:	f7fc f91c 	bl	800e98c <USBD_LL_Resume>
    break;
 8012754:	e01c      	b.n	8012790 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	6812      	ldr	r2, [r2, #0]
 8012764:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012768:	f043 0301 	orr.w	r3, r3, #1
 801276c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012774:	4618      	mov	r0, r3
 8012776:	f7fc f8f4 	bl	800e962 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6a1b      	ldr	r3, [r3, #32]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d005      	beq.n	801278e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012782:	4b05      	ldr	r3, [pc, #20]	; (8012798 <HAL_PCDEx_LPM_Callback+0x98>)
 8012784:	691b      	ldr	r3, [r3, #16]
 8012786:	4a04      	ldr	r2, [pc, #16]	; (8012798 <HAL_PCDEx_LPM_Callback+0x98>)
 8012788:	f043 0306 	orr.w	r3, r3, #6
 801278c:	6113      	str	r3, [r2, #16]
    break;
 801278e:	bf00      	nop
}
 8012790:	bf00      	nop
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	e000ed00 	.word	0xe000ed00

0801279c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801279c:	b480      	push	{r7}
 801279e:	b085      	sub	sp, #20
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	4603      	mov	r3, r0
 80127a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127a6:	2300      	movs	r3, #0
 80127a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80127aa:	79fb      	ldrb	r3, [r7, #7]
 80127ac:	2b03      	cmp	r3, #3
 80127ae:	d817      	bhi.n	80127e0 <USBD_Get_USB_Status+0x44>
 80127b0:	a201      	add	r2, pc, #4	; (adr r2, 80127b8 <USBD_Get_USB_Status+0x1c>)
 80127b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127b6:	bf00      	nop
 80127b8:	080127c9 	.word	0x080127c9
 80127bc:	080127cf 	.word	0x080127cf
 80127c0:	080127d5 	.word	0x080127d5
 80127c4:	080127db 	.word	0x080127db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80127c8:	2300      	movs	r3, #0
 80127ca:	73fb      	strb	r3, [r7, #15]
    break;
 80127cc:	e00b      	b.n	80127e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80127ce:	2303      	movs	r3, #3
 80127d0:	73fb      	strb	r3, [r7, #15]
    break;
 80127d2:	e008      	b.n	80127e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80127d4:	2301      	movs	r3, #1
 80127d6:	73fb      	strb	r3, [r7, #15]
    break;
 80127d8:	e005      	b.n	80127e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80127da:	2303      	movs	r3, #3
 80127dc:	73fb      	strb	r3, [r7, #15]
    break;
 80127de:	e002      	b.n	80127e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80127e0:	2303      	movs	r3, #3
 80127e2:	73fb      	strb	r3, [r7, #15]
    break;
 80127e4:	bf00      	nop
  }
  return usb_status;
 80127e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3714      	adds	r7, #20
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <__assert_func>:
 80127f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127f6:	461c      	mov	r4, r3
 80127f8:	4b09      	ldr	r3, [pc, #36]	; (8012820 <__assert_func+0x2c>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4605      	mov	r5, r0
 80127fe:	68d8      	ldr	r0, [r3, #12]
 8012800:	b152      	cbz	r2, 8012818 <__assert_func+0x24>
 8012802:	4b08      	ldr	r3, [pc, #32]	; (8012824 <__assert_func+0x30>)
 8012804:	9100      	str	r1, [sp, #0]
 8012806:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801280a:	4907      	ldr	r1, [pc, #28]	; (8012828 <__assert_func+0x34>)
 801280c:	462b      	mov	r3, r5
 801280e:	4622      	mov	r2, r4
 8012810:	f000 f814 	bl	801283c <fiprintf>
 8012814:	f001 f83a 	bl	801388c <abort>
 8012818:	4b04      	ldr	r3, [pc, #16]	; (801282c <__assert_func+0x38>)
 801281a:	461a      	mov	r2, r3
 801281c:	e7f2      	b.n	8012804 <__assert_func+0x10>
 801281e:	bf00      	nop
 8012820:	20000434 	.word	0x20000434
 8012824:	080181c0 	.word	0x080181c0
 8012828:	080181cd 	.word	0x080181cd
 801282c:	080181fb 	.word	0x080181fb

08012830 <__errno>:
 8012830:	4b01      	ldr	r3, [pc, #4]	; (8012838 <__errno+0x8>)
 8012832:	6818      	ldr	r0, [r3, #0]
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	20000434 	.word	0x20000434

0801283c <fiprintf>:
 801283c:	b40e      	push	{r1, r2, r3}
 801283e:	b503      	push	{r0, r1, lr}
 8012840:	4601      	mov	r1, r0
 8012842:	ab03      	add	r3, sp, #12
 8012844:	4805      	ldr	r0, [pc, #20]	; (801285c <fiprintf+0x20>)
 8012846:	f853 2b04 	ldr.w	r2, [r3], #4
 801284a:	6800      	ldr	r0, [r0, #0]
 801284c:	9301      	str	r3, [sp, #4]
 801284e:	f000 f921 	bl	8012a94 <_vfiprintf_r>
 8012852:	b002      	add	sp, #8
 8012854:	f85d eb04 	ldr.w	lr, [sp], #4
 8012858:	b003      	add	sp, #12
 801285a:	4770      	bx	lr
 801285c:	20000434 	.word	0x20000434

08012860 <__libc_init_array>:
 8012860:	b570      	push	{r4, r5, r6, lr}
 8012862:	4e0d      	ldr	r6, [pc, #52]	; (8012898 <__libc_init_array+0x38>)
 8012864:	4c0d      	ldr	r4, [pc, #52]	; (801289c <__libc_init_array+0x3c>)
 8012866:	1ba4      	subs	r4, r4, r6
 8012868:	10a4      	asrs	r4, r4, #2
 801286a:	2500      	movs	r5, #0
 801286c:	42a5      	cmp	r5, r4
 801286e:	d109      	bne.n	8012884 <__libc_init_array+0x24>
 8012870:	4e0b      	ldr	r6, [pc, #44]	; (80128a0 <__libc_init_array+0x40>)
 8012872:	4c0c      	ldr	r4, [pc, #48]	; (80128a4 <__libc_init_array+0x44>)
 8012874:	f005 f920 	bl	8017ab8 <_init>
 8012878:	1ba4      	subs	r4, r4, r6
 801287a:	10a4      	asrs	r4, r4, #2
 801287c:	2500      	movs	r5, #0
 801287e:	42a5      	cmp	r5, r4
 8012880:	d105      	bne.n	801288e <__libc_init_array+0x2e>
 8012882:	bd70      	pop	{r4, r5, r6, pc}
 8012884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012888:	4798      	blx	r3
 801288a:	3501      	adds	r5, #1
 801288c:	e7ee      	b.n	801286c <__libc_init_array+0xc>
 801288e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012892:	4798      	blx	r3
 8012894:	3501      	adds	r5, #1
 8012896:	e7f2      	b.n	801287e <__libc_init_array+0x1e>
 8012898:	08018710 	.word	0x08018710
 801289c:	08018710 	.word	0x08018710
 80128a0:	08018710 	.word	0x08018710
 80128a4:	08018714 	.word	0x08018714

080128a8 <malloc>:
 80128a8:	4b02      	ldr	r3, [pc, #8]	; (80128b4 <malloc+0xc>)
 80128aa:	4601      	mov	r1, r0
 80128ac:	6818      	ldr	r0, [r3, #0]
 80128ae:	f000 b86d 	b.w	801298c <_malloc_r>
 80128b2:	bf00      	nop
 80128b4:	20000434 	.word	0x20000434

080128b8 <free>:
 80128b8:	4b02      	ldr	r3, [pc, #8]	; (80128c4 <free+0xc>)
 80128ba:	4601      	mov	r1, r0
 80128bc:	6818      	ldr	r0, [r3, #0]
 80128be:	f000 b817 	b.w	80128f0 <_free_r>
 80128c2:	bf00      	nop
 80128c4:	20000434 	.word	0x20000434

080128c8 <memcpy>:
 80128c8:	b510      	push	{r4, lr}
 80128ca:	1e43      	subs	r3, r0, #1
 80128cc:	440a      	add	r2, r1
 80128ce:	4291      	cmp	r1, r2
 80128d0:	d100      	bne.n	80128d4 <memcpy+0xc>
 80128d2:	bd10      	pop	{r4, pc}
 80128d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128dc:	e7f7      	b.n	80128ce <memcpy+0x6>

080128de <memset>:
 80128de:	4402      	add	r2, r0
 80128e0:	4603      	mov	r3, r0
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d100      	bne.n	80128e8 <memset+0xa>
 80128e6:	4770      	bx	lr
 80128e8:	f803 1b01 	strb.w	r1, [r3], #1
 80128ec:	e7f9      	b.n	80128e2 <memset+0x4>
	...

080128f0 <_free_r>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	4605      	mov	r5, r0
 80128f4:	2900      	cmp	r1, #0
 80128f6:	d045      	beq.n	8012984 <_free_r+0x94>
 80128f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128fc:	1f0c      	subs	r4, r1, #4
 80128fe:	2b00      	cmp	r3, #0
 8012900:	bfb8      	it	lt
 8012902:	18e4      	addlt	r4, r4, r3
 8012904:	f002 f837 	bl	8014976 <__malloc_lock>
 8012908:	4a1f      	ldr	r2, [pc, #124]	; (8012988 <_free_r+0x98>)
 801290a:	6813      	ldr	r3, [r2, #0]
 801290c:	4610      	mov	r0, r2
 801290e:	b933      	cbnz	r3, 801291e <_free_r+0x2e>
 8012910:	6063      	str	r3, [r4, #4]
 8012912:	6014      	str	r4, [r2, #0]
 8012914:	4628      	mov	r0, r5
 8012916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801291a:	f002 b82d 	b.w	8014978 <__malloc_unlock>
 801291e:	42a3      	cmp	r3, r4
 8012920:	d90c      	bls.n	801293c <_free_r+0x4c>
 8012922:	6821      	ldr	r1, [r4, #0]
 8012924:	1862      	adds	r2, r4, r1
 8012926:	4293      	cmp	r3, r2
 8012928:	bf04      	itt	eq
 801292a:	681a      	ldreq	r2, [r3, #0]
 801292c:	685b      	ldreq	r3, [r3, #4]
 801292e:	6063      	str	r3, [r4, #4]
 8012930:	bf04      	itt	eq
 8012932:	1852      	addeq	r2, r2, r1
 8012934:	6022      	streq	r2, [r4, #0]
 8012936:	6004      	str	r4, [r0, #0]
 8012938:	e7ec      	b.n	8012914 <_free_r+0x24>
 801293a:	4613      	mov	r3, r2
 801293c:	685a      	ldr	r2, [r3, #4]
 801293e:	b10a      	cbz	r2, 8012944 <_free_r+0x54>
 8012940:	42a2      	cmp	r2, r4
 8012942:	d9fa      	bls.n	801293a <_free_r+0x4a>
 8012944:	6819      	ldr	r1, [r3, #0]
 8012946:	1858      	adds	r0, r3, r1
 8012948:	42a0      	cmp	r0, r4
 801294a:	d10b      	bne.n	8012964 <_free_r+0x74>
 801294c:	6820      	ldr	r0, [r4, #0]
 801294e:	4401      	add	r1, r0
 8012950:	1858      	adds	r0, r3, r1
 8012952:	4282      	cmp	r2, r0
 8012954:	6019      	str	r1, [r3, #0]
 8012956:	d1dd      	bne.n	8012914 <_free_r+0x24>
 8012958:	6810      	ldr	r0, [r2, #0]
 801295a:	6852      	ldr	r2, [r2, #4]
 801295c:	605a      	str	r2, [r3, #4]
 801295e:	4401      	add	r1, r0
 8012960:	6019      	str	r1, [r3, #0]
 8012962:	e7d7      	b.n	8012914 <_free_r+0x24>
 8012964:	d902      	bls.n	801296c <_free_r+0x7c>
 8012966:	230c      	movs	r3, #12
 8012968:	602b      	str	r3, [r5, #0]
 801296a:	e7d3      	b.n	8012914 <_free_r+0x24>
 801296c:	6820      	ldr	r0, [r4, #0]
 801296e:	1821      	adds	r1, r4, r0
 8012970:	428a      	cmp	r2, r1
 8012972:	bf04      	itt	eq
 8012974:	6811      	ldreq	r1, [r2, #0]
 8012976:	6852      	ldreq	r2, [r2, #4]
 8012978:	6062      	str	r2, [r4, #4]
 801297a:	bf04      	itt	eq
 801297c:	1809      	addeq	r1, r1, r0
 801297e:	6021      	streq	r1, [r4, #0]
 8012980:	605c      	str	r4, [r3, #4]
 8012982:	e7c7      	b.n	8012914 <_free_r+0x24>
 8012984:	bd38      	pop	{r3, r4, r5, pc}
 8012986:	bf00      	nop
 8012988:	200045e0 	.word	0x200045e0

0801298c <_malloc_r>:
 801298c:	b570      	push	{r4, r5, r6, lr}
 801298e:	1ccd      	adds	r5, r1, #3
 8012990:	f025 0503 	bic.w	r5, r5, #3
 8012994:	3508      	adds	r5, #8
 8012996:	2d0c      	cmp	r5, #12
 8012998:	bf38      	it	cc
 801299a:	250c      	movcc	r5, #12
 801299c:	2d00      	cmp	r5, #0
 801299e:	4606      	mov	r6, r0
 80129a0:	db01      	blt.n	80129a6 <_malloc_r+0x1a>
 80129a2:	42a9      	cmp	r1, r5
 80129a4:	d903      	bls.n	80129ae <_malloc_r+0x22>
 80129a6:	230c      	movs	r3, #12
 80129a8:	6033      	str	r3, [r6, #0]
 80129aa:	2000      	movs	r0, #0
 80129ac:	bd70      	pop	{r4, r5, r6, pc}
 80129ae:	f001 ffe2 	bl	8014976 <__malloc_lock>
 80129b2:	4a21      	ldr	r2, [pc, #132]	; (8012a38 <_malloc_r+0xac>)
 80129b4:	6814      	ldr	r4, [r2, #0]
 80129b6:	4621      	mov	r1, r4
 80129b8:	b991      	cbnz	r1, 80129e0 <_malloc_r+0x54>
 80129ba:	4c20      	ldr	r4, [pc, #128]	; (8012a3c <_malloc_r+0xb0>)
 80129bc:	6823      	ldr	r3, [r4, #0]
 80129be:	b91b      	cbnz	r3, 80129c8 <_malloc_r+0x3c>
 80129c0:	4630      	mov	r0, r6
 80129c2:	f000 fde9 	bl	8013598 <_sbrk_r>
 80129c6:	6020      	str	r0, [r4, #0]
 80129c8:	4629      	mov	r1, r5
 80129ca:	4630      	mov	r0, r6
 80129cc:	f000 fde4 	bl	8013598 <_sbrk_r>
 80129d0:	1c43      	adds	r3, r0, #1
 80129d2:	d124      	bne.n	8012a1e <_malloc_r+0x92>
 80129d4:	230c      	movs	r3, #12
 80129d6:	6033      	str	r3, [r6, #0]
 80129d8:	4630      	mov	r0, r6
 80129da:	f001 ffcd 	bl	8014978 <__malloc_unlock>
 80129de:	e7e4      	b.n	80129aa <_malloc_r+0x1e>
 80129e0:	680b      	ldr	r3, [r1, #0]
 80129e2:	1b5b      	subs	r3, r3, r5
 80129e4:	d418      	bmi.n	8012a18 <_malloc_r+0x8c>
 80129e6:	2b0b      	cmp	r3, #11
 80129e8:	d90f      	bls.n	8012a0a <_malloc_r+0x7e>
 80129ea:	600b      	str	r3, [r1, #0]
 80129ec:	50cd      	str	r5, [r1, r3]
 80129ee:	18cc      	adds	r4, r1, r3
 80129f0:	4630      	mov	r0, r6
 80129f2:	f001 ffc1 	bl	8014978 <__malloc_unlock>
 80129f6:	f104 000b 	add.w	r0, r4, #11
 80129fa:	1d23      	adds	r3, r4, #4
 80129fc:	f020 0007 	bic.w	r0, r0, #7
 8012a00:	1ac3      	subs	r3, r0, r3
 8012a02:	d0d3      	beq.n	80129ac <_malloc_r+0x20>
 8012a04:	425a      	negs	r2, r3
 8012a06:	50e2      	str	r2, [r4, r3]
 8012a08:	e7d0      	b.n	80129ac <_malloc_r+0x20>
 8012a0a:	428c      	cmp	r4, r1
 8012a0c:	684b      	ldr	r3, [r1, #4]
 8012a0e:	bf16      	itet	ne
 8012a10:	6063      	strne	r3, [r4, #4]
 8012a12:	6013      	streq	r3, [r2, #0]
 8012a14:	460c      	movne	r4, r1
 8012a16:	e7eb      	b.n	80129f0 <_malloc_r+0x64>
 8012a18:	460c      	mov	r4, r1
 8012a1a:	6849      	ldr	r1, [r1, #4]
 8012a1c:	e7cc      	b.n	80129b8 <_malloc_r+0x2c>
 8012a1e:	1cc4      	adds	r4, r0, #3
 8012a20:	f024 0403 	bic.w	r4, r4, #3
 8012a24:	42a0      	cmp	r0, r4
 8012a26:	d005      	beq.n	8012a34 <_malloc_r+0xa8>
 8012a28:	1a21      	subs	r1, r4, r0
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	f000 fdb4 	bl	8013598 <_sbrk_r>
 8012a30:	3001      	adds	r0, #1
 8012a32:	d0cf      	beq.n	80129d4 <_malloc_r+0x48>
 8012a34:	6025      	str	r5, [r4, #0]
 8012a36:	e7db      	b.n	80129f0 <_malloc_r+0x64>
 8012a38:	200045e0 	.word	0x200045e0
 8012a3c:	200045e4 	.word	0x200045e4

08012a40 <__sfputc_r>:
 8012a40:	6893      	ldr	r3, [r2, #8]
 8012a42:	3b01      	subs	r3, #1
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	b410      	push	{r4}
 8012a48:	6093      	str	r3, [r2, #8]
 8012a4a:	da08      	bge.n	8012a5e <__sfputc_r+0x1e>
 8012a4c:	6994      	ldr	r4, [r2, #24]
 8012a4e:	42a3      	cmp	r3, r4
 8012a50:	db01      	blt.n	8012a56 <__sfputc_r+0x16>
 8012a52:	290a      	cmp	r1, #10
 8012a54:	d103      	bne.n	8012a5e <__sfputc_r+0x1e>
 8012a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a5a:	f000 be45 	b.w	80136e8 <__swbuf_r>
 8012a5e:	6813      	ldr	r3, [r2, #0]
 8012a60:	1c58      	adds	r0, r3, #1
 8012a62:	6010      	str	r0, [r2, #0]
 8012a64:	7019      	strb	r1, [r3, #0]
 8012a66:	4608      	mov	r0, r1
 8012a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a6c:	4770      	bx	lr

08012a6e <__sfputs_r>:
 8012a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a70:	4606      	mov	r6, r0
 8012a72:	460f      	mov	r7, r1
 8012a74:	4614      	mov	r4, r2
 8012a76:	18d5      	adds	r5, r2, r3
 8012a78:	42ac      	cmp	r4, r5
 8012a7a:	d101      	bne.n	8012a80 <__sfputs_r+0x12>
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	e007      	b.n	8012a90 <__sfputs_r+0x22>
 8012a80:	463a      	mov	r2, r7
 8012a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a86:	4630      	mov	r0, r6
 8012a88:	f7ff ffda 	bl	8012a40 <__sfputc_r>
 8012a8c:	1c43      	adds	r3, r0, #1
 8012a8e:	d1f3      	bne.n	8012a78 <__sfputs_r+0xa>
 8012a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a94 <_vfiprintf_r>:
 8012a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a98:	460c      	mov	r4, r1
 8012a9a:	b09d      	sub	sp, #116	; 0x74
 8012a9c:	4617      	mov	r7, r2
 8012a9e:	461d      	mov	r5, r3
 8012aa0:	4606      	mov	r6, r0
 8012aa2:	b118      	cbz	r0, 8012aac <_vfiprintf_r+0x18>
 8012aa4:	6983      	ldr	r3, [r0, #24]
 8012aa6:	b90b      	cbnz	r3, 8012aac <_vfiprintf_r+0x18>
 8012aa8:	f001 fe3e 	bl	8014728 <__sinit>
 8012aac:	4b7c      	ldr	r3, [pc, #496]	; (8012ca0 <_vfiprintf_r+0x20c>)
 8012aae:	429c      	cmp	r4, r3
 8012ab0:	d158      	bne.n	8012b64 <_vfiprintf_r+0xd0>
 8012ab2:	6874      	ldr	r4, [r6, #4]
 8012ab4:	89a3      	ldrh	r3, [r4, #12]
 8012ab6:	0718      	lsls	r0, r3, #28
 8012ab8:	d55e      	bpl.n	8012b78 <_vfiprintf_r+0xe4>
 8012aba:	6923      	ldr	r3, [r4, #16]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d05b      	beq.n	8012b78 <_vfiprintf_r+0xe4>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8012ac4:	2320      	movs	r3, #32
 8012ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012aca:	2330      	movs	r3, #48	; 0x30
 8012acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ad0:	9503      	str	r5, [sp, #12]
 8012ad2:	f04f 0b01 	mov.w	fp, #1
 8012ad6:	46b8      	mov	r8, r7
 8012ad8:	4645      	mov	r5, r8
 8012ada:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012ade:	b10b      	cbz	r3, 8012ae4 <_vfiprintf_r+0x50>
 8012ae0:	2b25      	cmp	r3, #37	; 0x25
 8012ae2:	d154      	bne.n	8012b8e <_vfiprintf_r+0xfa>
 8012ae4:	ebb8 0a07 	subs.w	sl, r8, r7
 8012ae8:	d00b      	beq.n	8012b02 <_vfiprintf_r+0x6e>
 8012aea:	4653      	mov	r3, sl
 8012aec:	463a      	mov	r2, r7
 8012aee:	4621      	mov	r1, r4
 8012af0:	4630      	mov	r0, r6
 8012af2:	f7ff ffbc 	bl	8012a6e <__sfputs_r>
 8012af6:	3001      	adds	r0, #1
 8012af8:	f000 80c2 	beq.w	8012c80 <_vfiprintf_r+0x1ec>
 8012afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012afe:	4453      	add	r3, sl
 8012b00:	9309      	str	r3, [sp, #36]	; 0x24
 8012b02:	f898 3000 	ldrb.w	r3, [r8]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f000 80ba 	beq.w	8012c80 <_vfiprintf_r+0x1ec>
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b16:	9304      	str	r3, [sp, #16]
 8012b18:	9307      	str	r3, [sp, #28]
 8012b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8012b20:	46a8      	mov	r8, r5
 8012b22:	2205      	movs	r2, #5
 8012b24:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012b28:	485e      	ldr	r0, [pc, #376]	; (8012ca4 <_vfiprintf_r+0x210>)
 8012b2a:	f7ed fb79 	bl	8000220 <memchr>
 8012b2e:	9b04      	ldr	r3, [sp, #16]
 8012b30:	bb78      	cbnz	r0, 8012b92 <_vfiprintf_r+0xfe>
 8012b32:	06d9      	lsls	r1, r3, #27
 8012b34:	bf44      	itt	mi
 8012b36:	2220      	movmi	r2, #32
 8012b38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b3c:	071a      	lsls	r2, r3, #28
 8012b3e:	bf44      	itt	mi
 8012b40:	222b      	movmi	r2, #43	; 0x2b
 8012b42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b46:	782a      	ldrb	r2, [r5, #0]
 8012b48:	2a2a      	cmp	r2, #42	; 0x2a
 8012b4a:	d02a      	beq.n	8012ba2 <_vfiprintf_r+0x10e>
 8012b4c:	9a07      	ldr	r2, [sp, #28]
 8012b4e:	46a8      	mov	r8, r5
 8012b50:	2000      	movs	r0, #0
 8012b52:	250a      	movs	r5, #10
 8012b54:	4641      	mov	r1, r8
 8012b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b5a:	3b30      	subs	r3, #48	; 0x30
 8012b5c:	2b09      	cmp	r3, #9
 8012b5e:	d969      	bls.n	8012c34 <_vfiprintf_r+0x1a0>
 8012b60:	b360      	cbz	r0, 8012bbc <_vfiprintf_r+0x128>
 8012b62:	e024      	b.n	8012bae <_vfiprintf_r+0x11a>
 8012b64:	4b50      	ldr	r3, [pc, #320]	; (8012ca8 <_vfiprintf_r+0x214>)
 8012b66:	429c      	cmp	r4, r3
 8012b68:	d101      	bne.n	8012b6e <_vfiprintf_r+0xda>
 8012b6a:	68b4      	ldr	r4, [r6, #8]
 8012b6c:	e7a2      	b.n	8012ab4 <_vfiprintf_r+0x20>
 8012b6e:	4b4f      	ldr	r3, [pc, #316]	; (8012cac <_vfiprintf_r+0x218>)
 8012b70:	429c      	cmp	r4, r3
 8012b72:	bf08      	it	eq
 8012b74:	68f4      	ldreq	r4, [r6, #12]
 8012b76:	e79d      	b.n	8012ab4 <_vfiprintf_r+0x20>
 8012b78:	4621      	mov	r1, r4
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f000 fe18 	bl	80137b0 <__swsetup_r>
 8012b80:	2800      	cmp	r0, #0
 8012b82:	d09d      	beq.n	8012ac0 <_vfiprintf_r+0x2c>
 8012b84:	f04f 30ff 	mov.w	r0, #4294967295
 8012b88:	b01d      	add	sp, #116	; 0x74
 8012b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8e:	46a8      	mov	r8, r5
 8012b90:	e7a2      	b.n	8012ad8 <_vfiprintf_r+0x44>
 8012b92:	4a44      	ldr	r2, [pc, #272]	; (8012ca4 <_vfiprintf_r+0x210>)
 8012b94:	1a80      	subs	r0, r0, r2
 8012b96:	fa0b f000 	lsl.w	r0, fp, r0
 8012b9a:	4318      	orrs	r0, r3
 8012b9c:	9004      	str	r0, [sp, #16]
 8012b9e:	4645      	mov	r5, r8
 8012ba0:	e7be      	b.n	8012b20 <_vfiprintf_r+0x8c>
 8012ba2:	9a03      	ldr	r2, [sp, #12]
 8012ba4:	1d11      	adds	r1, r2, #4
 8012ba6:	6812      	ldr	r2, [r2, #0]
 8012ba8:	9103      	str	r1, [sp, #12]
 8012baa:	2a00      	cmp	r2, #0
 8012bac:	db01      	blt.n	8012bb2 <_vfiprintf_r+0x11e>
 8012bae:	9207      	str	r2, [sp, #28]
 8012bb0:	e004      	b.n	8012bbc <_vfiprintf_r+0x128>
 8012bb2:	4252      	negs	r2, r2
 8012bb4:	f043 0302 	orr.w	r3, r3, #2
 8012bb8:	9207      	str	r2, [sp, #28]
 8012bba:	9304      	str	r3, [sp, #16]
 8012bbc:	f898 3000 	ldrb.w	r3, [r8]
 8012bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8012bc2:	d10e      	bne.n	8012be2 <_vfiprintf_r+0x14e>
 8012bc4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8012bca:	d138      	bne.n	8012c3e <_vfiprintf_r+0x1aa>
 8012bcc:	9b03      	ldr	r3, [sp, #12]
 8012bce:	1d1a      	adds	r2, r3, #4
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	9203      	str	r2, [sp, #12]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	bfb8      	it	lt
 8012bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bdc:	f108 0802 	add.w	r8, r8, #2
 8012be0:	9305      	str	r3, [sp, #20]
 8012be2:	4d33      	ldr	r5, [pc, #204]	; (8012cb0 <_vfiprintf_r+0x21c>)
 8012be4:	f898 1000 	ldrb.w	r1, [r8]
 8012be8:	2203      	movs	r2, #3
 8012bea:	4628      	mov	r0, r5
 8012bec:	f7ed fb18 	bl	8000220 <memchr>
 8012bf0:	b140      	cbz	r0, 8012c04 <_vfiprintf_r+0x170>
 8012bf2:	2340      	movs	r3, #64	; 0x40
 8012bf4:	1b40      	subs	r0, r0, r5
 8012bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8012bfa:	9b04      	ldr	r3, [sp, #16]
 8012bfc:	4303      	orrs	r3, r0
 8012bfe:	f108 0801 	add.w	r8, r8, #1
 8012c02:	9304      	str	r3, [sp, #16]
 8012c04:	f898 1000 	ldrb.w	r1, [r8]
 8012c08:	482a      	ldr	r0, [pc, #168]	; (8012cb4 <_vfiprintf_r+0x220>)
 8012c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c0e:	2206      	movs	r2, #6
 8012c10:	f108 0701 	add.w	r7, r8, #1
 8012c14:	f7ed fb04 	bl	8000220 <memchr>
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d037      	beq.n	8012c8c <_vfiprintf_r+0x1f8>
 8012c1c:	4b26      	ldr	r3, [pc, #152]	; (8012cb8 <_vfiprintf_r+0x224>)
 8012c1e:	bb1b      	cbnz	r3, 8012c68 <_vfiprintf_r+0x1d4>
 8012c20:	9b03      	ldr	r3, [sp, #12]
 8012c22:	3307      	adds	r3, #7
 8012c24:	f023 0307 	bic.w	r3, r3, #7
 8012c28:	3308      	adds	r3, #8
 8012c2a:	9303      	str	r3, [sp, #12]
 8012c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c2e:	444b      	add	r3, r9
 8012c30:	9309      	str	r3, [sp, #36]	; 0x24
 8012c32:	e750      	b.n	8012ad6 <_vfiprintf_r+0x42>
 8012c34:	fb05 3202 	mla	r2, r5, r2, r3
 8012c38:	2001      	movs	r0, #1
 8012c3a:	4688      	mov	r8, r1
 8012c3c:	e78a      	b.n	8012b54 <_vfiprintf_r+0xc0>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	f108 0801 	add.w	r8, r8, #1
 8012c44:	9305      	str	r3, [sp, #20]
 8012c46:	4619      	mov	r1, r3
 8012c48:	250a      	movs	r5, #10
 8012c4a:	4640      	mov	r0, r8
 8012c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c50:	3a30      	subs	r2, #48	; 0x30
 8012c52:	2a09      	cmp	r2, #9
 8012c54:	d903      	bls.n	8012c5e <_vfiprintf_r+0x1ca>
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d0c3      	beq.n	8012be2 <_vfiprintf_r+0x14e>
 8012c5a:	9105      	str	r1, [sp, #20]
 8012c5c:	e7c1      	b.n	8012be2 <_vfiprintf_r+0x14e>
 8012c5e:	fb05 2101 	mla	r1, r5, r1, r2
 8012c62:	2301      	movs	r3, #1
 8012c64:	4680      	mov	r8, r0
 8012c66:	e7f0      	b.n	8012c4a <_vfiprintf_r+0x1b6>
 8012c68:	ab03      	add	r3, sp, #12
 8012c6a:	9300      	str	r3, [sp, #0]
 8012c6c:	4622      	mov	r2, r4
 8012c6e:	4b13      	ldr	r3, [pc, #76]	; (8012cbc <_vfiprintf_r+0x228>)
 8012c70:	a904      	add	r1, sp, #16
 8012c72:	4630      	mov	r0, r6
 8012c74:	f000 f8b8 	bl	8012de8 <_printf_float>
 8012c78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012c7c:	4681      	mov	r9, r0
 8012c7e:	d1d5      	bne.n	8012c2c <_vfiprintf_r+0x198>
 8012c80:	89a3      	ldrh	r3, [r4, #12]
 8012c82:	065b      	lsls	r3, r3, #25
 8012c84:	f53f af7e 	bmi.w	8012b84 <_vfiprintf_r+0xf0>
 8012c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c8a:	e77d      	b.n	8012b88 <_vfiprintf_r+0xf4>
 8012c8c:	ab03      	add	r3, sp, #12
 8012c8e:	9300      	str	r3, [sp, #0]
 8012c90:	4622      	mov	r2, r4
 8012c92:	4b0a      	ldr	r3, [pc, #40]	; (8012cbc <_vfiprintf_r+0x228>)
 8012c94:	a904      	add	r1, sp, #16
 8012c96:	4630      	mov	r0, r6
 8012c98:	f000 fb5c 	bl	8013354 <_printf_i>
 8012c9c:	e7ec      	b.n	8012c78 <_vfiprintf_r+0x1e4>
 8012c9e:	bf00      	nop
 8012ca0:	08018274 	.word	0x08018274
 8012ca4:	08018200 	.word	0x08018200
 8012ca8:	08018294 	.word	0x08018294
 8012cac:	08018254 	.word	0x08018254
 8012cb0:	08018206 	.word	0x08018206
 8012cb4:	0801820a 	.word	0x0801820a
 8012cb8:	08012de9 	.word	0x08012de9
 8012cbc:	08012a6f 	.word	0x08012a6f

08012cc0 <__cvt>:
 8012cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc4:	ec55 4b10 	vmov	r4, r5, d0
 8012cc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012cca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012cce:	2d00      	cmp	r5, #0
 8012cd0:	460e      	mov	r6, r1
 8012cd2:	4691      	mov	r9, r2
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	bfb8      	it	lt
 8012cd8:	4622      	movlt	r2, r4
 8012cda:	462b      	mov	r3, r5
 8012cdc:	f027 0720 	bic.w	r7, r7, #32
 8012ce0:	bfbb      	ittet	lt
 8012ce2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012ce6:	461d      	movlt	r5, r3
 8012ce8:	2300      	movge	r3, #0
 8012cea:	232d      	movlt	r3, #45	; 0x2d
 8012cec:	bfb8      	it	lt
 8012cee:	4614      	movlt	r4, r2
 8012cf0:	2f46      	cmp	r7, #70	; 0x46
 8012cf2:	700b      	strb	r3, [r1, #0]
 8012cf4:	d004      	beq.n	8012d00 <__cvt+0x40>
 8012cf6:	2f45      	cmp	r7, #69	; 0x45
 8012cf8:	d100      	bne.n	8012cfc <__cvt+0x3c>
 8012cfa:	3601      	adds	r6, #1
 8012cfc:	2102      	movs	r1, #2
 8012cfe:	e000      	b.n	8012d02 <__cvt+0x42>
 8012d00:	2103      	movs	r1, #3
 8012d02:	ab03      	add	r3, sp, #12
 8012d04:	9301      	str	r3, [sp, #4]
 8012d06:	ab02      	add	r3, sp, #8
 8012d08:	9300      	str	r3, [sp, #0]
 8012d0a:	4632      	mov	r2, r6
 8012d0c:	4653      	mov	r3, sl
 8012d0e:	ec45 4b10 	vmov	d0, r4, r5
 8012d12:	f000 fe61 	bl	80139d8 <_dtoa_r>
 8012d16:	2f47      	cmp	r7, #71	; 0x47
 8012d18:	4680      	mov	r8, r0
 8012d1a:	d102      	bne.n	8012d22 <__cvt+0x62>
 8012d1c:	f019 0f01 	tst.w	r9, #1
 8012d20:	d026      	beq.n	8012d70 <__cvt+0xb0>
 8012d22:	2f46      	cmp	r7, #70	; 0x46
 8012d24:	eb08 0906 	add.w	r9, r8, r6
 8012d28:	d111      	bne.n	8012d4e <__cvt+0x8e>
 8012d2a:	f898 3000 	ldrb.w	r3, [r8]
 8012d2e:	2b30      	cmp	r3, #48	; 0x30
 8012d30:	d10a      	bne.n	8012d48 <__cvt+0x88>
 8012d32:	2200      	movs	r2, #0
 8012d34:	2300      	movs	r3, #0
 8012d36:	4620      	mov	r0, r4
 8012d38:	4629      	mov	r1, r5
 8012d3a:	f7ed fee5 	bl	8000b08 <__aeabi_dcmpeq>
 8012d3e:	b918      	cbnz	r0, 8012d48 <__cvt+0x88>
 8012d40:	f1c6 0601 	rsb	r6, r6, #1
 8012d44:	f8ca 6000 	str.w	r6, [sl]
 8012d48:	f8da 3000 	ldr.w	r3, [sl]
 8012d4c:	4499      	add	r9, r3
 8012d4e:	2200      	movs	r2, #0
 8012d50:	2300      	movs	r3, #0
 8012d52:	4620      	mov	r0, r4
 8012d54:	4629      	mov	r1, r5
 8012d56:	f7ed fed7 	bl	8000b08 <__aeabi_dcmpeq>
 8012d5a:	b938      	cbnz	r0, 8012d6c <__cvt+0xac>
 8012d5c:	2230      	movs	r2, #48	; 0x30
 8012d5e:	9b03      	ldr	r3, [sp, #12]
 8012d60:	454b      	cmp	r3, r9
 8012d62:	d205      	bcs.n	8012d70 <__cvt+0xb0>
 8012d64:	1c59      	adds	r1, r3, #1
 8012d66:	9103      	str	r1, [sp, #12]
 8012d68:	701a      	strb	r2, [r3, #0]
 8012d6a:	e7f8      	b.n	8012d5e <__cvt+0x9e>
 8012d6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d70:	9b03      	ldr	r3, [sp, #12]
 8012d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d74:	eba3 0308 	sub.w	r3, r3, r8
 8012d78:	4640      	mov	r0, r8
 8012d7a:	6013      	str	r3, [r2, #0]
 8012d7c:	b004      	add	sp, #16
 8012d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012d82 <__exponent>:
 8012d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d84:	2900      	cmp	r1, #0
 8012d86:	4604      	mov	r4, r0
 8012d88:	bfba      	itte	lt
 8012d8a:	4249      	neglt	r1, r1
 8012d8c:	232d      	movlt	r3, #45	; 0x2d
 8012d8e:	232b      	movge	r3, #43	; 0x2b
 8012d90:	2909      	cmp	r1, #9
 8012d92:	f804 2b02 	strb.w	r2, [r4], #2
 8012d96:	7043      	strb	r3, [r0, #1]
 8012d98:	dd20      	ble.n	8012ddc <__exponent+0x5a>
 8012d9a:	f10d 0307 	add.w	r3, sp, #7
 8012d9e:	461f      	mov	r7, r3
 8012da0:	260a      	movs	r6, #10
 8012da2:	fb91 f5f6 	sdiv	r5, r1, r6
 8012da6:	fb06 1115 	mls	r1, r6, r5, r1
 8012daa:	3130      	adds	r1, #48	; 0x30
 8012dac:	2d09      	cmp	r5, #9
 8012dae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012db2:	f103 32ff 	add.w	r2, r3, #4294967295
 8012db6:	4629      	mov	r1, r5
 8012db8:	dc09      	bgt.n	8012dce <__exponent+0x4c>
 8012dba:	3130      	adds	r1, #48	; 0x30
 8012dbc:	3b02      	subs	r3, #2
 8012dbe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012dc2:	42bb      	cmp	r3, r7
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	d304      	bcc.n	8012dd2 <__exponent+0x50>
 8012dc8:	1a10      	subs	r0, r2, r0
 8012dca:	b003      	add	sp, #12
 8012dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dce:	4613      	mov	r3, r2
 8012dd0:	e7e7      	b.n	8012da2 <__exponent+0x20>
 8012dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dd6:	f804 2b01 	strb.w	r2, [r4], #1
 8012dda:	e7f2      	b.n	8012dc2 <__exponent+0x40>
 8012ddc:	2330      	movs	r3, #48	; 0x30
 8012dde:	4419      	add	r1, r3
 8012de0:	7083      	strb	r3, [r0, #2]
 8012de2:	1d02      	adds	r2, r0, #4
 8012de4:	70c1      	strb	r1, [r0, #3]
 8012de6:	e7ef      	b.n	8012dc8 <__exponent+0x46>

08012de8 <_printf_float>:
 8012de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dec:	b08d      	sub	sp, #52	; 0x34
 8012dee:	460c      	mov	r4, r1
 8012df0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012df4:	4616      	mov	r6, r2
 8012df6:	461f      	mov	r7, r3
 8012df8:	4605      	mov	r5, r0
 8012dfa:	f001 fd1f 	bl	801483c <_localeconv_r>
 8012dfe:	6803      	ldr	r3, [r0, #0]
 8012e00:	9304      	str	r3, [sp, #16]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7ed fa04 	bl	8000210 <strlen>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8012e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e10:	9005      	str	r0, [sp, #20]
 8012e12:	3307      	adds	r3, #7
 8012e14:	f023 0307 	bic.w	r3, r3, #7
 8012e18:	f103 0208 	add.w	r2, r3, #8
 8012e1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012e20:	f8d4 b000 	ldr.w	fp, [r4]
 8012e24:	f8c8 2000 	str.w	r2, [r8]
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012e30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012e34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012e38:	9307      	str	r3, [sp, #28]
 8012e3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e42:	4ba7      	ldr	r3, [pc, #668]	; (80130e0 <_printf_float+0x2f8>)
 8012e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e48:	f7ed fe90 	bl	8000b6c <__aeabi_dcmpun>
 8012e4c:	bb70      	cbnz	r0, 8012eac <_printf_float+0xc4>
 8012e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e52:	4ba3      	ldr	r3, [pc, #652]	; (80130e0 <_printf_float+0x2f8>)
 8012e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e58:	f7ed fe6a 	bl	8000b30 <__aeabi_dcmple>
 8012e5c:	bb30      	cbnz	r0, 8012eac <_printf_float+0xc4>
 8012e5e:	2200      	movs	r2, #0
 8012e60:	2300      	movs	r3, #0
 8012e62:	4640      	mov	r0, r8
 8012e64:	4649      	mov	r1, r9
 8012e66:	f7ed fe59 	bl	8000b1c <__aeabi_dcmplt>
 8012e6a:	b110      	cbz	r0, 8012e72 <_printf_float+0x8a>
 8012e6c:	232d      	movs	r3, #45	; 0x2d
 8012e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e72:	4a9c      	ldr	r2, [pc, #624]	; (80130e4 <_printf_float+0x2fc>)
 8012e74:	4b9c      	ldr	r3, [pc, #624]	; (80130e8 <_printf_float+0x300>)
 8012e76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012e7a:	bf8c      	ite	hi
 8012e7c:	4690      	movhi	r8, r2
 8012e7e:	4698      	movls	r8, r3
 8012e80:	2303      	movs	r3, #3
 8012e82:	f02b 0204 	bic.w	r2, fp, #4
 8012e86:	6123      	str	r3, [r4, #16]
 8012e88:	6022      	str	r2, [r4, #0]
 8012e8a:	f04f 0900 	mov.w	r9, #0
 8012e8e:	9700      	str	r7, [sp, #0]
 8012e90:	4633      	mov	r3, r6
 8012e92:	aa0b      	add	r2, sp, #44	; 0x2c
 8012e94:	4621      	mov	r1, r4
 8012e96:	4628      	mov	r0, r5
 8012e98:	f000 f9e6 	bl	8013268 <_printf_common>
 8012e9c:	3001      	adds	r0, #1
 8012e9e:	f040 808d 	bne.w	8012fbc <_printf_float+0x1d4>
 8012ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea6:	b00d      	add	sp, #52	; 0x34
 8012ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eac:	4642      	mov	r2, r8
 8012eae:	464b      	mov	r3, r9
 8012eb0:	4640      	mov	r0, r8
 8012eb2:	4649      	mov	r1, r9
 8012eb4:	f7ed fe5a 	bl	8000b6c <__aeabi_dcmpun>
 8012eb8:	b110      	cbz	r0, 8012ec0 <_printf_float+0xd8>
 8012eba:	4a8c      	ldr	r2, [pc, #560]	; (80130ec <_printf_float+0x304>)
 8012ebc:	4b8c      	ldr	r3, [pc, #560]	; (80130f0 <_printf_float+0x308>)
 8012ebe:	e7da      	b.n	8012e76 <_printf_float+0x8e>
 8012ec0:	6861      	ldr	r1, [r4, #4]
 8012ec2:	1c4b      	adds	r3, r1, #1
 8012ec4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012ec8:	a80a      	add	r0, sp, #40	; 0x28
 8012eca:	d13e      	bne.n	8012f4a <_printf_float+0x162>
 8012ecc:	2306      	movs	r3, #6
 8012ece:	6063      	str	r3, [r4, #4]
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012ed6:	ab09      	add	r3, sp, #36	; 0x24
 8012ed8:	9300      	str	r3, [sp, #0]
 8012eda:	ec49 8b10 	vmov	d0, r8, r9
 8012ede:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012ee2:	6022      	str	r2, [r4, #0]
 8012ee4:	f8cd a004 	str.w	sl, [sp, #4]
 8012ee8:	6861      	ldr	r1, [r4, #4]
 8012eea:	4628      	mov	r0, r5
 8012eec:	f7ff fee8 	bl	8012cc0 <__cvt>
 8012ef0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012ef4:	2b47      	cmp	r3, #71	; 0x47
 8012ef6:	4680      	mov	r8, r0
 8012ef8:	d109      	bne.n	8012f0e <_printf_float+0x126>
 8012efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012efc:	1cd8      	adds	r0, r3, #3
 8012efe:	db02      	blt.n	8012f06 <_printf_float+0x11e>
 8012f00:	6862      	ldr	r2, [r4, #4]
 8012f02:	4293      	cmp	r3, r2
 8012f04:	dd47      	ble.n	8012f96 <_printf_float+0x1ae>
 8012f06:	f1aa 0a02 	sub.w	sl, sl, #2
 8012f0a:	fa5f fa8a 	uxtb.w	sl, sl
 8012f0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f14:	d824      	bhi.n	8012f60 <_printf_float+0x178>
 8012f16:	3901      	subs	r1, #1
 8012f18:	4652      	mov	r2, sl
 8012f1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012f1e:	9109      	str	r1, [sp, #36]	; 0x24
 8012f20:	f7ff ff2f 	bl	8012d82 <__exponent>
 8012f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f26:	1813      	adds	r3, r2, r0
 8012f28:	2a01      	cmp	r2, #1
 8012f2a:	4681      	mov	r9, r0
 8012f2c:	6123      	str	r3, [r4, #16]
 8012f2e:	dc02      	bgt.n	8012f36 <_printf_float+0x14e>
 8012f30:	6822      	ldr	r2, [r4, #0]
 8012f32:	07d1      	lsls	r1, r2, #31
 8012f34:	d501      	bpl.n	8012f3a <_printf_float+0x152>
 8012f36:	3301      	adds	r3, #1
 8012f38:	6123      	str	r3, [r4, #16]
 8012f3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d0a5      	beq.n	8012e8e <_printf_float+0xa6>
 8012f42:	232d      	movs	r3, #45	; 0x2d
 8012f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f48:	e7a1      	b.n	8012e8e <_printf_float+0xa6>
 8012f4a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012f4e:	f000 8177 	beq.w	8013240 <_printf_float+0x458>
 8012f52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012f56:	d1bb      	bne.n	8012ed0 <_printf_float+0xe8>
 8012f58:	2900      	cmp	r1, #0
 8012f5a:	d1b9      	bne.n	8012ed0 <_printf_float+0xe8>
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	e7b6      	b.n	8012ece <_printf_float+0xe6>
 8012f60:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012f64:	d119      	bne.n	8012f9a <_printf_float+0x1b2>
 8012f66:	2900      	cmp	r1, #0
 8012f68:	6863      	ldr	r3, [r4, #4]
 8012f6a:	dd0c      	ble.n	8012f86 <_printf_float+0x19e>
 8012f6c:	6121      	str	r1, [r4, #16]
 8012f6e:	b913      	cbnz	r3, 8012f76 <_printf_float+0x18e>
 8012f70:	6822      	ldr	r2, [r4, #0]
 8012f72:	07d2      	lsls	r2, r2, #31
 8012f74:	d502      	bpl.n	8012f7c <_printf_float+0x194>
 8012f76:	3301      	adds	r3, #1
 8012f78:	440b      	add	r3, r1
 8012f7a:	6123      	str	r3, [r4, #16]
 8012f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012f80:	f04f 0900 	mov.w	r9, #0
 8012f84:	e7d9      	b.n	8012f3a <_printf_float+0x152>
 8012f86:	b913      	cbnz	r3, 8012f8e <_printf_float+0x1a6>
 8012f88:	6822      	ldr	r2, [r4, #0]
 8012f8a:	07d0      	lsls	r0, r2, #31
 8012f8c:	d501      	bpl.n	8012f92 <_printf_float+0x1aa>
 8012f8e:	3302      	adds	r3, #2
 8012f90:	e7f3      	b.n	8012f7a <_printf_float+0x192>
 8012f92:	2301      	movs	r3, #1
 8012f94:	e7f1      	b.n	8012f7a <_printf_float+0x192>
 8012f96:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012f9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	db05      	blt.n	8012fae <_printf_float+0x1c6>
 8012fa2:	6822      	ldr	r2, [r4, #0]
 8012fa4:	6123      	str	r3, [r4, #16]
 8012fa6:	07d1      	lsls	r1, r2, #31
 8012fa8:	d5e8      	bpl.n	8012f7c <_printf_float+0x194>
 8012faa:	3301      	adds	r3, #1
 8012fac:	e7e5      	b.n	8012f7a <_printf_float+0x192>
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	bfd4      	ite	le
 8012fb2:	f1c3 0302 	rsble	r3, r3, #2
 8012fb6:	2301      	movgt	r3, #1
 8012fb8:	4413      	add	r3, r2
 8012fba:	e7de      	b.n	8012f7a <_printf_float+0x192>
 8012fbc:	6823      	ldr	r3, [r4, #0]
 8012fbe:	055a      	lsls	r2, r3, #21
 8012fc0:	d407      	bmi.n	8012fd2 <_printf_float+0x1ea>
 8012fc2:	6923      	ldr	r3, [r4, #16]
 8012fc4:	4642      	mov	r2, r8
 8012fc6:	4631      	mov	r1, r6
 8012fc8:	4628      	mov	r0, r5
 8012fca:	47b8      	blx	r7
 8012fcc:	3001      	adds	r0, #1
 8012fce:	d12b      	bne.n	8013028 <_printf_float+0x240>
 8012fd0:	e767      	b.n	8012ea2 <_printf_float+0xba>
 8012fd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012fd6:	f240 80dc 	bls.w	8013192 <_printf_float+0x3aa>
 8012fda:	2200      	movs	r2, #0
 8012fdc:	2300      	movs	r3, #0
 8012fde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012fe2:	f7ed fd91 	bl	8000b08 <__aeabi_dcmpeq>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d033      	beq.n	8013052 <_printf_float+0x26a>
 8012fea:	2301      	movs	r3, #1
 8012fec:	4a41      	ldr	r2, [pc, #260]	; (80130f4 <_printf_float+0x30c>)
 8012fee:	4631      	mov	r1, r6
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	47b8      	blx	r7
 8012ff4:	3001      	adds	r0, #1
 8012ff6:	f43f af54 	beq.w	8012ea2 <_printf_float+0xba>
 8012ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ffe:	429a      	cmp	r2, r3
 8013000:	db02      	blt.n	8013008 <_printf_float+0x220>
 8013002:	6823      	ldr	r3, [r4, #0]
 8013004:	07d8      	lsls	r0, r3, #31
 8013006:	d50f      	bpl.n	8013028 <_printf_float+0x240>
 8013008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801300c:	4631      	mov	r1, r6
 801300e:	4628      	mov	r0, r5
 8013010:	47b8      	blx	r7
 8013012:	3001      	adds	r0, #1
 8013014:	f43f af45 	beq.w	8012ea2 <_printf_float+0xba>
 8013018:	f04f 0800 	mov.w	r8, #0
 801301c:	f104 091a 	add.w	r9, r4, #26
 8013020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013022:	3b01      	subs	r3, #1
 8013024:	4543      	cmp	r3, r8
 8013026:	dc09      	bgt.n	801303c <_printf_float+0x254>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	079b      	lsls	r3, r3, #30
 801302c:	f100 8103 	bmi.w	8013236 <_printf_float+0x44e>
 8013030:	68e0      	ldr	r0, [r4, #12]
 8013032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013034:	4298      	cmp	r0, r3
 8013036:	bfb8      	it	lt
 8013038:	4618      	movlt	r0, r3
 801303a:	e734      	b.n	8012ea6 <_printf_float+0xbe>
 801303c:	2301      	movs	r3, #1
 801303e:	464a      	mov	r2, r9
 8013040:	4631      	mov	r1, r6
 8013042:	4628      	mov	r0, r5
 8013044:	47b8      	blx	r7
 8013046:	3001      	adds	r0, #1
 8013048:	f43f af2b 	beq.w	8012ea2 <_printf_float+0xba>
 801304c:	f108 0801 	add.w	r8, r8, #1
 8013050:	e7e6      	b.n	8013020 <_printf_float+0x238>
 8013052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013054:	2b00      	cmp	r3, #0
 8013056:	dc2b      	bgt.n	80130b0 <_printf_float+0x2c8>
 8013058:	2301      	movs	r3, #1
 801305a:	4a26      	ldr	r2, [pc, #152]	; (80130f4 <_printf_float+0x30c>)
 801305c:	4631      	mov	r1, r6
 801305e:	4628      	mov	r0, r5
 8013060:	47b8      	blx	r7
 8013062:	3001      	adds	r0, #1
 8013064:	f43f af1d 	beq.w	8012ea2 <_printf_float+0xba>
 8013068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801306a:	b923      	cbnz	r3, 8013076 <_printf_float+0x28e>
 801306c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801306e:	b913      	cbnz	r3, 8013076 <_printf_float+0x28e>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	07d9      	lsls	r1, r3, #31
 8013074:	d5d8      	bpl.n	8013028 <_printf_float+0x240>
 8013076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801307a:	4631      	mov	r1, r6
 801307c:	4628      	mov	r0, r5
 801307e:	47b8      	blx	r7
 8013080:	3001      	adds	r0, #1
 8013082:	f43f af0e 	beq.w	8012ea2 <_printf_float+0xba>
 8013086:	f04f 0900 	mov.w	r9, #0
 801308a:	f104 0a1a 	add.w	sl, r4, #26
 801308e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013090:	425b      	negs	r3, r3
 8013092:	454b      	cmp	r3, r9
 8013094:	dc01      	bgt.n	801309a <_printf_float+0x2b2>
 8013096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013098:	e794      	b.n	8012fc4 <_printf_float+0x1dc>
 801309a:	2301      	movs	r3, #1
 801309c:	4652      	mov	r2, sl
 801309e:	4631      	mov	r1, r6
 80130a0:	4628      	mov	r0, r5
 80130a2:	47b8      	blx	r7
 80130a4:	3001      	adds	r0, #1
 80130a6:	f43f aefc 	beq.w	8012ea2 <_printf_float+0xba>
 80130aa:	f109 0901 	add.w	r9, r9, #1
 80130ae:	e7ee      	b.n	801308e <_printf_float+0x2a6>
 80130b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80130b4:	429a      	cmp	r2, r3
 80130b6:	bfa8      	it	ge
 80130b8:	461a      	movge	r2, r3
 80130ba:	2a00      	cmp	r2, #0
 80130bc:	4691      	mov	r9, r2
 80130be:	dd07      	ble.n	80130d0 <_printf_float+0x2e8>
 80130c0:	4613      	mov	r3, r2
 80130c2:	4631      	mov	r1, r6
 80130c4:	4642      	mov	r2, r8
 80130c6:	4628      	mov	r0, r5
 80130c8:	47b8      	blx	r7
 80130ca:	3001      	adds	r0, #1
 80130cc:	f43f aee9 	beq.w	8012ea2 <_printf_float+0xba>
 80130d0:	f104 031a 	add.w	r3, r4, #26
 80130d4:	f04f 0b00 	mov.w	fp, #0
 80130d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80130dc:	9306      	str	r3, [sp, #24]
 80130de:	e015      	b.n	801310c <_printf_float+0x324>
 80130e0:	7fefffff 	.word	0x7fefffff
 80130e4:	08018215 	.word	0x08018215
 80130e8:	08018211 	.word	0x08018211
 80130ec:	0801821d 	.word	0x0801821d
 80130f0:	08018219 	.word	0x08018219
 80130f4:	08018221 	.word	0x08018221
 80130f8:	2301      	movs	r3, #1
 80130fa:	9a06      	ldr	r2, [sp, #24]
 80130fc:	4631      	mov	r1, r6
 80130fe:	4628      	mov	r0, r5
 8013100:	47b8      	blx	r7
 8013102:	3001      	adds	r0, #1
 8013104:	f43f aecd 	beq.w	8012ea2 <_printf_float+0xba>
 8013108:	f10b 0b01 	add.w	fp, fp, #1
 801310c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013110:	ebaa 0309 	sub.w	r3, sl, r9
 8013114:	455b      	cmp	r3, fp
 8013116:	dcef      	bgt.n	80130f8 <_printf_float+0x310>
 8013118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801311c:	429a      	cmp	r2, r3
 801311e:	44d0      	add	r8, sl
 8013120:	db15      	blt.n	801314e <_printf_float+0x366>
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	07da      	lsls	r2, r3, #31
 8013126:	d412      	bmi.n	801314e <_printf_float+0x366>
 8013128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801312a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801312c:	eba3 020a 	sub.w	r2, r3, sl
 8013130:	eba3 0a01 	sub.w	sl, r3, r1
 8013134:	4592      	cmp	sl, r2
 8013136:	bfa8      	it	ge
 8013138:	4692      	movge	sl, r2
 801313a:	f1ba 0f00 	cmp.w	sl, #0
 801313e:	dc0e      	bgt.n	801315e <_printf_float+0x376>
 8013140:	f04f 0800 	mov.w	r8, #0
 8013144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013148:	f104 091a 	add.w	r9, r4, #26
 801314c:	e019      	b.n	8013182 <_printf_float+0x39a>
 801314e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013152:	4631      	mov	r1, r6
 8013154:	4628      	mov	r0, r5
 8013156:	47b8      	blx	r7
 8013158:	3001      	adds	r0, #1
 801315a:	d1e5      	bne.n	8013128 <_printf_float+0x340>
 801315c:	e6a1      	b.n	8012ea2 <_printf_float+0xba>
 801315e:	4653      	mov	r3, sl
 8013160:	4642      	mov	r2, r8
 8013162:	4631      	mov	r1, r6
 8013164:	4628      	mov	r0, r5
 8013166:	47b8      	blx	r7
 8013168:	3001      	adds	r0, #1
 801316a:	d1e9      	bne.n	8013140 <_printf_float+0x358>
 801316c:	e699      	b.n	8012ea2 <_printf_float+0xba>
 801316e:	2301      	movs	r3, #1
 8013170:	464a      	mov	r2, r9
 8013172:	4631      	mov	r1, r6
 8013174:	4628      	mov	r0, r5
 8013176:	47b8      	blx	r7
 8013178:	3001      	adds	r0, #1
 801317a:	f43f ae92 	beq.w	8012ea2 <_printf_float+0xba>
 801317e:	f108 0801 	add.w	r8, r8, #1
 8013182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013186:	1a9b      	subs	r3, r3, r2
 8013188:	eba3 030a 	sub.w	r3, r3, sl
 801318c:	4543      	cmp	r3, r8
 801318e:	dcee      	bgt.n	801316e <_printf_float+0x386>
 8013190:	e74a      	b.n	8013028 <_printf_float+0x240>
 8013192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013194:	2a01      	cmp	r2, #1
 8013196:	dc01      	bgt.n	801319c <_printf_float+0x3b4>
 8013198:	07db      	lsls	r3, r3, #31
 801319a:	d53a      	bpl.n	8013212 <_printf_float+0x42a>
 801319c:	2301      	movs	r3, #1
 801319e:	4642      	mov	r2, r8
 80131a0:	4631      	mov	r1, r6
 80131a2:	4628      	mov	r0, r5
 80131a4:	47b8      	blx	r7
 80131a6:	3001      	adds	r0, #1
 80131a8:	f43f ae7b 	beq.w	8012ea2 <_printf_float+0xba>
 80131ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131b0:	4631      	mov	r1, r6
 80131b2:	4628      	mov	r0, r5
 80131b4:	47b8      	blx	r7
 80131b6:	3001      	adds	r0, #1
 80131b8:	f108 0801 	add.w	r8, r8, #1
 80131bc:	f43f ae71 	beq.w	8012ea2 <_printf_float+0xba>
 80131c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131c2:	2200      	movs	r2, #0
 80131c4:	f103 3aff 	add.w	sl, r3, #4294967295
 80131c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80131cc:	2300      	movs	r3, #0
 80131ce:	f7ed fc9b 	bl	8000b08 <__aeabi_dcmpeq>
 80131d2:	b9c8      	cbnz	r0, 8013208 <_printf_float+0x420>
 80131d4:	4653      	mov	r3, sl
 80131d6:	4642      	mov	r2, r8
 80131d8:	4631      	mov	r1, r6
 80131da:	4628      	mov	r0, r5
 80131dc:	47b8      	blx	r7
 80131de:	3001      	adds	r0, #1
 80131e0:	d10e      	bne.n	8013200 <_printf_float+0x418>
 80131e2:	e65e      	b.n	8012ea2 <_printf_float+0xba>
 80131e4:	2301      	movs	r3, #1
 80131e6:	4652      	mov	r2, sl
 80131e8:	4631      	mov	r1, r6
 80131ea:	4628      	mov	r0, r5
 80131ec:	47b8      	blx	r7
 80131ee:	3001      	adds	r0, #1
 80131f0:	f43f ae57 	beq.w	8012ea2 <_printf_float+0xba>
 80131f4:	f108 0801 	add.w	r8, r8, #1
 80131f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131fa:	3b01      	subs	r3, #1
 80131fc:	4543      	cmp	r3, r8
 80131fe:	dcf1      	bgt.n	80131e4 <_printf_float+0x3fc>
 8013200:	464b      	mov	r3, r9
 8013202:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013206:	e6de      	b.n	8012fc6 <_printf_float+0x1de>
 8013208:	f04f 0800 	mov.w	r8, #0
 801320c:	f104 0a1a 	add.w	sl, r4, #26
 8013210:	e7f2      	b.n	80131f8 <_printf_float+0x410>
 8013212:	2301      	movs	r3, #1
 8013214:	e7df      	b.n	80131d6 <_printf_float+0x3ee>
 8013216:	2301      	movs	r3, #1
 8013218:	464a      	mov	r2, r9
 801321a:	4631      	mov	r1, r6
 801321c:	4628      	mov	r0, r5
 801321e:	47b8      	blx	r7
 8013220:	3001      	adds	r0, #1
 8013222:	f43f ae3e 	beq.w	8012ea2 <_printf_float+0xba>
 8013226:	f108 0801 	add.w	r8, r8, #1
 801322a:	68e3      	ldr	r3, [r4, #12]
 801322c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801322e:	1a9b      	subs	r3, r3, r2
 8013230:	4543      	cmp	r3, r8
 8013232:	dcf0      	bgt.n	8013216 <_printf_float+0x42e>
 8013234:	e6fc      	b.n	8013030 <_printf_float+0x248>
 8013236:	f04f 0800 	mov.w	r8, #0
 801323a:	f104 0919 	add.w	r9, r4, #25
 801323e:	e7f4      	b.n	801322a <_printf_float+0x442>
 8013240:	2900      	cmp	r1, #0
 8013242:	f43f ae8b 	beq.w	8012f5c <_printf_float+0x174>
 8013246:	2300      	movs	r3, #0
 8013248:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801324c:	ab09      	add	r3, sp, #36	; 0x24
 801324e:	9300      	str	r3, [sp, #0]
 8013250:	ec49 8b10 	vmov	d0, r8, r9
 8013254:	6022      	str	r2, [r4, #0]
 8013256:	f8cd a004 	str.w	sl, [sp, #4]
 801325a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801325e:	4628      	mov	r0, r5
 8013260:	f7ff fd2e 	bl	8012cc0 <__cvt>
 8013264:	4680      	mov	r8, r0
 8013266:	e648      	b.n	8012efa <_printf_float+0x112>

08013268 <_printf_common>:
 8013268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801326c:	4691      	mov	r9, r2
 801326e:	461f      	mov	r7, r3
 8013270:	688a      	ldr	r2, [r1, #8]
 8013272:	690b      	ldr	r3, [r1, #16]
 8013274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013278:	4293      	cmp	r3, r2
 801327a:	bfb8      	it	lt
 801327c:	4613      	movlt	r3, r2
 801327e:	f8c9 3000 	str.w	r3, [r9]
 8013282:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013286:	4606      	mov	r6, r0
 8013288:	460c      	mov	r4, r1
 801328a:	b112      	cbz	r2, 8013292 <_printf_common+0x2a>
 801328c:	3301      	adds	r3, #1
 801328e:	f8c9 3000 	str.w	r3, [r9]
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	0699      	lsls	r1, r3, #26
 8013296:	bf42      	ittt	mi
 8013298:	f8d9 3000 	ldrmi.w	r3, [r9]
 801329c:	3302      	addmi	r3, #2
 801329e:	f8c9 3000 	strmi.w	r3, [r9]
 80132a2:	6825      	ldr	r5, [r4, #0]
 80132a4:	f015 0506 	ands.w	r5, r5, #6
 80132a8:	d107      	bne.n	80132ba <_printf_common+0x52>
 80132aa:	f104 0a19 	add.w	sl, r4, #25
 80132ae:	68e3      	ldr	r3, [r4, #12]
 80132b0:	f8d9 2000 	ldr.w	r2, [r9]
 80132b4:	1a9b      	subs	r3, r3, r2
 80132b6:	42ab      	cmp	r3, r5
 80132b8:	dc28      	bgt.n	801330c <_printf_common+0xa4>
 80132ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80132be:	6822      	ldr	r2, [r4, #0]
 80132c0:	3300      	adds	r3, #0
 80132c2:	bf18      	it	ne
 80132c4:	2301      	movne	r3, #1
 80132c6:	0692      	lsls	r2, r2, #26
 80132c8:	d42d      	bmi.n	8013326 <_printf_common+0xbe>
 80132ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132ce:	4639      	mov	r1, r7
 80132d0:	4630      	mov	r0, r6
 80132d2:	47c0      	blx	r8
 80132d4:	3001      	adds	r0, #1
 80132d6:	d020      	beq.n	801331a <_printf_common+0xb2>
 80132d8:	6823      	ldr	r3, [r4, #0]
 80132da:	68e5      	ldr	r5, [r4, #12]
 80132dc:	f8d9 2000 	ldr.w	r2, [r9]
 80132e0:	f003 0306 	and.w	r3, r3, #6
 80132e4:	2b04      	cmp	r3, #4
 80132e6:	bf08      	it	eq
 80132e8:	1aad      	subeq	r5, r5, r2
 80132ea:	68a3      	ldr	r3, [r4, #8]
 80132ec:	6922      	ldr	r2, [r4, #16]
 80132ee:	bf0c      	ite	eq
 80132f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132f4:	2500      	movne	r5, #0
 80132f6:	4293      	cmp	r3, r2
 80132f8:	bfc4      	itt	gt
 80132fa:	1a9b      	subgt	r3, r3, r2
 80132fc:	18ed      	addgt	r5, r5, r3
 80132fe:	f04f 0900 	mov.w	r9, #0
 8013302:	341a      	adds	r4, #26
 8013304:	454d      	cmp	r5, r9
 8013306:	d11a      	bne.n	801333e <_printf_common+0xd6>
 8013308:	2000      	movs	r0, #0
 801330a:	e008      	b.n	801331e <_printf_common+0xb6>
 801330c:	2301      	movs	r3, #1
 801330e:	4652      	mov	r2, sl
 8013310:	4639      	mov	r1, r7
 8013312:	4630      	mov	r0, r6
 8013314:	47c0      	blx	r8
 8013316:	3001      	adds	r0, #1
 8013318:	d103      	bne.n	8013322 <_printf_common+0xba>
 801331a:	f04f 30ff 	mov.w	r0, #4294967295
 801331e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013322:	3501      	adds	r5, #1
 8013324:	e7c3      	b.n	80132ae <_printf_common+0x46>
 8013326:	18e1      	adds	r1, r4, r3
 8013328:	1c5a      	adds	r2, r3, #1
 801332a:	2030      	movs	r0, #48	; 0x30
 801332c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013330:	4422      	add	r2, r4
 8013332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013336:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801333a:	3302      	adds	r3, #2
 801333c:	e7c5      	b.n	80132ca <_printf_common+0x62>
 801333e:	2301      	movs	r3, #1
 8013340:	4622      	mov	r2, r4
 8013342:	4639      	mov	r1, r7
 8013344:	4630      	mov	r0, r6
 8013346:	47c0      	blx	r8
 8013348:	3001      	adds	r0, #1
 801334a:	d0e6      	beq.n	801331a <_printf_common+0xb2>
 801334c:	f109 0901 	add.w	r9, r9, #1
 8013350:	e7d8      	b.n	8013304 <_printf_common+0x9c>
	...

08013354 <_printf_i>:
 8013354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013358:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801335c:	460c      	mov	r4, r1
 801335e:	7e09      	ldrb	r1, [r1, #24]
 8013360:	b085      	sub	sp, #20
 8013362:	296e      	cmp	r1, #110	; 0x6e
 8013364:	4617      	mov	r7, r2
 8013366:	4606      	mov	r6, r0
 8013368:	4698      	mov	r8, r3
 801336a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801336c:	f000 80b3 	beq.w	80134d6 <_printf_i+0x182>
 8013370:	d822      	bhi.n	80133b8 <_printf_i+0x64>
 8013372:	2963      	cmp	r1, #99	; 0x63
 8013374:	d036      	beq.n	80133e4 <_printf_i+0x90>
 8013376:	d80a      	bhi.n	801338e <_printf_i+0x3a>
 8013378:	2900      	cmp	r1, #0
 801337a:	f000 80b9 	beq.w	80134f0 <_printf_i+0x19c>
 801337e:	2958      	cmp	r1, #88	; 0x58
 8013380:	f000 8083 	beq.w	801348a <_printf_i+0x136>
 8013384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013388:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801338c:	e032      	b.n	80133f4 <_printf_i+0xa0>
 801338e:	2964      	cmp	r1, #100	; 0x64
 8013390:	d001      	beq.n	8013396 <_printf_i+0x42>
 8013392:	2969      	cmp	r1, #105	; 0x69
 8013394:	d1f6      	bne.n	8013384 <_printf_i+0x30>
 8013396:	6820      	ldr	r0, [r4, #0]
 8013398:	6813      	ldr	r3, [r2, #0]
 801339a:	0605      	lsls	r5, r0, #24
 801339c:	f103 0104 	add.w	r1, r3, #4
 80133a0:	d52a      	bpl.n	80133f8 <_printf_i+0xa4>
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	6011      	str	r1, [r2, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	da03      	bge.n	80133b2 <_printf_i+0x5e>
 80133aa:	222d      	movs	r2, #45	; 0x2d
 80133ac:	425b      	negs	r3, r3
 80133ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80133b2:	486f      	ldr	r0, [pc, #444]	; (8013570 <_printf_i+0x21c>)
 80133b4:	220a      	movs	r2, #10
 80133b6:	e039      	b.n	801342c <_printf_i+0xd8>
 80133b8:	2973      	cmp	r1, #115	; 0x73
 80133ba:	f000 809d 	beq.w	80134f8 <_printf_i+0x1a4>
 80133be:	d808      	bhi.n	80133d2 <_printf_i+0x7e>
 80133c0:	296f      	cmp	r1, #111	; 0x6f
 80133c2:	d020      	beq.n	8013406 <_printf_i+0xb2>
 80133c4:	2970      	cmp	r1, #112	; 0x70
 80133c6:	d1dd      	bne.n	8013384 <_printf_i+0x30>
 80133c8:	6823      	ldr	r3, [r4, #0]
 80133ca:	f043 0320 	orr.w	r3, r3, #32
 80133ce:	6023      	str	r3, [r4, #0]
 80133d0:	e003      	b.n	80133da <_printf_i+0x86>
 80133d2:	2975      	cmp	r1, #117	; 0x75
 80133d4:	d017      	beq.n	8013406 <_printf_i+0xb2>
 80133d6:	2978      	cmp	r1, #120	; 0x78
 80133d8:	d1d4      	bne.n	8013384 <_printf_i+0x30>
 80133da:	2378      	movs	r3, #120	; 0x78
 80133dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133e0:	4864      	ldr	r0, [pc, #400]	; (8013574 <_printf_i+0x220>)
 80133e2:	e055      	b.n	8013490 <_printf_i+0x13c>
 80133e4:	6813      	ldr	r3, [r2, #0]
 80133e6:	1d19      	adds	r1, r3, #4
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	6011      	str	r1, [r2, #0]
 80133ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133f4:	2301      	movs	r3, #1
 80133f6:	e08c      	b.n	8013512 <_printf_i+0x1be>
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	6011      	str	r1, [r2, #0]
 80133fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013400:	bf18      	it	ne
 8013402:	b21b      	sxthne	r3, r3
 8013404:	e7cf      	b.n	80133a6 <_printf_i+0x52>
 8013406:	6813      	ldr	r3, [r2, #0]
 8013408:	6825      	ldr	r5, [r4, #0]
 801340a:	1d18      	adds	r0, r3, #4
 801340c:	6010      	str	r0, [r2, #0]
 801340e:	0628      	lsls	r0, r5, #24
 8013410:	d501      	bpl.n	8013416 <_printf_i+0xc2>
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	e002      	b.n	801341c <_printf_i+0xc8>
 8013416:	0668      	lsls	r0, r5, #25
 8013418:	d5fb      	bpl.n	8013412 <_printf_i+0xbe>
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	4854      	ldr	r0, [pc, #336]	; (8013570 <_printf_i+0x21c>)
 801341e:	296f      	cmp	r1, #111	; 0x6f
 8013420:	bf14      	ite	ne
 8013422:	220a      	movne	r2, #10
 8013424:	2208      	moveq	r2, #8
 8013426:	2100      	movs	r1, #0
 8013428:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801342c:	6865      	ldr	r5, [r4, #4]
 801342e:	60a5      	str	r5, [r4, #8]
 8013430:	2d00      	cmp	r5, #0
 8013432:	f2c0 8095 	blt.w	8013560 <_printf_i+0x20c>
 8013436:	6821      	ldr	r1, [r4, #0]
 8013438:	f021 0104 	bic.w	r1, r1, #4
 801343c:	6021      	str	r1, [r4, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d13d      	bne.n	80134be <_printf_i+0x16a>
 8013442:	2d00      	cmp	r5, #0
 8013444:	f040 808e 	bne.w	8013564 <_printf_i+0x210>
 8013448:	4665      	mov	r5, ip
 801344a:	2a08      	cmp	r2, #8
 801344c:	d10b      	bne.n	8013466 <_printf_i+0x112>
 801344e:	6823      	ldr	r3, [r4, #0]
 8013450:	07db      	lsls	r3, r3, #31
 8013452:	d508      	bpl.n	8013466 <_printf_i+0x112>
 8013454:	6923      	ldr	r3, [r4, #16]
 8013456:	6862      	ldr	r2, [r4, #4]
 8013458:	429a      	cmp	r2, r3
 801345a:	bfde      	ittt	le
 801345c:	2330      	movle	r3, #48	; 0x30
 801345e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013462:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013466:	ebac 0305 	sub.w	r3, ip, r5
 801346a:	6123      	str	r3, [r4, #16]
 801346c:	f8cd 8000 	str.w	r8, [sp]
 8013470:	463b      	mov	r3, r7
 8013472:	aa03      	add	r2, sp, #12
 8013474:	4621      	mov	r1, r4
 8013476:	4630      	mov	r0, r6
 8013478:	f7ff fef6 	bl	8013268 <_printf_common>
 801347c:	3001      	adds	r0, #1
 801347e:	d14d      	bne.n	801351c <_printf_i+0x1c8>
 8013480:	f04f 30ff 	mov.w	r0, #4294967295
 8013484:	b005      	add	sp, #20
 8013486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801348a:	4839      	ldr	r0, [pc, #228]	; (8013570 <_printf_i+0x21c>)
 801348c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013490:	6813      	ldr	r3, [r2, #0]
 8013492:	6821      	ldr	r1, [r4, #0]
 8013494:	1d1d      	adds	r5, r3, #4
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	6015      	str	r5, [r2, #0]
 801349a:	060a      	lsls	r2, r1, #24
 801349c:	d50b      	bpl.n	80134b6 <_printf_i+0x162>
 801349e:	07ca      	lsls	r2, r1, #31
 80134a0:	bf44      	itt	mi
 80134a2:	f041 0120 	orrmi.w	r1, r1, #32
 80134a6:	6021      	strmi	r1, [r4, #0]
 80134a8:	b91b      	cbnz	r3, 80134b2 <_printf_i+0x15e>
 80134aa:	6822      	ldr	r2, [r4, #0]
 80134ac:	f022 0220 	bic.w	r2, r2, #32
 80134b0:	6022      	str	r2, [r4, #0]
 80134b2:	2210      	movs	r2, #16
 80134b4:	e7b7      	b.n	8013426 <_printf_i+0xd2>
 80134b6:	064d      	lsls	r5, r1, #25
 80134b8:	bf48      	it	mi
 80134ba:	b29b      	uxthmi	r3, r3
 80134bc:	e7ef      	b.n	801349e <_printf_i+0x14a>
 80134be:	4665      	mov	r5, ip
 80134c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80134c4:	fb02 3311 	mls	r3, r2, r1, r3
 80134c8:	5cc3      	ldrb	r3, [r0, r3]
 80134ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80134ce:	460b      	mov	r3, r1
 80134d0:	2900      	cmp	r1, #0
 80134d2:	d1f5      	bne.n	80134c0 <_printf_i+0x16c>
 80134d4:	e7b9      	b.n	801344a <_printf_i+0xf6>
 80134d6:	6813      	ldr	r3, [r2, #0]
 80134d8:	6825      	ldr	r5, [r4, #0]
 80134da:	6961      	ldr	r1, [r4, #20]
 80134dc:	1d18      	adds	r0, r3, #4
 80134de:	6010      	str	r0, [r2, #0]
 80134e0:	0628      	lsls	r0, r5, #24
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	d501      	bpl.n	80134ea <_printf_i+0x196>
 80134e6:	6019      	str	r1, [r3, #0]
 80134e8:	e002      	b.n	80134f0 <_printf_i+0x19c>
 80134ea:	066a      	lsls	r2, r5, #25
 80134ec:	d5fb      	bpl.n	80134e6 <_printf_i+0x192>
 80134ee:	8019      	strh	r1, [r3, #0]
 80134f0:	2300      	movs	r3, #0
 80134f2:	6123      	str	r3, [r4, #16]
 80134f4:	4665      	mov	r5, ip
 80134f6:	e7b9      	b.n	801346c <_printf_i+0x118>
 80134f8:	6813      	ldr	r3, [r2, #0]
 80134fa:	1d19      	adds	r1, r3, #4
 80134fc:	6011      	str	r1, [r2, #0]
 80134fe:	681d      	ldr	r5, [r3, #0]
 8013500:	6862      	ldr	r2, [r4, #4]
 8013502:	2100      	movs	r1, #0
 8013504:	4628      	mov	r0, r5
 8013506:	f7ec fe8b 	bl	8000220 <memchr>
 801350a:	b108      	cbz	r0, 8013510 <_printf_i+0x1bc>
 801350c:	1b40      	subs	r0, r0, r5
 801350e:	6060      	str	r0, [r4, #4]
 8013510:	6863      	ldr	r3, [r4, #4]
 8013512:	6123      	str	r3, [r4, #16]
 8013514:	2300      	movs	r3, #0
 8013516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801351a:	e7a7      	b.n	801346c <_printf_i+0x118>
 801351c:	6923      	ldr	r3, [r4, #16]
 801351e:	462a      	mov	r2, r5
 8013520:	4639      	mov	r1, r7
 8013522:	4630      	mov	r0, r6
 8013524:	47c0      	blx	r8
 8013526:	3001      	adds	r0, #1
 8013528:	d0aa      	beq.n	8013480 <_printf_i+0x12c>
 801352a:	6823      	ldr	r3, [r4, #0]
 801352c:	079b      	lsls	r3, r3, #30
 801352e:	d413      	bmi.n	8013558 <_printf_i+0x204>
 8013530:	68e0      	ldr	r0, [r4, #12]
 8013532:	9b03      	ldr	r3, [sp, #12]
 8013534:	4298      	cmp	r0, r3
 8013536:	bfb8      	it	lt
 8013538:	4618      	movlt	r0, r3
 801353a:	e7a3      	b.n	8013484 <_printf_i+0x130>
 801353c:	2301      	movs	r3, #1
 801353e:	464a      	mov	r2, r9
 8013540:	4639      	mov	r1, r7
 8013542:	4630      	mov	r0, r6
 8013544:	47c0      	blx	r8
 8013546:	3001      	adds	r0, #1
 8013548:	d09a      	beq.n	8013480 <_printf_i+0x12c>
 801354a:	3501      	adds	r5, #1
 801354c:	68e3      	ldr	r3, [r4, #12]
 801354e:	9a03      	ldr	r2, [sp, #12]
 8013550:	1a9b      	subs	r3, r3, r2
 8013552:	42ab      	cmp	r3, r5
 8013554:	dcf2      	bgt.n	801353c <_printf_i+0x1e8>
 8013556:	e7eb      	b.n	8013530 <_printf_i+0x1dc>
 8013558:	2500      	movs	r5, #0
 801355a:	f104 0919 	add.w	r9, r4, #25
 801355e:	e7f5      	b.n	801354c <_printf_i+0x1f8>
 8013560:	2b00      	cmp	r3, #0
 8013562:	d1ac      	bne.n	80134be <_printf_i+0x16a>
 8013564:	7803      	ldrb	r3, [r0, #0]
 8013566:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801356a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801356e:	e76c      	b.n	801344a <_printf_i+0xf6>
 8013570:	08018223 	.word	0x08018223
 8013574:	08018234 	.word	0x08018234

08013578 <copysign>:
 8013578:	ec51 0b10 	vmov	r0, r1, d0
 801357c:	ee11 0a90 	vmov	r0, s3
 8013580:	ee10 2a10 	vmov	r2, s0
 8013584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013588:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801358c:	ea41 0300 	orr.w	r3, r1, r0
 8013590:	ec43 2b10 	vmov	d0, r2, r3
 8013594:	4770      	bx	lr
	...

08013598 <_sbrk_r>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	4c06      	ldr	r4, [pc, #24]	; (80135b4 <_sbrk_r+0x1c>)
 801359c:	2300      	movs	r3, #0
 801359e:	4605      	mov	r5, r0
 80135a0:	4608      	mov	r0, r1
 80135a2:	6023      	str	r3, [r4, #0]
 80135a4:	f7f2 f892 	bl	80056cc <_sbrk>
 80135a8:	1c43      	adds	r3, r0, #1
 80135aa:	d102      	bne.n	80135b2 <_sbrk_r+0x1a>
 80135ac:	6823      	ldr	r3, [r4, #0]
 80135ae:	b103      	cbz	r3, 80135b2 <_sbrk_r+0x1a>
 80135b0:	602b      	str	r3, [r5, #0]
 80135b2:	bd38      	pop	{r3, r4, r5, pc}
 80135b4:	20006808 	.word	0x20006808

080135b8 <sniprintf>:
 80135b8:	b40c      	push	{r2, r3}
 80135ba:	b530      	push	{r4, r5, lr}
 80135bc:	4b17      	ldr	r3, [pc, #92]	; (801361c <sniprintf+0x64>)
 80135be:	1e0c      	subs	r4, r1, #0
 80135c0:	b09d      	sub	sp, #116	; 0x74
 80135c2:	681d      	ldr	r5, [r3, #0]
 80135c4:	da08      	bge.n	80135d8 <sniprintf+0x20>
 80135c6:	238b      	movs	r3, #139	; 0x8b
 80135c8:	602b      	str	r3, [r5, #0]
 80135ca:	f04f 30ff 	mov.w	r0, #4294967295
 80135ce:	b01d      	add	sp, #116	; 0x74
 80135d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135d4:	b002      	add	sp, #8
 80135d6:	4770      	bx	lr
 80135d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80135dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80135e0:	bf14      	ite	ne
 80135e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80135e6:	4623      	moveq	r3, r4
 80135e8:	9304      	str	r3, [sp, #16]
 80135ea:	9307      	str	r3, [sp, #28]
 80135ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135f0:	9002      	str	r0, [sp, #8]
 80135f2:	9006      	str	r0, [sp, #24]
 80135f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80135fa:	ab21      	add	r3, sp, #132	; 0x84
 80135fc:	a902      	add	r1, sp, #8
 80135fe:	4628      	mov	r0, r5
 8013600:	9301      	str	r3, [sp, #4]
 8013602:	f001 fd23 	bl	801504c <_svfiprintf_r>
 8013606:	1c43      	adds	r3, r0, #1
 8013608:	bfbc      	itt	lt
 801360a:	238b      	movlt	r3, #139	; 0x8b
 801360c:	602b      	strlt	r3, [r5, #0]
 801360e:	2c00      	cmp	r4, #0
 8013610:	d0dd      	beq.n	80135ce <sniprintf+0x16>
 8013612:	9b02      	ldr	r3, [sp, #8]
 8013614:	2200      	movs	r2, #0
 8013616:	701a      	strb	r2, [r3, #0]
 8013618:	e7d9      	b.n	80135ce <sniprintf+0x16>
 801361a:	bf00      	nop
 801361c:	20000434 	.word	0x20000434

08013620 <siprintf>:
 8013620:	b40e      	push	{r1, r2, r3}
 8013622:	b500      	push	{lr}
 8013624:	b09c      	sub	sp, #112	; 0x70
 8013626:	ab1d      	add	r3, sp, #116	; 0x74
 8013628:	9002      	str	r0, [sp, #8]
 801362a:	9006      	str	r0, [sp, #24]
 801362c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013630:	4809      	ldr	r0, [pc, #36]	; (8013658 <siprintf+0x38>)
 8013632:	9107      	str	r1, [sp, #28]
 8013634:	9104      	str	r1, [sp, #16]
 8013636:	4909      	ldr	r1, [pc, #36]	; (801365c <siprintf+0x3c>)
 8013638:	f853 2b04 	ldr.w	r2, [r3], #4
 801363c:	9105      	str	r1, [sp, #20]
 801363e:	6800      	ldr	r0, [r0, #0]
 8013640:	9301      	str	r3, [sp, #4]
 8013642:	a902      	add	r1, sp, #8
 8013644:	f001 fd02 	bl	801504c <_svfiprintf_r>
 8013648:	9b02      	ldr	r3, [sp, #8]
 801364a:	2200      	movs	r2, #0
 801364c:	701a      	strb	r2, [r3, #0]
 801364e:	b01c      	add	sp, #112	; 0x70
 8013650:	f85d eb04 	ldr.w	lr, [sp], #4
 8013654:	b003      	add	sp, #12
 8013656:	4770      	bx	lr
 8013658:	20000434 	.word	0x20000434
 801365c:	ffff0208 	.word	0xffff0208

08013660 <__sread>:
 8013660:	b510      	push	{r4, lr}
 8013662:	460c      	mov	r4, r1
 8013664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013668:	f001 fde8 	bl	801523c <_read_r>
 801366c:	2800      	cmp	r0, #0
 801366e:	bfab      	itete	ge
 8013670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013672:	89a3      	ldrhlt	r3, [r4, #12]
 8013674:	181b      	addge	r3, r3, r0
 8013676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801367a:	bfac      	ite	ge
 801367c:	6563      	strge	r3, [r4, #84]	; 0x54
 801367e:	81a3      	strhlt	r3, [r4, #12]
 8013680:	bd10      	pop	{r4, pc}

08013682 <__swrite>:
 8013682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013686:	461f      	mov	r7, r3
 8013688:	898b      	ldrh	r3, [r1, #12]
 801368a:	05db      	lsls	r3, r3, #23
 801368c:	4605      	mov	r5, r0
 801368e:	460c      	mov	r4, r1
 8013690:	4616      	mov	r6, r2
 8013692:	d505      	bpl.n	80136a0 <__swrite+0x1e>
 8013694:	2302      	movs	r3, #2
 8013696:	2200      	movs	r2, #0
 8013698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801369c:	f001 f8dc 	bl	8014858 <_lseek_r>
 80136a0:	89a3      	ldrh	r3, [r4, #12]
 80136a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136aa:	81a3      	strh	r3, [r4, #12]
 80136ac:	4632      	mov	r2, r6
 80136ae:	463b      	mov	r3, r7
 80136b0:	4628      	mov	r0, r5
 80136b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136b6:	f000 b869 	b.w	801378c <_write_r>

080136ba <__sseek>:
 80136ba:	b510      	push	{r4, lr}
 80136bc:	460c      	mov	r4, r1
 80136be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136c2:	f001 f8c9 	bl	8014858 <_lseek_r>
 80136c6:	1c43      	adds	r3, r0, #1
 80136c8:	89a3      	ldrh	r3, [r4, #12]
 80136ca:	bf15      	itete	ne
 80136cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80136ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80136d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80136d6:	81a3      	strheq	r3, [r4, #12]
 80136d8:	bf18      	it	ne
 80136da:	81a3      	strhne	r3, [r4, #12]
 80136dc:	bd10      	pop	{r4, pc}

080136de <__sclose>:
 80136de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136e2:	f000 b8db 	b.w	801389c <_close_r>
	...

080136e8 <__swbuf_r>:
 80136e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ea:	460e      	mov	r6, r1
 80136ec:	4614      	mov	r4, r2
 80136ee:	4605      	mov	r5, r0
 80136f0:	b118      	cbz	r0, 80136fa <__swbuf_r+0x12>
 80136f2:	6983      	ldr	r3, [r0, #24]
 80136f4:	b90b      	cbnz	r3, 80136fa <__swbuf_r+0x12>
 80136f6:	f001 f817 	bl	8014728 <__sinit>
 80136fa:	4b21      	ldr	r3, [pc, #132]	; (8013780 <__swbuf_r+0x98>)
 80136fc:	429c      	cmp	r4, r3
 80136fe:	d12a      	bne.n	8013756 <__swbuf_r+0x6e>
 8013700:	686c      	ldr	r4, [r5, #4]
 8013702:	69a3      	ldr	r3, [r4, #24]
 8013704:	60a3      	str	r3, [r4, #8]
 8013706:	89a3      	ldrh	r3, [r4, #12]
 8013708:	071a      	lsls	r2, r3, #28
 801370a:	d52e      	bpl.n	801376a <__swbuf_r+0x82>
 801370c:	6923      	ldr	r3, [r4, #16]
 801370e:	b363      	cbz	r3, 801376a <__swbuf_r+0x82>
 8013710:	6923      	ldr	r3, [r4, #16]
 8013712:	6820      	ldr	r0, [r4, #0]
 8013714:	1ac0      	subs	r0, r0, r3
 8013716:	6963      	ldr	r3, [r4, #20]
 8013718:	b2f6      	uxtb	r6, r6
 801371a:	4283      	cmp	r3, r0
 801371c:	4637      	mov	r7, r6
 801371e:	dc04      	bgt.n	801372a <__swbuf_r+0x42>
 8013720:	4621      	mov	r1, r4
 8013722:	4628      	mov	r0, r5
 8013724:	f000 ff96 	bl	8014654 <_fflush_r>
 8013728:	bb28      	cbnz	r0, 8013776 <__swbuf_r+0x8e>
 801372a:	68a3      	ldr	r3, [r4, #8]
 801372c:	3b01      	subs	r3, #1
 801372e:	60a3      	str	r3, [r4, #8]
 8013730:	6823      	ldr	r3, [r4, #0]
 8013732:	1c5a      	adds	r2, r3, #1
 8013734:	6022      	str	r2, [r4, #0]
 8013736:	701e      	strb	r6, [r3, #0]
 8013738:	6963      	ldr	r3, [r4, #20]
 801373a:	3001      	adds	r0, #1
 801373c:	4283      	cmp	r3, r0
 801373e:	d004      	beq.n	801374a <__swbuf_r+0x62>
 8013740:	89a3      	ldrh	r3, [r4, #12]
 8013742:	07db      	lsls	r3, r3, #31
 8013744:	d519      	bpl.n	801377a <__swbuf_r+0x92>
 8013746:	2e0a      	cmp	r6, #10
 8013748:	d117      	bne.n	801377a <__swbuf_r+0x92>
 801374a:	4621      	mov	r1, r4
 801374c:	4628      	mov	r0, r5
 801374e:	f000 ff81 	bl	8014654 <_fflush_r>
 8013752:	b190      	cbz	r0, 801377a <__swbuf_r+0x92>
 8013754:	e00f      	b.n	8013776 <__swbuf_r+0x8e>
 8013756:	4b0b      	ldr	r3, [pc, #44]	; (8013784 <__swbuf_r+0x9c>)
 8013758:	429c      	cmp	r4, r3
 801375a:	d101      	bne.n	8013760 <__swbuf_r+0x78>
 801375c:	68ac      	ldr	r4, [r5, #8]
 801375e:	e7d0      	b.n	8013702 <__swbuf_r+0x1a>
 8013760:	4b09      	ldr	r3, [pc, #36]	; (8013788 <__swbuf_r+0xa0>)
 8013762:	429c      	cmp	r4, r3
 8013764:	bf08      	it	eq
 8013766:	68ec      	ldreq	r4, [r5, #12]
 8013768:	e7cb      	b.n	8013702 <__swbuf_r+0x1a>
 801376a:	4621      	mov	r1, r4
 801376c:	4628      	mov	r0, r5
 801376e:	f000 f81f 	bl	80137b0 <__swsetup_r>
 8013772:	2800      	cmp	r0, #0
 8013774:	d0cc      	beq.n	8013710 <__swbuf_r+0x28>
 8013776:	f04f 37ff 	mov.w	r7, #4294967295
 801377a:	4638      	mov	r0, r7
 801377c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801377e:	bf00      	nop
 8013780:	08018274 	.word	0x08018274
 8013784:	08018294 	.word	0x08018294
 8013788:	08018254 	.word	0x08018254

0801378c <_write_r>:
 801378c:	b538      	push	{r3, r4, r5, lr}
 801378e:	4c07      	ldr	r4, [pc, #28]	; (80137ac <_write_r+0x20>)
 8013790:	4605      	mov	r5, r0
 8013792:	4608      	mov	r0, r1
 8013794:	4611      	mov	r1, r2
 8013796:	2200      	movs	r2, #0
 8013798:	6022      	str	r2, [r4, #0]
 801379a:	461a      	mov	r2, r3
 801379c:	f7f1 ff45 	bl	800562a <_write>
 80137a0:	1c43      	adds	r3, r0, #1
 80137a2:	d102      	bne.n	80137aa <_write_r+0x1e>
 80137a4:	6823      	ldr	r3, [r4, #0]
 80137a6:	b103      	cbz	r3, 80137aa <_write_r+0x1e>
 80137a8:	602b      	str	r3, [r5, #0]
 80137aa:	bd38      	pop	{r3, r4, r5, pc}
 80137ac:	20006808 	.word	0x20006808

080137b0 <__swsetup_r>:
 80137b0:	4b32      	ldr	r3, [pc, #200]	; (801387c <__swsetup_r+0xcc>)
 80137b2:	b570      	push	{r4, r5, r6, lr}
 80137b4:	681d      	ldr	r5, [r3, #0]
 80137b6:	4606      	mov	r6, r0
 80137b8:	460c      	mov	r4, r1
 80137ba:	b125      	cbz	r5, 80137c6 <__swsetup_r+0x16>
 80137bc:	69ab      	ldr	r3, [r5, #24]
 80137be:	b913      	cbnz	r3, 80137c6 <__swsetup_r+0x16>
 80137c0:	4628      	mov	r0, r5
 80137c2:	f000 ffb1 	bl	8014728 <__sinit>
 80137c6:	4b2e      	ldr	r3, [pc, #184]	; (8013880 <__swsetup_r+0xd0>)
 80137c8:	429c      	cmp	r4, r3
 80137ca:	d10f      	bne.n	80137ec <__swsetup_r+0x3c>
 80137cc:	686c      	ldr	r4, [r5, #4]
 80137ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	0715      	lsls	r5, r2, #28
 80137d6:	d42c      	bmi.n	8013832 <__swsetup_r+0x82>
 80137d8:	06d0      	lsls	r0, r2, #27
 80137da:	d411      	bmi.n	8013800 <__swsetup_r+0x50>
 80137dc:	2209      	movs	r2, #9
 80137de:	6032      	str	r2, [r6, #0]
 80137e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137e4:	81a3      	strh	r3, [r4, #12]
 80137e6:	f04f 30ff 	mov.w	r0, #4294967295
 80137ea:	e03e      	b.n	801386a <__swsetup_r+0xba>
 80137ec:	4b25      	ldr	r3, [pc, #148]	; (8013884 <__swsetup_r+0xd4>)
 80137ee:	429c      	cmp	r4, r3
 80137f0:	d101      	bne.n	80137f6 <__swsetup_r+0x46>
 80137f2:	68ac      	ldr	r4, [r5, #8]
 80137f4:	e7eb      	b.n	80137ce <__swsetup_r+0x1e>
 80137f6:	4b24      	ldr	r3, [pc, #144]	; (8013888 <__swsetup_r+0xd8>)
 80137f8:	429c      	cmp	r4, r3
 80137fa:	bf08      	it	eq
 80137fc:	68ec      	ldreq	r4, [r5, #12]
 80137fe:	e7e6      	b.n	80137ce <__swsetup_r+0x1e>
 8013800:	0751      	lsls	r1, r2, #29
 8013802:	d512      	bpl.n	801382a <__swsetup_r+0x7a>
 8013804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013806:	b141      	cbz	r1, 801381a <__swsetup_r+0x6a>
 8013808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801380c:	4299      	cmp	r1, r3
 801380e:	d002      	beq.n	8013816 <__swsetup_r+0x66>
 8013810:	4630      	mov	r0, r6
 8013812:	f7ff f86d 	bl	80128f0 <_free_r>
 8013816:	2300      	movs	r3, #0
 8013818:	6363      	str	r3, [r4, #52]	; 0x34
 801381a:	89a3      	ldrh	r3, [r4, #12]
 801381c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013820:	81a3      	strh	r3, [r4, #12]
 8013822:	2300      	movs	r3, #0
 8013824:	6063      	str	r3, [r4, #4]
 8013826:	6923      	ldr	r3, [r4, #16]
 8013828:	6023      	str	r3, [r4, #0]
 801382a:	89a3      	ldrh	r3, [r4, #12]
 801382c:	f043 0308 	orr.w	r3, r3, #8
 8013830:	81a3      	strh	r3, [r4, #12]
 8013832:	6923      	ldr	r3, [r4, #16]
 8013834:	b94b      	cbnz	r3, 801384a <__swsetup_r+0x9a>
 8013836:	89a3      	ldrh	r3, [r4, #12]
 8013838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013840:	d003      	beq.n	801384a <__swsetup_r+0x9a>
 8013842:	4621      	mov	r1, r4
 8013844:	4630      	mov	r0, r6
 8013846:	f001 f83d 	bl	80148c4 <__smakebuf_r>
 801384a:	89a2      	ldrh	r2, [r4, #12]
 801384c:	f012 0301 	ands.w	r3, r2, #1
 8013850:	d00c      	beq.n	801386c <__swsetup_r+0xbc>
 8013852:	2300      	movs	r3, #0
 8013854:	60a3      	str	r3, [r4, #8]
 8013856:	6963      	ldr	r3, [r4, #20]
 8013858:	425b      	negs	r3, r3
 801385a:	61a3      	str	r3, [r4, #24]
 801385c:	6923      	ldr	r3, [r4, #16]
 801385e:	b953      	cbnz	r3, 8013876 <__swsetup_r+0xc6>
 8013860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013864:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013868:	d1ba      	bne.n	80137e0 <__swsetup_r+0x30>
 801386a:	bd70      	pop	{r4, r5, r6, pc}
 801386c:	0792      	lsls	r2, r2, #30
 801386e:	bf58      	it	pl
 8013870:	6963      	ldrpl	r3, [r4, #20]
 8013872:	60a3      	str	r3, [r4, #8]
 8013874:	e7f2      	b.n	801385c <__swsetup_r+0xac>
 8013876:	2000      	movs	r0, #0
 8013878:	e7f7      	b.n	801386a <__swsetup_r+0xba>
 801387a:	bf00      	nop
 801387c:	20000434 	.word	0x20000434
 8013880:	08018274 	.word	0x08018274
 8013884:	08018294 	.word	0x08018294
 8013888:	08018254 	.word	0x08018254

0801388c <abort>:
 801388c:	b508      	push	{r3, lr}
 801388e:	2006      	movs	r0, #6
 8013890:	f001 fd0e 	bl	80152b0 <raise>
 8013894:	2001      	movs	r0, #1
 8013896:	f7f1 fea1 	bl	80055dc <_exit>
	...

0801389c <_close_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4c06      	ldr	r4, [pc, #24]	; (80138b8 <_close_r+0x1c>)
 80138a0:	2300      	movs	r3, #0
 80138a2:	4605      	mov	r5, r0
 80138a4:	4608      	mov	r0, r1
 80138a6:	6023      	str	r3, [r4, #0]
 80138a8:	f7f1 fedb 	bl	8005662 <_close>
 80138ac:	1c43      	adds	r3, r0, #1
 80138ae:	d102      	bne.n	80138b6 <_close_r+0x1a>
 80138b0:	6823      	ldr	r3, [r4, #0]
 80138b2:	b103      	cbz	r3, 80138b6 <_close_r+0x1a>
 80138b4:	602b      	str	r3, [r5, #0]
 80138b6:	bd38      	pop	{r3, r4, r5, pc}
 80138b8:	20006808 	.word	0x20006808

080138bc <quorem>:
 80138bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c0:	6903      	ldr	r3, [r0, #16]
 80138c2:	690c      	ldr	r4, [r1, #16]
 80138c4:	42a3      	cmp	r3, r4
 80138c6:	4680      	mov	r8, r0
 80138c8:	f2c0 8082 	blt.w	80139d0 <quorem+0x114>
 80138cc:	3c01      	subs	r4, #1
 80138ce:	f101 0714 	add.w	r7, r1, #20
 80138d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80138d6:	f100 0614 	add.w	r6, r0, #20
 80138da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80138de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80138e2:	eb06 030c 	add.w	r3, r6, ip
 80138e6:	3501      	adds	r5, #1
 80138e8:	eb07 090c 	add.w	r9, r7, ip
 80138ec:	9301      	str	r3, [sp, #4]
 80138ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80138f2:	b395      	cbz	r5, 801395a <quorem+0x9e>
 80138f4:	f04f 0a00 	mov.w	sl, #0
 80138f8:	4638      	mov	r0, r7
 80138fa:	46b6      	mov	lr, r6
 80138fc:	46d3      	mov	fp, sl
 80138fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8013902:	b293      	uxth	r3, r2
 8013904:	fb05 a303 	mla	r3, r5, r3, sl
 8013908:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801390c:	b29b      	uxth	r3, r3
 801390e:	ebab 0303 	sub.w	r3, fp, r3
 8013912:	0c12      	lsrs	r2, r2, #16
 8013914:	f8de b000 	ldr.w	fp, [lr]
 8013918:	fb05 a202 	mla	r2, r5, r2, sl
 801391c:	fa13 f38b 	uxtah	r3, r3, fp
 8013920:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013924:	fa1f fb82 	uxth.w	fp, r2
 8013928:	f8de 2000 	ldr.w	r2, [lr]
 801392c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013934:	b29b      	uxth	r3, r3
 8013936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801393a:	4581      	cmp	r9, r0
 801393c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013940:	f84e 3b04 	str.w	r3, [lr], #4
 8013944:	d2db      	bcs.n	80138fe <quorem+0x42>
 8013946:	f856 300c 	ldr.w	r3, [r6, ip]
 801394a:	b933      	cbnz	r3, 801395a <quorem+0x9e>
 801394c:	9b01      	ldr	r3, [sp, #4]
 801394e:	3b04      	subs	r3, #4
 8013950:	429e      	cmp	r6, r3
 8013952:	461a      	mov	r2, r3
 8013954:	d330      	bcc.n	80139b8 <quorem+0xfc>
 8013956:	f8c8 4010 	str.w	r4, [r8, #16]
 801395a:	4640      	mov	r0, r8
 801395c:	f001 fa22 	bl	8014da4 <__mcmp>
 8013960:	2800      	cmp	r0, #0
 8013962:	db25      	blt.n	80139b0 <quorem+0xf4>
 8013964:	3501      	adds	r5, #1
 8013966:	4630      	mov	r0, r6
 8013968:	f04f 0c00 	mov.w	ip, #0
 801396c:	f857 2b04 	ldr.w	r2, [r7], #4
 8013970:	f8d0 e000 	ldr.w	lr, [r0]
 8013974:	b293      	uxth	r3, r2
 8013976:	ebac 0303 	sub.w	r3, ip, r3
 801397a:	0c12      	lsrs	r2, r2, #16
 801397c:	fa13 f38e 	uxtah	r3, r3, lr
 8013980:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013988:	b29b      	uxth	r3, r3
 801398a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801398e:	45b9      	cmp	r9, r7
 8013990:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013994:	f840 3b04 	str.w	r3, [r0], #4
 8013998:	d2e8      	bcs.n	801396c <quorem+0xb0>
 801399a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801399e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80139a2:	b92a      	cbnz	r2, 80139b0 <quorem+0xf4>
 80139a4:	3b04      	subs	r3, #4
 80139a6:	429e      	cmp	r6, r3
 80139a8:	461a      	mov	r2, r3
 80139aa:	d30b      	bcc.n	80139c4 <quorem+0x108>
 80139ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80139b0:	4628      	mov	r0, r5
 80139b2:	b003      	add	sp, #12
 80139b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b8:	6812      	ldr	r2, [r2, #0]
 80139ba:	3b04      	subs	r3, #4
 80139bc:	2a00      	cmp	r2, #0
 80139be:	d1ca      	bne.n	8013956 <quorem+0x9a>
 80139c0:	3c01      	subs	r4, #1
 80139c2:	e7c5      	b.n	8013950 <quorem+0x94>
 80139c4:	6812      	ldr	r2, [r2, #0]
 80139c6:	3b04      	subs	r3, #4
 80139c8:	2a00      	cmp	r2, #0
 80139ca:	d1ef      	bne.n	80139ac <quorem+0xf0>
 80139cc:	3c01      	subs	r4, #1
 80139ce:	e7ea      	b.n	80139a6 <quorem+0xea>
 80139d0:	2000      	movs	r0, #0
 80139d2:	e7ee      	b.n	80139b2 <quorem+0xf6>
 80139d4:	0000      	movs	r0, r0
	...

080139d8 <_dtoa_r>:
 80139d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139dc:	ec57 6b10 	vmov	r6, r7, d0
 80139e0:	b097      	sub	sp, #92	; 0x5c
 80139e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80139e4:	9106      	str	r1, [sp, #24]
 80139e6:	4604      	mov	r4, r0
 80139e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80139ea:	9312      	str	r3, [sp, #72]	; 0x48
 80139ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80139f0:	e9cd 6700 	strd	r6, r7, [sp]
 80139f4:	b93d      	cbnz	r5, 8013a06 <_dtoa_r+0x2e>
 80139f6:	2010      	movs	r0, #16
 80139f8:	f7fe ff56 	bl	80128a8 <malloc>
 80139fc:	6260      	str	r0, [r4, #36]	; 0x24
 80139fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013a02:	6005      	str	r5, [r0, #0]
 8013a04:	60c5      	str	r5, [r0, #12]
 8013a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a08:	6819      	ldr	r1, [r3, #0]
 8013a0a:	b151      	cbz	r1, 8013a22 <_dtoa_r+0x4a>
 8013a0c:	685a      	ldr	r2, [r3, #4]
 8013a0e:	604a      	str	r2, [r1, #4]
 8013a10:	2301      	movs	r3, #1
 8013a12:	4093      	lsls	r3, r2
 8013a14:	608b      	str	r3, [r1, #8]
 8013a16:	4620      	mov	r0, r4
 8013a18:	f000 ffe3 	bl	80149e2 <_Bfree>
 8013a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a1e:	2200      	movs	r2, #0
 8013a20:	601a      	str	r2, [r3, #0]
 8013a22:	1e3b      	subs	r3, r7, #0
 8013a24:	bfbb      	ittet	lt
 8013a26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013a2a:	9301      	strlt	r3, [sp, #4]
 8013a2c:	2300      	movge	r3, #0
 8013a2e:	2201      	movlt	r2, #1
 8013a30:	bfac      	ite	ge
 8013a32:	f8c8 3000 	strge.w	r3, [r8]
 8013a36:	f8c8 2000 	strlt.w	r2, [r8]
 8013a3a:	4baf      	ldr	r3, [pc, #700]	; (8013cf8 <_dtoa_r+0x320>)
 8013a3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013a40:	ea33 0308 	bics.w	r3, r3, r8
 8013a44:	d114      	bne.n	8013a70 <_dtoa_r+0x98>
 8013a46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a48:	f242 730f 	movw	r3, #9999	; 0x270f
 8013a4c:	6013      	str	r3, [r2, #0]
 8013a4e:	9b00      	ldr	r3, [sp, #0]
 8013a50:	b923      	cbnz	r3, 8013a5c <_dtoa_r+0x84>
 8013a52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013a56:	2800      	cmp	r0, #0
 8013a58:	f000 8542 	beq.w	80144e0 <_dtoa_r+0xb08>
 8013a5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013d0c <_dtoa_r+0x334>
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f000 8544 	beq.w	80144f0 <_dtoa_r+0xb18>
 8013a68:	f10b 0303 	add.w	r3, fp, #3
 8013a6c:	f000 bd3e 	b.w	80144ec <_dtoa_r+0xb14>
 8013a70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013a74:	2200      	movs	r2, #0
 8013a76:	2300      	movs	r3, #0
 8013a78:	4630      	mov	r0, r6
 8013a7a:	4639      	mov	r1, r7
 8013a7c:	f7ed f844 	bl	8000b08 <__aeabi_dcmpeq>
 8013a80:	4681      	mov	r9, r0
 8013a82:	b168      	cbz	r0, 8013aa0 <_dtoa_r+0xc8>
 8013a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a86:	2301      	movs	r3, #1
 8013a88:	6013      	str	r3, [r2, #0]
 8013a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	f000 8524 	beq.w	80144da <_dtoa_r+0xb02>
 8013a92:	4b9a      	ldr	r3, [pc, #616]	; (8013cfc <_dtoa_r+0x324>)
 8013a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013a96:	f103 3bff 	add.w	fp, r3, #4294967295
 8013a9a:	6013      	str	r3, [r2, #0]
 8013a9c:	f000 bd28 	b.w	80144f0 <_dtoa_r+0xb18>
 8013aa0:	aa14      	add	r2, sp, #80	; 0x50
 8013aa2:	a915      	add	r1, sp, #84	; 0x54
 8013aa4:	ec47 6b10 	vmov	d0, r6, r7
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	f001 f9f2 	bl	8014e92 <__d2b>
 8013aae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013ab2:	9004      	str	r0, [sp, #16]
 8013ab4:	2d00      	cmp	r5, #0
 8013ab6:	d07c      	beq.n	8013bb2 <_dtoa_r+0x1da>
 8013ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013abc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013ac0:	46b2      	mov	sl, r6
 8013ac2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013aca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013ace:	2200      	movs	r2, #0
 8013ad0:	4b8b      	ldr	r3, [pc, #556]	; (8013d00 <_dtoa_r+0x328>)
 8013ad2:	4650      	mov	r0, sl
 8013ad4:	4659      	mov	r1, fp
 8013ad6:	f7ec fbf7 	bl	80002c8 <__aeabi_dsub>
 8013ada:	a381      	add	r3, pc, #516	; (adr r3, 8013ce0 <_dtoa_r+0x308>)
 8013adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae0:	f7ec fdaa 	bl	8000638 <__aeabi_dmul>
 8013ae4:	a380      	add	r3, pc, #512	; (adr r3, 8013ce8 <_dtoa_r+0x310>)
 8013ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aea:	f7ec fbef 	bl	80002cc <__adddf3>
 8013aee:	4606      	mov	r6, r0
 8013af0:	4628      	mov	r0, r5
 8013af2:	460f      	mov	r7, r1
 8013af4:	f7ec fd36 	bl	8000564 <__aeabi_i2d>
 8013af8:	a37d      	add	r3, pc, #500	; (adr r3, 8013cf0 <_dtoa_r+0x318>)
 8013afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afe:	f7ec fd9b 	bl	8000638 <__aeabi_dmul>
 8013b02:	4602      	mov	r2, r0
 8013b04:	460b      	mov	r3, r1
 8013b06:	4630      	mov	r0, r6
 8013b08:	4639      	mov	r1, r7
 8013b0a:	f7ec fbdf 	bl	80002cc <__adddf3>
 8013b0e:	4606      	mov	r6, r0
 8013b10:	460f      	mov	r7, r1
 8013b12:	f7ed f841 	bl	8000b98 <__aeabi_d2iz>
 8013b16:	2200      	movs	r2, #0
 8013b18:	4682      	mov	sl, r0
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	4639      	mov	r1, r7
 8013b20:	f7ec fffc 	bl	8000b1c <__aeabi_dcmplt>
 8013b24:	b148      	cbz	r0, 8013b3a <_dtoa_r+0x162>
 8013b26:	4650      	mov	r0, sl
 8013b28:	f7ec fd1c 	bl	8000564 <__aeabi_i2d>
 8013b2c:	4632      	mov	r2, r6
 8013b2e:	463b      	mov	r3, r7
 8013b30:	f7ec ffea 	bl	8000b08 <__aeabi_dcmpeq>
 8013b34:	b908      	cbnz	r0, 8013b3a <_dtoa_r+0x162>
 8013b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b3a:	f1ba 0f16 	cmp.w	sl, #22
 8013b3e:	d859      	bhi.n	8013bf4 <_dtoa_r+0x21c>
 8013b40:	4970      	ldr	r1, [pc, #448]	; (8013d04 <_dtoa_r+0x32c>)
 8013b42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b4e:	f7ed f803 	bl	8000b58 <__aeabi_dcmpgt>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d050      	beq.n	8013bf8 <_dtoa_r+0x220>
 8013b56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b60:	1b5d      	subs	r5, r3, r5
 8013b62:	f1b5 0801 	subs.w	r8, r5, #1
 8013b66:	bf49      	itett	mi
 8013b68:	f1c5 0301 	rsbmi	r3, r5, #1
 8013b6c:	2300      	movpl	r3, #0
 8013b6e:	9305      	strmi	r3, [sp, #20]
 8013b70:	f04f 0800 	movmi.w	r8, #0
 8013b74:	bf58      	it	pl
 8013b76:	9305      	strpl	r3, [sp, #20]
 8013b78:	f1ba 0f00 	cmp.w	sl, #0
 8013b7c:	db3e      	blt.n	8013bfc <_dtoa_r+0x224>
 8013b7e:	2300      	movs	r3, #0
 8013b80:	44d0      	add	r8, sl
 8013b82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013b86:	9307      	str	r3, [sp, #28]
 8013b88:	9b06      	ldr	r3, [sp, #24]
 8013b8a:	2b09      	cmp	r3, #9
 8013b8c:	f200 8090 	bhi.w	8013cb0 <_dtoa_r+0x2d8>
 8013b90:	2b05      	cmp	r3, #5
 8013b92:	bfc4      	itt	gt
 8013b94:	3b04      	subgt	r3, #4
 8013b96:	9306      	strgt	r3, [sp, #24]
 8013b98:	9b06      	ldr	r3, [sp, #24]
 8013b9a:	f1a3 0302 	sub.w	r3, r3, #2
 8013b9e:	bfcc      	ite	gt
 8013ba0:	2500      	movgt	r5, #0
 8013ba2:	2501      	movle	r5, #1
 8013ba4:	2b03      	cmp	r3, #3
 8013ba6:	f200 808f 	bhi.w	8013cc8 <_dtoa_r+0x2f0>
 8013baa:	e8df f003 	tbb	[pc, r3]
 8013bae:	7f7d      	.short	0x7f7d
 8013bb0:	7131      	.short	0x7131
 8013bb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013bb6:	441d      	add	r5, r3
 8013bb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013bbc:	2820      	cmp	r0, #32
 8013bbe:	dd13      	ble.n	8013be8 <_dtoa_r+0x210>
 8013bc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013bc4:	9b00      	ldr	r3, [sp, #0]
 8013bc6:	fa08 f800 	lsl.w	r8, r8, r0
 8013bca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013bce:	fa23 f000 	lsr.w	r0, r3, r0
 8013bd2:	ea48 0000 	orr.w	r0, r8, r0
 8013bd6:	f7ec fcb5 	bl	8000544 <__aeabi_ui2d>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	4682      	mov	sl, r0
 8013bde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013be2:	3d01      	subs	r5, #1
 8013be4:	9313      	str	r3, [sp, #76]	; 0x4c
 8013be6:	e772      	b.n	8013ace <_dtoa_r+0xf6>
 8013be8:	9b00      	ldr	r3, [sp, #0]
 8013bea:	f1c0 0020 	rsb	r0, r0, #32
 8013bee:	fa03 f000 	lsl.w	r0, r3, r0
 8013bf2:	e7f0      	b.n	8013bd6 <_dtoa_r+0x1fe>
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	e7b1      	b.n	8013b5c <_dtoa_r+0x184>
 8013bf8:	900f      	str	r0, [sp, #60]	; 0x3c
 8013bfa:	e7b0      	b.n	8013b5e <_dtoa_r+0x186>
 8013bfc:	9b05      	ldr	r3, [sp, #20]
 8013bfe:	eba3 030a 	sub.w	r3, r3, sl
 8013c02:	9305      	str	r3, [sp, #20]
 8013c04:	f1ca 0300 	rsb	r3, sl, #0
 8013c08:	9307      	str	r3, [sp, #28]
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8013c0e:	e7bb      	b.n	8013b88 <_dtoa_r+0x1b0>
 8013c10:	2301      	movs	r3, #1
 8013c12:	930a      	str	r3, [sp, #40]	; 0x28
 8013c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	dd59      	ble.n	8013cce <_dtoa_r+0x2f6>
 8013c1a:	9302      	str	r3, [sp, #8]
 8013c1c:	4699      	mov	r9, r3
 8013c1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c20:	2200      	movs	r2, #0
 8013c22:	6072      	str	r2, [r6, #4]
 8013c24:	2204      	movs	r2, #4
 8013c26:	f102 0014 	add.w	r0, r2, #20
 8013c2a:	4298      	cmp	r0, r3
 8013c2c:	6871      	ldr	r1, [r6, #4]
 8013c2e:	d953      	bls.n	8013cd8 <_dtoa_r+0x300>
 8013c30:	4620      	mov	r0, r4
 8013c32:	f000 fea2 	bl	801497a <_Balloc>
 8013c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c38:	6030      	str	r0, [r6, #0]
 8013c3a:	f1b9 0f0e 	cmp.w	r9, #14
 8013c3e:	f8d3 b000 	ldr.w	fp, [r3]
 8013c42:	f200 80e6 	bhi.w	8013e12 <_dtoa_r+0x43a>
 8013c46:	2d00      	cmp	r5, #0
 8013c48:	f000 80e3 	beq.w	8013e12 <_dtoa_r+0x43a>
 8013c4c:	ed9d 7b00 	vldr	d7, [sp]
 8013c50:	f1ba 0f00 	cmp.w	sl, #0
 8013c54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013c58:	dd74      	ble.n	8013d44 <_dtoa_r+0x36c>
 8013c5a:	4a2a      	ldr	r2, [pc, #168]	; (8013d04 <_dtoa_r+0x32c>)
 8013c5c:	f00a 030f 	and.w	r3, sl, #15
 8013c60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013c64:	ed93 7b00 	vldr	d7, [r3]
 8013c68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013c6c:	06f0      	lsls	r0, r6, #27
 8013c6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013c72:	d565      	bpl.n	8013d40 <_dtoa_r+0x368>
 8013c74:	4b24      	ldr	r3, [pc, #144]	; (8013d08 <_dtoa_r+0x330>)
 8013c76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013c7e:	f7ec fe05 	bl	800088c <__aeabi_ddiv>
 8013c82:	e9cd 0100 	strd	r0, r1, [sp]
 8013c86:	f006 060f 	and.w	r6, r6, #15
 8013c8a:	2503      	movs	r5, #3
 8013c8c:	4f1e      	ldr	r7, [pc, #120]	; (8013d08 <_dtoa_r+0x330>)
 8013c8e:	e04c      	b.n	8013d2a <_dtoa_r+0x352>
 8013c90:	2301      	movs	r3, #1
 8013c92:	930a      	str	r3, [sp, #40]	; 0x28
 8013c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c96:	4453      	add	r3, sl
 8013c98:	f103 0901 	add.w	r9, r3, #1
 8013c9c:	9302      	str	r3, [sp, #8]
 8013c9e:	464b      	mov	r3, r9
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	bfb8      	it	lt
 8013ca4:	2301      	movlt	r3, #1
 8013ca6:	e7ba      	b.n	8013c1e <_dtoa_r+0x246>
 8013ca8:	2300      	movs	r3, #0
 8013caa:	e7b2      	b.n	8013c12 <_dtoa_r+0x23a>
 8013cac:	2300      	movs	r3, #0
 8013cae:	e7f0      	b.n	8013c92 <_dtoa_r+0x2ba>
 8013cb0:	2501      	movs	r5, #1
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	9306      	str	r3, [sp, #24]
 8013cb6:	950a      	str	r5, [sp, #40]	; 0x28
 8013cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cbc:	9302      	str	r3, [sp, #8]
 8013cbe:	4699      	mov	r9, r3
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	2312      	movs	r3, #18
 8013cc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8013cc6:	e7aa      	b.n	8013c1e <_dtoa_r+0x246>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	930a      	str	r3, [sp, #40]	; 0x28
 8013ccc:	e7f4      	b.n	8013cb8 <_dtoa_r+0x2e0>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	9302      	str	r3, [sp, #8]
 8013cd2:	4699      	mov	r9, r3
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	e7f5      	b.n	8013cc4 <_dtoa_r+0x2ec>
 8013cd8:	3101      	adds	r1, #1
 8013cda:	6071      	str	r1, [r6, #4]
 8013cdc:	0052      	lsls	r2, r2, #1
 8013cde:	e7a2      	b.n	8013c26 <_dtoa_r+0x24e>
 8013ce0:	636f4361 	.word	0x636f4361
 8013ce4:	3fd287a7 	.word	0x3fd287a7
 8013ce8:	8b60c8b3 	.word	0x8b60c8b3
 8013cec:	3fc68a28 	.word	0x3fc68a28
 8013cf0:	509f79fb 	.word	0x509f79fb
 8013cf4:	3fd34413 	.word	0x3fd34413
 8013cf8:	7ff00000 	.word	0x7ff00000
 8013cfc:	08018222 	.word	0x08018222
 8013d00:	3ff80000 	.word	0x3ff80000
 8013d04:	080182e0 	.word	0x080182e0
 8013d08:	080182b8 	.word	0x080182b8
 8013d0c:	0801824e 	.word	0x0801824e
 8013d10:	07f1      	lsls	r1, r6, #31
 8013d12:	d508      	bpl.n	8013d26 <_dtoa_r+0x34e>
 8013d14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d1c:	f7ec fc8c 	bl	8000638 <__aeabi_dmul>
 8013d20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013d24:	3501      	adds	r5, #1
 8013d26:	1076      	asrs	r6, r6, #1
 8013d28:	3708      	adds	r7, #8
 8013d2a:	2e00      	cmp	r6, #0
 8013d2c:	d1f0      	bne.n	8013d10 <_dtoa_r+0x338>
 8013d2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d36:	f7ec fda9 	bl	800088c <__aeabi_ddiv>
 8013d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8013d3e:	e01a      	b.n	8013d76 <_dtoa_r+0x39e>
 8013d40:	2502      	movs	r5, #2
 8013d42:	e7a3      	b.n	8013c8c <_dtoa_r+0x2b4>
 8013d44:	f000 80a0 	beq.w	8013e88 <_dtoa_r+0x4b0>
 8013d48:	f1ca 0600 	rsb	r6, sl, #0
 8013d4c:	4b9f      	ldr	r3, [pc, #636]	; (8013fcc <_dtoa_r+0x5f4>)
 8013d4e:	4fa0      	ldr	r7, [pc, #640]	; (8013fd0 <_dtoa_r+0x5f8>)
 8013d50:	f006 020f 	and.w	r2, r6, #15
 8013d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013d60:	f7ec fc6a 	bl	8000638 <__aeabi_dmul>
 8013d64:	e9cd 0100 	strd	r0, r1, [sp]
 8013d68:	1136      	asrs	r6, r6, #4
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	2502      	movs	r5, #2
 8013d6e:	2e00      	cmp	r6, #0
 8013d70:	d17f      	bne.n	8013e72 <_dtoa_r+0x49a>
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d1e1      	bne.n	8013d3a <_dtoa_r+0x362>
 8013d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	f000 8087 	beq.w	8013e8c <_dtoa_r+0x4b4>
 8013d7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013d82:	2200      	movs	r2, #0
 8013d84:	4b93      	ldr	r3, [pc, #588]	; (8013fd4 <_dtoa_r+0x5fc>)
 8013d86:	4630      	mov	r0, r6
 8013d88:	4639      	mov	r1, r7
 8013d8a:	f7ec fec7 	bl	8000b1c <__aeabi_dcmplt>
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d07c      	beq.n	8013e8c <_dtoa_r+0x4b4>
 8013d92:	f1b9 0f00 	cmp.w	r9, #0
 8013d96:	d079      	beq.n	8013e8c <_dtoa_r+0x4b4>
 8013d98:	9b02      	ldr	r3, [sp, #8]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	dd35      	ble.n	8013e0a <_dtoa_r+0x432>
 8013d9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013da2:	9308      	str	r3, [sp, #32]
 8013da4:	4639      	mov	r1, r7
 8013da6:	2200      	movs	r2, #0
 8013da8:	4b8b      	ldr	r3, [pc, #556]	; (8013fd8 <_dtoa_r+0x600>)
 8013daa:	4630      	mov	r0, r6
 8013dac:	f7ec fc44 	bl	8000638 <__aeabi_dmul>
 8013db0:	e9cd 0100 	strd	r0, r1, [sp]
 8013db4:	9f02      	ldr	r7, [sp, #8]
 8013db6:	3501      	adds	r5, #1
 8013db8:	4628      	mov	r0, r5
 8013dba:	f7ec fbd3 	bl	8000564 <__aeabi_i2d>
 8013dbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013dc2:	f7ec fc39 	bl	8000638 <__aeabi_dmul>
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	4b84      	ldr	r3, [pc, #528]	; (8013fdc <_dtoa_r+0x604>)
 8013dca:	f7ec fa7f 	bl	80002cc <__adddf3>
 8013dce:	4605      	mov	r5, r0
 8013dd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013dd4:	2f00      	cmp	r7, #0
 8013dd6:	d15d      	bne.n	8013e94 <_dtoa_r+0x4bc>
 8013dd8:	2200      	movs	r2, #0
 8013dda:	4b81      	ldr	r3, [pc, #516]	; (8013fe0 <_dtoa_r+0x608>)
 8013ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013de0:	f7ec fa72 	bl	80002c8 <__aeabi_dsub>
 8013de4:	462a      	mov	r2, r5
 8013de6:	4633      	mov	r3, r6
 8013de8:	e9cd 0100 	strd	r0, r1, [sp]
 8013dec:	f7ec feb4 	bl	8000b58 <__aeabi_dcmpgt>
 8013df0:	2800      	cmp	r0, #0
 8013df2:	f040 8288 	bne.w	8014306 <_dtoa_r+0x92e>
 8013df6:	462a      	mov	r2, r5
 8013df8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e00:	f7ec fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	f040 827c 	bne.w	8014302 <_dtoa_r+0x92a>
 8013e0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e0e:	e9cd 2300 	strd	r2, r3, [sp]
 8013e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	f2c0 8150 	blt.w	80140ba <_dtoa_r+0x6e2>
 8013e1a:	f1ba 0f0e 	cmp.w	sl, #14
 8013e1e:	f300 814c 	bgt.w	80140ba <_dtoa_r+0x6e2>
 8013e22:	4b6a      	ldr	r3, [pc, #424]	; (8013fcc <_dtoa_r+0x5f4>)
 8013e24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e28:	ed93 7b00 	vldr	d7, [r3]
 8013e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e34:	f280 80d8 	bge.w	8013fe8 <_dtoa_r+0x610>
 8013e38:	f1b9 0f00 	cmp.w	r9, #0
 8013e3c:	f300 80d4 	bgt.w	8013fe8 <_dtoa_r+0x610>
 8013e40:	f040 825e 	bne.w	8014300 <_dtoa_r+0x928>
 8013e44:	2200      	movs	r2, #0
 8013e46:	4b66      	ldr	r3, [pc, #408]	; (8013fe0 <_dtoa_r+0x608>)
 8013e48:	ec51 0b17 	vmov	r0, r1, d7
 8013e4c:	f7ec fbf4 	bl	8000638 <__aeabi_dmul>
 8013e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e54:	f7ec fe76 	bl	8000b44 <__aeabi_dcmpge>
 8013e58:	464f      	mov	r7, r9
 8013e5a:	464e      	mov	r6, r9
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	f040 8234 	bne.w	80142ca <_dtoa_r+0x8f2>
 8013e62:	2331      	movs	r3, #49	; 0x31
 8013e64:	f10b 0501 	add.w	r5, fp, #1
 8013e68:	f88b 3000 	strb.w	r3, [fp]
 8013e6c:	f10a 0a01 	add.w	sl, sl, #1
 8013e70:	e22f      	b.n	80142d2 <_dtoa_r+0x8fa>
 8013e72:	07f2      	lsls	r2, r6, #31
 8013e74:	d505      	bpl.n	8013e82 <_dtoa_r+0x4aa>
 8013e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e7a:	f7ec fbdd 	bl	8000638 <__aeabi_dmul>
 8013e7e:	3501      	adds	r5, #1
 8013e80:	2301      	movs	r3, #1
 8013e82:	1076      	asrs	r6, r6, #1
 8013e84:	3708      	adds	r7, #8
 8013e86:	e772      	b.n	8013d6e <_dtoa_r+0x396>
 8013e88:	2502      	movs	r5, #2
 8013e8a:	e774      	b.n	8013d76 <_dtoa_r+0x39e>
 8013e8c:	f8cd a020 	str.w	sl, [sp, #32]
 8013e90:	464f      	mov	r7, r9
 8013e92:	e791      	b.n	8013db8 <_dtoa_r+0x3e0>
 8013e94:	4b4d      	ldr	r3, [pc, #308]	; (8013fcc <_dtoa_r+0x5f4>)
 8013e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013e9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d047      	beq.n	8013f34 <_dtoa_r+0x55c>
 8013ea4:	4602      	mov	r2, r0
 8013ea6:	460b      	mov	r3, r1
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	494e      	ldr	r1, [pc, #312]	; (8013fe4 <_dtoa_r+0x60c>)
 8013eac:	f7ec fcee 	bl	800088c <__aeabi_ddiv>
 8013eb0:	462a      	mov	r2, r5
 8013eb2:	4633      	mov	r3, r6
 8013eb4:	f7ec fa08 	bl	80002c8 <__aeabi_dsub>
 8013eb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013ebc:	465d      	mov	r5, fp
 8013ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ec2:	f7ec fe69 	bl	8000b98 <__aeabi_d2iz>
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	f7ec fb4c 	bl	8000564 <__aeabi_i2d>
 8013ecc:	4602      	mov	r2, r0
 8013ece:	460b      	mov	r3, r1
 8013ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ed4:	f7ec f9f8 	bl	80002c8 <__aeabi_dsub>
 8013ed8:	3630      	adds	r6, #48	; 0x30
 8013eda:	f805 6b01 	strb.w	r6, [r5], #1
 8013ede:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8013ee6:	f7ec fe19 	bl	8000b1c <__aeabi_dcmplt>
 8013eea:	2800      	cmp	r0, #0
 8013eec:	d163      	bne.n	8013fb6 <_dtoa_r+0x5de>
 8013eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ef2:	2000      	movs	r0, #0
 8013ef4:	4937      	ldr	r1, [pc, #220]	; (8013fd4 <_dtoa_r+0x5fc>)
 8013ef6:	f7ec f9e7 	bl	80002c8 <__aeabi_dsub>
 8013efa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013efe:	f7ec fe0d 	bl	8000b1c <__aeabi_dcmplt>
 8013f02:	2800      	cmp	r0, #0
 8013f04:	f040 80b7 	bne.w	8014076 <_dtoa_r+0x69e>
 8013f08:	eba5 030b 	sub.w	r3, r5, fp
 8013f0c:	429f      	cmp	r7, r3
 8013f0e:	f77f af7c 	ble.w	8013e0a <_dtoa_r+0x432>
 8013f12:	2200      	movs	r2, #0
 8013f14:	4b30      	ldr	r3, [pc, #192]	; (8013fd8 <_dtoa_r+0x600>)
 8013f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013f1a:	f7ec fb8d 	bl	8000638 <__aeabi_dmul>
 8013f1e:	2200      	movs	r2, #0
 8013f20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013f24:	4b2c      	ldr	r3, [pc, #176]	; (8013fd8 <_dtoa_r+0x600>)
 8013f26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f2a:	f7ec fb85 	bl	8000638 <__aeabi_dmul>
 8013f2e:	e9cd 0100 	strd	r0, r1, [sp]
 8013f32:	e7c4      	b.n	8013ebe <_dtoa_r+0x4e6>
 8013f34:	462a      	mov	r2, r5
 8013f36:	4633      	mov	r3, r6
 8013f38:	f7ec fb7e 	bl	8000638 <__aeabi_dmul>
 8013f3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013f40:	eb0b 0507 	add.w	r5, fp, r7
 8013f44:	465e      	mov	r6, fp
 8013f46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f4a:	f7ec fe25 	bl	8000b98 <__aeabi_d2iz>
 8013f4e:	4607      	mov	r7, r0
 8013f50:	f7ec fb08 	bl	8000564 <__aeabi_i2d>
 8013f54:	3730      	adds	r7, #48	; 0x30
 8013f56:	4602      	mov	r2, r0
 8013f58:	460b      	mov	r3, r1
 8013f5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f5e:	f7ec f9b3 	bl	80002c8 <__aeabi_dsub>
 8013f62:	f806 7b01 	strb.w	r7, [r6], #1
 8013f66:	42ae      	cmp	r6, r5
 8013f68:	e9cd 0100 	strd	r0, r1, [sp]
 8013f6c:	f04f 0200 	mov.w	r2, #0
 8013f70:	d126      	bne.n	8013fc0 <_dtoa_r+0x5e8>
 8013f72:	4b1c      	ldr	r3, [pc, #112]	; (8013fe4 <_dtoa_r+0x60c>)
 8013f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013f78:	f7ec f9a8 	bl	80002cc <__adddf3>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	460b      	mov	r3, r1
 8013f80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f84:	f7ec fde8 	bl	8000b58 <__aeabi_dcmpgt>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d174      	bne.n	8014076 <_dtoa_r+0x69e>
 8013f8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013f90:	2000      	movs	r0, #0
 8013f92:	4914      	ldr	r1, [pc, #80]	; (8013fe4 <_dtoa_r+0x60c>)
 8013f94:	f7ec f998 	bl	80002c8 <__aeabi_dsub>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fa0:	f7ec fdbc 	bl	8000b1c <__aeabi_dcmplt>
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	f43f af30 	beq.w	8013e0a <_dtoa_r+0x432>
 8013faa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013fae:	2b30      	cmp	r3, #48	; 0x30
 8013fb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8013fb4:	d002      	beq.n	8013fbc <_dtoa_r+0x5e4>
 8013fb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013fba:	e04a      	b.n	8014052 <_dtoa_r+0x67a>
 8013fbc:	4615      	mov	r5, r2
 8013fbe:	e7f4      	b.n	8013faa <_dtoa_r+0x5d2>
 8013fc0:	4b05      	ldr	r3, [pc, #20]	; (8013fd8 <_dtoa_r+0x600>)
 8013fc2:	f7ec fb39 	bl	8000638 <__aeabi_dmul>
 8013fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8013fca:	e7bc      	b.n	8013f46 <_dtoa_r+0x56e>
 8013fcc:	080182e0 	.word	0x080182e0
 8013fd0:	080182b8 	.word	0x080182b8
 8013fd4:	3ff00000 	.word	0x3ff00000
 8013fd8:	40240000 	.word	0x40240000
 8013fdc:	401c0000 	.word	0x401c0000
 8013fe0:	40140000 	.word	0x40140000
 8013fe4:	3fe00000 	.word	0x3fe00000
 8013fe8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013fec:	465d      	mov	r5, fp
 8013fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	4639      	mov	r1, r7
 8013ff6:	f7ec fc49 	bl	800088c <__aeabi_ddiv>
 8013ffa:	f7ec fdcd 	bl	8000b98 <__aeabi_d2iz>
 8013ffe:	4680      	mov	r8, r0
 8014000:	f7ec fab0 	bl	8000564 <__aeabi_i2d>
 8014004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014008:	f7ec fb16 	bl	8000638 <__aeabi_dmul>
 801400c:	4602      	mov	r2, r0
 801400e:	460b      	mov	r3, r1
 8014010:	4630      	mov	r0, r6
 8014012:	4639      	mov	r1, r7
 8014014:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014018:	f7ec f956 	bl	80002c8 <__aeabi_dsub>
 801401c:	f805 6b01 	strb.w	r6, [r5], #1
 8014020:	eba5 060b 	sub.w	r6, r5, fp
 8014024:	45b1      	cmp	r9, r6
 8014026:	4602      	mov	r2, r0
 8014028:	460b      	mov	r3, r1
 801402a:	d139      	bne.n	80140a0 <_dtoa_r+0x6c8>
 801402c:	f7ec f94e 	bl	80002cc <__adddf3>
 8014030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014034:	4606      	mov	r6, r0
 8014036:	460f      	mov	r7, r1
 8014038:	f7ec fd8e 	bl	8000b58 <__aeabi_dcmpgt>
 801403c:	b9c8      	cbnz	r0, 8014072 <_dtoa_r+0x69a>
 801403e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014042:	4630      	mov	r0, r6
 8014044:	4639      	mov	r1, r7
 8014046:	f7ec fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 801404a:	b110      	cbz	r0, 8014052 <_dtoa_r+0x67a>
 801404c:	f018 0f01 	tst.w	r8, #1
 8014050:	d10f      	bne.n	8014072 <_dtoa_r+0x69a>
 8014052:	9904      	ldr	r1, [sp, #16]
 8014054:	4620      	mov	r0, r4
 8014056:	f000 fcc4 	bl	80149e2 <_Bfree>
 801405a:	2300      	movs	r3, #0
 801405c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801405e:	702b      	strb	r3, [r5, #0]
 8014060:	f10a 0301 	add.w	r3, sl, #1
 8014064:	6013      	str	r3, [r2, #0]
 8014066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014068:	2b00      	cmp	r3, #0
 801406a:	f000 8241 	beq.w	80144f0 <_dtoa_r+0xb18>
 801406e:	601d      	str	r5, [r3, #0]
 8014070:	e23e      	b.n	80144f0 <_dtoa_r+0xb18>
 8014072:	f8cd a020 	str.w	sl, [sp, #32]
 8014076:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801407a:	2a39      	cmp	r2, #57	; 0x39
 801407c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014080:	d108      	bne.n	8014094 <_dtoa_r+0x6bc>
 8014082:	459b      	cmp	fp, r3
 8014084:	d10a      	bne.n	801409c <_dtoa_r+0x6c4>
 8014086:	9b08      	ldr	r3, [sp, #32]
 8014088:	3301      	adds	r3, #1
 801408a:	9308      	str	r3, [sp, #32]
 801408c:	2330      	movs	r3, #48	; 0x30
 801408e:	f88b 3000 	strb.w	r3, [fp]
 8014092:	465b      	mov	r3, fp
 8014094:	781a      	ldrb	r2, [r3, #0]
 8014096:	3201      	adds	r2, #1
 8014098:	701a      	strb	r2, [r3, #0]
 801409a:	e78c      	b.n	8013fb6 <_dtoa_r+0x5de>
 801409c:	461d      	mov	r5, r3
 801409e:	e7ea      	b.n	8014076 <_dtoa_r+0x69e>
 80140a0:	2200      	movs	r2, #0
 80140a2:	4b9b      	ldr	r3, [pc, #620]	; (8014310 <_dtoa_r+0x938>)
 80140a4:	f7ec fac8 	bl	8000638 <__aeabi_dmul>
 80140a8:	2200      	movs	r2, #0
 80140aa:	2300      	movs	r3, #0
 80140ac:	4606      	mov	r6, r0
 80140ae:	460f      	mov	r7, r1
 80140b0:	f7ec fd2a 	bl	8000b08 <__aeabi_dcmpeq>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d09a      	beq.n	8013fee <_dtoa_r+0x616>
 80140b8:	e7cb      	b.n	8014052 <_dtoa_r+0x67a>
 80140ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140bc:	2a00      	cmp	r2, #0
 80140be:	f000 808b 	beq.w	80141d8 <_dtoa_r+0x800>
 80140c2:	9a06      	ldr	r2, [sp, #24]
 80140c4:	2a01      	cmp	r2, #1
 80140c6:	dc6e      	bgt.n	80141a6 <_dtoa_r+0x7ce>
 80140c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80140ca:	2a00      	cmp	r2, #0
 80140cc:	d067      	beq.n	801419e <_dtoa_r+0x7c6>
 80140ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80140d2:	9f07      	ldr	r7, [sp, #28]
 80140d4:	9d05      	ldr	r5, [sp, #20]
 80140d6:	9a05      	ldr	r2, [sp, #20]
 80140d8:	2101      	movs	r1, #1
 80140da:	441a      	add	r2, r3
 80140dc:	4620      	mov	r0, r4
 80140de:	9205      	str	r2, [sp, #20]
 80140e0:	4498      	add	r8, r3
 80140e2:	f000 fd1e 	bl	8014b22 <__i2b>
 80140e6:	4606      	mov	r6, r0
 80140e8:	2d00      	cmp	r5, #0
 80140ea:	dd0c      	ble.n	8014106 <_dtoa_r+0x72e>
 80140ec:	f1b8 0f00 	cmp.w	r8, #0
 80140f0:	dd09      	ble.n	8014106 <_dtoa_r+0x72e>
 80140f2:	4545      	cmp	r5, r8
 80140f4:	9a05      	ldr	r2, [sp, #20]
 80140f6:	462b      	mov	r3, r5
 80140f8:	bfa8      	it	ge
 80140fa:	4643      	movge	r3, r8
 80140fc:	1ad2      	subs	r2, r2, r3
 80140fe:	9205      	str	r2, [sp, #20]
 8014100:	1aed      	subs	r5, r5, r3
 8014102:	eba8 0803 	sub.w	r8, r8, r3
 8014106:	9b07      	ldr	r3, [sp, #28]
 8014108:	b1eb      	cbz	r3, 8014146 <_dtoa_r+0x76e>
 801410a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801410c:	2b00      	cmp	r3, #0
 801410e:	d067      	beq.n	80141e0 <_dtoa_r+0x808>
 8014110:	b18f      	cbz	r7, 8014136 <_dtoa_r+0x75e>
 8014112:	4631      	mov	r1, r6
 8014114:	463a      	mov	r2, r7
 8014116:	4620      	mov	r0, r4
 8014118:	f000 fda2 	bl	8014c60 <__pow5mult>
 801411c:	9a04      	ldr	r2, [sp, #16]
 801411e:	4601      	mov	r1, r0
 8014120:	4606      	mov	r6, r0
 8014122:	4620      	mov	r0, r4
 8014124:	f000 fd06 	bl	8014b34 <__multiply>
 8014128:	9904      	ldr	r1, [sp, #16]
 801412a:	9008      	str	r0, [sp, #32]
 801412c:	4620      	mov	r0, r4
 801412e:	f000 fc58 	bl	80149e2 <_Bfree>
 8014132:	9b08      	ldr	r3, [sp, #32]
 8014134:	9304      	str	r3, [sp, #16]
 8014136:	9b07      	ldr	r3, [sp, #28]
 8014138:	1bda      	subs	r2, r3, r7
 801413a:	d004      	beq.n	8014146 <_dtoa_r+0x76e>
 801413c:	9904      	ldr	r1, [sp, #16]
 801413e:	4620      	mov	r0, r4
 8014140:	f000 fd8e 	bl	8014c60 <__pow5mult>
 8014144:	9004      	str	r0, [sp, #16]
 8014146:	2101      	movs	r1, #1
 8014148:	4620      	mov	r0, r4
 801414a:	f000 fcea 	bl	8014b22 <__i2b>
 801414e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014150:	4607      	mov	r7, r0
 8014152:	2b00      	cmp	r3, #0
 8014154:	f000 81d0 	beq.w	80144f8 <_dtoa_r+0xb20>
 8014158:	461a      	mov	r2, r3
 801415a:	4601      	mov	r1, r0
 801415c:	4620      	mov	r0, r4
 801415e:	f000 fd7f 	bl	8014c60 <__pow5mult>
 8014162:	9b06      	ldr	r3, [sp, #24]
 8014164:	2b01      	cmp	r3, #1
 8014166:	4607      	mov	r7, r0
 8014168:	dc40      	bgt.n	80141ec <_dtoa_r+0x814>
 801416a:	9b00      	ldr	r3, [sp, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d139      	bne.n	80141e4 <_dtoa_r+0x80c>
 8014170:	9b01      	ldr	r3, [sp, #4]
 8014172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014176:	2b00      	cmp	r3, #0
 8014178:	d136      	bne.n	80141e8 <_dtoa_r+0x810>
 801417a:	9b01      	ldr	r3, [sp, #4]
 801417c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014180:	0d1b      	lsrs	r3, r3, #20
 8014182:	051b      	lsls	r3, r3, #20
 8014184:	b12b      	cbz	r3, 8014192 <_dtoa_r+0x7ba>
 8014186:	9b05      	ldr	r3, [sp, #20]
 8014188:	3301      	adds	r3, #1
 801418a:	9305      	str	r3, [sp, #20]
 801418c:	f108 0801 	add.w	r8, r8, #1
 8014190:	2301      	movs	r3, #1
 8014192:	9307      	str	r3, [sp, #28]
 8014194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014196:	2b00      	cmp	r3, #0
 8014198:	d12a      	bne.n	80141f0 <_dtoa_r+0x818>
 801419a:	2001      	movs	r0, #1
 801419c:	e030      	b.n	8014200 <_dtoa_r+0x828>
 801419e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80141a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80141a4:	e795      	b.n	80140d2 <_dtoa_r+0x6fa>
 80141a6:	9b07      	ldr	r3, [sp, #28]
 80141a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80141ac:	42bb      	cmp	r3, r7
 80141ae:	bfbf      	itttt	lt
 80141b0:	9b07      	ldrlt	r3, [sp, #28]
 80141b2:	9707      	strlt	r7, [sp, #28]
 80141b4:	1afa      	sublt	r2, r7, r3
 80141b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80141b8:	bfbb      	ittet	lt
 80141ba:	189b      	addlt	r3, r3, r2
 80141bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80141be:	1bdf      	subge	r7, r3, r7
 80141c0:	2700      	movlt	r7, #0
 80141c2:	f1b9 0f00 	cmp.w	r9, #0
 80141c6:	bfb5      	itete	lt
 80141c8:	9b05      	ldrlt	r3, [sp, #20]
 80141ca:	9d05      	ldrge	r5, [sp, #20]
 80141cc:	eba3 0509 	sublt.w	r5, r3, r9
 80141d0:	464b      	movge	r3, r9
 80141d2:	bfb8      	it	lt
 80141d4:	2300      	movlt	r3, #0
 80141d6:	e77e      	b.n	80140d6 <_dtoa_r+0x6fe>
 80141d8:	9f07      	ldr	r7, [sp, #28]
 80141da:	9d05      	ldr	r5, [sp, #20]
 80141dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80141de:	e783      	b.n	80140e8 <_dtoa_r+0x710>
 80141e0:	9a07      	ldr	r2, [sp, #28]
 80141e2:	e7ab      	b.n	801413c <_dtoa_r+0x764>
 80141e4:	2300      	movs	r3, #0
 80141e6:	e7d4      	b.n	8014192 <_dtoa_r+0x7ba>
 80141e8:	9b00      	ldr	r3, [sp, #0]
 80141ea:	e7d2      	b.n	8014192 <_dtoa_r+0x7ba>
 80141ec:	2300      	movs	r3, #0
 80141ee:	9307      	str	r3, [sp, #28]
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80141f6:	6918      	ldr	r0, [r3, #16]
 80141f8:	f000 fc45 	bl	8014a86 <__hi0bits>
 80141fc:	f1c0 0020 	rsb	r0, r0, #32
 8014200:	4440      	add	r0, r8
 8014202:	f010 001f 	ands.w	r0, r0, #31
 8014206:	d047      	beq.n	8014298 <_dtoa_r+0x8c0>
 8014208:	f1c0 0320 	rsb	r3, r0, #32
 801420c:	2b04      	cmp	r3, #4
 801420e:	dd3b      	ble.n	8014288 <_dtoa_r+0x8b0>
 8014210:	9b05      	ldr	r3, [sp, #20]
 8014212:	f1c0 001c 	rsb	r0, r0, #28
 8014216:	4403      	add	r3, r0
 8014218:	9305      	str	r3, [sp, #20]
 801421a:	4405      	add	r5, r0
 801421c:	4480      	add	r8, r0
 801421e:	9b05      	ldr	r3, [sp, #20]
 8014220:	2b00      	cmp	r3, #0
 8014222:	dd05      	ble.n	8014230 <_dtoa_r+0x858>
 8014224:	461a      	mov	r2, r3
 8014226:	9904      	ldr	r1, [sp, #16]
 8014228:	4620      	mov	r0, r4
 801422a:	f000 fd67 	bl	8014cfc <__lshift>
 801422e:	9004      	str	r0, [sp, #16]
 8014230:	f1b8 0f00 	cmp.w	r8, #0
 8014234:	dd05      	ble.n	8014242 <_dtoa_r+0x86a>
 8014236:	4639      	mov	r1, r7
 8014238:	4642      	mov	r2, r8
 801423a:	4620      	mov	r0, r4
 801423c:	f000 fd5e 	bl	8014cfc <__lshift>
 8014240:	4607      	mov	r7, r0
 8014242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014244:	b353      	cbz	r3, 801429c <_dtoa_r+0x8c4>
 8014246:	4639      	mov	r1, r7
 8014248:	9804      	ldr	r0, [sp, #16]
 801424a:	f000 fdab 	bl	8014da4 <__mcmp>
 801424e:	2800      	cmp	r0, #0
 8014250:	da24      	bge.n	801429c <_dtoa_r+0x8c4>
 8014252:	2300      	movs	r3, #0
 8014254:	220a      	movs	r2, #10
 8014256:	9904      	ldr	r1, [sp, #16]
 8014258:	4620      	mov	r0, r4
 801425a:	f000 fbd9 	bl	8014a10 <__multadd>
 801425e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014260:	9004      	str	r0, [sp, #16]
 8014262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014266:	2b00      	cmp	r3, #0
 8014268:	f000 814d 	beq.w	8014506 <_dtoa_r+0xb2e>
 801426c:	2300      	movs	r3, #0
 801426e:	4631      	mov	r1, r6
 8014270:	220a      	movs	r2, #10
 8014272:	4620      	mov	r0, r4
 8014274:	f000 fbcc 	bl	8014a10 <__multadd>
 8014278:	9b02      	ldr	r3, [sp, #8]
 801427a:	2b00      	cmp	r3, #0
 801427c:	4606      	mov	r6, r0
 801427e:	dc4f      	bgt.n	8014320 <_dtoa_r+0x948>
 8014280:	9b06      	ldr	r3, [sp, #24]
 8014282:	2b02      	cmp	r3, #2
 8014284:	dd4c      	ble.n	8014320 <_dtoa_r+0x948>
 8014286:	e011      	b.n	80142ac <_dtoa_r+0x8d4>
 8014288:	d0c9      	beq.n	801421e <_dtoa_r+0x846>
 801428a:	9a05      	ldr	r2, [sp, #20]
 801428c:	331c      	adds	r3, #28
 801428e:	441a      	add	r2, r3
 8014290:	9205      	str	r2, [sp, #20]
 8014292:	441d      	add	r5, r3
 8014294:	4498      	add	r8, r3
 8014296:	e7c2      	b.n	801421e <_dtoa_r+0x846>
 8014298:	4603      	mov	r3, r0
 801429a:	e7f6      	b.n	801428a <_dtoa_r+0x8b2>
 801429c:	f1b9 0f00 	cmp.w	r9, #0
 80142a0:	dc38      	bgt.n	8014314 <_dtoa_r+0x93c>
 80142a2:	9b06      	ldr	r3, [sp, #24]
 80142a4:	2b02      	cmp	r3, #2
 80142a6:	dd35      	ble.n	8014314 <_dtoa_r+0x93c>
 80142a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80142ac:	9b02      	ldr	r3, [sp, #8]
 80142ae:	b963      	cbnz	r3, 80142ca <_dtoa_r+0x8f2>
 80142b0:	4639      	mov	r1, r7
 80142b2:	2205      	movs	r2, #5
 80142b4:	4620      	mov	r0, r4
 80142b6:	f000 fbab 	bl	8014a10 <__multadd>
 80142ba:	4601      	mov	r1, r0
 80142bc:	4607      	mov	r7, r0
 80142be:	9804      	ldr	r0, [sp, #16]
 80142c0:	f000 fd70 	bl	8014da4 <__mcmp>
 80142c4:	2800      	cmp	r0, #0
 80142c6:	f73f adcc 	bgt.w	8013e62 <_dtoa_r+0x48a>
 80142ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142cc:	465d      	mov	r5, fp
 80142ce:	ea6f 0a03 	mvn.w	sl, r3
 80142d2:	f04f 0900 	mov.w	r9, #0
 80142d6:	4639      	mov	r1, r7
 80142d8:	4620      	mov	r0, r4
 80142da:	f000 fb82 	bl	80149e2 <_Bfree>
 80142de:	2e00      	cmp	r6, #0
 80142e0:	f43f aeb7 	beq.w	8014052 <_dtoa_r+0x67a>
 80142e4:	f1b9 0f00 	cmp.w	r9, #0
 80142e8:	d005      	beq.n	80142f6 <_dtoa_r+0x91e>
 80142ea:	45b1      	cmp	r9, r6
 80142ec:	d003      	beq.n	80142f6 <_dtoa_r+0x91e>
 80142ee:	4649      	mov	r1, r9
 80142f0:	4620      	mov	r0, r4
 80142f2:	f000 fb76 	bl	80149e2 <_Bfree>
 80142f6:	4631      	mov	r1, r6
 80142f8:	4620      	mov	r0, r4
 80142fa:	f000 fb72 	bl	80149e2 <_Bfree>
 80142fe:	e6a8      	b.n	8014052 <_dtoa_r+0x67a>
 8014300:	2700      	movs	r7, #0
 8014302:	463e      	mov	r6, r7
 8014304:	e7e1      	b.n	80142ca <_dtoa_r+0x8f2>
 8014306:	f8dd a020 	ldr.w	sl, [sp, #32]
 801430a:	463e      	mov	r6, r7
 801430c:	e5a9      	b.n	8013e62 <_dtoa_r+0x48a>
 801430e:	bf00      	nop
 8014310:	40240000 	.word	0x40240000
 8014314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014316:	f8cd 9008 	str.w	r9, [sp, #8]
 801431a:	2b00      	cmp	r3, #0
 801431c:	f000 80fa 	beq.w	8014514 <_dtoa_r+0xb3c>
 8014320:	2d00      	cmp	r5, #0
 8014322:	dd05      	ble.n	8014330 <_dtoa_r+0x958>
 8014324:	4631      	mov	r1, r6
 8014326:	462a      	mov	r2, r5
 8014328:	4620      	mov	r0, r4
 801432a:	f000 fce7 	bl	8014cfc <__lshift>
 801432e:	4606      	mov	r6, r0
 8014330:	9b07      	ldr	r3, [sp, #28]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d04c      	beq.n	80143d0 <_dtoa_r+0x9f8>
 8014336:	6871      	ldr	r1, [r6, #4]
 8014338:	4620      	mov	r0, r4
 801433a:	f000 fb1e 	bl	801497a <_Balloc>
 801433e:	6932      	ldr	r2, [r6, #16]
 8014340:	3202      	adds	r2, #2
 8014342:	4605      	mov	r5, r0
 8014344:	0092      	lsls	r2, r2, #2
 8014346:	f106 010c 	add.w	r1, r6, #12
 801434a:	300c      	adds	r0, #12
 801434c:	f7fe fabc 	bl	80128c8 <memcpy>
 8014350:	2201      	movs	r2, #1
 8014352:	4629      	mov	r1, r5
 8014354:	4620      	mov	r0, r4
 8014356:	f000 fcd1 	bl	8014cfc <__lshift>
 801435a:	9b00      	ldr	r3, [sp, #0]
 801435c:	f8cd b014 	str.w	fp, [sp, #20]
 8014360:	f003 0301 	and.w	r3, r3, #1
 8014364:	46b1      	mov	r9, r6
 8014366:	9307      	str	r3, [sp, #28]
 8014368:	4606      	mov	r6, r0
 801436a:	4639      	mov	r1, r7
 801436c:	9804      	ldr	r0, [sp, #16]
 801436e:	f7ff faa5 	bl	80138bc <quorem>
 8014372:	4649      	mov	r1, r9
 8014374:	4605      	mov	r5, r0
 8014376:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801437a:	9804      	ldr	r0, [sp, #16]
 801437c:	f000 fd12 	bl	8014da4 <__mcmp>
 8014380:	4632      	mov	r2, r6
 8014382:	9000      	str	r0, [sp, #0]
 8014384:	4639      	mov	r1, r7
 8014386:	4620      	mov	r0, r4
 8014388:	f000 fd26 	bl	8014dd8 <__mdiff>
 801438c:	68c3      	ldr	r3, [r0, #12]
 801438e:	4602      	mov	r2, r0
 8014390:	bb03      	cbnz	r3, 80143d4 <_dtoa_r+0x9fc>
 8014392:	4601      	mov	r1, r0
 8014394:	9008      	str	r0, [sp, #32]
 8014396:	9804      	ldr	r0, [sp, #16]
 8014398:	f000 fd04 	bl	8014da4 <__mcmp>
 801439c:	9a08      	ldr	r2, [sp, #32]
 801439e:	4603      	mov	r3, r0
 80143a0:	4611      	mov	r1, r2
 80143a2:	4620      	mov	r0, r4
 80143a4:	9308      	str	r3, [sp, #32]
 80143a6:	f000 fb1c 	bl	80149e2 <_Bfree>
 80143aa:	9b08      	ldr	r3, [sp, #32]
 80143ac:	b9a3      	cbnz	r3, 80143d8 <_dtoa_r+0xa00>
 80143ae:	9a06      	ldr	r2, [sp, #24]
 80143b0:	b992      	cbnz	r2, 80143d8 <_dtoa_r+0xa00>
 80143b2:	9a07      	ldr	r2, [sp, #28]
 80143b4:	b982      	cbnz	r2, 80143d8 <_dtoa_r+0xa00>
 80143b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80143ba:	d029      	beq.n	8014410 <_dtoa_r+0xa38>
 80143bc:	9b00      	ldr	r3, [sp, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	dd01      	ble.n	80143c6 <_dtoa_r+0x9ee>
 80143c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80143c6:	9b05      	ldr	r3, [sp, #20]
 80143c8:	1c5d      	adds	r5, r3, #1
 80143ca:	f883 8000 	strb.w	r8, [r3]
 80143ce:	e782      	b.n	80142d6 <_dtoa_r+0x8fe>
 80143d0:	4630      	mov	r0, r6
 80143d2:	e7c2      	b.n	801435a <_dtoa_r+0x982>
 80143d4:	2301      	movs	r3, #1
 80143d6:	e7e3      	b.n	80143a0 <_dtoa_r+0x9c8>
 80143d8:	9a00      	ldr	r2, [sp, #0]
 80143da:	2a00      	cmp	r2, #0
 80143dc:	db04      	blt.n	80143e8 <_dtoa_r+0xa10>
 80143de:	d125      	bne.n	801442c <_dtoa_r+0xa54>
 80143e0:	9a06      	ldr	r2, [sp, #24]
 80143e2:	bb1a      	cbnz	r2, 801442c <_dtoa_r+0xa54>
 80143e4:	9a07      	ldr	r2, [sp, #28]
 80143e6:	bb0a      	cbnz	r2, 801442c <_dtoa_r+0xa54>
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	ddec      	ble.n	80143c6 <_dtoa_r+0x9ee>
 80143ec:	2201      	movs	r2, #1
 80143ee:	9904      	ldr	r1, [sp, #16]
 80143f0:	4620      	mov	r0, r4
 80143f2:	f000 fc83 	bl	8014cfc <__lshift>
 80143f6:	4639      	mov	r1, r7
 80143f8:	9004      	str	r0, [sp, #16]
 80143fa:	f000 fcd3 	bl	8014da4 <__mcmp>
 80143fe:	2800      	cmp	r0, #0
 8014400:	dc03      	bgt.n	801440a <_dtoa_r+0xa32>
 8014402:	d1e0      	bne.n	80143c6 <_dtoa_r+0x9ee>
 8014404:	f018 0f01 	tst.w	r8, #1
 8014408:	d0dd      	beq.n	80143c6 <_dtoa_r+0x9ee>
 801440a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801440e:	d1d8      	bne.n	80143c2 <_dtoa_r+0x9ea>
 8014410:	9b05      	ldr	r3, [sp, #20]
 8014412:	9a05      	ldr	r2, [sp, #20]
 8014414:	1c5d      	adds	r5, r3, #1
 8014416:	2339      	movs	r3, #57	; 0x39
 8014418:	7013      	strb	r3, [r2, #0]
 801441a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801441e:	2b39      	cmp	r3, #57	; 0x39
 8014420:	f105 32ff 	add.w	r2, r5, #4294967295
 8014424:	d04f      	beq.n	80144c6 <_dtoa_r+0xaee>
 8014426:	3301      	adds	r3, #1
 8014428:	7013      	strb	r3, [r2, #0]
 801442a:	e754      	b.n	80142d6 <_dtoa_r+0x8fe>
 801442c:	9a05      	ldr	r2, [sp, #20]
 801442e:	2b00      	cmp	r3, #0
 8014430:	f102 0501 	add.w	r5, r2, #1
 8014434:	dd06      	ble.n	8014444 <_dtoa_r+0xa6c>
 8014436:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801443a:	d0e9      	beq.n	8014410 <_dtoa_r+0xa38>
 801443c:	f108 0801 	add.w	r8, r8, #1
 8014440:	9b05      	ldr	r3, [sp, #20]
 8014442:	e7c2      	b.n	80143ca <_dtoa_r+0x9f2>
 8014444:	9a02      	ldr	r2, [sp, #8]
 8014446:	f805 8c01 	strb.w	r8, [r5, #-1]
 801444a:	eba5 030b 	sub.w	r3, r5, fp
 801444e:	4293      	cmp	r3, r2
 8014450:	d021      	beq.n	8014496 <_dtoa_r+0xabe>
 8014452:	2300      	movs	r3, #0
 8014454:	220a      	movs	r2, #10
 8014456:	9904      	ldr	r1, [sp, #16]
 8014458:	4620      	mov	r0, r4
 801445a:	f000 fad9 	bl	8014a10 <__multadd>
 801445e:	45b1      	cmp	r9, r6
 8014460:	9004      	str	r0, [sp, #16]
 8014462:	f04f 0300 	mov.w	r3, #0
 8014466:	f04f 020a 	mov.w	r2, #10
 801446a:	4649      	mov	r1, r9
 801446c:	4620      	mov	r0, r4
 801446e:	d105      	bne.n	801447c <_dtoa_r+0xaa4>
 8014470:	f000 face 	bl	8014a10 <__multadd>
 8014474:	4681      	mov	r9, r0
 8014476:	4606      	mov	r6, r0
 8014478:	9505      	str	r5, [sp, #20]
 801447a:	e776      	b.n	801436a <_dtoa_r+0x992>
 801447c:	f000 fac8 	bl	8014a10 <__multadd>
 8014480:	4631      	mov	r1, r6
 8014482:	4681      	mov	r9, r0
 8014484:	2300      	movs	r3, #0
 8014486:	220a      	movs	r2, #10
 8014488:	4620      	mov	r0, r4
 801448a:	f000 fac1 	bl	8014a10 <__multadd>
 801448e:	4606      	mov	r6, r0
 8014490:	e7f2      	b.n	8014478 <_dtoa_r+0xaa0>
 8014492:	f04f 0900 	mov.w	r9, #0
 8014496:	2201      	movs	r2, #1
 8014498:	9904      	ldr	r1, [sp, #16]
 801449a:	4620      	mov	r0, r4
 801449c:	f000 fc2e 	bl	8014cfc <__lshift>
 80144a0:	4639      	mov	r1, r7
 80144a2:	9004      	str	r0, [sp, #16]
 80144a4:	f000 fc7e 	bl	8014da4 <__mcmp>
 80144a8:	2800      	cmp	r0, #0
 80144aa:	dcb6      	bgt.n	801441a <_dtoa_r+0xa42>
 80144ac:	d102      	bne.n	80144b4 <_dtoa_r+0xadc>
 80144ae:	f018 0f01 	tst.w	r8, #1
 80144b2:	d1b2      	bne.n	801441a <_dtoa_r+0xa42>
 80144b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80144b8:	2b30      	cmp	r3, #48	; 0x30
 80144ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80144be:	f47f af0a 	bne.w	80142d6 <_dtoa_r+0x8fe>
 80144c2:	4615      	mov	r5, r2
 80144c4:	e7f6      	b.n	80144b4 <_dtoa_r+0xadc>
 80144c6:	4593      	cmp	fp, r2
 80144c8:	d105      	bne.n	80144d6 <_dtoa_r+0xafe>
 80144ca:	2331      	movs	r3, #49	; 0x31
 80144cc:	f10a 0a01 	add.w	sl, sl, #1
 80144d0:	f88b 3000 	strb.w	r3, [fp]
 80144d4:	e6ff      	b.n	80142d6 <_dtoa_r+0x8fe>
 80144d6:	4615      	mov	r5, r2
 80144d8:	e79f      	b.n	801441a <_dtoa_r+0xa42>
 80144da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014540 <_dtoa_r+0xb68>
 80144de:	e007      	b.n	80144f0 <_dtoa_r+0xb18>
 80144e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014544 <_dtoa_r+0xb6c>
 80144e6:	b11b      	cbz	r3, 80144f0 <_dtoa_r+0xb18>
 80144e8:	f10b 0308 	add.w	r3, fp, #8
 80144ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144ee:	6013      	str	r3, [r2, #0]
 80144f0:	4658      	mov	r0, fp
 80144f2:	b017      	add	sp, #92	; 0x5c
 80144f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f8:	9b06      	ldr	r3, [sp, #24]
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	f77f ae35 	ble.w	801416a <_dtoa_r+0x792>
 8014500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014502:	9307      	str	r3, [sp, #28]
 8014504:	e649      	b.n	801419a <_dtoa_r+0x7c2>
 8014506:	9b02      	ldr	r3, [sp, #8]
 8014508:	2b00      	cmp	r3, #0
 801450a:	dc03      	bgt.n	8014514 <_dtoa_r+0xb3c>
 801450c:	9b06      	ldr	r3, [sp, #24]
 801450e:	2b02      	cmp	r3, #2
 8014510:	f73f aecc 	bgt.w	80142ac <_dtoa_r+0x8d4>
 8014514:	465d      	mov	r5, fp
 8014516:	4639      	mov	r1, r7
 8014518:	9804      	ldr	r0, [sp, #16]
 801451a:	f7ff f9cf 	bl	80138bc <quorem>
 801451e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014522:	f805 8b01 	strb.w	r8, [r5], #1
 8014526:	9a02      	ldr	r2, [sp, #8]
 8014528:	eba5 030b 	sub.w	r3, r5, fp
 801452c:	429a      	cmp	r2, r3
 801452e:	ddb0      	ble.n	8014492 <_dtoa_r+0xaba>
 8014530:	2300      	movs	r3, #0
 8014532:	220a      	movs	r2, #10
 8014534:	9904      	ldr	r1, [sp, #16]
 8014536:	4620      	mov	r0, r4
 8014538:	f000 fa6a 	bl	8014a10 <__multadd>
 801453c:	9004      	str	r0, [sp, #16]
 801453e:	e7ea      	b.n	8014516 <_dtoa_r+0xb3e>
 8014540:	08018221 	.word	0x08018221
 8014544:	08018245 	.word	0x08018245

08014548 <__sflush_r>:
 8014548:	898a      	ldrh	r2, [r1, #12]
 801454a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801454e:	4605      	mov	r5, r0
 8014550:	0710      	lsls	r0, r2, #28
 8014552:	460c      	mov	r4, r1
 8014554:	d458      	bmi.n	8014608 <__sflush_r+0xc0>
 8014556:	684b      	ldr	r3, [r1, #4]
 8014558:	2b00      	cmp	r3, #0
 801455a:	dc05      	bgt.n	8014568 <__sflush_r+0x20>
 801455c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801455e:	2b00      	cmp	r3, #0
 8014560:	dc02      	bgt.n	8014568 <__sflush_r+0x20>
 8014562:	2000      	movs	r0, #0
 8014564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801456a:	2e00      	cmp	r6, #0
 801456c:	d0f9      	beq.n	8014562 <__sflush_r+0x1a>
 801456e:	2300      	movs	r3, #0
 8014570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014574:	682f      	ldr	r7, [r5, #0]
 8014576:	6a21      	ldr	r1, [r4, #32]
 8014578:	602b      	str	r3, [r5, #0]
 801457a:	d032      	beq.n	80145e2 <__sflush_r+0x9a>
 801457c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801457e:	89a3      	ldrh	r3, [r4, #12]
 8014580:	075a      	lsls	r2, r3, #29
 8014582:	d505      	bpl.n	8014590 <__sflush_r+0x48>
 8014584:	6863      	ldr	r3, [r4, #4]
 8014586:	1ac0      	subs	r0, r0, r3
 8014588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801458a:	b10b      	cbz	r3, 8014590 <__sflush_r+0x48>
 801458c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801458e:	1ac0      	subs	r0, r0, r3
 8014590:	2300      	movs	r3, #0
 8014592:	4602      	mov	r2, r0
 8014594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014596:	6a21      	ldr	r1, [r4, #32]
 8014598:	4628      	mov	r0, r5
 801459a:	47b0      	blx	r6
 801459c:	1c43      	adds	r3, r0, #1
 801459e:	89a3      	ldrh	r3, [r4, #12]
 80145a0:	d106      	bne.n	80145b0 <__sflush_r+0x68>
 80145a2:	6829      	ldr	r1, [r5, #0]
 80145a4:	291d      	cmp	r1, #29
 80145a6:	d848      	bhi.n	801463a <__sflush_r+0xf2>
 80145a8:	4a29      	ldr	r2, [pc, #164]	; (8014650 <__sflush_r+0x108>)
 80145aa:	40ca      	lsrs	r2, r1
 80145ac:	07d6      	lsls	r6, r2, #31
 80145ae:	d544      	bpl.n	801463a <__sflush_r+0xf2>
 80145b0:	2200      	movs	r2, #0
 80145b2:	6062      	str	r2, [r4, #4]
 80145b4:	04d9      	lsls	r1, r3, #19
 80145b6:	6922      	ldr	r2, [r4, #16]
 80145b8:	6022      	str	r2, [r4, #0]
 80145ba:	d504      	bpl.n	80145c6 <__sflush_r+0x7e>
 80145bc:	1c42      	adds	r2, r0, #1
 80145be:	d101      	bne.n	80145c4 <__sflush_r+0x7c>
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	b903      	cbnz	r3, 80145c6 <__sflush_r+0x7e>
 80145c4:	6560      	str	r0, [r4, #84]	; 0x54
 80145c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145c8:	602f      	str	r7, [r5, #0]
 80145ca:	2900      	cmp	r1, #0
 80145cc:	d0c9      	beq.n	8014562 <__sflush_r+0x1a>
 80145ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145d2:	4299      	cmp	r1, r3
 80145d4:	d002      	beq.n	80145dc <__sflush_r+0x94>
 80145d6:	4628      	mov	r0, r5
 80145d8:	f7fe f98a 	bl	80128f0 <_free_r>
 80145dc:	2000      	movs	r0, #0
 80145de:	6360      	str	r0, [r4, #52]	; 0x34
 80145e0:	e7c0      	b.n	8014564 <__sflush_r+0x1c>
 80145e2:	2301      	movs	r3, #1
 80145e4:	4628      	mov	r0, r5
 80145e6:	47b0      	blx	r6
 80145e8:	1c41      	adds	r1, r0, #1
 80145ea:	d1c8      	bne.n	801457e <__sflush_r+0x36>
 80145ec:	682b      	ldr	r3, [r5, #0]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d0c5      	beq.n	801457e <__sflush_r+0x36>
 80145f2:	2b1d      	cmp	r3, #29
 80145f4:	d001      	beq.n	80145fa <__sflush_r+0xb2>
 80145f6:	2b16      	cmp	r3, #22
 80145f8:	d101      	bne.n	80145fe <__sflush_r+0xb6>
 80145fa:	602f      	str	r7, [r5, #0]
 80145fc:	e7b1      	b.n	8014562 <__sflush_r+0x1a>
 80145fe:	89a3      	ldrh	r3, [r4, #12]
 8014600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014604:	81a3      	strh	r3, [r4, #12]
 8014606:	e7ad      	b.n	8014564 <__sflush_r+0x1c>
 8014608:	690f      	ldr	r7, [r1, #16]
 801460a:	2f00      	cmp	r7, #0
 801460c:	d0a9      	beq.n	8014562 <__sflush_r+0x1a>
 801460e:	0793      	lsls	r3, r2, #30
 8014610:	680e      	ldr	r6, [r1, #0]
 8014612:	bf08      	it	eq
 8014614:	694b      	ldreq	r3, [r1, #20]
 8014616:	600f      	str	r7, [r1, #0]
 8014618:	bf18      	it	ne
 801461a:	2300      	movne	r3, #0
 801461c:	eba6 0807 	sub.w	r8, r6, r7
 8014620:	608b      	str	r3, [r1, #8]
 8014622:	f1b8 0f00 	cmp.w	r8, #0
 8014626:	dd9c      	ble.n	8014562 <__sflush_r+0x1a>
 8014628:	4643      	mov	r3, r8
 801462a:	463a      	mov	r2, r7
 801462c:	6a21      	ldr	r1, [r4, #32]
 801462e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014630:	4628      	mov	r0, r5
 8014632:	47b0      	blx	r6
 8014634:	2800      	cmp	r0, #0
 8014636:	dc06      	bgt.n	8014646 <__sflush_r+0xfe>
 8014638:	89a3      	ldrh	r3, [r4, #12]
 801463a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801463e:	81a3      	strh	r3, [r4, #12]
 8014640:	f04f 30ff 	mov.w	r0, #4294967295
 8014644:	e78e      	b.n	8014564 <__sflush_r+0x1c>
 8014646:	4407      	add	r7, r0
 8014648:	eba8 0800 	sub.w	r8, r8, r0
 801464c:	e7e9      	b.n	8014622 <__sflush_r+0xda>
 801464e:	bf00      	nop
 8014650:	20400001 	.word	0x20400001

08014654 <_fflush_r>:
 8014654:	b538      	push	{r3, r4, r5, lr}
 8014656:	690b      	ldr	r3, [r1, #16]
 8014658:	4605      	mov	r5, r0
 801465a:	460c      	mov	r4, r1
 801465c:	b1db      	cbz	r3, 8014696 <_fflush_r+0x42>
 801465e:	b118      	cbz	r0, 8014668 <_fflush_r+0x14>
 8014660:	6983      	ldr	r3, [r0, #24]
 8014662:	b90b      	cbnz	r3, 8014668 <_fflush_r+0x14>
 8014664:	f000 f860 	bl	8014728 <__sinit>
 8014668:	4b0c      	ldr	r3, [pc, #48]	; (801469c <_fflush_r+0x48>)
 801466a:	429c      	cmp	r4, r3
 801466c:	d109      	bne.n	8014682 <_fflush_r+0x2e>
 801466e:	686c      	ldr	r4, [r5, #4]
 8014670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014674:	b17b      	cbz	r3, 8014696 <_fflush_r+0x42>
 8014676:	4621      	mov	r1, r4
 8014678:	4628      	mov	r0, r5
 801467a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801467e:	f7ff bf63 	b.w	8014548 <__sflush_r>
 8014682:	4b07      	ldr	r3, [pc, #28]	; (80146a0 <_fflush_r+0x4c>)
 8014684:	429c      	cmp	r4, r3
 8014686:	d101      	bne.n	801468c <_fflush_r+0x38>
 8014688:	68ac      	ldr	r4, [r5, #8]
 801468a:	e7f1      	b.n	8014670 <_fflush_r+0x1c>
 801468c:	4b05      	ldr	r3, [pc, #20]	; (80146a4 <_fflush_r+0x50>)
 801468e:	429c      	cmp	r4, r3
 8014690:	bf08      	it	eq
 8014692:	68ec      	ldreq	r4, [r5, #12]
 8014694:	e7ec      	b.n	8014670 <_fflush_r+0x1c>
 8014696:	2000      	movs	r0, #0
 8014698:	bd38      	pop	{r3, r4, r5, pc}
 801469a:	bf00      	nop
 801469c:	08018274 	.word	0x08018274
 80146a0:	08018294 	.word	0x08018294
 80146a4:	08018254 	.word	0x08018254

080146a8 <std>:
 80146a8:	2300      	movs	r3, #0
 80146aa:	b510      	push	{r4, lr}
 80146ac:	4604      	mov	r4, r0
 80146ae:	e9c0 3300 	strd	r3, r3, [r0]
 80146b2:	6083      	str	r3, [r0, #8]
 80146b4:	8181      	strh	r1, [r0, #12]
 80146b6:	6643      	str	r3, [r0, #100]	; 0x64
 80146b8:	81c2      	strh	r2, [r0, #14]
 80146ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80146be:	6183      	str	r3, [r0, #24]
 80146c0:	4619      	mov	r1, r3
 80146c2:	2208      	movs	r2, #8
 80146c4:	305c      	adds	r0, #92	; 0x5c
 80146c6:	f7fe f90a 	bl	80128de <memset>
 80146ca:	4b05      	ldr	r3, [pc, #20]	; (80146e0 <std+0x38>)
 80146cc:	6263      	str	r3, [r4, #36]	; 0x24
 80146ce:	4b05      	ldr	r3, [pc, #20]	; (80146e4 <std+0x3c>)
 80146d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80146d2:	4b05      	ldr	r3, [pc, #20]	; (80146e8 <std+0x40>)
 80146d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146d6:	4b05      	ldr	r3, [pc, #20]	; (80146ec <std+0x44>)
 80146d8:	6224      	str	r4, [r4, #32]
 80146da:	6323      	str	r3, [r4, #48]	; 0x30
 80146dc:	bd10      	pop	{r4, pc}
 80146de:	bf00      	nop
 80146e0:	08013661 	.word	0x08013661
 80146e4:	08013683 	.word	0x08013683
 80146e8:	080136bb 	.word	0x080136bb
 80146ec:	080136df 	.word	0x080136df

080146f0 <_cleanup_r>:
 80146f0:	4901      	ldr	r1, [pc, #4]	; (80146f8 <_cleanup_r+0x8>)
 80146f2:	f000 b885 	b.w	8014800 <_fwalk_reent>
 80146f6:	bf00      	nop
 80146f8:	08014655 	.word	0x08014655

080146fc <__sfmoreglue>:
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	1e4a      	subs	r2, r1, #1
 8014700:	2568      	movs	r5, #104	; 0x68
 8014702:	4355      	muls	r5, r2
 8014704:	460e      	mov	r6, r1
 8014706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801470a:	f7fe f93f 	bl	801298c <_malloc_r>
 801470e:	4604      	mov	r4, r0
 8014710:	b140      	cbz	r0, 8014724 <__sfmoreglue+0x28>
 8014712:	2100      	movs	r1, #0
 8014714:	e9c0 1600 	strd	r1, r6, [r0]
 8014718:	300c      	adds	r0, #12
 801471a:	60a0      	str	r0, [r4, #8]
 801471c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014720:	f7fe f8dd 	bl	80128de <memset>
 8014724:	4620      	mov	r0, r4
 8014726:	bd70      	pop	{r4, r5, r6, pc}

08014728 <__sinit>:
 8014728:	6983      	ldr	r3, [r0, #24]
 801472a:	b510      	push	{r4, lr}
 801472c:	4604      	mov	r4, r0
 801472e:	bb33      	cbnz	r3, 801477e <__sinit+0x56>
 8014730:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014734:	6503      	str	r3, [r0, #80]	; 0x50
 8014736:	4b12      	ldr	r3, [pc, #72]	; (8014780 <__sinit+0x58>)
 8014738:	4a12      	ldr	r2, [pc, #72]	; (8014784 <__sinit+0x5c>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	6282      	str	r2, [r0, #40]	; 0x28
 801473e:	4298      	cmp	r0, r3
 8014740:	bf04      	itt	eq
 8014742:	2301      	moveq	r3, #1
 8014744:	6183      	streq	r3, [r0, #24]
 8014746:	f000 f81f 	bl	8014788 <__sfp>
 801474a:	6060      	str	r0, [r4, #4]
 801474c:	4620      	mov	r0, r4
 801474e:	f000 f81b 	bl	8014788 <__sfp>
 8014752:	60a0      	str	r0, [r4, #8]
 8014754:	4620      	mov	r0, r4
 8014756:	f000 f817 	bl	8014788 <__sfp>
 801475a:	2200      	movs	r2, #0
 801475c:	60e0      	str	r0, [r4, #12]
 801475e:	2104      	movs	r1, #4
 8014760:	6860      	ldr	r0, [r4, #4]
 8014762:	f7ff ffa1 	bl	80146a8 <std>
 8014766:	2201      	movs	r2, #1
 8014768:	2109      	movs	r1, #9
 801476a:	68a0      	ldr	r0, [r4, #8]
 801476c:	f7ff ff9c 	bl	80146a8 <std>
 8014770:	2202      	movs	r2, #2
 8014772:	2112      	movs	r1, #18
 8014774:	68e0      	ldr	r0, [r4, #12]
 8014776:	f7ff ff97 	bl	80146a8 <std>
 801477a:	2301      	movs	r3, #1
 801477c:	61a3      	str	r3, [r4, #24]
 801477e:	bd10      	pop	{r4, pc}
 8014780:	080181fc 	.word	0x080181fc
 8014784:	080146f1 	.word	0x080146f1

08014788 <__sfp>:
 8014788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801478a:	4b1b      	ldr	r3, [pc, #108]	; (80147f8 <__sfp+0x70>)
 801478c:	681e      	ldr	r6, [r3, #0]
 801478e:	69b3      	ldr	r3, [r6, #24]
 8014790:	4607      	mov	r7, r0
 8014792:	b913      	cbnz	r3, 801479a <__sfp+0x12>
 8014794:	4630      	mov	r0, r6
 8014796:	f7ff ffc7 	bl	8014728 <__sinit>
 801479a:	3648      	adds	r6, #72	; 0x48
 801479c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80147a0:	3b01      	subs	r3, #1
 80147a2:	d503      	bpl.n	80147ac <__sfp+0x24>
 80147a4:	6833      	ldr	r3, [r6, #0]
 80147a6:	b133      	cbz	r3, 80147b6 <__sfp+0x2e>
 80147a8:	6836      	ldr	r6, [r6, #0]
 80147aa:	e7f7      	b.n	801479c <__sfp+0x14>
 80147ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80147b0:	b16d      	cbz	r5, 80147ce <__sfp+0x46>
 80147b2:	3468      	adds	r4, #104	; 0x68
 80147b4:	e7f4      	b.n	80147a0 <__sfp+0x18>
 80147b6:	2104      	movs	r1, #4
 80147b8:	4638      	mov	r0, r7
 80147ba:	f7ff ff9f 	bl	80146fc <__sfmoreglue>
 80147be:	6030      	str	r0, [r6, #0]
 80147c0:	2800      	cmp	r0, #0
 80147c2:	d1f1      	bne.n	80147a8 <__sfp+0x20>
 80147c4:	230c      	movs	r3, #12
 80147c6:	603b      	str	r3, [r7, #0]
 80147c8:	4604      	mov	r4, r0
 80147ca:	4620      	mov	r0, r4
 80147cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147ce:	4b0b      	ldr	r3, [pc, #44]	; (80147fc <__sfp+0x74>)
 80147d0:	6665      	str	r5, [r4, #100]	; 0x64
 80147d2:	e9c4 5500 	strd	r5, r5, [r4]
 80147d6:	60a5      	str	r5, [r4, #8]
 80147d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80147dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80147e0:	2208      	movs	r2, #8
 80147e2:	4629      	mov	r1, r5
 80147e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80147e8:	f7fe f879 	bl	80128de <memset>
 80147ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80147f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80147f4:	e7e9      	b.n	80147ca <__sfp+0x42>
 80147f6:	bf00      	nop
 80147f8:	080181fc 	.word	0x080181fc
 80147fc:	ffff0001 	.word	0xffff0001

08014800 <_fwalk_reent>:
 8014800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014804:	4680      	mov	r8, r0
 8014806:	4689      	mov	r9, r1
 8014808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801480c:	2600      	movs	r6, #0
 801480e:	b914      	cbnz	r4, 8014816 <_fwalk_reent+0x16>
 8014810:	4630      	mov	r0, r6
 8014812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014816:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801481a:	3f01      	subs	r7, #1
 801481c:	d501      	bpl.n	8014822 <_fwalk_reent+0x22>
 801481e:	6824      	ldr	r4, [r4, #0]
 8014820:	e7f5      	b.n	801480e <_fwalk_reent+0xe>
 8014822:	89ab      	ldrh	r3, [r5, #12]
 8014824:	2b01      	cmp	r3, #1
 8014826:	d907      	bls.n	8014838 <_fwalk_reent+0x38>
 8014828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801482c:	3301      	adds	r3, #1
 801482e:	d003      	beq.n	8014838 <_fwalk_reent+0x38>
 8014830:	4629      	mov	r1, r5
 8014832:	4640      	mov	r0, r8
 8014834:	47c8      	blx	r9
 8014836:	4306      	orrs	r6, r0
 8014838:	3568      	adds	r5, #104	; 0x68
 801483a:	e7ee      	b.n	801481a <_fwalk_reent+0x1a>

0801483c <_localeconv_r>:
 801483c:	4b04      	ldr	r3, [pc, #16]	; (8014850 <_localeconv_r+0x14>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	6a18      	ldr	r0, [r3, #32]
 8014842:	4b04      	ldr	r3, [pc, #16]	; (8014854 <_localeconv_r+0x18>)
 8014844:	2800      	cmp	r0, #0
 8014846:	bf08      	it	eq
 8014848:	4618      	moveq	r0, r3
 801484a:	30f0      	adds	r0, #240	; 0xf0
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop
 8014850:	20000434 	.word	0x20000434
 8014854:	20000498 	.word	0x20000498

08014858 <_lseek_r>:
 8014858:	b538      	push	{r3, r4, r5, lr}
 801485a:	4c07      	ldr	r4, [pc, #28]	; (8014878 <_lseek_r+0x20>)
 801485c:	4605      	mov	r5, r0
 801485e:	4608      	mov	r0, r1
 8014860:	4611      	mov	r1, r2
 8014862:	2200      	movs	r2, #0
 8014864:	6022      	str	r2, [r4, #0]
 8014866:	461a      	mov	r2, r3
 8014868:	f7f0 ff22 	bl	80056b0 <_lseek>
 801486c:	1c43      	adds	r3, r0, #1
 801486e:	d102      	bne.n	8014876 <_lseek_r+0x1e>
 8014870:	6823      	ldr	r3, [r4, #0]
 8014872:	b103      	cbz	r3, 8014876 <_lseek_r+0x1e>
 8014874:	602b      	str	r3, [r5, #0]
 8014876:	bd38      	pop	{r3, r4, r5, pc}
 8014878:	20006808 	.word	0x20006808

0801487c <__swhatbuf_r>:
 801487c:	b570      	push	{r4, r5, r6, lr}
 801487e:	460e      	mov	r6, r1
 8014880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014884:	2900      	cmp	r1, #0
 8014886:	b096      	sub	sp, #88	; 0x58
 8014888:	4614      	mov	r4, r2
 801488a:	461d      	mov	r5, r3
 801488c:	da07      	bge.n	801489e <__swhatbuf_r+0x22>
 801488e:	2300      	movs	r3, #0
 8014890:	602b      	str	r3, [r5, #0]
 8014892:	89b3      	ldrh	r3, [r6, #12]
 8014894:	061a      	lsls	r2, r3, #24
 8014896:	d410      	bmi.n	80148ba <__swhatbuf_r+0x3e>
 8014898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801489c:	e00e      	b.n	80148bc <__swhatbuf_r+0x40>
 801489e:	466a      	mov	r2, sp
 80148a0:	f000 fd22 	bl	80152e8 <_fstat_r>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	dbf2      	blt.n	801488e <__swhatbuf_r+0x12>
 80148a8:	9a01      	ldr	r2, [sp, #4]
 80148aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80148ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80148b2:	425a      	negs	r2, r3
 80148b4:	415a      	adcs	r2, r3
 80148b6:	602a      	str	r2, [r5, #0]
 80148b8:	e7ee      	b.n	8014898 <__swhatbuf_r+0x1c>
 80148ba:	2340      	movs	r3, #64	; 0x40
 80148bc:	2000      	movs	r0, #0
 80148be:	6023      	str	r3, [r4, #0]
 80148c0:	b016      	add	sp, #88	; 0x58
 80148c2:	bd70      	pop	{r4, r5, r6, pc}

080148c4 <__smakebuf_r>:
 80148c4:	898b      	ldrh	r3, [r1, #12]
 80148c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80148c8:	079d      	lsls	r5, r3, #30
 80148ca:	4606      	mov	r6, r0
 80148cc:	460c      	mov	r4, r1
 80148ce:	d507      	bpl.n	80148e0 <__smakebuf_r+0x1c>
 80148d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80148d4:	6023      	str	r3, [r4, #0]
 80148d6:	6123      	str	r3, [r4, #16]
 80148d8:	2301      	movs	r3, #1
 80148da:	6163      	str	r3, [r4, #20]
 80148dc:	b002      	add	sp, #8
 80148de:	bd70      	pop	{r4, r5, r6, pc}
 80148e0:	ab01      	add	r3, sp, #4
 80148e2:	466a      	mov	r2, sp
 80148e4:	f7ff ffca 	bl	801487c <__swhatbuf_r>
 80148e8:	9900      	ldr	r1, [sp, #0]
 80148ea:	4605      	mov	r5, r0
 80148ec:	4630      	mov	r0, r6
 80148ee:	f7fe f84d 	bl	801298c <_malloc_r>
 80148f2:	b948      	cbnz	r0, 8014908 <__smakebuf_r+0x44>
 80148f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148f8:	059a      	lsls	r2, r3, #22
 80148fa:	d4ef      	bmi.n	80148dc <__smakebuf_r+0x18>
 80148fc:	f023 0303 	bic.w	r3, r3, #3
 8014900:	f043 0302 	orr.w	r3, r3, #2
 8014904:	81a3      	strh	r3, [r4, #12]
 8014906:	e7e3      	b.n	80148d0 <__smakebuf_r+0xc>
 8014908:	4b0d      	ldr	r3, [pc, #52]	; (8014940 <__smakebuf_r+0x7c>)
 801490a:	62b3      	str	r3, [r6, #40]	; 0x28
 801490c:	89a3      	ldrh	r3, [r4, #12]
 801490e:	6020      	str	r0, [r4, #0]
 8014910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014914:	81a3      	strh	r3, [r4, #12]
 8014916:	9b00      	ldr	r3, [sp, #0]
 8014918:	6163      	str	r3, [r4, #20]
 801491a:	9b01      	ldr	r3, [sp, #4]
 801491c:	6120      	str	r0, [r4, #16]
 801491e:	b15b      	cbz	r3, 8014938 <__smakebuf_r+0x74>
 8014920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014924:	4630      	mov	r0, r6
 8014926:	f000 fcf1 	bl	801530c <_isatty_r>
 801492a:	b128      	cbz	r0, 8014938 <__smakebuf_r+0x74>
 801492c:	89a3      	ldrh	r3, [r4, #12]
 801492e:	f023 0303 	bic.w	r3, r3, #3
 8014932:	f043 0301 	orr.w	r3, r3, #1
 8014936:	81a3      	strh	r3, [r4, #12]
 8014938:	89a3      	ldrh	r3, [r4, #12]
 801493a:	431d      	orrs	r5, r3
 801493c:	81a5      	strh	r5, [r4, #12]
 801493e:	e7cd      	b.n	80148dc <__smakebuf_r+0x18>
 8014940:	080146f1 	.word	0x080146f1

08014944 <memmove>:
 8014944:	4288      	cmp	r0, r1
 8014946:	b510      	push	{r4, lr}
 8014948:	eb01 0302 	add.w	r3, r1, r2
 801494c:	d807      	bhi.n	801495e <memmove+0x1a>
 801494e:	1e42      	subs	r2, r0, #1
 8014950:	4299      	cmp	r1, r3
 8014952:	d00a      	beq.n	801496a <memmove+0x26>
 8014954:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014958:	f802 4f01 	strb.w	r4, [r2, #1]!
 801495c:	e7f8      	b.n	8014950 <memmove+0xc>
 801495e:	4283      	cmp	r3, r0
 8014960:	d9f5      	bls.n	801494e <memmove+0xa>
 8014962:	1881      	adds	r1, r0, r2
 8014964:	1ad2      	subs	r2, r2, r3
 8014966:	42d3      	cmn	r3, r2
 8014968:	d100      	bne.n	801496c <memmove+0x28>
 801496a:	bd10      	pop	{r4, pc}
 801496c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014970:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014974:	e7f7      	b.n	8014966 <memmove+0x22>

08014976 <__malloc_lock>:
 8014976:	4770      	bx	lr

08014978 <__malloc_unlock>:
 8014978:	4770      	bx	lr

0801497a <_Balloc>:
 801497a:	b570      	push	{r4, r5, r6, lr}
 801497c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801497e:	4604      	mov	r4, r0
 8014980:	460e      	mov	r6, r1
 8014982:	b93d      	cbnz	r5, 8014994 <_Balloc+0x1a>
 8014984:	2010      	movs	r0, #16
 8014986:	f7fd ff8f 	bl	80128a8 <malloc>
 801498a:	6260      	str	r0, [r4, #36]	; 0x24
 801498c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014990:	6005      	str	r5, [r0, #0]
 8014992:	60c5      	str	r5, [r0, #12]
 8014994:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014996:	68eb      	ldr	r3, [r5, #12]
 8014998:	b183      	cbz	r3, 80149bc <_Balloc+0x42>
 801499a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80149a2:	b9b8      	cbnz	r0, 80149d4 <_Balloc+0x5a>
 80149a4:	2101      	movs	r1, #1
 80149a6:	fa01 f506 	lsl.w	r5, r1, r6
 80149aa:	1d6a      	adds	r2, r5, #5
 80149ac:	0092      	lsls	r2, r2, #2
 80149ae:	4620      	mov	r0, r4
 80149b0:	f000 fabe 	bl	8014f30 <_calloc_r>
 80149b4:	b160      	cbz	r0, 80149d0 <_Balloc+0x56>
 80149b6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80149ba:	e00e      	b.n	80149da <_Balloc+0x60>
 80149bc:	2221      	movs	r2, #33	; 0x21
 80149be:	2104      	movs	r1, #4
 80149c0:	4620      	mov	r0, r4
 80149c2:	f000 fab5 	bl	8014f30 <_calloc_r>
 80149c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149c8:	60e8      	str	r0, [r5, #12]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d1e4      	bne.n	801499a <_Balloc+0x20>
 80149d0:	2000      	movs	r0, #0
 80149d2:	bd70      	pop	{r4, r5, r6, pc}
 80149d4:	6802      	ldr	r2, [r0, #0]
 80149d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80149da:	2300      	movs	r3, #0
 80149dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80149e0:	e7f7      	b.n	80149d2 <_Balloc+0x58>

080149e2 <_Bfree>:
 80149e2:	b570      	push	{r4, r5, r6, lr}
 80149e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80149e6:	4606      	mov	r6, r0
 80149e8:	460d      	mov	r5, r1
 80149ea:	b93c      	cbnz	r4, 80149fc <_Bfree+0x1a>
 80149ec:	2010      	movs	r0, #16
 80149ee:	f7fd ff5b 	bl	80128a8 <malloc>
 80149f2:	6270      	str	r0, [r6, #36]	; 0x24
 80149f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80149f8:	6004      	str	r4, [r0, #0]
 80149fa:	60c4      	str	r4, [r0, #12]
 80149fc:	b13d      	cbz	r5, 8014a0e <_Bfree+0x2c>
 80149fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014a00:	686a      	ldr	r2, [r5, #4]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a08:	6029      	str	r1, [r5, #0]
 8014a0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014a0e:	bd70      	pop	{r4, r5, r6, pc}

08014a10 <__multadd>:
 8014a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a14:	690d      	ldr	r5, [r1, #16]
 8014a16:	461f      	mov	r7, r3
 8014a18:	4606      	mov	r6, r0
 8014a1a:	460c      	mov	r4, r1
 8014a1c:	f101 0c14 	add.w	ip, r1, #20
 8014a20:	2300      	movs	r3, #0
 8014a22:	f8dc 0000 	ldr.w	r0, [ip]
 8014a26:	b281      	uxth	r1, r0
 8014a28:	fb02 7101 	mla	r1, r2, r1, r7
 8014a2c:	0c0f      	lsrs	r7, r1, #16
 8014a2e:	0c00      	lsrs	r0, r0, #16
 8014a30:	fb02 7000 	mla	r0, r2, r0, r7
 8014a34:	b289      	uxth	r1, r1
 8014a36:	3301      	adds	r3, #1
 8014a38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014a3c:	429d      	cmp	r5, r3
 8014a3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014a42:	f84c 1b04 	str.w	r1, [ip], #4
 8014a46:	dcec      	bgt.n	8014a22 <__multadd+0x12>
 8014a48:	b1d7      	cbz	r7, 8014a80 <__multadd+0x70>
 8014a4a:	68a3      	ldr	r3, [r4, #8]
 8014a4c:	42ab      	cmp	r3, r5
 8014a4e:	dc12      	bgt.n	8014a76 <__multadd+0x66>
 8014a50:	6861      	ldr	r1, [r4, #4]
 8014a52:	4630      	mov	r0, r6
 8014a54:	3101      	adds	r1, #1
 8014a56:	f7ff ff90 	bl	801497a <_Balloc>
 8014a5a:	6922      	ldr	r2, [r4, #16]
 8014a5c:	3202      	adds	r2, #2
 8014a5e:	f104 010c 	add.w	r1, r4, #12
 8014a62:	4680      	mov	r8, r0
 8014a64:	0092      	lsls	r2, r2, #2
 8014a66:	300c      	adds	r0, #12
 8014a68:	f7fd ff2e 	bl	80128c8 <memcpy>
 8014a6c:	4621      	mov	r1, r4
 8014a6e:	4630      	mov	r0, r6
 8014a70:	f7ff ffb7 	bl	80149e2 <_Bfree>
 8014a74:	4644      	mov	r4, r8
 8014a76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014a7a:	3501      	adds	r5, #1
 8014a7c:	615f      	str	r7, [r3, #20]
 8014a7e:	6125      	str	r5, [r4, #16]
 8014a80:	4620      	mov	r0, r4
 8014a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a86 <__hi0bits>:
 8014a86:	0c02      	lsrs	r2, r0, #16
 8014a88:	0412      	lsls	r2, r2, #16
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	b9b2      	cbnz	r2, 8014abc <__hi0bits+0x36>
 8014a8e:	0403      	lsls	r3, r0, #16
 8014a90:	2010      	movs	r0, #16
 8014a92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014a96:	bf04      	itt	eq
 8014a98:	021b      	lsleq	r3, r3, #8
 8014a9a:	3008      	addeq	r0, #8
 8014a9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014aa0:	bf04      	itt	eq
 8014aa2:	011b      	lsleq	r3, r3, #4
 8014aa4:	3004      	addeq	r0, #4
 8014aa6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014aaa:	bf04      	itt	eq
 8014aac:	009b      	lsleq	r3, r3, #2
 8014aae:	3002      	addeq	r0, #2
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	db06      	blt.n	8014ac2 <__hi0bits+0x3c>
 8014ab4:	005b      	lsls	r3, r3, #1
 8014ab6:	d503      	bpl.n	8014ac0 <__hi0bits+0x3a>
 8014ab8:	3001      	adds	r0, #1
 8014aba:	4770      	bx	lr
 8014abc:	2000      	movs	r0, #0
 8014abe:	e7e8      	b.n	8014a92 <__hi0bits+0xc>
 8014ac0:	2020      	movs	r0, #32
 8014ac2:	4770      	bx	lr

08014ac4 <__lo0bits>:
 8014ac4:	6803      	ldr	r3, [r0, #0]
 8014ac6:	f013 0207 	ands.w	r2, r3, #7
 8014aca:	4601      	mov	r1, r0
 8014acc:	d00b      	beq.n	8014ae6 <__lo0bits+0x22>
 8014ace:	07da      	lsls	r2, r3, #31
 8014ad0:	d423      	bmi.n	8014b1a <__lo0bits+0x56>
 8014ad2:	0798      	lsls	r0, r3, #30
 8014ad4:	bf49      	itett	mi
 8014ad6:	085b      	lsrmi	r3, r3, #1
 8014ad8:	089b      	lsrpl	r3, r3, #2
 8014ada:	2001      	movmi	r0, #1
 8014adc:	600b      	strmi	r3, [r1, #0]
 8014ade:	bf5c      	itt	pl
 8014ae0:	600b      	strpl	r3, [r1, #0]
 8014ae2:	2002      	movpl	r0, #2
 8014ae4:	4770      	bx	lr
 8014ae6:	b298      	uxth	r0, r3
 8014ae8:	b9a8      	cbnz	r0, 8014b16 <__lo0bits+0x52>
 8014aea:	0c1b      	lsrs	r3, r3, #16
 8014aec:	2010      	movs	r0, #16
 8014aee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014af2:	bf04      	itt	eq
 8014af4:	0a1b      	lsreq	r3, r3, #8
 8014af6:	3008      	addeq	r0, #8
 8014af8:	071a      	lsls	r2, r3, #28
 8014afa:	bf04      	itt	eq
 8014afc:	091b      	lsreq	r3, r3, #4
 8014afe:	3004      	addeq	r0, #4
 8014b00:	079a      	lsls	r2, r3, #30
 8014b02:	bf04      	itt	eq
 8014b04:	089b      	lsreq	r3, r3, #2
 8014b06:	3002      	addeq	r0, #2
 8014b08:	07da      	lsls	r2, r3, #31
 8014b0a:	d402      	bmi.n	8014b12 <__lo0bits+0x4e>
 8014b0c:	085b      	lsrs	r3, r3, #1
 8014b0e:	d006      	beq.n	8014b1e <__lo0bits+0x5a>
 8014b10:	3001      	adds	r0, #1
 8014b12:	600b      	str	r3, [r1, #0]
 8014b14:	4770      	bx	lr
 8014b16:	4610      	mov	r0, r2
 8014b18:	e7e9      	b.n	8014aee <__lo0bits+0x2a>
 8014b1a:	2000      	movs	r0, #0
 8014b1c:	4770      	bx	lr
 8014b1e:	2020      	movs	r0, #32
 8014b20:	4770      	bx	lr

08014b22 <__i2b>:
 8014b22:	b510      	push	{r4, lr}
 8014b24:	460c      	mov	r4, r1
 8014b26:	2101      	movs	r1, #1
 8014b28:	f7ff ff27 	bl	801497a <_Balloc>
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	6144      	str	r4, [r0, #20]
 8014b30:	6102      	str	r2, [r0, #16]
 8014b32:	bd10      	pop	{r4, pc}

08014b34 <__multiply>:
 8014b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b38:	4614      	mov	r4, r2
 8014b3a:	690a      	ldr	r2, [r1, #16]
 8014b3c:	6923      	ldr	r3, [r4, #16]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	bfb8      	it	lt
 8014b42:	460b      	movlt	r3, r1
 8014b44:	4688      	mov	r8, r1
 8014b46:	bfbc      	itt	lt
 8014b48:	46a0      	movlt	r8, r4
 8014b4a:	461c      	movlt	r4, r3
 8014b4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014b50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014b54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014b5c:	eb07 0609 	add.w	r6, r7, r9
 8014b60:	42b3      	cmp	r3, r6
 8014b62:	bfb8      	it	lt
 8014b64:	3101      	addlt	r1, #1
 8014b66:	f7ff ff08 	bl	801497a <_Balloc>
 8014b6a:	f100 0514 	add.w	r5, r0, #20
 8014b6e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014b72:	462b      	mov	r3, r5
 8014b74:	2200      	movs	r2, #0
 8014b76:	4573      	cmp	r3, lr
 8014b78:	d316      	bcc.n	8014ba8 <__multiply+0x74>
 8014b7a:	f104 0214 	add.w	r2, r4, #20
 8014b7e:	f108 0114 	add.w	r1, r8, #20
 8014b82:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014b86:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014b8a:	9300      	str	r3, [sp, #0]
 8014b8c:	9b00      	ldr	r3, [sp, #0]
 8014b8e:	9201      	str	r2, [sp, #4]
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d80c      	bhi.n	8014bae <__multiply+0x7a>
 8014b94:	2e00      	cmp	r6, #0
 8014b96:	dd03      	ble.n	8014ba0 <__multiply+0x6c>
 8014b98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d05d      	beq.n	8014c5c <__multiply+0x128>
 8014ba0:	6106      	str	r6, [r0, #16]
 8014ba2:	b003      	add	sp, #12
 8014ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba8:	f843 2b04 	str.w	r2, [r3], #4
 8014bac:	e7e3      	b.n	8014b76 <__multiply+0x42>
 8014bae:	f8b2 b000 	ldrh.w	fp, [r2]
 8014bb2:	f1bb 0f00 	cmp.w	fp, #0
 8014bb6:	d023      	beq.n	8014c00 <__multiply+0xcc>
 8014bb8:	4689      	mov	r9, r1
 8014bba:	46ac      	mov	ip, r5
 8014bbc:	f04f 0800 	mov.w	r8, #0
 8014bc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8014bc4:	f8dc a000 	ldr.w	sl, [ip]
 8014bc8:	b2a3      	uxth	r3, r4
 8014bca:	fa1f fa8a 	uxth.w	sl, sl
 8014bce:	fb0b a303 	mla	r3, fp, r3, sl
 8014bd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014bd6:	f8dc 4000 	ldr.w	r4, [ip]
 8014bda:	4443      	add	r3, r8
 8014bdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014be0:	fb0b 840a 	mla	r4, fp, sl, r8
 8014be4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014be8:	46e2      	mov	sl, ip
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014bf0:	454f      	cmp	r7, r9
 8014bf2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014bf6:	f84a 3b04 	str.w	r3, [sl], #4
 8014bfa:	d82b      	bhi.n	8014c54 <__multiply+0x120>
 8014bfc:	f8cc 8004 	str.w	r8, [ip, #4]
 8014c00:	9b01      	ldr	r3, [sp, #4]
 8014c02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014c06:	3204      	adds	r2, #4
 8014c08:	f1ba 0f00 	cmp.w	sl, #0
 8014c0c:	d020      	beq.n	8014c50 <__multiply+0x11c>
 8014c0e:	682b      	ldr	r3, [r5, #0]
 8014c10:	4689      	mov	r9, r1
 8014c12:	46a8      	mov	r8, r5
 8014c14:	f04f 0b00 	mov.w	fp, #0
 8014c18:	f8b9 c000 	ldrh.w	ip, [r9]
 8014c1c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014c20:	fb0a 440c 	mla	r4, sl, ip, r4
 8014c24:	445c      	add	r4, fp
 8014c26:	46c4      	mov	ip, r8
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014c2e:	f84c 3b04 	str.w	r3, [ip], #4
 8014c32:	f859 3b04 	ldr.w	r3, [r9], #4
 8014c36:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014c3a:	0c1b      	lsrs	r3, r3, #16
 8014c3c:	fb0a b303 	mla	r3, sl, r3, fp
 8014c40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014c44:	454f      	cmp	r7, r9
 8014c46:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014c4a:	d805      	bhi.n	8014c58 <__multiply+0x124>
 8014c4c:	f8c8 3004 	str.w	r3, [r8, #4]
 8014c50:	3504      	adds	r5, #4
 8014c52:	e79b      	b.n	8014b8c <__multiply+0x58>
 8014c54:	46d4      	mov	ip, sl
 8014c56:	e7b3      	b.n	8014bc0 <__multiply+0x8c>
 8014c58:	46e0      	mov	r8, ip
 8014c5a:	e7dd      	b.n	8014c18 <__multiply+0xe4>
 8014c5c:	3e01      	subs	r6, #1
 8014c5e:	e799      	b.n	8014b94 <__multiply+0x60>

08014c60 <__pow5mult>:
 8014c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c64:	4615      	mov	r5, r2
 8014c66:	f012 0203 	ands.w	r2, r2, #3
 8014c6a:	4606      	mov	r6, r0
 8014c6c:	460f      	mov	r7, r1
 8014c6e:	d007      	beq.n	8014c80 <__pow5mult+0x20>
 8014c70:	3a01      	subs	r2, #1
 8014c72:	4c21      	ldr	r4, [pc, #132]	; (8014cf8 <__pow5mult+0x98>)
 8014c74:	2300      	movs	r3, #0
 8014c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c7a:	f7ff fec9 	bl	8014a10 <__multadd>
 8014c7e:	4607      	mov	r7, r0
 8014c80:	10ad      	asrs	r5, r5, #2
 8014c82:	d035      	beq.n	8014cf0 <__pow5mult+0x90>
 8014c84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014c86:	b93c      	cbnz	r4, 8014c98 <__pow5mult+0x38>
 8014c88:	2010      	movs	r0, #16
 8014c8a:	f7fd fe0d 	bl	80128a8 <malloc>
 8014c8e:	6270      	str	r0, [r6, #36]	; 0x24
 8014c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c94:	6004      	str	r4, [r0, #0]
 8014c96:	60c4      	str	r4, [r0, #12]
 8014c98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014ca0:	b94c      	cbnz	r4, 8014cb6 <__pow5mult+0x56>
 8014ca2:	f240 2171 	movw	r1, #625	; 0x271
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	f7ff ff3b 	bl	8014b22 <__i2b>
 8014cac:	2300      	movs	r3, #0
 8014cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	6003      	str	r3, [r0, #0]
 8014cb6:	f04f 0800 	mov.w	r8, #0
 8014cba:	07eb      	lsls	r3, r5, #31
 8014cbc:	d50a      	bpl.n	8014cd4 <__pow5mult+0x74>
 8014cbe:	4639      	mov	r1, r7
 8014cc0:	4622      	mov	r2, r4
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	f7ff ff36 	bl	8014b34 <__multiply>
 8014cc8:	4639      	mov	r1, r7
 8014cca:	4681      	mov	r9, r0
 8014ccc:	4630      	mov	r0, r6
 8014cce:	f7ff fe88 	bl	80149e2 <_Bfree>
 8014cd2:	464f      	mov	r7, r9
 8014cd4:	106d      	asrs	r5, r5, #1
 8014cd6:	d00b      	beq.n	8014cf0 <__pow5mult+0x90>
 8014cd8:	6820      	ldr	r0, [r4, #0]
 8014cda:	b938      	cbnz	r0, 8014cec <__pow5mult+0x8c>
 8014cdc:	4622      	mov	r2, r4
 8014cde:	4621      	mov	r1, r4
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	f7ff ff27 	bl	8014b34 <__multiply>
 8014ce6:	6020      	str	r0, [r4, #0]
 8014ce8:	f8c0 8000 	str.w	r8, [r0]
 8014cec:	4604      	mov	r4, r0
 8014cee:	e7e4      	b.n	8014cba <__pow5mult+0x5a>
 8014cf0:	4638      	mov	r0, r7
 8014cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cf6:	bf00      	nop
 8014cf8:	080183a8 	.word	0x080183a8

08014cfc <__lshift>:
 8014cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d00:	460c      	mov	r4, r1
 8014d02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d06:	6923      	ldr	r3, [r4, #16]
 8014d08:	6849      	ldr	r1, [r1, #4]
 8014d0a:	eb0a 0903 	add.w	r9, sl, r3
 8014d0e:	68a3      	ldr	r3, [r4, #8]
 8014d10:	4607      	mov	r7, r0
 8014d12:	4616      	mov	r6, r2
 8014d14:	f109 0501 	add.w	r5, r9, #1
 8014d18:	42ab      	cmp	r3, r5
 8014d1a:	db32      	blt.n	8014d82 <__lshift+0x86>
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	f7ff fe2c 	bl	801497a <_Balloc>
 8014d22:	2300      	movs	r3, #0
 8014d24:	4680      	mov	r8, r0
 8014d26:	f100 0114 	add.w	r1, r0, #20
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	4553      	cmp	r3, sl
 8014d2e:	db2b      	blt.n	8014d88 <__lshift+0x8c>
 8014d30:	6920      	ldr	r0, [r4, #16]
 8014d32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d36:	f104 0314 	add.w	r3, r4, #20
 8014d3a:	f016 021f 	ands.w	r2, r6, #31
 8014d3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d46:	d025      	beq.n	8014d94 <__lshift+0x98>
 8014d48:	f1c2 0e20 	rsb	lr, r2, #32
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	681e      	ldr	r6, [r3, #0]
 8014d50:	468a      	mov	sl, r1
 8014d52:	4096      	lsls	r6, r2
 8014d54:	4330      	orrs	r0, r6
 8014d56:	f84a 0b04 	str.w	r0, [sl], #4
 8014d5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8014d5e:	459c      	cmp	ip, r3
 8014d60:	fa20 f00e 	lsr.w	r0, r0, lr
 8014d64:	d814      	bhi.n	8014d90 <__lshift+0x94>
 8014d66:	6048      	str	r0, [r1, #4]
 8014d68:	b108      	cbz	r0, 8014d6e <__lshift+0x72>
 8014d6a:	f109 0502 	add.w	r5, r9, #2
 8014d6e:	3d01      	subs	r5, #1
 8014d70:	4638      	mov	r0, r7
 8014d72:	f8c8 5010 	str.w	r5, [r8, #16]
 8014d76:	4621      	mov	r1, r4
 8014d78:	f7ff fe33 	bl	80149e2 <_Bfree>
 8014d7c:	4640      	mov	r0, r8
 8014d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d82:	3101      	adds	r1, #1
 8014d84:	005b      	lsls	r3, r3, #1
 8014d86:	e7c7      	b.n	8014d18 <__lshift+0x1c>
 8014d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	e7cd      	b.n	8014d2c <__lshift+0x30>
 8014d90:	4651      	mov	r1, sl
 8014d92:	e7dc      	b.n	8014d4e <__lshift+0x52>
 8014d94:	3904      	subs	r1, #4
 8014d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8014d9e:	459c      	cmp	ip, r3
 8014da0:	d8f9      	bhi.n	8014d96 <__lshift+0x9a>
 8014da2:	e7e4      	b.n	8014d6e <__lshift+0x72>

08014da4 <__mcmp>:
 8014da4:	6903      	ldr	r3, [r0, #16]
 8014da6:	690a      	ldr	r2, [r1, #16]
 8014da8:	1a9b      	subs	r3, r3, r2
 8014daa:	b530      	push	{r4, r5, lr}
 8014dac:	d10c      	bne.n	8014dc8 <__mcmp+0x24>
 8014dae:	0092      	lsls	r2, r2, #2
 8014db0:	3014      	adds	r0, #20
 8014db2:	3114      	adds	r1, #20
 8014db4:	1884      	adds	r4, r0, r2
 8014db6:	4411      	add	r1, r2
 8014db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014dc0:	4295      	cmp	r5, r2
 8014dc2:	d003      	beq.n	8014dcc <__mcmp+0x28>
 8014dc4:	d305      	bcc.n	8014dd2 <__mcmp+0x2e>
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	4618      	mov	r0, r3
 8014dca:	bd30      	pop	{r4, r5, pc}
 8014dcc:	42a0      	cmp	r0, r4
 8014dce:	d3f3      	bcc.n	8014db8 <__mcmp+0x14>
 8014dd0:	e7fa      	b.n	8014dc8 <__mcmp+0x24>
 8014dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd6:	e7f7      	b.n	8014dc8 <__mcmp+0x24>

08014dd8 <__mdiff>:
 8014dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ddc:	460d      	mov	r5, r1
 8014dde:	4607      	mov	r7, r0
 8014de0:	4611      	mov	r1, r2
 8014de2:	4628      	mov	r0, r5
 8014de4:	4614      	mov	r4, r2
 8014de6:	f7ff ffdd 	bl	8014da4 <__mcmp>
 8014dea:	1e06      	subs	r6, r0, #0
 8014dec:	d108      	bne.n	8014e00 <__mdiff+0x28>
 8014dee:	4631      	mov	r1, r6
 8014df0:	4638      	mov	r0, r7
 8014df2:	f7ff fdc2 	bl	801497a <_Balloc>
 8014df6:	2301      	movs	r3, #1
 8014df8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e00:	bfa4      	itt	ge
 8014e02:	4623      	movge	r3, r4
 8014e04:	462c      	movge	r4, r5
 8014e06:	4638      	mov	r0, r7
 8014e08:	6861      	ldr	r1, [r4, #4]
 8014e0a:	bfa6      	itte	ge
 8014e0c:	461d      	movge	r5, r3
 8014e0e:	2600      	movge	r6, #0
 8014e10:	2601      	movlt	r6, #1
 8014e12:	f7ff fdb2 	bl	801497a <_Balloc>
 8014e16:	692b      	ldr	r3, [r5, #16]
 8014e18:	60c6      	str	r6, [r0, #12]
 8014e1a:	6926      	ldr	r6, [r4, #16]
 8014e1c:	f105 0914 	add.w	r9, r5, #20
 8014e20:	f104 0214 	add.w	r2, r4, #20
 8014e24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014e28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014e2c:	f100 0514 	add.w	r5, r0, #20
 8014e30:	f04f 0e00 	mov.w	lr, #0
 8014e34:	f852 ab04 	ldr.w	sl, [r2], #4
 8014e38:	f859 4b04 	ldr.w	r4, [r9], #4
 8014e3c:	fa1e f18a 	uxtah	r1, lr, sl
 8014e40:	b2a3      	uxth	r3, r4
 8014e42:	1ac9      	subs	r1, r1, r3
 8014e44:	0c23      	lsrs	r3, r4, #16
 8014e46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014e4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014e4e:	b289      	uxth	r1, r1
 8014e50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014e54:	45c8      	cmp	r8, r9
 8014e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014e5a:	4694      	mov	ip, r2
 8014e5c:	f845 3b04 	str.w	r3, [r5], #4
 8014e60:	d8e8      	bhi.n	8014e34 <__mdiff+0x5c>
 8014e62:	45bc      	cmp	ip, r7
 8014e64:	d304      	bcc.n	8014e70 <__mdiff+0x98>
 8014e66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014e6a:	b183      	cbz	r3, 8014e8e <__mdiff+0xb6>
 8014e6c:	6106      	str	r6, [r0, #16]
 8014e6e:	e7c5      	b.n	8014dfc <__mdiff+0x24>
 8014e70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014e74:	fa1e f381 	uxtah	r3, lr, r1
 8014e78:	141a      	asrs	r2, r3, #16
 8014e7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014e88:	f845 3b04 	str.w	r3, [r5], #4
 8014e8c:	e7e9      	b.n	8014e62 <__mdiff+0x8a>
 8014e8e:	3e01      	subs	r6, #1
 8014e90:	e7e9      	b.n	8014e66 <__mdiff+0x8e>

08014e92 <__d2b>:
 8014e92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014e96:	460e      	mov	r6, r1
 8014e98:	2101      	movs	r1, #1
 8014e9a:	ec59 8b10 	vmov	r8, r9, d0
 8014e9e:	4615      	mov	r5, r2
 8014ea0:	f7ff fd6b 	bl	801497a <_Balloc>
 8014ea4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014ea8:	4607      	mov	r7, r0
 8014eaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014eae:	bb34      	cbnz	r4, 8014efe <__d2b+0x6c>
 8014eb0:	9301      	str	r3, [sp, #4]
 8014eb2:	f1b8 0300 	subs.w	r3, r8, #0
 8014eb6:	d027      	beq.n	8014f08 <__d2b+0x76>
 8014eb8:	a802      	add	r0, sp, #8
 8014eba:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014ebe:	f7ff fe01 	bl	8014ac4 <__lo0bits>
 8014ec2:	9900      	ldr	r1, [sp, #0]
 8014ec4:	b1f0      	cbz	r0, 8014f04 <__d2b+0x72>
 8014ec6:	9a01      	ldr	r2, [sp, #4]
 8014ec8:	f1c0 0320 	rsb	r3, r0, #32
 8014ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8014ed0:	430b      	orrs	r3, r1
 8014ed2:	40c2      	lsrs	r2, r0
 8014ed4:	617b      	str	r3, [r7, #20]
 8014ed6:	9201      	str	r2, [sp, #4]
 8014ed8:	9b01      	ldr	r3, [sp, #4]
 8014eda:	61bb      	str	r3, [r7, #24]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	bf14      	ite	ne
 8014ee0:	2102      	movne	r1, #2
 8014ee2:	2101      	moveq	r1, #1
 8014ee4:	6139      	str	r1, [r7, #16]
 8014ee6:	b1c4      	cbz	r4, 8014f1a <__d2b+0x88>
 8014ee8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014eec:	4404      	add	r4, r0
 8014eee:	6034      	str	r4, [r6, #0]
 8014ef0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ef4:	6028      	str	r0, [r5, #0]
 8014ef6:	4638      	mov	r0, r7
 8014ef8:	b003      	add	sp, #12
 8014efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f02:	e7d5      	b.n	8014eb0 <__d2b+0x1e>
 8014f04:	6179      	str	r1, [r7, #20]
 8014f06:	e7e7      	b.n	8014ed8 <__d2b+0x46>
 8014f08:	a801      	add	r0, sp, #4
 8014f0a:	f7ff fddb 	bl	8014ac4 <__lo0bits>
 8014f0e:	9b01      	ldr	r3, [sp, #4]
 8014f10:	617b      	str	r3, [r7, #20]
 8014f12:	2101      	movs	r1, #1
 8014f14:	6139      	str	r1, [r7, #16]
 8014f16:	3020      	adds	r0, #32
 8014f18:	e7e5      	b.n	8014ee6 <__d2b+0x54>
 8014f1a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014f1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014f22:	6030      	str	r0, [r6, #0]
 8014f24:	6918      	ldr	r0, [r3, #16]
 8014f26:	f7ff fdae 	bl	8014a86 <__hi0bits>
 8014f2a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014f2e:	e7e1      	b.n	8014ef4 <__d2b+0x62>

08014f30 <_calloc_r>:
 8014f30:	b538      	push	{r3, r4, r5, lr}
 8014f32:	fb02 f401 	mul.w	r4, r2, r1
 8014f36:	4621      	mov	r1, r4
 8014f38:	f7fd fd28 	bl	801298c <_malloc_r>
 8014f3c:	4605      	mov	r5, r0
 8014f3e:	b118      	cbz	r0, 8014f48 <_calloc_r+0x18>
 8014f40:	4622      	mov	r2, r4
 8014f42:	2100      	movs	r1, #0
 8014f44:	f7fd fccb 	bl	80128de <memset>
 8014f48:	4628      	mov	r0, r5
 8014f4a:	bd38      	pop	{r3, r4, r5, pc}

08014f4c <_realloc_r>:
 8014f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f4e:	4607      	mov	r7, r0
 8014f50:	4614      	mov	r4, r2
 8014f52:	460e      	mov	r6, r1
 8014f54:	b921      	cbnz	r1, 8014f60 <_realloc_r+0x14>
 8014f56:	4611      	mov	r1, r2
 8014f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014f5c:	f7fd bd16 	b.w	801298c <_malloc_r>
 8014f60:	b922      	cbnz	r2, 8014f6c <_realloc_r+0x20>
 8014f62:	f7fd fcc5 	bl	80128f0 <_free_r>
 8014f66:	4625      	mov	r5, r4
 8014f68:	4628      	mov	r0, r5
 8014f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f6c:	f000 f9f0 	bl	8015350 <_malloc_usable_size_r>
 8014f70:	42a0      	cmp	r0, r4
 8014f72:	d20f      	bcs.n	8014f94 <_realloc_r+0x48>
 8014f74:	4621      	mov	r1, r4
 8014f76:	4638      	mov	r0, r7
 8014f78:	f7fd fd08 	bl	801298c <_malloc_r>
 8014f7c:	4605      	mov	r5, r0
 8014f7e:	2800      	cmp	r0, #0
 8014f80:	d0f2      	beq.n	8014f68 <_realloc_r+0x1c>
 8014f82:	4631      	mov	r1, r6
 8014f84:	4622      	mov	r2, r4
 8014f86:	f7fd fc9f 	bl	80128c8 <memcpy>
 8014f8a:	4631      	mov	r1, r6
 8014f8c:	4638      	mov	r0, r7
 8014f8e:	f7fd fcaf 	bl	80128f0 <_free_r>
 8014f92:	e7e9      	b.n	8014f68 <_realloc_r+0x1c>
 8014f94:	4635      	mov	r5, r6
 8014f96:	e7e7      	b.n	8014f68 <_realloc_r+0x1c>

08014f98 <__ssputs_r>:
 8014f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f9c:	688e      	ldr	r6, [r1, #8]
 8014f9e:	429e      	cmp	r6, r3
 8014fa0:	4682      	mov	sl, r0
 8014fa2:	460c      	mov	r4, r1
 8014fa4:	4690      	mov	r8, r2
 8014fa6:	4699      	mov	r9, r3
 8014fa8:	d837      	bhi.n	801501a <__ssputs_r+0x82>
 8014faa:	898a      	ldrh	r2, [r1, #12]
 8014fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014fb0:	d031      	beq.n	8015016 <__ssputs_r+0x7e>
 8014fb2:	6825      	ldr	r5, [r4, #0]
 8014fb4:	6909      	ldr	r1, [r1, #16]
 8014fb6:	1a6f      	subs	r7, r5, r1
 8014fb8:	6965      	ldr	r5, [r4, #20]
 8014fba:	2302      	movs	r3, #2
 8014fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014fc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8014fc4:	f109 0301 	add.w	r3, r9, #1
 8014fc8:	443b      	add	r3, r7
 8014fca:	429d      	cmp	r5, r3
 8014fcc:	bf38      	it	cc
 8014fce:	461d      	movcc	r5, r3
 8014fd0:	0553      	lsls	r3, r2, #21
 8014fd2:	d530      	bpl.n	8015036 <__ssputs_r+0x9e>
 8014fd4:	4629      	mov	r1, r5
 8014fd6:	f7fd fcd9 	bl	801298c <_malloc_r>
 8014fda:	4606      	mov	r6, r0
 8014fdc:	b950      	cbnz	r0, 8014ff4 <__ssputs_r+0x5c>
 8014fde:	230c      	movs	r3, #12
 8014fe0:	f8ca 3000 	str.w	r3, [sl]
 8014fe4:	89a3      	ldrh	r3, [r4, #12]
 8014fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fea:	81a3      	strh	r3, [r4, #12]
 8014fec:	f04f 30ff 	mov.w	r0, #4294967295
 8014ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ff4:	463a      	mov	r2, r7
 8014ff6:	6921      	ldr	r1, [r4, #16]
 8014ff8:	f7fd fc66 	bl	80128c8 <memcpy>
 8014ffc:	89a3      	ldrh	r3, [r4, #12]
 8014ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015006:	81a3      	strh	r3, [r4, #12]
 8015008:	6126      	str	r6, [r4, #16]
 801500a:	6165      	str	r5, [r4, #20]
 801500c:	443e      	add	r6, r7
 801500e:	1bed      	subs	r5, r5, r7
 8015010:	6026      	str	r6, [r4, #0]
 8015012:	60a5      	str	r5, [r4, #8]
 8015014:	464e      	mov	r6, r9
 8015016:	454e      	cmp	r6, r9
 8015018:	d900      	bls.n	801501c <__ssputs_r+0x84>
 801501a:	464e      	mov	r6, r9
 801501c:	4632      	mov	r2, r6
 801501e:	4641      	mov	r1, r8
 8015020:	6820      	ldr	r0, [r4, #0]
 8015022:	f7ff fc8f 	bl	8014944 <memmove>
 8015026:	68a3      	ldr	r3, [r4, #8]
 8015028:	1b9b      	subs	r3, r3, r6
 801502a:	60a3      	str	r3, [r4, #8]
 801502c:	6823      	ldr	r3, [r4, #0]
 801502e:	441e      	add	r6, r3
 8015030:	6026      	str	r6, [r4, #0]
 8015032:	2000      	movs	r0, #0
 8015034:	e7dc      	b.n	8014ff0 <__ssputs_r+0x58>
 8015036:	462a      	mov	r2, r5
 8015038:	f7ff ff88 	bl	8014f4c <_realloc_r>
 801503c:	4606      	mov	r6, r0
 801503e:	2800      	cmp	r0, #0
 8015040:	d1e2      	bne.n	8015008 <__ssputs_r+0x70>
 8015042:	6921      	ldr	r1, [r4, #16]
 8015044:	4650      	mov	r0, sl
 8015046:	f7fd fc53 	bl	80128f0 <_free_r>
 801504a:	e7c8      	b.n	8014fde <__ssputs_r+0x46>

0801504c <_svfiprintf_r>:
 801504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015050:	461d      	mov	r5, r3
 8015052:	898b      	ldrh	r3, [r1, #12]
 8015054:	061f      	lsls	r7, r3, #24
 8015056:	b09d      	sub	sp, #116	; 0x74
 8015058:	4680      	mov	r8, r0
 801505a:	460c      	mov	r4, r1
 801505c:	4616      	mov	r6, r2
 801505e:	d50f      	bpl.n	8015080 <_svfiprintf_r+0x34>
 8015060:	690b      	ldr	r3, [r1, #16]
 8015062:	b96b      	cbnz	r3, 8015080 <_svfiprintf_r+0x34>
 8015064:	2140      	movs	r1, #64	; 0x40
 8015066:	f7fd fc91 	bl	801298c <_malloc_r>
 801506a:	6020      	str	r0, [r4, #0]
 801506c:	6120      	str	r0, [r4, #16]
 801506e:	b928      	cbnz	r0, 801507c <_svfiprintf_r+0x30>
 8015070:	230c      	movs	r3, #12
 8015072:	f8c8 3000 	str.w	r3, [r8]
 8015076:	f04f 30ff 	mov.w	r0, #4294967295
 801507a:	e0c8      	b.n	801520e <_svfiprintf_r+0x1c2>
 801507c:	2340      	movs	r3, #64	; 0x40
 801507e:	6163      	str	r3, [r4, #20]
 8015080:	2300      	movs	r3, #0
 8015082:	9309      	str	r3, [sp, #36]	; 0x24
 8015084:	2320      	movs	r3, #32
 8015086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801508a:	2330      	movs	r3, #48	; 0x30
 801508c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015090:	9503      	str	r5, [sp, #12]
 8015092:	f04f 0b01 	mov.w	fp, #1
 8015096:	4637      	mov	r7, r6
 8015098:	463d      	mov	r5, r7
 801509a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801509e:	b10b      	cbz	r3, 80150a4 <_svfiprintf_r+0x58>
 80150a0:	2b25      	cmp	r3, #37	; 0x25
 80150a2:	d13e      	bne.n	8015122 <_svfiprintf_r+0xd6>
 80150a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80150a8:	d00b      	beq.n	80150c2 <_svfiprintf_r+0x76>
 80150aa:	4653      	mov	r3, sl
 80150ac:	4632      	mov	r2, r6
 80150ae:	4621      	mov	r1, r4
 80150b0:	4640      	mov	r0, r8
 80150b2:	f7ff ff71 	bl	8014f98 <__ssputs_r>
 80150b6:	3001      	adds	r0, #1
 80150b8:	f000 80a4 	beq.w	8015204 <_svfiprintf_r+0x1b8>
 80150bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150be:	4453      	add	r3, sl
 80150c0:	9309      	str	r3, [sp, #36]	; 0x24
 80150c2:	783b      	ldrb	r3, [r7, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f000 809d 	beq.w	8015204 <_svfiprintf_r+0x1b8>
 80150ca:	2300      	movs	r3, #0
 80150cc:	f04f 32ff 	mov.w	r2, #4294967295
 80150d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150d4:	9304      	str	r3, [sp, #16]
 80150d6:	9307      	str	r3, [sp, #28]
 80150d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150dc:	931a      	str	r3, [sp, #104]	; 0x68
 80150de:	462f      	mov	r7, r5
 80150e0:	2205      	movs	r2, #5
 80150e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80150e6:	4850      	ldr	r0, [pc, #320]	; (8015228 <_svfiprintf_r+0x1dc>)
 80150e8:	f7eb f89a 	bl	8000220 <memchr>
 80150ec:	9b04      	ldr	r3, [sp, #16]
 80150ee:	b9d0      	cbnz	r0, 8015126 <_svfiprintf_r+0xda>
 80150f0:	06d9      	lsls	r1, r3, #27
 80150f2:	bf44      	itt	mi
 80150f4:	2220      	movmi	r2, #32
 80150f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80150fa:	071a      	lsls	r2, r3, #28
 80150fc:	bf44      	itt	mi
 80150fe:	222b      	movmi	r2, #43	; 0x2b
 8015100:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015104:	782a      	ldrb	r2, [r5, #0]
 8015106:	2a2a      	cmp	r2, #42	; 0x2a
 8015108:	d015      	beq.n	8015136 <_svfiprintf_r+0xea>
 801510a:	9a07      	ldr	r2, [sp, #28]
 801510c:	462f      	mov	r7, r5
 801510e:	2000      	movs	r0, #0
 8015110:	250a      	movs	r5, #10
 8015112:	4639      	mov	r1, r7
 8015114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015118:	3b30      	subs	r3, #48	; 0x30
 801511a:	2b09      	cmp	r3, #9
 801511c:	d94d      	bls.n	80151ba <_svfiprintf_r+0x16e>
 801511e:	b1b8      	cbz	r0, 8015150 <_svfiprintf_r+0x104>
 8015120:	e00f      	b.n	8015142 <_svfiprintf_r+0xf6>
 8015122:	462f      	mov	r7, r5
 8015124:	e7b8      	b.n	8015098 <_svfiprintf_r+0x4c>
 8015126:	4a40      	ldr	r2, [pc, #256]	; (8015228 <_svfiprintf_r+0x1dc>)
 8015128:	1a80      	subs	r0, r0, r2
 801512a:	fa0b f000 	lsl.w	r0, fp, r0
 801512e:	4318      	orrs	r0, r3
 8015130:	9004      	str	r0, [sp, #16]
 8015132:	463d      	mov	r5, r7
 8015134:	e7d3      	b.n	80150de <_svfiprintf_r+0x92>
 8015136:	9a03      	ldr	r2, [sp, #12]
 8015138:	1d11      	adds	r1, r2, #4
 801513a:	6812      	ldr	r2, [r2, #0]
 801513c:	9103      	str	r1, [sp, #12]
 801513e:	2a00      	cmp	r2, #0
 8015140:	db01      	blt.n	8015146 <_svfiprintf_r+0xfa>
 8015142:	9207      	str	r2, [sp, #28]
 8015144:	e004      	b.n	8015150 <_svfiprintf_r+0x104>
 8015146:	4252      	negs	r2, r2
 8015148:	f043 0302 	orr.w	r3, r3, #2
 801514c:	9207      	str	r2, [sp, #28]
 801514e:	9304      	str	r3, [sp, #16]
 8015150:	783b      	ldrb	r3, [r7, #0]
 8015152:	2b2e      	cmp	r3, #46	; 0x2e
 8015154:	d10c      	bne.n	8015170 <_svfiprintf_r+0x124>
 8015156:	787b      	ldrb	r3, [r7, #1]
 8015158:	2b2a      	cmp	r3, #42	; 0x2a
 801515a:	d133      	bne.n	80151c4 <_svfiprintf_r+0x178>
 801515c:	9b03      	ldr	r3, [sp, #12]
 801515e:	1d1a      	adds	r2, r3, #4
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	9203      	str	r2, [sp, #12]
 8015164:	2b00      	cmp	r3, #0
 8015166:	bfb8      	it	lt
 8015168:	f04f 33ff 	movlt.w	r3, #4294967295
 801516c:	3702      	adds	r7, #2
 801516e:	9305      	str	r3, [sp, #20]
 8015170:	4d2e      	ldr	r5, [pc, #184]	; (801522c <_svfiprintf_r+0x1e0>)
 8015172:	7839      	ldrb	r1, [r7, #0]
 8015174:	2203      	movs	r2, #3
 8015176:	4628      	mov	r0, r5
 8015178:	f7eb f852 	bl	8000220 <memchr>
 801517c:	b138      	cbz	r0, 801518e <_svfiprintf_r+0x142>
 801517e:	2340      	movs	r3, #64	; 0x40
 8015180:	1b40      	subs	r0, r0, r5
 8015182:	fa03 f000 	lsl.w	r0, r3, r0
 8015186:	9b04      	ldr	r3, [sp, #16]
 8015188:	4303      	orrs	r3, r0
 801518a:	3701      	adds	r7, #1
 801518c:	9304      	str	r3, [sp, #16]
 801518e:	7839      	ldrb	r1, [r7, #0]
 8015190:	4827      	ldr	r0, [pc, #156]	; (8015230 <_svfiprintf_r+0x1e4>)
 8015192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015196:	2206      	movs	r2, #6
 8015198:	1c7e      	adds	r6, r7, #1
 801519a:	f7eb f841 	bl	8000220 <memchr>
 801519e:	2800      	cmp	r0, #0
 80151a0:	d038      	beq.n	8015214 <_svfiprintf_r+0x1c8>
 80151a2:	4b24      	ldr	r3, [pc, #144]	; (8015234 <_svfiprintf_r+0x1e8>)
 80151a4:	bb13      	cbnz	r3, 80151ec <_svfiprintf_r+0x1a0>
 80151a6:	9b03      	ldr	r3, [sp, #12]
 80151a8:	3307      	adds	r3, #7
 80151aa:	f023 0307 	bic.w	r3, r3, #7
 80151ae:	3308      	adds	r3, #8
 80151b0:	9303      	str	r3, [sp, #12]
 80151b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151b4:	444b      	add	r3, r9
 80151b6:	9309      	str	r3, [sp, #36]	; 0x24
 80151b8:	e76d      	b.n	8015096 <_svfiprintf_r+0x4a>
 80151ba:	fb05 3202 	mla	r2, r5, r2, r3
 80151be:	2001      	movs	r0, #1
 80151c0:	460f      	mov	r7, r1
 80151c2:	e7a6      	b.n	8015112 <_svfiprintf_r+0xc6>
 80151c4:	2300      	movs	r3, #0
 80151c6:	3701      	adds	r7, #1
 80151c8:	9305      	str	r3, [sp, #20]
 80151ca:	4619      	mov	r1, r3
 80151cc:	250a      	movs	r5, #10
 80151ce:	4638      	mov	r0, r7
 80151d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151d4:	3a30      	subs	r2, #48	; 0x30
 80151d6:	2a09      	cmp	r2, #9
 80151d8:	d903      	bls.n	80151e2 <_svfiprintf_r+0x196>
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d0c8      	beq.n	8015170 <_svfiprintf_r+0x124>
 80151de:	9105      	str	r1, [sp, #20]
 80151e0:	e7c6      	b.n	8015170 <_svfiprintf_r+0x124>
 80151e2:	fb05 2101 	mla	r1, r5, r1, r2
 80151e6:	2301      	movs	r3, #1
 80151e8:	4607      	mov	r7, r0
 80151ea:	e7f0      	b.n	80151ce <_svfiprintf_r+0x182>
 80151ec:	ab03      	add	r3, sp, #12
 80151ee:	9300      	str	r3, [sp, #0]
 80151f0:	4622      	mov	r2, r4
 80151f2:	4b11      	ldr	r3, [pc, #68]	; (8015238 <_svfiprintf_r+0x1ec>)
 80151f4:	a904      	add	r1, sp, #16
 80151f6:	4640      	mov	r0, r8
 80151f8:	f7fd fdf6 	bl	8012de8 <_printf_float>
 80151fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015200:	4681      	mov	r9, r0
 8015202:	d1d6      	bne.n	80151b2 <_svfiprintf_r+0x166>
 8015204:	89a3      	ldrh	r3, [r4, #12]
 8015206:	065b      	lsls	r3, r3, #25
 8015208:	f53f af35 	bmi.w	8015076 <_svfiprintf_r+0x2a>
 801520c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801520e:	b01d      	add	sp, #116	; 0x74
 8015210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015214:	ab03      	add	r3, sp, #12
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	4622      	mov	r2, r4
 801521a:	4b07      	ldr	r3, [pc, #28]	; (8015238 <_svfiprintf_r+0x1ec>)
 801521c:	a904      	add	r1, sp, #16
 801521e:	4640      	mov	r0, r8
 8015220:	f7fe f898 	bl	8013354 <_printf_i>
 8015224:	e7ea      	b.n	80151fc <_svfiprintf_r+0x1b0>
 8015226:	bf00      	nop
 8015228:	08018200 	.word	0x08018200
 801522c:	08018206 	.word	0x08018206
 8015230:	0801820a 	.word	0x0801820a
 8015234:	08012de9 	.word	0x08012de9
 8015238:	08014f99 	.word	0x08014f99

0801523c <_read_r>:
 801523c:	b538      	push	{r3, r4, r5, lr}
 801523e:	4c07      	ldr	r4, [pc, #28]	; (801525c <_read_r+0x20>)
 8015240:	4605      	mov	r5, r0
 8015242:	4608      	mov	r0, r1
 8015244:	4611      	mov	r1, r2
 8015246:	2200      	movs	r2, #0
 8015248:	6022      	str	r2, [r4, #0]
 801524a:	461a      	mov	r2, r3
 801524c:	f7f0 f9d0 	bl	80055f0 <_read>
 8015250:	1c43      	adds	r3, r0, #1
 8015252:	d102      	bne.n	801525a <_read_r+0x1e>
 8015254:	6823      	ldr	r3, [r4, #0]
 8015256:	b103      	cbz	r3, 801525a <_read_r+0x1e>
 8015258:	602b      	str	r3, [r5, #0]
 801525a:	bd38      	pop	{r3, r4, r5, pc}
 801525c:	20006808 	.word	0x20006808

08015260 <_raise_r>:
 8015260:	291f      	cmp	r1, #31
 8015262:	b538      	push	{r3, r4, r5, lr}
 8015264:	4604      	mov	r4, r0
 8015266:	460d      	mov	r5, r1
 8015268:	d904      	bls.n	8015274 <_raise_r+0x14>
 801526a:	2316      	movs	r3, #22
 801526c:	6003      	str	r3, [r0, #0]
 801526e:	f04f 30ff 	mov.w	r0, #4294967295
 8015272:	bd38      	pop	{r3, r4, r5, pc}
 8015274:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015276:	b112      	cbz	r2, 801527e <_raise_r+0x1e>
 8015278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801527c:	b94b      	cbnz	r3, 8015292 <_raise_r+0x32>
 801527e:	4620      	mov	r0, r4
 8015280:	f000 f830 	bl	80152e4 <_getpid_r>
 8015284:	462a      	mov	r2, r5
 8015286:	4601      	mov	r1, r0
 8015288:	4620      	mov	r0, r4
 801528a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801528e:	f000 b817 	b.w	80152c0 <_kill_r>
 8015292:	2b01      	cmp	r3, #1
 8015294:	d00a      	beq.n	80152ac <_raise_r+0x4c>
 8015296:	1c59      	adds	r1, r3, #1
 8015298:	d103      	bne.n	80152a2 <_raise_r+0x42>
 801529a:	2316      	movs	r3, #22
 801529c:	6003      	str	r3, [r0, #0]
 801529e:	2001      	movs	r0, #1
 80152a0:	e7e7      	b.n	8015272 <_raise_r+0x12>
 80152a2:	2400      	movs	r4, #0
 80152a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80152a8:	4628      	mov	r0, r5
 80152aa:	4798      	blx	r3
 80152ac:	2000      	movs	r0, #0
 80152ae:	e7e0      	b.n	8015272 <_raise_r+0x12>

080152b0 <raise>:
 80152b0:	4b02      	ldr	r3, [pc, #8]	; (80152bc <raise+0xc>)
 80152b2:	4601      	mov	r1, r0
 80152b4:	6818      	ldr	r0, [r3, #0]
 80152b6:	f7ff bfd3 	b.w	8015260 <_raise_r>
 80152ba:	bf00      	nop
 80152bc:	20000434 	.word	0x20000434

080152c0 <_kill_r>:
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	4c07      	ldr	r4, [pc, #28]	; (80152e0 <_kill_r+0x20>)
 80152c4:	2300      	movs	r3, #0
 80152c6:	4605      	mov	r5, r0
 80152c8:	4608      	mov	r0, r1
 80152ca:	4611      	mov	r1, r2
 80152cc:	6023      	str	r3, [r4, #0]
 80152ce:	f7f0 f975 	bl	80055bc <_kill>
 80152d2:	1c43      	adds	r3, r0, #1
 80152d4:	d102      	bne.n	80152dc <_kill_r+0x1c>
 80152d6:	6823      	ldr	r3, [r4, #0]
 80152d8:	b103      	cbz	r3, 80152dc <_kill_r+0x1c>
 80152da:	602b      	str	r3, [r5, #0]
 80152dc:	bd38      	pop	{r3, r4, r5, pc}
 80152de:	bf00      	nop
 80152e0:	20006808 	.word	0x20006808

080152e4 <_getpid_r>:
 80152e4:	f7f0 b962 	b.w	80055ac <_getpid>

080152e8 <_fstat_r>:
 80152e8:	b538      	push	{r3, r4, r5, lr}
 80152ea:	4c07      	ldr	r4, [pc, #28]	; (8015308 <_fstat_r+0x20>)
 80152ec:	2300      	movs	r3, #0
 80152ee:	4605      	mov	r5, r0
 80152f0:	4608      	mov	r0, r1
 80152f2:	4611      	mov	r1, r2
 80152f4:	6023      	str	r3, [r4, #0]
 80152f6:	f7f0 f9c0 	bl	800567a <_fstat>
 80152fa:	1c43      	adds	r3, r0, #1
 80152fc:	d102      	bne.n	8015304 <_fstat_r+0x1c>
 80152fe:	6823      	ldr	r3, [r4, #0]
 8015300:	b103      	cbz	r3, 8015304 <_fstat_r+0x1c>
 8015302:	602b      	str	r3, [r5, #0]
 8015304:	bd38      	pop	{r3, r4, r5, pc}
 8015306:	bf00      	nop
 8015308:	20006808 	.word	0x20006808

0801530c <_isatty_r>:
 801530c:	b538      	push	{r3, r4, r5, lr}
 801530e:	4c06      	ldr	r4, [pc, #24]	; (8015328 <_isatty_r+0x1c>)
 8015310:	2300      	movs	r3, #0
 8015312:	4605      	mov	r5, r0
 8015314:	4608      	mov	r0, r1
 8015316:	6023      	str	r3, [r4, #0]
 8015318:	f7f0 f9bf 	bl	800569a <_isatty>
 801531c:	1c43      	adds	r3, r0, #1
 801531e:	d102      	bne.n	8015326 <_isatty_r+0x1a>
 8015320:	6823      	ldr	r3, [r4, #0]
 8015322:	b103      	cbz	r3, 8015326 <_isatty_r+0x1a>
 8015324:	602b      	str	r3, [r5, #0]
 8015326:	bd38      	pop	{r3, r4, r5, pc}
 8015328:	20006808 	.word	0x20006808

0801532c <__ascii_mbtowc>:
 801532c:	b082      	sub	sp, #8
 801532e:	b901      	cbnz	r1, 8015332 <__ascii_mbtowc+0x6>
 8015330:	a901      	add	r1, sp, #4
 8015332:	b142      	cbz	r2, 8015346 <__ascii_mbtowc+0x1a>
 8015334:	b14b      	cbz	r3, 801534a <__ascii_mbtowc+0x1e>
 8015336:	7813      	ldrb	r3, [r2, #0]
 8015338:	600b      	str	r3, [r1, #0]
 801533a:	7812      	ldrb	r2, [r2, #0]
 801533c:	1c10      	adds	r0, r2, #0
 801533e:	bf18      	it	ne
 8015340:	2001      	movne	r0, #1
 8015342:	b002      	add	sp, #8
 8015344:	4770      	bx	lr
 8015346:	4610      	mov	r0, r2
 8015348:	e7fb      	b.n	8015342 <__ascii_mbtowc+0x16>
 801534a:	f06f 0001 	mvn.w	r0, #1
 801534e:	e7f8      	b.n	8015342 <__ascii_mbtowc+0x16>

08015350 <_malloc_usable_size_r>:
 8015350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015354:	1f18      	subs	r0, r3, #4
 8015356:	2b00      	cmp	r3, #0
 8015358:	bfbc      	itt	lt
 801535a:	580b      	ldrlt	r3, [r1, r0]
 801535c:	18c0      	addlt	r0, r0, r3
 801535e:	4770      	bx	lr

08015360 <__ascii_wctomb>:
 8015360:	b149      	cbz	r1, 8015376 <__ascii_wctomb+0x16>
 8015362:	2aff      	cmp	r2, #255	; 0xff
 8015364:	bf85      	ittet	hi
 8015366:	238a      	movhi	r3, #138	; 0x8a
 8015368:	6003      	strhi	r3, [r0, #0]
 801536a:	700a      	strbls	r2, [r1, #0]
 801536c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015370:	bf98      	it	ls
 8015372:	2001      	movls	r0, #1
 8015374:	4770      	bx	lr
 8015376:	4608      	mov	r0, r1
 8015378:	4770      	bx	lr
 801537a:	0000      	movs	r0, r0
 801537c:	0000      	movs	r0, r0
	...

08015380 <cos>:
 8015380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015382:	ec51 0b10 	vmov	r0, r1, d0
 8015386:	4a1e      	ldr	r2, [pc, #120]	; (8015400 <cos+0x80>)
 8015388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801538c:	4293      	cmp	r3, r2
 801538e:	dc06      	bgt.n	801539e <cos+0x1e>
 8015390:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80153f8 <cos+0x78>
 8015394:	f001 fb3c 	bl	8016a10 <__kernel_cos>
 8015398:	ec51 0b10 	vmov	r0, r1, d0
 801539c:	e007      	b.n	80153ae <cos+0x2e>
 801539e:	4a19      	ldr	r2, [pc, #100]	; (8015404 <cos+0x84>)
 80153a0:	4293      	cmp	r3, r2
 80153a2:	dd09      	ble.n	80153b8 <cos+0x38>
 80153a4:	ee10 2a10 	vmov	r2, s0
 80153a8:	460b      	mov	r3, r1
 80153aa:	f7ea ff8d 	bl	80002c8 <__aeabi_dsub>
 80153ae:	ec41 0b10 	vmov	d0, r0, r1
 80153b2:	b005      	add	sp, #20
 80153b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80153b8:	4668      	mov	r0, sp
 80153ba:	f000 fdc1 	bl	8015f40 <__ieee754_rem_pio2>
 80153be:	f000 0003 	and.w	r0, r0, #3
 80153c2:	2801      	cmp	r0, #1
 80153c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80153c8:	ed9d 0b00 	vldr	d0, [sp]
 80153cc:	d007      	beq.n	80153de <cos+0x5e>
 80153ce:	2802      	cmp	r0, #2
 80153d0:	d00e      	beq.n	80153f0 <cos+0x70>
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d0de      	beq.n	8015394 <cos+0x14>
 80153d6:	2001      	movs	r0, #1
 80153d8:	f001 ff22 	bl	8017220 <__kernel_sin>
 80153dc:	e7dc      	b.n	8015398 <cos+0x18>
 80153de:	f001 ff1f 	bl	8017220 <__kernel_sin>
 80153e2:	ec53 2b10 	vmov	r2, r3, d0
 80153e6:	ee10 0a10 	vmov	r0, s0
 80153ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80153ee:	e7de      	b.n	80153ae <cos+0x2e>
 80153f0:	f001 fb0e 	bl	8016a10 <__kernel_cos>
 80153f4:	e7f5      	b.n	80153e2 <cos+0x62>
 80153f6:	bf00      	nop
	...
 8015400:	3fe921fb 	.word	0x3fe921fb
 8015404:	7fefffff 	.word	0x7fefffff

08015408 <round>:
 8015408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540a:	ec57 6b10 	vmov	r6, r7, d0
 801540e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015412:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015416:	2c13      	cmp	r4, #19
 8015418:	463b      	mov	r3, r7
 801541a:	463d      	mov	r5, r7
 801541c:	dc17      	bgt.n	801544e <round+0x46>
 801541e:	2c00      	cmp	r4, #0
 8015420:	da09      	bge.n	8015436 <round+0x2e>
 8015422:	3401      	adds	r4, #1
 8015424:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015428:	d103      	bne.n	8015432 <round+0x2a>
 801542a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801542e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015432:	2100      	movs	r1, #0
 8015434:	e02c      	b.n	8015490 <round+0x88>
 8015436:	4a18      	ldr	r2, [pc, #96]	; (8015498 <round+0x90>)
 8015438:	4122      	asrs	r2, r4
 801543a:	4217      	tst	r7, r2
 801543c:	d100      	bne.n	8015440 <round+0x38>
 801543e:	b19e      	cbz	r6, 8015468 <round+0x60>
 8015440:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015444:	4123      	asrs	r3, r4
 8015446:	442b      	add	r3, r5
 8015448:	ea23 0302 	bic.w	r3, r3, r2
 801544c:	e7f1      	b.n	8015432 <round+0x2a>
 801544e:	2c33      	cmp	r4, #51	; 0x33
 8015450:	dd0d      	ble.n	801546e <round+0x66>
 8015452:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015456:	d107      	bne.n	8015468 <round+0x60>
 8015458:	4630      	mov	r0, r6
 801545a:	4639      	mov	r1, r7
 801545c:	ee10 2a10 	vmov	r2, s0
 8015460:	f7ea ff34 	bl	80002cc <__adddf3>
 8015464:	4606      	mov	r6, r0
 8015466:	460f      	mov	r7, r1
 8015468:	ec47 6b10 	vmov	d0, r6, r7
 801546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801546e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015472:	f04f 30ff 	mov.w	r0, #4294967295
 8015476:	40d0      	lsrs	r0, r2
 8015478:	4206      	tst	r6, r0
 801547a:	d0f5      	beq.n	8015468 <round+0x60>
 801547c:	2201      	movs	r2, #1
 801547e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015482:	fa02 f404 	lsl.w	r4, r2, r4
 8015486:	1931      	adds	r1, r6, r4
 8015488:	bf28      	it	cs
 801548a:	189b      	addcs	r3, r3, r2
 801548c:	ea21 0100 	bic.w	r1, r1, r0
 8015490:	461f      	mov	r7, r3
 8015492:	460e      	mov	r6, r1
 8015494:	e7e8      	b.n	8015468 <round+0x60>
 8015496:	bf00      	nop
 8015498:	000fffff 	.word	0x000fffff
 801549c:	00000000 	.word	0x00000000

080154a0 <sin>:
 80154a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80154a2:	ec51 0b10 	vmov	r0, r1, d0
 80154a6:	4a20      	ldr	r2, [pc, #128]	; (8015528 <sin+0x88>)
 80154a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80154ac:	4293      	cmp	r3, r2
 80154ae:	dc07      	bgt.n	80154c0 <sin+0x20>
 80154b0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8015520 <sin+0x80>
 80154b4:	2000      	movs	r0, #0
 80154b6:	f001 feb3 	bl	8017220 <__kernel_sin>
 80154ba:	ec51 0b10 	vmov	r0, r1, d0
 80154be:	e007      	b.n	80154d0 <sin+0x30>
 80154c0:	4a1a      	ldr	r2, [pc, #104]	; (801552c <sin+0x8c>)
 80154c2:	4293      	cmp	r3, r2
 80154c4:	dd09      	ble.n	80154da <sin+0x3a>
 80154c6:	ee10 2a10 	vmov	r2, s0
 80154ca:	460b      	mov	r3, r1
 80154cc:	f7ea fefc 	bl	80002c8 <__aeabi_dsub>
 80154d0:	ec41 0b10 	vmov	d0, r0, r1
 80154d4:	b005      	add	sp, #20
 80154d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80154da:	4668      	mov	r0, sp
 80154dc:	f000 fd30 	bl	8015f40 <__ieee754_rem_pio2>
 80154e0:	f000 0003 	and.w	r0, r0, #3
 80154e4:	2801      	cmp	r0, #1
 80154e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80154ea:	ed9d 0b00 	vldr	d0, [sp]
 80154ee:	d004      	beq.n	80154fa <sin+0x5a>
 80154f0:	2802      	cmp	r0, #2
 80154f2:	d005      	beq.n	8015500 <sin+0x60>
 80154f4:	b970      	cbnz	r0, 8015514 <sin+0x74>
 80154f6:	2001      	movs	r0, #1
 80154f8:	e7dd      	b.n	80154b6 <sin+0x16>
 80154fa:	f001 fa89 	bl	8016a10 <__kernel_cos>
 80154fe:	e7dc      	b.n	80154ba <sin+0x1a>
 8015500:	2001      	movs	r0, #1
 8015502:	f001 fe8d 	bl	8017220 <__kernel_sin>
 8015506:	ec53 2b10 	vmov	r2, r3, d0
 801550a:	ee10 0a10 	vmov	r0, s0
 801550e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015512:	e7dd      	b.n	80154d0 <sin+0x30>
 8015514:	f001 fa7c 	bl	8016a10 <__kernel_cos>
 8015518:	e7f5      	b.n	8015506 <sin+0x66>
 801551a:	bf00      	nop
 801551c:	f3af 8000 	nop.w
	...
 8015528:	3fe921fb 	.word	0x3fe921fb
 801552c:	7fefffff 	.word	0x7fefffff

08015530 <asin>:
 8015530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015532:	ed2d 8b02 	vpush	{d8}
 8015536:	4e26      	ldr	r6, [pc, #152]	; (80155d0 <asin+0xa0>)
 8015538:	b08b      	sub	sp, #44	; 0x2c
 801553a:	ec55 4b10 	vmov	r4, r5, d0
 801553e:	f000 fa0f 	bl	8015960 <__ieee754_asin>
 8015542:	f996 3000 	ldrsb.w	r3, [r6]
 8015546:	eeb0 8a40 	vmov.f32	s16, s0
 801554a:	eef0 8a60 	vmov.f32	s17, s1
 801554e:	3301      	adds	r3, #1
 8015550:	d036      	beq.n	80155c0 <asin+0x90>
 8015552:	4622      	mov	r2, r4
 8015554:	462b      	mov	r3, r5
 8015556:	4620      	mov	r0, r4
 8015558:	4629      	mov	r1, r5
 801555a:	f7eb fb07 	bl	8000b6c <__aeabi_dcmpun>
 801555e:	4607      	mov	r7, r0
 8015560:	bb70      	cbnz	r0, 80155c0 <asin+0x90>
 8015562:	ec45 4b10 	vmov	d0, r4, r5
 8015566:	f002 f8b7 	bl	80176d8 <fabs>
 801556a:	2200      	movs	r2, #0
 801556c:	4b19      	ldr	r3, [pc, #100]	; (80155d4 <asin+0xa4>)
 801556e:	ec51 0b10 	vmov	r0, r1, d0
 8015572:	f7eb faf1 	bl	8000b58 <__aeabi_dcmpgt>
 8015576:	b318      	cbz	r0, 80155c0 <asin+0x90>
 8015578:	2301      	movs	r3, #1
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	4816      	ldr	r0, [pc, #88]	; (80155d8 <asin+0xa8>)
 801557e:	4b17      	ldr	r3, [pc, #92]	; (80155dc <asin+0xac>)
 8015580:	9301      	str	r3, [sp, #4]
 8015582:	9708      	str	r7, [sp, #32]
 8015584:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015588:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801558c:	f002 f938 	bl	8017800 <nan>
 8015590:	f996 3000 	ldrsb.w	r3, [r6]
 8015594:	2b02      	cmp	r3, #2
 8015596:	ed8d 0b06 	vstr	d0, [sp, #24]
 801559a:	d104      	bne.n	80155a6 <asin+0x76>
 801559c:	f7fd f948 	bl	8012830 <__errno>
 80155a0:	2321      	movs	r3, #33	; 0x21
 80155a2:	6003      	str	r3, [r0, #0]
 80155a4:	e004      	b.n	80155b0 <asin+0x80>
 80155a6:	4668      	mov	r0, sp
 80155a8:	f002 f926 	bl	80177f8 <matherr>
 80155ac:	2800      	cmp	r0, #0
 80155ae:	d0f5      	beq.n	801559c <asin+0x6c>
 80155b0:	9b08      	ldr	r3, [sp, #32]
 80155b2:	b11b      	cbz	r3, 80155bc <asin+0x8c>
 80155b4:	f7fd f93c 	bl	8012830 <__errno>
 80155b8:	9b08      	ldr	r3, [sp, #32]
 80155ba:	6003      	str	r3, [r0, #0]
 80155bc:	ed9d 8b06 	vldr	d8, [sp, #24]
 80155c0:	eeb0 0a48 	vmov.f32	s0, s16
 80155c4:	eef0 0a68 	vmov.f32	s1, s17
 80155c8:	b00b      	add	sp, #44	; 0x2c
 80155ca:	ecbd 8b02 	vpop	{d8}
 80155ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155d0:	20000604 	.word	0x20000604
 80155d4:	3ff00000 	.word	0x3ff00000
 80155d8:	080181fb 	.word	0x080181fb
 80155dc:	080184bf 	.word	0x080184bf

080155e0 <atan2>:
 80155e0:	f000 bbce 	b.w	8015d80 <__ieee754_atan2>

080155e4 <sqrt>:
 80155e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155e8:	ed2d 8b02 	vpush	{d8}
 80155ec:	b08b      	sub	sp, #44	; 0x2c
 80155ee:	ec55 4b10 	vmov	r4, r5, d0
 80155f2:	f000 fe97 	bl	8016324 <__ieee754_sqrt>
 80155f6:	4b26      	ldr	r3, [pc, #152]	; (8015690 <sqrt+0xac>)
 80155f8:	eeb0 8a40 	vmov.f32	s16, s0
 80155fc:	eef0 8a60 	vmov.f32	s17, s1
 8015600:	f993 6000 	ldrsb.w	r6, [r3]
 8015604:	1c73      	adds	r3, r6, #1
 8015606:	d02a      	beq.n	801565e <sqrt+0x7a>
 8015608:	4622      	mov	r2, r4
 801560a:	462b      	mov	r3, r5
 801560c:	4620      	mov	r0, r4
 801560e:	4629      	mov	r1, r5
 8015610:	f7eb faac 	bl	8000b6c <__aeabi_dcmpun>
 8015614:	4607      	mov	r7, r0
 8015616:	bb10      	cbnz	r0, 801565e <sqrt+0x7a>
 8015618:	f04f 0800 	mov.w	r8, #0
 801561c:	f04f 0900 	mov.w	r9, #0
 8015620:	4642      	mov	r2, r8
 8015622:	464b      	mov	r3, r9
 8015624:	4620      	mov	r0, r4
 8015626:	4629      	mov	r1, r5
 8015628:	f7eb fa78 	bl	8000b1c <__aeabi_dcmplt>
 801562c:	b1b8      	cbz	r0, 801565e <sqrt+0x7a>
 801562e:	2301      	movs	r3, #1
 8015630:	9300      	str	r3, [sp, #0]
 8015632:	4b18      	ldr	r3, [pc, #96]	; (8015694 <sqrt+0xb0>)
 8015634:	9301      	str	r3, [sp, #4]
 8015636:	9708      	str	r7, [sp, #32]
 8015638:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801563c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015640:	b9b6      	cbnz	r6, 8015670 <sqrt+0x8c>
 8015642:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015646:	4668      	mov	r0, sp
 8015648:	f002 f8d6 	bl	80177f8 <matherr>
 801564c:	b1d0      	cbz	r0, 8015684 <sqrt+0xa0>
 801564e:	9b08      	ldr	r3, [sp, #32]
 8015650:	b11b      	cbz	r3, 801565a <sqrt+0x76>
 8015652:	f7fd f8ed 	bl	8012830 <__errno>
 8015656:	9b08      	ldr	r3, [sp, #32]
 8015658:	6003      	str	r3, [r0, #0]
 801565a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801565e:	eeb0 0a48 	vmov.f32	s0, s16
 8015662:	eef0 0a68 	vmov.f32	s1, s17
 8015666:	b00b      	add	sp, #44	; 0x2c
 8015668:	ecbd 8b02 	vpop	{d8}
 801566c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015670:	4642      	mov	r2, r8
 8015672:	464b      	mov	r3, r9
 8015674:	4640      	mov	r0, r8
 8015676:	4649      	mov	r1, r9
 8015678:	f7eb f908 	bl	800088c <__aeabi_ddiv>
 801567c:	2e02      	cmp	r6, #2
 801567e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015682:	d1e0      	bne.n	8015646 <sqrt+0x62>
 8015684:	f7fd f8d4 	bl	8012830 <__errno>
 8015688:	2321      	movs	r3, #33	; 0x21
 801568a:	6003      	str	r3, [r0, #0]
 801568c:	e7df      	b.n	801564e <sqrt+0x6a>
 801568e:	bf00      	nop
 8015690:	20000604 	.word	0x20000604
 8015694:	080184c4 	.word	0x080184c4

08015698 <powf>:
 8015698:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801569c:	ed2d 8b04 	vpush	{d8-d9}
 80156a0:	4ca7      	ldr	r4, [pc, #668]	; (8015940 <powf+0x2a8>)
 80156a2:	b08a      	sub	sp, #40	; 0x28
 80156a4:	eef0 8a40 	vmov.f32	s17, s0
 80156a8:	eeb0 8a60 	vmov.f32	s16, s1
 80156ac:	f000 feea 	bl	8016484 <__ieee754_powf>
 80156b0:	f994 5000 	ldrsb.w	r5, [r4]
 80156b4:	1c6b      	adds	r3, r5, #1
 80156b6:	eeb0 9a40 	vmov.f32	s18, s0
 80156ba:	4626      	mov	r6, r4
 80156bc:	d05f      	beq.n	801577e <powf+0xe6>
 80156be:	eeb4 8a48 	vcmp.f32	s16, s16
 80156c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c6:	d65a      	bvs.n	801577e <powf+0xe6>
 80156c8:	eef4 8a68 	vcmp.f32	s17, s17
 80156cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d0:	d721      	bvc.n	8015716 <powf+0x7e>
 80156d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80156d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156da:	d150      	bne.n	801577e <powf+0xe6>
 80156dc:	2301      	movs	r3, #1
 80156de:	9300      	str	r3, [sp, #0]
 80156e0:	4b98      	ldr	r3, [pc, #608]	; (8015944 <powf+0x2ac>)
 80156e2:	9301      	str	r3, [sp, #4]
 80156e4:	ee18 0a90 	vmov	r0, s17
 80156e8:	2300      	movs	r3, #0
 80156ea:	9308      	str	r3, [sp, #32]
 80156ec:	f7ea ff4c 	bl	8000588 <__aeabi_f2d>
 80156f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156f4:	ee18 0a10 	vmov	r0, s16
 80156f8:	f7ea ff46 	bl	8000588 <__aeabi_f2d>
 80156fc:	4b92      	ldr	r3, [pc, #584]	; (8015948 <powf+0x2b0>)
 80156fe:	2200      	movs	r2, #0
 8015700:	2d02      	cmp	r5, #2
 8015702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015706:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801570a:	d032      	beq.n	8015772 <powf+0xda>
 801570c:	4668      	mov	r0, sp
 801570e:	f002 f873 	bl	80177f8 <matherr>
 8015712:	bb40      	cbnz	r0, 8015766 <powf+0xce>
 8015714:	e065      	b.n	80157e2 <powf+0x14a>
 8015716:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801594c <powf+0x2b4>
 801571a:	eef4 8a69 	vcmp.f32	s17, s19
 801571e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015722:	d163      	bne.n	80157ec <powf+0x154>
 8015724:	eeb4 8a69 	vcmp.f32	s16, s19
 8015728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572c:	d12e      	bne.n	801578c <powf+0xf4>
 801572e:	2301      	movs	r3, #1
 8015730:	9300      	str	r3, [sp, #0]
 8015732:	4b84      	ldr	r3, [pc, #528]	; (8015944 <powf+0x2ac>)
 8015734:	9301      	str	r3, [sp, #4]
 8015736:	ee18 0a90 	vmov	r0, s17
 801573a:	2300      	movs	r3, #0
 801573c:	9308      	str	r3, [sp, #32]
 801573e:	f7ea ff23 	bl	8000588 <__aeabi_f2d>
 8015742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015746:	ee18 0a10 	vmov	r0, s16
 801574a:	f7ea ff1d 	bl	8000588 <__aeabi_f2d>
 801574e:	2200      	movs	r2, #0
 8015750:	2300      	movs	r3, #0
 8015752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015756:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801575a:	2d00      	cmp	r5, #0
 801575c:	d0d6      	beq.n	801570c <powf+0x74>
 801575e:	4b7a      	ldr	r3, [pc, #488]	; (8015948 <powf+0x2b0>)
 8015760:	2200      	movs	r2, #0
 8015762:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015766:	9b08      	ldr	r3, [sp, #32]
 8015768:	b11b      	cbz	r3, 8015772 <powf+0xda>
 801576a:	f7fd f861 	bl	8012830 <__errno>
 801576e:	9b08      	ldr	r3, [sp, #32]
 8015770:	6003      	str	r3, [r0, #0]
 8015772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015776:	f7eb fa57 	bl	8000c28 <__aeabi_d2f>
 801577a:	ee09 0a10 	vmov	s18, r0
 801577e:	eeb0 0a49 	vmov.f32	s0, s18
 8015782:	b00a      	add	sp, #40	; 0x28
 8015784:	ecbd 8b04 	vpop	{d8-d9}
 8015788:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801578c:	eeb0 0a48 	vmov.f32	s0, s16
 8015790:	f002 f8bb 	bl	801790a <finitef>
 8015794:	2800      	cmp	r0, #0
 8015796:	d0f2      	beq.n	801577e <powf+0xe6>
 8015798:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801579c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157a0:	d5ed      	bpl.n	801577e <powf+0xe6>
 80157a2:	2301      	movs	r3, #1
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	4b67      	ldr	r3, [pc, #412]	; (8015944 <powf+0x2ac>)
 80157a8:	9301      	str	r3, [sp, #4]
 80157aa:	ee18 0a90 	vmov	r0, s17
 80157ae:	2300      	movs	r3, #0
 80157b0:	9308      	str	r3, [sp, #32]
 80157b2:	f7ea fee9 	bl	8000588 <__aeabi_f2d>
 80157b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157ba:	ee18 0a10 	vmov	r0, s16
 80157be:	f7ea fee3 	bl	8000588 <__aeabi_f2d>
 80157c2:	f994 3000 	ldrsb.w	r3, [r4]
 80157c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157ca:	b923      	cbnz	r3, 80157d6 <powf+0x13e>
 80157cc:	2200      	movs	r2, #0
 80157ce:	2300      	movs	r3, #0
 80157d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80157d4:	e79a      	b.n	801570c <powf+0x74>
 80157d6:	495e      	ldr	r1, [pc, #376]	; (8015950 <powf+0x2b8>)
 80157d8:	2000      	movs	r0, #0
 80157da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80157de:	2b02      	cmp	r3, #2
 80157e0:	d194      	bne.n	801570c <powf+0x74>
 80157e2:	f7fd f825 	bl	8012830 <__errno>
 80157e6:	2321      	movs	r3, #33	; 0x21
 80157e8:	6003      	str	r3, [r0, #0]
 80157ea:	e7bc      	b.n	8015766 <powf+0xce>
 80157ec:	f002 f88d 	bl	801790a <finitef>
 80157f0:	4605      	mov	r5, r0
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d173      	bne.n	80158de <powf+0x246>
 80157f6:	eeb0 0a68 	vmov.f32	s0, s17
 80157fa:	f002 f886 	bl	801790a <finitef>
 80157fe:	2800      	cmp	r0, #0
 8015800:	d06d      	beq.n	80158de <powf+0x246>
 8015802:	eeb0 0a48 	vmov.f32	s0, s16
 8015806:	f002 f880 	bl	801790a <finitef>
 801580a:	2800      	cmp	r0, #0
 801580c:	d067      	beq.n	80158de <powf+0x246>
 801580e:	ee18 0a90 	vmov	r0, s17
 8015812:	f7ea feb9 	bl	8000588 <__aeabi_f2d>
 8015816:	4680      	mov	r8, r0
 8015818:	ee18 0a10 	vmov	r0, s16
 801581c:	4689      	mov	r9, r1
 801581e:	f7ea feb3 	bl	8000588 <__aeabi_f2d>
 8015822:	eeb4 9a49 	vcmp.f32	s18, s18
 8015826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801582a:	f994 4000 	ldrsb.w	r4, [r4]
 801582e:	4b45      	ldr	r3, [pc, #276]	; (8015944 <powf+0x2ac>)
 8015830:	d713      	bvc.n	801585a <powf+0x1c2>
 8015832:	2201      	movs	r2, #1
 8015834:	e9cd 2300 	strd	r2, r3, [sp]
 8015838:	9508      	str	r5, [sp, #32]
 801583a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801583e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015842:	2c00      	cmp	r4, #0
 8015844:	d0c2      	beq.n	80157cc <powf+0x134>
 8015846:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801584a:	ee17 0a90 	vmov	r0, s15
 801584e:	f7ea fe9b 	bl	8000588 <__aeabi_f2d>
 8015852:	2c02      	cmp	r4, #2
 8015854:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015858:	e7c2      	b.n	80157e0 <powf+0x148>
 801585a:	2203      	movs	r2, #3
 801585c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015860:	e9cd 2300 	strd	r2, r3, [sp]
 8015864:	9508      	str	r5, [sp, #32]
 8015866:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801586a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801586e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015872:	b9fc      	cbnz	r4, 80158b4 <powf+0x21c>
 8015874:	4b37      	ldr	r3, [pc, #220]	; (8015954 <powf+0x2bc>)
 8015876:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801587a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801587e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015882:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015886:	d553      	bpl.n	8015930 <powf+0x298>
 8015888:	eeb0 0a48 	vmov.f32	s0, s16
 801588c:	f002 f84e 	bl	801792c <rintf>
 8015890:	eeb4 0a48 	vcmp.f32	s0, s16
 8015894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015898:	d004      	beq.n	80158a4 <powf+0x20c>
 801589a:	4b2f      	ldr	r3, [pc, #188]	; (8015958 <powf+0x2c0>)
 801589c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80158a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80158a4:	f996 3000 	ldrsb.w	r3, [r6]
 80158a8:	2b02      	cmp	r3, #2
 80158aa:	d141      	bne.n	8015930 <powf+0x298>
 80158ac:	f7fc ffc0 	bl	8012830 <__errno>
 80158b0:	2322      	movs	r3, #34	; 0x22
 80158b2:	e799      	b.n	80157e8 <powf+0x150>
 80158b4:	4b29      	ldr	r3, [pc, #164]	; (801595c <powf+0x2c4>)
 80158b6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80158ba:	2200      	movs	r2, #0
 80158bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80158c4:	d5ee      	bpl.n	80158a4 <powf+0x20c>
 80158c6:	eeb0 0a48 	vmov.f32	s0, s16
 80158ca:	f002 f82f 	bl	801792c <rintf>
 80158ce:	eeb4 0a48 	vcmp.f32	s0, s16
 80158d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d6:	d0e5      	beq.n	80158a4 <powf+0x20c>
 80158d8:	2200      	movs	r2, #0
 80158da:	4b1d      	ldr	r3, [pc, #116]	; (8015950 <powf+0x2b8>)
 80158dc:	e7e0      	b.n	80158a0 <powf+0x208>
 80158de:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80158e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158e6:	f47f af4a 	bne.w	801577e <powf+0xe6>
 80158ea:	eeb0 0a68 	vmov.f32	s0, s17
 80158ee:	f002 f80c 	bl	801790a <finitef>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	f43f af43 	beq.w	801577e <powf+0xe6>
 80158f8:	eeb0 0a48 	vmov.f32	s0, s16
 80158fc:	f002 f805 	bl	801790a <finitef>
 8015900:	2800      	cmp	r0, #0
 8015902:	f43f af3c 	beq.w	801577e <powf+0xe6>
 8015906:	2304      	movs	r3, #4
 8015908:	9300      	str	r3, [sp, #0]
 801590a:	4b0e      	ldr	r3, [pc, #56]	; (8015944 <powf+0x2ac>)
 801590c:	9301      	str	r3, [sp, #4]
 801590e:	ee18 0a90 	vmov	r0, s17
 8015912:	2300      	movs	r3, #0
 8015914:	9308      	str	r3, [sp, #32]
 8015916:	f7ea fe37 	bl	8000588 <__aeabi_f2d>
 801591a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801591e:	ee18 0a10 	vmov	r0, s16
 8015922:	f7ea fe31 	bl	8000588 <__aeabi_f2d>
 8015926:	2200      	movs	r2, #0
 8015928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801592c:	2300      	movs	r3, #0
 801592e:	e7b7      	b.n	80158a0 <powf+0x208>
 8015930:	4668      	mov	r0, sp
 8015932:	f001 ff61 	bl	80177f8 <matherr>
 8015936:	2800      	cmp	r0, #0
 8015938:	f47f af15 	bne.w	8015766 <powf+0xce>
 801593c:	e7b6      	b.n	80158ac <powf+0x214>
 801593e:	bf00      	nop
 8015940:	20000604 	.word	0x20000604
 8015944:	080184c9 	.word	0x080184c9
 8015948:	3ff00000 	.word	0x3ff00000
 801594c:	00000000 	.word	0x00000000
 8015950:	fff00000 	.word	0xfff00000
 8015954:	47efffff 	.word	0x47efffff
 8015958:	c7efffff 	.word	0xc7efffff
 801595c:	7ff00000 	.word	0x7ff00000

08015960 <__ieee754_asin>:
 8015960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015964:	ec55 4b10 	vmov	r4, r5, d0
 8015968:	4bcb      	ldr	r3, [pc, #812]	; (8015c98 <__ieee754_asin+0x338>)
 801596a:	b087      	sub	sp, #28
 801596c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8015970:	429f      	cmp	r7, r3
 8015972:	9501      	str	r5, [sp, #4]
 8015974:	dd31      	ble.n	80159da <__ieee754_asin+0x7a>
 8015976:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801597a:	ee10 3a10 	vmov	r3, s0
 801597e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8015982:	433b      	orrs	r3, r7
 8015984:	d117      	bne.n	80159b6 <__ieee754_asin+0x56>
 8015986:	a3aa      	add	r3, pc, #680	; (adr r3, 8015c30 <__ieee754_asin+0x2d0>)
 8015988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598c:	ee10 0a10 	vmov	r0, s0
 8015990:	4629      	mov	r1, r5
 8015992:	f7ea fe51 	bl	8000638 <__aeabi_dmul>
 8015996:	a3a8      	add	r3, pc, #672	; (adr r3, 8015c38 <__ieee754_asin+0x2d8>)
 8015998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801599c:	4606      	mov	r6, r0
 801599e:	460f      	mov	r7, r1
 80159a0:	4620      	mov	r0, r4
 80159a2:	4629      	mov	r1, r5
 80159a4:	f7ea fe48 	bl	8000638 <__aeabi_dmul>
 80159a8:	4602      	mov	r2, r0
 80159aa:	460b      	mov	r3, r1
 80159ac:	4630      	mov	r0, r6
 80159ae:	4639      	mov	r1, r7
 80159b0:	f7ea fc8c 	bl	80002cc <__adddf3>
 80159b4:	e00a      	b.n	80159cc <__ieee754_asin+0x6c>
 80159b6:	ee10 2a10 	vmov	r2, s0
 80159ba:	462b      	mov	r3, r5
 80159bc:	4620      	mov	r0, r4
 80159be:	4629      	mov	r1, r5
 80159c0:	f7ea fc82 	bl	80002c8 <__aeabi_dsub>
 80159c4:	4602      	mov	r2, r0
 80159c6:	460b      	mov	r3, r1
 80159c8:	f7ea ff60 	bl	800088c <__aeabi_ddiv>
 80159cc:	4604      	mov	r4, r0
 80159ce:	460d      	mov	r5, r1
 80159d0:	ec45 4b10 	vmov	d0, r4, r5
 80159d4:	b007      	add	sp, #28
 80159d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159da:	4bb0      	ldr	r3, [pc, #704]	; (8015c9c <__ieee754_asin+0x33c>)
 80159dc:	429f      	cmp	r7, r3
 80159de:	dc11      	bgt.n	8015a04 <__ieee754_asin+0xa4>
 80159e0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80159e4:	f280 80ae 	bge.w	8015b44 <__ieee754_asin+0x1e4>
 80159e8:	a395      	add	r3, pc, #596	; (adr r3, 8015c40 <__ieee754_asin+0x2e0>)
 80159ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ee:	ee10 0a10 	vmov	r0, s0
 80159f2:	4629      	mov	r1, r5
 80159f4:	f7ea fc6a 	bl	80002cc <__adddf3>
 80159f8:	2200      	movs	r2, #0
 80159fa:	4ba9      	ldr	r3, [pc, #676]	; (8015ca0 <__ieee754_asin+0x340>)
 80159fc:	f7eb f8ac 	bl	8000b58 <__aeabi_dcmpgt>
 8015a00:	2800      	cmp	r0, #0
 8015a02:	d1e5      	bne.n	80159d0 <__ieee754_asin+0x70>
 8015a04:	ec45 4b10 	vmov	d0, r4, r5
 8015a08:	f001 fe66 	bl	80176d8 <fabs>
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	ec53 2b10 	vmov	r2, r3, d0
 8015a12:	49a3      	ldr	r1, [pc, #652]	; (8015ca0 <__ieee754_asin+0x340>)
 8015a14:	f7ea fc58 	bl	80002c8 <__aeabi_dsub>
 8015a18:	2200      	movs	r2, #0
 8015a1a:	4ba2      	ldr	r3, [pc, #648]	; (8015ca4 <__ieee754_asin+0x344>)
 8015a1c:	f7ea fe0c 	bl	8000638 <__aeabi_dmul>
 8015a20:	a389      	add	r3, pc, #548	; (adr r3, 8015c48 <__ieee754_asin+0x2e8>)
 8015a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a26:	4604      	mov	r4, r0
 8015a28:	460d      	mov	r5, r1
 8015a2a:	f7ea fe05 	bl	8000638 <__aeabi_dmul>
 8015a2e:	a388      	add	r3, pc, #544	; (adr r3, 8015c50 <__ieee754_asin+0x2f0>)
 8015a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a34:	f7ea fc4a 	bl	80002cc <__adddf3>
 8015a38:	4622      	mov	r2, r4
 8015a3a:	462b      	mov	r3, r5
 8015a3c:	f7ea fdfc 	bl	8000638 <__aeabi_dmul>
 8015a40:	a385      	add	r3, pc, #532	; (adr r3, 8015c58 <__ieee754_asin+0x2f8>)
 8015a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a46:	f7ea fc3f 	bl	80002c8 <__aeabi_dsub>
 8015a4a:	4622      	mov	r2, r4
 8015a4c:	462b      	mov	r3, r5
 8015a4e:	f7ea fdf3 	bl	8000638 <__aeabi_dmul>
 8015a52:	a383      	add	r3, pc, #524	; (adr r3, 8015c60 <__ieee754_asin+0x300>)
 8015a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a58:	f7ea fc38 	bl	80002cc <__adddf3>
 8015a5c:	4622      	mov	r2, r4
 8015a5e:	462b      	mov	r3, r5
 8015a60:	f7ea fdea 	bl	8000638 <__aeabi_dmul>
 8015a64:	a380      	add	r3, pc, #512	; (adr r3, 8015c68 <__ieee754_asin+0x308>)
 8015a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a6a:	f7ea fc2d 	bl	80002c8 <__aeabi_dsub>
 8015a6e:	4622      	mov	r2, r4
 8015a70:	462b      	mov	r3, r5
 8015a72:	f7ea fde1 	bl	8000638 <__aeabi_dmul>
 8015a76:	a37e      	add	r3, pc, #504	; (adr r3, 8015c70 <__ieee754_asin+0x310>)
 8015a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7c:	f7ea fc26 	bl	80002cc <__adddf3>
 8015a80:	4622      	mov	r2, r4
 8015a82:	462b      	mov	r3, r5
 8015a84:	f7ea fdd8 	bl	8000638 <__aeabi_dmul>
 8015a88:	a37b      	add	r3, pc, #492	; (adr r3, 8015c78 <__ieee754_asin+0x318>)
 8015a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a8e:	4680      	mov	r8, r0
 8015a90:	4689      	mov	r9, r1
 8015a92:	4620      	mov	r0, r4
 8015a94:	4629      	mov	r1, r5
 8015a96:	f7ea fdcf 	bl	8000638 <__aeabi_dmul>
 8015a9a:	a379      	add	r3, pc, #484	; (adr r3, 8015c80 <__ieee754_asin+0x320>)
 8015a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa0:	f7ea fc12 	bl	80002c8 <__aeabi_dsub>
 8015aa4:	4622      	mov	r2, r4
 8015aa6:	462b      	mov	r3, r5
 8015aa8:	f7ea fdc6 	bl	8000638 <__aeabi_dmul>
 8015aac:	a376      	add	r3, pc, #472	; (adr r3, 8015c88 <__ieee754_asin+0x328>)
 8015aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab2:	f7ea fc0b 	bl	80002cc <__adddf3>
 8015ab6:	4622      	mov	r2, r4
 8015ab8:	462b      	mov	r3, r5
 8015aba:	f7ea fdbd 	bl	8000638 <__aeabi_dmul>
 8015abe:	a374      	add	r3, pc, #464	; (adr r3, 8015c90 <__ieee754_asin+0x330>)
 8015ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac4:	f7ea fc00 	bl	80002c8 <__aeabi_dsub>
 8015ac8:	4622      	mov	r2, r4
 8015aca:	462b      	mov	r3, r5
 8015acc:	f7ea fdb4 	bl	8000638 <__aeabi_dmul>
 8015ad0:	4b73      	ldr	r3, [pc, #460]	; (8015ca0 <__ieee754_asin+0x340>)
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	f7ea fbfa 	bl	80002cc <__adddf3>
 8015ad8:	ec45 4b10 	vmov	d0, r4, r5
 8015adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ae0:	f000 fc20 	bl	8016324 <__ieee754_sqrt>
 8015ae4:	4b70      	ldr	r3, [pc, #448]	; (8015ca8 <__ieee754_asin+0x348>)
 8015ae6:	429f      	cmp	r7, r3
 8015ae8:	ec5b ab10 	vmov	sl, fp, d0
 8015aec:	f340 80de 	ble.w	8015cac <__ieee754_asin+0x34c>
 8015af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015af4:	4640      	mov	r0, r8
 8015af6:	4649      	mov	r1, r9
 8015af8:	f7ea fec8 	bl	800088c <__aeabi_ddiv>
 8015afc:	4652      	mov	r2, sl
 8015afe:	465b      	mov	r3, fp
 8015b00:	f7ea fd9a 	bl	8000638 <__aeabi_dmul>
 8015b04:	4652      	mov	r2, sl
 8015b06:	465b      	mov	r3, fp
 8015b08:	f7ea fbe0 	bl	80002cc <__adddf3>
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	460b      	mov	r3, r1
 8015b10:	f7ea fbdc 	bl	80002cc <__adddf3>
 8015b14:	a348      	add	r3, pc, #288	; (adr r3, 8015c38 <__ieee754_asin+0x2d8>)
 8015b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1a:	f7ea fbd5 	bl	80002c8 <__aeabi_dsub>
 8015b1e:	4602      	mov	r2, r0
 8015b20:	460b      	mov	r3, r1
 8015b22:	a143      	add	r1, pc, #268	; (adr r1, 8015c30 <__ieee754_asin+0x2d0>)
 8015b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b28:	f7ea fbce 	bl	80002c8 <__aeabi_dsub>
 8015b2c:	9b01      	ldr	r3, [sp, #4]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	bfdc      	itt	le
 8015b32:	4602      	movle	r2, r0
 8015b34:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8015b38:	4604      	mov	r4, r0
 8015b3a:	460d      	mov	r5, r1
 8015b3c:	bfdc      	itt	le
 8015b3e:	4614      	movle	r4, r2
 8015b40:	461d      	movle	r5, r3
 8015b42:	e745      	b.n	80159d0 <__ieee754_asin+0x70>
 8015b44:	ee10 2a10 	vmov	r2, s0
 8015b48:	ee10 0a10 	vmov	r0, s0
 8015b4c:	462b      	mov	r3, r5
 8015b4e:	4629      	mov	r1, r5
 8015b50:	f7ea fd72 	bl	8000638 <__aeabi_dmul>
 8015b54:	a33c      	add	r3, pc, #240	; (adr r3, 8015c48 <__ieee754_asin+0x2e8>)
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	4606      	mov	r6, r0
 8015b5c:	460f      	mov	r7, r1
 8015b5e:	f7ea fd6b 	bl	8000638 <__aeabi_dmul>
 8015b62:	a33b      	add	r3, pc, #236	; (adr r3, 8015c50 <__ieee754_asin+0x2f0>)
 8015b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b68:	f7ea fbb0 	bl	80002cc <__adddf3>
 8015b6c:	4632      	mov	r2, r6
 8015b6e:	463b      	mov	r3, r7
 8015b70:	f7ea fd62 	bl	8000638 <__aeabi_dmul>
 8015b74:	a338      	add	r3, pc, #224	; (adr r3, 8015c58 <__ieee754_asin+0x2f8>)
 8015b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7a:	f7ea fba5 	bl	80002c8 <__aeabi_dsub>
 8015b7e:	4632      	mov	r2, r6
 8015b80:	463b      	mov	r3, r7
 8015b82:	f7ea fd59 	bl	8000638 <__aeabi_dmul>
 8015b86:	a336      	add	r3, pc, #216	; (adr r3, 8015c60 <__ieee754_asin+0x300>)
 8015b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b8c:	f7ea fb9e 	bl	80002cc <__adddf3>
 8015b90:	4632      	mov	r2, r6
 8015b92:	463b      	mov	r3, r7
 8015b94:	f7ea fd50 	bl	8000638 <__aeabi_dmul>
 8015b98:	a333      	add	r3, pc, #204	; (adr r3, 8015c68 <__ieee754_asin+0x308>)
 8015b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9e:	f7ea fb93 	bl	80002c8 <__aeabi_dsub>
 8015ba2:	4632      	mov	r2, r6
 8015ba4:	463b      	mov	r3, r7
 8015ba6:	f7ea fd47 	bl	8000638 <__aeabi_dmul>
 8015baa:	a331      	add	r3, pc, #196	; (adr r3, 8015c70 <__ieee754_asin+0x310>)
 8015bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb0:	f7ea fb8c 	bl	80002cc <__adddf3>
 8015bb4:	4632      	mov	r2, r6
 8015bb6:	463b      	mov	r3, r7
 8015bb8:	f7ea fd3e 	bl	8000638 <__aeabi_dmul>
 8015bbc:	a32e      	add	r3, pc, #184	; (adr r3, 8015c78 <__ieee754_asin+0x318>)
 8015bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc2:	4680      	mov	r8, r0
 8015bc4:	4689      	mov	r9, r1
 8015bc6:	4630      	mov	r0, r6
 8015bc8:	4639      	mov	r1, r7
 8015bca:	f7ea fd35 	bl	8000638 <__aeabi_dmul>
 8015bce:	a32c      	add	r3, pc, #176	; (adr r3, 8015c80 <__ieee754_asin+0x320>)
 8015bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd4:	f7ea fb78 	bl	80002c8 <__aeabi_dsub>
 8015bd8:	4632      	mov	r2, r6
 8015bda:	463b      	mov	r3, r7
 8015bdc:	f7ea fd2c 	bl	8000638 <__aeabi_dmul>
 8015be0:	a329      	add	r3, pc, #164	; (adr r3, 8015c88 <__ieee754_asin+0x328>)
 8015be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be6:	f7ea fb71 	bl	80002cc <__adddf3>
 8015bea:	4632      	mov	r2, r6
 8015bec:	463b      	mov	r3, r7
 8015bee:	f7ea fd23 	bl	8000638 <__aeabi_dmul>
 8015bf2:	a327      	add	r3, pc, #156	; (adr r3, 8015c90 <__ieee754_asin+0x330>)
 8015bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf8:	f7ea fb66 	bl	80002c8 <__aeabi_dsub>
 8015bfc:	4632      	mov	r2, r6
 8015bfe:	463b      	mov	r3, r7
 8015c00:	f7ea fd1a 	bl	8000638 <__aeabi_dmul>
 8015c04:	2200      	movs	r2, #0
 8015c06:	4b26      	ldr	r3, [pc, #152]	; (8015ca0 <__ieee754_asin+0x340>)
 8015c08:	f7ea fb60 	bl	80002cc <__adddf3>
 8015c0c:	4602      	mov	r2, r0
 8015c0e:	460b      	mov	r3, r1
 8015c10:	4640      	mov	r0, r8
 8015c12:	4649      	mov	r1, r9
 8015c14:	f7ea fe3a 	bl	800088c <__aeabi_ddiv>
 8015c18:	4622      	mov	r2, r4
 8015c1a:	462b      	mov	r3, r5
 8015c1c:	f7ea fd0c 	bl	8000638 <__aeabi_dmul>
 8015c20:	4602      	mov	r2, r0
 8015c22:	460b      	mov	r3, r1
 8015c24:	4620      	mov	r0, r4
 8015c26:	4629      	mov	r1, r5
 8015c28:	e6c2      	b.n	80159b0 <__ieee754_asin+0x50>
 8015c2a:	bf00      	nop
 8015c2c:	f3af 8000 	nop.w
 8015c30:	54442d18 	.word	0x54442d18
 8015c34:	3ff921fb 	.word	0x3ff921fb
 8015c38:	33145c07 	.word	0x33145c07
 8015c3c:	3c91a626 	.word	0x3c91a626
 8015c40:	8800759c 	.word	0x8800759c
 8015c44:	7e37e43c 	.word	0x7e37e43c
 8015c48:	0dfdf709 	.word	0x0dfdf709
 8015c4c:	3f023de1 	.word	0x3f023de1
 8015c50:	7501b288 	.word	0x7501b288
 8015c54:	3f49efe0 	.word	0x3f49efe0
 8015c58:	b5688f3b 	.word	0xb5688f3b
 8015c5c:	3fa48228 	.word	0x3fa48228
 8015c60:	0e884455 	.word	0x0e884455
 8015c64:	3fc9c155 	.word	0x3fc9c155
 8015c68:	03eb6f7d 	.word	0x03eb6f7d
 8015c6c:	3fd4d612 	.word	0x3fd4d612
 8015c70:	55555555 	.word	0x55555555
 8015c74:	3fc55555 	.word	0x3fc55555
 8015c78:	b12e9282 	.word	0xb12e9282
 8015c7c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015c80:	1b8d0159 	.word	0x1b8d0159
 8015c84:	3fe6066c 	.word	0x3fe6066c
 8015c88:	9c598ac8 	.word	0x9c598ac8
 8015c8c:	40002ae5 	.word	0x40002ae5
 8015c90:	1c8a2d4b 	.word	0x1c8a2d4b
 8015c94:	40033a27 	.word	0x40033a27
 8015c98:	3fefffff 	.word	0x3fefffff
 8015c9c:	3fdfffff 	.word	0x3fdfffff
 8015ca0:	3ff00000 	.word	0x3ff00000
 8015ca4:	3fe00000 	.word	0x3fe00000
 8015ca8:	3fef3332 	.word	0x3fef3332
 8015cac:	ee10 2a10 	vmov	r2, s0
 8015cb0:	ee10 0a10 	vmov	r0, s0
 8015cb4:	465b      	mov	r3, fp
 8015cb6:	4659      	mov	r1, fp
 8015cb8:	f7ea fb08 	bl	80002cc <__adddf3>
 8015cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015cc4:	4640      	mov	r0, r8
 8015cc6:	4649      	mov	r1, r9
 8015cc8:	f7ea fde0 	bl	800088c <__aeabi_ddiv>
 8015ccc:	4602      	mov	r2, r0
 8015cce:	460b      	mov	r3, r1
 8015cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cd4:	f7ea fcb0 	bl	8000638 <__aeabi_dmul>
 8015cd8:	2600      	movs	r6, #0
 8015cda:	4680      	mov	r8, r0
 8015cdc:	4689      	mov	r9, r1
 8015cde:	4632      	mov	r2, r6
 8015ce0:	465b      	mov	r3, fp
 8015ce2:	4630      	mov	r0, r6
 8015ce4:	4659      	mov	r1, fp
 8015ce6:	f7ea fca7 	bl	8000638 <__aeabi_dmul>
 8015cea:	4602      	mov	r2, r0
 8015cec:	460b      	mov	r3, r1
 8015cee:	4620      	mov	r0, r4
 8015cf0:	4629      	mov	r1, r5
 8015cf2:	f7ea fae9 	bl	80002c8 <__aeabi_dsub>
 8015cf6:	4632      	mov	r2, r6
 8015cf8:	4604      	mov	r4, r0
 8015cfa:	460d      	mov	r5, r1
 8015cfc:	465b      	mov	r3, fp
 8015cfe:	4650      	mov	r0, sl
 8015d00:	4659      	mov	r1, fp
 8015d02:	f7ea fae3 	bl	80002cc <__adddf3>
 8015d06:	4602      	mov	r2, r0
 8015d08:	460b      	mov	r3, r1
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	4629      	mov	r1, r5
 8015d0e:	f7ea fdbd 	bl	800088c <__aeabi_ddiv>
 8015d12:	4602      	mov	r2, r0
 8015d14:	460b      	mov	r3, r1
 8015d16:	f7ea fad9 	bl	80002cc <__adddf3>
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	a114      	add	r1, pc, #80	; (adr r1, 8015d70 <__ieee754_asin+0x410>)
 8015d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d24:	f7ea fad0 	bl	80002c8 <__aeabi_dsub>
 8015d28:	4602      	mov	r2, r0
 8015d2a:	460b      	mov	r3, r1
 8015d2c:	4640      	mov	r0, r8
 8015d2e:	4649      	mov	r1, r9
 8015d30:	f7ea faca 	bl	80002c8 <__aeabi_dsub>
 8015d34:	465f      	mov	r7, fp
 8015d36:	4604      	mov	r4, r0
 8015d38:	460d      	mov	r5, r1
 8015d3a:	4632      	mov	r2, r6
 8015d3c:	465b      	mov	r3, fp
 8015d3e:	4630      	mov	r0, r6
 8015d40:	4639      	mov	r1, r7
 8015d42:	f7ea fac3 	bl	80002cc <__adddf3>
 8015d46:	4602      	mov	r2, r0
 8015d48:	460b      	mov	r3, r1
 8015d4a:	a10b      	add	r1, pc, #44	; (adr r1, 8015d78 <__ieee754_asin+0x418>)
 8015d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d50:	f7ea faba 	bl	80002c8 <__aeabi_dsub>
 8015d54:	4602      	mov	r2, r0
 8015d56:	460b      	mov	r3, r1
 8015d58:	4620      	mov	r0, r4
 8015d5a:	4629      	mov	r1, r5
 8015d5c:	f7ea fab4 	bl	80002c8 <__aeabi_dsub>
 8015d60:	4602      	mov	r2, r0
 8015d62:	460b      	mov	r3, r1
 8015d64:	a104      	add	r1, pc, #16	; (adr r1, 8015d78 <__ieee754_asin+0x418>)
 8015d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d6a:	e6dd      	b.n	8015b28 <__ieee754_asin+0x1c8>
 8015d6c:	f3af 8000 	nop.w
 8015d70:	33145c07 	.word	0x33145c07
 8015d74:	3c91a626 	.word	0x3c91a626
 8015d78:	54442d18 	.word	0x54442d18
 8015d7c:	3fe921fb 	.word	0x3fe921fb

08015d80 <__ieee754_atan2>:
 8015d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d84:	ec57 6b11 	vmov	r6, r7, d1
 8015d88:	4273      	negs	r3, r6
 8015d8a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015d8e:	4333      	orrs	r3, r6
 8015d90:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8015f38 <__ieee754_atan2+0x1b8>
 8015d94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015d98:	4573      	cmp	r3, lr
 8015d9a:	ec51 0b10 	vmov	r0, r1, d0
 8015d9e:	ee11 8a10 	vmov	r8, s2
 8015da2:	d80a      	bhi.n	8015dba <__ieee754_atan2+0x3a>
 8015da4:	4244      	negs	r4, r0
 8015da6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015daa:	4304      	orrs	r4, r0
 8015dac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015db0:	4574      	cmp	r4, lr
 8015db2:	468c      	mov	ip, r1
 8015db4:	ee10 9a10 	vmov	r9, s0
 8015db8:	d907      	bls.n	8015dca <__ieee754_atan2+0x4a>
 8015dba:	4632      	mov	r2, r6
 8015dbc:	463b      	mov	r3, r7
 8015dbe:	f7ea fa85 	bl	80002cc <__adddf3>
 8015dc2:	ec41 0b10 	vmov	d0, r0, r1
 8015dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015dce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015dd2:	4334      	orrs	r4, r6
 8015dd4:	d103      	bne.n	8015dde <__ieee754_atan2+0x5e>
 8015dd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dda:	f001 badd 	b.w	8017398 <atan>
 8015dde:	17bc      	asrs	r4, r7, #30
 8015de0:	f004 0402 	and.w	r4, r4, #2
 8015de4:	ea53 0909 	orrs.w	r9, r3, r9
 8015de8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015dec:	d107      	bne.n	8015dfe <__ieee754_atan2+0x7e>
 8015dee:	2c02      	cmp	r4, #2
 8015df0:	d073      	beq.n	8015eda <__ieee754_atan2+0x15a>
 8015df2:	2c03      	cmp	r4, #3
 8015df4:	d1e5      	bne.n	8015dc2 <__ieee754_atan2+0x42>
 8015df6:	a13e      	add	r1, pc, #248	; (adr r1, 8015ef0 <__ieee754_atan2+0x170>)
 8015df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dfc:	e7e1      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015dfe:	ea52 0808 	orrs.w	r8, r2, r8
 8015e02:	d106      	bne.n	8015e12 <__ieee754_atan2+0x92>
 8015e04:	f1bc 0f00 	cmp.w	ip, #0
 8015e08:	da6b      	bge.n	8015ee2 <__ieee754_atan2+0x162>
 8015e0a:	a13b      	add	r1, pc, #236	; (adr r1, 8015ef8 <__ieee754_atan2+0x178>)
 8015e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e10:	e7d7      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e12:	4572      	cmp	r2, lr
 8015e14:	d120      	bne.n	8015e58 <__ieee754_atan2+0xd8>
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d111      	bne.n	8015e3e <__ieee754_atan2+0xbe>
 8015e1a:	2c02      	cmp	r4, #2
 8015e1c:	d007      	beq.n	8015e2e <__ieee754_atan2+0xae>
 8015e1e:	2c03      	cmp	r4, #3
 8015e20:	d009      	beq.n	8015e36 <__ieee754_atan2+0xb6>
 8015e22:	2c01      	cmp	r4, #1
 8015e24:	d155      	bne.n	8015ed2 <__ieee754_atan2+0x152>
 8015e26:	a136      	add	r1, pc, #216	; (adr r1, 8015f00 <__ieee754_atan2+0x180>)
 8015e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e2c:	e7c9      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e2e:	a136      	add	r1, pc, #216	; (adr r1, 8015f08 <__ieee754_atan2+0x188>)
 8015e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e34:	e7c5      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e36:	a136      	add	r1, pc, #216	; (adr r1, 8015f10 <__ieee754_atan2+0x190>)
 8015e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e3c:	e7c1      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e3e:	2c02      	cmp	r4, #2
 8015e40:	d04b      	beq.n	8015eda <__ieee754_atan2+0x15a>
 8015e42:	2c03      	cmp	r4, #3
 8015e44:	d0d7      	beq.n	8015df6 <__ieee754_atan2+0x76>
 8015e46:	2c01      	cmp	r4, #1
 8015e48:	f04f 0000 	mov.w	r0, #0
 8015e4c:	d102      	bne.n	8015e54 <__ieee754_atan2+0xd4>
 8015e4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015e52:	e7b6      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e54:	2100      	movs	r1, #0
 8015e56:	e7b4      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e58:	4573      	cmp	r3, lr
 8015e5a:	d0d3      	beq.n	8015e04 <__ieee754_atan2+0x84>
 8015e5c:	1a9b      	subs	r3, r3, r2
 8015e5e:	151b      	asrs	r3, r3, #20
 8015e60:	2b3c      	cmp	r3, #60	; 0x3c
 8015e62:	dc1e      	bgt.n	8015ea2 <__ieee754_atan2+0x122>
 8015e64:	2f00      	cmp	r7, #0
 8015e66:	da01      	bge.n	8015e6c <__ieee754_atan2+0xec>
 8015e68:	333c      	adds	r3, #60	; 0x3c
 8015e6a:	db1e      	blt.n	8015eaa <__ieee754_atan2+0x12a>
 8015e6c:	4632      	mov	r2, r6
 8015e6e:	463b      	mov	r3, r7
 8015e70:	f7ea fd0c 	bl	800088c <__aeabi_ddiv>
 8015e74:	ec41 0b10 	vmov	d0, r0, r1
 8015e78:	f001 fc2e 	bl	80176d8 <fabs>
 8015e7c:	f001 fa8c 	bl	8017398 <atan>
 8015e80:	ec51 0b10 	vmov	r0, r1, d0
 8015e84:	2c01      	cmp	r4, #1
 8015e86:	d013      	beq.n	8015eb0 <__ieee754_atan2+0x130>
 8015e88:	2c02      	cmp	r4, #2
 8015e8a:	d015      	beq.n	8015eb8 <__ieee754_atan2+0x138>
 8015e8c:	2c00      	cmp	r4, #0
 8015e8e:	d098      	beq.n	8015dc2 <__ieee754_atan2+0x42>
 8015e90:	a321      	add	r3, pc, #132	; (adr r3, 8015f18 <__ieee754_atan2+0x198>)
 8015e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e96:	f7ea fa17 	bl	80002c8 <__aeabi_dsub>
 8015e9a:	a321      	add	r3, pc, #132	; (adr r3, 8015f20 <__ieee754_atan2+0x1a0>)
 8015e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea0:	e014      	b.n	8015ecc <__ieee754_atan2+0x14c>
 8015ea2:	a121      	add	r1, pc, #132	; (adr r1, 8015f28 <__ieee754_atan2+0x1a8>)
 8015ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ea8:	e7ec      	b.n	8015e84 <__ieee754_atan2+0x104>
 8015eaa:	2000      	movs	r0, #0
 8015eac:	2100      	movs	r1, #0
 8015eae:	e7e9      	b.n	8015e84 <__ieee754_atan2+0x104>
 8015eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015eb4:	4619      	mov	r1, r3
 8015eb6:	e784      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015eb8:	a317      	add	r3, pc, #92	; (adr r3, 8015f18 <__ieee754_atan2+0x198>)
 8015eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ebe:	f7ea fa03 	bl	80002c8 <__aeabi_dsub>
 8015ec2:	4602      	mov	r2, r0
 8015ec4:	460b      	mov	r3, r1
 8015ec6:	a116      	add	r1, pc, #88	; (adr r1, 8015f20 <__ieee754_atan2+0x1a0>)
 8015ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ecc:	f7ea f9fc 	bl	80002c8 <__aeabi_dsub>
 8015ed0:	e777      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015ed2:	a117      	add	r1, pc, #92	; (adr r1, 8015f30 <__ieee754_atan2+0x1b0>)
 8015ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ed8:	e773      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015eda:	a111      	add	r1, pc, #68	; (adr r1, 8015f20 <__ieee754_atan2+0x1a0>)
 8015edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ee0:	e76f      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015ee2:	a111      	add	r1, pc, #68	; (adr r1, 8015f28 <__ieee754_atan2+0x1a8>)
 8015ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ee8:	e76b      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015eea:	bf00      	nop
 8015eec:	f3af 8000 	nop.w
 8015ef0:	54442d18 	.word	0x54442d18
 8015ef4:	c00921fb 	.word	0xc00921fb
 8015ef8:	54442d18 	.word	0x54442d18
 8015efc:	bff921fb 	.word	0xbff921fb
 8015f00:	54442d18 	.word	0x54442d18
 8015f04:	bfe921fb 	.word	0xbfe921fb
 8015f08:	7f3321d2 	.word	0x7f3321d2
 8015f0c:	4002d97c 	.word	0x4002d97c
 8015f10:	7f3321d2 	.word	0x7f3321d2
 8015f14:	c002d97c 	.word	0xc002d97c
 8015f18:	33145c07 	.word	0x33145c07
 8015f1c:	3ca1a626 	.word	0x3ca1a626
 8015f20:	54442d18 	.word	0x54442d18
 8015f24:	400921fb 	.word	0x400921fb
 8015f28:	54442d18 	.word	0x54442d18
 8015f2c:	3ff921fb 	.word	0x3ff921fb
 8015f30:	54442d18 	.word	0x54442d18
 8015f34:	3fe921fb 	.word	0x3fe921fb
 8015f38:	7ff00000 	.word	0x7ff00000
 8015f3c:	00000000 	.word	0x00000000

08015f40 <__ieee754_rem_pio2>:
 8015f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f44:	ec57 6b10 	vmov	r6, r7, d0
 8015f48:	4bc3      	ldr	r3, [pc, #780]	; (8016258 <__ieee754_rem_pio2+0x318>)
 8015f4a:	b08d      	sub	sp, #52	; 0x34
 8015f4c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015f50:	4598      	cmp	r8, r3
 8015f52:	4604      	mov	r4, r0
 8015f54:	9704      	str	r7, [sp, #16]
 8015f56:	dc07      	bgt.n	8015f68 <__ieee754_rem_pio2+0x28>
 8015f58:	2200      	movs	r2, #0
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	ed84 0b00 	vstr	d0, [r4]
 8015f60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015f64:	2500      	movs	r5, #0
 8015f66:	e027      	b.n	8015fb8 <__ieee754_rem_pio2+0x78>
 8015f68:	4bbc      	ldr	r3, [pc, #752]	; (801625c <__ieee754_rem_pio2+0x31c>)
 8015f6a:	4598      	cmp	r8, r3
 8015f6c:	dc75      	bgt.n	801605a <__ieee754_rem_pio2+0x11a>
 8015f6e:	9b04      	ldr	r3, [sp, #16]
 8015f70:	4dbb      	ldr	r5, [pc, #748]	; (8016260 <__ieee754_rem_pio2+0x320>)
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	ee10 0a10 	vmov	r0, s0
 8015f78:	a3a9      	add	r3, pc, #676	; (adr r3, 8016220 <__ieee754_rem_pio2+0x2e0>)
 8015f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7e:	4639      	mov	r1, r7
 8015f80:	dd36      	ble.n	8015ff0 <__ieee754_rem_pio2+0xb0>
 8015f82:	f7ea f9a1 	bl	80002c8 <__aeabi_dsub>
 8015f86:	45a8      	cmp	r8, r5
 8015f88:	4606      	mov	r6, r0
 8015f8a:	460f      	mov	r7, r1
 8015f8c:	d018      	beq.n	8015fc0 <__ieee754_rem_pio2+0x80>
 8015f8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8016228 <__ieee754_rem_pio2+0x2e8>)
 8015f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f94:	f7ea f998 	bl	80002c8 <__aeabi_dsub>
 8015f98:	4602      	mov	r2, r0
 8015f9a:	460b      	mov	r3, r1
 8015f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8015fa0:	4630      	mov	r0, r6
 8015fa2:	4639      	mov	r1, r7
 8015fa4:	f7ea f990 	bl	80002c8 <__aeabi_dsub>
 8015fa8:	a39f      	add	r3, pc, #636	; (adr r3, 8016228 <__ieee754_rem_pio2+0x2e8>)
 8015faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fae:	f7ea f98b 	bl	80002c8 <__aeabi_dsub>
 8015fb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015fb6:	2501      	movs	r5, #1
 8015fb8:	4628      	mov	r0, r5
 8015fba:	b00d      	add	sp, #52	; 0x34
 8015fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fc0:	a39b      	add	r3, pc, #620	; (adr r3, 8016230 <__ieee754_rem_pio2+0x2f0>)
 8015fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc6:	f7ea f97f 	bl	80002c8 <__aeabi_dsub>
 8015fca:	a39b      	add	r3, pc, #620	; (adr r3, 8016238 <__ieee754_rem_pio2+0x2f8>)
 8015fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fd0:	4606      	mov	r6, r0
 8015fd2:	460f      	mov	r7, r1
 8015fd4:	f7ea f978 	bl	80002c8 <__aeabi_dsub>
 8015fd8:	4602      	mov	r2, r0
 8015fda:	460b      	mov	r3, r1
 8015fdc:	e9c4 2300 	strd	r2, r3, [r4]
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	4639      	mov	r1, r7
 8015fe4:	f7ea f970 	bl	80002c8 <__aeabi_dsub>
 8015fe8:	a393      	add	r3, pc, #588	; (adr r3, 8016238 <__ieee754_rem_pio2+0x2f8>)
 8015fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fee:	e7de      	b.n	8015fae <__ieee754_rem_pio2+0x6e>
 8015ff0:	f7ea f96c 	bl	80002cc <__adddf3>
 8015ff4:	45a8      	cmp	r8, r5
 8015ff6:	4606      	mov	r6, r0
 8015ff8:	460f      	mov	r7, r1
 8015ffa:	d016      	beq.n	801602a <__ieee754_rem_pio2+0xea>
 8015ffc:	a38a      	add	r3, pc, #552	; (adr r3, 8016228 <__ieee754_rem_pio2+0x2e8>)
 8015ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016002:	f7ea f963 	bl	80002cc <__adddf3>
 8016006:	4602      	mov	r2, r0
 8016008:	460b      	mov	r3, r1
 801600a:	e9c4 2300 	strd	r2, r3, [r4]
 801600e:	4630      	mov	r0, r6
 8016010:	4639      	mov	r1, r7
 8016012:	f7ea f959 	bl	80002c8 <__aeabi_dsub>
 8016016:	a384      	add	r3, pc, #528	; (adr r3, 8016228 <__ieee754_rem_pio2+0x2e8>)
 8016018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601c:	f7ea f956 	bl	80002cc <__adddf3>
 8016020:	f04f 35ff 	mov.w	r5, #4294967295
 8016024:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016028:	e7c6      	b.n	8015fb8 <__ieee754_rem_pio2+0x78>
 801602a:	a381      	add	r3, pc, #516	; (adr r3, 8016230 <__ieee754_rem_pio2+0x2f0>)
 801602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016030:	f7ea f94c 	bl	80002cc <__adddf3>
 8016034:	a380      	add	r3, pc, #512	; (adr r3, 8016238 <__ieee754_rem_pio2+0x2f8>)
 8016036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603a:	4606      	mov	r6, r0
 801603c:	460f      	mov	r7, r1
 801603e:	f7ea f945 	bl	80002cc <__adddf3>
 8016042:	4602      	mov	r2, r0
 8016044:	460b      	mov	r3, r1
 8016046:	e9c4 2300 	strd	r2, r3, [r4]
 801604a:	4630      	mov	r0, r6
 801604c:	4639      	mov	r1, r7
 801604e:	f7ea f93b 	bl	80002c8 <__aeabi_dsub>
 8016052:	a379      	add	r3, pc, #484	; (adr r3, 8016238 <__ieee754_rem_pio2+0x2f8>)
 8016054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016058:	e7e0      	b.n	801601c <__ieee754_rem_pio2+0xdc>
 801605a:	4b82      	ldr	r3, [pc, #520]	; (8016264 <__ieee754_rem_pio2+0x324>)
 801605c:	4598      	cmp	r8, r3
 801605e:	f300 80d0 	bgt.w	8016202 <__ieee754_rem_pio2+0x2c2>
 8016062:	f001 fb39 	bl	80176d8 <fabs>
 8016066:	ec57 6b10 	vmov	r6, r7, d0
 801606a:	ee10 0a10 	vmov	r0, s0
 801606e:	a374      	add	r3, pc, #464	; (adr r3, 8016240 <__ieee754_rem_pio2+0x300>)
 8016070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016074:	4639      	mov	r1, r7
 8016076:	f7ea fadf 	bl	8000638 <__aeabi_dmul>
 801607a:	2200      	movs	r2, #0
 801607c:	4b7a      	ldr	r3, [pc, #488]	; (8016268 <__ieee754_rem_pio2+0x328>)
 801607e:	f7ea f925 	bl	80002cc <__adddf3>
 8016082:	f7ea fd89 	bl	8000b98 <__aeabi_d2iz>
 8016086:	4605      	mov	r5, r0
 8016088:	f7ea fa6c 	bl	8000564 <__aeabi_i2d>
 801608c:	a364      	add	r3, pc, #400	; (adr r3, 8016220 <__ieee754_rem_pio2+0x2e0>)
 801608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016096:	f7ea facf 	bl	8000638 <__aeabi_dmul>
 801609a:	4602      	mov	r2, r0
 801609c:	460b      	mov	r3, r1
 801609e:	4630      	mov	r0, r6
 80160a0:	4639      	mov	r1, r7
 80160a2:	f7ea f911 	bl	80002c8 <__aeabi_dsub>
 80160a6:	a360      	add	r3, pc, #384	; (adr r3, 8016228 <__ieee754_rem_pio2+0x2e8>)
 80160a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ac:	4682      	mov	sl, r0
 80160ae:	468b      	mov	fp, r1
 80160b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160b4:	f7ea fac0 	bl	8000638 <__aeabi_dmul>
 80160b8:	2d1f      	cmp	r5, #31
 80160ba:	4606      	mov	r6, r0
 80160bc:	460f      	mov	r7, r1
 80160be:	dc0c      	bgt.n	80160da <__ieee754_rem_pio2+0x19a>
 80160c0:	1e6a      	subs	r2, r5, #1
 80160c2:	4b6a      	ldr	r3, [pc, #424]	; (801626c <__ieee754_rem_pio2+0x32c>)
 80160c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160c8:	4543      	cmp	r3, r8
 80160ca:	d006      	beq.n	80160da <__ieee754_rem_pio2+0x19a>
 80160cc:	4632      	mov	r2, r6
 80160ce:	463b      	mov	r3, r7
 80160d0:	4650      	mov	r0, sl
 80160d2:	4659      	mov	r1, fp
 80160d4:	f7ea f8f8 	bl	80002c8 <__aeabi_dsub>
 80160d8:	e00e      	b.n	80160f8 <__ieee754_rem_pio2+0x1b8>
 80160da:	4632      	mov	r2, r6
 80160dc:	463b      	mov	r3, r7
 80160de:	4650      	mov	r0, sl
 80160e0:	4659      	mov	r1, fp
 80160e2:	f7ea f8f1 	bl	80002c8 <__aeabi_dsub>
 80160e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80160ea:	9305      	str	r3, [sp, #20]
 80160ec:	9a05      	ldr	r2, [sp, #20]
 80160ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80160f2:	1ad3      	subs	r3, r2, r3
 80160f4:	2b10      	cmp	r3, #16
 80160f6:	dc02      	bgt.n	80160fe <__ieee754_rem_pio2+0x1be>
 80160f8:	e9c4 0100 	strd	r0, r1, [r4]
 80160fc:	e039      	b.n	8016172 <__ieee754_rem_pio2+0x232>
 80160fe:	a34c      	add	r3, pc, #304	; (adr r3, 8016230 <__ieee754_rem_pio2+0x2f0>)
 8016100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016108:	f7ea fa96 	bl	8000638 <__aeabi_dmul>
 801610c:	4606      	mov	r6, r0
 801610e:	460f      	mov	r7, r1
 8016110:	4602      	mov	r2, r0
 8016112:	460b      	mov	r3, r1
 8016114:	4650      	mov	r0, sl
 8016116:	4659      	mov	r1, fp
 8016118:	f7ea f8d6 	bl	80002c8 <__aeabi_dsub>
 801611c:	4602      	mov	r2, r0
 801611e:	460b      	mov	r3, r1
 8016120:	4680      	mov	r8, r0
 8016122:	4689      	mov	r9, r1
 8016124:	4650      	mov	r0, sl
 8016126:	4659      	mov	r1, fp
 8016128:	f7ea f8ce 	bl	80002c8 <__aeabi_dsub>
 801612c:	4632      	mov	r2, r6
 801612e:	463b      	mov	r3, r7
 8016130:	f7ea f8ca 	bl	80002c8 <__aeabi_dsub>
 8016134:	a340      	add	r3, pc, #256	; (adr r3, 8016238 <__ieee754_rem_pio2+0x2f8>)
 8016136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801613a:	4606      	mov	r6, r0
 801613c:	460f      	mov	r7, r1
 801613e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016142:	f7ea fa79 	bl	8000638 <__aeabi_dmul>
 8016146:	4632      	mov	r2, r6
 8016148:	463b      	mov	r3, r7
 801614a:	f7ea f8bd 	bl	80002c8 <__aeabi_dsub>
 801614e:	4602      	mov	r2, r0
 8016150:	460b      	mov	r3, r1
 8016152:	4606      	mov	r6, r0
 8016154:	460f      	mov	r7, r1
 8016156:	4640      	mov	r0, r8
 8016158:	4649      	mov	r1, r9
 801615a:	f7ea f8b5 	bl	80002c8 <__aeabi_dsub>
 801615e:	9a05      	ldr	r2, [sp, #20]
 8016160:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016164:	1ad3      	subs	r3, r2, r3
 8016166:	2b31      	cmp	r3, #49	; 0x31
 8016168:	dc20      	bgt.n	80161ac <__ieee754_rem_pio2+0x26c>
 801616a:	e9c4 0100 	strd	r0, r1, [r4]
 801616e:	46c2      	mov	sl, r8
 8016170:	46cb      	mov	fp, r9
 8016172:	e9d4 8900 	ldrd	r8, r9, [r4]
 8016176:	4650      	mov	r0, sl
 8016178:	4642      	mov	r2, r8
 801617a:	464b      	mov	r3, r9
 801617c:	4659      	mov	r1, fp
 801617e:	f7ea f8a3 	bl	80002c8 <__aeabi_dsub>
 8016182:	463b      	mov	r3, r7
 8016184:	4632      	mov	r2, r6
 8016186:	f7ea f89f 	bl	80002c8 <__aeabi_dsub>
 801618a:	9b04      	ldr	r3, [sp, #16]
 801618c:	2b00      	cmp	r3, #0
 801618e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016192:	f6bf af11 	bge.w	8015fb8 <__ieee754_rem_pio2+0x78>
 8016196:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801619a:	6063      	str	r3, [r4, #4]
 801619c:	f8c4 8000 	str.w	r8, [r4]
 80161a0:	60a0      	str	r0, [r4, #8]
 80161a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161a6:	60e3      	str	r3, [r4, #12]
 80161a8:	426d      	negs	r5, r5
 80161aa:	e705      	b.n	8015fb8 <__ieee754_rem_pio2+0x78>
 80161ac:	a326      	add	r3, pc, #152	; (adr r3, 8016248 <__ieee754_rem_pio2+0x308>)
 80161ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161b6:	f7ea fa3f 	bl	8000638 <__aeabi_dmul>
 80161ba:	4606      	mov	r6, r0
 80161bc:	460f      	mov	r7, r1
 80161be:	4602      	mov	r2, r0
 80161c0:	460b      	mov	r3, r1
 80161c2:	4640      	mov	r0, r8
 80161c4:	4649      	mov	r1, r9
 80161c6:	f7ea f87f 	bl	80002c8 <__aeabi_dsub>
 80161ca:	4602      	mov	r2, r0
 80161cc:	460b      	mov	r3, r1
 80161ce:	4682      	mov	sl, r0
 80161d0:	468b      	mov	fp, r1
 80161d2:	4640      	mov	r0, r8
 80161d4:	4649      	mov	r1, r9
 80161d6:	f7ea f877 	bl	80002c8 <__aeabi_dsub>
 80161da:	4632      	mov	r2, r6
 80161dc:	463b      	mov	r3, r7
 80161de:	f7ea f873 	bl	80002c8 <__aeabi_dsub>
 80161e2:	a31b      	add	r3, pc, #108	; (adr r3, 8016250 <__ieee754_rem_pio2+0x310>)
 80161e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e8:	4606      	mov	r6, r0
 80161ea:	460f      	mov	r7, r1
 80161ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161f0:	f7ea fa22 	bl	8000638 <__aeabi_dmul>
 80161f4:	4632      	mov	r2, r6
 80161f6:	463b      	mov	r3, r7
 80161f8:	f7ea f866 	bl	80002c8 <__aeabi_dsub>
 80161fc:	4606      	mov	r6, r0
 80161fe:	460f      	mov	r7, r1
 8016200:	e764      	b.n	80160cc <__ieee754_rem_pio2+0x18c>
 8016202:	4b1b      	ldr	r3, [pc, #108]	; (8016270 <__ieee754_rem_pio2+0x330>)
 8016204:	4598      	cmp	r8, r3
 8016206:	dd35      	ble.n	8016274 <__ieee754_rem_pio2+0x334>
 8016208:	ee10 2a10 	vmov	r2, s0
 801620c:	463b      	mov	r3, r7
 801620e:	4630      	mov	r0, r6
 8016210:	4639      	mov	r1, r7
 8016212:	f7ea f859 	bl	80002c8 <__aeabi_dsub>
 8016216:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801621a:	e9c4 0100 	strd	r0, r1, [r4]
 801621e:	e6a1      	b.n	8015f64 <__ieee754_rem_pio2+0x24>
 8016220:	54400000 	.word	0x54400000
 8016224:	3ff921fb 	.word	0x3ff921fb
 8016228:	1a626331 	.word	0x1a626331
 801622c:	3dd0b461 	.word	0x3dd0b461
 8016230:	1a600000 	.word	0x1a600000
 8016234:	3dd0b461 	.word	0x3dd0b461
 8016238:	2e037073 	.word	0x2e037073
 801623c:	3ba3198a 	.word	0x3ba3198a
 8016240:	6dc9c883 	.word	0x6dc9c883
 8016244:	3fe45f30 	.word	0x3fe45f30
 8016248:	2e000000 	.word	0x2e000000
 801624c:	3ba3198a 	.word	0x3ba3198a
 8016250:	252049c1 	.word	0x252049c1
 8016254:	397b839a 	.word	0x397b839a
 8016258:	3fe921fb 	.word	0x3fe921fb
 801625c:	4002d97b 	.word	0x4002d97b
 8016260:	3ff921fb 	.word	0x3ff921fb
 8016264:	413921fb 	.word	0x413921fb
 8016268:	3fe00000 	.word	0x3fe00000
 801626c:	080184d0 	.word	0x080184d0
 8016270:	7fefffff 	.word	0x7fefffff
 8016274:	ea4f 5528 	mov.w	r5, r8, asr #20
 8016278:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801627c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8016280:	4630      	mov	r0, r6
 8016282:	460f      	mov	r7, r1
 8016284:	f7ea fc88 	bl	8000b98 <__aeabi_d2iz>
 8016288:	f7ea f96c 	bl	8000564 <__aeabi_i2d>
 801628c:	4602      	mov	r2, r0
 801628e:	460b      	mov	r3, r1
 8016290:	4630      	mov	r0, r6
 8016292:	4639      	mov	r1, r7
 8016294:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016298:	f7ea f816 	bl	80002c8 <__aeabi_dsub>
 801629c:	2200      	movs	r2, #0
 801629e:	4b1f      	ldr	r3, [pc, #124]	; (801631c <__ieee754_rem_pio2+0x3dc>)
 80162a0:	f7ea f9ca 	bl	8000638 <__aeabi_dmul>
 80162a4:	460f      	mov	r7, r1
 80162a6:	4606      	mov	r6, r0
 80162a8:	f7ea fc76 	bl	8000b98 <__aeabi_d2iz>
 80162ac:	f7ea f95a 	bl	8000564 <__aeabi_i2d>
 80162b0:	4602      	mov	r2, r0
 80162b2:	460b      	mov	r3, r1
 80162b4:	4630      	mov	r0, r6
 80162b6:	4639      	mov	r1, r7
 80162b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80162bc:	f7ea f804 	bl	80002c8 <__aeabi_dsub>
 80162c0:	2200      	movs	r2, #0
 80162c2:	4b16      	ldr	r3, [pc, #88]	; (801631c <__ieee754_rem_pio2+0x3dc>)
 80162c4:	f7ea f9b8 	bl	8000638 <__aeabi_dmul>
 80162c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80162cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80162d0:	f04f 0803 	mov.w	r8, #3
 80162d4:	2600      	movs	r6, #0
 80162d6:	2700      	movs	r7, #0
 80162d8:	4632      	mov	r2, r6
 80162da:	463b      	mov	r3, r7
 80162dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80162e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80162e4:	f7ea fc10 	bl	8000b08 <__aeabi_dcmpeq>
 80162e8:	b9b0      	cbnz	r0, 8016318 <__ieee754_rem_pio2+0x3d8>
 80162ea:	4b0d      	ldr	r3, [pc, #52]	; (8016320 <__ieee754_rem_pio2+0x3e0>)
 80162ec:	9301      	str	r3, [sp, #4]
 80162ee:	2302      	movs	r3, #2
 80162f0:	9300      	str	r3, [sp, #0]
 80162f2:	462a      	mov	r2, r5
 80162f4:	4643      	mov	r3, r8
 80162f6:	4621      	mov	r1, r4
 80162f8:	a806      	add	r0, sp, #24
 80162fa:	f000 fc51 	bl	8016ba0 <__kernel_rem_pio2>
 80162fe:	9b04      	ldr	r3, [sp, #16]
 8016300:	2b00      	cmp	r3, #0
 8016302:	4605      	mov	r5, r0
 8016304:	f6bf ae58 	bge.w	8015fb8 <__ieee754_rem_pio2+0x78>
 8016308:	6863      	ldr	r3, [r4, #4]
 801630a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801630e:	6063      	str	r3, [r4, #4]
 8016310:	68e3      	ldr	r3, [r4, #12]
 8016312:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016316:	e746      	b.n	80161a6 <__ieee754_rem_pio2+0x266>
 8016318:	46d0      	mov	r8, sl
 801631a:	e7dd      	b.n	80162d8 <__ieee754_rem_pio2+0x398>
 801631c:	41700000 	.word	0x41700000
 8016320:	08018550 	.word	0x08018550

08016324 <__ieee754_sqrt>:
 8016324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016328:	4955      	ldr	r1, [pc, #340]	; (8016480 <__ieee754_sqrt+0x15c>)
 801632a:	ec55 4b10 	vmov	r4, r5, d0
 801632e:	43a9      	bics	r1, r5
 8016330:	462b      	mov	r3, r5
 8016332:	462a      	mov	r2, r5
 8016334:	d112      	bne.n	801635c <__ieee754_sqrt+0x38>
 8016336:	ee10 2a10 	vmov	r2, s0
 801633a:	ee10 0a10 	vmov	r0, s0
 801633e:	4629      	mov	r1, r5
 8016340:	f7ea f97a 	bl	8000638 <__aeabi_dmul>
 8016344:	4602      	mov	r2, r0
 8016346:	460b      	mov	r3, r1
 8016348:	4620      	mov	r0, r4
 801634a:	4629      	mov	r1, r5
 801634c:	f7e9 ffbe 	bl	80002cc <__adddf3>
 8016350:	4604      	mov	r4, r0
 8016352:	460d      	mov	r5, r1
 8016354:	ec45 4b10 	vmov	d0, r4, r5
 8016358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801635c:	2d00      	cmp	r5, #0
 801635e:	ee10 0a10 	vmov	r0, s0
 8016362:	4621      	mov	r1, r4
 8016364:	dc0f      	bgt.n	8016386 <__ieee754_sqrt+0x62>
 8016366:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801636a:	4330      	orrs	r0, r6
 801636c:	d0f2      	beq.n	8016354 <__ieee754_sqrt+0x30>
 801636e:	b155      	cbz	r5, 8016386 <__ieee754_sqrt+0x62>
 8016370:	ee10 2a10 	vmov	r2, s0
 8016374:	4620      	mov	r0, r4
 8016376:	4629      	mov	r1, r5
 8016378:	f7e9 ffa6 	bl	80002c8 <__aeabi_dsub>
 801637c:	4602      	mov	r2, r0
 801637e:	460b      	mov	r3, r1
 8016380:	f7ea fa84 	bl	800088c <__aeabi_ddiv>
 8016384:	e7e4      	b.n	8016350 <__ieee754_sqrt+0x2c>
 8016386:	151b      	asrs	r3, r3, #20
 8016388:	d073      	beq.n	8016472 <__ieee754_sqrt+0x14e>
 801638a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801638e:	07dd      	lsls	r5, r3, #31
 8016390:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016394:	bf48      	it	mi
 8016396:	0fc8      	lsrmi	r0, r1, #31
 8016398:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801639c:	bf44      	itt	mi
 801639e:	0049      	lslmi	r1, r1, #1
 80163a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80163a4:	2500      	movs	r5, #0
 80163a6:	1058      	asrs	r0, r3, #1
 80163a8:	0fcb      	lsrs	r3, r1, #31
 80163aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80163ae:	0049      	lsls	r1, r1, #1
 80163b0:	2316      	movs	r3, #22
 80163b2:	462c      	mov	r4, r5
 80163b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80163b8:	19a7      	adds	r7, r4, r6
 80163ba:	4297      	cmp	r7, r2
 80163bc:	bfde      	ittt	le
 80163be:	19bc      	addle	r4, r7, r6
 80163c0:	1bd2      	suble	r2, r2, r7
 80163c2:	19ad      	addle	r5, r5, r6
 80163c4:	0fcf      	lsrs	r7, r1, #31
 80163c6:	3b01      	subs	r3, #1
 80163c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80163cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80163d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80163d4:	d1f0      	bne.n	80163b8 <__ieee754_sqrt+0x94>
 80163d6:	f04f 0c20 	mov.w	ip, #32
 80163da:	469e      	mov	lr, r3
 80163dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80163e0:	42a2      	cmp	r2, r4
 80163e2:	eb06 070e 	add.w	r7, r6, lr
 80163e6:	dc02      	bgt.n	80163ee <__ieee754_sqrt+0xca>
 80163e8:	d112      	bne.n	8016410 <__ieee754_sqrt+0xec>
 80163ea:	428f      	cmp	r7, r1
 80163ec:	d810      	bhi.n	8016410 <__ieee754_sqrt+0xec>
 80163ee:	2f00      	cmp	r7, #0
 80163f0:	eb07 0e06 	add.w	lr, r7, r6
 80163f4:	da42      	bge.n	801647c <__ieee754_sqrt+0x158>
 80163f6:	f1be 0f00 	cmp.w	lr, #0
 80163fa:	db3f      	blt.n	801647c <__ieee754_sqrt+0x158>
 80163fc:	f104 0801 	add.w	r8, r4, #1
 8016400:	1b12      	subs	r2, r2, r4
 8016402:	428f      	cmp	r7, r1
 8016404:	bf88      	it	hi
 8016406:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801640a:	1bc9      	subs	r1, r1, r7
 801640c:	4433      	add	r3, r6
 801640e:	4644      	mov	r4, r8
 8016410:	0052      	lsls	r2, r2, #1
 8016412:	f1bc 0c01 	subs.w	ip, ip, #1
 8016416:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801641a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801641e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016422:	d1dd      	bne.n	80163e0 <__ieee754_sqrt+0xbc>
 8016424:	430a      	orrs	r2, r1
 8016426:	d006      	beq.n	8016436 <__ieee754_sqrt+0x112>
 8016428:	1c5c      	adds	r4, r3, #1
 801642a:	bf13      	iteet	ne
 801642c:	3301      	addne	r3, #1
 801642e:	3501      	addeq	r5, #1
 8016430:	4663      	moveq	r3, ip
 8016432:	f023 0301 	bicne.w	r3, r3, #1
 8016436:	106a      	asrs	r2, r5, #1
 8016438:	085b      	lsrs	r3, r3, #1
 801643a:	07e9      	lsls	r1, r5, #31
 801643c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016440:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016444:	bf48      	it	mi
 8016446:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801644a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801644e:	461c      	mov	r4, r3
 8016450:	e780      	b.n	8016354 <__ieee754_sqrt+0x30>
 8016452:	0aca      	lsrs	r2, r1, #11
 8016454:	3815      	subs	r0, #21
 8016456:	0549      	lsls	r1, r1, #21
 8016458:	2a00      	cmp	r2, #0
 801645a:	d0fa      	beq.n	8016452 <__ieee754_sqrt+0x12e>
 801645c:	02d6      	lsls	r6, r2, #11
 801645e:	d50a      	bpl.n	8016476 <__ieee754_sqrt+0x152>
 8016460:	f1c3 0420 	rsb	r4, r3, #32
 8016464:	fa21 f404 	lsr.w	r4, r1, r4
 8016468:	1e5d      	subs	r5, r3, #1
 801646a:	4099      	lsls	r1, r3
 801646c:	4322      	orrs	r2, r4
 801646e:	1b43      	subs	r3, r0, r5
 8016470:	e78b      	b.n	801638a <__ieee754_sqrt+0x66>
 8016472:	4618      	mov	r0, r3
 8016474:	e7f0      	b.n	8016458 <__ieee754_sqrt+0x134>
 8016476:	0052      	lsls	r2, r2, #1
 8016478:	3301      	adds	r3, #1
 801647a:	e7ef      	b.n	801645c <__ieee754_sqrt+0x138>
 801647c:	46a0      	mov	r8, r4
 801647e:	e7bf      	b.n	8016400 <__ieee754_sqrt+0xdc>
 8016480:	7ff00000 	.word	0x7ff00000

08016484 <__ieee754_powf>:
 8016484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016488:	ee10 5a90 	vmov	r5, s1
 801648c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8016490:	ed2d 8b02 	vpush	{d8}
 8016494:	eeb0 8a40 	vmov.f32	s16, s0
 8016498:	eef0 8a60 	vmov.f32	s17, s1
 801649c:	f000 8293 	beq.w	80169c6 <__ieee754_powf+0x542>
 80164a0:	ee10 8a10 	vmov	r8, s0
 80164a4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80164a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80164ac:	dc06      	bgt.n	80164bc <__ieee754_powf+0x38>
 80164ae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80164b2:	dd0a      	ble.n	80164ca <__ieee754_powf+0x46>
 80164b4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80164b8:	f000 8285 	beq.w	80169c6 <__ieee754_powf+0x542>
 80164bc:	ecbd 8b02 	vpop	{d8}
 80164c0:	48d9      	ldr	r0, [pc, #868]	; (8016828 <__ieee754_powf+0x3a4>)
 80164c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164c6:	f001 ba2b 	b.w	8017920 <nanf>
 80164ca:	f1b8 0f00 	cmp.w	r8, #0
 80164ce:	da1d      	bge.n	801650c <__ieee754_powf+0x88>
 80164d0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80164d4:	da2c      	bge.n	8016530 <__ieee754_powf+0xac>
 80164d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80164da:	db30      	blt.n	801653e <__ieee754_powf+0xba>
 80164dc:	15fb      	asrs	r3, r7, #23
 80164de:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80164e2:	fa47 f603 	asr.w	r6, r7, r3
 80164e6:	fa06 f303 	lsl.w	r3, r6, r3
 80164ea:	42bb      	cmp	r3, r7
 80164ec:	d127      	bne.n	801653e <__ieee754_powf+0xba>
 80164ee:	f006 0601 	and.w	r6, r6, #1
 80164f2:	f1c6 0602 	rsb	r6, r6, #2
 80164f6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80164fa:	d122      	bne.n	8016542 <__ieee754_powf+0xbe>
 80164fc:	2d00      	cmp	r5, #0
 80164fe:	f280 8268 	bge.w	80169d2 <__ieee754_powf+0x54e>
 8016502:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016506:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801650a:	e00d      	b.n	8016528 <__ieee754_powf+0xa4>
 801650c:	2600      	movs	r6, #0
 801650e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016512:	d1f0      	bne.n	80164f6 <__ieee754_powf+0x72>
 8016514:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016518:	f000 8255 	beq.w	80169c6 <__ieee754_powf+0x542>
 801651c:	dd0a      	ble.n	8016534 <__ieee754_powf+0xb0>
 801651e:	2d00      	cmp	r5, #0
 8016520:	f280 8254 	bge.w	80169cc <__ieee754_powf+0x548>
 8016524:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801682c <__ieee754_powf+0x3a8>
 8016528:	ecbd 8b02 	vpop	{d8}
 801652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016530:	2602      	movs	r6, #2
 8016532:	e7ec      	b.n	801650e <__ieee754_powf+0x8a>
 8016534:	2d00      	cmp	r5, #0
 8016536:	daf5      	bge.n	8016524 <__ieee754_powf+0xa0>
 8016538:	eeb1 0a68 	vneg.f32	s0, s17
 801653c:	e7f4      	b.n	8016528 <__ieee754_powf+0xa4>
 801653e:	2600      	movs	r6, #0
 8016540:	e7d9      	b.n	80164f6 <__ieee754_powf+0x72>
 8016542:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8016546:	d102      	bne.n	801654e <__ieee754_powf+0xca>
 8016548:	ee28 0a08 	vmul.f32	s0, s16, s16
 801654c:	e7ec      	b.n	8016528 <__ieee754_powf+0xa4>
 801654e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8016552:	eeb0 0a48 	vmov.f32	s0, s16
 8016556:	d108      	bne.n	801656a <__ieee754_powf+0xe6>
 8016558:	f1b8 0f00 	cmp.w	r8, #0
 801655c:	db05      	blt.n	801656a <__ieee754_powf+0xe6>
 801655e:	ecbd 8b02 	vpop	{d8}
 8016562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016566:	f000 ba4d 	b.w	8016a04 <__ieee754_sqrtf>
 801656a:	f001 f9c7 	bl	80178fc <fabsf>
 801656e:	b124      	cbz	r4, 801657a <__ieee754_powf+0xf6>
 8016570:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8016574:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016578:	d117      	bne.n	80165aa <__ieee754_powf+0x126>
 801657a:	2d00      	cmp	r5, #0
 801657c:	bfbc      	itt	lt
 801657e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8016582:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016586:	f1b8 0f00 	cmp.w	r8, #0
 801658a:	dacd      	bge.n	8016528 <__ieee754_powf+0xa4>
 801658c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8016590:	ea54 0306 	orrs.w	r3, r4, r6
 8016594:	d104      	bne.n	80165a0 <__ieee754_powf+0x11c>
 8016596:	ee70 7a40 	vsub.f32	s15, s0, s0
 801659a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801659e:	e7c3      	b.n	8016528 <__ieee754_powf+0xa4>
 80165a0:	2e01      	cmp	r6, #1
 80165a2:	d1c1      	bne.n	8016528 <__ieee754_powf+0xa4>
 80165a4:	eeb1 0a40 	vneg.f32	s0, s0
 80165a8:	e7be      	b.n	8016528 <__ieee754_powf+0xa4>
 80165aa:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80165ae:	3801      	subs	r0, #1
 80165b0:	ea56 0300 	orrs.w	r3, r6, r0
 80165b4:	d104      	bne.n	80165c0 <__ieee754_powf+0x13c>
 80165b6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80165ba:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80165be:	e7b3      	b.n	8016528 <__ieee754_powf+0xa4>
 80165c0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80165c4:	dd6d      	ble.n	80166a2 <__ieee754_powf+0x21e>
 80165c6:	4b9a      	ldr	r3, [pc, #616]	; (8016830 <__ieee754_powf+0x3ac>)
 80165c8:	429c      	cmp	r4, r3
 80165ca:	dc06      	bgt.n	80165da <__ieee754_powf+0x156>
 80165cc:	2d00      	cmp	r5, #0
 80165ce:	daa9      	bge.n	8016524 <__ieee754_powf+0xa0>
 80165d0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8016834 <__ieee754_powf+0x3b0>
 80165d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165d8:	e7a6      	b.n	8016528 <__ieee754_powf+0xa4>
 80165da:	4b97      	ldr	r3, [pc, #604]	; (8016838 <__ieee754_powf+0x3b4>)
 80165dc:	429c      	cmp	r4, r3
 80165de:	dd02      	ble.n	80165e6 <__ieee754_powf+0x162>
 80165e0:	2d00      	cmp	r5, #0
 80165e2:	dcf5      	bgt.n	80165d0 <__ieee754_powf+0x14c>
 80165e4:	e79e      	b.n	8016524 <__ieee754_powf+0xa0>
 80165e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80165ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80165ee:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801683c <__ieee754_powf+0x3b8>
 80165f2:	eef1 6a40 	vneg.f32	s13, s0
 80165f6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80165fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80165fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016602:	eee7 7a40 	vfms.f32	s15, s14, s0
 8016606:	ee60 0a00 	vmul.f32	s1, s0, s0
 801660a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8016840 <__ieee754_powf+0x3bc>
 801660e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8016612:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8016844 <__ieee754_powf+0x3c0>
 8016616:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801661a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801661e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016848 <__ieee754_powf+0x3c4>
 8016622:	eeb0 6a67 	vmov.f32	s12, s15
 8016626:	eea0 6a07 	vfma.f32	s12, s0, s14
 801662a:	ee16 3a10 	vmov	r3, s12
 801662e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016632:	f023 030f 	bic.w	r3, r3, #15
 8016636:	ee00 3a90 	vmov	s1, r3
 801663a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801663e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016642:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8016646:	f025 050f 	bic.w	r5, r5, #15
 801664a:	ee07 5a10 	vmov	s14, r5
 801664e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8016652:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016656:	ee07 3a90 	vmov	s15, r3
 801665a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801665e:	3e01      	subs	r6, #1
 8016660:	ea56 0200 	orrs.w	r2, r6, r0
 8016664:	ee07 5a10 	vmov	s14, r5
 8016668:	ee67 7a87 	vmul.f32	s15, s15, s14
 801666c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016670:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8016674:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016678:	ee17 4a10 	vmov	r4, s14
 801667c:	bf08      	it	eq
 801667e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8016682:	2c00      	cmp	r4, #0
 8016684:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016688:	f340 8184 	ble.w	8016994 <__ieee754_powf+0x510>
 801668c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8016690:	f340 80fc 	ble.w	801688c <__ieee754_powf+0x408>
 8016694:	eddf 7a67 	vldr	s15, [pc, #412]	; 8016834 <__ieee754_powf+0x3b0>
 8016698:	ee28 0a27 	vmul.f32	s0, s16, s15
 801669c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80166a0:	e742      	b.n	8016528 <__ieee754_powf+0xa4>
 80166a2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80166a6:	bfbf      	itttt	lt
 80166a8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801684c <__ieee754_powf+0x3c8>
 80166ac:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80166b0:	f06f 0217 	mvnlt.w	r2, #23
 80166b4:	ee17 4a90 	vmovlt	r4, s15
 80166b8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80166bc:	bfa8      	it	ge
 80166be:	2200      	movge	r2, #0
 80166c0:	3b7f      	subs	r3, #127	; 0x7f
 80166c2:	4413      	add	r3, r2
 80166c4:	4a62      	ldr	r2, [pc, #392]	; (8016850 <__ieee754_powf+0x3cc>)
 80166c6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80166ca:	4294      	cmp	r4, r2
 80166cc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80166d0:	dd06      	ble.n	80166e0 <__ieee754_powf+0x25c>
 80166d2:	4a60      	ldr	r2, [pc, #384]	; (8016854 <__ieee754_powf+0x3d0>)
 80166d4:	4294      	cmp	r4, r2
 80166d6:	f340 80a5 	ble.w	8016824 <__ieee754_powf+0x3a0>
 80166da:	3301      	adds	r3, #1
 80166dc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80166e0:	2400      	movs	r4, #0
 80166e2:	4a5d      	ldr	r2, [pc, #372]	; (8016858 <__ieee754_powf+0x3d4>)
 80166e4:	00a7      	lsls	r7, r4, #2
 80166e6:	443a      	add	r2, r7
 80166e8:	ee07 1a90 	vmov	s15, r1
 80166ec:	ed92 7a00 	vldr	s14, [r2]
 80166f0:	4a5a      	ldr	r2, [pc, #360]	; (801685c <__ieee754_powf+0x3d8>)
 80166f2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80166f6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80166fa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80166fe:	1049      	asrs	r1, r1, #1
 8016700:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016704:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016708:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801670c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8016710:	ee06 1a10 	vmov	s12, r1
 8016714:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8016718:	ee14 ca90 	vmov	ip, s9
 801671c:	ea02 0c0c 	and.w	ip, r2, ip
 8016720:	ee05 ca10 	vmov	s10, ip
 8016724:	eeb1 4a45 	vneg.f32	s8, s10
 8016728:	eee4 5a06 	vfma.f32	s11, s8, s12
 801672c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8016730:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016860 <__ieee754_powf+0x3dc>
 8016734:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016738:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801673c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8016740:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8016744:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8016748:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016864 <__ieee754_powf+0x3e0>
 801674c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016750:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016868 <__ieee754_powf+0x3e4>
 8016754:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016758:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801683c <__ieee754_powf+0x3b8>
 801675c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016760:	eddf 5a42 	vldr	s11, [pc, #264]	; 801686c <__ieee754_powf+0x3e8>
 8016764:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016768:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016870 <__ieee754_powf+0x3ec>
 801676c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8016770:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016774:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016778:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801677c:	eef0 7a65 	vmov.f32	s15, s11
 8016780:	eee3 6a87 	vfma.f32	s13, s7, s14
 8016784:	eee5 7a05 	vfma.f32	s15, s10, s10
 8016788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801678c:	ee17 1a90 	vmov	r1, s15
 8016790:	4011      	ands	r1, r2
 8016792:	ee07 1a90 	vmov	s15, r1
 8016796:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801679a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8016874 <__ieee754_powf+0x3f0>
 801679e:	eea4 7a05 	vfma.f32	s14, s8, s10
 80167a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80167a6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80167aa:	eea7 7a86 	vfma.f32	s14, s15, s12
 80167ae:	eeb0 6a47 	vmov.f32	s12, s14
 80167b2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80167b6:	ee16 1a10 	vmov	r1, s12
 80167ba:	4011      	ands	r1, r2
 80167bc:	ee06 1a90 	vmov	s13, r1
 80167c0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80167c4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016878 <__ieee754_powf+0x3f4>
 80167c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80167cc:	ee06 1a10 	vmov	s12, r1
 80167d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80167d4:	eddf 7a29 	vldr	s15, [pc, #164]	; 801687c <__ieee754_powf+0x3f8>
 80167d8:	4929      	ldr	r1, [pc, #164]	; (8016880 <__ieee754_powf+0x3fc>)
 80167da:	eea6 7a27 	vfma.f32	s14, s12, s15
 80167de:	4439      	add	r1, r7
 80167e0:	edd1 7a00 	vldr	s15, [r1]
 80167e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80167e8:	ee07 3a90 	vmov	s15, r3
 80167ec:	eef0 0a47 	vmov.f32	s1, s14
 80167f0:	4b24      	ldr	r3, [pc, #144]	; (8016884 <__ieee754_powf+0x400>)
 80167f2:	eee6 0a25 	vfma.f32	s1, s12, s11
 80167f6:	443b      	add	r3, r7
 80167f8:	ed93 5a00 	vldr	s10, [r3]
 80167fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016800:	ee70 0a85 	vadd.f32	s1, s1, s10
 8016804:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8016808:	ee17 3a90 	vmov	r3, s15
 801680c:	4013      	ands	r3, r2
 801680e:	ee07 3a90 	vmov	s15, r3
 8016812:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016816:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801681a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801681e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016822:	e70e      	b.n	8016642 <__ieee754_powf+0x1be>
 8016824:	2401      	movs	r4, #1
 8016826:	e75c      	b.n	80166e2 <__ieee754_powf+0x25e>
 8016828:	080181fb 	.word	0x080181fb
 801682c:	00000000 	.word	0x00000000
 8016830:	3f7ffff7 	.word	0x3f7ffff7
 8016834:	7149f2ca 	.word	0x7149f2ca
 8016838:	3f800007 	.word	0x3f800007
 801683c:	3eaaaaab 	.word	0x3eaaaaab
 8016840:	36eca570 	.word	0x36eca570
 8016844:	3fb8aa3b 	.word	0x3fb8aa3b
 8016848:	3fb8aa00 	.word	0x3fb8aa00
 801684c:	4b800000 	.word	0x4b800000
 8016850:	001cc471 	.word	0x001cc471
 8016854:	005db3d6 	.word	0x005db3d6
 8016858:	08018658 	.word	0x08018658
 801685c:	fffff000 	.word	0xfffff000
 8016860:	3e6c3255 	.word	0x3e6c3255
 8016864:	3e53f142 	.word	0x3e53f142
 8016868:	3e8ba305 	.word	0x3e8ba305
 801686c:	3edb6db7 	.word	0x3edb6db7
 8016870:	3f19999a 	.word	0x3f19999a
 8016874:	3f763800 	.word	0x3f763800
 8016878:	3f76384f 	.word	0x3f76384f
 801687c:	369dc3a0 	.word	0x369dc3a0
 8016880:	08018668 	.word	0x08018668
 8016884:	08018660 	.word	0x08018660
 8016888:	3338aa3c 	.word	0x3338aa3c
 801688c:	f040 8092 	bne.w	80169b4 <__ieee754_powf+0x530>
 8016890:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8016888 <__ieee754_powf+0x404>
 8016894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016898:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801689c:	eef4 6ac7 	vcmpe.f32	s13, s14
 80168a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168a4:	f73f aef6 	bgt.w	8016694 <__ieee754_powf+0x210>
 80168a8:	15db      	asrs	r3, r3, #23
 80168aa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80168ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80168b2:	4103      	asrs	r3, r0
 80168b4:	4423      	add	r3, r4
 80168b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80168ba:	4947      	ldr	r1, [pc, #284]	; (80169d8 <__ieee754_powf+0x554>)
 80168bc:	3a7f      	subs	r2, #127	; 0x7f
 80168be:	4111      	asrs	r1, r2
 80168c0:	ea23 0101 	bic.w	r1, r3, r1
 80168c4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80168c8:	ee07 1a10 	vmov	s14, r1
 80168cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80168d0:	f1c2 0217 	rsb	r2, r2, #23
 80168d4:	4110      	asrs	r0, r2
 80168d6:	2c00      	cmp	r4, #0
 80168d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80168dc:	bfb8      	it	lt
 80168de:	4240      	neglt	r0, r0
 80168e0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80168e4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80169dc <__ieee754_powf+0x558>
 80168e8:	ee17 3a10 	vmov	r3, s14
 80168ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80168f0:	f023 030f 	bic.w	r3, r3, #15
 80168f4:	ee07 3a10 	vmov	s14, r3
 80168f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80168fc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016900:	eddf 7a37 	vldr	s15, [pc, #220]	; 80169e0 <__ieee754_powf+0x55c>
 8016904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016908:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801690c:	eddf 6a35 	vldr	s13, [pc, #212]	; 80169e4 <__ieee754_powf+0x560>
 8016910:	eeb0 0a67 	vmov.f32	s0, s15
 8016914:	eea7 0a26 	vfma.f32	s0, s14, s13
 8016918:	eeb0 6a40 	vmov.f32	s12, s0
 801691c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016920:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016924:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016928:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80169e8 <__ieee754_powf+0x564>
 801692c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80169ec <__ieee754_powf+0x568>
 8016930:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016934:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80169f0 <__ieee754_powf+0x56c>
 8016938:	eee6 6a07 	vfma.f32	s13, s12, s14
 801693c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80169f4 <__ieee754_powf+0x570>
 8016940:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016944:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80169f8 <__ieee754_powf+0x574>
 8016948:	eee6 6a07 	vfma.f32	s13, s12, s14
 801694c:	eeb0 6a40 	vmov.f32	s12, s0
 8016950:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8016954:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016958:	eeb0 7a46 	vmov.f32	s14, s12
 801695c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016960:	ee20 6a06 	vmul.f32	s12, s0, s12
 8016964:	eee0 7a27 	vfma.f32	s15, s0, s15
 8016968:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801696c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016970:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016974:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016978:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801697c:	ee10 3a10 	vmov	r3, s0
 8016980:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8016984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016988:	da1a      	bge.n	80169c0 <__ieee754_powf+0x53c>
 801698a:	f001 f829 	bl	80179e0 <scalbnf>
 801698e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016992:	e5c9      	b.n	8016528 <__ieee754_powf+0xa4>
 8016994:	4a19      	ldr	r2, [pc, #100]	; (80169fc <__ieee754_powf+0x578>)
 8016996:	4293      	cmp	r3, r2
 8016998:	dd02      	ble.n	80169a0 <__ieee754_powf+0x51c>
 801699a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016a00 <__ieee754_powf+0x57c>
 801699e:	e67b      	b.n	8016698 <__ieee754_powf+0x214>
 80169a0:	d108      	bne.n	80169b4 <__ieee754_powf+0x530>
 80169a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80169a6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80169aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ae:	f6ff af7b 	blt.w	80168a8 <__ieee754_powf+0x424>
 80169b2:	e7f2      	b.n	801699a <__ieee754_powf+0x516>
 80169b4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80169b8:	f73f af76 	bgt.w	80168a8 <__ieee754_powf+0x424>
 80169bc:	2000      	movs	r0, #0
 80169be:	e78f      	b.n	80168e0 <__ieee754_powf+0x45c>
 80169c0:	ee00 3a10 	vmov	s0, r3
 80169c4:	e7e3      	b.n	801698e <__ieee754_powf+0x50a>
 80169c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80169ca:	e5ad      	b.n	8016528 <__ieee754_powf+0xa4>
 80169cc:	eeb0 0a68 	vmov.f32	s0, s17
 80169d0:	e5aa      	b.n	8016528 <__ieee754_powf+0xa4>
 80169d2:	eeb0 0a48 	vmov.f32	s0, s16
 80169d6:	e5a7      	b.n	8016528 <__ieee754_powf+0xa4>
 80169d8:	007fffff 	.word	0x007fffff
 80169dc:	3f317218 	.word	0x3f317218
 80169e0:	35bfbe8c 	.word	0x35bfbe8c
 80169e4:	3f317200 	.word	0x3f317200
 80169e8:	3331bb4c 	.word	0x3331bb4c
 80169ec:	b5ddea0e 	.word	0xb5ddea0e
 80169f0:	388ab355 	.word	0x388ab355
 80169f4:	bb360b61 	.word	0xbb360b61
 80169f8:	3e2aaaab 	.word	0x3e2aaaab
 80169fc:	43160000 	.word	0x43160000
 8016a00:	0da24260 	.word	0x0da24260

08016a04 <__ieee754_sqrtf>:
 8016a04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016a08:	4770      	bx	lr
 8016a0a:	0000      	movs	r0, r0
 8016a0c:	0000      	movs	r0, r0
	...

08016a10 <__kernel_cos>:
 8016a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a14:	ec59 8b10 	vmov	r8, r9, d0
 8016a18:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8016a1c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8016a20:	ed2d 8b02 	vpush	{d8}
 8016a24:	eeb0 8a41 	vmov.f32	s16, s2
 8016a28:	eef0 8a61 	vmov.f32	s17, s3
 8016a2c:	da07      	bge.n	8016a3e <__kernel_cos+0x2e>
 8016a2e:	ee10 0a10 	vmov	r0, s0
 8016a32:	4649      	mov	r1, r9
 8016a34:	f7ea f8b0 	bl	8000b98 <__aeabi_d2iz>
 8016a38:	2800      	cmp	r0, #0
 8016a3a:	f000 8089 	beq.w	8016b50 <__kernel_cos+0x140>
 8016a3e:	4642      	mov	r2, r8
 8016a40:	464b      	mov	r3, r9
 8016a42:	4640      	mov	r0, r8
 8016a44:	4649      	mov	r1, r9
 8016a46:	f7e9 fdf7 	bl	8000638 <__aeabi_dmul>
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	4b4e      	ldr	r3, [pc, #312]	; (8016b88 <__kernel_cos+0x178>)
 8016a4e:	4604      	mov	r4, r0
 8016a50:	460d      	mov	r5, r1
 8016a52:	f7e9 fdf1 	bl	8000638 <__aeabi_dmul>
 8016a56:	a340      	add	r3, pc, #256	; (adr r3, 8016b58 <__kernel_cos+0x148>)
 8016a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a5c:	4682      	mov	sl, r0
 8016a5e:	468b      	mov	fp, r1
 8016a60:	4620      	mov	r0, r4
 8016a62:	4629      	mov	r1, r5
 8016a64:	f7e9 fde8 	bl	8000638 <__aeabi_dmul>
 8016a68:	a33d      	add	r3, pc, #244	; (adr r3, 8016b60 <__kernel_cos+0x150>)
 8016a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6e:	f7e9 fc2d 	bl	80002cc <__adddf3>
 8016a72:	4622      	mov	r2, r4
 8016a74:	462b      	mov	r3, r5
 8016a76:	f7e9 fddf 	bl	8000638 <__aeabi_dmul>
 8016a7a:	a33b      	add	r3, pc, #236	; (adr r3, 8016b68 <__kernel_cos+0x158>)
 8016a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a80:	f7e9 fc22 	bl	80002c8 <__aeabi_dsub>
 8016a84:	4622      	mov	r2, r4
 8016a86:	462b      	mov	r3, r5
 8016a88:	f7e9 fdd6 	bl	8000638 <__aeabi_dmul>
 8016a8c:	a338      	add	r3, pc, #224	; (adr r3, 8016b70 <__kernel_cos+0x160>)
 8016a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a92:	f7e9 fc1b 	bl	80002cc <__adddf3>
 8016a96:	4622      	mov	r2, r4
 8016a98:	462b      	mov	r3, r5
 8016a9a:	f7e9 fdcd 	bl	8000638 <__aeabi_dmul>
 8016a9e:	a336      	add	r3, pc, #216	; (adr r3, 8016b78 <__kernel_cos+0x168>)
 8016aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa4:	f7e9 fc10 	bl	80002c8 <__aeabi_dsub>
 8016aa8:	4622      	mov	r2, r4
 8016aaa:	462b      	mov	r3, r5
 8016aac:	f7e9 fdc4 	bl	8000638 <__aeabi_dmul>
 8016ab0:	a333      	add	r3, pc, #204	; (adr r3, 8016b80 <__kernel_cos+0x170>)
 8016ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab6:	f7e9 fc09 	bl	80002cc <__adddf3>
 8016aba:	4622      	mov	r2, r4
 8016abc:	462b      	mov	r3, r5
 8016abe:	f7e9 fdbb 	bl	8000638 <__aeabi_dmul>
 8016ac2:	4622      	mov	r2, r4
 8016ac4:	462b      	mov	r3, r5
 8016ac6:	f7e9 fdb7 	bl	8000638 <__aeabi_dmul>
 8016aca:	ec53 2b18 	vmov	r2, r3, d8
 8016ace:	4604      	mov	r4, r0
 8016ad0:	460d      	mov	r5, r1
 8016ad2:	4640      	mov	r0, r8
 8016ad4:	4649      	mov	r1, r9
 8016ad6:	f7e9 fdaf 	bl	8000638 <__aeabi_dmul>
 8016ada:	460b      	mov	r3, r1
 8016adc:	4602      	mov	r2, r0
 8016ade:	4629      	mov	r1, r5
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f7e9 fbf1 	bl	80002c8 <__aeabi_dsub>
 8016ae6:	4b29      	ldr	r3, [pc, #164]	; (8016b8c <__kernel_cos+0x17c>)
 8016ae8:	429e      	cmp	r6, r3
 8016aea:	4680      	mov	r8, r0
 8016aec:	4689      	mov	r9, r1
 8016aee:	dc11      	bgt.n	8016b14 <__kernel_cos+0x104>
 8016af0:	4602      	mov	r2, r0
 8016af2:	460b      	mov	r3, r1
 8016af4:	4650      	mov	r0, sl
 8016af6:	4659      	mov	r1, fp
 8016af8:	f7e9 fbe6 	bl	80002c8 <__aeabi_dsub>
 8016afc:	460b      	mov	r3, r1
 8016afe:	4924      	ldr	r1, [pc, #144]	; (8016b90 <__kernel_cos+0x180>)
 8016b00:	4602      	mov	r2, r0
 8016b02:	2000      	movs	r0, #0
 8016b04:	f7e9 fbe0 	bl	80002c8 <__aeabi_dsub>
 8016b08:	ecbd 8b02 	vpop	{d8}
 8016b0c:	ec41 0b10 	vmov	d0, r0, r1
 8016b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b14:	4b1f      	ldr	r3, [pc, #124]	; (8016b94 <__kernel_cos+0x184>)
 8016b16:	491e      	ldr	r1, [pc, #120]	; (8016b90 <__kernel_cos+0x180>)
 8016b18:	429e      	cmp	r6, r3
 8016b1a:	bfcc      	ite	gt
 8016b1c:	4d1e      	ldrgt	r5, [pc, #120]	; (8016b98 <__kernel_cos+0x188>)
 8016b1e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8016b22:	2400      	movs	r4, #0
 8016b24:	4622      	mov	r2, r4
 8016b26:	462b      	mov	r3, r5
 8016b28:	2000      	movs	r0, #0
 8016b2a:	f7e9 fbcd 	bl	80002c8 <__aeabi_dsub>
 8016b2e:	4622      	mov	r2, r4
 8016b30:	4606      	mov	r6, r0
 8016b32:	460f      	mov	r7, r1
 8016b34:	462b      	mov	r3, r5
 8016b36:	4650      	mov	r0, sl
 8016b38:	4659      	mov	r1, fp
 8016b3a:	f7e9 fbc5 	bl	80002c8 <__aeabi_dsub>
 8016b3e:	4642      	mov	r2, r8
 8016b40:	464b      	mov	r3, r9
 8016b42:	f7e9 fbc1 	bl	80002c8 <__aeabi_dsub>
 8016b46:	4602      	mov	r2, r0
 8016b48:	460b      	mov	r3, r1
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	4639      	mov	r1, r7
 8016b4e:	e7d9      	b.n	8016b04 <__kernel_cos+0xf4>
 8016b50:	2000      	movs	r0, #0
 8016b52:	490f      	ldr	r1, [pc, #60]	; (8016b90 <__kernel_cos+0x180>)
 8016b54:	e7d8      	b.n	8016b08 <__kernel_cos+0xf8>
 8016b56:	bf00      	nop
 8016b58:	be8838d4 	.word	0xbe8838d4
 8016b5c:	bda8fae9 	.word	0xbda8fae9
 8016b60:	bdb4b1c4 	.word	0xbdb4b1c4
 8016b64:	3e21ee9e 	.word	0x3e21ee9e
 8016b68:	809c52ad 	.word	0x809c52ad
 8016b6c:	3e927e4f 	.word	0x3e927e4f
 8016b70:	19cb1590 	.word	0x19cb1590
 8016b74:	3efa01a0 	.word	0x3efa01a0
 8016b78:	16c15177 	.word	0x16c15177
 8016b7c:	3f56c16c 	.word	0x3f56c16c
 8016b80:	5555554c 	.word	0x5555554c
 8016b84:	3fa55555 	.word	0x3fa55555
 8016b88:	3fe00000 	.word	0x3fe00000
 8016b8c:	3fd33332 	.word	0x3fd33332
 8016b90:	3ff00000 	.word	0x3ff00000
 8016b94:	3fe90000 	.word	0x3fe90000
 8016b98:	3fd20000 	.word	0x3fd20000
 8016b9c:	00000000 	.word	0x00000000

08016ba0 <__kernel_rem_pio2>:
 8016ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba4:	ed2d 8b02 	vpush	{d8}
 8016ba8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8016bac:	1ed4      	subs	r4, r2, #3
 8016bae:	9308      	str	r3, [sp, #32]
 8016bb0:	9101      	str	r1, [sp, #4]
 8016bb2:	4bc5      	ldr	r3, [pc, #788]	; (8016ec8 <__kernel_rem_pio2+0x328>)
 8016bb4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8016bb6:	9009      	str	r0, [sp, #36]	; 0x24
 8016bb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016bbc:	9304      	str	r3, [sp, #16]
 8016bbe:	9b08      	ldr	r3, [sp, #32]
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	9307      	str	r3, [sp, #28]
 8016bc4:	2318      	movs	r3, #24
 8016bc6:	fb94 f4f3 	sdiv	r4, r4, r3
 8016bca:	f06f 0317 	mvn.w	r3, #23
 8016bce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016bd2:	fb04 3303 	mla	r3, r4, r3, r3
 8016bd6:	eb03 0a02 	add.w	sl, r3, r2
 8016bda:	9b04      	ldr	r3, [sp, #16]
 8016bdc:	9a07      	ldr	r2, [sp, #28]
 8016bde:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8016eb8 <__kernel_rem_pio2+0x318>
 8016be2:	eb03 0802 	add.w	r8, r3, r2
 8016be6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016be8:	1aa7      	subs	r7, r4, r2
 8016bea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016bee:	ae22      	add	r6, sp, #136	; 0x88
 8016bf0:	2500      	movs	r5, #0
 8016bf2:	4545      	cmp	r5, r8
 8016bf4:	dd13      	ble.n	8016c1e <__kernel_rem_pio2+0x7e>
 8016bf6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8016eb8 <__kernel_rem_pio2+0x318>
 8016bfa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8016bfe:	2600      	movs	r6, #0
 8016c00:	9b04      	ldr	r3, [sp, #16]
 8016c02:	429e      	cmp	r6, r3
 8016c04:	dc32      	bgt.n	8016c6c <__kernel_rem_pio2+0xcc>
 8016c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c08:	9302      	str	r3, [sp, #8]
 8016c0a:	9b08      	ldr	r3, [sp, #32]
 8016c0c:	199d      	adds	r5, r3, r6
 8016c0e:	ab22      	add	r3, sp, #136	; 0x88
 8016c10:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016c14:	9306      	str	r3, [sp, #24]
 8016c16:	ec59 8b18 	vmov	r8, r9, d8
 8016c1a:	2700      	movs	r7, #0
 8016c1c:	e01f      	b.n	8016c5e <__kernel_rem_pio2+0xbe>
 8016c1e:	42ef      	cmn	r7, r5
 8016c20:	d407      	bmi.n	8016c32 <__kernel_rem_pio2+0x92>
 8016c22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016c26:	f7e9 fc9d 	bl	8000564 <__aeabi_i2d>
 8016c2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016c2e:	3501      	adds	r5, #1
 8016c30:	e7df      	b.n	8016bf2 <__kernel_rem_pio2+0x52>
 8016c32:	ec51 0b18 	vmov	r0, r1, d8
 8016c36:	e7f8      	b.n	8016c2a <__kernel_rem_pio2+0x8a>
 8016c38:	9906      	ldr	r1, [sp, #24]
 8016c3a:	9d02      	ldr	r5, [sp, #8]
 8016c3c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8016c40:	9106      	str	r1, [sp, #24]
 8016c42:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8016c46:	9502      	str	r5, [sp, #8]
 8016c48:	f7e9 fcf6 	bl	8000638 <__aeabi_dmul>
 8016c4c:	4602      	mov	r2, r0
 8016c4e:	460b      	mov	r3, r1
 8016c50:	4640      	mov	r0, r8
 8016c52:	4649      	mov	r1, r9
 8016c54:	f7e9 fb3a 	bl	80002cc <__adddf3>
 8016c58:	3701      	adds	r7, #1
 8016c5a:	4680      	mov	r8, r0
 8016c5c:	4689      	mov	r9, r1
 8016c5e:	9b07      	ldr	r3, [sp, #28]
 8016c60:	429f      	cmp	r7, r3
 8016c62:	dde9      	ble.n	8016c38 <__kernel_rem_pio2+0x98>
 8016c64:	e8eb 8902 	strd	r8, r9, [fp], #8
 8016c68:	3601      	adds	r6, #1
 8016c6a:	e7c9      	b.n	8016c00 <__kernel_rem_pio2+0x60>
 8016c6c:	9b04      	ldr	r3, [sp, #16]
 8016c6e:	aa0e      	add	r2, sp, #56	; 0x38
 8016c70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016c74:	930c      	str	r3, [sp, #48]	; 0x30
 8016c76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016c78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016c7c:	9c04      	ldr	r4, [sp, #16]
 8016c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c80:	ab9a      	add	r3, sp, #616	; 0x268
 8016c82:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8016c86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016c8e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8016c92:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016c96:	ab9a      	add	r3, sp, #616	; 0x268
 8016c98:	445b      	add	r3, fp
 8016c9a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8016c9e:	2500      	movs	r5, #0
 8016ca0:	1b63      	subs	r3, r4, r5
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	dc78      	bgt.n	8016d98 <__kernel_rem_pio2+0x1f8>
 8016ca6:	4650      	mov	r0, sl
 8016ca8:	ec49 8b10 	vmov	d0, r8, r9
 8016cac:	f000 fdb0 	bl	8017810 <scalbn>
 8016cb0:	ec57 6b10 	vmov	r6, r7, d0
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016cba:	ee10 0a10 	vmov	r0, s0
 8016cbe:	4639      	mov	r1, r7
 8016cc0:	f7e9 fcba 	bl	8000638 <__aeabi_dmul>
 8016cc4:	ec41 0b10 	vmov	d0, r0, r1
 8016cc8:	f000 fd12 	bl	80176f0 <floor>
 8016ccc:	2200      	movs	r2, #0
 8016cce:	ec51 0b10 	vmov	r0, r1, d0
 8016cd2:	4b7e      	ldr	r3, [pc, #504]	; (8016ecc <__kernel_rem_pio2+0x32c>)
 8016cd4:	f7e9 fcb0 	bl	8000638 <__aeabi_dmul>
 8016cd8:	4602      	mov	r2, r0
 8016cda:	460b      	mov	r3, r1
 8016cdc:	4630      	mov	r0, r6
 8016cde:	4639      	mov	r1, r7
 8016ce0:	f7e9 faf2 	bl	80002c8 <__aeabi_dsub>
 8016ce4:	460f      	mov	r7, r1
 8016ce6:	4606      	mov	r6, r0
 8016ce8:	f7e9 ff56 	bl	8000b98 <__aeabi_d2iz>
 8016cec:	9006      	str	r0, [sp, #24]
 8016cee:	f7e9 fc39 	bl	8000564 <__aeabi_i2d>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	4639      	mov	r1, r7
 8016cfa:	f7e9 fae5 	bl	80002c8 <__aeabi_dsub>
 8016cfe:	f1ba 0f00 	cmp.w	sl, #0
 8016d02:	4606      	mov	r6, r0
 8016d04:	460f      	mov	r7, r1
 8016d06:	dd6c      	ble.n	8016de2 <__kernel_rem_pio2+0x242>
 8016d08:	1e62      	subs	r2, r4, #1
 8016d0a:	ab0e      	add	r3, sp, #56	; 0x38
 8016d0c:	f1ca 0118 	rsb	r1, sl, #24
 8016d10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016d14:	9d06      	ldr	r5, [sp, #24]
 8016d16:	fa40 f301 	asr.w	r3, r0, r1
 8016d1a:	441d      	add	r5, r3
 8016d1c:	408b      	lsls	r3, r1
 8016d1e:	1ac0      	subs	r0, r0, r3
 8016d20:	ab0e      	add	r3, sp, #56	; 0x38
 8016d22:	9506      	str	r5, [sp, #24]
 8016d24:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016d28:	f1ca 0317 	rsb	r3, sl, #23
 8016d2c:	fa40 f303 	asr.w	r3, r0, r3
 8016d30:	9302      	str	r3, [sp, #8]
 8016d32:	9b02      	ldr	r3, [sp, #8]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	dd62      	ble.n	8016dfe <__kernel_rem_pio2+0x25e>
 8016d38:	9b06      	ldr	r3, [sp, #24]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	9306      	str	r3, [sp, #24]
 8016d40:	4615      	mov	r5, r2
 8016d42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016d46:	4294      	cmp	r4, r2
 8016d48:	f300 8095 	bgt.w	8016e76 <__kernel_rem_pio2+0x2d6>
 8016d4c:	f1ba 0f00 	cmp.w	sl, #0
 8016d50:	dd07      	ble.n	8016d62 <__kernel_rem_pio2+0x1c2>
 8016d52:	f1ba 0f01 	cmp.w	sl, #1
 8016d56:	f000 80a2 	beq.w	8016e9e <__kernel_rem_pio2+0x2fe>
 8016d5a:	f1ba 0f02 	cmp.w	sl, #2
 8016d5e:	f000 80c1 	beq.w	8016ee4 <__kernel_rem_pio2+0x344>
 8016d62:	9b02      	ldr	r3, [sp, #8]
 8016d64:	2b02      	cmp	r3, #2
 8016d66:	d14a      	bne.n	8016dfe <__kernel_rem_pio2+0x25e>
 8016d68:	4632      	mov	r2, r6
 8016d6a:	463b      	mov	r3, r7
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	4958      	ldr	r1, [pc, #352]	; (8016ed0 <__kernel_rem_pio2+0x330>)
 8016d70:	f7e9 faaa 	bl	80002c8 <__aeabi_dsub>
 8016d74:	4606      	mov	r6, r0
 8016d76:	460f      	mov	r7, r1
 8016d78:	2d00      	cmp	r5, #0
 8016d7a:	d040      	beq.n	8016dfe <__kernel_rem_pio2+0x25e>
 8016d7c:	4650      	mov	r0, sl
 8016d7e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8016ec0 <__kernel_rem_pio2+0x320>
 8016d82:	f000 fd45 	bl	8017810 <scalbn>
 8016d86:	4630      	mov	r0, r6
 8016d88:	4639      	mov	r1, r7
 8016d8a:	ec53 2b10 	vmov	r2, r3, d0
 8016d8e:	f7e9 fa9b 	bl	80002c8 <__aeabi_dsub>
 8016d92:	4606      	mov	r6, r0
 8016d94:	460f      	mov	r7, r1
 8016d96:	e032      	b.n	8016dfe <__kernel_rem_pio2+0x25e>
 8016d98:	2200      	movs	r2, #0
 8016d9a:	4b4e      	ldr	r3, [pc, #312]	; (8016ed4 <__kernel_rem_pio2+0x334>)
 8016d9c:	4640      	mov	r0, r8
 8016d9e:	4649      	mov	r1, r9
 8016da0:	f7e9 fc4a 	bl	8000638 <__aeabi_dmul>
 8016da4:	f7e9 fef8 	bl	8000b98 <__aeabi_d2iz>
 8016da8:	f7e9 fbdc 	bl	8000564 <__aeabi_i2d>
 8016dac:	2200      	movs	r2, #0
 8016dae:	4b4a      	ldr	r3, [pc, #296]	; (8016ed8 <__kernel_rem_pio2+0x338>)
 8016db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016db4:	f7e9 fc40 	bl	8000638 <__aeabi_dmul>
 8016db8:	4602      	mov	r2, r0
 8016dba:	460b      	mov	r3, r1
 8016dbc:	4640      	mov	r0, r8
 8016dbe:	4649      	mov	r1, r9
 8016dc0:	f7e9 fa82 	bl	80002c8 <__aeabi_dsub>
 8016dc4:	f7e9 fee8 	bl	8000b98 <__aeabi_d2iz>
 8016dc8:	ab0e      	add	r3, sp, #56	; 0x38
 8016dca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8016dce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8016dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016dd6:	f7e9 fa79 	bl	80002cc <__adddf3>
 8016dda:	3501      	adds	r5, #1
 8016ddc:	4680      	mov	r8, r0
 8016dde:	4689      	mov	r9, r1
 8016de0:	e75e      	b.n	8016ca0 <__kernel_rem_pio2+0x100>
 8016de2:	d105      	bne.n	8016df0 <__kernel_rem_pio2+0x250>
 8016de4:	1e63      	subs	r3, r4, #1
 8016de6:	aa0e      	add	r2, sp, #56	; 0x38
 8016de8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016dec:	15c3      	asrs	r3, r0, #23
 8016dee:	e79f      	b.n	8016d30 <__kernel_rem_pio2+0x190>
 8016df0:	2200      	movs	r2, #0
 8016df2:	4b3a      	ldr	r3, [pc, #232]	; (8016edc <__kernel_rem_pio2+0x33c>)
 8016df4:	f7e9 fea6 	bl	8000b44 <__aeabi_dcmpge>
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	d139      	bne.n	8016e70 <__kernel_rem_pio2+0x2d0>
 8016dfc:	9002      	str	r0, [sp, #8]
 8016dfe:	2200      	movs	r2, #0
 8016e00:	2300      	movs	r3, #0
 8016e02:	4630      	mov	r0, r6
 8016e04:	4639      	mov	r1, r7
 8016e06:	f7e9 fe7f 	bl	8000b08 <__aeabi_dcmpeq>
 8016e0a:	2800      	cmp	r0, #0
 8016e0c:	f000 80c7 	beq.w	8016f9e <__kernel_rem_pio2+0x3fe>
 8016e10:	1e65      	subs	r5, r4, #1
 8016e12:	462b      	mov	r3, r5
 8016e14:	2200      	movs	r2, #0
 8016e16:	9904      	ldr	r1, [sp, #16]
 8016e18:	428b      	cmp	r3, r1
 8016e1a:	da6a      	bge.n	8016ef2 <__kernel_rem_pio2+0x352>
 8016e1c:	2a00      	cmp	r2, #0
 8016e1e:	f000 8088 	beq.w	8016f32 <__kernel_rem_pio2+0x392>
 8016e22:	ab0e      	add	r3, sp, #56	; 0x38
 8016e24:	f1aa 0a18 	sub.w	sl, sl, #24
 8016e28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	f000 80b4 	beq.w	8016f9a <__kernel_rem_pio2+0x3fa>
 8016e32:	4650      	mov	r0, sl
 8016e34:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8016ec0 <__kernel_rem_pio2+0x320>
 8016e38:	f000 fcea 	bl	8017810 <scalbn>
 8016e3c:	00ec      	lsls	r4, r5, #3
 8016e3e:	ab72      	add	r3, sp, #456	; 0x1c8
 8016e40:	191e      	adds	r6, r3, r4
 8016e42:	ec59 8b10 	vmov	r8, r9, d0
 8016e46:	f106 0a08 	add.w	sl, r6, #8
 8016e4a:	462f      	mov	r7, r5
 8016e4c:	2f00      	cmp	r7, #0
 8016e4e:	f280 80df 	bge.w	8017010 <__kernel_rem_pio2+0x470>
 8016e52:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8016eb8 <__kernel_rem_pio2+0x318>
 8016e56:	f04f 0a00 	mov.w	sl, #0
 8016e5a:	eba5 030a 	sub.w	r3, r5, sl
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f2c0 810a 	blt.w	8017078 <__kernel_rem_pio2+0x4d8>
 8016e64:	f8df b078 	ldr.w	fp, [pc, #120]	; 8016ee0 <__kernel_rem_pio2+0x340>
 8016e68:	ec59 8b18 	vmov	r8, r9, d8
 8016e6c:	2700      	movs	r7, #0
 8016e6e:	e0f5      	b.n	801705c <__kernel_rem_pio2+0x4bc>
 8016e70:	2302      	movs	r3, #2
 8016e72:	9302      	str	r3, [sp, #8]
 8016e74:	e760      	b.n	8016d38 <__kernel_rem_pio2+0x198>
 8016e76:	ab0e      	add	r3, sp, #56	; 0x38
 8016e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e7c:	b94d      	cbnz	r5, 8016e92 <__kernel_rem_pio2+0x2f2>
 8016e7e:	b12b      	cbz	r3, 8016e8c <__kernel_rem_pio2+0x2ec>
 8016e80:	a80e      	add	r0, sp, #56	; 0x38
 8016e82:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016e86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	3201      	adds	r2, #1
 8016e8e:	461d      	mov	r5, r3
 8016e90:	e759      	b.n	8016d46 <__kernel_rem_pio2+0x1a6>
 8016e92:	a80e      	add	r0, sp, #56	; 0x38
 8016e94:	1acb      	subs	r3, r1, r3
 8016e96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016e9a:	462b      	mov	r3, r5
 8016e9c:	e7f6      	b.n	8016e8c <__kernel_rem_pio2+0x2ec>
 8016e9e:	1e62      	subs	r2, r4, #1
 8016ea0:	ab0e      	add	r3, sp, #56	; 0x38
 8016ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ea6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016eaa:	a90e      	add	r1, sp, #56	; 0x38
 8016eac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016eb0:	e757      	b.n	8016d62 <__kernel_rem_pio2+0x1c2>
 8016eb2:	bf00      	nop
 8016eb4:	f3af 8000 	nop.w
	...
 8016ec4:	3ff00000 	.word	0x3ff00000
 8016ec8:	080186b0 	.word	0x080186b0
 8016ecc:	40200000 	.word	0x40200000
 8016ed0:	3ff00000 	.word	0x3ff00000
 8016ed4:	3e700000 	.word	0x3e700000
 8016ed8:	41700000 	.word	0x41700000
 8016edc:	3fe00000 	.word	0x3fe00000
 8016ee0:	08018670 	.word	0x08018670
 8016ee4:	1e62      	subs	r2, r4, #1
 8016ee6:	ab0e      	add	r3, sp, #56	; 0x38
 8016ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016eec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016ef0:	e7db      	b.n	8016eaa <__kernel_rem_pio2+0x30a>
 8016ef2:	a90e      	add	r1, sp, #56	; 0x38
 8016ef4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	430a      	orrs	r2, r1
 8016efc:	e78b      	b.n	8016e16 <__kernel_rem_pio2+0x276>
 8016efe:	3301      	adds	r3, #1
 8016f00:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016f04:	2900      	cmp	r1, #0
 8016f06:	d0fa      	beq.n	8016efe <__kernel_rem_pio2+0x35e>
 8016f08:	9a08      	ldr	r2, [sp, #32]
 8016f0a:	4422      	add	r2, r4
 8016f0c:	00d2      	lsls	r2, r2, #3
 8016f0e:	a922      	add	r1, sp, #136	; 0x88
 8016f10:	18e3      	adds	r3, r4, r3
 8016f12:	9206      	str	r2, [sp, #24]
 8016f14:	440a      	add	r2, r1
 8016f16:	9302      	str	r3, [sp, #8]
 8016f18:	f10b 0108 	add.w	r1, fp, #8
 8016f1c:	f102 0308 	add.w	r3, r2, #8
 8016f20:	1c66      	adds	r6, r4, #1
 8016f22:	910a      	str	r1, [sp, #40]	; 0x28
 8016f24:	2500      	movs	r5, #0
 8016f26:	930d      	str	r3, [sp, #52]	; 0x34
 8016f28:	9b02      	ldr	r3, [sp, #8]
 8016f2a:	42b3      	cmp	r3, r6
 8016f2c:	da04      	bge.n	8016f38 <__kernel_rem_pio2+0x398>
 8016f2e:	461c      	mov	r4, r3
 8016f30:	e6a6      	b.n	8016c80 <__kernel_rem_pio2+0xe0>
 8016f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f34:	2301      	movs	r3, #1
 8016f36:	e7e3      	b.n	8016f00 <__kernel_rem_pio2+0x360>
 8016f38:	9b06      	ldr	r3, [sp, #24]
 8016f3a:	18ef      	adds	r7, r5, r3
 8016f3c:	ab22      	add	r3, sp, #136	; 0x88
 8016f3e:	441f      	add	r7, r3
 8016f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016f46:	f7e9 fb0d 	bl	8000564 <__aeabi_i2d>
 8016f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f4c:	461c      	mov	r4, r3
 8016f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f50:	e9c7 0100 	strd	r0, r1, [r7]
 8016f54:	eb03 0b05 	add.w	fp, r3, r5
 8016f58:	2700      	movs	r7, #0
 8016f5a:	f04f 0800 	mov.w	r8, #0
 8016f5e:	f04f 0900 	mov.w	r9, #0
 8016f62:	9b07      	ldr	r3, [sp, #28]
 8016f64:	429f      	cmp	r7, r3
 8016f66:	dd08      	ble.n	8016f7a <__kernel_rem_pio2+0x3da>
 8016f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f6a:	aa72      	add	r2, sp, #456	; 0x1c8
 8016f6c:	18eb      	adds	r3, r5, r3
 8016f6e:	4413      	add	r3, r2
 8016f70:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8016f74:	3601      	adds	r6, #1
 8016f76:	3508      	adds	r5, #8
 8016f78:	e7d6      	b.n	8016f28 <__kernel_rem_pio2+0x388>
 8016f7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016f7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016f82:	f7e9 fb59 	bl	8000638 <__aeabi_dmul>
 8016f86:	4602      	mov	r2, r0
 8016f88:	460b      	mov	r3, r1
 8016f8a:	4640      	mov	r0, r8
 8016f8c:	4649      	mov	r1, r9
 8016f8e:	f7e9 f99d 	bl	80002cc <__adddf3>
 8016f92:	3701      	adds	r7, #1
 8016f94:	4680      	mov	r8, r0
 8016f96:	4689      	mov	r9, r1
 8016f98:	e7e3      	b.n	8016f62 <__kernel_rem_pio2+0x3c2>
 8016f9a:	3d01      	subs	r5, #1
 8016f9c:	e741      	b.n	8016e22 <__kernel_rem_pio2+0x282>
 8016f9e:	f1ca 0000 	rsb	r0, sl, #0
 8016fa2:	ec47 6b10 	vmov	d0, r6, r7
 8016fa6:	f000 fc33 	bl	8017810 <scalbn>
 8016faa:	ec57 6b10 	vmov	r6, r7, d0
 8016fae:	2200      	movs	r2, #0
 8016fb0:	4b99      	ldr	r3, [pc, #612]	; (8017218 <__kernel_rem_pio2+0x678>)
 8016fb2:	ee10 0a10 	vmov	r0, s0
 8016fb6:	4639      	mov	r1, r7
 8016fb8:	f7e9 fdc4 	bl	8000b44 <__aeabi_dcmpge>
 8016fbc:	b1f8      	cbz	r0, 8016ffe <__kernel_rem_pio2+0x45e>
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	4b96      	ldr	r3, [pc, #600]	; (801721c <__kernel_rem_pio2+0x67c>)
 8016fc2:	4630      	mov	r0, r6
 8016fc4:	4639      	mov	r1, r7
 8016fc6:	f7e9 fb37 	bl	8000638 <__aeabi_dmul>
 8016fca:	f7e9 fde5 	bl	8000b98 <__aeabi_d2iz>
 8016fce:	4680      	mov	r8, r0
 8016fd0:	f7e9 fac8 	bl	8000564 <__aeabi_i2d>
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	4b90      	ldr	r3, [pc, #576]	; (8017218 <__kernel_rem_pio2+0x678>)
 8016fd8:	f7e9 fb2e 	bl	8000638 <__aeabi_dmul>
 8016fdc:	460b      	mov	r3, r1
 8016fde:	4602      	mov	r2, r0
 8016fe0:	4639      	mov	r1, r7
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	f7e9 f970 	bl	80002c8 <__aeabi_dsub>
 8016fe8:	f7e9 fdd6 	bl	8000b98 <__aeabi_d2iz>
 8016fec:	1c65      	adds	r5, r4, #1
 8016fee:	ab0e      	add	r3, sp, #56	; 0x38
 8016ff0:	f10a 0a18 	add.w	sl, sl, #24
 8016ff4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016ff8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016ffc:	e719      	b.n	8016e32 <__kernel_rem_pio2+0x292>
 8016ffe:	4630      	mov	r0, r6
 8017000:	4639      	mov	r1, r7
 8017002:	f7e9 fdc9 	bl	8000b98 <__aeabi_d2iz>
 8017006:	ab0e      	add	r3, sp, #56	; 0x38
 8017008:	4625      	mov	r5, r4
 801700a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801700e:	e710      	b.n	8016e32 <__kernel_rem_pio2+0x292>
 8017010:	ab0e      	add	r3, sp, #56	; 0x38
 8017012:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8017016:	f7e9 faa5 	bl	8000564 <__aeabi_i2d>
 801701a:	4642      	mov	r2, r8
 801701c:	464b      	mov	r3, r9
 801701e:	f7e9 fb0b 	bl	8000638 <__aeabi_dmul>
 8017022:	2200      	movs	r2, #0
 8017024:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8017028:	4b7c      	ldr	r3, [pc, #496]	; (801721c <__kernel_rem_pio2+0x67c>)
 801702a:	4640      	mov	r0, r8
 801702c:	4649      	mov	r1, r9
 801702e:	f7e9 fb03 	bl	8000638 <__aeabi_dmul>
 8017032:	3f01      	subs	r7, #1
 8017034:	4680      	mov	r8, r0
 8017036:	4689      	mov	r9, r1
 8017038:	e708      	b.n	8016e4c <__kernel_rem_pio2+0x2ac>
 801703a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017042:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8017046:	f7e9 faf7 	bl	8000638 <__aeabi_dmul>
 801704a:	4602      	mov	r2, r0
 801704c:	460b      	mov	r3, r1
 801704e:	4640      	mov	r0, r8
 8017050:	4649      	mov	r1, r9
 8017052:	f7e9 f93b 	bl	80002cc <__adddf3>
 8017056:	3701      	adds	r7, #1
 8017058:	4680      	mov	r8, r0
 801705a:	4689      	mov	r9, r1
 801705c:	9b04      	ldr	r3, [sp, #16]
 801705e:	429f      	cmp	r7, r3
 8017060:	dc01      	bgt.n	8017066 <__kernel_rem_pio2+0x4c6>
 8017062:	45ba      	cmp	sl, r7
 8017064:	dae9      	bge.n	801703a <__kernel_rem_pio2+0x49a>
 8017066:	ab4a      	add	r3, sp, #296	; 0x128
 8017068:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801706c:	e9c3 8900 	strd	r8, r9, [r3]
 8017070:	f10a 0a01 	add.w	sl, sl, #1
 8017074:	3e08      	subs	r6, #8
 8017076:	e6f0      	b.n	8016e5a <__kernel_rem_pio2+0x2ba>
 8017078:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801707a:	2b03      	cmp	r3, #3
 801707c:	d85b      	bhi.n	8017136 <__kernel_rem_pio2+0x596>
 801707e:	e8df f003 	tbb	[pc, r3]
 8017082:	264a      	.short	0x264a
 8017084:	0226      	.short	0x0226
 8017086:	ab9a      	add	r3, sp, #616	; 0x268
 8017088:	441c      	add	r4, r3
 801708a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801708e:	46a2      	mov	sl, r4
 8017090:	46ab      	mov	fp, r5
 8017092:	f1bb 0f00 	cmp.w	fp, #0
 8017096:	dc6c      	bgt.n	8017172 <__kernel_rem_pio2+0x5d2>
 8017098:	46a2      	mov	sl, r4
 801709a:	46ab      	mov	fp, r5
 801709c:	f1bb 0f01 	cmp.w	fp, #1
 80170a0:	f300 8086 	bgt.w	80171b0 <__kernel_rem_pio2+0x610>
 80170a4:	2000      	movs	r0, #0
 80170a6:	2100      	movs	r1, #0
 80170a8:	2d01      	cmp	r5, #1
 80170aa:	f300 80a0 	bgt.w	80171ee <__kernel_rem_pio2+0x64e>
 80170ae:	9b02      	ldr	r3, [sp, #8]
 80170b0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80170b4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	f040 809e 	bne.w	80171fa <__kernel_rem_pio2+0x65a>
 80170be:	9b01      	ldr	r3, [sp, #4]
 80170c0:	e9c3 7800 	strd	r7, r8, [r3]
 80170c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80170c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80170cc:	e033      	b.n	8017136 <__kernel_rem_pio2+0x596>
 80170ce:	3408      	adds	r4, #8
 80170d0:	ab4a      	add	r3, sp, #296	; 0x128
 80170d2:	441c      	add	r4, r3
 80170d4:	462e      	mov	r6, r5
 80170d6:	2000      	movs	r0, #0
 80170d8:	2100      	movs	r1, #0
 80170da:	2e00      	cmp	r6, #0
 80170dc:	da3a      	bge.n	8017154 <__kernel_rem_pio2+0x5b4>
 80170de:	9b02      	ldr	r3, [sp, #8]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d03d      	beq.n	8017160 <__kernel_rem_pio2+0x5c0>
 80170e4:	4602      	mov	r2, r0
 80170e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170ea:	9c01      	ldr	r4, [sp, #4]
 80170ec:	e9c4 2300 	strd	r2, r3, [r4]
 80170f0:	4602      	mov	r2, r0
 80170f2:	460b      	mov	r3, r1
 80170f4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80170f8:	f7e9 f8e6 	bl	80002c8 <__aeabi_dsub>
 80170fc:	ae4c      	add	r6, sp, #304	; 0x130
 80170fe:	2401      	movs	r4, #1
 8017100:	42a5      	cmp	r5, r4
 8017102:	da30      	bge.n	8017166 <__kernel_rem_pio2+0x5c6>
 8017104:	9b02      	ldr	r3, [sp, #8]
 8017106:	b113      	cbz	r3, 801710e <__kernel_rem_pio2+0x56e>
 8017108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801710c:	4619      	mov	r1, r3
 801710e:	9b01      	ldr	r3, [sp, #4]
 8017110:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017114:	e00f      	b.n	8017136 <__kernel_rem_pio2+0x596>
 8017116:	ab9a      	add	r3, sp, #616	; 0x268
 8017118:	441c      	add	r4, r3
 801711a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801711e:	2000      	movs	r0, #0
 8017120:	2100      	movs	r1, #0
 8017122:	2d00      	cmp	r5, #0
 8017124:	da10      	bge.n	8017148 <__kernel_rem_pio2+0x5a8>
 8017126:	9b02      	ldr	r3, [sp, #8]
 8017128:	b113      	cbz	r3, 8017130 <__kernel_rem_pio2+0x590>
 801712a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801712e:	4619      	mov	r1, r3
 8017130:	9b01      	ldr	r3, [sp, #4]
 8017132:	e9c3 0100 	strd	r0, r1, [r3]
 8017136:	9b06      	ldr	r3, [sp, #24]
 8017138:	f003 0007 	and.w	r0, r3, #7
 801713c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8017140:	ecbd 8b02 	vpop	{d8}
 8017144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017148:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801714c:	f7e9 f8be 	bl	80002cc <__adddf3>
 8017150:	3d01      	subs	r5, #1
 8017152:	e7e6      	b.n	8017122 <__kernel_rem_pio2+0x582>
 8017154:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017158:	f7e9 f8b8 	bl	80002cc <__adddf3>
 801715c:	3e01      	subs	r6, #1
 801715e:	e7bc      	b.n	80170da <__kernel_rem_pio2+0x53a>
 8017160:	4602      	mov	r2, r0
 8017162:	460b      	mov	r3, r1
 8017164:	e7c1      	b.n	80170ea <__kernel_rem_pio2+0x54a>
 8017166:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801716a:	f7e9 f8af 	bl	80002cc <__adddf3>
 801716e:	3401      	adds	r4, #1
 8017170:	e7c6      	b.n	8017100 <__kernel_rem_pio2+0x560>
 8017172:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8017176:	ed3a 7b02 	vldmdb	sl!, {d7}
 801717a:	4640      	mov	r0, r8
 801717c:	ec53 2b17 	vmov	r2, r3, d7
 8017180:	4649      	mov	r1, r9
 8017182:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017186:	f7e9 f8a1 	bl	80002cc <__adddf3>
 801718a:	4602      	mov	r2, r0
 801718c:	460b      	mov	r3, r1
 801718e:	4606      	mov	r6, r0
 8017190:	460f      	mov	r7, r1
 8017192:	4640      	mov	r0, r8
 8017194:	4649      	mov	r1, r9
 8017196:	f7e9 f897 	bl	80002c8 <__aeabi_dsub>
 801719a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801719e:	f7e9 f895 	bl	80002cc <__adddf3>
 80171a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80171a6:	e9ca 0100 	strd	r0, r1, [sl]
 80171aa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80171ae:	e770      	b.n	8017092 <__kernel_rem_pio2+0x4f2>
 80171b0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80171b4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80171b8:	4630      	mov	r0, r6
 80171ba:	ec53 2b17 	vmov	r2, r3, d7
 80171be:	4639      	mov	r1, r7
 80171c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80171c4:	f7e9 f882 	bl	80002cc <__adddf3>
 80171c8:	4602      	mov	r2, r0
 80171ca:	460b      	mov	r3, r1
 80171cc:	4680      	mov	r8, r0
 80171ce:	4689      	mov	r9, r1
 80171d0:	4630      	mov	r0, r6
 80171d2:	4639      	mov	r1, r7
 80171d4:	f7e9 f878 	bl	80002c8 <__aeabi_dsub>
 80171d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80171dc:	f7e9 f876 	bl	80002cc <__adddf3>
 80171e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80171e4:	e9ca 0100 	strd	r0, r1, [sl]
 80171e8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80171ec:	e756      	b.n	801709c <__kernel_rem_pio2+0x4fc>
 80171ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80171f2:	f7e9 f86b 	bl	80002cc <__adddf3>
 80171f6:	3d01      	subs	r5, #1
 80171f8:	e756      	b.n	80170a8 <__kernel_rem_pio2+0x508>
 80171fa:	9b01      	ldr	r3, [sp, #4]
 80171fc:	9a01      	ldr	r2, [sp, #4]
 80171fe:	601f      	str	r7, [r3, #0]
 8017200:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8017204:	605c      	str	r4, [r3, #4]
 8017206:	609d      	str	r5, [r3, #8]
 8017208:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801720c:	60d3      	str	r3, [r2, #12]
 801720e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017212:	6110      	str	r0, [r2, #16]
 8017214:	6153      	str	r3, [r2, #20]
 8017216:	e78e      	b.n	8017136 <__kernel_rem_pio2+0x596>
 8017218:	41700000 	.word	0x41700000
 801721c:	3e700000 	.word	0x3e700000

08017220 <__kernel_sin>:
 8017220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017224:	ec55 4b10 	vmov	r4, r5, d0
 8017228:	b085      	sub	sp, #20
 801722a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801722e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017232:	ed8d 1b00 	vstr	d1, [sp]
 8017236:	9002      	str	r0, [sp, #8]
 8017238:	da06      	bge.n	8017248 <__kernel_sin+0x28>
 801723a:	ee10 0a10 	vmov	r0, s0
 801723e:	4629      	mov	r1, r5
 8017240:	f7e9 fcaa 	bl	8000b98 <__aeabi_d2iz>
 8017244:	2800      	cmp	r0, #0
 8017246:	d051      	beq.n	80172ec <__kernel_sin+0xcc>
 8017248:	4622      	mov	r2, r4
 801724a:	462b      	mov	r3, r5
 801724c:	4620      	mov	r0, r4
 801724e:	4629      	mov	r1, r5
 8017250:	f7e9 f9f2 	bl	8000638 <__aeabi_dmul>
 8017254:	4682      	mov	sl, r0
 8017256:	468b      	mov	fp, r1
 8017258:	4602      	mov	r2, r0
 801725a:	460b      	mov	r3, r1
 801725c:	4620      	mov	r0, r4
 801725e:	4629      	mov	r1, r5
 8017260:	f7e9 f9ea 	bl	8000638 <__aeabi_dmul>
 8017264:	a341      	add	r3, pc, #260	; (adr r3, 801736c <__kernel_sin+0x14c>)
 8017266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801726a:	4680      	mov	r8, r0
 801726c:	4689      	mov	r9, r1
 801726e:	4650      	mov	r0, sl
 8017270:	4659      	mov	r1, fp
 8017272:	f7e9 f9e1 	bl	8000638 <__aeabi_dmul>
 8017276:	a33f      	add	r3, pc, #252	; (adr r3, 8017374 <__kernel_sin+0x154>)
 8017278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727c:	f7e9 f824 	bl	80002c8 <__aeabi_dsub>
 8017280:	4652      	mov	r2, sl
 8017282:	465b      	mov	r3, fp
 8017284:	f7e9 f9d8 	bl	8000638 <__aeabi_dmul>
 8017288:	a33c      	add	r3, pc, #240	; (adr r3, 801737c <__kernel_sin+0x15c>)
 801728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801728e:	f7e9 f81d 	bl	80002cc <__adddf3>
 8017292:	4652      	mov	r2, sl
 8017294:	465b      	mov	r3, fp
 8017296:	f7e9 f9cf 	bl	8000638 <__aeabi_dmul>
 801729a:	a33a      	add	r3, pc, #232	; (adr r3, 8017384 <__kernel_sin+0x164>)
 801729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a0:	f7e9 f812 	bl	80002c8 <__aeabi_dsub>
 80172a4:	4652      	mov	r2, sl
 80172a6:	465b      	mov	r3, fp
 80172a8:	f7e9 f9c6 	bl	8000638 <__aeabi_dmul>
 80172ac:	a337      	add	r3, pc, #220	; (adr r3, 801738c <__kernel_sin+0x16c>)
 80172ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b2:	f7e9 f80b 	bl	80002cc <__adddf3>
 80172b6:	9b02      	ldr	r3, [sp, #8]
 80172b8:	4606      	mov	r6, r0
 80172ba:	460f      	mov	r7, r1
 80172bc:	b9db      	cbnz	r3, 80172f6 <__kernel_sin+0xd6>
 80172be:	4602      	mov	r2, r0
 80172c0:	460b      	mov	r3, r1
 80172c2:	4650      	mov	r0, sl
 80172c4:	4659      	mov	r1, fp
 80172c6:	f7e9 f9b7 	bl	8000638 <__aeabi_dmul>
 80172ca:	a325      	add	r3, pc, #148	; (adr r3, 8017360 <__kernel_sin+0x140>)
 80172cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d0:	f7e8 fffa 	bl	80002c8 <__aeabi_dsub>
 80172d4:	4642      	mov	r2, r8
 80172d6:	464b      	mov	r3, r9
 80172d8:	f7e9 f9ae 	bl	8000638 <__aeabi_dmul>
 80172dc:	4602      	mov	r2, r0
 80172de:	460b      	mov	r3, r1
 80172e0:	4620      	mov	r0, r4
 80172e2:	4629      	mov	r1, r5
 80172e4:	f7e8 fff2 	bl	80002cc <__adddf3>
 80172e8:	4604      	mov	r4, r0
 80172ea:	460d      	mov	r5, r1
 80172ec:	ec45 4b10 	vmov	d0, r4, r5
 80172f0:	b005      	add	sp, #20
 80172f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172f6:	2200      	movs	r2, #0
 80172f8:	4b1b      	ldr	r3, [pc, #108]	; (8017368 <__kernel_sin+0x148>)
 80172fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172fe:	f7e9 f99b 	bl	8000638 <__aeabi_dmul>
 8017302:	4632      	mov	r2, r6
 8017304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017308:	463b      	mov	r3, r7
 801730a:	4640      	mov	r0, r8
 801730c:	4649      	mov	r1, r9
 801730e:	f7e9 f993 	bl	8000638 <__aeabi_dmul>
 8017312:	4602      	mov	r2, r0
 8017314:	460b      	mov	r3, r1
 8017316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801731a:	f7e8 ffd5 	bl	80002c8 <__aeabi_dsub>
 801731e:	4652      	mov	r2, sl
 8017320:	465b      	mov	r3, fp
 8017322:	f7e9 f989 	bl	8000638 <__aeabi_dmul>
 8017326:	e9dd 2300 	ldrd	r2, r3, [sp]
 801732a:	f7e8 ffcd 	bl	80002c8 <__aeabi_dsub>
 801732e:	a30c      	add	r3, pc, #48	; (adr r3, 8017360 <__kernel_sin+0x140>)
 8017330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017334:	4606      	mov	r6, r0
 8017336:	460f      	mov	r7, r1
 8017338:	4640      	mov	r0, r8
 801733a:	4649      	mov	r1, r9
 801733c:	f7e9 f97c 	bl	8000638 <__aeabi_dmul>
 8017340:	4602      	mov	r2, r0
 8017342:	460b      	mov	r3, r1
 8017344:	4630      	mov	r0, r6
 8017346:	4639      	mov	r1, r7
 8017348:	f7e8 ffc0 	bl	80002cc <__adddf3>
 801734c:	4602      	mov	r2, r0
 801734e:	460b      	mov	r3, r1
 8017350:	4620      	mov	r0, r4
 8017352:	4629      	mov	r1, r5
 8017354:	f7e8 ffb8 	bl	80002c8 <__aeabi_dsub>
 8017358:	e7c6      	b.n	80172e8 <__kernel_sin+0xc8>
 801735a:	bf00      	nop
 801735c:	f3af 8000 	nop.w
 8017360:	55555549 	.word	0x55555549
 8017364:	3fc55555 	.word	0x3fc55555
 8017368:	3fe00000 	.word	0x3fe00000
 801736c:	5acfd57c 	.word	0x5acfd57c
 8017370:	3de5d93a 	.word	0x3de5d93a
 8017374:	8a2b9ceb 	.word	0x8a2b9ceb
 8017378:	3e5ae5e6 	.word	0x3e5ae5e6
 801737c:	57b1fe7d 	.word	0x57b1fe7d
 8017380:	3ec71de3 	.word	0x3ec71de3
 8017384:	19c161d5 	.word	0x19c161d5
 8017388:	3f2a01a0 	.word	0x3f2a01a0
 801738c:	1110f8a6 	.word	0x1110f8a6
 8017390:	3f811111 	.word	0x3f811111
 8017394:	00000000 	.word	0x00000000

08017398 <atan>:
 8017398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801739c:	ec55 4b10 	vmov	r4, r5, d0
 80173a0:	4bc3      	ldr	r3, [pc, #780]	; (80176b0 <atan+0x318>)
 80173a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80173a6:	429e      	cmp	r6, r3
 80173a8:	46ab      	mov	fp, r5
 80173aa:	dd18      	ble.n	80173de <atan+0x46>
 80173ac:	4bc1      	ldr	r3, [pc, #772]	; (80176b4 <atan+0x31c>)
 80173ae:	429e      	cmp	r6, r3
 80173b0:	dc01      	bgt.n	80173b6 <atan+0x1e>
 80173b2:	d109      	bne.n	80173c8 <atan+0x30>
 80173b4:	b144      	cbz	r4, 80173c8 <atan+0x30>
 80173b6:	4622      	mov	r2, r4
 80173b8:	462b      	mov	r3, r5
 80173ba:	4620      	mov	r0, r4
 80173bc:	4629      	mov	r1, r5
 80173be:	f7e8 ff85 	bl	80002cc <__adddf3>
 80173c2:	4604      	mov	r4, r0
 80173c4:	460d      	mov	r5, r1
 80173c6:	e006      	b.n	80173d6 <atan+0x3e>
 80173c8:	f1bb 0f00 	cmp.w	fp, #0
 80173cc:	f340 8131 	ble.w	8017632 <atan+0x29a>
 80173d0:	a59b      	add	r5, pc, #620	; (adr r5, 8017640 <atan+0x2a8>)
 80173d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80173d6:	ec45 4b10 	vmov	d0, r4, r5
 80173da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173de:	4bb6      	ldr	r3, [pc, #728]	; (80176b8 <atan+0x320>)
 80173e0:	429e      	cmp	r6, r3
 80173e2:	dc14      	bgt.n	801740e <atan+0x76>
 80173e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80173e8:	429e      	cmp	r6, r3
 80173ea:	dc0d      	bgt.n	8017408 <atan+0x70>
 80173ec:	a396      	add	r3, pc, #600	; (adr r3, 8017648 <atan+0x2b0>)
 80173ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f2:	ee10 0a10 	vmov	r0, s0
 80173f6:	4629      	mov	r1, r5
 80173f8:	f7e8 ff68 	bl	80002cc <__adddf3>
 80173fc:	2200      	movs	r2, #0
 80173fe:	4baf      	ldr	r3, [pc, #700]	; (80176bc <atan+0x324>)
 8017400:	f7e9 fbaa 	bl	8000b58 <__aeabi_dcmpgt>
 8017404:	2800      	cmp	r0, #0
 8017406:	d1e6      	bne.n	80173d6 <atan+0x3e>
 8017408:	f04f 3aff 	mov.w	sl, #4294967295
 801740c:	e02b      	b.n	8017466 <atan+0xce>
 801740e:	f000 f963 	bl	80176d8 <fabs>
 8017412:	4bab      	ldr	r3, [pc, #684]	; (80176c0 <atan+0x328>)
 8017414:	429e      	cmp	r6, r3
 8017416:	ec55 4b10 	vmov	r4, r5, d0
 801741a:	f300 80bf 	bgt.w	801759c <atan+0x204>
 801741e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8017422:	429e      	cmp	r6, r3
 8017424:	f300 80a0 	bgt.w	8017568 <atan+0x1d0>
 8017428:	ee10 2a10 	vmov	r2, s0
 801742c:	ee10 0a10 	vmov	r0, s0
 8017430:	462b      	mov	r3, r5
 8017432:	4629      	mov	r1, r5
 8017434:	f7e8 ff4a 	bl	80002cc <__adddf3>
 8017438:	2200      	movs	r2, #0
 801743a:	4ba0      	ldr	r3, [pc, #640]	; (80176bc <atan+0x324>)
 801743c:	f7e8 ff44 	bl	80002c8 <__aeabi_dsub>
 8017440:	2200      	movs	r2, #0
 8017442:	4606      	mov	r6, r0
 8017444:	460f      	mov	r7, r1
 8017446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801744a:	4620      	mov	r0, r4
 801744c:	4629      	mov	r1, r5
 801744e:	f7e8 ff3d 	bl	80002cc <__adddf3>
 8017452:	4602      	mov	r2, r0
 8017454:	460b      	mov	r3, r1
 8017456:	4630      	mov	r0, r6
 8017458:	4639      	mov	r1, r7
 801745a:	f7e9 fa17 	bl	800088c <__aeabi_ddiv>
 801745e:	f04f 0a00 	mov.w	sl, #0
 8017462:	4604      	mov	r4, r0
 8017464:	460d      	mov	r5, r1
 8017466:	4622      	mov	r2, r4
 8017468:	462b      	mov	r3, r5
 801746a:	4620      	mov	r0, r4
 801746c:	4629      	mov	r1, r5
 801746e:	f7e9 f8e3 	bl	8000638 <__aeabi_dmul>
 8017472:	4602      	mov	r2, r0
 8017474:	460b      	mov	r3, r1
 8017476:	4680      	mov	r8, r0
 8017478:	4689      	mov	r9, r1
 801747a:	f7e9 f8dd 	bl	8000638 <__aeabi_dmul>
 801747e:	a374      	add	r3, pc, #464	; (adr r3, 8017650 <atan+0x2b8>)
 8017480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017484:	4606      	mov	r6, r0
 8017486:	460f      	mov	r7, r1
 8017488:	f7e9 f8d6 	bl	8000638 <__aeabi_dmul>
 801748c:	a372      	add	r3, pc, #456	; (adr r3, 8017658 <atan+0x2c0>)
 801748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017492:	f7e8 ff1b 	bl	80002cc <__adddf3>
 8017496:	4632      	mov	r2, r6
 8017498:	463b      	mov	r3, r7
 801749a:	f7e9 f8cd 	bl	8000638 <__aeabi_dmul>
 801749e:	a370      	add	r3, pc, #448	; (adr r3, 8017660 <atan+0x2c8>)
 80174a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a4:	f7e8 ff12 	bl	80002cc <__adddf3>
 80174a8:	4632      	mov	r2, r6
 80174aa:	463b      	mov	r3, r7
 80174ac:	f7e9 f8c4 	bl	8000638 <__aeabi_dmul>
 80174b0:	a36d      	add	r3, pc, #436	; (adr r3, 8017668 <atan+0x2d0>)
 80174b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174b6:	f7e8 ff09 	bl	80002cc <__adddf3>
 80174ba:	4632      	mov	r2, r6
 80174bc:	463b      	mov	r3, r7
 80174be:	f7e9 f8bb 	bl	8000638 <__aeabi_dmul>
 80174c2:	a36b      	add	r3, pc, #428	; (adr r3, 8017670 <atan+0x2d8>)
 80174c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c8:	f7e8 ff00 	bl	80002cc <__adddf3>
 80174cc:	4632      	mov	r2, r6
 80174ce:	463b      	mov	r3, r7
 80174d0:	f7e9 f8b2 	bl	8000638 <__aeabi_dmul>
 80174d4:	a368      	add	r3, pc, #416	; (adr r3, 8017678 <atan+0x2e0>)
 80174d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174da:	f7e8 fef7 	bl	80002cc <__adddf3>
 80174de:	4642      	mov	r2, r8
 80174e0:	464b      	mov	r3, r9
 80174e2:	f7e9 f8a9 	bl	8000638 <__aeabi_dmul>
 80174e6:	a366      	add	r3, pc, #408	; (adr r3, 8017680 <atan+0x2e8>)
 80174e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ec:	4680      	mov	r8, r0
 80174ee:	4689      	mov	r9, r1
 80174f0:	4630      	mov	r0, r6
 80174f2:	4639      	mov	r1, r7
 80174f4:	f7e9 f8a0 	bl	8000638 <__aeabi_dmul>
 80174f8:	a363      	add	r3, pc, #396	; (adr r3, 8017688 <atan+0x2f0>)
 80174fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fe:	f7e8 fee3 	bl	80002c8 <__aeabi_dsub>
 8017502:	4632      	mov	r2, r6
 8017504:	463b      	mov	r3, r7
 8017506:	f7e9 f897 	bl	8000638 <__aeabi_dmul>
 801750a:	a361      	add	r3, pc, #388	; (adr r3, 8017690 <atan+0x2f8>)
 801750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017510:	f7e8 feda 	bl	80002c8 <__aeabi_dsub>
 8017514:	4632      	mov	r2, r6
 8017516:	463b      	mov	r3, r7
 8017518:	f7e9 f88e 	bl	8000638 <__aeabi_dmul>
 801751c:	a35e      	add	r3, pc, #376	; (adr r3, 8017698 <atan+0x300>)
 801751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017522:	f7e8 fed1 	bl	80002c8 <__aeabi_dsub>
 8017526:	4632      	mov	r2, r6
 8017528:	463b      	mov	r3, r7
 801752a:	f7e9 f885 	bl	8000638 <__aeabi_dmul>
 801752e:	a35c      	add	r3, pc, #368	; (adr r3, 80176a0 <atan+0x308>)
 8017530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017534:	f7e8 fec8 	bl	80002c8 <__aeabi_dsub>
 8017538:	4632      	mov	r2, r6
 801753a:	463b      	mov	r3, r7
 801753c:	f7e9 f87c 	bl	8000638 <__aeabi_dmul>
 8017540:	4602      	mov	r2, r0
 8017542:	460b      	mov	r3, r1
 8017544:	4640      	mov	r0, r8
 8017546:	4649      	mov	r1, r9
 8017548:	f7e8 fec0 	bl	80002cc <__adddf3>
 801754c:	4622      	mov	r2, r4
 801754e:	462b      	mov	r3, r5
 8017550:	f7e9 f872 	bl	8000638 <__aeabi_dmul>
 8017554:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017558:	4602      	mov	r2, r0
 801755a:	460b      	mov	r3, r1
 801755c:	d14b      	bne.n	80175f6 <atan+0x25e>
 801755e:	4620      	mov	r0, r4
 8017560:	4629      	mov	r1, r5
 8017562:	f7e8 feb1 	bl	80002c8 <__aeabi_dsub>
 8017566:	e72c      	b.n	80173c2 <atan+0x2a>
 8017568:	ee10 0a10 	vmov	r0, s0
 801756c:	2200      	movs	r2, #0
 801756e:	4b53      	ldr	r3, [pc, #332]	; (80176bc <atan+0x324>)
 8017570:	4629      	mov	r1, r5
 8017572:	f7e8 fea9 	bl	80002c8 <__aeabi_dsub>
 8017576:	2200      	movs	r2, #0
 8017578:	4606      	mov	r6, r0
 801757a:	460f      	mov	r7, r1
 801757c:	4b4f      	ldr	r3, [pc, #316]	; (80176bc <atan+0x324>)
 801757e:	4620      	mov	r0, r4
 8017580:	4629      	mov	r1, r5
 8017582:	f7e8 fea3 	bl	80002cc <__adddf3>
 8017586:	4602      	mov	r2, r0
 8017588:	460b      	mov	r3, r1
 801758a:	4630      	mov	r0, r6
 801758c:	4639      	mov	r1, r7
 801758e:	f7e9 f97d 	bl	800088c <__aeabi_ddiv>
 8017592:	f04f 0a01 	mov.w	sl, #1
 8017596:	4604      	mov	r4, r0
 8017598:	460d      	mov	r5, r1
 801759a:	e764      	b.n	8017466 <atan+0xce>
 801759c:	4b49      	ldr	r3, [pc, #292]	; (80176c4 <atan+0x32c>)
 801759e:	429e      	cmp	r6, r3
 80175a0:	dc1d      	bgt.n	80175de <atan+0x246>
 80175a2:	ee10 0a10 	vmov	r0, s0
 80175a6:	2200      	movs	r2, #0
 80175a8:	4b47      	ldr	r3, [pc, #284]	; (80176c8 <atan+0x330>)
 80175aa:	4629      	mov	r1, r5
 80175ac:	f7e8 fe8c 	bl	80002c8 <__aeabi_dsub>
 80175b0:	2200      	movs	r2, #0
 80175b2:	4606      	mov	r6, r0
 80175b4:	460f      	mov	r7, r1
 80175b6:	4b44      	ldr	r3, [pc, #272]	; (80176c8 <atan+0x330>)
 80175b8:	4620      	mov	r0, r4
 80175ba:	4629      	mov	r1, r5
 80175bc:	f7e9 f83c 	bl	8000638 <__aeabi_dmul>
 80175c0:	2200      	movs	r2, #0
 80175c2:	4b3e      	ldr	r3, [pc, #248]	; (80176bc <atan+0x324>)
 80175c4:	f7e8 fe82 	bl	80002cc <__adddf3>
 80175c8:	4602      	mov	r2, r0
 80175ca:	460b      	mov	r3, r1
 80175cc:	4630      	mov	r0, r6
 80175ce:	4639      	mov	r1, r7
 80175d0:	f7e9 f95c 	bl	800088c <__aeabi_ddiv>
 80175d4:	f04f 0a02 	mov.w	sl, #2
 80175d8:	4604      	mov	r4, r0
 80175da:	460d      	mov	r5, r1
 80175dc:	e743      	b.n	8017466 <atan+0xce>
 80175de:	462b      	mov	r3, r5
 80175e0:	ee10 2a10 	vmov	r2, s0
 80175e4:	2000      	movs	r0, #0
 80175e6:	4939      	ldr	r1, [pc, #228]	; (80176cc <atan+0x334>)
 80175e8:	f7e9 f950 	bl	800088c <__aeabi_ddiv>
 80175ec:	f04f 0a03 	mov.w	sl, #3
 80175f0:	4604      	mov	r4, r0
 80175f2:	460d      	mov	r5, r1
 80175f4:	e737      	b.n	8017466 <atan+0xce>
 80175f6:	4b36      	ldr	r3, [pc, #216]	; (80176d0 <atan+0x338>)
 80175f8:	4e36      	ldr	r6, [pc, #216]	; (80176d4 <atan+0x33c>)
 80175fa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80175fe:	4456      	add	r6, sl
 8017600:	449a      	add	sl, r3
 8017602:	e9da 2300 	ldrd	r2, r3, [sl]
 8017606:	f7e8 fe5f 	bl	80002c8 <__aeabi_dsub>
 801760a:	4622      	mov	r2, r4
 801760c:	462b      	mov	r3, r5
 801760e:	f7e8 fe5b 	bl	80002c8 <__aeabi_dsub>
 8017612:	4602      	mov	r2, r0
 8017614:	460b      	mov	r3, r1
 8017616:	e9d6 0100 	ldrd	r0, r1, [r6]
 801761a:	f7e8 fe55 	bl	80002c8 <__aeabi_dsub>
 801761e:	f1bb 0f00 	cmp.w	fp, #0
 8017622:	4604      	mov	r4, r0
 8017624:	460d      	mov	r5, r1
 8017626:	f6bf aed6 	bge.w	80173d6 <atan+0x3e>
 801762a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801762e:	461d      	mov	r5, r3
 8017630:	e6d1      	b.n	80173d6 <atan+0x3e>
 8017632:	a51d      	add	r5, pc, #116	; (adr r5, 80176a8 <atan+0x310>)
 8017634:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017638:	e6cd      	b.n	80173d6 <atan+0x3e>
 801763a:	bf00      	nop
 801763c:	f3af 8000 	nop.w
 8017640:	54442d18 	.word	0x54442d18
 8017644:	3ff921fb 	.word	0x3ff921fb
 8017648:	8800759c 	.word	0x8800759c
 801764c:	7e37e43c 	.word	0x7e37e43c
 8017650:	e322da11 	.word	0xe322da11
 8017654:	3f90ad3a 	.word	0x3f90ad3a
 8017658:	24760deb 	.word	0x24760deb
 801765c:	3fa97b4b 	.word	0x3fa97b4b
 8017660:	a0d03d51 	.word	0xa0d03d51
 8017664:	3fb10d66 	.word	0x3fb10d66
 8017668:	c54c206e 	.word	0xc54c206e
 801766c:	3fb745cd 	.word	0x3fb745cd
 8017670:	920083ff 	.word	0x920083ff
 8017674:	3fc24924 	.word	0x3fc24924
 8017678:	5555550d 	.word	0x5555550d
 801767c:	3fd55555 	.word	0x3fd55555
 8017680:	2c6a6c2f 	.word	0x2c6a6c2f
 8017684:	bfa2b444 	.word	0xbfa2b444
 8017688:	52defd9a 	.word	0x52defd9a
 801768c:	3fadde2d 	.word	0x3fadde2d
 8017690:	af749a6d 	.word	0xaf749a6d
 8017694:	3fb3b0f2 	.word	0x3fb3b0f2
 8017698:	fe231671 	.word	0xfe231671
 801769c:	3fbc71c6 	.word	0x3fbc71c6
 80176a0:	9998ebc4 	.word	0x9998ebc4
 80176a4:	3fc99999 	.word	0x3fc99999
 80176a8:	54442d18 	.word	0x54442d18
 80176ac:	bff921fb 	.word	0xbff921fb
 80176b0:	440fffff 	.word	0x440fffff
 80176b4:	7ff00000 	.word	0x7ff00000
 80176b8:	3fdbffff 	.word	0x3fdbffff
 80176bc:	3ff00000 	.word	0x3ff00000
 80176c0:	3ff2ffff 	.word	0x3ff2ffff
 80176c4:	40037fff 	.word	0x40037fff
 80176c8:	3ff80000 	.word	0x3ff80000
 80176cc:	bff00000 	.word	0xbff00000
 80176d0:	080186e0 	.word	0x080186e0
 80176d4:	080186c0 	.word	0x080186c0

080176d8 <fabs>:
 80176d8:	ec51 0b10 	vmov	r0, r1, d0
 80176dc:	ee10 2a10 	vmov	r2, s0
 80176e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80176e4:	ec43 2b10 	vmov	d0, r2, r3
 80176e8:	4770      	bx	lr
 80176ea:	0000      	movs	r0, r0
 80176ec:	0000      	movs	r0, r0
	...

080176f0 <floor>:
 80176f0:	ec51 0b10 	vmov	r0, r1, d0
 80176f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80176fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017700:	2e13      	cmp	r6, #19
 8017702:	460c      	mov	r4, r1
 8017704:	ee10 5a10 	vmov	r5, s0
 8017708:	4680      	mov	r8, r0
 801770a:	dc34      	bgt.n	8017776 <floor+0x86>
 801770c:	2e00      	cmp	r6, #0
 801770e:	da16      	bge.n	801773e <floor+0x4e>
 8017710:	a335      	add	r3, pc, #212	; (adr r3, 80177e8 <floor+0xf8>)
 8017712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017716:	f7e8 fdd9 	bl	80002cc <__adddf3>
 801771a:	2200      	movs	r2, #0
 801771c:	2300      	movs	r3, #0
 801771e:	f7e9 fa1b 	bl	8000b58 <__aeabi_dcmpgt>
 8017722:	b148      	cbz	r0, 8017738 <floor+0x48>
 8017724:	2c00      	cmp	r4, #0
 8017726:	da59      	bge.n	80177dc <floor+0xec>
 8017728:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801772c:	4a30      	ldr	r2, [pc, #192]	; (80177f0 <floor+0x100>)
 801772e:	432b      	orrs	r3, r5
 8017730:	2500      	movs	r5, #0
 8017732:	42ab      	cmp	r3, r5
 8017734:	bf18      	it	ne
 8017736:	4614      	movne	r4, r2
 8017738:	4621      	mov	r1, r4
 801773a:	4628      	mov	r0, r5
 801773c:	e025      	b.n	801778a <floor+0x9a>
 801773e:	4f2d      	ldr	r7, [pc, #180]	; (80177f4 <floor+0x104>)
 8017740:	4137      	asrs	r7, r6
 8017742:	ea01 0307 	and.w	r3, r1, r7
 8017746:	4303      	orrs	r3, r0
 8017748:	d01f      	beq.n	801778a <floor+0x9a>
 801774a:	a327      	add	r3, pc, #156	; (adr r3, 80177e8 <floor+0xf8>)
 801774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017750:	f7e8 fdbc 	bl	80002cc <__adddf3>
 8017754:	2200      	movs	r2, #0
 8017756:	2300      	movs	r3, #0
 8017758:	f7e9 f9fe 	bl	8000b58 <__aeabi_dcmpgt>
 801775c:	2800      	cmp	r0, #0
 801775e:	d0eb      	beq.n	8017738 <floor+0x48>
 8017760:	2c00      	cmp	r4, #0
 8017762:	bfbe      	ittt	lt
 8017764:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017768:	fa43 f606 	asrlt.w	r6, r3, r6
 801776c:	19a4      	addlt	r4, r4, r6
 801776e:	ea24 0407 	bic.w	r4, r4, r7
 8017772:	2500      	movs	r5, #0
 8017774:	e7e0      	b.n	8017738 <floor+0x48>
 8017776:	2e33      	cmp	r6, #51	; 0x33
 8017778:	dd0b      	ble.n	8017792 <floor+0xa2>
 801777a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801777e:	d104      	bne.n	801778a <floor+0x9a>
 8017780:	ee10 2a10 	vmov	r2, s0
 8017784:	460b      	mov	r3, r1
 8017786:	f7e8 fda1 	bl	80002cc <__adddf3>
 801778a:	ec41 0b10 	vmov	d0, r0, r1
 801778e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017792:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8017796:	f04f 33ff 	mov.w	r3, #4294967295
 801779a:	fa23 f707 	lsr.w	r7, r3, r7
 801779e:	4207      	tst	r7, r0
 80177a0:	d0f3      	beq.n	801778a <floor+0x9a>
 80177a2:	a311      	add	r3, pc, #68	; (adr r3, 80177e8 <floor+0xf8>)
 80177a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177a8:	f7e8 fd90 	bl	80002cc <__adddf3>
 80177ac:	2200      	movs	r2, #0
 80177ae:	2300      	movs	r3, #0
 80177b0:	f7e9 f9d2 	bl	8000b58 <__aeabi_dcmpgt>
 80177b4:	2800      	cmp	r0, #0
 80177b6:	d0bf      	beq.n	8017738 <floor+0x48>
 80177b8:	2c00      	cmp	r4, #0
 80177ba:	da02      	bge.n	80177c2 <floor+0xd2>
 80177bc:	2e14      	cmp	r6, #20
 80177be:	d103      	bne.n	80177c8 <floor+0xd8>
 80177c0:	3401      	adds	r4, #1
 80177c2:	ea25 0507 	bic.w	r5, r5, r7
 80177c6:	e7b7      	b.n	8017738 <floor+0x48>
 80177c8:	2301      	movs	r3, #1
 80177ca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80177ce:	fa03 f606 	lsl.w	r6, r3, r6
 80177d2:	4435      	add	r5, r6
 80177d4:	4545      	cmp	r5, r8
 80177d6:	bf38      	it	cc
 80177d8:	18e4      	addcc	r4, r4, r3
 80177da:	e7f2      	b.n	80177c2 <floor+0xd2>
 80177dc:	2500      	movs	r5, #0
 80177de:	462c      	mov	r4, r5
 80177e0:	e7aa      	b.n	8017738 <floor+0x48>
 80177e2:	bf00      	nop
 80177e4:	f3af 8000 	nop.w
 80177e8:	8800759c 	.word	0x8800759c
 80177ec:	7e37e43c 	.word	0x7e37e43c
 80177f0:	bff00000 	.word	0xbff00000
 80177f4:	000fffff 	.word	0x000fffff

080177f8 <matherr>:
 80177f8:	2000      	movs	r0, #0
 80177fa:	4770      	bx	lr
 80177fc:	0000      	movs	r0, r0
	...

08017800 <nan>:
 8017800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017808 <nan+0x8>
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop
 8017808:	00000000 	.word	0x00000000
 801780c:	7ff80000 	.word	0x7ff80000

08017810 <scalbn>:
 8017810:	b570      	push	{r4, r5, r6, lr}
 8017812:	ec55 4b10 	vmov	r4, r5, d0
 8017816:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801781a:	4606      	mov	r6, r0
 801781c:	462b      	mov	r3, r5
 801781e:	b9aa      	cbnz	r2, 801784c <scalbn+0x3c>
 8017820:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017824:	4323      	orrs	r3, r4
 8017826:	d03b      	beq.n	80178a0 <scalbn+0x90>
 8017828:	4b31      	ldr	r3, [pc, #196]	; (80178f0 <scalbn+0xe0>)
 801782a:	4629      	mov	r1, r5
 801782c:	2200      	movs	r2, #0
 801782e:	ee10 0a10 	vmov	r0, s0
 8017832:	f7e8 ff01 	bl	8000638 <__aeabi_dmul>
 8017836:	4b2f      	ldr	r3, [pc, #188]	; (80178f4 <scalbn+0xe4>)
 8017838:	429e      	cmp	r6, r3
 801783a:	4604      	mov	r4, r0
 801783c:	460d      	mov	r5, r1
 801783e:	da12      	bge.n	8017866 <scalbn+0x56>
 8017840:	a327      	add	r3, pc, #156	; (adr r3, 80178e0 <scalbn+0xd0>)
 8017842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017846:	f7e8 fef7 	bl	8000638 <__aeabi_dmul>
 801784a:	e009      	b.n	8017860 <scalbn+0x50>
 801784c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017850:	428a      	cmp	r2, r1
 8017852:	d10c      	bne.n	801786e <scalbn+0x5e>
 8017854:	ee10 2a10 	vmov	r2, s0
 8017858:	4620      	mov	r0, r4
 801785a:	4629      	mov	r1, r5
 801785c:	f7e8 fd36 	bl	80002cc <__adddf3>
 8017860:	4604      	mov	r4, r0
 8017862:	460d      	mov	r5, r1
 8017864:	e01c      	b.n	80178a0 <scalbn+0x90>
 8017866:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801786a:	460b      	mov	r3, r1
 801786c:	3a36      	subs	r2, #54	; 0x36
 801786e:	4432      	add	r2, r6
 8017870:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017874:	428a      	cmp	r2, r1
 8017876:	dd0b      	ble.n	8017890 <scalbn+0x80>
 8017878:	ec45 4b11 	vmov	d1, r4, r5
 801787c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80178e8 <scalbn+0xd8>
 8017880:	f7fb fe7a 	bl	8013578 <copysign>
 8017884:	a318      	add	r3, pc, #96	; (adr r3, 80178e8 <scalbn+0xd8>)
 8017886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801788a:	ec51 0b10 	vmov	r0, r1, d0
 801788e:	e7da      	b.n	8017846 <scalbn+0x36>
 8017890:	2a00      	cmp	r2, #0
 8017892:	dd08      	ble.n	80178a6 <scalbn+0x96>
 8017894:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017898:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801789c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80178a0:	ec45 4b10 	vmov	d0, r4, r5
 80178a4:	bd70      	pop	{r4, r5, r6, pc}
 80178a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80178aa:	da0d      	bge.n	80178c8 <scalbn+0xb8>
 80178ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80178b0:	429e      	cmp	r6, r3
 80178b2:	ec45 4b11 	vmov	d1, r4, r5
 80178b6:	dce1      	bgt.n	801787c <scalbn+0x6c>
 80178b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80178e0 <scalbn+0xd0>
 80178bc:	f7fb fe5c 	bl	8013578 <copysign>
 80178c0:	a307      	add	r3, pc, #28	; (adr r3, 80178e0 <scalbn+0xd0>)
 80178c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c6:	e7e0      	b.n	801788a <scalbn+0x7a>
 80178c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80178cc:	3236      	adds	r2, #54	; 0x36
 80178ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80178d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80178d6:	4620      	mov	r0, r4
 80178d8:	4629      	mov	r1, r5
 80178da:	2200      	movs	r2, #0
 80178dc:	4b06      	ldr	r3, [pc, #24]	; (80178f8 <scalbn+0xe8>)
 80178de:	e7b2      	b.n	8017846 <scalbn+0x36>
 80178e0:	c2f8f359 	.word	0xc2f8f359
 80178e4:	01a56e1f 	.word	0x01a56e1f
 80178e8:	8800759c 	.word	0x8800759c
 80178ec:	7e37e43c 	.word	0x7e37e43c
 80178f0:	43500000 	.word	0x43500000
 80178f4:	ffff3cb0 	.word	0xffff3cb0
 80178f8:	3c900000 	.word	0x3c900000

080178fc <fabsf>:
 80178fc:	ee10 3a10 	vmov	r3, s0
 8017900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017904:	ee00 3a10 	vmov	s0, r3
 8017908:	4770      	bx	lr

0801790a <finitef>:
 801790a:	ee10 3a10 	vmov	r3, s0
 801790e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8017912:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017916:	bfac      	ite	ge
 8017918:	2000      	movge	r0, #0
 801791a:	2001      	movlt	r0, #1
 801791c:	4770      	bx	lr
	...

08017920 <nanf>:
 8017920:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017928 <nanf+0x8>
 8017924:	4770      	bx	lr
 8017926:	bf00      	nop
 8017928:	7fc00000 	.word	0x7fc00000

0801792c <rintf>:
 801792c:	b513      	push	{r0, r1, r4, lr}
 801792e:	ee10 1a10 	vmov	r1, s0
 8017932:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017936:	0ddc      	lsrs	r4, r3, #23
 8017938:	3c7f      	subs	r4, #127	; 0x7f
 801793a:	2c16      	cmp	r4, #22
 801793c:	dc46      	bgt.n	80179cc <rintf+0xa0>
 801793e:	b32b      	cbz	r3, 801798c <rintf+0x60>
 8017940:	2c00      	cmp	r4, #0
 8017942:	ee10 2a10 	vmov	r2, s0
 8017946:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801794a:	da21      	bge.n	8017990 <rintf+0x64>
 801794c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8017950:	425b      	negs	r3, r3
 8017952:	4a21      	ldr	r2, [pc, #132]	; (80179d8 <rintf+0xac>)
 8017954:	0a5b      	lsrs	r3, r3, #9
 8017956:	0d09      	lsrs	r1, r1, #20
 8017958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801795c:	0509      	lsls	r1, r1, #20
 801795e:	430b      	orrs	r3, r1
 8017960:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017964:	ee07 3a90 	vmov	s15, r3
 8017968:	edd2 6a00 	vldr	s13, [r2]
 801796c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8017970:	ed8d 7a01 	vstr	s14, [sp, #4]
 8017974:	eddd 7a01 	vldr	s15, [sp, #4]
 8017978:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801797c:	ee17 3a90 	vmov	r3, s15
 8017980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017984:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8017988:	ee00 3a10 	vmov	s0, r3
 801798c:	b002      	add	sp, #8
 801798e:	bd10      	pop	{r4, pc}
 8017990:	4b12      	ldr	r3, [pc, #72]	; (80179dc <rintf+0xb0>)
 8017992:	4123      	asrs	r3, r4
 8017994:	4219      	tst	r1, r3
 8017996:	d0f9      	beq.n	801798c <rintf+0x60>
 8017998:	085b      	lsrs	r3, r3, #1
 801799a:	4219      	tst	r1, r3
 801799c:	d006      	beq.n	80179ac <rintf+0x80>
 801799e:	ea21 0203 	bic.w	r2, r1, r3
 80179a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80179a6:	fa43 f404 	asr.w	r4, r3, r4
 80179aa:	4322      	orrs	r2, r4
 80179ac:	4b0a      	ldr	r3, [pc, #40]	; (80179d8 <rintf+0xac>)
 80179ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80179b2:	ed90 7a00 	vldr	s14, [r0]
 80179b6:	ee07 2a90 	vmov	s15, r2
 80179ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80179be:	edcd 7a01 	vstr	s15, [sp, #4]
 80179c2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80179c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80179ca:	e7df      	b.n	801798c <rintf+0x60>
 80179cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80179d0:	d3dc      	bcc.n	801798c <rintf+0x60>
 80179d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80179d6:	e7d9      	b.n	801798c <rintf+0x60>
 80179d8:	08018700 	.word	0x08018700
 80179dc:	007fffff 	.word	0x007fffff

080179e0 <scalbnf>:
 80179e0:	b508      	push	{r3, lr}
 80179e2:	ee10 2a10 	vmov	r2, s0
 80179e6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80179ea:	ed2d 8b02 	vpush	{d8}
 80179ee:	eef0 0a40 	vmov.f32	s1, s0
 80179f2:	d004      	beq.n	80179fe <scalbnf+0x1e>
 80179f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80179f8:	d306      	bcc.n	8017a08 <scalbnf+0x28>
 80179fa:	ee70 0a00 	vadd.f32	s1, s0, s0
 80179fe:	ecbd 8b02 	vpop	{d8}
 8017a02:	eeb0 0a60 	vmov.f32	s0, s1
 8017a06:	bd08      	pop	{r3, pc}
 8017a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017a0c:	d21c      	bcs.n	8017a48 <scalbnf+0x68>
 8017a0e:	4b1f      	ldr	r3, [pc, #124]	; (8017a8c <scalbnf+0xac>)
 8017a10:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017a90 <scalbnf+0xb0>
 8017a14:	4298      	cmp	r0, r3
 8017a16:	ee60 0a27 	vmul.f32	s1, s0, s15
 8017a1a:	db10      	blt.n	8017a3e <scalbnf+0x5e>
 8017a1c:	ee10 2a90 	vmov	r2, s1
 8017a20:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8017a24:	3b19      	subs	r3, #25
 8017a26:	4403      	add	r3, r0
 8017a28:	2bfe      	cmp	r3, #254	; 0xfe
 8017a2a:	dd0f      	ble.n	8017a4c <scalbnf+0x6c>
 8017a2c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8017a94 <scalbnf+0xb4>
 8017a30:	eeb0 0a48 	vmov.f32	s0, s16
 8017a34:	f000 f834 	bl	8017aa0 <copysignf>
 8017a38:	ee60 0a08 	vmul.f32	s1, s0, s16
 8017a3c:	e7df      	b.n	80179fe <scalbnf+0x1e>
 8017a3e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017a98 <scalbnf+0xb8>
 8017a42:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017a46:	e7da      	b.n	80179fe <scalbnf+0x1e>
 8017a48:	0ddb      	lsrs	r3, r3, #23
 8017a4a:	e7ec      	b.n	8017a26 <scalbnf+0x46>
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	dd06      	ble.n	8017a5e <scalbnf+0x7e>
 8017a50:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017a54:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017a58:	ee00 3a90 	vmov	s1, r3
 8017a5c:	e7cf      	b.n	80179fe <scalbnf+0x1e>
 8017a5e:	f113 0f16 	cmn.w	r3, #22
 8017a62:	da06      	bge.n	8017a72 <scalbnf+0x92>
 8017a64:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017a68:	4298      	cmp	r0, r3
 8017a6a:	dcdf      	bgt.n	8017a2c <scalbnf+0x4c>
 8017a6c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8017a98 <scalbnf+0xb8>
 8017a70:	e7de      	b.n	8017a30 <scalbnf+0x50>
 8017a72:	3319      	adds	r3, #25
 8017a74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017a78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017a7c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017a9c <scalbnf+0xbc>
 8017a80:	ee07 3a10 	vmov	s14, r3
 8017a84:	ee67 0a27 	vmul.f32	s1, s14, s15
 8017a88:	e7b9      	b.n	80179fe <scalbnf+0x1e>
 8017a8a:	bf00      	nop
 8017a8c:	ffff3cb0 	.word	0xffff3cb0
 8017a90:	4c000000 	.word	0x4c000000
 8017a94:	7149f2ca 	.word	0x7149f2ca
 8017a98:	0da24260 	.word	0x0da24260
 8017a9c:	33000000 	.word	0x33000000

08017aa0 <copysignf>:
 8017aa0:	ee10 3a10 	vmov	r3, s0
 8017aa4:	ee10 2a90 	vmov	r2, s1
 8017aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017aac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017ab0:	4313      	orrs	r3, r2
 8017ab2:	ee00 3a10 	vmov	s0, r3
 8017ab6:	4770      	bx	lr

08017ab8 <_init>:
 8017ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aba:	bf00      	nop
 8017abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017abe:	bc08      	pop	{r3}
 8017ac0:	469e      	mov	lr, r3
 8017ac2:	4770      	bx	lr

08017ac4 <_fini>:
 8017ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ac6:	bf00      	nop
 8017ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017aca:	bc08      	pop	{r3}
 8017acc:	469e      	mov	lr, r3
 8017ace:	4770      	bx	lr
