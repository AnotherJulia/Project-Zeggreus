
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0800ad88  0800ad88  0001ad88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b510  0800b510  00020368  2**0
                  CONTENTS
  4 .ARM          00000008  0800b510  0800b510  0001b510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b518  0800b518  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800b520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c2c  20000368  0800b888  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f94  0800b888  00021f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c50  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004240  00000000  00000000  00040fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e0  00000000  00000000  00045228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f8  00000000  00000000  00046a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006546  00000000  00000000  00048000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000157d9  00000000  00000000  0004e546  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3006  00000000  00000000  00063d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cac  00000000  00000000  00146da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000368 	.word	0x20000368
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad6c 	.word	0x0800ad6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000036c 	.word	0x2000036c
 800020c:	0800ad6c 	.word	0x0800ad6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b972 	b.w	8000e44 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4688      	mov	r8, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d14b      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b86:	428a      	cmp	r2, r1
 8000b88:	4615      	mov	r5, r2
 8000b8a:	d967      	bls.n	8000c5c <__udivmoddi4+0xe4>
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b14a      	cbz	r2, 8000ba6 <__udivmoddi4+0x2e>
 8000b92:	f1c2 0720 	rsb	r7, r2, #32
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b9e:	4095      	lsls	r5, r2
 8000ba0:	ea47 0803 	orr.w	r8, r7, r3
 8000ba4:	4094      	lsls	r4, r2
 8000ba6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000baa:	0c23      	lsrs	r3, r4, #16
 8000bac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bb0:	fa1f fc85 	uxth.w	ip, r5
 8000bb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x60>
 8000bc4:	18eb      	adds	r3, r5, r3
 8000bc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bca:	f080 811b 	bcs.w	8000e04 <__udivmoddi4+0x28c>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 8118 	bls.w	8000e04 <__udivmoddi4+0x28c>
 8000bd4:	3f02      	subs	r7, #2
 8000bd6:	442b      	add	r3, r5
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x8c>
 8000bf0:	192c      	adds	r4, r5, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	f080 8107 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	f240 8104 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000c00:	3802      	subs	r0, #2
 8000c02:	442c      	add	r4, r5
 8000c04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c08:	eba4 040c 	sub.w	r4, r4, ip
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	b11e      	cbz	r6, 8000c18 <__udivmoddi4+0xa0>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c6 4300 	strd	r4, r3, [r6]
 8000c18:	4639      	mov	r1, r7
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0xbe>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80eb 	beq.w	8000dfe <__udivmoddi4+0x286>
 8000c28:	2700      	movs	r7, #0
 8000c2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c2e:	4638      	mov	r0, r7
 8000c30:	4639      	mov	r1, r7
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	fab3 f783 	clz	r7, r3
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d147      	bne.n	8000cce <__udivmoddi4+0x156>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xd0>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 80fa 	bhi.w	8000e3c <__udivmoddi4+0x2c4>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4698      	mov	r8, r3
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d0e0      	beq.n	8000c18 <__udivmoddi4+0xa0>
 8000c56:	e9c6 4800 	strd	r4, r8, [r6]
 8000c5a:	e7dd      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000c5c:	b902      	cbnz	r2, 8000c60 <__udivmoddi4+0xe8>
 8000c5e:	deff      	udf	#255	; 0xff
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 808f 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c6a:	1b49      	subs	r1, r1, r5
 8000c6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c70:	fa1f f885 	uxth.w	r8, r5
 8000c74:	2701      	movs	r7, #1
 8000c76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c84:	fb08 f10c 	mul.w	r1, r8, ip
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8c:	18eb      	adds	r3, r5, r3
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4299      	cmp	r1, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2bc>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x14c>
 8000cb4:	192c      	adds	r4, r5, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x14a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80b6 	bhi.w	8000e2e <__udivmoddi4+0x2b6>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e79f      	b.n	8000c0e <__udivmoddi4+0x96>
 8000cce:	f1c7 0c20 	rsb	ip, r7, #32
 8000cd2:	40bb      	lsls	r3, r7
 8000cd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cdc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ce0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ce4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cec:	4325      	orrs	r5, r4
 8000cee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cf2:	0c2c      	lsrs	r4, r5, #16
 8000cf4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf8:	fa1f fa8e 	uxth.w	sl, lr
 8000cfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d00:	fb09 f40a 	mul.w	r4, r9, sl
 8000d04:	429c      	cmp	r4, r3
 8000d06:	fa02 f207 	lsl.w	r2, r2, r7
 8000d0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1e 0303 	adds.w	r3, lr, r3
 8000d14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d18:	f080 8087 	bcs.w	8000e2a <__udivmoddi4+0x2b2>
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	f240 8084 	bls.w	8000e2a <__udivmoddi4+0x2b2>
 8000d22:	f1a9 0902 	sub.w	r9, r9, #2
 8000d26:	4473      	add	r3, lr
 8000d28:	1b1b      	subs	r3, r3, r4
 8000d2a:	b2ad      	uxth	r5, r5
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d3c:	45a2      	cmp	sl, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1e 0404 	adds.w	r4, lr, r4
 8000d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d48:	d26b      	bcs.n	8000e22 <__udivmoddi4+0x2aa>
 8000d4a:	45a2      	cmp	sl, r4
 8000d4c:	d969      	bls.n	8000e22 <__udivmoddi4+0x2aa>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	4474      	add	r4, lr
 8000d52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d56:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5a:	eba4 040a 	sub.w	r4, r4, sl
 8000d5e:	454c      	cmp	r4, r9
 8000d60:	46c2      	mov	sl, r8
 8000d62:	464b      	mov	r3, r9
 8000d64:	d354      	bcc.n	8000e10 <__udivmoddi4+0x298>
 8000d66:	d051      	beq.n	8000e0c <__udivmoddi4+0x294>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d069      	beq.n	8000e40 <__udivmoddi4+0x2c8>
 8000d6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d70:	eb64 0403 	sbc.w	r4, r4, r3
 8000d74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d78:	40fd      	lsrs	r5, r7
 8000d7a:	40fc      	lsrs	r4, r7
 8000d7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d80:	e9c6 5400 	strd	r5, r4, [r6]
 8000d84:	2700      	movs	r7, #0
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d90:	4095      	lsls	r5, r2
 8000d92:	fa01 f002 	lsl.w	r0, r1, r2
 8000d96:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d9e:	4338      	orrs	r0, r7
 8000da0:	0c01      	lsrs	r1, r0, #16
 8000da2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000da6:	fa1f f885 	uxth.w	r8, r5
 8000daa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb07 f308 	mul.w	r3, r7, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x256>
 8000dbe:	1869      	adds	r1, r5, r1
 8000dc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dc4:	d22f      	bcs.n	8000e26 <__udivmoddi4+0x2ae>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d92d      	bls.n	8000e26 <__udivmoddi4+0x2ae>
 8000dca:	3f02      	subs	r7, #2
 8000dcc:	4429      	add	r1, r5
 8000dce:	1acb      	subs	r3, r1, r3
 8000dd0:	b281      	uxth	r1, r0
 8000dd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb00 f308 	mul.w	r3, r0, r8
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x27e>
 8000de6:	1869      	adds	r1, r5, r1
 8000de8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dec:	d217      	bcs.n	8000e1e <__udivmoddi4+0x2a6>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d915      	bls.n	8000e1e <__udivmoddi4+0x2a6>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4429      	add	r1, r5
 8000df6:	1ac9      	subs	r1, r1, r3
 8000df8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dfc:	e73b      	b.n	8000c76 <__udivmoddi4+0xfe>
 8000dfe:	4637      	mov	r7, r6
 8000e00:	4630      	mov	r0, r6
 8000e02:	e709      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000e04:	4607      	mov	r7, r0
 8000e06:	e6e7      	b.n	8000bd8 <__udivmoddi4+0x60>
 8000e08:	4618      	mov	r0, r3
 8000e0a:	e6fb      	b.n	8000c04 <__udivmoddi4+0x8c>
 8000e0c:	4541      	cmp	r1, r8
 8000e0e:	d2ab      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e14:	eb69 020e 	sbc.w	r2, r9, lr
 8000e18:	3801      	subs	r0, #1
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	e7a4      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e1e:	4660      	mov	r0, ip
 8000e20:	e7e9      	b.n	8000df6 <__udivmoddi4+0x27e>
 8000e22:	4618      	mov	r0, r3
 8000e24:	e795      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e26:	4667      	mov	r7, ip
 8000e28:	e7d1      	b.n	8000dce <__udivmoddi4+0x256>
 8000e2a:	4681      	mov	r9, r0
 8000e2c:	e77c      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	442c      	add	r4, r5
 8000e32:	e747      	b.n	8000cc4 <__udivmoddi4+0x14c>
 8000e34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e38:	442b      	add	r3, r5
 8000e3a:	e72f      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	e708      	b.n	8000c52 <__udivmoddi4+0xda>
 8000e40:	4637      	mov	r7, r6
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0xa0>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b0a1      	sub	sp, #132	; 0x84
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f000 fd97 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f823 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f9ab 	bl	80011b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e5a:	f000 f8bb 	bl	8000fd4 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000e5e:	f000 f90d 	bl	800107c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000e62:	f000 f941 	bl	80010e8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000e66:	f007 fc5f 	bl	8008728 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    sprintf(printBuffer, "SD CARD TEST!\r\n");
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <main+0x50>)
 8000e6e:	461c      	mov	r4, r3
 8000e70:	4613      	mov	r3, r2
 8000e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f9c8 	bl	8000210 <strlen>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	463b      	mov	r3, r7
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f007 fd1f 	bl	80088cc <CDC_Transmit_FS>
    HAL_Delay(500);
 8000e8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e92:	f000 fdb7 	bl	8001a04 <HAL_Delay>
    sprintf(printBuffer, "SD CARD TEST!\r\n");
 8000e96:	e7e8      	b.n	8000e6a <main+0x22>
 8000e98:	0800adb4 	.word	0x0800adb4

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ac      	sub	sp, #176	; 0xb0
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ea6:	2234      	movs	r2, #52	; 0x34
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f008 f9f5 	bl	800929a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	225c      	movs	r2, #92	; 0x5c
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f008 f9e6 	bl	800929a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <SystemClock_Config+0x130>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a3d      	ldr	r2, [pc, #244]	; (8000fcc <SystemClock_Config+0x130>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <SystemClock_Config+0x130>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <SystemClock_Config+0x134>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <SystemClock_Config+0x134>)
 8000ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <SystemClock_Config+0x134>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f06:	2301      	movs	r3, #1
 8000f08:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f26:	23b4      	movs	r3, #180	; 0xb4
 8000f28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f32:	2308      	movs	r3, #8
 8000f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 faa0 	bl	8004488 <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f4e:	f000 fa13 	bl	8001378 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f52:	f002 fc47 	bl	80037e4 <HAL_PWREx_EnableOverDrive>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f5c:	f000 fa0c 	bl	8001378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f70:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fc80 	bl	8003884 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f8a:	f000 f9f5 	bl	8001378 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f92:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8000f94:	2304      	movs	r3, #4
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8000f98:	2360      	movs	r3, #96	; 0x60
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fac:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fd9e 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000fbe:	f000 f9db 	bl	8001378 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	37b0      	adds	r7, #176	; 0xb0
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_ADC1_Init+0x98>)
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <MX_ADC1_Init+0x9c>)
 8000fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_ADC1_Init+0x98>)
 8000fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_ADC1_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_ADC1_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_ADC1_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_ADC1_Init+0x98>)
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <MX_ADC1_Init+0xa0>)
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_ADC1_Init+0x98>)
 8001022:	2201      	movs	r2, #1
 8001024:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_ADC1_Init+0x98>)
 8001030:	2201      	movs	r2, #1
 8001032:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_ADC1_Init+0x98>)
 8001036:	f000 fd07 	bl	8001a48 <HAL_ADC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001040:	f000 f99a 	bl	8001378 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_ADC1_Init+0xa4>)
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_ADC1_Init+0x98>)
 8001056:	f000 fd3b 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 f98a 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000590 	.word	0x20000590
 8001070:	40012000 	.word	0x40012000
 8001074:	0f000001 	.word	0x0f000001
 8001078:	10000012 	.word	0x10000012

0800107c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_SPI3_Init+0x64>)
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_SPI3_Init+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_SPI3_Init+0x64>)
 8001088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_SPI3_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_SPI3_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SPI3_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010b0:	2210      	movs	r2, #16
 80010b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010c8:	220a      	movs	r2, #10
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_SPI3_Init+0x64>)
 80010ce:	f003 fc35 	bl	800493c <HAL_SPI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80010d8:	f000 f94e 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000538 	.word	0x20000538
 80010e4:	40003c00 	.word	0x40003c00

080010e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <MX_TIM2_Init+0xc4>)
 800110c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_TIM2_Init+0xc4>)
 8001114:	2259      	movs	r2, #89	; 0x59
 8001116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_TIM2_Init+0xc4>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_TIM2_Init+0xc4>)
 8001120:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_TIM2_Init+0xc4>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_TIM2_Init+0xc4>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001132:	481e      	ldr	r0, [pc, #120]	; (80011ac <MX_TIM2_Init+0xc4>)
 8001134:	f003 fcb5 	bl	8004aa2 <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800113e:	f000 f91b 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	4619      	mov	r1, r3
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <MX_TIM2_Init+0xc4>)
 8001152:	f004 f917 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800115c:	f000 f90c 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_TIM2_Init+0xc4>)
 800117a:	f003 fdc5 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001184:	f000 f8f8 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	220c      	movs	r2, #12
 800118c:	4619      	mov	r1, r3
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <MX_TIM2_Init+0xc4>)
 8001190:	f003 fdba 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800119a:	f000 f8ed 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <MX_TIM2_Init+0xc4>)
 80011a0:	f000 fa74 	bl	800168c <HAL_TIM_MspPostInit>

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000630 	.word	0x20000630

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b5d      	ldr	r3, [pc, #372]	; (8001340 <MX_GPIO_Init+0x190>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a5c      	ldr	r2, [pc, #368]	; (8001340 <MX_GPIO_Init+0x190>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b5a      	ldr	r3, [pc, #360]	; (8001340 <MX_GPIO_Init+0x190>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b56      	ldr	r3, [pc, #344]	; (8001340 <MX_GPIO_Init+0x190>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a55      	ldr	r2, [pc, #340]	; (8001340 <MX_GPIO_Init+0x190>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b53      	ldr	r3, [pc, #332]	; (8001340 <MX_GPIO_Init+0x190>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <MX_GPIO_Init+0x190>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <MX_GPIO_Init+0x190>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b4c      	ldr	r3, [pc, #304]	; (8001340 <MX_GPIO_Init+0x190>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <MX_GPIO_Init+0x190>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a47      	ldr	r2, [pc, #284]	; (8001340 <MX_GPIO_Init+0x190>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b45      	ldr	r3, [pc, #276]	; (8001340 <MX_GPIO_Init+0x190>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <MX_GPIO_Init+0x190>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a40      	ldr	r2, [pc, #256]	; (8001340 <MX_GPIO_Init+0x190>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <MX_GPIO_Init+0x190>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2110      	movs	r1, #16
 8001256:	483b      	ldr	r0, [pc, #236]	; (8001344 <MX_GPIO_Init+0x194>)
 8001258:	f001 f8dc 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001262:	4839      	ldr	r0, [pc, #228]	; (8001348 <MX_GPIO_Init+0x198>)
 8001264:	f001 f8d6 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126e:	4837      	ldr	r0, [pc, #220]	; (800134c <MX_GPIO_Init+0x19c>)
 8001270:	f001 f8d0 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	4833      	ldr	r0, [pc, #204]	; (8001348 <MX_GPIO_Init+0x198>)
 800127a:	f001 f8cb 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 800127e:	2310      	movs	r3, #16
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <MX_GPIO_Init+0x194>)
 8001296:	f000 ff2b 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 800129a:	2320      	movs	r3, #32
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <MX_GPIO_Init+0x194>)
 80012ae:	f000 ff1f 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 80012b2:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	481f      	ldr	r0, [pc, #124]	; (8001348 <MX_GPIO_Init+0x198>)
 80012cc:	f000 ff10 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 80012d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_GPIO_Init+0x19c>)
 80012ea:	f000 ff01 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4810      	ldr	r0, [pc, #64]	; (8001344 <MX_GPIO_Init+0x194>)
 8001304:	f000 fef4 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8001308:	2304      	movs	r3, #4
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_GPIO_Init+0x1a0>)
 800131c:	f000 fee8 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8001320:	2310      	movs	r3, #16
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_GPIO_Init+0x198>)
 8001334:	f000 fedc 	bl	80020f0 <HAL_GPIO_Init>

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40020800 	.word	0x40020800
 8001348:	40020400 	.word	0x40020400
 800134c:	40020000 	.word	0x40020000
 8001350:	40020c00 	.word	0x40020c00

08001354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001366:	f000 fb2d 	bl	80019c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40010000 	.word	0x40010000

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800137e:	e7fe      	b.n	800137e <Error_Handler+0x6>

08001380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_MspInit+0x54>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_MspInit+0x54>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x54>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_MspInit+0x54>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_MspInit+0x54>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_MspInit+0x54>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	210f      	movs	r1, #15
 80013c2:	f06f 0001 	mvn.w	r0, #1
 80013c6:	f000 fe69 	bl	800209c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_ADC_MspInit+0x7c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d127      	bne.n	800144a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_ADC_MspInit+0x80>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <HAL_ADC_MspInit+0x80>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_ADC_MspInit+0x80>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_ADC_MspInit+0x80>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_ADC_MspInit+0x80>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_ADC_MspInit+0x80>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8001432:	2304      	movs	r3, #4
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	2303      	movs	r3, #3
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_ADC_MspInit+0x84>)
 8001446:	f000 fe53 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40012000 	.word	0x40012000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020800 	.word	0x40020800

08001460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a5b      	ldr	r2, [pc, #364]	; (80015ec <HAL_SPI_MspInit+0x18c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a59      	ldr	r2, [pc, #356]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 800148c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014ba:	23e0      	movs	r3, #224	; 0xe0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ca:	2305      	movs	r3, #5
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	4847      	ldr	r0, [pc, #284]	; (80015f4 <HAL_SPI_MspInit+0x194>)
 80014d6:	f000 fe0b 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014da:	e082      	b.n	80015e2 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_SPI_MspInit+0x198>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12d      	bne.n	8001542 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a40      	ldr	r2, [pc, #256]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a39      	ldr	r2, [pc, #228]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800151e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001530:	2305      	movs	r3, #5
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4830      	ldr	r0, [pc, #192]	; (80015fc <HAL_SPI_MspInit+0x19c>)
 800153c:	f000 fdd8 	bl	80020f0 <HAL_GPIO_Init>
}
 8001540:	e04f      	b.n	80015e2 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <HAL_SPI_MspInit+0x1a0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d14a      	bne.n	80015e2 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_SPI_MspInit+0x190>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015b2:	2306      	movs	r3, #6
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <HAL_SPI_MspInit+0x1a4>)
 80015be:	f000 fd97 	bl	80020f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015c2:	2320      	movs	r3, #32
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015d2:	2306      	movs	r3, #6
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <HAL_SPI_MspInit+0x19c>)
 80015de:	f000 fd87 	bl	80020f0 <HAL_GPIO_Init>
}
 80015e2:	bf00      	nop
 80015e4:	3738      	adds	r7, #56	; 0x38
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40013000 	.word	0x40013000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40003800 	.word	0x40003800
 80015fc:	40020400 	.word	0x40020400
 8001600:	40003c00 	.word	0x40003c00
 8001604:	40020800 	.word	0x40020800

08001608 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d10d      	bne.n	8001636 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_PWM_MspInit+0x3c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a08      	ldr	r2, [pc, #32]	; (8001644 <HAL_TIM_PWM_MspInit+0x3c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_TIM_PWM_MspInit+0x3c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_TIM_Base_MspInit+0x3c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d10d      	bne.n	8001676 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_TIM_Base_MspInit+0x40>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_TIM_Base_MspInit+0x40>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_TIM_Base_MspInit+0x40>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40000400 	.word	0x40000400
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ac:	d11e      	bne.n	80016ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a30      	ldr	r2, [pc, #192]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016ca:	2309      	movs	r3, #9
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016da:	2301      	movs	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4825      	ldr	r0, [pc, #148]	; (800177c <HAL_TIM_MspPostInit+0xf0>)
 80016e6:	f000 fd03 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016ea:	e041      	b.n	8001770 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a23      	ldr	r2, [pc, #140]	; (8001780 <HAL_TIM_MspPostInit+0xf4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d13c      	bne.n	8001770 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_TIM_MspPostInit+0xec>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800173e:	2302      	movs	r3, #2
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <HAL_TIM_MspPostInit+0xf8>)
 800174a:	f000 fcd1 	bl	80020f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800174e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001760:	2302      	movs	r3, #2
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <HAL_TIM_MspPostInit+0xfc>)
 800176c:	f000 fcc0 	bl	80020f0 <HAL_GPIO_Init>
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40000400 	.word	0x40000400
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800

0800178c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	2019      	movs	r0, #25
 80017a2:	f000 fc7b 	bl	800209c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017a6:	2019      	movs	r0, #25
 80017a8:	f000 fc94 	bl	80020d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_InitTick+0xa4>)
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <HAL_InitTick+0xa4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6453      	str	r3, [r2, #68]	; 0x44
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_InitTick+0xa4>)
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c8:	f107 0210 	add.w	r2, r7, #16
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 f95c 	bl	8003a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80017d8:	f002 f946 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 80017dc:	4603      	mov	r3, r0
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_InitTick+0xa8>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	3b01      	subs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_InitTick+0xac>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <HAL_InitTick+0xb0>)
 80017f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_InitTick+0xac>)
 80017f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_InitTick+0xac>)
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_InitTick+0xac>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_InitTick+0xac>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <HAL_InitTick+0xac>)
 8001812:	f003 f8f7 	bl	8004a04 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d104      	bne.n	8001826 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800181c:	4806      	ldr	r0, [pc, #24]	; (8001838 <HAL_InitTick+0xac>)
 800181e:	f003 f91c 	bl	8004a5a <HAL_TIM_Base_Start_IT>
 8001822:	4603      	mov	r3, r0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3730      	adds	r7, #48	; 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	431bde83 	.word	0x431bde83
 8001838:	20000674 	.word	0x20000674
 800183c:	40010000 	.word	0x40010000

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001872:	f003 f941 	bl	8004af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000674 	.word	0x20000674

08001880 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <OTG_FS_IRQHandler+0x10>)
 8001886:	f000 ff35 	bl	80026f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20001b88 	.word	0x20001b88

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f007 fca4 	bl	8009210 <__errno>
 80018c8:	4602      	mov	r2, r0
 80018ca:	230c      	movs	r3, #12
 80018cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20020000 	.word	0x20020000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	20000384 	.word	0x20000384
 80018fc:	20001f98 	.word	0x20001f98

08001900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <SystemInit+0x28>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <SystemInit+0x28>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SystemInit+0x28>)
 8001916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800191a:	609a      	str	r2, [r3, #8]
#endif
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001930:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001932:	e003      	b.n	800193c <LoopCopyDataInit>

08001934 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001936:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001938:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800193a:	3104      	adds	r1, #4

0800193c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800193c:	480b      	ldr	r0, [pc, #44]	; (800196c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001940:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001942:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001944:	d3f6      	bcc.n	8001934 <CopyDataInit>
  ldr  r2, =_sbss
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001948:	e002      	b.n	8001950 <LoopFillZerobss>

0800194a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800194a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800194c:	f842 3b04 	str.w	r3, [r2], #4

08001950 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001952:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001954:	d3f9      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001956:	f7ff ffd3 	bl	8001900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195a:	f007 fc5f 	bl	800921c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7ff fa73 	bl	8000e48 <main>
  bx  lr    
 8001962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001968:	0800b520 	.word	0x0800b520
  ldr  r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001970:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 8001974:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 8001978:	20001f94 	.word	0x20001f94

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_Init+0x40>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_Init+0x40>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x40>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 fb6c 	bl	8002086 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff feec 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fce4 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	200006b4 	.word	0x200006b4

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200006b4 	.word	0x200006b4

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_Delay+0x40>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000008 	.word	0x20000008

08001a48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e033      	b.n	8001ac6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fcb6 	bl	80013d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a8e:	f023 0302 	bic.w	r3, r3, #2
 8001a92:	f043 0202 	orr.w	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f94a 	bl	8001d34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab6:	e001      	b.n	8001abc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1c>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e113      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x244>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d925      	bls.n	8001b48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68d9      	ldr	r1, [r3, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b1e      	subs	r3, #30
 8001b12:	2207      	movs	r2, #7
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	400a      	ands	r2, r1
 8001b20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68d9      	ldr	r1, [r3, #12]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	4603      	mov	r3, r0
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4403      	add	r3, r0
 8001b3a:	3b1e      	subs	r3, #30
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	e022      	b.n	8001b8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	400a      	ands	r2, r1
 8001b6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6919      	ldr	r1, [r3, #16]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4403      	add	r3, r0
 8001b84:	409a      	lsls	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d824      	bhi.n	8001be0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b05      	subs	r3, #5
 8001ba8:	221f      	movs	r2, #31
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b05      	subs	r3, #5
 8001bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bde:	e04c      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d824      	bhi.n	8001c32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b23      	subs	r3, #35	; 0x23
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43da      	mvns	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	400a      	ands	r2, r1
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b23      	subs	r3, #35	; 0x23
 8001c24:	fa00 f203 	lsl.w	r2, r0, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c30:	e023      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	3b41      	subs	r3, #65	; 0x41
 8001c44:	221f      	movs	r2, #31
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	400a      	ands	r2, r1
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b41      	subs	r3, #65	; 0x41
 8001c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <HAL_ADC_ConfigChannel+0x250>)
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_ADC_ConfigChannel+0x254>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10f      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1d8>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_ADC_ConfigChannel+0x254>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12b      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x23a>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <HAL_ADC_ConfigChannel+0x258>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <HAL_ADC_ConfigChannel+0x1f4>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b11      	cmp	r3, #17
 8001cc2:	d122      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_ADC_ConfigChannel+0x258>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d111      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_ADC_ConfigChannel+0x25c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_ADC_ConfigChannel+0x260>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9a      	lsrs	r2, r3, #18
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40012300 	.word	0x40012300
 8001d24:	40012000 	.word	0x40012000
 8001d28:	10000012 	.word	0x10000012
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3c:	4b79      	ldr	r3, [pc, #484]	; (8001f24 <ADC_Init+0x1f0>)
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6899      	ldr	r1, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <ADC_Init+0x1f4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d022      	beq.n	8001e12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6899      	ldr	r1, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	e00f      	b.n	8001e32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0202 	bic.w	r2, r2, #2
 8001e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e1b      	ldrb	r3, [r3, #24]
 8001e4c:	005a      	lsls	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	035a      	lsls	r2, r3, #13
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	e007      	b.n	8001ea8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	051a      	lsls	r2, r3, #20
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eea:	025a      	lsls	r2, r3, #9
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	029a      	lsls	r2, r3, #10
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40012300 	.word	0x40012300
 8001f28:	0f000001 	.word	0x0f000001

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_EnableIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff4c 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ae:	f7ff ff61 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f7ff ffb1 	bl	8002020 <NVIC_EncodePriority>
 80020be:	4602      	mov	r2, r0
 80020c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff80 	bl	8001fcc <__NVIC_SetPriority>
}
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff54 	bl	8001f90 <__NVIC_EnableIRQ>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e165      	b.n	80023d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8154 	bne.w	80023d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00b      	beq.n	800214a <HAL_GPIO_Init+0x5a>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213e:	2b11      	cmp	r3, #17
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b12      	cmp	r3, #18
 8002148:	d130      	bne.n	80021ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0201 	and.w	r2, r3, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0xfc>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80ae 	beq.w	80023d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_GPIO_Init+0x2fc>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a5b      	ldr	r2, [pc, #364]	; (80023ec <HAL_GPIO_Init+0x2fc>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_GPIO_Init+0x2fc>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <HAL_GPIO_Init+0x300>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4e      	ldr	r2, [pc, #312]	; (80023f4 <HAL_GPIO_Init+0x304>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_Init+0x21a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4d      	ldr	r2, [pc, #308]	; (80023f8 <HAL_GPIO_Init+0x308>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_Init+0x216>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4c      	ldr	r2, [pc, #304]	; (80023fc <HAL_GPIO_Init+0x30c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x212>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4b      	ldr	r2, [pc, #300]	; (8002400 <HAL_GPIO_Init+0x310>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4a      	ldr	r2, [pc, #296]	; (8002404 <HAL_GPIO_Init+0x314>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x20a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a49      	ldr	r2, [pc, #292]	; (8002408 <HAL_GPIO_Init+0x318>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x206>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a48      	ldr	r2, [pc, #288]	; (800240c <HAL_GPIO_Init+0x31c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x202>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00c      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e00a      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e008      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x21c>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x21c>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x21c>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x21c>
 800230a:	2300      	movs	r3, #0
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	4934      	ldr	r1, [pc, #208]	; (80023f0 <HAL_GPIO_Init+0x300>)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_GPIO_Init+0x320>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234e:	4a30      	ldr	r2, [pc, #192]	; (8002410 <HAL_GPIO_Init+0x320>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <HAL_GPIO_Init+0x320>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_GPIO_Init+0x320>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_GPIO_Init+0x320>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a2:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <HAL_GPIO_Init+0x320>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_GPIO_Init+0x320>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023cc:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_GPIO_Init+0x320>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	f67f ae96 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002430:	e003      	b.n	800243a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	041a      	lsls	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002446:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002448:	b08f      	sub	sp, #60	; 0x3c
 800244a:	af0a      	add	r7, sp, #40	; 0x28
 800244c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e116      	b.n	8002686 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f006 fb82 	bl	8008b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 f919 	bl	80056ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	687e      	ldr	r6, [r7, #4]
 80024a4:	466d      	mov	r5, sp
 80024a6:	f106 0410 	add.w	r4, r6, #16
 80024aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ba:	1d33      	adds	r3, r6, #4
 80024bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024be:	6838      	ldr	r0, [r7, #0]
 80024c0:	f002 fff0 	bl	80054a4 <USB_CoreInit>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0d7      	b.n	8002686 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 f907 	bl	80056f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e04a      	b.n	800257e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	333d      	adds	r3, #61	; 0x3d
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	333c      	adds	r3, #60	; 0x3c
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	b298      	uxth	r0, r3
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3342      	adds	r3, #66	; 0x42
 8002524:	4602      	mov	r2, r0
 8002526:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	333f      	adds	r3, #63	; 0x3f
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3344      	adds	r3, #68	; 0x44
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3348      	adds	r3, #72	; 0x48
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3350      	adds	r3, #80	; 0x50
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3301      	adds	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3af      	bcc.n	80024e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e044      	b.n	8002618 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	3301      	adds	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d3b5      	bcc.n	800258e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	687e      	ldr	r6, [r7, #4]
 800262a:	466d      	mov	r5, sp
 800262c:	f106 0410 	add.w	r4, r6, #16
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002638:	e894 0003 	ldmia.w	r4, {r0, r1}
 800263c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002640:	1d33      	adds	r3, r6, #4
 8002642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002644:	6838      	ldr	r0, [r7, #0]
 8002646:	f003 f87d 	bl	8005744 <USB_DevInit>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e014      	b.n	8002686 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	2b01      	cmp	r3, #1
 8002672:	d102      	bne.n	800267a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f001 f891 	bl	800379c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f004 f8b8 	bl	80067f4 <USB_DevDisconnect>

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_PCD_Start+0x1c>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e020      	b.n	80026ec <HAL_PCD_Start+0x5e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d109      	bne.n	80026ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d005      	beq.n	80026ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f002 ffea 	bl	80056ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 f868 	bl	80067b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b08d      	sub	sp, #52	; 0x34
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 f926 	bl	800695c <USB_GetMode>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 83ca 	bne.w	8002eac <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f004 f88a 	bl	8006836 <USB_ReadInterrupts>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 83c0 	beq.w	8002eaa <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f004 f881 	bl	8006836 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 0202 	and.w	r2, r2, #2
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 f86f 	bl	8006836 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b10      	cmp	r3, #16
 8002760:	d161      	bne.n	8002826 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0210 	bic.w	r2, r2, #16
 8002770:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	3304      	adds	r3, #4
 8002790:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	0c5b      	lsrs	r3, r3, #17
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	2b02      	cmp	r3, #2
 800279c:	d124      	bne.n	80027e8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d035      	beq.n	8002816 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	6a38      	ldr	r0, [r7, #32]
 80027be:	f003 fed5 	bl	800656c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ce:	441a      	add	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e0:	441a      	add	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	619a      	str	r2, [r3, #24]
 80027e6:	e016      	b.n	8002816 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	0c5b      	lsrs	r3, r3, #17
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	2b06      	cmp	r3, #6
 80027f2:	d110      	bne.n	8002816 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027fa:	2208      	movs	r2, #8
 80027fc:	4619      	mov	r1, r3
 80027fe:	6a38      	ldr	r0, [r7, #32]
 8002800:	f003 feb4 	bl	800656c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002810:	441a      	add	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0210 	orr.w	r2, r2, #16
 8002824:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f004 f803 	bl	8006836 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002836:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800283a:	d16e      	bne.n	800291a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f004 f809 	bl	800685c <USB_ReadDevAllOutEpInterrupt>
 800284a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800284c:	e062      	b.n	8002914 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d057      	beq.n	8002908 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f004 f82e 	bl	80068c4 <USB_ReadDevOutEPInterrupt>
 8002868:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00c      	beq.n	800288e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002880:	461a      	mov	r2, r3
 8002882:	2301      	movs	r3, #1
 8002884:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fddd 	bl	8003448 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	2308      	movs	r3, #8
 80028a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fed7 	bl	8003660 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c8:	461a      	mov	r2, r3
 80028ca:	2310      	movs	r3, #16
 80028cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2320      	movs	r3, #32
 80028e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002900:	461a      	mov	r2, r3
 8002902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002906:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	3301      	adds	r3, #1
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	d199      	bne.n	800284e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 ff89 	bl	8006836 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800292e:	f040 80c0 	bne.w	8002ab2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 ffaa 	bl	8006890 <USB_ReadDevAllInEpInterrupt>
 800293c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002942:	e0b2      	b.n	8002aaa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80a7 	beq.w	8002a9e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 ffd0 	bl	8006900 <USB_ReadDevInEPInterrupt>
 8002960:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d057      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800298c:	4013      	ands	r3, r2
 800298e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299c:	461a      	mov	r2, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d132      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3348      	adds	r3, #72	; 0x48
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4403      	add	r3, r0
 80029ca:	3344      	adds	r3, #68	; 0x44
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4419      	add	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4403      	add	r3, r0
 80029de:	3348      	adds	r3, #72	; 0x48
 80029e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d113      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x31c>
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3350      	adds	r3, #80	; 0x50
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	f003 ffd8 	bl	80069c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f006 f931 	bl	8008c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a32:	461a      	mov	r2, r3
 8002a34:	2308      	movs	r3, #8
 8002a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2310      	movs	r3, #16
 8002a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a86:	461a      	mov	r2, r3
 8002a88:	2302      	movs	r3, #2
 8002a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fc48 	bl	800332e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f47f af49 	bne.w	8002944 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 febd 	bl	8006836 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ac6:	d122      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002aee:	2100      	movs	r1, #0
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f006 fb13 	bl	800911c <HAL_PCDEx_LPM_Callback>
 8002af6:	e002      	b.n	8002afe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f006 f937 	bl	8008d6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fe8f 	bl	8006836 <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b22:	d112      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f006 f8f3 	bl	8008d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b48:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 fe71 	bl	8006836 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5e:	d121      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b6e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d111      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b94:	2101      	movs	r1, #1
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f006 fac0 	bl	800911c <HAL_PCDEx_LPM_Callback>
 8002b9c:	e002      	b.n	8002ba4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f006 f8be 	bl	8008d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fe44 	bl	8006836 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	f040 80c7 	bne.w	8002d4a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 ff12 	bl	8005a00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	e056      	b.n	8002c90 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c06:	0151      	lsls	r1, r2, #5
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c14:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c26:	0151      	lsls	r1, r2, #5
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	440a      	add	r2, r1
 8002c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c42:	461a      	mov	r2, r3
 8002c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5a:	0151      	lsls	r1, r2, #5
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	440a      	add	r2, r1
 8002c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7a:	0151      	lsls	r1, r2, #5
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	440a      	add	r2, r1
 8002c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3a3      	bcc.n	8002be2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc6:	f043 030b 	orr.w	r3, r3, #11
 8002cca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cdc:	f043 030b 	orr.w	r3, r3, #11
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	e015      	b.n	8002d10 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0a:	f043 030b 	orr.w	r3, r3, #11
 8002d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d34:	461a      	mov	r2, r3
 8002d36:	f003 fe43 	bl	80069c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fd71 	bl	8006836 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	d124      	bne.n	8002daa <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fe07 	bl	8006978 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 fea7 	bl	8005ac2 <USB_GetDevSpeed>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681c      	ldr	r4, [r3, #0]
 8002d80:	f000 fe66 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8002d84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f002 fbea 	bl	8005568 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f005 ff9a 	bl	8008cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fd41 	bl	8006836 <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f005 ff77 	bl	8008cb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f002 0208 	and.w	r2, r2, #8
 8002dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fd2c 	bl	8006836 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de8:	d10f      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 ffd9 	bl	8008dac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 fd11 	bl	8006836 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1e:	d10f      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f005 ffac 	bl	8008d88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fcf6 	bl	8006836 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d10a      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f005 ffba 	bl	8008dd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fce0 	bl	8006836 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d115      	bne.n	8002eac <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f005 ffaa 	bl	8008dec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	e000      	b.n	8002eac <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002eaa:	bf00      	nop
    }
  }
}
 8002eac:	3734      	adds	r7, #52	; 0x34
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_PCD_SetAddress+0x1a>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e013      	b.n	8002ef4 <HAL_PCD_SetAddress+0x42>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 fc3e 	bl	8006766 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	70fb      	strb	r3, [r7, #3]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	803b      	strh	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da0f      	bge.n	8002f42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3338      	adds	r3, #56	; 0x38
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	705a      	strb	r2, [r3, #1]
 8002f40:	e00f      	b.n	8002f62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 020f 	and.w	r2, r3, #15
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f6e:	883a      	ldrh	r2, [r7, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	78ba      	ldrb	r2, [r7, #2]
 8002f78:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f8c:	78bb      	ldrb	r3, [r7, #2]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d102      	bne.n	8002f98 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_PCD_EP_Open+0xaa>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e00e      	b.n	8002fc4 <HAL_PCD_EP_Open+0xc8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f002 fda9 	bl	8005b0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da0f      	bge.n	8003000 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 020f 	and.w	r2, r3, #15
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3338      	adds	r3, #56	; 0x38
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	705a      	strb	r2, [r3, #1]
 8002ffe:	e00f      	b.n	8003020 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_EP_Close+0x6e>
 8003036:	2302      	movs	r3, #2
 8003038:	e00e      	b.n	8003058 <HAL_PCD_EP_Close+0x8c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	4618      	mov	r0, r3
 800304a:	f002 fde7 	bl	8005c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2200      	movs	r2, #0
 80030a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a2:	7afb      	ldrb	r3, [r7, #11]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	6979      	ldr	r1, [r7, #20]
 80030d4:	f003 f8c2 	bl	800625c <USB_EP0StartXfer>
 80030d8:	e008      	b.n	80030ec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	f002 fe74 	bl	8005dd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003118:	681b      	ldr	r3, [r3, #0]
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	460b      	mov	r3, r1
 8003134:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f003 020f 	and.w	r2, r3, #15
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3338      	adds	r3, #56	; 0x38
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003166:	7afb      	ldrb	r3, [r7, #11]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	b2da      	uxtb	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003180:	7afb      	ldrb	r3, [r7, #11]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6979      	ldr	r1, [r7, #20]
 8003198:	f003 f860 	bl	800625c <USB_EP0StartXfer>
 800319c:	e008      	b.n	80031b0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	6979      	ldr	r1, [r7, #20]
 80031ac:	f002 fe12 	bl	8005dd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d901      	bls.n	80031d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e050      	b.n	800327a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da0f      	bge.n	8003200 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	3304      	adds	r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	705a      	strb	r2, [r3, #1]
 80031fe:	e00d      	b.n	800321c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_PCD_EP_SetStall+0x82>
 8003238:	2302      	movs	r3, #2
 800323a:	e01e      	b.n	800327a <HAL_PCD_EP_SetStall+0xc0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68f9      	ldr	r1, [r7, #12]
 800324a:	4618      	mov	r0, r3
 800324c:	f003 f9b7 	bl	80065be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	b2d9      	uxtb	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800326a:	461a      	mov	r2, r3
 800326c:	f003 fba8 	bl	80069c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d901      	bls.n	80032a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e042      	b.n	8003326 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da0f      	bge.n	80032c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3338      	adds	r3, #56	; 0x38
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	705a      	strb	r2, [r3, #1]
 80032c6:	e00f      	b.n	80032e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_PCD_EP_ClrStall+0x86>
 8003304:	2302      	movs	r3, #2
 8003306:	e00e      	b.n	8003326 <HAL_PCD_EP_ClrStall+0xa4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 f9bf 	bl	800669a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b08a      	sub	sp, #40	; 0x28
 8003332:	af02      	add	r7, sp, #8
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3338      	adds	r3, #56	; 0x38
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	429a      	cmp	r2, r3
 8003360:	d901      	bls.n	8003366 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06c      	b.n	8003440 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	429a      	cmp	r2, r3
 800337a:	d902      	bls.n	8003382 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3303      	adds	r3, #3
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800338a:	e02b      	b.n	80033e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d902      	bls.n	80033a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3303      	adds	r3, #3
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68d9      	ldr	r1, [r3, #12]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4603      	mov	r3, r0
 80033c6:	6978      	ldr	r0, [r7, #20]
 80033c8:	f003 f89b 	bl	8006502 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	441a      	add	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	441a      	add	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d809      	bhi.n	800340e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003402:	429a      	cmp	r2, r3
 8003404:	d203      	bcs.n	800340e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1be      	bne.n	800338c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	429a      	cmp	r2, r3
 8003418:	d811      	bhi.n	800343e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	2201      	movs	r2, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	43db      	mvns	r3, r3
 8003434:	6939      	ldr	r1, [r7, #16]
 8003436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800343a:	4013      	ands	r3, r2
 800343c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	333c      	adds	r3, #60	; 0x3c
 8003460:	3304      	adds	r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b01      	cmp	r3, #1
 800347c:	f040 80a0 	bne.w	80035c0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d015      	beq.n	80034b6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a72      	ldr	r2, [pc, #456]	; (8003658 <PCD_EP_OutXfrComplete_int+0x210>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f240 80dd 	bls.w	800364e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80d7 	beq.w	800364e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ac:	461a      	mov	r2, r3
 80034ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b2:	6093      	str	r3, [r2, #8]
 80034b4:	e0cb      	b.n	800364e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	2320      	movs	r3, #32
 80034d0:	6093      	str	r3, [r2, #8]
 80034d2:	e0bc      	b.n	800364e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 80b7 	bne.w	800364e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <PCD_EP_OutXfrComplete_int+0x210>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d90f      	bls.n	8003508 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003504:	6093      	str	r3, [r2, #8]
 8003506:	e0a2      	b.n	800364e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800351a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	0159      	lsls	r1, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	440b      	add	r3, r1
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800352e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4403      	add	r3, r0
 800353e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003542:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4419      	add	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4403      	add	r3, r0
 800357c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003580:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d114      	bne.n	80035b2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035aa:	461a      	mov	r2, r3
 80035ac:	2101      	movs	r1, #1
 80035ae:	f003 fa07 	bl	80069c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f005 fb45 	bl	8008c48 <HAL_PCD_DataOutStageCallback>
 80035be:	e046      	b.n	800364e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a26      	ldr	r2, [pc, #152]	; (800365c <PCD_EP_OutXfrComplete_int+0x214>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d124      	bne.n	8003612 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035de:	461a      	mov	r2, r3
 80035e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e4:	6093      	str	r3, [r2, #8]
 80035e6:	e032      	b.n	800364e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	461a      	mov	r2, r3
 8003600:	2320      	movs	r3, #32
 8003602:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f005 fb1c 	bl	8008c48 <HAL_PCD_DataOutStageCallback>
 8003610:	e01d      	b.n	800364e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d114      	bne.n	8003642 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d108      	bne.n	8003642 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800363a:	461a      	mov	r2, r3
 800363c:	2100      	movs	r1, #0
 800363e:	f003 f9bf 	bl	80069c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f005 fafd 	bl	8008c48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	4f54300a 	.word	0x4f54300a
 800365c:	4f54310a 	.word	0x4f54310a

08003660 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	333c      	adds	r3, #60	; 0x3c
 8003678:	3304      	adds	r3, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d90e      	bls.n	80036b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ac:	461a      	mov	r2, r3
 80036ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f005 fab5 	bl	8008c24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d90c      	bls.n	80036dc <PCD_EP_OutSetupPacket_int+0x7c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d108      	bne.n	80036dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036d4:	461a      	mov	r2, r3
 80036d6:	2101      	movs	r1, #1
 80036d8:	f003 f972 	bl	80069c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	4f54300a 	.word	0x4f54300a

080036ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
 80036f8:	4613      	mov	r3, r2
 80036fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d107      	bne.n	800371a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800370a:	883b      	ldrh	r3, [r7, #0]
 800370c:	0419      	lsls	r1, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	430a      	orrs	r2, r1
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
 8003718:	e028      	b.n	800376c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4413      	add	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e00d      	b.n	800374a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	3340      	adds	r3, #64	; 0x40
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4413      	add	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	3301      	adds	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	3b01      	subs	r3, #1
 8003750:	429a      	cmp	r2, r3
 8003752:	d3ec      	bcc.n	800372e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003754:	883b      	ldrh	r3, [r7, #0]
 8003756:	0418      	lsls	r0, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6819      	ldr	r1, [r3, #0]
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	3b01      	subs	r3, #1
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	4302      	orrs	r2, r0
 8003764:	3340      	adds	r3, #64	; 0x40
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ce:	f043 0303 	orr.w	r3, r3, #3
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_PWREx_EnableOverDrive+0x90>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <HAL_PWREx_EnableOverDrive+0x90>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_PWREx_EnableOverDrive+0x90>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_PWREx_EnableOverDrive+0x94>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003810:	f7fe f8ec 	bl	80019ec <HAL_GetTick>
 8003814:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003816:	e009      	b.n	800382c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003818:	f7fe f8e8 	bl	80019ec <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003826:	d901      	bls.n	800382c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e01f      	b.n	800386c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <HAL_PWREx_EnableOverDrive+0x98>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d1ee      	bne.n	8003818 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003840:	f7fe f8d4 	bl	80019ec <HAL_GetTick>
 8003844:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003846:	e009      	b.n	800385c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003848:	f7fe f8d0 	bl	80019ec <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003856:	d901      	bls.n	800385c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e007      	b.n	800386c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_PWREx_EnableOverDrive+0x98>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003868:	d1ee      	bne.n	8003848 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	420e0040 	.word	0x420e0040
 800387c:	40007000 	.word	0x40007000
 8003880:	420e0044 	.word	0x420e0044

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0cc      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d90c      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b65      	ldr	r3, [pc, #404]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d8:	4b59      	ldr	r3, [pc, #356]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a58      	ldr	r2, [pc, #352]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f0:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	494d      	ldr	r1, [pc, #308]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d044      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d119      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b3b      	ldr	r3, [pc, #236]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e067      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4934      	ldr	r1, [pc, #208]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003974:	f7fe f83a 	bl	80019ec <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	e00a      	b.n	8003992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7fe f836 	bl	80019ec <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 020c 	and.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1eb      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20c      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4916      	ldr	r1, [pc, #88]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	490e      	ldr	r1, [pc, #56]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0a:	f000 fb9d 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	5cd3      	ldrb	r3, [r2, r3]
 8003a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd feae 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	40023800 	.word	0x40023800
 8003a44:	0800b26c 	.word	0x0800b26c
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000004 	.word	0x20000004

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000000 	.word	0x20000000

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4601      	mov	r1, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0b5b      	lsrs	r3, r3, #13
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4a03      	ldr	r2, [pc, #12]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	0800b27c 	.word	0x0800b27c

08003a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0203 	and.w	r2, r3, #3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_GetClockConfig+0x5c>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <HAL_RCC_GetClockConfig+0x60>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 020f 	and.w	r2, r3, #15
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40023c00 	.word	0x40023c00

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	; 0x30
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b32:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	496c      	ldr	r1, [pc, #432]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003b5a:	4b64      	ldr	r3, [pc, #400]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	4960      	ldr	r1, [pc, #384]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d017      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b88:	4b58      	ldr	r3, [pc, #352]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4955      	ldr	r1, [pc, #340]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d101      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d017      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	4946      	ldr	r1, [pc, #280]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d101      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003be4:	2301      	movs	r3, #1
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 808a 	beq.w	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a38      	ldr	r2, [pc, #224]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c1e:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c2a:	f7fd fedf 	bl	80019ec <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd fedb 	bl	80019ec <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e278      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c50:	4b26      	ldr	r3, [pc, #152]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02f      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d028      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6e:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c78:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d114      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fd fea9 	bl	80019ec <HAL_GetTick>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fd fea5 	bl	80019ec <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e240      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ee      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ccc:	d114      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce2:	4902      	ldr	r1, [pc, #8]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]
 8003ce8:	e00c      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	42470e40 	.word	0x42470e40
 8003cf8:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d02:	6093      	str	r3, [r2, #8]
 8003d04:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	4944      	ldr	r1, [pc, #272]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003d28:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d2a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003d38:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d46:	4937      	ldr	r1, [pc, #220]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d5a:	4b32      	ldr	r3, [pc, #200]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d60:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d68:	492e      	ldr	r1, [pc, #184]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d7c:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d82:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	4926      	ldr	r1, [pc, #152]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	491a      	ldr	r1, [pc, #104]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	4911      	ldr	r1, [pc, #68]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003dee:	2301      	movs	r3, #1
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d005      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	f040 80ff 	bne.w	8004002 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e0a:	f7fd fdef 	bl	80019ec <HAL_GetTick>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e10:	e00e      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e12:	f7fd fdeb 	bl	80019ec <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d907      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e188      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e24:	40023800 	.word	0x40023800
 8003e28:	424711e0 	.word	0x424711e0
 8003e2c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e30:	4b7e      	ldr	r3, [pc, #504]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ea      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d028      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d124      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e64:	4b71      	ldr	r3, [pc, #452]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6a:	0c1b      	lsrs	r3, r3, #16
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	3301      	adds	r3, #1
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e76:	4b6d      	ldr	r3, [pc, #436]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7c:	0e1b      	lsrs	r3, r3, #24
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	3b01      	subs	r3, #1
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	061b      	lsls	r3, r3, #24
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	071b      	lsls	r3, r3, #28
 8003ea6:	4961      	ldr	r1, [pc, #388]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d035      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d130      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eec:	4b4f      	ldr	r3, [pc, #316]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef2:	0f1b      	lsrs	r3, r3, #28
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	019b      	lsls	r3, r3, #6
 8003f04:	431a      	orrs	r2, r3
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	041b      	lsls	r3, r3, #16
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	431a      	orrs	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	071b      	lsls	r3, r3, #28
 8003f1c:	4943      	ldr	r1, [pc, #268]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f24:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f2a:	f023 021f 	bic.w	r2, r3, #31
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	493d      	ldr	r1, [pc, #244]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d029      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f50:	d124      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f52:	4b36      	ldr	r3, [pc, #216]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6a:	0f1b      	lsrs	r3, r3, #28
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	019b      	lsls	r3, r3, #6
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	3b01      	subs	r3, #1
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	071b      	lsls	r3, r3, #28
 8003f94:	4925      	ldr	r1, [pc, #148]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d016      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	071b      	lsls	r3, r3, #28
 8003fce:	4917      	ldr	r1, [pc, #92]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fd06 	bl	80019ec <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fe4:	f7fd fd02 	bl	80019ec <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e09f      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 8095 	bne.w	8004134 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004010:	f7fd fcec 	bl	80019ec <HAL_GetTick>
 8004014:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004016:	e00f      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004018:	f7fd fce8 	bl	80019ec <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d908      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e085      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	42470068 	.word	0x42470068
 8004034:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004038:	4b41      	ldr	r3, [pc, #260]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004044:	d0e8      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004062:	2b00      	cmp	r3, #0
 8004064:	d02b      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d127      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	3301      	adds	r3, #1
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	019b      	lsls	r3, r3, #6
 800408a:	431a      	orrs	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	4928      	ldr	r1, [pc, #160]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040a4:	4b26      	ldr	r3, [pc, #152]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	3b01      	subs	r3, #1
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4922      	ldr	r1, [pc, #136]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d2:	d118      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	0e1b      	lsrs	r3, r3, #24
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	019b      	lsls	r3, r3, #6
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	4910      	ldr	r1, [pc, #64]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800410c:	f7fd fc6e 	bl	80019ec <HAL_GetTick>
 8004110:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004114:	f7fd fc6a 	bl	80019ec <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e007      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004132:	d1ef      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3730      	adds	r7, #48	; 0x30
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800
 8004144:	42470070 	.word	0x42470070

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004162:	4bc6      	ldr	r3, [pc, #792]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b0c      	cmp	r3, #12
 800416c:	f200 817e 	bhi.w	800446c <HAL_RCC_GetSysClockFreq+0x324>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_RCC_GetSysClockFreq+0x30>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041ad 	.word	0x080041ad
 800417c:	0800446d 	.word	0x0800446d
 8004180:	0800446d 	.word	0x0800446d
 8004184:	0800446d 	.word	0x0800446d
 8004188:	080041b3 	.word	0x080041b3
 800418c:	0800446d 	.word	0x0800446d
 8004190:	0800446d 	.word	0x0800446d
 8004194:	0800446d 	.word	0x0800446d
 8004198:	080041b9 	.word	0x080041b9
 800419c:	0800446d 	.word	0x0800446d
 80041a0:	0800446d 	.word	0x0800446d
 80041a4:	0800446d 	.word	0x0800446d
 80041a8:	08004315 	.word	0x08004315
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4bb4      	ldr	r3, [pc, #720]	; (8004480 <HAL_RCC_GetSysClockFreq+0x338>)
 80041ae:	613b      	str	r3, [r7, #16]
       break;
 80041b0:	e15f      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4bb4      	ldr	r3, [pc, #720]	; (8004484 <HAL_RCC_GetSysClockFreq+0x33c>)
 80041b4:	613b      	str	r3, [r7, #16]
      break;
 80041b6:	e15c      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4bb0      	ldr	r3, [pc, #704]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c2:	4bae      	ldr	r3, [pc, #696]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d04a      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4bab      	ldr	r3, [pc, #684]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	ea03 0501 	and.w	r5, r3, r1
 80041e4:	ea04 0602 	and.w	r6, r4, r2
 80041e8:	4629      	mov	r1, r5
 80041ea:	4632      	mov	r2, r6
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	f04f 0400 	mov.w	r4, #0
 80041f4:	0154      	lsls	r4, r2, #5
 80041f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041fa:	014b      	lsls	r3, r1, #5
 80041fc:	4619      	mov	r1, r3
 80041fe:	4622      	mov	r2, r4
 8004200:	1b49      	subs	r1, r1, r5
 8004202:	eb62 0206 	sbc.w	r2, r2, r6
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	0194      	lsls	r4, r2, #6
 8004210:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004214:	018b      	lsls	r3, r1, #6
 8004216:	1a5b      	subs	r3, r3, r1
 8004218:	eb64 0402 	sbc.w	r4, r4, r2
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	00e2      	lsls	r2, r4, #3
 8004226:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800422a:	00d9      	lsls	r1, r3, #3
 800422c:	460b      	mov	r3, r1
 800422e:	4614      	mov	r4, r2
 8004230:	195b      	adds	r3, r3, r5
 8004232:	eb44 0406 	adc.w	r4, r4, r6
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	0262      	lsls	r2, r4, #9
 8004240:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004244:	0259      	lsls	r1, r3, #9
 8004246:	460b      	mov	r3, r1
 8004248:	4614      	mov	r4, r2
 800424a:	4618      	mov	r0, r3
 800424c:	4621      	mov	r1, r4
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	f7fc fc76 	bl	8000b48 <__aeabi_uldivmod>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e049      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b85      	ldr	r3, [pc, #532]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	ea03 0501 	and.w	r5, r3, r1
 800427a:	ea04 0602 	and.w	r6, r4, r2
 800427e:	4629      	mov	r1, r5
 8004280:	4632      	mov	r2, r6
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	f04f 0400 	mov.w	r4, #0
 800428a:	0154      	lsls	r4, r2, #5
 800428c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004290:	014b      	lsls	r3, r1, #5
 8004292:	4619      	mov	r1, r3
 8004294:	4622      	mov	r2, r4
 8004296:	1b49      	subs	r1, r1, r5
 8004298:	eb62 0206 	sbc.w	r2, r2, r6
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	0194      	lsls	r4, r2, #6
 80042a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042aa:	018b      	lsls	r3, r1, #6
 80042ac:	1a5b      	subs	r3, r3, r1
 80042ae:	eb64 0402 	sbc.w	r4, r4, r2
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	00e2      	lsls	r2, r4, #3
 80042bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042c0:	00d9      	lsls	r1, r3, #3
 80042c2:	460b      	mov	r3, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	195b      	adds	r3, r3, r5
 80042c8:	eb44 0406 	adc.w	r4, r4, r6
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	02a2      	lsls	r2, r4, #10
 80042d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042da:	0299      	lsls	r1, r3, #10
 80042dc:	460b      	mov	r3, r1
 80042de:	4614      	mov	r4, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	4621      	mov	r1, r4
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	461a      	mov	r2, r3
 80042ec:	4623      	mov	r3, r4
 80042ee:	f7fc fc2b 	bl	8000b48 <__aeabi_uldivmod>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042f8:	4b60      	ldr	r3, [pc, #384]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	613b      	str	r3, [r7, #16]
      break;
 8004312:	e0ae      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431e:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d04a      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432a:	4b54      	ldr	r3, [pc, #336]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	ea03 0501 	and.w	r5, r3, r1
 8004340:	ea04 0602 	and.w	r6, r4, r2
 8004344:	4629      	mov	r1, r5
 8004346:	4632      	mov	r2, r6
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	f04f 0400 	mov.w	r4, #0
 8004350:	0154      	lsls	r4, r2, #5
 8004352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004356:	014b      	lsls	r3, r1, #5
 8004358:	4619      	mov	r1, r3
 800435a:	4622      	mov	r2, r4
 800435c:	1b49      	subs	r1, r1, r5
 800435e:	eb62 0206 	sbc.w	r2, r2, r6
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	f04f 0400 	mov.w	r4, #0
 800436a:	0194      	lsls	r4, r2, #6
 800436c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004370:	018b      	lsls	r3, r1, #6
 8004372:	1a5b      	subs	r3, r3, r1
 8004374:	eb64 0402 	sbc.w	r4, r4, r2
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	00e2      	lsls	r2, r4, #3
 8004382:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004386:	00d9      	lsls	r1, r3, #3
 8004388:	460b      	mov	r3, r1
 800438a:	4614      	mov	r4, r2
 800438c:	195b      	adds	r3, r3, r5
 800438e:	eb44 0406 	adc.w	r4, r4, r6
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	0262      	lsls	r2, r4, #9
 800439c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043a0:	0259      	lsls	r1, r3, #9
 80043a2:	460b      	mov	r3, r1
 80043a4:	4614      	mov	r4, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	4621      	mov	r1, r4
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	461a      	mov	r2, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	f7fc fbc8 	bl	8000b48 <__aeabi_uldivmod>
 80043b8:	4603      	mov	r3, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e049      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	f04f 0400 	mov.w	r4, #0
 80043ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	ea03 0501 	and.w	r5, r3, r1
 80043d6:	ea04 0602 	and.w	r6, r4, r2
 80043da:	4629      	mov	r1, r5
 80043dc:	4632      	mov	r2, r6
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	f04f 0400 	mov.w	r4, #0
 80043e6:	0154      	lsls	r4, r2, #5
 80043e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043ec:	014b      	lsls	r3, r1, #5
 80043ee:	4619      	mov	r1, r3
 80043f0:	4622      	mov	r2, r4
 80043f2:	1b49      	subs	r1, r1, r5
 80043f4:	eb62 0206 	sbc.w	r2, r2, r6
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	f04f 0400 	mov.w	r4, #0
 8004400:	0194      	lsls	r4, r2, #6
 8004402:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004406:	018b      	lsls	r3, r1, #6
 8004408:	1a5b      	subs	r3, r3, r1
 800440a:	eb64 0402 	sbc.w	r4, r4, r2
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	00e2      	lsls	r2, r4, #3
 8004418:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800441c:	00d9      	lsls	r1, r3, #3
 800441e:	460b      	mov	r3, r1
 8004420:	4614      	mov	r4, r2
 8004422:	195b      	adds	r3, r3, r5
 8004424:	eb44 0406 	adc.w	r4, r4, r6
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	02a2      	lsls	r2, r4, #10
 8004432:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004436:	0299      	lsls	r1, r3, #10
 8004438:	460b      	mov	r3, r1
 800443a:	4614      	mov	r4, r2
 800443c:	4618      	mov	r0, r3
 800443e:	4621      	mov	r1, r4
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f04f 0400 	mov.w	r4, #0
 8004446:	461a      	mov	r2, r3
 8004448:	4623      	mov	r3, r4
 800444a:	f7fc fb7d 	bl	8000b48 <__aeabi_uldivmod>
 800444e:	4603      	mov	r3, r0
 8004450:	460c      	mov	r4, r1
 8004452:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_GetSysClockFreq+0x334>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0f1b      	lsrs	r3, r3, #28
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	613b      	str	r3, [r7, #16]
      break;
 800446a:	e002      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_RCC_GetSysClockFreq+0x338>)
 800446e:	613b      	str	r3, [r7, #16]
      break;
 8004470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004472:	693b      	ldr	r3, [r7, #16]
}
 8004474:	4618      	mov	r0, r3
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	00f42400 	.word	0x00f42400
 8004484:	007a1200 	.word	0x007a1200

08004488 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8083 	beq.w	80045a8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044a2:	4b95      	ldr	r3, [pc, #596]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d019      	beq.n	80044e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044ae:	4b92      	ldr	r3, [pc, #584]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044ba:	4b8f      	ldr	r3, [pc, #572]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c6:	d00c      	beq.n	80044e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c8:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d112      	bne.n	80044fa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d4:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e0:	d10b      	bne.n	80044fa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e2:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d05b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x11e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d157      	bne.n	80045a6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e216      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d106      	bne.n	8004512 <HAL_RCC_OscConfig+0x8a>
 8004504:	4b7c      	ldr	r3, [pc, #496]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a7b      	ldr	r2, [pc, #492]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800450a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	e01d      	b.n	800454e <HAL_RCC_OscConfig+0xc6>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0xae>
 800451c:	4b76      	ldr	r3, [pc, #472]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a75      	ldr	r2, [pc, #468]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b73      	ldr	r3, [pc, #460]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a72      	ldr	r2, [pc, #456]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800452e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e00b      	b.n	800454e <HAL_RCC_OscConfig+0xc6>
 8004536:	4b70      	ldr	r3, [pc, #448]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6f      	ldr	r2, [pc, #444]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b6d      	ldr	r3, [pc, #436]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6c      	ldr	r2, [pc, #432]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fa49 	bl	80019ec <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455e:	f7fd fa45 	bl	80019ec <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1db      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004570:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0xd6>
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd fa35 	bl	80019ec <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004586:	f7fd fa31 	bl	80019ec <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b64      	cmp	r3, #100	; 0x64
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e1c7      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004598:	4b57      	ldr	r3, [pc, #348]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0xfe>
 80045a4:	e000      	b.n	80045a8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d06f      	beq.n	8004694 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045b4:	4b50      	ldr	r3, [pc, #320]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d017      	beq.n	80045f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045c0:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d105      	bne.n	80045d8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045cc:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d8:	4b47      	ldr	r3, [pc, #284]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d11c      	bne.n	800461e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e4:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d116      	bne.n	800461e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f0:	4b41      	ldr	r3, [pc, #260]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_OscConfig+0x180>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e18f      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4938      	ldr	r1, [pc, #224]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461c:	e03a      	b.n	8004694 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d020      	beq.n	8004668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004626:	4b35      	ldr	r3, [pc, #212]	; (80046fc <HAL_RCC_OscConfig+0x274>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd f9de 	bl	80019ec <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fd f9da 	bl	80019ec <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e170      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004646:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4925      	ldr	r1, [pc, #148]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
 8004666:	e015      	b.n	8004694 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004668:	4b24      	ldr	r3, [pc, #144]	; (80046fc <HAL_RCC_OscConfig+0x274>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fd f9bd 	bl	80019ec <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004676:	f7fd f9b9 	bl	80019ec <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e14f      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d037      	beq.n	8004710 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d016      	beq.n	80046d6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ae:	f7fd f99d 	bl	80019ec <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b6:	f7fd f999 	bl	80019ec <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e12f      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x22e>
 80046d4:	e01c      	b.n	8004710 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fd f986 	bl	80019ec <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e2:	e00f      	b.n	8004704 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fd f982 	bl	80019ec <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d908      	bls.n	8004704 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e118      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	42470000 	.word	0x42470000
 8004700:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	4b8a      	ldr	r3, [pc, #552]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e9      	bne.n	80046e4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8097 	beq.w	800484c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b83      	ldr	r3, [pc, #524]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	; 0x40
 800473e:	4b7c      	ldr	r3, [pc, #496]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474e:	4b79      	ldr	r3, [pc, #484]	; (8004934 <HAL_RCC_OscConfig+0x4ac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d118      	bne.n	800478c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475a:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_OscConfig+0x4ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7fd f941 	bl	80019ec <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7fd f93d 	bl	80019ec <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e0d3      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	4b6c      	ldr	r3, [pc, #432]	; (8004934 <HAL_RCC_OscConfig+0x4ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x31a>
 8004794:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6713      	str	r3, [r2, #112]	; 0x70
 80047a0:	e01c      	b.n	80047dc <HAL_RCC_OscConfig+0x354>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x33c>
 80047aa:	4b61      	ldr	r3, [pc, #388]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	4a60      	ldr	r2, [pc, #384]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70
 80047b6:	4b5e      	ldr	r3, [pc, #376]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a5d      	ldr	r2, [pc, #372]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
 80047c2:	e00b      	b.n	80047dc <HAL_RCC_OscConfig+0x354>
 80047c4:	4b5a      	ldr	r3, [pc, #360]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	4a59      	ldr	r2, [pc, #356]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	6713      	str	r3, [r2, #112]	; 0x70
 80047d0:	4b57      	ldr	r3, [pc, #348]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d4:	4a56      	ldr	r2, [pc, #344]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80047d6:	f023 0304 	bic.w	r3, r3, #4
 80047da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d015      	beq.n	8004810 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7fd f902 	bl	80019ec <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fd f8fe 	bl	80019ec <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e092      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ee      	beq.n	80047ec <HAL_RCC_OscConfig+0x364>
 800480e:	e014      	b.n	800483a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fd f8ec 	bl	80019ec <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fd f8e8 	bl	80019ec <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e07c      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482e:	4b40      	ldr	r3, [pc, #256]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ee      	bne.n	8004818 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004840:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	4a3a      	ldr	r2, [pc, #232]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d068      	beq.n	8004926 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004854:	4b36      	ldr	r3, [pc, #216]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d060      	beq.n	8004922 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d145      	bne.n	80048f4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b33      	ldr	r3, [pc, #204]	; (8004938 <HAL_RCC_OscConfig+0x4b0>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fd f8bd 	bl	80019ec <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd f8b9 	bl	80019ec <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e04f      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	019b      	lsls	r3, r3, #6
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	071b      	lsls	r3, r3, #28
 80048c0:	491b      	ldr	r1, [pc, #108]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_RCC_OscConfig+0x4b0>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fd f88e 	bl	80019ec <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd f88a 	bl	80019ec <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e020      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x44c>
 80048f2:	e018      	b.n	8004926 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f4:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCC_OscConfig+0x4b0>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fd f877 	bl	80019ec <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004902:	f7fd f873 	bl	80019ec <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e009      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_OscConfig+0x4a8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCC_OscConfig+0x47a>
 8004920:	e001      	b.n	8004926 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	42470060 	.word	0x42470060

0800493c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e056      	b.n	80049fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fc fd79 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004984:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	ea42 0103 	orr.w	r1, r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	f003 0104 	and.w	r1, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e01d      	b.n	8004a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fe0c 	bl	8001648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 fa4e 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d007      	beq.n	8004a94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e01d      	b.n	8004af0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fc fd9d 	bl	8001608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 f9ff 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d122      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0202 	mvn.w	r2, #2
 8004b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9b4 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f9a6 	bl	8004e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9b7 	bl	8004ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0204 	mvn.w	r2, #4
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f98a 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f97c 	bl	8004e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f98d 	bl	8004ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d122      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d11b      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0208 	mvn.w	r2, #8
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f960 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f952 	bl	8004e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f963 	bl	8004ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d122      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d11b      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0210 	mvn.w	r2, #16
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2208      	movs	r2, #8
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f936 	bl	8004ea8 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f928 	bl	8004e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f939 	bl	8004ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0201 	mvn.w	r2, #1
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc fb6c 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fbf4 	bl	8005490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8fe 	bl	8004ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0220 	mvn.w	r2, #32
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fbbe 	bl	800547c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0b4      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	f200 809f 	bhi.w	8004e78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004e79 	.word	0x08004e79
 8004d48:	08004e79 	.word	0x08004e79
 8004d4c:	08004e79 	.word	0x08004e79
 8004d50:	08004db5 	.word	0x08004db5
 8004d54:	08004e79 	.word	0x08004e79
 8004d58:	08004e79 	.word	0x08004e79
 8004d5c:	08004e79 	.word	0x08004e79
 8004d60:	08004df7 	.word	0x08004df7
 8004d64:	08004e79 	.word	0x08004e79
 8004d68:	08004e79 	.word	0x08004e79
 8004d6c:	08004e79 	.word	0x08004e79
 8004d70:	08004e37 	.word	0x08004e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f952 	bl	8005024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0204 	bic.w	r2, r2, #4
 8004d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6999      	ldr	r1, [r3, #24]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	619a      	str	r2, [r3, #24]
      break;
 8004db2:	e062      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f9a2 	bl	8005104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	619a      	str	r2, [r3, #24]
      break;
 8004df4:	e041      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f9f7 	bl	80051f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0208 	orr.w	r2, r2, #8
 8004e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0204 	bic.w	r2, r2, #4
 8004e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69d9      	ldr	r1, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	61da      	str	r2, [r3, #28]
      break;
 8004e34:	e021      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa4b 	bl	80052d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	021a      	lsls	r2, r3, #8
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	61da      	str	r2, [r3, #28]
      break;
 8004e76:	e000      	b.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004e78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a40      	ldr	r2, [pc, #256]	; (8004ff8 <TIM_Base_SetConfig+0x114>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d00f      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3d      	ldr	r2, [pc, #244]	; (8004ffc <TIM_Base_SetConfig+0x118>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a3c      	ldr	r2, [pc, #240]	; (8005000 <TIM_Base_SetConfig+0x11c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3b      	ldr	r2, [pc, #236]	; (8005004 <TIM_Base_SetConfig+0x120>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a3a      	ldr	r2, [pc, #232]	; (8005008 <TIM_Base_SetConfig+0x124>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d108      	bne.n	8004f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2f      	ldr	r2, [pc, #188]	; (8004ff8 <TIM_Base_SetConfig+0x114>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d02b      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d027      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <TIM_Base_SetConfig+0x118>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d023      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2b      	ldr	r2, [pc, #172]	; (8005000 <TIM_Base_SetConfig+0x11c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01f      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <TIM_Base_SetConfig+0x120>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01b      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a29      	ldr	r2, [pc, #164]	; (8005008 <TIM_Base_SetConfig+0x124>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d017      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a28      	ldr	r2, [pc, #160]	; (800500c <TIM_Base_SetConfig+0x128>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <TIM_Base_SetConfig+0x12c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00f      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a26      	ldr	r2, [pc, #152]	; (8005014 <TIM_Base_SetConfig+0x130>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a25      	ldr	r2, [pc, #148]	; (8005018 <TIM_Base_SetConfig+0x134>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a24      	ldr	r2, [pc, #144]	; (800501c <TIM_Base_SetConfig+0x138>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a23      	ldr	r2, [pc, #140]	; (8005020 <TIM_Base_SetConfig+0x13c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d108      	bne.n	8004fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <TIM_Base_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_Base_SetConfig+0xf8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	; (8005008 <TIM_Base_SetConfig+0x124>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d103      	bne.n	8004fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40010400 	.word	0x40010400
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800
 8005018:	40001800 	.word	0x40001800
 800501c:	40001c00 	.word	0x40001c00
 8005020:	40002000 	.word	0x40002000

08005024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f023 0201 	bic.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 0302 	bic.w	r3, r3, #2
 800506c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a20      	ldr	r2, [pc, #128]	; (80050fc <TIM_OC1_SetConfig+0xd8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_OC1_SetConfig+0x64>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <TIM_OC1_SetConfig+0xdc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d10c      	bne.n	80050a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0308 	bic.w	r3, r3, #8
 800508e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a15      	ldr	r2, [pc, #84]	; (80050fc <TIM_OC1_SetConfig+0xd8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_OC1_SetConfig+0x8e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <TIM_OC1_SetConfig+0xdc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d111      	bne.n	80050d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	621a      	str	r2, [r3, #32]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40010000 	.word	0x40010000
 8005100:	40010400 	.word	0x40010400

08005104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0210 	bic.w	r2, r3, #16
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0320 	bic.w	r3, r3, #32
 800514e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <TIM_OC2_SetConfig+0xe4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC2_SetConfig+0x68>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a21      	ldr	r2, [pc, #132]	; (80051ec <TIM_OC2_SetConfig+0xe8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10d      	bne.n	8005188 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005186:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <TIM_OC2_SetConfig+0xe4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC2_SetConfig+0x94>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a16      	ldr	r2, [pc, #88]	; (80051ec <TIM_OC2_SetConfig+0xe8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d113      	bne.n	80051c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800519e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010400 	.word	0x40010400

080051f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <TIM_OC3_SetConfig+0xe0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC3_SetConfig+0x66>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <TIM_OC3_SetConfig+0xe4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10d      	bne.n	8005272 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <TIM_OC3_SetConfig+0xe0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_OC3_SetConfig+0x92>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <TIM_OC3_SetConfig+0xe4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d113      	bne.n	80052aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	621a      	str	r2, [r3, #32]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a12      	ldr	r2, [pc, #72]	; (800537c <TIM_OC4_SetConfig+0xa4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC4_SetConfig+0x68>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a11      	ldr	r2, [pc, #68]	; (8005380 <TIM_OC4_SetConfig+0xa8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d109      	bne.n	8005354 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000
 8005380:	40010400 	.word	0x40010400

08005384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005398:	2302      	movs	r3, #2
 800539a:	e05a      	b.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a21      	ldr	r2, [pc, #132]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d022      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e8:	d01d      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d018      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a17      	ldr	r2, [pc, #92]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d10c      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40010400 	.word	0x40010400
 8005474:	40014000 	.word	0x40014000
 8005478:	40001800 	.word	0x40001800

0800547c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a4:	b084      	sub	sp, #16
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	f107 001c 	add.w	r0, r7, #28
 80054b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d122      	bne.n	8005502 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 fac0 	bl	8006a7c <USB_CoreReset>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e01a      	b.n	8005538 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fab4 	bl	8006a7c <USB_CoreReset>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
 800552a:	e005      	b.n	8005538 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10b      	bne.n	8005556 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f043 0206 	orr.w	r2, r3, #6
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005562:	b004      	add	sp, #16
 8005564:	4770      	bx	lr
	...

08005568 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d165      	bne.n	8005648 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a41      	ldr	r2, [pc, #260]	; (8005684 <USB_SetTurnaroundTime+0x11c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d906      	bls.n	8005592 <USB_SetTurnaroundTime+0x2a>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4a40      	ldr	r2, [pc, #256]	; (8005688 <USB_SetTurnaroundTime+0x120>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d802      	bhi.n	8005592 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800558c:	230f      	movs	r3, #15
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e062      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <USB_SetTurnaroundTime+0x120>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d906      	bls.n	80055a8 <USB_SetTurnaroundTime+0x40>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4a3b      	ldr	r2, [pc, #236]	; (800568c <USB_SetTurnaroundTime+0x124>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d802      	bhi.n	80055a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055a2:	230e      	movs	r3, #14
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e057      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a38      	ldr	r2, [pc, #224]	; (800568c <USB_SetTurnaroundTime+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d906      	bls.n	80055be <USB_SetTurnaroundTime+0x56>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4a37      	ldr	r2, [pc, #220]	; (8005690 <USB_SetTurnaroundTime+0x128>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d802      	bhi.n	80055be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055b8:	230d      	movs	r3, #13
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e04c      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4a33      	ldr	r2, [pc, #204]	; (8005690 <USB_SetTurnaroundTime+0x128>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d906      	bls.n	80055d4 <USB_SetTurnaroundTime+0x6c>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4a32      	ldr	r2, [pc, #200]	; (8005694 <USB_SetTurnaroundTime+0x12c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d802      	bhi.n	80055d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055ce:	230c      	movs	r3, #12
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e041      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <USB_SetTurnaroundTime+0x12c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d906      	bls.n	80055ea <USB_SetTurnaroundTime+0x82>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a2e      	ldr	r2, [pc, #184]	; (8005698 <USB_SetTurnaroundTime+0x130>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d802      	bhi.n	80055ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055e4:	230b      	movs	r3, #11
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e036      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <USB_SetTurnaroundTime+0x130>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d906      	bls.n	8005600 <USB_SetTurnaroundTime+0x98>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4a29      	ldr	r2, [pc, #164]	; (800569c <USB_SetTurnaroundTime+0x134>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d802      	bhi.n	8005600 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055fa:	230a      	movs	r3, #10
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	e02b      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a26      	ldr	r2, [pc, #152]	; (800569c <USB_SetTurnaroundTime+0x134>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d906      	bls.n	8005616 <USB_SetTurnaroundTime+0xae>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <USB_SetTurnaroundTime+0x138>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d802      	bhi.n	8005616 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005610:	2309      	movs	r3, #9
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e020      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <USB_SetTurnaroundTime+0x138>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d906      	bls.n	800562c <USB_SetTurnaroundTime+0xc4>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <USB_SetTurnaroundTime+0x13c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d802      	bhi.n	800562c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005626:	2308      	movs	r3, #8
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e015      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <USB_SetTurnaroundTime+0x13c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d906      	bls.n	8005642 <USB_SetTurnaroundTime+0xda>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a1c      	ldr	r2, [pc, #112]	; (80056a8 <USB_SetTurnaroundTime+0x140>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d802      	bhi.n	8005642 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800563c:	2307      	movs	r3, #7
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e00a      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005642:	2306      	movs	r3, #6
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e007      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800564e:	2309      	movs	r3, #9
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e001      	b.n	8005658 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005654:	2309      	movs	r3, #9
 8005656:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	029b      	lsls	r3, r3, #10
 800566c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005670:	431a      	orrs	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	00d8acbf 	.word	0x00d8acbf
 8005688:	00e4e1bf 	.word	0x00e4e1bf
 800568c:	00f423ff 	.word	0x00f423ff
 8005690:	0106737f 	.word	0x0106737f
 8005694:	011a499f 	.word	0x011a499f
 8005698:	01312cff 	.word	0x01312cff
 800569c:	014ca43f 	.word	0x014ca43f
 80056a0:	016e35ff 	.word	0x016e35ff
 80056a4:	01a6ab1f 	.word	0x01a6ab1f
 80056a8:	01e847ff 	.word	0x01e847ff

080056ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f043 0201 	orr.w	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d106      	bne.n	800571c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	e00b      	b.n	8005734 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	e001      	b.n	8005734 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e003      	b.n	800573c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005734:	2032      	movs	r0, #50	; 0x32
 8005736:	f7fc f965 	bl	8001a04 <HAL_Delay>

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005744:	b084      	sub	sp, #16
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e009      	b.n	8005778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3340      	adds	r3, #64	; 0x40
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	2200      	movs	r2, #0
 8005770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3301      	adds	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b0e      	cmp	r3, #14
 800577c:	d9f2      	bls.n	8005764 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d11c      	bne.n	80057be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005792:	f043 0302 	orr.w	r3, r3, #2
 8005796:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e005      	b.n	80057ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	4619      	mov	r1, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	461a      	mov	r2, r3
 80057e6:	680b      	ldr	r3, [r1, #0]
 80057e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d10c      	bne.n	800580a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057f6:	2100      	movs	r1, #0
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f949 	bl	8005a90 <USB_SetDevSpeed>
 80057fe:	e008      	b.n	8005812 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005800:	2101      	movs	r1, #1
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f944 	bl	8005a90 <USB_SetDevSpeed>
 8005808:	e003      	b.n	8005812 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800580a:	2103      	movs	r1, #3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f93f 	bl	8005a90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005812:	2110      	movs	r1, #16
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8f3 	bl	8005a00 <USB_FlushTxFifo>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f911 	bl	8005a4c <USB_FlushRxFifo>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	461a      	mov	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e043      	b.n	80058e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005874:	d118      	bne.n	80058a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	461a      	mov	r2, r3
 800588a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e013      	b.n	80058ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	461a      	mov	r2, r3
 80058a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e008      	b.n	80058ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	461a      	mov	r2, r3
 80058c8:	2300      	movs	r3, #0
 80058ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	461a      	mov	r2, r3
 80058da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3301      	adds	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d3b7      	bcc.n	800585e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	e043      	b.n	800597c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590a:	d118      	bne.n	800593e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	461a      	mov	r2, r3
 8005920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e013      	b.n	8005950 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e008      	b.n	8005950 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	461a      	mov	r2, r3
 800594c:	2300      	movs	r3, #0
 800594e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	461a      	mov	r2, r3
 800595e:	2300      	movs	r3, #0
 8005960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	461a      	mov	r2, r3
 8005970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3301      	adds	r3, #1
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d3b7      	bcc.n	80058f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005996:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f043 0210 	orr.w	r2, r3, #16
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <USB_DevInit+0x2b8>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d107      	bne.n	80059ec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e4:	f043 0304 	orr.w	r3, r3, #4
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059f8:	b004      	add	sp, #16
 80059fa:	4770      	bx	lr
 80059fc:	803c3800 	.word	0x803c3800

08005a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	019b      	lsls	r3, r3, #6
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <USB_FlushTxFifo+0x48>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e006      	b.n	8005a3a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d0f0      	beq.n	8005a1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	00030d40 	.word	0x00030d40

08005a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <USB_FlushRxFifo+0x40>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e006      	b.n	8005a7e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d0f0      	beq.n	8005a5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	00030d40 	.word	0x00030d40

08005a90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b087      	sub	sp, #28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0306 	and.w	r3, r3, #6
 8005ada:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75fb      	strb	r3, [r7, #23]
 8005ae6:	e00a      	b.n	8005afe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d002      	beq.n	8005af4 <USB_GetDevSpeed+0x32>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d102      	bne.n	8005afa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005af4:	2302      	movs	r3, #2
 8005af6:	75fb      	strb	r3, [r7, #23]
 8005af8:	e001      	b.n	8005afe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005afa:	230f      	movs	r3, #15
 8005afc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d13a      	bne.n	8005b9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	68f9      	ldr	r1, [r7, #12]
 8005b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d155      	bne.n	8005c0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	78db      	ldrb	r3, [r3, #3]
 8005b7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	059b      	lsls	r3, r3, #22
 8005b82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b84:	4313      	orrs	r3, r2
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e036      	b.n	8005c0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	69da      	ldr	r2, [r3, #28]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	2101      	movs	r1, #1
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	68f9      	ldr	r1, [r7, #12]
 8005bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d11a      	bne.n	8005c0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d161      	bne.n	8005cfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4e:	d11f      	bne.n	8005c90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	0159      	lsls	r1, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4b35      	ldr	r3, [pc, #212]	; (8005dcc <USB_DeactivateEndpoint+0x1b0>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]
 8005cfa:	e060      	b.n	8005dbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d12:	d11f      	bne.n	8005d54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	2101      	movs	r1, #1
 8005d66:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d74:	4013      	ands	r3, r2
 8005d76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	2101      	movs	r1, #1
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	43db      	mvns	r3, r3
 8005d92:	68f9      	ldr	r1, [r7, #12]
 8005d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d98:	4013      	ands	r3, r2
 8005d9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	0159      	lsls	r1, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	440b      	add	r3, r1
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	4619      	mov	r1, r3
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <USB_DeactivateEndpoint+0x1b4>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	ec337800 	.word	0xec337800
 8005dd0:	eff37800 	.word	0xeff37800

08005dd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f040 815c 	bne.w	80060ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d132      	bne.n	8005e64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	0cdb      	lsrs	r3, r3, #19
 8005e5e:	04db      	lsls	r3, r3, #19
 8005e60:	6113      	str	r3, [r2, #16]
 8005e62:	e074      	b.n	8005f4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7e:	0cdb      	lsrs	r3, r3, #19
 8005e80:	04db      	lsls	r3, r3, #19
 8005e82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ea2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6959      	ldr	r1, [r3, #20]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	440b      	add	r3, r1
 8005ec0:	1e59      	subs	r1, r3, #1
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eca:	04d9      	lsls	r1, r3, #19
 8005ecc:	4b9d      	ldr	r3, [pc, #628]	; (8006144 <USB_EPStartXfer+0x370>)
 8005ece:	400b      	ands	r3, r1
 8005ed0:	69b9      	ldr	r1, [r7, #24]
 8005ed2:	0148      	lsls	r0, r1, #5
 8005ed4:	69f9      	ldr	r1, [r7, #28]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005edc:	4313      	orrs	r3, r2
 8005ede:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef6:	69b9      	ldr	r1, [r7, #24]
 8005ef8:	0148      	lsls	r0, r1, #5
 8005efa:	69f9      	ldr	r1, [r7, #28]
 8005efc:	4401      	add	r1, r0
 8005efe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f02:	4313      	orrs	r3, r2
 8005f04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	78db      	ldrb	r3, [r3, #3]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d11f      	bne.n	8005f4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d14b      	bne.n	8005fec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	78db      	ldrb	r3, [r3, #3]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d128      	bne.n	8005fca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d110      	bne.n	8005faa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e00f      	b.n	8005fca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e12f      	b.n	800624c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006006:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800600a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	78db      	ldrb	r3, [r3, #3]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d015      	beq.n	8006040 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8117 	beq.w	800624c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	2101      	movs	r1, #1
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	69f9      	ldr	r1, [r7, #28]
 8006036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603a:	4313      	orrs	r3, r2
 800603c:	634b      	str	r3, [r1, #52]	; 0x34
 800603e:	e105      	b.n	800624c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d110      	bne.n	8006072 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	e00f      	b.n	8006092 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006090:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68d9      	ldr	r1, [r3, #12]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	b298      	uxth	r0, r3
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4603      	mov	r3, r0
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fa2b 	bl	8006502 <USB_WritePacket>
 80060ac:	e0ce      	b.n	800624c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c8:	0cdb      	lsrs	r3, r3, #19
 80060ca:	04db      	lsls	r3, r3, #19
 80060cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d126      	bne.n	8006148 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006110:	69b9      	ldr	r1, [r7, #24]
 8006112:	0148      	lsls	r0, r1, #5
 8006114:	69f9      	ldr	r1, [r7, #28]
 8006116:	4401      	add	r1, r0
 8006118:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800611c:	4313      	orrs	r3, r2
 800611e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800613e:	6113      	str	r3, [r2, #16]
 8006140:	e036      	b.n	80061b0 <USB_EPStartXfer+0x3dc>
 8006142:	bf00      	nop
 8006144:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	695a      	ldr	r2, [r3, #20]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	4413      	add	r3, r2
 8006152:	1e5a      	subs	r2, r3, #1
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	8afb      	ldrh	r3, [r7, #22]
 800616e:	04d9      	lsls	r1, r3, #19
 8006170:	4b39      	ldr	r3, [pc, #228]	; (8006258 <USB_EPStartXfer+0x484>)
 8006172:	400b      	ands	r3, r1
 8006174:	69b9      	ldr	r1, [r7, #24]
 8006176:	0148      	lsls	r0, r1, #5
 8006178:	69f9      	ldr	r1, [r7, #28]
 800617a:	4401      	add	r1, r0
 800617c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006180:	4313      	orrs	r3, r2
 8006182:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	8af9      	ldrh	r1, [r7, #22]
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	0148      	lsls	r0, r1, #5
 80061a4:	69f9      	ldr	r1, [r7, #28]
 80061a6:	4401      	add	r1, r0
 80061a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10d      	bne.n	80061d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	460a      	mov	r2, r1
 80061d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	78db      	ldrb	r3, [r3, #3]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d128      	bne.n	800622c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d110      	bne.n	800620c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e00f      	b.n	800622c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800624a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	1ff80000 	.word	0x1ff80000

0800625c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b01      	cmp	r3, #1
 800627a:	f040 80cd 	bne.w	8006418 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d132      	bne.n	80062ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e4:	0cdb      	lsrs	r3, r3, #19
 80062e6:	04db      	lsls	r3, r3, #19
 80062e8:	6113      	str	r3, [r2, #16]
 80062ea:	e04e      	b.n	800638a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	440a      	add	r2, r1
 8006302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006306:	0cdb      	lsrs	r3, r3, #19
 8006308:	04db      	lsls	r3, r3, #19
 800630a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	440a      	add	r2, r1
 8006322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006326:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800632a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800632e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d903      	bls.n	8006344 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637a:	6939      	ldr	r1, [r7, #16]
 800637c:	0148      	lsls	r0, r1, #5
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	4401      	add	r1, r0
 8006382:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006386:	4313      	orrs	r3, r2
 8006388:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d11e      	bne.n	80063ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d009      	beq.n	80063ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	461a      	mov	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	e092      	b.n	80064f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d07e      	beq.n	80064f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	2101      	movs	r1, #1
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	6979      	ldr	r1, [r7, #20]
 800640e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006412:	4313      	orrs	r3, r2
 8006414:	634b      	str	r3, [r1, #52]	; 0x34
 8006416:	e06d      	b.n	80064f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006432:	0cdb      	lsrs	r3, r3, #19
 8006434:	04db      	lsls	r3, r3, #19
 8006436:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006452:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006456:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800645a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a2:	6939      	ldr	r1, [r7, #16]
 80064a4:	0148      	lsls	r0, r1, #5
 80064a6:	6979      	ldr	r1, [r7, #20]
 80064a8:	4401      	add	r1, r0
 80064aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064ae:	4313      	orrs	r3, r2
 80064b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10d      	bne.n	80064d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	68d9      	ldr	r1, [r3, #12]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	460a      	mov	r2, r1
 80064d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006502:	b480      	push	{r7}
 8006504:	b089      	sub	sp, #36	; 0x24
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	4611      	mov	r1, r2
 800650e:	461a      	mov	r2, r3
 8006510:	460b      	mov	r3, r1
 8006512:	71fb      	strb	r3, [r7, #7]
 8006514:	4613      	mov	r3, r2
 8006516:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006520:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11a      	bne.n	800655e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006528:	88bb      	ldrh	r3, [r7, #4]
 800652a:	3303      	adds	r3, #3
 800652c:	089b      	lsrs	r3, r3, #2
 800652e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e00f      	b.n	8006556 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	031a      	lsls	r2, r3, #12
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006542:	461a      	mov	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6013      	str	r3, [r2, #0]
      pSrc++;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3304      	adds	r3, #4
 800654e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	3301      	adds	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d3eb      	bcc.n	8006536 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3724      	adds	r7, #36	; 0x24
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	3303      	adds	r3, #3
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e00b      	b.n	80065a8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	601a      	str	r2, [r3, #0]
    pDest++;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	3304      	adds	r3, #4
 80065a0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	3301      	adds	r3, #1
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d3ef      	bcc.n	8006590 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80065b0:	69fb      	ldr	r3, [r7, #28]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3724      	adds	r7, #36	; 0x24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d12c      	bne.n	8006634 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db12      	blt.n	8006612 <USB_EPSetStall+0x54>
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00f      	beq.n	8006612 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006610:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	440a      	add	r2, r1
 8006628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e02b      	b.n	800668c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	db12      	blt.n	800666c <USB_EPSetStall+0xae>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00f      	beq.n	800666c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006666:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800666a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800668a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d128      	bne.n	8006708 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	78db      	ldrb	r3, [r3, #3]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d003      	beq.n	80066e6 <USB_EPClearStall+0x4c>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	78db      	ldrb	r3, [r3, #3]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d138      	bne.n	8006758 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e027      	b.n	8006758 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006726:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	78db      	ldrb	r3, [r3, #3]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d003      	beq.n	8006738 <USB_EPClearStall+0x9e>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d10f      	bne.n	8006758 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006756:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006784:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006788:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067a0:	4313      	orrs	r3, r2
 80067a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067cc:	f023 0303 	bic.w	r3, r3, #3
 80067d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e0:	f023 0302 	bic.w	r3, r3, #2
 80067e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006822:	f043 0302 	orr.w	r3, r3, #2
 8006826:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4013      	ands	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4013      	ands	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	0c1b      	lsrs	r3, r3, #16
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4013      	ands	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	b29b      	uxth	r3, r3
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	4013      	ands	r3, r2
 80068f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068f2:	68bb      	ldr	r3, [r7, #8]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006922:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
 8006930:	01db      	lsls	r3, r3, #7
 8006932:	b2db      	uxtb	r3, r3
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4013      	ands	r3, r2
 800694c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800694e:	68bb      	ldr	r3, [r7, #8]
}
 8006950:	4618      	mov	r0, r3
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	f003 0301 	and.w	r3, r3, #1
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	460b      	mov	r3, r1
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	333c      	adds	r3, #60	; 0x3c
 80069d6:	3304      	adds	r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <USB_EP0_OutStart+0xb8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d90a      	bls.n	80069fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f4:	d101      	bne.n	80069fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e037      	b.n	8006a6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a28:	f043 0318 	orr.w	r3, r3, #24
 8006a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d10f      	bne.n	8006a68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	4f54300a 	.word	0x4f54300a

08006a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4a13      	ldr	r2, [pc, #76]	; (8006ae0 <USB_CoreReset+0x64>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e01b      	b.n	8006ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	daf2      	bge.n	8006a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <USB_CoreReset+0x64>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e006      	b.n	8006ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d0f0      	beq.n	8006ab2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	00030d40 	.word	0x00030d40

08006ae4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006af0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006af4:	f002 fbb6 	bl	8009264 <malloc>
 8006af8:	4603      	mov	r3, r0
 8006afa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e066      	b.n	8006bdc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	7c1b      	ldrb	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b22:	2202      	movs	r2, #2
 8006b24:	2181      	movs	r1, #129	; 0x81
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f002 f9d5 	bl	8008ed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b36:	2202      	movs	r2, #2
 8006b38:	2101      	movs	r1, #1
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f002 f9cb 	bl	8008ed6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006b50:	e016      	b.n	8006b80 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b52:	2340      	movs	r3, #64	; 0x40
 8006b54:	2202      	movs	r2, #2
 8006b56:	2181      	movs	r1, #129	; 0x81
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f002 f9bc 	bl	8008ed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b64:	2340      	movs	r3, #64	; 0x40
 8006b66:	2202      	movs	r2, #2
 8006b68:	2101      	movs	r1, #1
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f002 f9b3 	bl	8008ed6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b80:	2308      	movs	r3, #8
 8006b82:	2203      	movs	r2, #3
 8006b84:	2182      	movs	r1, #130	; 0x82
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f002 f9a5 	bl	8008ed6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 fa76 	bl	80090b4 <USBD_LL_PrepareReceive>
 8006bc8:	e007      	b.n	8006bda <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd0:	2340      	movs	r3, #64	; 0x40
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f002 fa6d 	bl	80090b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bf4:	2181      	movs	r1, #129	; 0x81
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f002 f993 	bl	8008f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c02:	2101      	movs	r1, #1
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f002 f98c 	bl	8008f22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c12:	2182      	movs	r1, #130	; 0x82
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f002 f984 	bl	8008f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c44:	4618      	mov	r0, r3
 8006c46:	f002 fb15 	bl	8009274 <free>
    pdev->pClassData = NULL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d03a      	beq.n	8006cfc <USBD_CDC_Setup+0xa0>
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	f040 8097 	bne.w	8006dba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	88db      	ldrh	r3, [r3, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d029      	beq.n	8006ce8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da11      	bge.n	8006cc2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006caa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	88d2      	ldrh	r2, [r2, #6]
 8006cb0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006cb2:	6939      	ldr	r1, [r7, #16]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	88db      	ldrh	r3, [r3, #6]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fac7 	bl	800824e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006cc0:	e082      	b.n	8006dc8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785a      	ldrb	r2, [r3, #1]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	88db      	ldrh	r3, [r3, #6]
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006cd8:	6939      	ldr	r1, [r7, #16]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fae0 	bl	80082a6 <USBD_CtlPrepareRx>
    break;
 8006ce6:	e06f      	b.n	8006dc8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	7850      	ldrb	r0, [r2, #1]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	4798      	blx	r3
    break;
 8006cfa:	e065      	b.n	8006dc8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b0b      	cmp	r3, #11
 8006d02:	d84f      	bhi.n	8006da4 <USBD_CDC_Setup+0x148>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBD_CDC_Setup+0xb0>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006db3 	.word	0x08006db3
 8006d14:	08006da5 	.word	0x08006da5
 8006d18:	08006da5 	.word	0x08006da5
 8006d1c:	08006da5 	.word	0x08006da5
 8006d20:	08006da5 	.word	0x08006da5
 8006d24:	08006da5 	.word	0x08006da5
 8006d28:	08006da5 	.word	0x08006da5
 8006d2c:	08006da5 	.word	0x08006da5
 8006d30:	08006da5 	.word	0x08006da5
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006d8d 	.word	0x08006d8d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d107      	bne.n	8006d56 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d46:	f107 030c 	add.w	r3, r7, #12
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fa7d 	bl	800824e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006d54:	e030      	b.n	8006db8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fa07 	bl	800816c <USBD_CtlError>
        ret = USBD_FAIL;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	75fb      	strb	r3, [r7, #23]
      break;
 8006d62:	e029      	b.n	8006db8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d107      	bne.n	8006d7e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d6e:	f107 030f 	add.w	r3, r7, #15
 8006d72:	2201      	movs	r2, #1
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fa69 	bl	800824e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006d7c:	e01c      	b.n	8006db8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f9f3 	bl	800816c <USBD_CtlError>
        ret = USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8a:	e015      	b.n	8006db8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d00f      	beq.n	8006db6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 f9e7 	bl	800816c <USBD_CtlError>
        ret = USBD_FAIL;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006da2:	e008      	b.n	8006db6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 f9e0 	bl	800816c <USBD_CtlError>
      ret = USBD_FAIL;
 8006dac:	2303      	movs	r3, #3
 8006dae:	75fb      	strb	r3, [r7, #23]
      break;
 8006db0:	e002      	b.n	8006db8 <USBD_CDC_Setup+0x15c>
      break;
 8006db2:	bf00      	nop
 8006db4:	e008      	b.n	8006dc8 <USBD_CDC_Setup+0x16c>
      break;
 8006db6:	bf00      	nop
    }
    break;
 8006db8:	e006      	b.n	8006dc8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f9d5 	bl	800816c <USBD_CtlError>
    ret = USBD_FAIL;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	75fb      	strb	r3, [r7, #23]
    break;
 8006dc6:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop

08006dd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006de6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e049      	b.n	8006e8a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	3318      	adds	r3, #24
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d029      	beq.n	8006e68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	3318      	adds	r3, #24
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	78f9      	ldrb	r1, [r7, #3]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	1a5b      	subs	r3, r3, r1
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4403      	add	r3, r0
 8006e34:	3344      	adds	r3, #68	; 0x44
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e3c:	fb03 f301 	mul.w	r3, r3, r1
 8006e40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d110      	bne.n	8006e68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	3318      	adds	r3, #24
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e5a:	78f9      	ldrb	r1, [r7, #3]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2200      	movs	r2, #0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 f906 	bl	8009072 <USBD_LL_Transmit>
 8006e66:	e00f      	b.n	8006e88 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e015      	b.n	8006ee0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f002 f91c 	bl	80090f6 <USBD_LL_GetRxDataSize>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006eda:	4611      	mov	r1, r2
 8006edc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d015      	beq.n	8006f2e <USBD_CDC_EP0_RxReady+0x46>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f08:	2bff      	cmp	r3, #255	; 0xff
 8006f0a:	d010      	beq.n	8006f2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006f1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f22:	b292      	uxth	r2, r2
 8006f24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	22ff      	movs	r2, #255	; 0xff
 8006f2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2243      	movs	r2, #67	; 0x43
 8006f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006f46:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	20000094 	.word	0x20000094

08006f58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2243      	movs	r2, #67	; 0x43
 8006f64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006f66:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	20000050 	.word	0x20000050

08006f78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2243      	movs	r2, #67	; 0x43
 8006f84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f86:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	200000d8 	.word	0x200000d8

08006f98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	220a      	movs	r2, #10
 8006fa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fa6:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	2000000c 	.word	0x2000000c

08006fb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e004      	b.n	8006fd6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007024:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800704c:	2301      	movs	r3, #1
 800704e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800705a:	2303      	movs	r3, #3
 800705c:	e01a      	b.n	8007094 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007064:	2b00      	cmp	r3, #0
 8007066:	d114      	bne.n	8007092 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2201      	movs	r2, #1
 800706c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007086:	2181      	movs	r1, #129	; 0x81
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fff2 	bl	8009072 <USBD_LL_Transmit>

    ret = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e016      	b.n	80070e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7c1b      	ldrb	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070cc:	2101      	movs	r1, #1
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fff0 	bl	80090b4 <USBD_LL_PrepareReceive>
 80070d4:	e007      	b.n	80070e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070dc:	2340      	movs	r3, #64	; 0x40
 80070de:	2101      	movs	r1, #1
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 ffe7 	bl	80090b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e025      	b.n	8007154 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	79fa      	ldrb	r2, [r7, #7]
 8007146:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f001 fe5d 	bl	8008e08 <USBD_LL_Init>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e010      	b.n	8007196 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f107 020e 	add.w	r2, r7, #14
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	4602      	mov	r2, r0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fe7a 	bl	8008ea0 <USBD_LL_Start>
 80071ac:	4603      	mov	r3, r0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	4611      	mov	r1, r2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	4611      	mov	r1, r2
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
  }

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 ff56 	bl	80080f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2b01      	cmp	r3, #1
 800726e:	d00e      	beq.n	800728e <USBD_LL_SetupStage+0x5a>
 8007270:	2b01      	cmp	r3, #1
 8007272:	d302      	bcc.n	800727a <USBD_LL_SetupStage+0x46>
 8007274:	2b02      	cmp	r3, #2
 8007276:	d014      	beq.n	80072a2 <USBD_LL_SetupStage+0x6e>
 8007278:	e01d      	b.n	80072b6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa18 	bl	80076b8 <USBD_StdDevReq>
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
      break;
 800728c:	e020      	b.n	80072d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa7c 	bl	8007794 <USBD_StdItfReq>
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]
      break;
 80072a0:	e016      	b.n	80072d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fab8 	bl	8007820 <USBD_StdEPReq>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]
      break;
 80072b4:	e00c      	b.n	80072d0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fe4b 	bl	8008f60 <USBD_LL_StallEP>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]
      break;
 80072ce:	bf00      	nop
  }

  return ret;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b086      	sub	sp, #24
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	460b      	mov	r3, r1
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d137      	bne.n	800735e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d14a      	bne.n	8007396 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	429a      	cmp	r2, r3
 800730a:	d913      	bls.n	8007334 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	1ad2      	subs	r2, r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4293      	cmp	r3, r2
 8007324:	bf28      	it	cs
 8007326:	4613      	movcs	r3, r2
 8007328:	461a      	mov	r2, r3
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 ffd7 	bl	80082e0 <USBD_CtlContinueRx>
 8007332:	e030      	b.n	8007396 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007346:	2b03      	cmp	r3, #3
 8007348:	d105      	bne.n	8007356 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 ffd3 	bl	8008302 <USBD_CtlSendStatus>
 800735c:	e01b      	b.n	8007396 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d013      	beq.n	8007392 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007370:	2b03      	cmp	r3, #3
 8007372:	d10e      	bne.n	8007392 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	7afa      	ldrb	r2, [r7, #11]
 800737e:	4611      	mov	r1, r2
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	4798      	blx	r3
 8007384:	4603      	mov	r3, r0
 8007386:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	e002      	b.n	8007398 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007392:	2303      	movs	r3, #3
 8007394:	e000      	b.n	8007398 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	460b      	mov	r3, r1
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d16a      	bne.n	800748a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3314      	adds	r3, #20
 80073b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d155      	bne.n	8007470 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d914      	bls.n	80073fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	1ad2      	subs	r2, r2, r3
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 ff4c 	bl	8008284 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ec:	2300      	movs	r3, #0
 80073ee:	2200      	movs	r2, #0
 80073f0:	2100      	movs	r1, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f001 fe5e 	bl	80090b4 <USBD_LL_PrepareReceive>
 80073f8:	e03a      	b.n	8007470 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	d11c      	bne.n	8007440 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800740e:	429a      	cmp	r2, r3
 8007410:	d316      	bcc.n	8007440 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800741c:	429a      	cmp	r2, r3
 800741e:	d20f      	bcs.n	8007440 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007420:	2200      	movs	r2, #0
 8007422:	2100      	movs	r1, #0
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 ff2d 	bl	8008284 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007432:	2300      	movs	r3, #0
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f001 fe3b 	bl	80090b4 <USBD_LL_PrepareReceive>
 800743e:	e017      	b.n	8007470 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007452:	2b03      	cmp	r3, #3
 8007454:	d105      	bne.n	8007462 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007462:	2180      	movs	r1, #128	; 0x80
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 fd7b 	bl	8008f60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 ff5c 	bl	8008328 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007476:	2b01      	cmp	r3, #1
 8007478:	d123      	bne.n	80074c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7ff fe9b 	bl	80071b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007488:	e01b      	b.n	80074c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d013      	beq.n	80074be <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800749c:	2b03      	cmp	r3, #3
 800749e:	d10e      	bne.n	80074be <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	7afa      	ldrb	r2, [r7, #11]
 80074aa:	4611      	mov	r1, r2
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	4798      	blx	r3
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	e002      	b.n	80074c4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074be:	2303      	movs	r3, #3
 80074c0:	e000      	b.n	80074c4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d009      	beq.n	8007510 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	4611      	mov	r1, r2
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fcdd 	bl	8008ed6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2240      	movs	r2, #64	; 0x40
 8007528:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fccf 	bl	8008ed6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2240      	movs	r2, #64	; 0x40
 8007542:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	78fa      	ldrb	r2, [r7, #3]
 800755e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2204      	movs	r2, #4
 8007586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d105      	bne.n	80075b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d10b      	bne.n	80075ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d009      	beq.n	8007670 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6852      	ldr	r2, [r2, #4]
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	4611      	mov	r1, r2
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
  }

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800767a:	b480      	push	{r7}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	3301      	adds	r3, #1
 8007690:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007698:	8a3b      	ldrh	r3, [r7, #16]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	b21a      	sxth	r2, r3
 800769e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	b21b      	sxth	r3, r3
 80076a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076a8:	89fb      	ldrh	r3, [r7, #14]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d004      	beq.n	80076dc <USBD_StdDevReq+0x24>
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d002      	beq.n	80076dc <USBD_StdDevReq+0x24>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <USBD_StdDevReq+0x38>
 80076da:	e050      	b.n	800777e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
    break;
 80076ee:	e04b      	b.n	8007788 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b09      	cmp	r3, #9
 80076f6:	d83c      	bhi.n	8007772 <USBD_StdDevReq+0xba>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <USBD_StdDevReq+0x48>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007755 	.word	0x08007755
 8007704:	08007769 	.word	0x08007769
 8007708:	08007773 	.word	0x08007773
 800770c:	0800775f 	.word	0x0800775f
 8007710:	08007773 	.word	0x08007773
 8007714:	08007733 	.word	0x08007733
 8007718:	08007729 	.word	0x08007729
 800771c:	08007773 	.word	0x08007773
 8007720:	0800774b 	.word	0x0800774b
 8007724:	0800773d 	.word	0x0800773d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9ce 	bl	8007acc <USBD_GetDescriptor>
      break;
 8007730:	e024      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb5d 	bl	8007df4 <USBD_SetAddress>
      break;
 800773a:	e01f      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fb9a 	bl	8007e78 <USBD_SetConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e018      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc37 	bl	8007fc0 <USBD_GetConfig>
      break;
 8007752:	e013      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fc66 	bl	8008028 <USBD_GetStatus>
      break;
 800775c:	e00e      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc94 	bl	800808e <USBD_SetFeature>
      break;
 8007766:	e009      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fca3 	bl	80080b6 <USBD_ClrFeature>
      break;
 8007770:	e004      	b.n	800777c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fcf9 	bl	800816c <USBD_CtlError>
      break;
 800777a:	bf00      	nop
    }
    break;
 800777c:	e004      	b.n	8007788 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fcf3 	bl	800816c <USBD_CtlError>
    break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d003      	beq.n	80077b6 <USBD_StdItfReq+0x22>
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d001      	beq.n	80077b6 <USBD_StdItfReq+0x22>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d12a      	bne.n	800780c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077bc:	3b01      	subs	r3, #1
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d81d      	bhi.n	80077fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	889b      	ldrh	r3, [r3, #4]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d813      	bhi.n	80077f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
 80077da:	4603      	mov	r3, r0
 80077dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	88db      	ldrh	r3, [r3, #6]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d110      	bne.n	8007808 <USBD_StdItfReq+0x74>
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10d      	bne.n	8007808 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fd88 	bl	8008302 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077f2:	e009      	b.n	8007808 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fcb8 	bl	800816c <USBD_CtlError>
      break;
 80077fc:	e004      	b.n	8007808 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fcb3 	bl	800816c <USBD_CtlError>
      break;
 8007806:	e000      	b.n	800780a <USBD_StdItfReq+0x76>
      break;
 8007808:	bf00      	nop
    }
    break;
 800780a:	e004      	b.n	8007816 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fcac 	bl	800816c <USBD_CtlError>
    break;
 8007814:	bf00      	nop
  }

  return ret;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	889b      	ldrh	r3, [r3, #4]
 8007832:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800783c:	2b20      	cmp	r3, #32
 800783e:	d004      	beq.n	800784a <USBD_StdEPReq+0x2a>
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d002      	beq.n	800784a <USBD_StdEPReq+0x2a>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <USBD_StdEPReq+0x3e>
 8007848:	e135      	b.n	8007ab6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
    break;
 800785c:	e130      	b.n	8007ac0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d03e      	beq.n	80078e4 <USBD_StdEPReq+0xc4>
 8007866:	2b03      	cmp	r3, #3
 8007868:	d002      	beq.n	8007870 <USBD_StdEPReq+0x50>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d077      	beq.n	800795e <USBD_StdEPReq+0x13e>
 800786e:	e11c      	b.n	8007aaa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007876:	2b02      	cmp	r3, #2
 8007878:	d002      	beq.n	8007880 <USBD_StdEPReq+0x60>
 800787a:	2b03      	cmp	r3, #3
 800787c:	d015      	beq.n	80078aa <USBD_StdEPReq+0x8a>
 800787e:	e02b      	b.n	80078d8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00c      	beq.n	80078a0 <USBD_StdEPReq+0x80>
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b80      	cmp	r3, #128	; 0x80
 800788a:	d009      	beq.n	80078a0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fb65 	bl	8008f60 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007896:	2180      	movs	r1, #128	; 0x80
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 fb61 	bl	8008f60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800789e:	e020      	b.n	80078e2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc62 	bl	800816c <USBD_CtlError>
        break;
 80078a8:	e01b      	b.n	80078e2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	885b      	ldrh	r3, [r3, #2]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10e      	bne.n	80078d0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_StdEPReq+0xb0>
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b80      	cmp	r3, #128	; 0x80
 80078bc:	d008      	beq.n	80078d0 <USBD_StdEPReq+0xb0>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	88db      	ldrh	r3, [r3, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fb48 	bl	8008f60 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fd16 	bl	8008302 <USBD_CtlSendStatus>

        break;
 80078d6:	e004      	b.n	80078e2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fc46 	bl	800816c <USBD_CtlError>
        break;
 80078e0:	bf00      	nop
      }
      break;
 80078e2:	e0e7      	b.n	8007ab4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d002      	beq.n	80078f4 <USBD_StdEPReq+0xd4>
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d015      	beq.n	800791e <USBD_StdEPReq+0xfe>
 80078f2:	e02d      	b.n	8007950 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00c      	beq.n	8007914 <USBD_StdEPReq+0xf4>
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b80      	cmp	r3, #128	; 0x80
 80078fe:	d009      	beq.n	8007914 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fb2b 	bl	8008f60 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800790a:	2180      	movs	r1, #128	; 0x80
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fb27 	bl	8008f60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007912:	e023      	b.n	800795c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fc28 	bl	800816c <USBD_CtlError>
        break;
 800791c:	e01e      	b.n	800795c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	885b      	ldrh	r3, [r3, #2]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d119      	bne.n	800795a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fb32 	bl	8008f9e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fce1 	bl	8008302 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
        }
        break;
 800794e:	e004      	b.n	800795a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fc0a 	bl	800816c <USBD_CtlError>
        break;
 8007958:	e000      	b.n	800795c <USBD_StdEPReq+0x13c>
        break;
 800795a:	bf00      	nop
      }
      break;
 800795c:	e0aa      	b.n	8007ab4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007964:	2b02      	cmp	r3, #2
 8007966:	d002      	beq.n	800796e <USBD_StdEPReq+0x14e>
 8007968:	2b03      	cmp	r3, #3
 800796a:	d032      	beq.n	80079d2 <USBD_StdEPReq+0x1b2>
 800796c:	e097      	b.n	8007a9e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <USBD_StdEPReq+0x164>
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d004      	beq.n	8007984 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbf5 	bl	800816c <USBD_CtlError>
          break;
 8007982:	e091      	b.n	8007aa8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	da0b      	bge.n	80079a4 <USBD_StdEPReq+0x184>
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	3310      	adds	r3, #16
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	3304      	adds	r3, #4
 80079a2:	e00b      	b.n	80079bc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	3304      	adds	r3, #4
 80079bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2202      	movs	r2, #2
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc3f 	bl	800824e <USBD_CtlSendData>
        break;
 80079d0:	e06a      	b.n	8007aa8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da11      	bge.n	80079fe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3324      	adds	r3, #36	; 0x24
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d117      	bne.n	8007a24 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fbb8 	bl	800816c <USBD_CtlError>
            break;
 80079fc:	e054      	b.n	8007aa8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fba5 	bl	800816c <USBD_CtlError>
            break;
 8007a22:	e041      	b.n	8007aa8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da0b      	bge.n	8007a44 <USBD_StdEPReq+0x224>
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	4413      	add	r3, r2
 8007a40:	3304      	adds	r3, #4
 8007a42:	e00b      	b.n	8007a5c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_StdEPReq+0x24a>
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	2b80      	cmp	r3, #128	; 0x80
 8007a68:	d103      	bne.n	8007a72 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e00e      	b.n	8007a90 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fab0 	bl	8008fdc <USBD_LL_IsStallEP>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	e002      	b.n	8007a90 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2202      	movs	r2, #2
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fbd9 	bl	800824e <USBD_CtlSendData>
          break;
 8007a9c:	e004      	b.n	8007aa8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fb63 	bl	800816c <USBD_CtlError>
        break;
 8007aa6:	bf00      	nop
      }
      break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb5d 	bl	800816c <USBD_CtlError>
      break;
 8007ab2:	bf00      	nop
    }
    break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb57 	bl	800816c <USBD_CtlError>
    break;
 8007abe:	bf00      	nop
  }

  return ret;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	0a1b      	lsrs	r3, r3, #8
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	2b0e      	cmp	r3, #14
 8007aee:	f200 8152 	bhi.w	8007d96 <USBD_GetDescriptor+0x2ca>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBD_GetDescriptor+0x2c>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b69 	.word	0x08007b69
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007bc1 	.word	0x08007bc1
 8007b04:	08007d97 	.word	0x08007d97
 8007b08:	08007d97 	.word	0x08007d97
 8007b0c:	08007d37 	.word	0x08007d37
 8007b10:	08007d63 	.word	0x08007d63
 8007b14:	08007d97 	.word	0x08007d97
 8007b18:	08007d97 	.word	0x08007d97
 8007b1c:	08007d97 	.word	0x08007d97
 8007b20:	08007d97 	.word	0x08007d97
 8007b24:	08007d97 	.word	0x08007d97
 8007b28:	08007d97 	.word	0x08007d97
 8007b2c:	08007d97 	.word	0x08007d97
 8007b30:	08007b35 	.word	0x08007b35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b56:	e126      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fb06 	bl	800816c <USBD_CtlError>
      err++;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3301      	adds	r3, #1
 8007b64:	72fb      	strb	r3, [r7, #11]
    break;
 8007b66:	e11e      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
    break;
 8007b7e:	e112      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7c1b      	ldrb	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10d      	bne.n	8007ba4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007ba2:	e100      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	f107 0208 	add.w	r2, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	2202      	movs	r2, #2
 8007bbc:	701a      	strb	r2, [r3, #0]
    break;
 8007bbe:	e0f2      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	885b      	ldrh	r3, [r3, #2]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	f200 80ac 	bhi.w	8007d24 <USBD_GetDescriptor+0x258>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <USBD_GetDescriptor+0x108>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007c21 	.word	0x08007c21
 8007bdc:	08007c55 	.word	0x08007c55
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007cbd 	.word	0x08007cbd
 8007be8:	08007cf1 	.word	0x08007cf1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c0e:	e091      	b.n	8007d34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 faaa 	bl	800816c <USBD_CtlError>
        err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c1e:	e089      	b.n	8007d34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c42:	e077      	b.n	8007d34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa90 	bl	800816c <USBD_CtlError>
        err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
      break;
 8007c52:	e06f      	b.n	8007d34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c76:	e05d      	b.n	8007d34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa76 	bl	800816c <USBD_CtlError>
        err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
      break;
 8007c86:	e055      	b.n	8007d34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007caa:	e043      	b.n	8007d34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa5c 	bl	800816c <USBD_CtlError>
        err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cba:	e03b      	b.n	8007d34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cde:	e029      	b.n	8007d34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa42 	bl	800816c <USBD_CtlError>
        err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
      break;
 8007cee:	e021      	b.n	8007d34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d12:	e00f      	b.n	8007d34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa28 	bl	800816c <USBD_CtlError>
        err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
      break;
 8007d22:	e007      	b.n	8007d34 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa20 	bl	800816c <USBD_CtlError>
      err++;
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d32:	bf00      	nop
    }
    break;
 8007d34:	e037      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7c1b      	ldrb	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	f107 0208 	add.w	r2, r7, #8
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d50:	e029      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fa09 	bl	800816c <USBD_CtlError>
      err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d60:	e021      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f107 0208 	add.w	r2, r7, #8
 8007d76:	4610      	mov	r0, r2
 8007d78:	4798      	blx	r3
 8007d7a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	2207      	movs	r2, #7
 8007d82:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d84:	e00f      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f9ef 	bl	800816c <USBD_CtlError>
      err++;
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	3301      	adds	r3, #1
 8007d92:	72fb      	strb	r3, [r7, #11]
    break;
 8007d94:	e007      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f9e7 	bl	800816c <USBD_CtlError>
    err++;
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	3301      	adds	r3, #1
 8007da2:	72fb      	strb	r3, [r7, #11]
    break;
 8007da4:	bf00      	nop
  }

  if (err != 0U)
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d11e      	bne.n	8007dea <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	88db      	ldrh	r3, [r3, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d016      	beq.n	8007de2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007db4:	893b      	ldrh	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88da      	ldrh	r2, [r3, #6]
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	bf28      	it	cs
 8007dc4:	4613      	movcs	r3, r2
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fa3c 	bl	800824e <USBD_CtlSendData>
 8007dd6:	e009      	b.n	8007dec <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9c6 	bl	800816c <USBD_CtlError>
 8007de0:	e004      	b.n	8007dec <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa8d 	bl	8008302 <USBD_CtlSendStatus>
 8007de8:	e000      	b.n	8007dec <USBD_GetDescriptor+0x320>
    return;
 8007dea:	bf00      	nop
    }
  }
}
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop

08007df4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	889b      	ldrh	r3, [r3, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d130      	bne.n	8007e68 <USBD_SetAddress+0x74>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d12c      	bne.n	8007e68 <USBD_SetAddress+0x74>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	2b7f      	cmp	r3, #127	; 0x7f
 8007e14:	d828      	bhi.n	8007e68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d104      	bne.n	8007e36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f99c 	bl	800816c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e34:	e01c      	b.n	8007e70 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7bfa      	ldrb	r2, [r7, #15]
 8007e3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 f8f6 	bl	8009034 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fa5a 	bl	8008302 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5c:	e008      	b.n	8007e70 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	e003      	b.n	8007e70 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f97e 	bl	800816c <USBD_CtlError>
  }
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	885b      	ldrh	r3, [r3, #2]
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <USBD_SetConfig+0x144>)
 8007e8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e90:	4b4a      	ldr	r3, [pc, #296]	; (8007fbc <USBD_SetConfig+0x144>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d905      	bls.n	8007ea4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f966 	bl	800816c <USBD_CtlError>
    return USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e087      	b.n	8007fb4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d002      	beq.n	8007eb4 <USBD_SetConfig+0x3c>
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d025      	beq.n	8007efe <USBD_SetConfig+0x86>
 8007eb2:	e071      	b.n	8007f98 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007eb4:	4b41      	ldr	r3, [pc, #260]	; (8007fbc <USBD_SetConfig+0x144>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01c      	beq.n	8007ef6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007ebc:	4b3f      	ldr	r3, [pc, #252]	; (8007fbc <USBD_SetConfig+0x144>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ec6:	4b3d      	ldr	r3, [pc, #244]	; (8007fbc <USBD_SetConfig+0x144>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff f97d 	bl	80071cc <USBD_SetClassConfig>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f944 	bl	800816c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ee4:	e065      	b.n	8007fb2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa0b 	bl	8008302 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ef4:	e05d      	b.n	8007fb2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa03 	bl	8008302 <USBD_CtlSendStatus>
    break;
 8007efc:	e059      	b.n	8007fb2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007efe:	4b2f      	ldr	r3, [pc, #188]	; (8007fbc <USBD_SetConfig+0x144>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d112      	bne.n	8007f2c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f0e:	4b2b      	ldr	r3, [pc, #172]	; (8007fbc <USBD_SetConfig+0x144>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f18:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <USBD_SetConfig+0x144>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff f970 	bl	8007204 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f9ec 	bl	8008302 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f2a:	e042      	b.n	8007fb2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f2c:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <USBD_SetConfig+0x144>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d02a      	beq.n	8007f90 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff f95e 	bl	8007204 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f48:	4b1c      	ldr	r3, [pc, #112]	; (8007fbc <USBD_SetConfig+0x144>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f52:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <USBD_SetConfig+0x144>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff f937 	bl	80071cc <USBD_SetClassConfig>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00f      	beq.n	8007f88 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f8fe 	bl	800816c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff f943 	bl	8007204 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f86:	e014      	b.n	8007fb2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f9ba 	bl	8008302 <USBD_CtlSendStatus>
    break;
 8007f8e:	e010      	b.n	8007fb2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f9b6 	bl	8008302 <USBD_CtlSendStatus>
    break;
 8007f96:	e00c      	b.n	8007fb2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8e6 	bl	800816c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <USBD_SetConfig+0x144>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7ff f92c 	bl	8007204 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb0:	bf00      	nop
  }

  return ret;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20000388 	.word	0x20000388

08007fc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	88db      	ldrh	r3, [r3, #6]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d004      	beq.n	8007fdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f8c9 	bl	800816c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007fda:	e021      	b.n	8008020 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	db17      	blt.n	8008016 <USBD_GetConfig+0x56>
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	dd02      	ble.n	8007ff0 <USBD_GetConfig+0x30>
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d00b      	beq.n	8008006 <USBD_GetConfig+0x46>
 8007fee:	e012      	b.n	8008016 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f925 	bl	800824e <USBD_CtlSendData>
      break;
 8008004:	e00c      	b.n	8008020 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3304      	adds	r3, #4
 800800a:	2201      	movs	r2, #1
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f91d 	bl	800824e <USBD_CtlSendData>
      break;
 8008014:	e004      	b.n	8008020 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f8a7 	bl	800816c <USBD_CtlError>
      break;
 800801e:	bf00      	nop
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008038:	3b01      	subs	r3, #1
 800803a:	2b02      	cmp	r3, #2
 800803c:	d81e      	bhi.n	800807c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	88db      	ldrh	r3, [r3, #6]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d004      	beq.n	8008050 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f88f 	bl	800816c <USBD_CtlError>
      break;
 800804e:	e01a      	b.n	8008086 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f043 0202 	orr.w	r2, r3, #2
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	330c      	adds	r3, #12
 8008070:	2202      	movs	r2, #2
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f8ea 	bl	800824e <USBD_CtlSendData>
    break;
 800807a:	e004      	b.n	8008086 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f874 	bl	800816c <USBD_CtlError>
    break;
 8008084:	bf00      	nop
  }
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	885b      	ldrh	r3, [r3, #2]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d106      	bne.n	80080ae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f92a 	bl	8008302 <USBD_CtlSendStatus>
  }
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	3b01      	subs	r3, #1
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d80b      	bhi.n	80080e4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	885b      	ldrh	r3, [r3, #2]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d10c      	bne.n	80080ee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f910 	bl	8008302 <USBD_CtlSendStatus>
      }
      break;
 80080e2:	e004      	b.n	80080ee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f840 	bl	800816c <USBD_CtlError>
      break;
 80080ec:	e000      	b.n	80080f0 <USBD_ClrFeature+0x3a>
      break;
 80080ee:	bf00      	nop
  }
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	781a      	ldrb	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff faa9 	bl	800767a <SWAPBYTE>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff fa9c 	bl	800767a <SWAPBYTE>
 8008142:	4603      	mov	r3, r0
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fa8f 	bl	800767a <SWAPBYTE>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	80da      	strh	r2, [r3, #6]
}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008176:	2180      	movs	r1, #128	; 0x80
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fef1 	bl	8008f60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800817e:	2100      	movs	r1, #0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 feed 	bl	8008f60 <USBD_LL_StallEP>
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b086      	sub	sp, #24
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d036      	beq.n	8008212 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081a8:	6938      	ldr	r0, [r7, #16]
 80081aa:	f000 f836 	bl	800821a <USBD_GetLen>
 80081ae:	4603      	mov	r3, r0
 80081b0:	3301      	adds	r3, #1
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	4413      	add	r3, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	7812      	ldrb	r2, [r2, #0]
 80081c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	3301      	adds	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	4413      	add	r3, r2
 80081d4:	2203      	movs	r2, #3
 80081d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	3301      	adds	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081de:	e013      	b.n	8008208 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4413      	add	r3, r2
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	3301      	adds	r3, #1
 80081f0:	613b      	str	r3, [r7, #16]
    idx++;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	3301      	adds	r3, #1
 80081f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
    idx++;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	3301      	adds	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e7      	bne.n	80081e0 <USBD_GetString+0x52>
 8008210:	e000      	b.n	8008214 <USBD_GetString+0x86>
    return;
 8008212:	bf00      	nop
  }
}
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800822a:	e005      	b.n	8008238 <USBD_GetLen+0x1e>
  {
    len++;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	3301      	adds	r3, #1
 8008230:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3301      	adds	r3, #1
 8008236:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1f5      	bne.n	800822c <USBD_GetLen+0x12>
  }

  return len;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2202      	movs	r2, #2
 800825e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	2100      	movs	r1, #0
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fefc 	bl	8009072 <USBD_LL_Transmit>

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	2100      	movs	r1, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 feeb 	bl	8009072 <USBD_LL_Transmit>

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2203      	movs	r2, #3
 80082b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	2100      	movs	r1, #0
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 feef 	bl	80090b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	2100      	movs	r1, #0
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fede 	bl	80090b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2204      	movs	r2, #4
 800830e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008312:	2300      	movs	r3, #0
 8008314:	2200      	movs	r2, #0
 8008316:	2100      	movs	r1, #0
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 feaa 	bl	8009072 <USBD_LL_Transmit>

  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2205      	movs	r2, #5
 8008334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008338:	2300      	movs	r3, #0
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 feb8 	bl	80090b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6892      	ldr	r2, [r2, #8]
 80083ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6852      	ldr	r2, [r2, #4]
 80083b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d103      	bne.n	80083ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	1e5a      	subs	r2, r3, #1
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083f2:	2300      	movs	r3, #0
 80083f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f6:	4b4e      	ldr	r3, [pc, #312]	; (8008530 <xTaskIncrementTick+0x144>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 8087 	bne.w	800850e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008400:	4b4c      	ldr	r3, [pc, #304]	; (8008534 <xTaskIncrementTick+0x148>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008408:	4a4a      	ldr	r2, [pc, #296]	; (8008534 <xTaskIncrementTick+0x148>)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d11f      	bne.n	8008454 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008414:	4b48      	ldr	r3, [pc, #288]	; (8008538 <xTaskIncrementTick+0x14c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	e7fe      	b.n	8008430 <xTaskIncrementTick+0x44>
 8008432:	4b41      	ldr	r3, [pc, #260]	; (8008538 <xTaskIncrementTick+0x14c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	4b40      	ldr	r3, [pc, #256]	; (800853c <xTaskIncrementTick+0x150>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a3e      	ldr	r2, [pc, #248]	; (8008538 <xTaskIncrementTick+0x14c>)
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	4a3e      	ldr	r2, [pc, #248]	; (800853c <xTaskIncrementTick+0x150>)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	4b3e      	ldr	r3, [pc, #248]	; (8008540 <xTaskIncrementTick+0x154>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	4a3c      	ldr	r2, [pc, #240]	; (8008540 <xTaskIncrementTick+0x154>)
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	f000 f8de 	bl	8008610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008454:	4b3b      	ldr	r3, [pc, #236]	; (8008544 <xTaskIncrementTick+0x158>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	429a      	cmp	r2, r3
 800845c:	d348      	bcc.n	80084f0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800845e:	4b36      	ldr	r3, [pc, #216]	; (8008538 <xTaskIncrementTick+0x14c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008468:	4b36      	ldr	r3, [pc, #216]	; (8008544 <xTaskIncrementTick+0x158>)
 800846a:	f04f 32ff 	mov.w	r2, #4294967295
 800846e:	601a      	str	r2, [r3, #0]
					break;
 8008470:	e03e      	b.n	80084f0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008472:	4b31      	ldr	r3, [pc, #196]	; (8008538 <xTaskIncrementTick+0x14c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d203      	bcs.n	8008492 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800848a:	4a2e      	ldr	r2, [pc, #184]	; (8008544 <xTaskIncrementTick+0x158>)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008490:	e02e      	b.n	80084f0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3304      	adds	r3, #4
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff ff7d 	bl	8008396 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d004      	beq.n	80084ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	3318      	adds	r3, #24
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff74 	bl	8008396 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	2201      	movs	r2, #1
 80084b4:	409a      	lsls	r2, r3
 80084b6:	4b24      	ldr	r3, [pc, #144]	; (8008548 <xTaskIncrementTick+0x15c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	4a22      	ldr	r2, [pc, #136]	; (8008548 <xTaskIncrementTick+0x15c>)
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4a1f      	ldr	r2, [pc, #124]	; (800854c <xTaskIncrementTick+0x160>)
 80084ce:	441a      	add	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f7ff ff39 	bl	800834e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <xTaskIncrementTick+0x164>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3b9      	bcc.n	800845e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80084ea:	2301      	movs	r3, #1
 80084ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ee:	e7b6      	b.n	800845e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084f0:	4b17      	ldr	r3, [pc, #92]	; (8008550 <xTaskIncrementTick+0x164>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f6:	4915      	ldr	r1, [pc, #84]	; (800854c <xTaskIncrementTick+0x160>)
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d907      	bls.n	8008518 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008508:	2301      	movs	r3, #1
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e004      	b.n	8008518 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800850e:	4b11      	ldr	r3, [pc, #68]	; (8008554 <xTaskIncrementTick+0x168>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3301      	adds	r3, #1
 8008514:	4a0f      	ldr	r2, [pc, #60]	; (8008554 <xTaskIncrementTick+0x168>)
 8008516:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008518:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <xTaskIncrementTick+0x16c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008520:	2301      	movs	r3, #1
 8008522:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008524:	697b      	ldr	r3, [r7, #20]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	2000043c 	.word	0x2000043c
 8008534:	20000424 	.word	0x20000424
 8008538:	2000041c 	.word	0x2000041c
 800853c:	20000420 	.word	0x20000420
 8008540:	20000434 	.word	0x20000434
 8008544:	20000438 	.word	0x20000438
 8008548:	20000428 	.word	0x20000428
 800854c:	20000390 	.word	0x20000390
 8008550:	2000038c 	.word	0x2000038c
 8008554:	2000042c 	.word	0x2000042c
 8008558:	20000430 	.word	0x20000430

0800855c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008562:	4b26      	ldr	r3, [pc, #152]	; (80085fc <vTaskSwitchContext+0xa0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800856a:	4b25      	ldr	r3, [pc, #148]	; (8008600 <vTaskSwitchContext+0xa4>)
 800856c:	2201      	movs	r2, #1
 800856e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008570:	e03e      	b.n	80085f0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008572:	4b23      	ldr	r3, [pc, #140]	; (8008600 <vTaskSwitchContext+0xa4>)
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008578:	4b22      	ldr	r3, [pc, #136]	; (8008604 <vTaskSwitchContext+0xa8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	fab3 f383 	clz	r3, r3
 8008584:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	f1c3 031f 	rsb	r3, r3, #31
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	491e      	ldr	r1, [pc, #120]	; (8008608 <vTaskSwitchContext+0xac>)
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	e7fe      	b.n	80085b4 <vTaskSwitchContext+0x58>
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4a11      	ldr	r2, [pc, #68]	; (8008608 <vTaskSwitchContext+0xac>)
 80085c2:	4413      	add	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	605a      	str	r2, [r3, #4]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	3308      	adds	r3, #8
 80085d8:	429a      	cmp	r2, r3
 80085da:	d104      	bne.n	80085e6 <vTaskSwitchContext+0x8a>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	4a07      	ldr	r2, [pc, #28]	; (800860c <vTaskSwitchContext+0xb0>)
 80085ee:	6013      	str	r3, [r2, #0]
}
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	2000043c 	.word	0x2000043c
 8008600:	20000430 	.word	0x20000430
 8008604:	20000428 	.word	0x20000428
 8008608:	20000390 	.word	0x20000390
 800860c:	2000038c 	.word	0x2000038c

08008610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <prvResetNextTaskUnblockTime+0x38>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <prvResetNextTaskUnblockTime+0x3c>)
 8008622:	f04f 32ff 	mov.w	r2, #4294967295
 8008626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008628:	e008      	b.n	800863c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <prvResetNextTaskUnblockTime+0x38>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4a04      	ldr	r2, [pc, #16]	; (800864c <prvResetNextTaskUnblockTime+0x3c>)
 800863a:	6013      	str	r3, [r2, #0]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	2000041c 	.word	0x2000041c
 800864c:	20000438 	.word	0x20000438

08008650 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <pxCurrentTCBConst2>)
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	6808      	ldr	r0, [r1, #0]
 8008656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	f380 8809 	msr	PSP, r0
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f380 8811 	msr	BASEPRI, r0
 800866a:	4770      	bx	lr
 800866c:	f3af 8000 	nop.w

08008670 <pxCurrentTCBConst2>:
 8008670:	2000038c 	.word	0x2000038c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
	...

08008680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008680:	f3ef 8009 	mrs	r0, PSP
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <pxCurrentTCBConst>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	f01e 0f10 	tst.w	lr, #16
 8008690:	bf08      	it	eq
 8008692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	6010      	str	r0, [r2, #0]
 800869c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086a4:	f380 8811 	msr	BASEPRI, r0
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f7ff ff54 	bl	800855c <vTaskSwitchContext>
 80086b4:	f04f 0000 	mov.w	r0, #0
 80086b8:	f380 8811 	msr	BASEPRI, r0
 80086bc:	bc09      	pop	{r0, r3}
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	6808      	ldr	r0, [r1, #0]
 80086c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c6:	f01e 0f10 	tst.w	lr, #16
 80086ca:	bf08      	it	eq
 80086cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086d0:	f380 8809 	msr	PSP, r0
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	f3af 8000 	nop.w

080086e0 <pxCurrentTCBConst>:
 80086e0:	2000038c 	.word	0x2000038c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008700:	f7ff fe74 	bl	80083ec <xTaskIncrementTick>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800870a:	4b06      	ldr	r3, [pc, #24]	; (8008724 <SysTick_Handler+0x3c>)
 800870c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	2300      	movs	r3, #0
 8008714:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	e000ed04 	.word	0xe000ed04

08008728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800872c:	2200      	movs	r2, #0
 800872e:	4912      	ldr	r1, [pc, #72]	; (8008778 <MX_USB_DEVICE_Init+0x50>)
 8008730:	4812      	ldr	r0, [pc, #72]	; (800877c <MX_USB_DEVICE_Init+0x54>)
 8008732:	f7fe fcdd 	bl	80070f0 <USBD_Init>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800873c:	f7f8 fe1c 	bl	8001378 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008740:	490f      	ldr	r1, [pc, #60]	; (8008780 <MX_USB_DEVICE_Init+0x58>)
 8008742:	480e      	ldr	r0, [pc, #56]	; (800877c <MX_USB_DEVICE_Init+0x54>)
 8008744:	f7fe fd0a 	bl	800715c <USBD_RegisterClass>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800874e:	f7f8 fe13 	bl	8001378 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008752:	490c      	ldr	r1, [pc, #48]	; (8008784 <MX_USB_DEVICE_Init+0x5c>)
 8008754:	4809      	ldr	r0, [pc, #36]	; (800877c <MX_USB_DEVICE_Init+0x54>)
 8008756:	f7fe fc2f 	bl	8006fb8 <USBD_CDC_RegisterInterface>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008760:	f7f8 fe0a 	bl	8001378 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008764:	4805      	ldr	r0, [pc, #20]	; (800877c <MX_USB_DEVICE_Init+0x54>)
 8008766:	f7fe fd1a 	bl	800719e <USBD_Start>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008770:	f7f8 fe02 	bl	8001378 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008774:	bf00      	nop
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20000138 	.word	0x20000138
 800877c:	200006b8 	.word	0x200006b8
 8008780:	20000018 	.word	0x20000018
 8008784:	20000124 	.word	0x20000124

08008788 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800878c:	2200      	movs	r2, #0
 800878e:	4905      	ldr	r1, [pc, #20]	; (80087a4 <CDC_Init_FS+0x1c>)
 8008790:	4805      	ldr	r0, [pc, #20]	; (80087a8 <CDC_Init_FS+0x20>)
 8008792:	f7fe fc26 	bl	8006fe2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008796:	4905      	ldr	r1, [pc, #20]	; (80087ac <CDC_Init_FS+0x24>)
 8008798:	4803      	ldr	r0, [pc, #12]	; (80087a8 <CDC_Init_FS+0x20>)
 800879a:	f7fe fc3b 	bl	8007014 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800879e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20001188 	.word	0x20001188
 80087a8:	200006b8 	.word	0x200006b8
 80087ac:	20000988 	.word	0x20000988

080087b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	71fb      	strb	r3, [r7, #7]
 80087cc:	4613      	mov	r3, r2
 80087ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b23      	cmp	r3, #35	; 0x23
 80087d4:	d85c      	bhi.n	8008890 <CDC_Control_FS+0xd0>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <CDC_Control_FS+0x1c>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008891 	.word	0x08008891
 80087e0:	08008891 	.word	0x08008891
 80087e4:	08008891 	.word	0x08008891
 80087e8:	08008891 	.word	0x08008891
 80087ec:	08008891 	.word	0x08008891
 80087f0:	08008891 	.word	0x08008891
 80087f4:	08008891 	.word	0x08008891
 80087f8:	08008891 	.word	0x08008891
 80087fc:	08008891 	.word	0x08008891
 8008800:	08008891 	.word	0x08008891
 8008804:	08008891 	.word	0x08008891
 8008808:	08008891 	.word	0x08008891
 800880c:	08008891 	.word	0x08008891
 8008810:	08008891 	.word	0x08008891
 8008814:	08008891 	.word	0x08008891
 8008818:	08008891 	.word	0x08008891
 800881c:	08008891 	.word	0x08008891
 8008820:	08008891 	.word	0x08008891
 8008824:	08008891 	.word	0x08008891
 8008828:	08008891 	.word	0x08008891
 800882c:	08008891 	.word	0x08008891
 8008830:	08008891 	.word	0x08008891
 8008834:	08008891 	.word	0x08008891
 8008838:	08008891 	.word	0x08008891
 800883c:	08008891 	.word	0x08008891
 8008840:	08008891 	.word	0x08008891
 8008844:	08008891 	.word	0x08008891
 8008848:	08008891 	.word	0x08008891
 800884c:	08008891 	.word	0x08008891
 8008850:	08008891 	.word	0x08008891
 8008854:	08008891 	.word	0x08008891
 8008858:	08008891 	.word	0x08008891
 800885c:	0800886d 	.word	0x0800886d
 8008860:	0800887f 	.word	0x0800887f
 8008864:	08008891 	.word	0x08008891
 8008868:	08008891 	.word	0x08008891
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <CDC_Control_FS+0xe0>)
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	6810      	ldr	r0, [r2, #0]
 8008872:	6018      	str	r0, [r3, #0]
 8008874:	8891      	ldrh	r1, [r2, #4]
 8008876:	7992      	ldrb	r2, [r2, #6]
 8008878:	8099      	strh	r1, [r3, #4]
 800887a:	719a      	strb	r2, [r3, #6]
    break;
 800887c:	e009      	b.n	8008892 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	4a07      	ldr	r2, [pc, #28]	; (80088a0 <CDC_Control_FS+0xe0>)
 8008882:	6810      	ldr	r0, [r2, #0]
 8008884:	6018      	str	r0, [r3, #0]
 8008886:	8891      	ldrh	r1, [r2, #4]
 8008888:	7992      	ldrb	r2, [r2, #6]
 800888a:	8099      	strh	r1, [r3, #4]
 800888c:	719a      	strb	r2, [r3, #6]
    break;
 800888e:	e000      	b.n	8008892 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008890:	bf00      	nop
  }

  return (USBD_OK);
 8008892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	2000011c 	.word	0x2000011c

080088a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	4805      	ldr	r0, [pc, #20]	; (80088c8 <CDC_Receive_FS+0x24>)
 80088b2:	f7fe fbaf 	bl	8007014 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088b6:	4804      	ldr	r0, [pc, #16]	; (80088c8 <CDC_Receive_FS+0x24>)
 80088b8:	f7fe fbf0 	bl	800709c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80088bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	200006b8 	.word	0x200006b8

080088cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <CDC_Transmit_FS+0x48>)
 80088de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e00b      	b.n	800890a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80088f2:	887b      	ldrh	r3, [r7, #2]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4806      	ldr	r0, [pc, #24]	; (8008914 <CDC_Transmit_FS+0x48>)
 80088fa:	f7fe fb72 	bl	8006fe2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80088fe:	4805      	ldr	r0, [pc, #20]	; (8008914 <CDC_Transmit_FS+0x48>)
 8008900:	f7fe fb9c 	bl	800703c <USBD_CDC_TransmitPacket>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200006b8 	.word	0x200006b8

08008918 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4613      	mov	r3, r2
 8008924:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800892a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800892e:	4618      	mov	r0, r3
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
	...

0800893c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2212      	movs	r2, #18
 800894c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800894e:	4b03      	ldr	r3, [pc, #12]	; (800895c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	20000158 	.word	0x20000158

08008960 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2204      	movs	r2, #4
 8008970:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008972:	4b03      	ldr	r3, [pc, #12]	; (8008980 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	20000178 	.word	0x20000178

08008984 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	6039      	str	r1, [r7, #0]
 800898e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	4907      	ldr	r1, [pc, #28]	; (80089b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800899a:	4808      	ldr	r0, [pc, #32]	; (80089bc <USBD_FS_ProductStrDescriptor+0x38>)
 800899c:	f7ff fbf7 	bl	800818e <USBD_GetString>
 80089a0:	e004      	b.n	80089ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	4904      	ldr	r1, [pc, #16]	; (80089b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80089a6:	4805      	ldr	r0, [pc, #20]	; (80089bc <USBD_FS_ProductStrDescriptor+0x38>)
 80089a8:	f7ff fbf1 	bl	800818e <USBD_GetString>
  }
  return USBD_StrDesc;
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20001988 	.word	0x20001988
 80089bc:	0800b224 	.word	0x0800b224

080089c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	6039      	str	r1, [r7, #0]
 80089ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	4904      	ldr	r1, [pc, #16]	; (80089e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089d0:	4804      	ldr	r0, [pc, #16]	; (80089e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089d2:	f7ff fbdc 	bl	800818e <USBD_GetString>
  return USBD_StrDesc;
 80089d6:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20001988 	.word	0x20001988
 80089e4:	0800b23c 	.word	0x0800b23c

080089e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	221a      	movs	r2, #26
 80089f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089fa:	f000 f855 	bl	8008aa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089fe:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000017c 	.word	0x2000017c

08008a0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d105      	bne.n	8008a2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	4907      	ldr	r1, [pc, #28]	; (8008a40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a22:	4808      	ldr	r0, [pc, #32]	; (8008a44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a24:	f7ff fbb3 	bl	800818e <USBD_GetString>
 8008a28:	e004      	b.n	8008a34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	4904      	ldr	r1, [pc, #16]	; (8008a40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a2e:	4805      	ldr	r0, [pc, #20]	; (8008a44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a30:	f7ff fbad 	bl	800818e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a34:	4b02      	ldr	r3, [pc, #8]	; (8008a40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001988 	.word	0x20001988
 8008a44:	0800b250 	.word	0x0800b250

08008a48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d105      	bne.n	8008a66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	4907      	ldr	r1, [pc, #28]	; (8008a7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a5e:	4808      	ldr	r0, [pc, #32]	; (8008a80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a60:	f7ff fb95 	bl	800818e <USBD_GetString>
 8008a64:	e004      	b.n	8008a70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	4904      	ldr	r1, [pc, #16]	; (8008a7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a6a:	4805      	ldr	r0, [pc, #20]	; (8008a80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a6c:	f7ff fb8f 	bl	800818e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20001988 	.word	0x20001988
 8008a80:	0800b25c 	.word	0x0800b25c

08008a84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	220c      	movs	r2, #12
 8008a94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008a96:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	2000016c 	.word	0x2000016c

08008aa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <Get_SerialNum+0x44>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ab4:	4b0e      	ldr	r3, [pc, #56]	; (8008af0 <Get_SerialNum+0x48>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aba:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <Get_SerialNum+0x4c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ace:	2208      	movs	r2, #8
 8008ad0:	4909      	ldr	r1, [pc, #36]	; (8008af8 <Get_SerialNum+0x50>)
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f814 	bl	8008b00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ad8:	2204      	movs	r2, #4
 8008ada:	4908      	ldr	r1, [pc, #32]	; (8008afc <Get_SerialNum+0x54>)
 8008adc:	68b8      	ldr	r0, [r7, #8]
 8008ade:	f000 f80f 	bl	8008b00 <IntToUnicode>
  }
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	1fff7a10 	.word	0x1fff7a10
 8008af0:	1fff7a14 	.word	0x1fff7a14
 8008af4:	1fff7a18 	.word	0x1fff7a18
 8008af8:	2000017e 	.word	0x2000017e
 8008afc:	2000018e 	.word	0x2000018e

08008b00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b12:	2300      	movs	r3, #0
 8008b14:	75fb      	strb	r3, [r7, #23]
 8008b16:	e027      	b.n	8008b68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	0f1b      	lsrs	r3, r3, #28
 8008b1c:	2b09      	cmp	r3, #9
 8008b1e:	d80b      	bhi.n	8008b38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	0f1b      	lsrs	r3, r3, #28
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	440b      	add	r3, r1
 8008b30:	3230      	adds	r2, #48	; 0x30
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	e00a      	b.n	8008b4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	0f1b      	lsrs	r3, r3, #28
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4619      	mov	r1, r3
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	440b      	add	r3, r1
 8008b48:	3237      	adds	r2, #55	; 0x37
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	3301      	adds	r3, #1
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	2200      	movs	r2, #0
 8008b60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	3301      	adds	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
 8008b68:	7dfa      	ldrb	r2, [r7, #23]
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d3d3      	bcc.n	8008b18 <IntToUnicode+0x18>
  }
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b84:	f107 0314 	add.w	r3, r7, #20
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	605a      	str	r2, [r3, #4]
 8008b8e:	609a      	str	r2, [r3, #8]
 8008b90:	60da      	str	r2, [r3, #12]
 8008b92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b9c:	d13a      	bne.n	8008c14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008ba8:	f043 0301 	orr.w	r3, r3, #1
 8008bac:	6313      	str	r3, [r2, #48]	; 0x30
 8008bae:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]
 8008bb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008bba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bcc:	230a      	movs	r3, #10
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bd0:	f107 0314 	add.w	r3, r7, #20
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4812      	ldr	r0, [pc, #72]	; (8008c20 <HAL_PCD_MspInit+0xa4>)
 8008bd8:	f7f9 fa8a 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be0:	4a0e      	ldr	r2, [pc, #56]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be6:	6353      	str	r3, [r2, #52]	; 0x34
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8008bf8:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <HAL_PCD_MspInit+0xa0>)
 8008bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008c04:	2200      	movs	r2, #0
 8008c06:	2105      	movs	r1, #5
 8008c08:	2043      	movs	r0, #67	; 0x43
 8008c0a:	f7f9 fa47 	bl	800209c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c0e:	2043      	movs	r0, #67	; 0x43
 8008c10:	f7f9 fa60 	bl	80020d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c14:	bf00      	nop
 8008c16:	3728      	adds	r7, #40	; 0x28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40020000 	.word	0x40020000

08008c24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7fe fafa 	bl	8007234 <USBD_LL_SetupStage>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	4619      	mov	r1, r3
 8008c72:	f7fe fb32 	bl	80072da <USBD_LL_DataOutStage>
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c90:	78fa      	ldrb	r2, [r7, #3]
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	4613      	mov	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	3348      	adds	r3, #72	; 0x48
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	f7fe fb7b 	bl	80073a0 <USBD_LL_DataInStage>
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fc7f 	bl	80075c4 <USBD_LL_SOF>
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d102      	bne.n	8008ce8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
 8008ce6:	e008      	b.n	8008cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d102      	bne.n	8008cf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e001      	b.n	8008cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008cf6:	f7f8 fb3f 	bl	8001378 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d00:	7bfa      	ldrb	r2, [r7, #15]
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe fc22 	bl	800754e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe fbdb 	bl	80074cc <USBD_LL_Reset>
}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fc1d 	bl	800756e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d46:	f043 0301 	orr.w	r3, r3, #1
 8008d4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <HAL_PCD_SuspendCallback+0x48>)
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	4a03      	ldr	r2, [pc, #12]	; (8008d68 <HAL_PCD_SuspendCallback+0x48>)
 8008d5a:	f043 0306 	orr.w	r3, r3, #6
 8008d5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	e000ed00 	.word	0xe000ed00

08008d6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fc0c 	bl	8007598 <USBD_LL_Resume>
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d9a:	78fa      	ldrb	r2, [r7, #3]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fc37 	bl	8007612 <USBD_LL_IsoOUTIncomplete>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fc18 	bl	80075f8 <USBD_LL_IsoINIncomplete>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fc24 	bl	800762c <USBD_LL_DevConnected>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe fc21 	bl	8007642 <USBD_LL_DevDisconnected>
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d13c      	bne.n	8008e92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e18:	4a20      	ldr	r2, [pc, #128]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a1e      	ldr	r2, [pc, #120]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e28:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008e30:	4b1a      	ldr	r3, [pc, #104]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e32:	2206      	movs	r2, #6
 8008e34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e36:	4b19      	ldr	r3, [pc, #100]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e38:	2202      	movs	r2, #2
 8008e3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e3c:	4b17      	ldr	r3, [pc, #92]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e42:	4b16      	ldr	r3, [pc, #88]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e44:	2202      	movs	r2, #2
 8008e46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e48:	4b14      	ldr	r3, [pc, #80]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e54:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e5a:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e60:	4b0e      	ldr	r3, [pc, #56]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e66:	480d      	ldr	r0, [pc, #52]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e68:	f7f9 faed 	bl	8002446 <HAL_PCD_Init>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e72:	f7f8 fa81 	bl	8001378 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e76:	2180      	movs	r1, #128	; 0x80
 8008e78:	4808      	ldr	r0, [pc, #32]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e7a:	f7fa fc7e 	bl	800377a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e7e:	2240      	movs	r2, #64	; 0x40
 8008e80:	2100      	movs	r1, #0
 8008e82:	4806      	ldr	r0, [pc, #24]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e84:	f7fa fc32 	bl	80036ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e88:	2280      	movs	r2, #128	; 0x80
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	4803      	ldr	r0, [pc, #12]	; (8008e9c <USBD_LL_Init+0x94>)
 8008e8e:	f7fa fc2d 	bl	80036ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20001b88 	.word	0x20001b88

08008ea0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f9 fbe9 	bl	800268e <HAL_PCD_Start>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f978 	bl	80091b8 <USBD_Get_USB_Status>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	70fb      	strb	r3, [r7, #3]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70bb      	strb	r3, [r7, #2]
 8008eec:	4613      	mov	r3, r2
 8008eee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008efe:	78bb      	ldrb	r3, [r7, #2]
 8008f00:	883a      	ldrh	r2, [r7, #0]
 8008f02:	78f9      	ldrb	r1, [r7, #3]
 8008f04:	f7f9 fffa 	bl	8002efc <HAL_PCD_EP_Open>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f952 	bl	80091b8 <USBD_Get_USB_Status>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fa f843 	bl	8002fcc <HAL_PCD_EP_Close>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f933 	bl	80091b8 <USBD_Get_USB_Status>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fa f91b 	bl	80031ba <HAL_PCD_EP_SetStall>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f914 	bl	80091b8 <USBD_Get_USB_Status>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fa f960 	bl	8003282 <HAL_PCD_EP_ClrStall>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f8f5 	bl	80091b8 <USBD_Get_USB_Status>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da0b      	bge.n	8009010 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	333e      	adds	r3, #62	; 0x3e
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	e00b      	b.n	8009028 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	4613      	mov	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f7f9 ff2d 	bl	8002eb2 <HAL_PCD_SetAddress>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f8aa 	bl	80091b8 <USBD_Get_USB_Status>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009068:	7bbb      	ldrb	r3, [r7, #14]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b086      	sub	sp, #24
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	460b      	mov	r3, r1
 8009080:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009090:	7af9      	ldrb	r1, [r7, #11]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	f7fa f846 	bl	8003126 <HAL_PCD_EP_Transmit>
 800909a:	4603      	mov	r3, r0
 800909c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f889 	bl	80091b8 <USBD_Get_USB_Status>
 80090a6:	4603      	mov	r3, r0
 80090a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	460b      	mov	r3, r1
 80090c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090d2:	7af9      	ldrb	r1, [r7, #11]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	f7f9 ffc2 	bl	8003060 <HAL_PCD_EP_Receive>
 80090dc:	4603      	mov	r3, r0
 80090de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f868 	bl	80091b8 <USBD_Get_USB_Status>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009108:	78fa      	ldrb	r2, [r7, #3]
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f7f9 fff2 	bl	80030f6 <HAL_PCD_EP_GetRxCount>
 8009112:	4603      	mov	r3, r0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <HAL_PCDEx_LPM_Callback+0x18>
 800912e:	2b01      	cmp	r3, #1
 8009130:	d01f      	beq.n	8009172 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009132:	e03b      	b.n	80091ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d007      	beq.n	800914c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800913c:	f7f7 feae 	bl	8000e9c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009140:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	4a1b      	ldr	r2, [pc, #108]	; (80091b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009146:	f023 0306 	bic.w	r3, r3, #6
 800914a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fa14 	bl	8007598 <USBD_LL_Resume>
    break;
 8009170:	e01c      	b.n	80091ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6812      	ldr	r2, [r2, #0]
 8009180:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe f9ec 	bl	800756e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	4a04      	ldr	r2, [pc, #16]	; (80091b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80091a4:	f043 0306 	orr.w	r3, r3, #6
 80091a8:	6113      	str	r3, [r2, #16]
    break;
 80091aa:	bf00      	nop
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	e000ed00 	.word	0xe000ed00

080091b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d817      	bhi.n	80091fc <USBD_Get_USB_Status+0x44>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <USBD_Get_USB_Status+0x1c>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	080091e5 	.word	0x080091e5
 80091d8:	080091eb 	.word	0x080091eb
 80091dc:	080091f1 	.word	0x080091f1
 80091e0:	080091f7 	.word	0x080091f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	e00b      	b.n	8009202 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	73fb      	strb	r3, [r7, #15]
    break;
 80091ee:	e008      	b.n	8009202 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091f0:	2301      	movs	r3, #1
 80091f2:	73fb      	strb	r3, [r7, #15]
    break;
 80091f4:	e005      	b.n	8009202 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091f6:	2303      	movs	r3, #3
 80091f8:	73fb      	strb	r3, [r7, #15]
    break;
 80091fa:	e002      	b.n	8009202 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091fc:	2303      	movs	r3, #3
 80091fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009200:	bf00      	nop
  }
  return usb_status;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <__errno>:
 8009210:	4b01      	ldr	r3, [pc, #4]	; (8009218 <__errno+0x8>)
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20000198 	.word	0x20000198

0800921c <__libc_init_array>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	4e0d      	ldr	r6, [pc, #52]	; (8009254 <__libc_init_array+0x38>)
 8009220:	4c0d      	ldr	r4, [pc, #52]	; (8009258 <__libc_init_array+0x3c>)
 8009222:	1ba4      	subs	r4, r4, r6
 8009224:	10a4      	asrs	r4, r4, #2
 8009226:	2500      	movs	r5, #0
 8009228:	42a5      	cmp	r5, r4
 800922a:	d109      	bne.n	8009240 <__libc_init_array+0x24>
 800922c:	4e0b      	ldr	r6, [pc, #44]	; (800925c <__libc_init_array+0x40>)
 800922e:	4c0c      	ldr	r4, [pc, #48]	; (8009260 <__libc_init_array+0x44>)
 8009230:	f001 fd9c 	bl	800ad6c <_init>
 8009234:	1ba4      	subs	r4, r4, r6
 8009236:	10a4      	asrs	r4, r4, #2
 8009238:	2500      	movs	r5, #0
 800923a:	42a5      	cmp	r5, r4
 800923c:	d105      	bne.n	800924a <__libc_init_array+0x2e>
 800923e:	bd70      	pop	{r4, r5, r6, pc}
 8009240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009244:	4798      	blx	r3
 8009246:	3501      	adds	r5, #1
 8009248:	e7ee      	b.n	8009228 <__libc_init_array+0xc>
 800924a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800924e:	4798      	blx	r3
 8009250:	3501      	adds	r5, #1
 8009252:	e7f2      	b.n	800923a <__libc_init_array+0x1e>
 8009254:	0800b518 	.word	0x0800b518
 8009258:	0800b518 	.word	0x0800b518
 800925c:	0800b518 	.word	0x0800b518
 8009260:	0800b51c 	.word	0x0800b51c

08009264 <malloc>:
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <malloc+0xc>)
 8009266:	4601      	mov	r1, r0
 8009268:	6818      	ldr	r0, [r3, #0]
 800926a:	f000 b86d 	b.w	8009348 <_malloc_r>
 800926e:	bf00      	nop
 8009270:	20000198 	.word	0x20000198

08009274 <free>:
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <free+0xc>)
 8009276:	4601      	mov	r1, r0
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	f000 b817 	b.w	80092ac <_free_r>
 800927e:	bf00      	nop
 8009280:	20000198 	.word	0x20000198

08009284 <memcpy>:
 8009284:	b510      	push	{r4, lr}
 8009286:	1e43      	subs	r3, r0, #1
 8009288:	440a      	add	r2, r1
 800928a:	4291      	cmp	r1, r2
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	bd10      	pop	{r4, pc}
 8009290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009298:	e7f7      	b.n	800928a <memcpy+0x6>

0800929a <memset>:
 800929a:	4402      	add	r2, r0
 800929c:	4603      	mov	r3, r0
 800929e:	4293      	cmp	r3, r2
 80092a0:	d100      	bne.n	80092a4 <memset+0xa>
 80092a2:	4770      	bx	lr
 80092a4:	f803 1b01 	strb.w	r1, [r3], #1
 80092a8:	e7f9      	b.n	800929e <memset+0x4>
	...

080092ac <_free_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4605      	mov	r5, r0
 80092b0:	2900      	cmp	r1, #0
 80092b2:	d045      	beq.n	8009340 <_free_r+0x94>
 80092b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b8:	1f0c      	subs	r4, r1, #4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bfb8      	it	lt
 80092be:	18e4      	addlt	r4, r4, r3
 80092c0:	f001 fa48 	bl	800a754 <__malloc_lock>
 80092c4:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <_free_r+0x98>)
 80092c6:	6813      	ldr	r3, [r2, #0]
 80092c8:	4610      	mov	r0, r2
 80092ca:	b933      	cbnz	r3, 80092da <_free_r+0x2e>
 80092cc:	6063      	str	r3, [r4, #4]
 80092ce:	6014      	str	r4, [r2, #0]
 80092d0:	4628      	mov	r0, r5
 80092d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092d6:	f001 ba3e 	b.w	800a756 <__malloc_unlock>
 80092da:	42a3      	cmp	r3, r4
 80092dc:	d90c      	bls.n	80092f8 <_free_r+0x4c>
 80092de:	6821      	ldr	r1, [r4, #0]
 80092e0:	1862      	adds	r2, r4, r1
 80092e2:	4293      	cmp	r3, r2
 80092e4:	bf04      	itt	eq
 80092e6:	681a      	ldreq	r2, [r3, #0]
 80092e8:	685b      	ldreq	r3, [r3, #4]
 80092ea:	6063      	str	r3, [r4, #4]
 80092ec:	bf04      	itt	eq
 80092ee:	1852      	addeq	r2, r2, r1
 80092f0:	6022      	streq	r2, [r4, #0]
 80092f2:	6004      	str	r4, [r0, #0]
 80092f4:	e7ec      	b.n	80092d0 <_free_r+0x24>
 80092f6:	4613      	mov	r3, r2
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	b10a      	cbz	r2, 8009300 <_free_r+0x54>
 80092fc:	42a2      	cmp	r2, r4
 80092fe:	d9fa      	bls.n	80092f6 <_free_r+0x4a>
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	1858      	adds	r0, r3, r1
 8009304:	42a0      	cmp	r0, r4
 8009306:	d10b      	bne.n	8009320 <_free_r+0x74>
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	4401      	add	r1, r0
 800930c:	1858      	adds	r0, r3, r1
 800930e:	4282      	cmp	r2, r0
 8009310:	6019      	str	r1, [r3, #0]
 8009312:	d1dd      	bne.n	80092d0 <_free_r+0x24>
 8009314:	6810      	ldr	r0, [r2, #0]
 8009316:	6852      	ldr	r2, [r2, #4]
 8009318:	605a      	str	r2, [r3, #4]
 800931a:	4401      	add	r1, r0
 800931c:	6019      	str	r1, [r3, #0]
 800931e:	e7d7      	b.n	80092d0 <_free_r+0x24>
 8009320:	d902      	bls.n	8009328 <_free_r+0x7c>
 8009322:	230c      	movs	r3, #12
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	e7d3      	b.n	80092d0 <_free_r+0x24>
 8009328:	6820      	ldr	r0, [r4, #0]
 800932a:	1821      	adds	r1, r4, r0
 800932c:	428a      	cmp	r2, r1
 800932e:	bf04      	itt	eq
 8009330:	6811      	ldreq	r1, [r2, #0]
 8009332:	6852      	ldreq	r2, [r2, #4]
 8009334:	6062      	str	r2, [r4, #4]
 8009336:	bf04      	itt	eq
 8009338:	1809      	addeq	r1, r1, r0
 800933a:	6021      	streq	r1, [r4, #0]
 800933c:	605c      	str	r4, [r3, #4]
 800933e:	e7c7      	b.n	80092d0 <_free_r+0x24>
 8009340:	bd38      	pop	{r3, r4, r5, pc}
 8009342:	bf00      	nop
 8009344:	20000440 	.word	0x20000440

08009348 <_malloc_r>:
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	1ccd      	adds	r5, r1, #3
 800934c:	f025 0503 	bic.w	r5, r5, #3
 8009350:	3508      	adds	r5, #8
 8009352:	2d0c      	cmp	r5, #12
 8009354:	bf38      	it	cc
 8009356:	250c      	movcc	r5, #12
 8009358:	2d00      	cmp	r5, #0
 800935a:	4606      	mov	r6, r0
 800935c:	db01      	blt.n	8009362 <_malloc_r+0x1a>
 800935e:	42a9      	cmp	r1, r5
 8009360:	d903      	bls.n	800936a <_malloc_r+0x22>
 8009362:	230c      	movs	r3, #12
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	2000      	movs	r0, #0
 8009368:	bd70      	pop	{r4, r5, r6, pc}
 800936a:	f001 f9f3 	bl	800a754 <__malloc_lock>
 800936e:	4a21      	ldr	r2, [pc, #132]	; (80093f4 <_malloc_r+0xac>)
 8009370:	6814      	ldr	r4, [r2, #0]
 8009372:	4621      	mov	r1, r4
 8009374:	b991      	cbnz	r1, 800939c <_malloc_r+0x54>
 8009376:	4c20      	ldr	r4, [pc, #128]	; (80093f8 <_malloc_r+0xb0>)
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	b91b      	cbnz	r3, 8009384 <_malloc_r+0x3c>
 800937c:	4630      	mov	r0, r6
 800937e:	f000 fb87 	bl	8009a90 <_sbrk_r>
 8009382:	6020      	str	r0, [r4, #0]
 8009384:	4629      	mov	r1, r5
 8009386:	4630      	mov	r0, r6
 8009388:	f000 fb82 	bl	8009a90 <_sbrk_r>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d124      	bne.n	80093da <_malloc_r+0x92>
 8009390:	230c      	movs	r3, #12
 8009392:	6033      	str	r3, [r6, #0]
 8009394:	4630      	mov	r0, r6
 8009396:	f001 f9de 	bl	800a756 <__malloc_unlock>
 800939a:	e7e4      	b.n	8009366 <_malloc_r+0x1e>
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	1b5b      	subs	r3, r3, r5
 80093a0:	d418      	bmi.n	80093d4 <_malloc_r+0x8c>
 80093a2:	2b0b      	cmp	r3, #11
 80093a4:	d90f      	bls.n	80093c6 <_malloc_r+0x7e>
 80093a6:	600b      	str	r3, [r1, #0]
 80093a8:	50cd      	str	r5, [r1, r3]
 80093aa:	18cc      	adds	r4, r1, r3
 80093ac:	4630      	mov	r0, r6
 80093ae:	f001 f9d2 	bl	800a756 <__malloc_unlock>
 80093b2:	f104 000b 	add.w	r0, r4, #11
 80093b6:	1d23      	adds	r3, r4, #4
 80093b8:	f020 0007 	bic.w	r0, r0, #7
 80093bc:	1ac3      	subs	r3, r0, r3
 80093be:	d0d3      	beq.n	8009368 <_malloc_r+0x20>
 80093c0:	425a      	negs	r2, r3
 80093c2:	50e2      	str	r2, [r4, r3]
 80093c4:	e7d0      	b.n	8009368 <_malloc_r+0x20>
 80093c6:	428c      	cmp	r4, r1
 80093c8:	684b      	ldr	r3, [r1, #4]
 80093ca:	bf16      	itet	ne
 80093cc:	6063      	strne	r3, [r4, #4]
 80093ce:	6013      	streq	r3, [r2, #0]
 80093d0:	460c      	movne	r4, r1
 80093d2:	e7eb      	b.n	80093ac <_malloc_r+0x64>
 80093d4:	460c      	mov	r4, r1
 80093d6:	6849      	ldr	r1, [r1, #4]
 80093d8:	e7cc      	b.n	8009374 <_malloc_r+0x2c>
 80093da:	1cc4      	adds	r4, r0, #3
 80093dc:	f024 0403 	bic.w	r4, r4, #3
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d005      	beq.n	80093f0 <_malloc_r+0xa8>
 80093e4:	1a21      	subs	r1, r4, r0
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 fb52 	bl	8009a90 <_sbrk_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d0cf      	beq.n	8009390 <_malloc_r+0x48>
 80093f0:	6025      	str	r5, [r4, #0]
 80093f2:	e7db      	b.n	80093ac <_malloc_r+0x64>
 80093f4:	20000440 	.word	0x20000440
 80093f8:	20000444 	.word	0x20000444

080093fc <__cvt>:
 80093fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009400:	ec55 4b10 	vmov	r4, r5, d0
 8009404:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009406:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800940a:	2d00      	cmp	r5, #0
 800940c:	460e      	mov	r6, r1
 800940e:	4691      	mov	r9, r2
 8009410:	4619      	mov	r1, r3
 8009412:	bfb8      	it	lt
 8009414:	4622      	movlt	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	f027 0720 	bic.w	r7, r7, #32
 800941c:	bfbb      	ittet	lt
 800941e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009422:	461d      	movlt	r5, r3
 8009424:	2300      	movge	r3, #0
 8009426:	232d      	movlt	r3, #45	; 0x2d
 8009428:	bfb8      	it	lt
 800942a:	4614      	movlt	r4, r2
 800942c:	2f46      	cmp	r7, #70	; 0x46
 800942e:	700b      	strb	r3, [r1, #0]
 8009430:	d004      	beq.n	800943c <__cvt+0x40>
 8009432:	2f45      	cmp	r7, #69	; 0x45
 8009434:	d100      	bne.n	8009438 <__cvt+0x3c>
 8009436:	3601      	adds	r6, #1
 8009438:	2102      	movs	r1, #2
 800943a:	e000      	b.n	800943e <__cvt+0x42>
 800943c:	2103      	movs	r1, #3
 800943e:	ab03      	add	r3, sp, #12
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	ab02      	add	r3, sp, #8
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	4632      	mov	r2, r6
 8009448:	4653      	mov	r3, sl
 800944a:	ec45 4b10 	vmov	d0, r4, r5
 800944e:	f000 fbbb 	bl	8009bc8 <_dtoa_r>
 8009452:	2f47      	cmp	r7, #71	; 0x47
 8009454:	4680      	mov	r8, r0
 8009456:	d102      	bne.n	800945e <__cvt+0x62>
 8009458:	f019 0f01 	tst.w	r9, #1
 800945c:	d026      	beq.n	80094ac <__cvt+0xb0>
 800945e:	2f46      	cmp	r7, #70	; 0x46
 8009460:	eb08 0906 	add.w	r9, r8, r6
 8009464:	d111      	bne.n	800948a <__cvt+0x8e>
 8009466:	f898 3000 	ldrb.w	r3, [r8]
 800946a:	2b30      	cmp	r3, #48	; 0x30
 800946c:	d10a      	bne.n	8009484 <__cvt+0x88>
 800946e:	2200      	movs	r2, #0
 8009470:	2300      	movs	r3, #0
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f7f7 faf7 	bl	8000a68 <__aeabi_dcmpeq>
 800947a:	b918      	cbnz	r0, 8009484 <__cvt+0x88>
 800947c:	f1c6 0601 	rsb	r6, r6, #1
 8009480:	f8ca 6000 	str.w	r6, [sl]
 8009484:	f8da 3000 	ldr.w	r3, [sl]
 8009488:	4499      	add	r9, r3
 800948a:	2200      	movs	r2, #0
 800948c:	2300      	movs	r3, #0
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f7 fae9 	bl	8000a68 <__aeabi_dcmpeq>
 8009496:	b938      	cbnz	r0, 80094a8 <__cvt+0xac>
 8009498:	2230      	movs	r2, #48	; 0x30
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	454b      	cmp	r3, r9
 800949e:	d205      	bcs.n	80094ac <__cvt+0xb0>
 80094a0:	1c59      	adds	r1, r3, #1
 80094a2:	9103      	str	r1, [sp, #12]
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	e7f8      	b.n	800949a <__cvt+0x9e>
 80094a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094b0:	eba3 0308 	sub.w	r3, r3, r8
 80094b4:	4640      	mov	r0, r8
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	b004      	add	sp, #16
 80094ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080094be <__exponent>:
 80094be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094c0:	2900      	cmp	r1, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	bfba      	itte	lt
 80094c6:	4249      	neglt	r1, r1
 80094c8:	232d      	movlt	r3, #45	; 0x2d
 80094ca:	232b      	movge	r3, #43	; 0x2b
 80094cc:	2909      	cmp	r1, #9
 80094ce:	f804 2b02 	strb.w	r2, [r4], #2
 80094d2:	7043      	strb	r3, [r0, #1]
 80094d4:	dd20      	ble.n	8009518 <__exponent+0x5a>
 80094d6:	f10d 0307 	add.w	r3, sp, #7
 80094da:	461f      	mov	r7, r3
 80094dc:	260a      	movs	r6, #10
 80094de:	fb91 f5f6 	sdiv	r5, r1, r6
 80094e2:	fb06 1115 	mls	r1, r6, r5, r1
 80094e6:	3130      	adds	r1, #48	; 0x30
 80094e8:	2d09      	cmp	r5, #9
 80094ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80094ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80094f2:	4629      	mov	r1, r5
 80094f4:	dc09      	bgt.n	800950a <__exponent+0x4c>
 80094f6:	3130      	adds	r1, #48	; 0x30
 80094f8:	3b02      	subs	r3, #2
 80094fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80094fe:	42bb      	cmp	r3, r7
 8009500:	4622      	mov	r2, r4
 8009502:	d304      	bcc.n	800950e <__exponent+0x50>
 8009504:	1a10      	subs	r0, r2, r0
 8009506:	b003      	add	sp, #12
 8009508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950a:	4613      	mov	r3, r2
 800950c:	e7e7      	b.n	80094de <__exponent+0x20>
 800950e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009512:	f804 2b01 	strb.w	r2, [r4], #1
 8009516:	e7f2      	b.n	80094fe <__exponent+0x40>
 8009518:	2330      	movs	r3, #48	; 0x30
 800951a:	4419      	add	r1, r3
 800951c:	7083      	strb	r3, [r0, #2]
 800951e:	1d02      	adds	r2, r0, #4
 8009520:	70c1      	strb	r1, [r0, #3]
 8009522:	e7ef      	b.n	8009504 <__exponent+0x46>

08009524 <_printf_float>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	b08d      	sub	sp, #52	; 0x34
 800952a:	460c      	mov	r4, r1
 800952c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009530:	4616      	mov	r6, r2
 8009532:	461f      	mov	r7, r3
 8009534:	4605      	mov	r5, r0
 8009536:	f001 f8ff 	bl	800a738 <_localeconv_r>
 800953a:	6803      	ldr	r3, [r0, #0]
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	4618      	mov	r0, r3
 8009540:	f7f6 fe66 	bl	8000210 <strlen>
 8009544:	2300      	movs	r3, #0
 8009546:	930a      	str	r3, [sp, #40]	; 0x28
 8009548:	f8d8 3000 	ldr.w	r3, [r8]
 800954c:	9005      	str	r0, [sp, #20]
 800954e:	3307      	adds	r3, #7
 8009550:	f023 0307 	bic.w	r3, r3, #7
 8009554:	f103 0208 	add.w	r2, r3, #8
 8009558:	f894 a018 	ldrb.w	sl, [r4, #24]
 800955c:	f8d4 b000 	ldr.w	fp, [r4]
 8009560:	f8c8 2000 	str.w	r2, [r8]
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800956c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009570:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009574:	9307      	str	r3, [sp, #28]
 8009576:	f8cd 8018 	str.w	r8, [sp, #24]
 800957a:	f04f 32ff 	mov.w	r2, #4294967295
 800957e:	4ba7      	ldr	r3, [pc, #668]	; (800981c <_printf_float+0x2f8>)
 8009580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009584:	f7f7 faa2 	bl	8000acc <__aeabi_dcmpun>
 8009588:	bb70      	cbnz	r0, 80095e8 <_printf_float+0xc4>
 800958a:	f04f 32ff 	mov.w	r2, #4294967295
 800958e:	4ba3      	ldr	r3, [pc, #652]	; (800981c <_printf_float+0x2f8>)
 8009590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009594:	f7f7 fa7c 	bl	8000a90 <__aeabi_dcmple>
 8009598:	bb30      	cbnz	r0, 80095e8 <_printf_float+0xc4>
 800959a:	2200      	movs	r2, #0
 800959c:	2300      	movs	r3, #0
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	f7f7 fa6b 	bl	8000a7c <__aeabi_dcmplt>
 80095a6:	b110      	cbz	r0, 80095ae <_printf_float+0x8a>
 80095a8:	232d      	movs	r3, #45	; 0x2d
 80095aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ae:	4a9c      	ldr	r2, [pc, #624]	; (8009820 <_printf_float+0x2fc>)
 80095b0:	4b9c      	ldr	r3, [pc, #624]	; (8009824 <_printf_float+0x300>)
 80095b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80095b6:	bf8c      	ite	hi
 80095b8:	4690      	movhi	r8, r2
 80095ba:	4698      	movls	r8, r3
 80095bc:	2303      	movs	r3, #3
 80095be:	f02b 0204 	bic.w	r2, fp, #4
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	6022      	str	r2, [r4, #0]
 80095c6:	f04f 0900 	mov.w	r9, #0
 80095ca:	9700      	str	r7, [sp, #0]
 80095cc:	4633      	mov	r3, r6
 80095ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 f9e6 	bl	80099a4 <_printf_common>
 80095d8:	3001      	adds	r0, #1
 80095da:	f040 808d 	bne.w	80096f8 <_printf_float+0x1d4>
 80095de:	f04f 30ff 	mov.w	r0, #4294967295
 80095e2:	b00d      	add	sp, #52	; 0x34
 80095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e8:	4642      	mov	r2, r8
 80095ea:	464b      	mov	r3, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	4649      	mov	r1, r9
 80095f0:	f7f7 fa6c 	bl	8000acc <__aeabi_dcmpun>
 80095f4:	b110      	cbz	r0, 80095fc <_printf_float+0xd8>
 80095f6:	4a8c      	ldr	r2, [pc, #560]	; (8009828 <_printf_float+0x304>)
 80095f8:	4b8c      	ldr	r3, [pc, #560]	; (800982c <_printf_float+0x308>)
 80095fa:	e7da      	b.n	80095b2 <_printf_float+0x8e>
 80095fc:	6861      	ldr	r1, [r4, #4]
 80095fe:	1c4b      	adds	r3, r1, #1
 8009600:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009604:	a80a      	add	r0, sp, #40	; 0x28
 8009606:	d13e      	bne.n	8009686 <_printf_float+0x162>
 8009608:	2306      	movs	r3, #6
 800960a:	6063      	str	r3, [r4, #4]
 800960c:	2300      	movs	r3, #0
 800960e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009612:	ab09      	add	r3, sp, #36	; 0x24
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	ec49 8b10 	vmov	d0, r8, r9
 800961a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	f8cd a004 	str.w	sl, [sp, #4]
 8009624:	6861      	ldr	r1, [r4, #4]
 8009626:	4628      	mov	r0, r5
 8009628:	f7ff fee8 	bl	80093fc <__cvt>
 800962c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009630:	2b47      	cmp	r3, #71	; 0x47
 8009632:	4680      	mov	r8, r0
 8009634:	d109      	bne.n	800964a <_printf_float+0x126>
 8009636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009638:	1cd8      	adds	r0, r3, #3
 800963a:	db02      	blt.n	8009642 <_printf_float+0x11e>
 800963c:	6862      	ldr	r2, [r4, #4]
 800963e:	4293      	cmp	r3, r2
 8009640:	dd47      	ble.n	80096d2 <_printf_float+0x1ae>
 8009642:	f1aa 0a02 	sub.w	sl, sl, #2
 8009646:	fa5f fa8a 	uxtb.w	sl, sl
 800964a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800964e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009650:	d824      	bhi.n	800969c <_printf_float+0x178>
 8009652:	3901      	subs	r1, #1
 8009654:	4652      	mov	r2, sl
 8009656:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800965a:	9109      	str	r1, [sp, #36]	; 0x24
 800965c:	f7ff ff2f 	bl	80094be <__exponent>
 8009660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009662:	1813      	adds	r3, r2, r0
 8009664:	2a01      	cmp	r2, #1
 8009666:	4681      	mov	r9, r0
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	dc02      	bgt.n	8009672 <_printf_float+0x14e>
 800966c:	6822      	ldr	r2, [r4, #0]
 800966e:	07d1      	lsls	r1, r2, #31
 8009670:	d501      	bpl.n	8009676 <_printf_float+0x152>
 8009672:	3301      	adds	r3, #1
 8009674:	6123      	str	r3, [r4, #16]
 8009676:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0a5      	beq.n	80095ca <_printf_float+0xa6>
 800967e:	232d      	movs	r3, #45	; 0x2d
 8009680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009684:	e7a1      	b.n	80095ca <_printf_float+0xa6>
 8009686:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800968a:	f000 8177 	beq.w	800997c <_printf_float+0x458>
 800968e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009692:	d1bb      	bne.n	800960c <_printf_float+0xe8>
 8009694:	2900      	cmp	r1, #0
 8009696:	d1b9      	bne.n	800960c <_printf_float+0xe8>
 8009698:	2301      	movs	r3, #1
 800969a:	e7b6      	b.n	800960a <_printf_float+0xe6>
 800969c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80096a0:	d119      	bne.n	80096d6 <_printf_float+0x1b2>
 80096a2:	2900      	cmp	r1, #0
 80096a4:	6863      	ldr	r3, [r4, #4]
 80096a6:	dd0c      	ble.n	80096c2 <_printf_float+0x19e>
 80096a8:	6121      	str	r1, [r4, #16]
 80096aa:	b913      	cbnz	r3, 80096b2 <_printf_float+0x18e>
 80096ac:	6822      	ldr	r2, [r4, #0]
 80096ae:	07d2      	lsls	r2, r2, #31
 80096b0:	d502      	bpl.n	80096b8 <_printf_float+0x194>
 80096b2:	3301      	adds	r3, #1
 80096b4:	440b      	add	r3, r1
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80096bc:	f04f 0900 	mov.w	r9, #0
 80096c0:	e7d9      	b.n	8009676 <_printf_float+0x152>
 80096c2:	b913      	cbnz	r3, 80096ca <_printf_float+0x1a6>
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	07d0      	lsls	r0, r2, #31
 80096c8:	d501      	bpl.n	80096ce <_printf_float+0x1aa>
 80096ca:	3302      	adds	r3, #2
 80096cc:	e7f3      	b.n	80096b6 <_printf_float+0x192>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e7f1      	b.n	80096b6 <_printf_float+0x192>
 80096d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80096d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80096da:	4293      	cmp	r3, r2
 80096dc:	db05      	blt.n	80096ea <_printf_float+0x1c6>
 80096de:	6822      	ldr	r2, [r4, #0]
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	07d1      	lsls	r1, r2, #31
 80096e4:	d5e8      	bpl.n	80096b8 <_printf_float+0x194>
 80096e6:	3301      	adds	r3, #1
 80096e8:	e7e5      	b.n	80096b6 <_printf_float+0x192>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	bfd4      	ite	le
 80096ee:	f1c3 0302 	rsble	r3, r3, #2
 80096f2:	2301      	movgt	r3, #1
 80096f4:	4413      	add	r3, r2
 80096f6:	e7de      	b.n	80096b6 <_printf_float+0x192>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	055a      	lsls	r2, r3, #21
 80096fc:	d407      	bmi.n	800970e <_printf_float+0x1ea>
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	4642      	mov	r2, r8
 8009702:	4631      	mov	r1, r6
 8009704:	4628      	mov	r0, r5
 8009706:	47b8      	blx	r7
 8009708:	3001      	adds	r0, #1
 800970a:	d12b      	bne.n	8009764 <_printf_float+0x240>
 800970c:	e767      	b.n	80095de <_printf_float+0xba>
 800970e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009712:	f240 80dc 	bls.w	80098ce <_printf_float+0x3aa>
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800971e:	f7f7 f9a3 	bl	8000a68 <__aeabi_dcmpeq>
 8009722:	2800      	cmp	r0, #0
 8009724:	d033      	beq.n	800978e <_printf_float+0x26a>
 8009726:	2301      	movs	r3, #1
 8009728:	4a41      	ldr	r2, [pc, #260]	; (8009830 <_printf_float+0x30c>)
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	f43f af54 	beq.w	80095de <_printf_float+0xba>
 8009736:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800973a:	429a      	cmp	r2, r3
 800973c:	db02      	blt.n	8009744 <_printf_float+0x220>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	07d8      	lsls	r0, r3, #31
 8009742:	d50f      	bpl.n	8009764 <_printf_float+0x240>
 8009744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f af45 	beq.w	80095de <_printf_float+0xba>
 8009754:	f04f 0800 	mov.w	r8, #0
 8009758:	f104 091a 	add.w	r9, r4, #26
 800975c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975e:	3b01      	subs	r3, #1
 8009760:	4543      	cmp	r3, r8
 8009762:	dc09      	bgt.n	8009778 <_printf_float+0x254>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	079b      	lsls	r3, r3, #30
 8009768:	f100 8103 	bmi.w	8009972 <_printf_float+0x44e>
 800976c:	68e0      	ldr	r0, [r4, #12]
 800976e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009770:	4298      	cmp	r0, r3
 8009772:	bfb8      	it	lt
 8009774:	4618      	movlt	r0, r3
 8009776:	e734      	b.n	80095e2 <_printf_float+0xbe>
 8009778:	2301      	movs	r3, #1
 800977a:	464a      	mov	r2, r9
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af2b 	beq.w	80095de <_printf_float+0xba>
 8009788:	f108 0801 	add.w	r8, r8, #1
 800978c:	e7e6      	b.n	800975c <_printf_float+0x238>
 800978e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	dc2b      	bgt.n	80097ec <_printf_float+0x2c8>
 8009794:	2301      	movs	r3, #1
 8009796:	4a26      	ldr	r2, [pc, #152]	; (8009830 <_printf_float+0x30c>)
 8009798:	4631      	mov	r1, r6
 800979a:	4628      	mov	r0, r5
 800979c:	47b8      	blx	r7
 800979e:	3001      	adds	r0, #1
 80097a0:	f43f af1d 	beq.w	80095de <_printf_float+0xba>
 80097a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a6:	b923      	cbnz	r3, 80097b2 <_printf_float+0x28e>
 80097a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097aa:	b913      	cbnz	r3, 80097b2 <_printf_float+0x28e>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	07d9      	lsls	r1, r3, #31
 80097b0:	d5d8      	bpl.n	8009764 <_printf_float+0x240>
 80097b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097b6:	4631      	mov	r1, r6
 80097b8:	4628      	mov	r0, r5
 80097ba:	47b8      	blx	r7
 80097bc:	3001      	adds	r0, #1
 80097be:	f43f af0e 	beq.w	80095de <_printf_float+0xba>
 80097c2:	f04f 0900 	mov.w	r9, #0
 80097c6:	f104 0a1a 	add.w	sl, r4, #26
 80097ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097cc:	425b      	negs	r3, r3
 80097ce:	454b      	cmp	r3, r9
 80097d0:	dc01      	bgt.n	80097d6 <_printf_float+0x2b2>
 80097d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d4:	e794      	b.n	8009700 <_printf_float+0x1dc>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4652      	mov	r2, sl
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	f43f aefc 	beq.w	80095de <_printf_float+0xba>
 80097e6:	f109 0901 	add.w	r9, r9, #1
 80097ea:	e7ee      	b.n	80097ca <_printf_float+0x2a6>
 80097ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097f0:	429a      	cmp	r2, r3
 80097f2:	bfa8      	it	ge
 80097f4:	461a      	movge	r2, r3
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	4691      	mov	r9, r2
 80097fa:	dd07      	ble.n	800980c <_printf_float+0x2e8>
 80097fc:	4613      	mov	r3, r2
 80097fe:	4631      	mov	r1, r6
 8009800:	4642      	mov	r2, r8
 8009802:	4628      	mov	r0, r5
 8009804:	47b8      	blx	r7
 8009806:	3001      	adds	r0, #1
 8009808:	f43f aee9 	beq.w	80095de <_printf_float+0xba>
 800980c:	f104 031a 	add.w	r3, r4, #26
 8009810:	f04f 0b00 	mov.w	fp, #0
 8009814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009818:	9306      	str	r3, [sp, #24]
 800981a:	e015      	b.n	8009848 <_printf_float+0x324>
 800981c:	7fefffff 	.word	0x7fefffff
 8009820:	0800b288 	.word	0x0800b288
 8009824:	0800b284 	.word	0x0800b284
 8009828:	0800b290 	.word	0x0800b290
 800982c:	0800b28c 	.word	0x0800b28c
 8009830:	0800b294 	.word	0x0800b294
 8009834:	2301      	movs	r3, #1
 8009836:	9a06      	ldr	r2, [sp, #24]
 8009838:	4631      	mov	r1, r6
 800983a:	4628      	mov	r0, r5
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	f43f aecd 	beq.w	80095de <_printf_float+0xba>
 8009844:	f10b 0b01 	add.w	fp, fp, #1
 8009848:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800984c:	ebaa 0309 	sub.w	r3, sl, r9
 8009850:	455b      	cmp	r3, fp
 8009852:	dcef      	bgt.n	8009834 <_printf_float+0x310>
 8009854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009858:	429a      	cmp	r2, r3
 800985a:	44d0      	add	r8, sl
 800985c:	db15      	blt.n	800988a <_printf_float+0x366>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	07da      	lsls	r2, r3, #31
 8009862:	d412      	bmi.n	800988a <_printf_float+0x366>
 8009864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009866:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009868:	eba3 020a 	sub.w	r2, r3, sl
 800986c:	eba3 0a01 	sub.w	sl, r3, r1
 8009870:	4592      	cmp	sl, r2
 8009872:	bfa8      	it	ge
 8009874:	4692      	movge	sl, r2
 8009876:	f1ba 0f00 	cmp.w	sl, #0
 800987a:	dc0e      	bgt.n	800989a <_printf_float+0x376>
 800987c:	f04f 0800 	mov.w	r8, #0
 8009880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009884:	f104 091a 	add.w	r9, r4, #26
 8009888:	e019      	b.n	80098be <_printf_float+0x39a>
 800988a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	d1e5      	bne.n	8009864 <_printf_float+0x340>
 8009898:	e6a1      	b.n	80095de <_printf_float+0xba>
 800989a:	4653      	mov	r3, sl
 800989c:	4642      	mov	r2, r8
 800989e:	4631      	mov	r1, r6
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b8      	blx	r7
 80098a4:	3001      	adds	r0, #1
 80098a6:	d1e9      	bne.n	800987c <_printf_float+0x358>
 80098a8:	e699      	b.n	80095de <_printf_float+0xba>
 80098aa:	2301      	movs	r3, #1
 80098ac:	464a      	mov	r2, r9
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b8      	blx	r7
 80098b4:	3001      	adds	r0, #1
 80098b6:	f43f ae92 	beq.w	80095de <_printf_float+0xba>
 80098ba:	f108 0801 	add.w	r8, r8, #1
 80098be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	eba3 030a 	sub.w	r3, r3, sl
 80098c8:	4543      	cmp	r3, r8
 80098ca:	dcee      	bgt.n	80098aa <_printf_float+0x386>
 80098cc:	e74a      	b.n	8009764 <_printf_float+0x240>
 80098ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098d0:	2a01      	cmp	r2, #1
 80098d2:	dc01      	bgt.n	80098d8 <_printf_float+0x3b4>
 80098d4:	07db      	lsls	r3, r3, #31
 80098d6:	d53a      	bpl.n	800994e <_printf_float+0x42a>
 80098d8:	2301      	movs	r3, #1
 80098da:	4642      	mov	r2, r8
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	f43f ae7b 	beq.w	80095de <_printf_float+0xba>
 80098e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	f108 0801 	add.w	r8, r8, #1
 80098f8:	f43f ae71 	beq.w	80095de <_printf_float+0xba>
 80098fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fe:	2200      	movs	r2, #0
 8009900:	f103 3aff 	add.w	sl, r3, #4294967295
 8009904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009908:	2300      	movs	r3, #0
 800990a:	f7f7 f8ad 	bl	8000a68 <__aeabi_dcmpeq>
 800990e:	b9c8      	cbnz	r0, 8009944 <_printf_float+0x420>
 8009910:	4653      	mov	r3, sl
 8009912:	4642      	mov	r2, r8
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	d10e      	bne.n	800993c <_printf_float+0x418>
 800991e:	e65e      	b.n	80095de <_printf_float+0xba>
 8009920:	2301      	movs	r3, #1
 8009922:	4652      	mov	r2, sl
 8009924:	4631      	mov	r1, r6
 8009926:	4628      	mov	r0, r5
 8009928:	47b8      	blx	r7
 800992a:	3001      	adds	r0, #1
 800992c:	f43f ae57 	beq.w	80095de <_printf_float+0xba>
 8009930:	f108 0801 	add.w	r8, r8, #1
 8009934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009936:	3b01      	subs	r3, #1
 8009938:	4543      	cmp	r3, r8
 800993a:	dcf1      	bgt.n	8009920 <_printf_float+0x3fc>
 800993c:	464b      	mov	r3, r9
 800993e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009942:	e6de      	b.n	8009702 <_printf_float+0x1de>
 8009944:	f04f 0800 	mov.w	r8, #0
 8009948:	f104 0a1a 	add.w	sl, r4, #26
 800994c:	e7f2      	b.n	8009934 <_printf_float+0x410>
 800994e:	2301      	movs	r3, #1
 8009950:	e7df      	b.n	8009912 <_printf_float+0x3ee>
 8009952:	2301      	movs	r3, #1
 8009954:	464a      	mov	r2, r9
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	f43f ae3e 	beq.w	80095de <_printf_float+0xba>
 8009962:	f108 0801 	add.w	r8, r8, #1
 8009966:	68e3      	ldr	r3, [r4, #12]
 8009968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800996a:	1a9b      	subs	r3, r3, r2
 800996c:	4543      	cmp	r3, r8
 800996e:	dcf0      	bgt.n	8009952 <_printf_float+0x42e>
 8009970:	e6fc      	b.n	800976c <_printf_float+0x248>
 8009972:	f04f 0800 	mov.w	r8, #0
 8009976:	f104 0919 	add.w	r9, r4, #25
 800997a:	e7f4      	b.n	8009966 <_printf_float+0x442>
 800997c:	2900      	cmp	r1, #0
 800997e:	f43f ae8b 	beq.w	8009698 <_printf_float+0x174>
 8009982:	2300      	movs	r3, #0
 8009984:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009988:	ab09      	add	r3, sp, #36	; 0x24
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	ec49 8b10 	vmov	d0, r8, r9
 8009990:	6022      	str	r2, [r4, #0]
 8009992:	f8cd a004 	str.w	sl, [sp, #4]
 8009996:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800999a:	4628      	mov	r0, r5
 800999c:	f7ff fd2e 	bl	80093fc <__cvt>
 80099a0:	4680      	mov	r8, r0
 80099a2:	e648      	b.n	8009636 <_printf_float+0x112>

080099a4 <_printf_common>:
 80099a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	4691      	mov	r9, r2
 80099aa:	461f      	mov	r7, r3
 80099ac:	688a      	ldr	r2, [r1, #8]
 80099ae:	690b      	ldr	r3, [r1, #16]
 80099b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099b4:	4293      	cmp	r3, r2
 80099b6:	bfb8      	it	lt
 80099b8:	4613      	movlt	r3, r2
 80099ba:	f8c9 3000 	str.w	r3, [r9]
 80099be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099c2:	4606      	mov	r6, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	b112      	cbz	r2, 80099ce <_printf_common+0x2a>
 80099c8:	3301      	adds	r3, #1
 80099ca:	f8c9 3000 	str.w	r3, [r9]
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	0699      	lsls	r1, r3, #26
 80099d2:	bf42      	ittt	mi
 80099d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80099d8:	3302      	addmi	r3, #2
 80099da:	f8c9 3000 	strmi.w	r3, [r9]
 80099de:	6825      	ldr	r5, [r4, #0]
 80099e0:	f015 0506 	ands.w	r5, r5, #6
 80099e4:	d107      	bne.n	80099f6 <_printf_common+0x52>
 80099e6:	f104 0a19 	add.w	sl, r4, #25
 80099ea:	68e3      	ldr	r3, [r4, #12]
 80099ec:	f8d9 2000 	ldr.w	r2, [r9]
 80099f0:	1a9b      	subs	r3, r3, r2
 80099f2:	42ab      	cmp	r3, r5
 80099f4:	dc28      	bgt.n	8009a48 <_printf_common+0xa4>
 80099f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099fa:	6822      	ldr	r2, [r4, #0]
 80099fc:	3300      	adds	r3, #0
 80099fe:	bf18      	it	ne
 8009a00:	2301      	movne	r3, #1
 8009a02:	0692      	lsls	r2, r2, #26
 8009a04:	d42d      	bmi.n	8009a62 <_printf_common+0xbe>
 8009a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	47c0      	blx	r8
 8009a10:	3001      	adds	r0, #1
 8009a12:	d020      	beq.n	8009a56 <_printf_common+0xb2>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	68e5      	ldr	r5, [r4, #12]
 8009a18:	f8d9 2000 	ldr.w	r2, [r9]
 8009a1c:	f003 0306 	and.w	r3, r3, #6
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	bf08      	it	eq
 8009a24:	1aad      	subeq	r5, r5, r2
 8009a26:	68a3      	ldr	r3, [r4, #8]
 8009a28:	6922      	ldr	r2, [r4, #16]
 8009a2a:	bf0c      	ite	eq
 8009a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a30:	2500      	movne	r5, #0
 8009a32:	4293      	cmp	r3, r2
 8009a34:	bfc4      	itt	gt
 8009a36:	1a9b      	subgt	r3, r3, r2
 8009a38:	18ed      	addgt	r5, r5, r3
 8009a3a:	f04f 0900 	mov.w	r9, #0
 8009a3e:	341a      	adds	r4, #26
 8009a40:	454d      	cmp	r5, r9
 8009a42:	d11a      	bne.n	8009a7a <_printf_common+0xd6>
 8009a44:	2000      	movs	r0, #0
 8009a46:	e008      	b.n	8009a5a <_printf_common+0xb6>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	4652      	mov	r2, sl
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	4630      	mov	r0, r6
 8009a50:	47c0      	blx	r8
 8009a52:	3001      	adds	r0, #1
 8009a54:	d103      	bne.n	8009a5e <_printf_common+0xba>
 8009a56:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5e:	3501      	adds	r5, #1
 8009a60:	e7c3      	b.n	80099ea <_printf_common+0x46>
 8009a62:	18e1      	adds	r1, r4, r3
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	2030      	movs	r0, #48	; 0x30
 8009a68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a6c:	4422      	add	r2, r4
 8009a6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a76:	3302      	adds	r3, #2
 8009a78:	e7c5      	b.n	8009a06 <_printf_common+0x62>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4639      	mov	r1, r7
 8009a80:	4630      	mov	r0, r6
 8009a82:	47c0      	blx	r8
 8009a84:	3001      	adds	r0, #1
 8009a86:	d0e6      	beq.n	8009a56 <_printf_common+0xb2>
 8009a88:	f109 0901 	add.w	r9, r9, #1
 8009a8c:	e7d8      	b.n	8009a40 <_printf_common+0x9c>
	...

08009a90 <_sbrk_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4c06      	ldr	r4, [pc, #24]	; (8009aac <_sbrk_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4605      	mov	r5, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	f7f7 fefa 	bl	8001894 <_sbrk>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_sbrk_r+0x1a>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_sbrk_r+0x1a>
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20001f90 	.word	0x20001f90

08009ab0 <quorem>:
 8009ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	6903      	ldr	r3, [r0, #16]
 8009ab6:	690c      	ldr	r4, [r1, #16]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	4680      	mov	r8, r0
 8009abc:	f2c0 8082 	blt.w	8009bc4 <quorem+0x114>
 8009ac0:	3c01      	subs	r4, #1
 8009ac2:	f101 0714 	add.w	r7, r1, #20
 8009ac6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009aca:	f100 0614 	add.w	r6, r0, #20
 8009ace:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009ad2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009ad6:	eb06 030c 	add.w	r3, r6, ip
 8009ada:	3501      	adds	r5, #1
 8009adc:	eb07 090c 	add.w	r9, r7, ip
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	fbb0 f5f5 	udiv	r5, r0, r5
 8009ae6:	b395      	cbz	r5, 8009b4e <quorem+0x9e>
 8009ae8:	f04f 0a00 	mov.w	sl, #0
 8009aec:	4638      	mov	r0, r7
 8009aee:	46b6      	mov	lr, r6
 8009af0:	46d3      	mov	fp, sl
 8009af2:	f850 2b04 	ldr.w	r2, [r0], #4
 8009af6:	b293      	uxth	r3, r2
 8009af8:	fb05 a303 	mla	r3, r5, r3, sl
 8009afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	ebab 0303 	sub.w	r3, fp, r3
 8009b06:	0c12      	lsrs	r2, r2, #16
 8009b08:	f8de b000 	ldr.w	fp, [lr]
 8009b0c:	fb05 a202 	mla	r2, r5, r2, sl
 8009b10:	fa13 f38b 	uxtah	r3, r3, fp
 8009b14:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009b18:	fa1f fb82 	uxth.w	fp, r2
 8009b1c:	f8de 2000 	ldr.w	r2, [lr]
 8009b20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b2e:	4581      	cmp	r9, r0
 8009b30:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009b34:	f84e 3b04 	str.w	r3, [lr], #4
 8009b38:	d2db      	bcs.n	8009af2 <quorem+0x42>
 8009b3a:	f856 300c 	ldr.w	r3, [r6, ip]
 8009b3e:	b933      	cbnz	r3, 8009b4e <quorem+0x9e>
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	3b04      	subs	r3, #4
 8009b44:	429e      	cmp	r6, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	d330      	bcc.n	8009bac <quorem+0xfc>
 8009b4a:	f8c8 4010 	str.w	r4, [r8, #16]
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f001 f818 	bl	800ab84 <__mcmp>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	db25      	blt.n	8009ba4 <quorem+0xf4>
 8009b58:	3501      	adds	r5, #1
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f04f 0c00 	mov.w	ip, #0
 8009b60:	f857 2b04 	ldr.w	r2, [r7], #4
 8009b64:	f8d0 e000 	ldr.w	lr, [r0]
 8009b68:	b293      	uxth	r3, r2
 8009b6a:	ebac 0303 	sub.w	r3, ip, r3
 8009b6e:	0c12      	lsrs	r2, r2, #16
 8009b70:	fa13 f38e 	uxtah	r3, r3, lr
 8009b74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b82:	45b9      	cmp	r9, r7
 8009b84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b88:	f840 3b04 	str.w	r3, [r0], #4
 8009b8c:	d2e8      	bcs.n	8009b60 <quorem+0xb0>
 8009b8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009b92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009b96:	b92a      	cbnz	r2, 8009ba4 <quorem+0xf4>
 8009b98:	3b04      	subs	r3, #4
 8009b9a:	429e      	cmp	r6, r3
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	d30b      	bcc.n	8009bb8 <quorem+0x108>
 8009ba0:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	b003      	add	sp, #12
 8009ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bac:	6812      	ldr	r2, [r2, #0]
 8009bae:	3b04      	subs	r3, #4
 8009bb0:	2a00      	cmp	r2, #0
 8009bb2:	d1ca      	bne.n	8009b4a <quorem+0x9a>
 8009bb4:	3c01      	subs	r4, #1
 8009bb6:	e7c5      	b.n	8009b44 <quorem+0x94>
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	3b04      	subs	r3, #4
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	d1ef      	bne.n	8009ba0 <quorem+0xf0>
 8009bc0:	3c01      	subs	r4, #1
 8009bc2:	e7ea      	b.n	8009b9a <quorem+0xea>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e7ee      	b.n	8009ba6 <quorem+0xf6>

08009bc8 <_dtoa_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	ec57 6b10 	vmov	r6, r7, d0
 8009bd0:	b097      	sub	sp, #92	; 0x5c
 8009bd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009bd4:	9106      	str	r1, [sp, #24]
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8009bda:	9312      	str	r3, [sp, #72]	; 0x48
 8009bdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009be0:	e9cd 6700 	strd	r6, r7, [sp]
 8009be4:	b93d      	cbnz	r5, 8009bf6 <_dtoa_r+0x2e>
 8009be6:	2010      	movs	r0, #16
 8009be8:	f7ff fb3c 	bl	8009264 <malloc>
 8009bec:	6260      	str	r0, [r4, #36]	; 0x24
 8009bee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bf2:	6005      	str	r5, [r0, #0]
 8009bf4:	60c5      	str	r5, [r0, #12]
 8009bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bf8:	6819      	ldr	r1, [r3, #0]
 8009bfa:	b151      	cbz	r1, 8009c12 <_dtoa_r+0x4a>
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	604a      	str	r2, [r1, #4]
 8009c00:	2301      	movs	r3, #1
 8009c02:	4093      	lsls	r3, r2
 8009c04:	608b      	str	r3, [r1, #8]
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 fdda 	bl	800a7c0 <_Bfree>
 8009c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	1e3b      	subs	r3, r7, #0
 8009c14:	bfbb      	ittet	lt
 8009c16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c1a:	9301      	strlt	r3, [sp, #4]
 8009c1c:	2300      	movge	r3, #0
 8009c1e:	2201      	movlt	r2, #1
 8009c20:	bfac      	ite	ge
 8009c22:	f8c8 3000 	strge.w	r3, [r8]
 8009c26:	f8c8 2000 	strlt.w	r2, [r8]
 8009c2a:	4baf      	ldr	r3, [pc, #700]	; (8009ee8 <_dtoa_r+0x320>)
 8009c2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c30:	ea33 0308 	bics.w	r3, r3, r8
 8009c34:	d114      	bne.n	8009c60 <_dtoa_r+0x98>
 8009c36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c38:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	b923      	cbnz	r3, 8009c4c <_dtoa_r+0x84>
 8009c42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f000 8542 	beq.w	800a6d0 <_dtoa_r+0xb08>
 8009c4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009efc <_dtoa_r+0x334>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 8544 	beq.w	800a6e0 <_dtoa_r+0xb18>
 8009c58:	f10b 0303 	add.w	r3, fp, #3
 8009c5c:	f000 bd3e 	b.w	800a6dc <_dtoa_r+0xb14>
 8009c60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f6 fefc 	bl	8000a68 <__aeabi_dcmpeq>
 8009c70:	4681      	mov	r9, r0
 8009c72:	b168      	cbz	r0, 8009c90 <_dtoa_r+0xc8>
 8009c74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c76:	2301      	movs	r3, #1
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 8524 	beq.w	800a6ca <_dtoa_r+0xb02>
 8009c82:	4b9a      	ldr	r3, [pc, #616]	; (8009eec <_dtoa_r+0x324>)
 8009c84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c86:	f103 3bff 	add.w	fp, r3, #4294967295
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	f000 bd28 	b.w	800a6e0 <_dtoa_r+0xb18>
 8009c90:	aa14      	add	r2, sp, #80	; 0x50
 8009c92:	a915      	add	r1, sp, #84	; 0x54
 8009c94:	ec47 6b10 	vmov	d0, r6, r7
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 ffea 	bl	800ac72 <__d2b>
 8009c9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ca2:	9004      	str	r0, [sp, #16]
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	d07c      	beq.n	8009da2 <_dtoa_r+0x1da>
 8009ca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009cb0:	46b2      	mov	sl, r6
 8009cb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009cba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4b8b      	ldr	r3, [pc, #556]	; (8009ef0 <_dtoa_r+0x328>)
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	4659      	mov	r1, fp
 8009cc6:	f7f6 faaf 	bl	8000228 <__aeabi_dsub>
 8009cca:	a381      	add	r3, pc, #516	; (adr r3, 8009ed0 <_dtoa_r+0x308>)
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f7f6 fc62 	bl	8000598 <__aeabi_dmul>
 8009cd4:	a380      	add	r3, pc, #512	; (adr r3, 8009ed8 <_dtoa_r+0x310>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	f7f6 faa7 	bl	800022c <__adddf3>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	460f      	mov	r7, r1
 8009ce4:	f7f6 fbee 	bl	80004c4 <__aeabi_i2d>
 8009ce8:	a37d      	add	r3, pc, #500	; (adr r3, 8009ee0 <_dtoa_r+0x318>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fc53 	bl	8000598 <__aeabi_dmul>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7f6 fa97 	bl	800022c <__adddf3>
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	f7f6 fef9 	bl	8000af8 <__aeabi_d2iz>
 8009d06:	2200      	movs	r2, #0
 8009d08:	4682      	mov	sl, r0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7f6 feb4 	bl	8000a7c <__aeabi_dcmplt>
 8009d14:	b148      	cbz	r0, 8009d2a <_dtoa_r+0x162>
 8009d16:	4650      	mov	r0, sl
 8009d18:	f7f6 fbd4 	bl	80004c4 <__aeabi_i2d>
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	463b      	mov	r3, r7
 8009d20:	f7f6 fea2 	bl	8000a68 <__aeabi_dcmpeq>
 8009d24:	b908      	cbnz	r0, 8009d2a <_dtoa_r+0x162>
 8009d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d2a:	f1ba 0f16 	cmp.w	sl, #22
 8009d2e:	d859      	bhi.n	8009de4 <_dtoa_r+0x21c>
 8009d30:	4970      	ldr	r1, [pc, #448]	; (8009ef4 <_dtoa_r+0x32c>)
 8009d32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d3e:	f7f6 febb 	bl	8000ab8 <__aeabi_dcmpgt>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d050      	beq.n	8009de8 <_dtoa_r+0x220>
 8009d46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d50:	1b5d      	subs	r5, r3, r5
 8009d52:	f1b5 0801 	subs.w	r8, r5, #1
 8009d56:	bf49      	itett	mi
 8009d58:	f1c5 0301 	rsbmi	r3, r5, #1
 8009d5c:	2300      	movpl	r3, #0
 8009d5e:	9305      	strmi	r3, [sp, #20]
 8009d60:	f04f 0800 	movmi.w	r8, #0
 8009d64:	bf58      	it	pl
 8009d66:	9305      	strpl	r3, [sp, #20]
 8009d68:	f1ba 0f00 	cmp.w	sl, #0
 8009d6c:	db3e      	blt.n	8009dec <_dtoa_r+0x224>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	44d0      	add	r8, sl
 8009d72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009d76:	9307      	str	r3, [sp, #28]
 8009d78:	9b06      	ldr	r3, [sp, #24]
 8009d7a:	2b09      	cmp	r3, #9
 8009d7c:	f200 8090 	bhi.w	8009ea0 <_dtoa_r+0x2d8>
 8009d80:	2b05      	cmp	r3, #5
 8009d82:	bfc4      	itt	gt
 8009d84:	3b04      	subgt	r3, #4
 8009d86:	9306      	strgt	r3, [sp, #24]
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	f1a3 0302 	sub.w	r3, r3, #2
 8009d8e:	bfcc      	ite	gt
 8009d90:	2500      	movgt	r5, #0
 8009d92:	2501      	movle	r5, #1
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	f200 808f 	bhi.w	8009eb8 <_dtoa_r+0x2f0>
 8009d9a:	e8df f003 	tbb	[pc, r3]
 8009d9e:	7f7d      	.short	0x7f7d
 8009da0:	7131      	.short	0x7131
 8009da2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009da6:	441d      	add	r5, r3
 8009da8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009dac:	2820      	cmp	r0, #32
 8009dae:	dd13      	ble.n	8009dd8 <_dtoa_r+0x210>
 8009db0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	fa08 f800 	lsl.w	r8, r8, r0
 8009dba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009dbe:	fa23 f000 	lsr.w	r0, r3, r0
 8009dc2:	ea48 0000 	orr.w	r0, r8, r0
 8009dc6:	f7f6 fb6d 	bl	80004a4 <__aeabi_ui2d>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4682      	mov	sl, r0
 8009dce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009dd2:	3d01      	subs	r5, #1
 8009dd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009dd6:	e772      	b.n	8009cbe <_dtoa_r+0xf6>
 8009dd8:	9b00      	ldr	r3, [sp, #0]
 8009dda:	f1c0 0020 	rsb	r0, r0, #32
 8009dde:	fa03 f000 	lsl.w	r0, r3, r0
 8009de2:	e7f0      	b.n	8009dc6 <_dtoa_r+0x1fe>
 8009de4:	2301      	movs	r3, #1
 8009de6:	e7b1      	b.n	8009d4c <_dtoa_r+0x184>
 8009de8:	900f      	str	r0, [sp, #60]	; 0x3c
 8009dea:	e7b0      	b.n	8009d4e <_dtoa_r+0x186>
 8009dec:	9b05      	ldr	r3, [sp, #20]
 8009dee:	eba3 030a 	sub.w	r3, r3, sl
 8009df2:	9305      	str	r3, [sp, #20]
 8009df4:	f1ca 0300 	rsb	r3, sl, #0
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	930e      	str	r3, [sp, #56]	; 0x38
 8009dfe:	e7bb      	b.n	8009d78 <_dtoa_r+0x1b0>
 8009e00:	2301      	movs	r3, #1
 8009e02:	930a      	str	r3, [sp, #40]	; 0x28
 8009e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	dd59      	ble.n	8009ebe <_dtoa_r+0x2f6>
 8009e0a:	9302      	str	r3, [sp, #8]
 8009e0c:	4699      	mov	r9, r3
 8009e0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e10:	2200      	movs	r2, #0
 8009e12:	6072      	str	r2, [r6, #4]
 8009e14:	2204      	movs	r2, #4
 8009e16:	f102 0014 	add.w	r0, r2, #20
 8009e1a:	4298      	cmp	r0, r3
 8009e1c:	6871      	ldr	r1, [r6, #4]
 8009e1e:	d953      	bls.n	8009ec8 <_dtoa_r+0x300>
 8009e20:	4620      	mov	r0, r4
 8009e22:	f000 fc99 	bl	800a758 <_Balloc>
 8009e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e28:	6030      	str	r0, [r6, #0]
 8009e2a:	f1b9 0f0e 	cmp.w	r9, #14
 8009e2e:	f8d3 b000 	ldr.w	fp, [r3]
 8009e32:	f200 80e6 	bhi.w	800a002 <_dtoa_r+0x43a>
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	f000 80e3 	beq.w	800a002 <_dtoa_r+0x43a>
 8009e3c:	ed9d 7b00 	vldr	d7, [sp]
 8009e40:	f1ba 0f00 	cmp.w	sl, #0
 8009e44:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009e48:	dd74      	ble.n	8009f34 <_dtoa_r+0x36c>
 8009e4a:	4a2a      	ldr	r2, [pc, #168]	; (8009ef4 <_dtoa_r+0x32c>)
 8009e4c:	f00a 030f 	and.w	r3, sl, #15
 8009e50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e54:	ed93 7b00 	vldr	d7, [r3]
 8009e58:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009e5c:	06f0      	lsls	r0, r6, #27
 8009e5e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009e62:	d565      	bpl.n	8009f30 <_dtoa_r+0x368>
 8009e64:	4b24      	ldr	r3, [pc, #144]	; (8009ef8 <_dtoa_r+0x330>)
 8009e66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e6e:	f7f6 fcbd 	bl	80007ec <__aeabi_ddiv>
 8009e72:	e9cd 0100 	strd	r0, r1, [sp]
 8009e76:	f006 060f 	and.w	r6, r6, #15
 8009e7a:	2503      	movs	r5, #3
 8009e7c:	4f1e      	ldr	r7, [pc, #120]	; (8009ef8 <_dtoa_r+0x330>)
 8009e7e:	e04c      	b.n	8009f1a <_dtoa_r+0x352>
 8009e80:	2301      	movs	r3, #1
 8009e82:	930a      	str	r3, [sp, #40]	; 0x28
 8009e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e86:	4453      	add	r3, sl
 8009e88:	f103 0901 	add.w	r9, r3, #1
 8009e8c:	9302      	str	r3, [sp, #8]
 8009e8e:	464b      	mov	r3, r9
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	bfb8      	it	lt
 8009e94:	2301      	movlt	r3, #1
 8009e96:	e7ba      	b.n	8009e0e <_dtoa_r+0x246>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e7b2      	b.n	8009e02 <_dtoa_r+0x23a>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e7f0      	b.n	8009e82 <_dtoa_r+0x2ba>
 8009ea0:	2501      	movs	r5, #1
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9306      	str	r3, [sp, #24]
 8009ea6:	950a      	str	r5, [sp, #40]	; 0x28
 8009ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	4699      	mov	r9, r3
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2312      	movs	r3, #18
 8009eb4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009eb6:	e7aa      	b.n	8009e0e <_dtoa_r+0x246>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	930a      	str	r3, [sp, #40]	; 0x28
 8009ebc:	e7f4      	b.n	8009ea8 <_dtoa_r+0x2e0>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	9302      	str	r3, [sp, #8]
 8009ec2:	4699      	mov	r9, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	e7f5      	b.n	8009eb4 <_dtoa_r+0x2ec>
 8009ec8:	3101      	adds	r1, #1
 8009eca:	6071      	str	r1, [r6, #4]
 8009ecc:	0052      	lsls	r2, r2, #1
 8009ece:	e7a2      	b.n	8009e16 <_dtoa_r+0x24e>
 8009ed0:	636f4361 	.word	0x636f4361
 8009ed4:	3fd287a7 	.word	0x3fd287a7
 8009ed8:	8b60c8b3 	.word	0x8b60c8b3
 8009edc:	3fc68a28 	.word	0x3fc68a28
 8009ee0:	509f79fb 	.word	0x509f79fb
 8009ee4:	3fd34413 	.word	0x3fd34413
 8009ee8:	7ff00000 	.word	0x7ff00000
 8009eec:	0800b295 	.word	0x0800b295
 8009ef0:	3ff80000 	.word	0x3ff80000
 8009ef4:	0800b330 	.word	0x0800b330
 8009ef8:	0800b308 	.word	0x0800b308
 8009efc:	0800b29f 	.word	0x0800b29f
 8009f00:	07f1      	lsls	r1, r6, #31
 8009f02:	d508      	bpl.n	8009f16 <_dtoa_r+0x34e>
 8009f04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f0c:	f7f6 fb44 	bl	8000598 <__aeabi_dmul>
 8009f10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f14:	3501      	adds	r5, #1
 8009f16:	1076      	asrs	r6, r6, #1
 8009f18:	3708      	adds	r7, #8
 8009f1a:	2e00      	cmp	r6, #0
 8009f1c:	d1f0      	bne.n	8009f00 <_dtoa_r+0x338>
 8009f1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f26:	f7f6 fc61 	bl	80007ec <__aeabi_ddiv>
 8009f2a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f2e:	e01a      	b.n	8009f66 <_dtoa_r+0x39e>
 8009f30:	2502      	movs	r5, #2
 8009f32:	e7a3      	b.n	8009e7c <_dtoa_r+0x2b4>
 8009f34:	f000 80a0 	beq.w	800a078 <_dtoa_r+0x4b0>
 8009f38:	f1ca 0600 	rsb	r6, sl, #0
 8009f3c:	4b9f      	ldr	r3, [pc, #636]	; (800a1bc <_dtoa_r+0x5f4>)
 8009f3e:	4fa0      	ldr	r7, [pc, #640]	; (800a1c0 <_dtoa_r+0x5f8>)
 8009f40:	f006 020f 	and.w	r2, r6, #15
 8009f44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f50:	f7f6 fb22 	bl	8000598 <__aeabi_dmul>
 8009f54:	e9cd 0100 	strd	r0, r1, [sp]
 8009f58:	1136      	asrs	r6, r6, #4
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	2502      	movs	r5, #2
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d17f      	bne.n	800a062 <_dtoa_r+0x49a>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e1      	bne.n	8009f2a <_dtoa_r+0x362>
 8009f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 8087 	beq.w	800a07c <_dtoa_r+0x4b4>
 8009f6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f72:	2200      	movs	r2, #0
 8009f74:	4b93      	ldr	r3, [pc, #588]	; (800a1c4 <_dtoa_r+0x5fc>)
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	f7f6 fd7f 	bl	8000a7c <__aeabi_dcmplt>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d07c      	beq.n	800a07c <_dtoa_r+0x4b4>
 8009f82:	f1b9 0f00 	cmp.w	r9, #0
 8009f86:	d079      	beq.n	800a07c <_dtoa_r+0x4b4>
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	dd35      	ble.n	8009ffa <_dtoa_r+0x432>
 8009f8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009f92:	9308      	str	r3, [sp, #32]
 8009f94:	4639      	mov	r1, r7
 8009f96:	2200      	movs	r2, #0
 8009f98:	4b8b      	ldr	r3, [pc, #556]	; (800a1c8 <_dtoa_r+0x600>)
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7f6 fafc 	bl	8000598 <__aeabi_dmul>
 8009fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8009fa4:	9f02      	ldr	r7, [sp, #8]
 8009fa6:	3501      	adds	r5, #1
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f7f6 fa8b 	bl	80004c4 <__aeabi_i2d>
 8009fae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fb2:	f7f6 faf1 	bl	8000598 <__aeabi_dmul>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	4b84      	ldr	r3, [pc, #528]	; (800a1cc <_dtoa_r+0x604>)
 8009fba:	f7f6 f937 	bl	800022c <__adddf3>
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009fc4:	2f00      	cmp	r7, #0
 8009fc6:	d15d      	bne.n	800a084 <_dtoa_r+0x4bc>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4b81      	ldr	r3, [pc, #516]	; (800a1d0 <_dtoa_r+0x608>)
 8009fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd0:	f7f6 f92a 	bl	8000228 <__aeabi_dsub>
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4633      	mov	r3, r6
 8009fd8:	e9cd 0100 	strd	r0, r1, [sp]
 8009fdc:	f7f6 fd6c 	bl	8000ab8 <__aeabi_dcmpgt>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	f040 8288 	bne.w	800a4f6 <_dtoa_r+0x92e>
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009fec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff0:	f7f6 fd44 	bl	8000a7c <__aeabi_dcmplt>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f040 827c 	bne.w	800a4f2 <_dtoa_r+0x92a>
 8009ffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ffe:	e9cd 2300 	strd	r2, r3, [sp]
 800a002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a004:	2b00      	cmp	r3, #0
 800a006:	f2c0 8150 	blt.w	800a2aa <_dtoa_r+0x6e2>
 800a00a:	f1ba 0f0e 	cmp.w	sl, #14
 800a00e:	f300 814c 	bgt.w	800a2aa <_dtoa_r+0x6e2>
 800a012:	4b6a      	ldr	r3, [pc, #424]	; (800a1bc <_dtoa_r+0x5f4>)
 800a014:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a018:	ed93 7b00 	vldr	d7, [r3]
 800a01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01e:	2b00      	cmp	r3, #0
 800a020:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a024:	f280 80d8 	bge.w	800a1d8 <_dtoa_r+0x610>
 800a028:	f1b9 0f00 	cmp.w	r9, #0
 800a02c:	f300 80d4 	bgt.w	800a1d8 <_dtoa_r+0x610>
 800a030:	f040 825e 	bne.w	800a4f0 <_dtoa_r+0x928>
 800a034:	2200      	movs	r2, #0
 800a036:	4b66      	ldr	r3, [pc, #408]	; (800a1d0 <_dtoa_r+0x608>)
 800a038:	ec51 0b17 	vmov	r0, r1, d7
 800a03c:	f7f6 faac 	bl	8000598 <__aeabi_dmul>
 800a040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a044:	f7f6 fd2e 	bl	8000aa4 <__aeabi_dcmpge>
 800a048:	464f      	mov	r7, r9
 800a04a:	464e      	mov	r6, r9
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f040 8234 	bne.w	800a4ba <_dtoa_r+0x8f2>
 800a052:	2331      	movs	r3, #49	; 0x31
 800a054:	f10b 0501 	add.w	r5, fp, #1
 800a058:	f88b 3000 	strb.w	r3, [fp]
 800a05c:	f10a 0a01 	add.w	sl, sl, #1
 800a060:	e22f      	b.n	800a4c2 <_dtoa_r+0x8fa>
 800a062:	07f2      	lsls	r2, r6, #31
 800a064:	d505      	bpl.n	800a072 <_dtoa_r+0x4aa>
 800a066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a06a:	f7f6 fa95 	bl	8000598 <__aeabi_dmul>
 800a06e:	3501      	adds	r5, #1
 800a070:	2301      	movs	r3, #1
 800a072:	1076      	asrs	r6, r6, #1
 800a074:	3708      	adds	r7, #8
 800a076:	e772      	b.n	8009f5e <_dtoa_r+0x396>
 800a078:	2502      	movs	r5, #2
 800a07a:	e774      	b.n	8009f66 <_dtoa_r+0x39e>
 800a07c:	f8cd a020 	str.w	sl, [sp, #32]
 800a080:	464f      	mov	r7, r9
 800a082:	e791      	b.n	8009fa8 <_dtoa_r+0x3e0>
 800a084:	4b4d      	ldr	r3, [pc, #308]	; (800a1bc <_dtoa_r+0x5f4>)
 800a086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a08a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a090:	2b00      	cmp	r3, #0
 800a092:	d047      	beq.n	800a124 <_dtoa_r+0x55c>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	2000      	movs	r0, #0
 800a09a:	494e      	ldr	r1, [pc, #312]	; (800a1d4 <_dtoa_r+0x60c>)
 800a09c:	f7f6 fba6 	bl	80007ec <__aeabi_ddiv>
 800a0a0:	462a      	mov	r2, r5
 800a0a2:	4633      	mov	r3, r6
 800a0a4:	f7f6 f8c0 	bl	8000228 <__aeabi_dsub>
 800a0a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a0ac:	465d      	mov	r5, fp
 800a0ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0b2:	f7f6 fd21 	bl	8000af8 <__aeabi_d2iz>
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	f7f6 fa04 	bl	80004c4 <__aeabi_i2d>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0c4:	f7f6 f8b0 	bl	8000228 <__aeabi_dsub>
 800a0c8:	3630      	adds	r6, #48	; 0x30
 800a0ca:	f805 6b01 	strb.w	r6, [r5], #1
 800a0ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0d2:	e9cd 0100 	strd	r0, r1, [sp]
 800a0d6:	f7f6 fcd1 	bl	8000a7c <__aeabi_dcmplt>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d163      	bne.n	800a1a6 <_dtoa_r+0x5de>
 800a0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	4937      	ldr	r1, [pc, #220]	; (800a1c4 <_dtoa_r+0x5fc>)
 800a0e6:	f7f6 f89f 	bl	8000228 <__aeabi_dsub>
 800a0ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0ee:	f7f6 fcc5 	bl	8000a7c <__aeabi_dcmplt>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	f040 80b7 	bne.w	800a266 <_dtoa_r+0x69e>
 800a0f8:	eba5 030b 	sub.w	r3, r5, fp
 800a0fc:	429f      	cmp	r7, r3
 800a0fe:	f77f af7c 	ble.w	8009ffa <_dtoa_r+0x432>
 800a102:	2200      	movs	r2, #0
 800a104:	4b30      	ldr	r3, [pc, #192]	; (800a1c8 <_dtoa_r+0x600>)
 800a106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a10a:	f7f6 fa45 	bl	8000598 <__aeabi_dmul>
 800a10e:	2200      	movs	r2, #0
 800a110:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a114:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <_dtoa_r+0x600>)
 800a116:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a11a:	f7f6 fa3d 	bl	8000598 <__aeabi_dmul>
 800a11e:	e9cd 0100 	strd	r0, r1, [sp]
 800a122:	e7c4      	b.n	800a0ae <_dtoa_r+0x4e6>
 800a124:	462a      	mov	r2, r5
 800a126:	4633      	mov	r3, r6
 800a128:	f7f6 fa36 	bl	8000598 <__aeabi_dmul>
 800a12c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a130:	eb0b 0507 	add.w	r5, fp, r7
 800a134:	465e      	mov	r6, fp
 800a136:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a13a:	f7f6 fcdd 	bl	8000af8 <__aeabi_d2iz>
 800a13e:	4607      	mov	r7, r0
 800a140:	f7f6 f9c0 	bl	80004c4 <__aeabi_i2d>
 800a144:	3730      	adds	r7, #48	; 0x30
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a14e:	f7f6 f86b 	bl	8000228 <__aeabi_dsub>
 800a152:	f806 7b01 	strb.w	r7, [r6], #1
 800a156:	42ae      	cmp	r6, r5
 800a158:	e9cd 0100 	strd	r0, r1, [sp]
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	d126      	bne.n	800a1b0 <_dtoa_r+0x5e8>
 800a162:	4b1c      	ldr	r3, [pc, #112]	; (800a1d4 <_dtoa_r+0x60c>)
 800a164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a168:	f7f6 f860 	bl	800022c <__adddf3>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a174:	f7f6 fca0 	bl	8000ab8 <__aeabi_dcmpgt>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d174      	bne.n	800a266 <_dtoa_r+0x69e>
 800a17c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a180:	2000      	movs	r0, #0
 800a182:	4914      	ldr	r1, [pc, #80]	; (800a1d4 <_dtoa_r+0x60c>)
 800a184:	f7f6 f850 	bl	8000228 <__aeabi_dsub>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a190:	f7f6 fc74 	bl	8000a7c <__aeabi_dcmplt>
 800a194:	2800      	cmp	r0, #0
 800a196:	f43f af30 	beq.w	8009ffa <_dtoa_r+0x432>
 800a19a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a19e:	2b30      	cmp	r3, #48	; 0x30
 800a1a0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a1a4:	d002      	beq.n	800a1ac <_dtoa_r+0x5e4>
 800a1a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a1aa:	e04a      	b.n	800a242 <_dtoa_r+0x67a>
 800a1ac:	4615      	mov	r5, r2
 800a1ae:	e7f4      	b.n	800a19a <_dtoa_r+0x5d2>
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <_dtoa_r+0x600>)
 800a1b2:	f7f6 f9f1 	bl	8000598 <__aeabi_dmul>
 800a1b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ba:	e7bc      	b.n	800a136 <_dtoa_r+0x56e>
 800a1bc:	0800b330 	.word	0x0800b330
 800a1c0:	0800b308 	.word	0x0800b308
 800a1c4:	3ff00000 	.word	0x3ff00000
 800a1c8:	40240000 	.word	0x40240000
 800a1cc:	401c0000 	.word	0x401c0000
 800a1d0:	40140000 	.word	0x40140000
 800a1d4:	3fe00000 	.word	0x3fe00000
 800a1d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1dc:	465d      	mov	r5, fp
 800a1de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	f7f6 fb01 	bl	80007ec <__aeabi_ddiv>
 800a1ea:	f7f6 fc85 	bl	8000af8 <__aeabi_d2iz>
 800a1ee:	4680      	mov	r8, r0
 800a1f0:	f7f6 f968 	bl	80004c4 <__aeabi_i2d>
 800a1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1f8:	f7f6 f9ce 	bl	8000598 <__aeabi_dmul>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a208:	f7f6 f80e 	bl	8000228 <__aeabi_dsub>
 800a20c:	f805 6b01 	strb.w	r6, [r5], #1
 800a210:	eba5 060b 	sub.w	r6, r5, fp
 800a214:	45b1      	cmp	r9, r6
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	d139      	bne.n	800a290 <_dtoa_r+0x6c8>
 800a21c:	f7f6 f806 	bl	800022c <__adddf3>
 800a220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a224:	4606      	mov	r6, r0
 800a226:	460f      	mov	r7, r1
 800a228:	f7f6 fc46 	bl	8000ab8 <__aeabi_dcmpgt>
 800a22c:	b9c8      	cbnz	r0, 800a262 <_dtoa_r+0x69a>
 800a22e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 fc17 	bl	8000a68 <__aeabi_dcmpeq>
 800a23a:	b110      	cbz	r0, 800a242 <_dtoa_r+0x67a>
 800a23c:	f018 0f01 	tst.w	r8, #1
 800a240:	d10f      	bne.n	800a262 <_dtoa_r+0x69a>
 800a242:	9904      	ldr	r1, [sp, #16]
 800a244:	4620      	mov	r0, r4
 800a246:	f000 fabb 	bl	800a7c0 <_Bfree>
 800a24a:	2300      	movs	r3, #0
 800a24c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a24e:	702b      	strb	r3, [r5, #0]
 800a250:	f10a 0301 	add.w	r3, sl, #1
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 8241 	beq.w	800a6e0 <_dtoa_r+0xb18>
 800a25e:	601d      	str	r5, [r3, #0]
 800a260:	e23e      	b.n	800a6e0 <_dtoa_r+0xb18>
 800a262:	f8cd a020 	str.w	sl, [sp, #32]
 800a266:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a26a:	2a39      	cmp	r2, #57	; 0x39
 800a26c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a270:	d108      	bne.n	800a284 <_dtoa_r+0x6bc>
 800a272:	459b      	cmp	fp, r3
 800a274:	d10a      	bne.n	800a28c <_dtoa_r+0x6c4>
 800a276:	9b08      	ldr	r3, [sp, #32]
 800a278:	3301      	adds	r3, #1
 800a27a:	9308      	str	r3, [sp, #32]
 800a27c:	2330      	movs	r3, #48	; 0x30
 800a27e:	f88b 3000 	strb.w	r3, [fp]
 800a282:	465b      	mov	r3, fp
 800a284:	781a      	ldrb	r2, [r3, #0]
 800a286:	3201      	adds	r2, #1
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	e78c      	b.n	800a1a6 <_dtoa_r+0x5de>
 800a28c:	461d      	mov	r5, r3
 800a28e:	e7ea      	b.n	800a266 <_dtoa_r+0x69e>
 800a290:	2200      	movs	r2, #0
 800a292:	4b9b      	ldr	r3, [pc, #620]	; (800a500 <_dtoa_r+0x938>)
 800a294:	f7f6 f980 	bl	8000598 <__aeabi_dmul>
 800a298:	2200      	movs	r2, #0
 800a29a:	2300      	movs	r3, #0
 800a29c:	4606      	mov	r6, r0
 800a29e:	460f      	mov	r7, r1
 800a2a0:	f7f6 fbe2 	bl	8000a68 <__aeabi_dcmpeq>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d09a      	beq.n	800a1de <_dtoa_r+0x616>
 800a2a8:	e7cb      	b.n	800a242 <_dtoa_r+0x67a>
 800a2aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	f000 808b 	beq.w	800a3c8 <_dtoa_r+0x800>
 800a2b2:	9a06      	ldr	r2, [sp, #24]
 800a2b4:	2a01      	cmp	r2, #1
 800a2b6:	dc6e      	bgt.n	800a396 <_dtoa_r+0x7ce>
 800a2b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	d067      	beq.n	800a38e <_dtoa_r+0x7c6>
 800a2be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2c2:	9f07      	ldr	r7, [sp, #28]
 800a2c4:	9d05      	ldr	r5, [sp, #20]
 800a2c6:	9a05      	ldr	r2, [sp, #20]
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	441a      	add	r2, r3
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	9205      	str	r2, [sp, #20]
 800a2d0:	4498      	add	r8, r3
 800a2d2:	f000 fb15 	bl	800a900 <__i2b>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	dd0c      	ble.n	800a2f6 <_dtoa_r+0x72e>
 800a2dc:	f1b8 0f00 	cmp.w	r8, #0
 800a2e0:	dd09      	ble.n	800a2f6 <_dtoa_r+0x72e>
 800a2e2:	4545      	cmp	r5, r8
 800a2e4:	9a05      	ldr	r2, [sp, #20]
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	bfa8      	it	ge
 800a2ea:	4643      	movge	r3, r8
 800a2ec:	1ad2      	subs	r2, r2, r3
 800a2ee:	9205      	str	r2, [sp, #20]
 800a2f0:	1aed      	subs	r5, r5, r3
 800a2f2:	eba8 0803 	sub.w	r8, r8, r3
 800a2f6:	9b07      	ldr	r3, [sp, #28]
 800a2f8:	b1eb      	cbz	r3, 800a336 <_dtoa_r+0x76e>
 800a2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d067      	beq.n	800a3d0 <_dtoa_r+0x808>
 800a300:	b18f      	cbz	r7, 800a326 <_dtoa_r+0x75e>
 800a302:	4631      	mov	r1, r6
 800a304:	463a      	mov	r2, r7
 800a306:	4620      	mov	r0, r4
 800a308:	f000 fb9a 	bl	800aa40 <__pow5mult>
 800a30c:	9a04      	ldr	r2, [sp, #16]
 800a30e:	4601      	mov	r1, r0
 800a310:	4606      	mov	r6, r0
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fafd 	bl	800a912 <__multiply>
 800a318:	9904      	ldr	r1, [sp, #16]
 800a31a:	9008      	str	r0, [sp, #32]
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fa4f 	bl	800a7c0 <_Bfree>
 800a322:	9b08      	ldr	r3, [sp, #32]
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	9b07      	ldr	r3, [sp, #28]
 800a328:	1bda      	subs	r2, r3, r7
 800a32a:	d004      	beq.n	800a336 <_dtoa_r+0x76e>
 800a32c:	9904      	ldr	r1, [sp, #16]
 800a32e:	4620      	mov	r0, r4
 800a330:	f000 fb86 	bl	800aa40 <__pow5mult>
 800a334:	9004      	str	r0, [sp, #16]
 800a336:	2101      	movs	r1, #1
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fae1 	bl	800a900 <__i2b>
 800a33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a340:	4607      	mov	r7, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 81d0 	beq.w	800a6e8 <_dtoa_r+0xb20>
 800a348:	461a      	mov	r2, r3
 800a34a:	4601      	mov	r1, r0
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 fb77 	bl	800aa40 <__pow5mult>
 800a352:	9b06      	ldr	r3, [sp, #24]
 800a354:	2b01      	cmp	r3, #1
 800a356:	4607      	mov	r7, r0
 800a358:	dc40      	bgt.n	800a3dc <_dtoa_r+0x814>
 800a35a:	9b00      	ldr	r3, [sp, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d139      	bne.n	800a3d4 <_dtoa_r+0x80c>
 800a360:	9b01      	ldr	r3, [sp, #4]
 800a362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a366:	2b00      	cmp	r3, #0
 800a368:	d136      	bne.n	800a3d8 <_dtoa_r+0x810>
 800a36a:	9b01      	ldr	r3, [sp, #4]
 800a36c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a370:	0d1b      	lsrs	r3, r3, #20
 800a372:	051b      	lsls	r3, r3, #20
 800a374:	b12b      	cbz	r3, 800a382 <_dtoa_r+0x7ba>
 800a376:	9b05      	ldr	r3, [sp, #20]
 800a378:	3301      	adds	r3, #1
 800a37a:	9305      	str	r3, [sp, #20]
 800a37c:	f108 0801 	add.w	r8, r8, #1
 800a380:	2301      	movs	r3, #1
 800a382:	9307      	str	r3, [sp, #28]
 800a384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d12a      	bne.n	800a3e0 <_dtoa_r+0x818>
 800a38a:	2001      	movs	r0, #1
 800a38c:	e030      	b.n	800a3f0 <_dtoa_r+0x828>
 800a38e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a390:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a394:	e795      	b.n	800a2c2 <_dtoa_r+0x6fa>
 800a396:	9b07      	ldr	r3, [sp, #28]
 800a398:	f109 37ff 	add.w	r7, r9, #4294967295
 800a39c:	42bb      	cmp	r3, r7
 800a39e:	bfbf      	itttt	lt
 800a3a0:	9b07      	ldrlt	r3, [sp, #28]
 800a3a2:	9707      	strlt	r7, [sp, #28]
 800a3a4:	1afa      	sublt	r2, r7, r3
 800a3a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a3a8:	bfbb      	ittet	lt
 800a3aa:	189b      	addlt	r3, r3, r2
 800a3ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a3ae:	1bdf      	subge	r7, r3, r7
 800a3b0:	2700      	movlt	r7, #0
 800a3b2:	f1b9 0f00 	cmp.w	r9, #0
 800a3b6:	bfb5      	itete	lt
 800a3b8:	9b05      	ldrlt	r3, [sp, #20]
 800a3ba:	9d05      	ldrge	r5, [sp, #20]
 800a3bc:	eba3 0509 	sublt.w	r5, r3, r9
 800a3c0:	464b      	movge	r3, r9
 800a3c2:	bfb8      	it	lt
 800a3c4:	2300      	movlt	r3, #0
 800a3c6:	e77e      	b.n	800a2c6 <_dtoa_r+0x6fe>
 800a3c8:	9f07      	ldr	r7, [sp, #28]
 800a3ca:	9d05      	ldr	r5, [sp, #20]
 800a3cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a3ce:	e783      	b.n	800a2d8 <_dtoa_r+0x710>
 800a3d0:	9a07      	ldr	r2, [sp, #28]
 800a3d2:	e7ab      	b.n	800a32c <_dtoa_r+0x764>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e7d4      	b.n	800a382 <_dtoa_r+0x7ba>
 800a3d8:	9b00      	ldr	r3, [sp, #0]
 800a3da:	e7d2      	b.n	800a382 <_dtoa_r+0x7ba>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9307      	str	r3, [sp, #28]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a3e6:	6918      	ldr	r0, [r3, #16]
 800a3e8:	f000 fa3c 	bl	800a864 <__hi0bits>
 800a3ec:	f1c0 0020 	rsb	r0, r0, #32
 800a3f0:	4440      	add	r0, r8
 800a3f2:	f010 001f 	ands.w	r0, r0, #31
 800a3f6:	d047      	beq.n	800a488 <_dtoa_r+0x8c0>
 800a3f8:	f1c0 0320 	rsb	r3, r0, #32
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	dd3b      	ble.n	800a478 <_dtoa_r+0x8b0>
 800a400:	9b05      	ldr	r3, [sp, #20]
 800a402:	f1c0 001c 	rsb	r0, r0, #28
 800a406:	4403      	add	r3, r0
 800a408:	9305      	str	r3, [sp, #20]
 800a40a:	4405      	add	r5, r0
 800a40c:	4480      	add	r8, r0
 800a40e:	9b05      	ldr	r3, [sp, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	dd05      	ble.n	800a420 <_dtoa_r+0x858>
 800a414:	461a      	mov	r2, r3
 800a416:	9904      	ldr	r1, [sp, #16]
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 fb5f 	bl	800aadc <__lshift>
 800a41e:	9004      	str	r0, [sp, #16]
 800a420:	f1b8 0f00 	cmp.w	r8, #0
 800a424:	dd05      	ble.n	800a432 <_dtoa_r+0x86a>
 800a426:	4639      	mov	r1, r7
 800a428:	4642      	mov	r2, r8
 800a42a:	4620      	mov	r0, r4
 800a42c:	f000 fb56 	bl	800aadc <__lshift>
 800a430:	4607      	mov	r7, r0
 800a432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a434:	b353      	cbz	r3, 800a48c <_dtoa_r+0x8c4>
 800a436:	4639      	mov	r1, r7
 800a438:	9804      	ldr	r0, [sp, #16]
 800a43a:	f000 fba3 	bl	800ab84 <__mcmp>
 800a43e:	2800      	cmp	r0, #0
 800a440:	da24      	bge.n	800a48c <_dtoa_r+0x8c4>
 800a442:	2300      	movs	r3, #0
 800a444:	220a      	movs	r2, #10
 800a446:	9904      	ldr	r1, [sp, #16]
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 f9d0 	bl	800a7ee <__multadd>
 800a44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a450:	9004      	str	r0, [sp, #16]
 800a452:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 814d 	beq.w	800a6f6 <_dtoa_r+0xb2e>
 800a45c:	2300      	movs	r3, #0
 800a45e:	4631      	mov	r1, r6
 800a460:	220a      	movs	r2, #10
 800a462:	4620      	mov	r0, r4
 800a464:	f000 f9c3 	bl	800a7ee <__multadd>
 800a468:	9b02      	ldr	r3, [sp, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	4606      	mov	r6, r0
 800a46e:	dc4f      	bgt.n	800a510 <_dtoa_r+0x948>
 800a470:	9b06      	ldr	r3, [sp, #24]
 800a472:	2b02      	cmp	r3, #2
 800a474:	dd4c      	ble.n	800a510 <_dtoa_r+0x948>
 800a476:	e011      	b.n	800a49c <_dtoa_r+0x8d4>
 800a478:	d0c9      	beq.n	800a40e <_dtoa_r+0x846>
 800a47a:	9a05      	ldr	r2, [sp, #20]
 800a47c:	331c      	adds	r3, #28
 800a47e:	441a      	add	r2, r3
 800a480:	9205      	str	r2, [sp, #20]
 800a482:	441d      	add	r5, r3
 800a484:	4498      	add	r8, r3
 800a486:	e7c2      	b.n	800a40e <_dtoa_r+0x846>
 800a488:	4603      	mov	r3, r0
 800a48a:	e7f6      	b.n	800a47a <_dtoa_r+0x8b2>
 800a48c:	f1b9 0f00 	cmp.w	r9, #0
 800a490:	dc38      	bgt.n	800a504 <_dtoa_r+0x93c>
 800a492:	9b06      	ldr	r3, [sp, #24]
 800a494:	2b02      	cmp	r3, #2
 800a496:	dd35      	ble.n	800a504 <_dtoa_r+0x93c>
 800a498:	f8cd 9008 	str.w	r9, [sp, #8]
 800a49c:	9b02      	ldr	r3, [sp, #8]
 800a49e:	b963      	cbnz	r3, 800a4ba <_dtoa_r+0x8f2>
 800a4a0:	4639      	mov	r1, r7
 800a4a2:	2205      	movs	r2, #5
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 f9a2 	bl	800a7ee <__multadd>
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4607      	mov	r7, r0
 800a4ae:	9804      	ldr	r0, [sp, #16]
 800a4b0:	f000 fb68 	bl	800ab84 <__mcmp>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f73f adcc 	bgt.w	800a052 <_dtoa_r+0x48a>
 800a4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4bc:	465d      	mov	r5, fp
 800a4be:	ea6f 0a03 	mvn.w	sl, r3
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 f979 	bl	800a7c0 <_Bfree>
 800a4ce:	2e00      	cmp	r6, #0
 800a4d0:	f43f aeb7 	beq.w	800a242 <_dtoa_r+0x67a>
 800a4d4:	f1b9 0f00 	cmp.w	r9, #0
 800a4d8:	d005      	beq.n	800a4e6 <_dtoa_r+0x91e>
 800a4da:	45b1      	cmp	r9, r6
 800a4dc:	d003      	beq.n	800a4e6 <_dtoa_r+0x91e>
 800a4de:	4649      	mov	r1, r9
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 f96d 	bl	800a7c0 <_Bfree>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 f969 	bl	800a7c0 <_Bfree>
 800a4ee:	e6a8      	b.n	800a242 <_dtoa_r+0x67a>
 800a4f0:	2700      	movs	r7, #0
 800a4f2:	463e      	mov	r6, r7
 800a4f4:	e7e1      	b.n	800a4ba <_dtoa_r+0x8f2>
 800a4f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a4fa:	463e      	mov	r6, r7
 800a4fc:	e5a9      	b.n	800a052 <_dtoa_r+0x48a>
 800a4fe:	bf00      	nop
 800a500:	40240000 	.word	0x40240000
 800a504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a506:	f8cd 9008 	str.w	r9, [sp, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 80fa 	beq.w	800a704 <_dtoa_r+0xb3c>
 800a510:	2d00      	cmp	r5, #0
 800a512:	dd05      	ble.n	800a520 <_dtoa_r+0x958>
 800a514:	4631      	mov	r1, r6
 800a516:	462a      	mov	r2, r5
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 fadf 	bl	800aadc <__lshift>
 800a51e:	4606      	mov	r6, r0
 800a520:	9b07      	ldr	r3, [sp, #28]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d04c      	beq.n	800a5c0 <_dtoa_r+0x9f8>
 800a526:	6871      	ldr	r1, [r6, #4]
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 f915 	bl	800a758 <_Balloc>
 800a52e:	6932      	ldr	r2, [r6, #16]
 800a530:	3202      	adds	r2, #2
 800a532:	4605      	mov	r5, r0
 800a534:	0092      	lsls	r2, r2, #2
 800a536:	f106 010c 	add.w	r1, r6, #12
 800a53a:	300c      	adds	r0, #12
 800a53c:	f7fe fea2 	bl	8009284 <memcpy>
 800a540:	2201      	movs	r2, #1
 800a542:	4629      	mov	r1, r5
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fac9 	bl	800aadc <__lshift>
 800a54a:	9b00      	ldr	r3, [sp, #0]
 800a54c:	f8cd b014 	str.w	fp, [sp, #20]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	46b1      	mov	r9, r6
 800a556:	9307      	str	r3, [sp, #28]
 800a558:	4606      	mov	r6, r0
 800a55a:	4639      	mov	r1, r7
 800a55c:	9804      	ldr	r0, [sp, #16]
 800a55e:	f7ff faa7 	bl	8009ab0 <quorem>
 800a562:	4649      	mov	r1, r9
 800a564:	4605      	mov	r5, r0
 800a566:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a56a:	9804      	ldr	r0, [sp, #16]
 800a56c:	f000 fb0a 	bl	800ab84 <__mcmp>
 800a570:	4632      	mov	r2, r6
 800a572:	9000      	str	r0, [sp, #0]
 800a574:	4639      	mov	r1, r7
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fb1e 	bl	800abb8 <__mdiff>
 800a57c:	68c3      	ldr	r3, [r0, #12]
 800a57e:	4602      	mov	r2, r0
 800a580:	bb03      	cbnz	r3, 800a5c4 <_dtoa_r+0x9fc>
 800a582:	4601      	mov	r1, r0
 800a584:	9008      	str	r0, [sp, #32]
 800a586:	9804      	ldr	r0, [sp, #16]
 800a588:	f000 fafc 	bl	800ab84 <__mcmp>
 800a58c:	9a08      	ldr	r2, [sp, #32]
 800a58e:	4603      	mov	r3, r0
 800a590:	4611      	mov	r1, r2
 800a592:	4620      	mov	r0, r4
 800a594:	9308      	str	r3, [sp, #32]
 800a596:	f000 f913 	bl	800a7c0 <_Bfree>
 800a59a:	9b08      	ldr	r3, [sp, #32]
 800a59c:	b9a3      	cbnz	r3, 800a5c8 <_dtoa_r+0xa00>
 800a59e:	9a06      	ldr	r2, [sp, #24]
 800a5a0:	b992      	cbnz	r2, 800a5c8 <_dtoa_r+0xa00>
 800a5a2:	9a07      	ldr	r2, [sp, #28]
 800a5a4:	b982      	cbnz	r2, 800a5c8 <_dtoa_r+0xa00>
 800a5a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a5aa:	d029      	beq.n	800a600 <_dtoa_r+0xa38>
 800a5ac:	9b00      	ldr	r3, [sp, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd01      	ble.n	800a5b6 <_dtoa_r+0x9ee>
 800a5b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a5b6:	9b05      	ldr	r3, [sp, #20]
 800a5b8:	1c5d      	adds	r5, r3, #1
 800a5ba:	f883 8000 	strb.w	r8, [r3]
 800a5be:	e782      	b.n	800a4c6 <_dtoa_r+0x8fe>
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	e7c2      	b.n	800a54a <_dtoa_r+0x982>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e7e3      	b.n	800a590 <_dtoa_r+0x9c8>
 800a5c8:	9a00      	ldr	r2, [sp, #0]
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	db04      	blt.n	800a5d8 <_dtoa_r+0xa10>
 800a5ce:	d125      	bne.n	800a61c <_dtoa_r+0xa54>
 800a5d0:	9a06      	ldr	r2, [sp, #24]
 800a5d2:	bb1a      	cbnz	r2, 800a61c <_dtoa_r+0xa54>
 800a5d4:	9a07      	ldr	r2, [sp, #28]
 800a5d6:	bb0a      	cbnz	r2, 800a61c <_dtoa_r+0xa54>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	ddec      	ble.n	800a5b6 <_dtoa_r+0x9ee>
 800a5dc:	2201      	movs	r2, #1
 800a5de:	9904      	ldr	r1, [sp, #16]
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f000 fa7b 	bl	800aadc <__lshift>
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	9004      	str	r0, [sp, #16]
 800a5ea:	f000 facb 	bl	800ab84 <__mcmp>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	dc03      	bgt.n	800a5fa <_dtoa_r+0xa32>
 800a5f2:	d1e0      	bne.n	800a5b6 <_dtoa_r+0x9ee>
 800a5f4:	f018 0f01 	tst.w	r8, #1
 800a5f8:	d0dd      	beq.n	800a5b6 <_dtoa_r+0x9ee>
 800a5fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a5fe:	d1d8      	bne.n	800a5b2 <_dtoa_r+0x9ea>
 800a600:	9b05      	ldr	r3, [sp, #20]
 800a602:	9a05      	ldr	r2, [sp, #20]
 800a604:	1c5d      	adds	r5, r3, #1
 800a606:	2339      	movs	r3, #57	; 0x39
 800a608:	7013      	strb	r3, [r2, #0]
 800a60a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a60e:	2b39      	cmp	r3, #57	; 0x39
 800a610:	f105 32ff 	add.w	r2, r5, #4294967295
 800a614:	d04f      	beq.n	800a6b6 <_dtoa_r+0xaee>
 800a616:	3301      	adds	r3, #1
 800a618:	7013      	strb	r3, [r2, #0]
 800a61a:	e754      	b.n	800a4c6 <_dtoa_r+0x8fe>
 800a61c:	9a05      	ldr	r2, [sp, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f102 0501 	add.w	r5, r2, #1
 800a624:	dd06      	ble.n	800a634 <_dtoa_r+0xa6c>
 800a626:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a62a:	d0e9      	beq.n	800a600 <_dtoa_r+0xa38>
 800a62c:	f108 0801 	add.w	r8, r8, #1
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	e7c2      	b.n	800a5ba <_dtoa_r+0x9f2>
 800a634:	9a02      	ldr	r2, [sp, #8]
 800a636:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a63a:	eba5 030b 	sub.w	r3, r5, fp
 800a63e:	4293      	cmp	r3, r2
 800a640:	d021      	beq.n	800a686 <_dtoa_r+0xabe>
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	9904      	ldr	r1, [sp, #16]
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 f8d0 	bl	800a7ee <__multadd>
 800a64e:	45b1      	cmp	r9, r6
 800a650:	9004      	str	r0, [sp, #16]
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	f04f 020a 	mov.w	r2, #10
 800a65a:	4649      	mov	r1, r9
 800a65c:	4620      	mov	r0, r4
 800a65e:	d105      	bne.n	800a66c <_dtoa_r+0xaa4>
 800a660:	f000 f8c5 	bl	800a7ee <__multadd>
 800a664:	4681      	mov	r9, r0
 800a666:	4606      	mov	r6, r0
 800a668:	9505      	str	r5, [sp, #20]
 800a66a:	e776      	b.n	800a55a <_dtoa_r+0x992>
 800a66c:	f000 f8bf 	bl	800a7ee <__multadd>
 800a670:	4631      	mov	r1, r6
 800a672:	4681      	mov	r9, r0
 800a674:	2300      	movs	r3, #0
 800a676:	220a      	movs	r2, #10
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 f8b8 	bl	800a7ee <__multadd>
 800a67e:	4606      	mov	r6, r0
 800a680:	e7f2      	b.n	800a668 <_dtoa_r+0xaa0>
 800a682:	f04f 0900 	mov.w	r9, #0
 800a686:	2201      	movs	r2, #1
 800a688:	9904      	ldr	r1, [sp, #16]
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fa26 	bl	800aadc <__lshift>
 800a690:	4639      	mov	r1, r7
 800a692:	9004      	str	r0, [sp, #16]
 800a694:	f000 fa76 	bl	800ab84 <__mcmp>
 800a698:	2800      	cmp	r0, #0
 800a69a:	dcb6      	bgt.n	800a60a <_dtoa_r+0xa42>
 800a69c:	d102      	bne.n	800a6a4 <_dtoa_r+0xadc>
 800a69e:	f018 0f01 	tst.w	r8, #1
 800a6a2:	d1b2      	bne.n	800a60a <_dtoa_r+0xa42>
 800a6a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6a8:	2b30      	cmp	r3, #48	; 0x30
 800a6aa:	f105 32ff 	add.w	r2, r5, #4294967295
 800a6ae:	f47f af0a 	bne.w	800a4c6 <_dtoa_r+0x8fe>
 800a6b2:	4615      	mov	r5, r2
 800a6b4:	e7f6      	b.n	800a6a4 <_dtoa_r+0xadc>
 800a6b6:	4593      	cmp	fp, r2
 800a6b8:	d105      	bne.n	800a6c6 <_dtoa_r+0xafe>
 800a6ba:	2331      	movs	r3, #49	; 0x31
 800a6bc:	f10a 0a01 	add.w	sl, sl, #1
 800a6c0:	f88b 3000 	strb.w	r3, [fp]
 800a6c4:	e6ff      	b.n	800a4c6 <_dtoa_r+0x8fe>
 800a6c6:	4615      	mov	r5, r2
 800a6c8:	e79f      	b.n	800a60a <_dtoa_r+0xa42>
 800a6ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a730 <_dtoa_r+0xb68>
 800a6ce:	e007      	b.n	800a6e0 <_dtoa_r+0xb18>
 800a6d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a734 <_dtoa_r+0xb6c>
 800a6d6:	b11b      	cbz	r3, 800a6e0 <_dtoa_r+0xb18>
 800a6d8:	f10b 0308 	add.w	r3, fp, #8
 800a6dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	4658      	mov	r0, fp
 800a6e2:	b017      	add	sp, #92	; 0x5c
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	9b06      	ldr	r3, [sp, #24]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	f77f ae35 	ble.w	800a35a <_dtoa_r+0x792>
 800a6f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6f2:	9307      	str	r3, [sp, #28]
 800a6f4:	e649      	b.n	800a38a <_dtoa_r+0x7c2>
 800a6f6:	9b02      	ldr	r3, [sp, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	dc03      	bgt.n	800a704 <_dtoa_r+0xb3c>
 800a6fc:	9b06      	ldr	r3, [sp, #24]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	f73f aecc 	bgt.w	800a49c <_dtoa_r+0x8d4>
 800a704:	465d      	mov	r5, fp
 800a706:	4639      	mov	r1, r7
 800a708:	9804      	ldr	r0, [sp, #16]
 800a70a:	f7ff f9d1 	bl	8009ab0 <quorem>
 800a70e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a712:	f805 8b01 	strb.w	r8, [r5], #1
 800a716:	9a02      	ldr	r2, [sp, #8]
 800a718:	eba5 030b 	sub.w	r3, r5, fp
 800a71c:	429a      	cmp	r2, r3
 800a71e:	ddb0      	ble.n	800a682 <_dtoa_r+0xaba>
 800a720:	2300      	movs	r3, #0
 800a722:	220a      	movs	r2, #10
 800a724:	9904      	ldr	r1, [sp, #16]
 800a726:	4620      	mov	r0, r4
 800a728:	f000 f861 	bl	800a7ee <__multadd>
 800a72c:	9004      	str	r0, [sp, #16]
 800a72e:	e7ea      	b.n	800a706 <_dtoa_r+0xb3e>
 800a730:	0800b294 	.word	0x0800b294
 800a734:	0800b296 	.word	0x0800b296

0800a738 <_localeconv_r>:
 800a738:	4b04      	ldr	r3, [pc, #16]	; (800a74c <_localeconv_r+0x14>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6a18      	ldr	r0, [r3, #32]
 800a73e:	4b04      	ldr	r3, [pc, #16]	; (800a750 <_localeconv_r+0x18>)
 800a740:	2800      	cmp	r0, #0
 800a742:	bf08      	it	eq
 800a744:	4618      	moveq	r0, r3
 800a746:	30f0      	adds	r0, #240	; 0xf0
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	20000198 	.word	0x20000198
 800a750:	200001fc 	.word	0x200001fc

0800a754 <__malloc_lock>:
 800a754:	4770      	bx	lr

0800a756 <__malloc_unlock>:
 800a756:	4770      	bx	lr

0800a758 <_Balloc>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a75c:	4604      	mov	r4, r0
 800a75e:	460e      	mov	r6, r1
 800a760:	b93d      	cbnz	r5, 800a772 <_Balloc+0x1a>
 800a762:	2010      	movs	r0, #16
 800a764:	f7fe fd7e 	bl	8009264 <malloc>
 800a768:	6260      	str	r0, [r4, #36]	; 0x24
 800a76a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a76e:	6005      	str	r5, [r0, #0]
 800a770:	60c5      	str	r5, [r0, #12]
 800a772:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a774:	68eb      	ldr	r3, [r5, #12]
 800a776:	b183      	cbz	r3, 800a79a <_Balloc+0x42>
 800a778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a780:	b9b8      	cbnz	r0, 800a7b2 <_Balloc+0x5a>
 800a782:	2101      	movs	r1, #1
 800a784:	fa01 f506 	lsl.w	r5, r1, r6
 800a788:	1d6a      	adds	r2, r5, #5
 800a78a:	0092      	lsls	r2, r2, #2
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 fabf 	bl	800ad10 <_calloc_r>
 800a792:	b160      	cbz	r0, 800a7ae <_Balloc+0x56>
 800a794:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a798:	e00e      	b.n	800a7b8 <_Balloc+0x60>
 800a79a:	2221      	movs	r2, #33	; 0x21
 800a79c:	2104      	movs	r1, #4
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 fab6 	bl	800ad10 <_calloc_r>
 800a7a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a6:	60e8      	str	r0, [r5, #12]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e4      	bne.n	800a778 <_Balloc+0x20>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	6802      	ldr	r2, [r0, #0]
 800a7b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7be:	e7f7      	b.n	800a7b0 <_Balloc+0x58>

0800a7c0 <_Bfree>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	b93c      	cbnz	r4, 800a7da <_Bfree+0x1a>
 800a7ca:	2010      	movs	r0, #16
 800a7cc:	f7fe fd4a 	bl	8009264 <malloc>
 800a7d0:	6270      	str	r0, [r6, #36]	; 0x24
 800a7d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7d6:	6004      	str	r4, [r0, #0]
 800a7d8:	60c4      	str	r4, [r0, #12]
 800a7da:	b13d      	cbz	r5, 800a7ec <_Bfree+0x2c>
 800a7dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a7de:	686a      	ldr	r2, [r5, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7e6:	6029      	str	r1, [r5, #0]
 800a7e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}

0800a7ee <__multadd>:
 800a7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f2:	690d      	ldr	r5, [r1, #16]
 800a7f4:	461f      	mov	r7, r3
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	f101 0c14 	add.w	ip, r1, #20
 800a7fe:	2300      	movs	r3, #0
 800a800:	f8dc 0000 	ldr.w	r0, [ip]
 800a804:	b281      	uxth	r1, r0
 800a806:	fb02 7101 	mla	r1, r2, r1, r7
 800a80a:	0c0f      	lsrs	r7, r1, #16
 800a80c:	0c00      	lsrs	r0, r0, #16
 800a80e:	fb02 7000 	mla	r0, r2, r0, r7
 800a812:	b289      	uxth	r1, r1
 800a814:	3301      	adds	r3, #1
 800a816:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a81a:	429d      	cmp	r5, r3
 800a81c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a820:	f84c 1b04 	str.w	r1, [ip], #4
 800a824:	dcec      	bgt.n	800a800 <__multadd+0x12>
 800a826:	b1d7      	cbz	r7, 800a85e <__multadd+0x70>
 800a828:	68a3      	ldr	r3, [r4, #8]
 800a82a:	42ab      	cmp	r3, r5
 800a82c:	dc12      	bgt.n	800a854 <__multadd+0x66>
 800a82e:	6861      	ldr	r1, [r4, #4]
 800a830:	4630      	mov	r0, r6
 800a832:	3101      	adds	r1, #1
 800a834:	f7ff ff90 	bl	800a758 <_Balloc>
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	3202      	adds	r2, #2
 800a83c:	f104 010c 	add.w	r1, r4, #12
 800a840:	4680      	mov	r8, r0
 800a842:	0092      	lsls	r2, r2, #2
 800a844:	300c      	adds	r0, #12
 800a846:	f7fe fd1d 	bl	8009284 <memcpy>
 800a84a:	4621      	mov	r1, r4
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff ffb7 	bl	800a7c0 <_Bfree>
 800a852:	4644      	mov	r4, r8
 800a854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a858:	3501      	adds	r5, #1
 800a85a:	615f      	str	r7, [r3, #20]
 800a85c:	6125      	str	r5, [r4, #16]
 800a85e:	4620      	mov	r0, r4
 800a860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a864 <__hi0bits>:
 800a864:	0c02      	lsrs	r2, r0, #16
 800a866:	0412      	lsls	r2, r2, #16
 800a868:	4603      	mov	r3, r0
 800a86a:	b9b2      	cbnz	r2, 800a89a <__hi0bits+0x36>
 800a86c:	0403      	lsls	r3, r0, #16
 800a86e:	2010      	movs	r0, #16
 800a870:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a874:	bf04      	itt	eq
 800a876:	021b      	lsleq	r3, r3, #8
 800a878:	3008      	addeq	r0, #8
 800a87a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a87e:	bf04      	itt	eq
 800a880:	011b      	lsleq	r3, r3, #4
 800a882:	3004      	addeq	r0, #4
 800a884:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a888:	bf04      	itt	eq
 800a88a:	009b      	lsleq	r3, r3, #2
 800a88c:	3002      	addeq	r0, #2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	db06      	blt.n	800a8a0 <__hi0bits+0x3c>
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	d503      	bpl.n	800a89e <__hi0bits+0x3a>
 800a896:	3001      	adds	r0, #1
 800a898:	4770      	bx	lr
 800a89a:	2000      	movs	r0, #0
 800a89c:	e7e8      	b.n	800a870 <__hi0bits+0xc>
 800a89e:	2020      	movs	r0, #32
 800a8a0:	4770      	bx	lr

0800a8a2 <__lo0bits>:
 800a8a2:	6803      	ldr	r3, [r0, #0]
 800a8a4:	f013 0207 	ands.w	r2, r3, #7
 800a8a8:	4601      	mov	r1, r0
 800a8aa:	d00b      	beq.n	800a8c4 <__lo0bits+0x22>
 800a8ac:	07da      	lsls	r2, r3, #31
 800a8ae:	d423      	bmi.n	800a8f8 <__lo0bits+0x56>
 800a8b0:	0798      	lsls	r0, r3, #30
 800a8b2:	bf49      	itett	mi
 800a8b4:	085b      	lsrmi	r3, r3, #1
 800a8b6:	089b      	lsrpl	r3, r3, #2
 800a8b8:	2001      	movmi	r0, #1
 800a8ba:	600b      	strmi	r3, [r1, #0]
 800a8bc:	bf5c      	itt	pl
 800a8be:	600b      	strpl	r3, [r1, #0]
 800a8c0:	2002      	movpl	r0, #2
 800a8c2:	4770      	bx	lr
 800a8c4:	b298      	uxth	r0, r3
 800a8c6:	b9a8      	cbnz	r0, 800a8f4 <__lo0bits+0x52>
 800a8c8:	0c1b      	lsrs	r3, r3, #16
 800a8ca:	2010      	movs	r0, #16
 800a8cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a8d0:	bf04      	itt	eq
 800a8d2:	0a1b      	lsreq	r3, r3, #8
 800a8d4:	3008      	addeq	r0, #8
 800a8d6:	071a      	lsls	r2, r3, #28
 800a8d8:	bf04      	itt	eq
 800a8da:	091b      	lsreq	r3, r3, #4
 800a8dc:	3004      	addeq	r0, #4
 800a8de:	079a      	lsls	r2, r3, #30
 800a8e0:	bf04      	itt	eq
 800a8e2:	089b      	lsreq	r3, r3, #2
 800a8e4:	3002      	addeq	r0, #2
 800a8e6:	07da      	lsls	r2, r3, #31
 800a8e8:	d402      	bmi.n	800a8f0 <__lo0bits+0x4e>
 800a8ea:	085b      	lsrs	r3, r3, #1
 800a8ec:	d006      	beq.n	800a8fc <__lo0bits+0x5a>
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	600b      	str	r3, [r1, #0]
 800a8f2:	4770      	bx	lr
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	e7e9      	b.n	800a8cc <__lo0bits+0x2a>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	4770      	bx	lr
 800a8fc:	2020      	movs	r0, #32
 800a8fe:	4770      	bx	lr

0800a900 <__i2b>:
 800a900:	b510      	push	{r4, lr}
 800a902:	460c      	mov	r4, r1
 800a904:	2101      	movs	r1, #1
 800a906:	f7ff ff27 	bl	800a758 <_Balloc>
 800a90a:	2201      	movs	r2, #1
 800a90c:	6144      	str	r4, [r0, #20]
 800a90e:	6102      	str	r2, [r0, #16]
 800a910:	bd10      	pop	{r4, pc}

0800a912 <__multiply>:
 800a912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a916:	4614      	mov	r4, r2
 800a918:	690a      	ldr	r2, [r1, #16]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	bfb8      	it	lt
 800a920:	460b      	movlt	r3, r1
 800a922:	4688      	mov	r8, r1
 800a924:	bfbc      	itt	lt
 800a926:	46a0      	movlt	r8, r4
 800a928:	461c      	movlt	r4, r3
 800a92a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a92e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a936:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a93a:	eb07 0609 	add.w	r6, r7, r9
 800a93e:	42b3      	cmp	r3, r6
 800a940:	bfb8      	it	lt
 800a942:	3101      	addlt	r1, #1
 800a944:	f7ff ff08 	bl	800a758 <_Balloc>
 800a948:	f100 0514 	add.w	r5, r0, #20
 800a94c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a950:	462b      	mov	r3, r5
 800a952:	2200      	movs	r2, #0
 800a954:	4573      	cmp	r3, lr
 800a956:	d316      	bcc.n	800a986 <__multiply+0x74>
 800a958:	f104 0214 	add.w	r2, r4, #20
 800a95c:	f108 0114 	add.w	r1, r8, #20
 800a960:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a964:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	9201      	str	r2, [sp, #4]
 800a96e:	4293      	cmp	r3, r2
 800a970:	d80c      	bhi.n	800a98c <__multiply+0x7a>
 800a972:	2e00      	cmp	r6, #0
 800a974:	dd03      	ble.n	800a97e <__multiply+0x6c>
 800a976:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d05d      	beq.n	800aa3a <__multiply+0x128>
 800a97e:	6106      	str	r6, [r0, #16]
 800a980:	b003      	add	sp, #12
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	f843 2b04 	str.w	r2, [r3], #4
 800a98a:	e7e3      	b.n	800a954 <__multiply+0x42>
 800a98c:	f8b2 b000 	ldrh.w	fp, [r2]
 800a990:	f1bb 0f00 	cmp.w	fp, #0
 800a994:	d023      	beq.n	800a9de <__multiply+0xcc>
 800a996:	4689      	mov	r9, r1
 800a998:	46ac      	mov	ip, r5
 800a99a:	f04f 0800 	mov.w	r8, #0
 800a99e:	f859 4b04 	ldr.w	r4, [r9], #4
 800a9a2:	f8dc a000 	ldr.w	sl, [ip]
 800a9a6:	b2a3      	uxth	r3, r4
 800a9a8:	fa1f fa8a 	uxth.w	sl, sl
 800a9ac:	fb0b a303 	mla	r3, fp, r3, sl
 800a9b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a9b4:	f8dc 4000 	ldr.w	r4, [ip]
 800a9b8:	4443      	add	r3, r8
 800a9ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a9be:	fb0b 840a 	mla	r4, fp, sl, r8
 800a9c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a9c6:	46e2      	mov	sl, ip
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a9ce:	454f      	cmp	r7, r9
 800a9d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a9d4:	f84a 3b04 	str.w	r3, [sl], #4
 800a9d8:	d82b      	bhi.n	800aa32 <__multiply+0x120>
 800a9da:	f8cc 8004 	str.w	r8, [ip, #4]
 800a9de:	9b01      	ldr	r3, [sp, #4]
 800a9e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a9e4:	3204      	adds	r2, #4
 800a9e6:	f1ba 0f00 	cmp.w	sl, #0
 800a9ea:	d020      	beq.n	800aa2e <__multiply+0x11c>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	4689      	mov	r9, r1
 800a9f0:	46a8      	mov	r8, r5
 800a9f2:	f04f 0b00 	mov.w	fp, #0
 800a9f6:	f8b9 c000 	ldrh.w	ip, [r9]
 800a9fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a9fe:	fb0a 440c 	mla	r4, sl, ip, r4
 800aa02:	445c      	add	r4, fp
 800aa04:	46c4      	mov	ip, r8
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa0c:	f84c 3b04 	str.w	r3, [ip], #4
 800aa10:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	fb0a b303 	mla	r3, sl, r3, fp
 800aa1e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aa22:	454f      	cmp	r7, r9
 800aa24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aa28:	d805      	bhi.n	800aa36 <__multiply+0x124>
 800aa2a:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa2e:	3504      	adds	r5, #4
 800aa30:	e79b      	b.n	800a96a <__multiply+0x58>
 800aa32:	46d4      	mov	ip, sl
 800aa34:	e7b3      	b.n	800a99e <__multiply+0x8c>
 800aa36:	46e0      	mov	r8, ip
 800aa38:	e7dd      	b.n	800a9f6 <__multiply+0xe4>
 800aa3a:	3e01      	subs	r6, #1
 800aa3c:	e799      	b.n	800a972 <__multiply+0x60>
	...

0800aa40 <__pow5mult>:
 800aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa44:	4615      	mov	r5, r2
 800aa46:	f012 0203 	ands.w	r2, r2, #3
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	d007      	beq.n	800aa60 <__pow5mult+0x20>
 800aa50:	3a01      	subs	r2, #1
 800aa52:	4c21      	ldr	r4, [pc, #132]	; (800aad8 <__pow5mult+0x98>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa5a:	f7ff fec8 	bl	800a7ee <__multadd>
 800aa5e:	4607      	mov	r7, r0
 800aa60:	10ad      	asrs	r5, r5, #2
 800aa62:	d035      	beq.n	800aad0 <__pow5mult+0x90>
 800aa64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa66:	b93c      	cbnz	r4, 800aa78 <__pow5mult+0x38>
 800aa68:	2010      	movs	r0, #16
 800aa6a:	f7fe fbfb 	bl	8009264 <malloc>
 800aa6e:	6270      	str	r0, [r6, #36]	; 0x24
 800aa70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa74:	6004      	str	r4, [r0, #0]
 800aa76:	60c4      	str	r4, [r0, #12]
 800aa78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa80:	b94c      	cbnz	r4, 800aa96 <__pow5mult+0x56>
 800aa82:	f240 2171 	movw	r1, #625	; 0x271
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ff3a 	bl	800a900 <__i2b>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa92:	4604      	mov	r4, r0
 800aa94:	6003      	str	r3, [r0, #0]
 800aa96:	f04f 0800 	mov.w	r8, #0
 800aa9a:	07eb      	lsls	r3, r5, #31
 800aa9c:	d50a      	bpl.n	800aab4 <__pow5mult+0x74>
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7ff ff35 	bl	800a912 <__multiply>
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	4681      	mov	r9, r0
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff fe87 	bl	800a7c0 <_Bfree>
 800aab2:	464f      	mov	r7, r9
 800aab4:	106d      	asrs	r5, r5, #1
 800aab6:	d00b      	beq.n	800aad0 <__pow5mult+0x90>
 800aab8:	6820      	ldr	r0, [r4, #0]
 800aaba:	b938      	cbnz	r0, 800aacc <__pow5mult+0x8c>
 800aabc:	4622      	mov	r2, r4
 800aabe:	4621      	mov	r1, r4
 800aac0:	4630      	mov	r0, r6
 800aac2:	f7ff ff26 	bl	800a912 <__multiply>
 800aac6:	6020      	str	r0, [r4, #0]
 800aac8:	f8c0 8000 	str.w	r8, [r0]
 800aacc:	4604      	mov	r4, r0
 800aace:	e7e4      	b.n	800aa9a <__pow5mult+0x5a>
 800aad0:	4638      	mov	r0, r7
 800aad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aad6:	bf00      	nop
 800aad8:	0800b3f8 	.word	0x0800b3f8

0800aadc <__lshift>:
 800aadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae0:	460c      	mov	r4, r1
 800aae2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	6849      	ldr	r1, [r1, #4]
 800aaea:	eb0a 0903 	add.w	r9, sl, r3
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4616      	mov	r6, r2
 800aaf4:	f109 0501 	add.w	r5, r9, #1
 800aaf8:	42ab      	cmp	r3, r5
 800aafa:	db32      	blt.n	800ab62 <__lshift+0x86>
 800aafc:	4638      	mov	r0, r7
 800aafe:	f7ff fe2b 	bl	800a758 <_Balloc>
 800ab02:	2300      	movs	r3, #0
 800ab04:	4680      	mov	r8, r0
 800ab06:	f100 0114 	add.w	r1, r0, #20
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4553      	cmp	r3, sl
 800ab0e:	db2b      	blt.n	800ab68 <__lshift+0x8c>
 800ab10:	6920      	ldr	r0, [r4, #16]
 800ab12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab16:	f104 0314 	add.w	r3, r4, #20
 800ab1a:	f016 021f 	ands.w	r2, r6, #31
 800ab1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab26:	d025      	beq.n	800ab74 <__lshift+0x98>
 800ab28:	f1c2 0e20 	rsb	lr, r2, #32
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	681e      	ldr	r6, [r3, #0]
 800ab30:	468a      	mov	sl, r1
 800ab32:	4096      	lsls	r6, r2
 800ab34:	4330      	orrs	r0, r6
 800ab36:	f84a 0b04 	str.w	r0, [sl], #4
 800ab3a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ab3e:	459c      	cmp	ip, r3
 800ab40:	fa20 f00e 	lsr.w	r0, r0, lr
 800ab44:	d814      	bhi.n	800ab70 <__lshift+0x94>
 800ab46:	6048      	str	r0, [r1, #4]
 800ab48:	b108      	cbz	r0, 800ab4e <__lshift+0x72>
 800ab4a:	f109 0502 	add.w	r5, r9, #2
 800ab4e:	3d01      	subs	r5, #1
 800ab50:	4638      	mov	r0, r7
 800ab52:	f8c8 5010 	str.w	r5, [r8, #16]
 800ab56:	4621      	mov	r1, r4
 800ab58:	f7ff fe32 	bl	800a7c0 <_Bfree>
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	3101      	adds	r1, #1
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	e7c7      	b.n	800aaf8 <__lshift+0x1c>
 800ab68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	e7cd      	b.n	800ab0c <__lshift+0x30>
 800ab70:	4651      	mov	r1, sl
 800ab72:	e7dc      	b.n	800ab2e <__lshift+0x52>
 800ab74:	3904      	subs	r1, #4
 800ab76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab7e:	459c      	cmp	ip, r3
 800ab80:	d8f9      	bhi.n	800ab76 <__lshift+0x9a>
 800ab82:	e7e4      	b.n	800ab4e <__lshift+0x72>

0800ab84 <__mcmp>:
 800ab84:	6903      	ldr	r3, [r0, #16]
 800ab86:	690a      	ldr	r2, [r1, #16]
 800ab88:	1a9b      	subs	r3, r3, r2
 800ab8a:	b530      	push	{r4, r5, lr}
 800ab8c:	d10c      	bne.n	800aba8 <__mcmp+0x24>
 800ab8e:	0092      	lsls	r2, r2, #2
 800ab90:	3014      	adds	r0, #20
 800ab92:	3114      	adds	r1, #20
 800ab94:	1884      	adds	r4, r0, r2
 800ab96:	4411      	add	r1, r2
 800ab98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aba0:	4295      	cmp	r5, r2
 800aba2:	d003      	beq.n	800abac <__mcmp+0x28>
 800aba4:	d305      	bcc.n	800abb2 <__mcmp+0x2e>
 800aba6:	2301      	movs	r3, #1
 800aba8:	4618      	mov	r0, r3
 800abaa:	bd30      	pop	{r4, r5, pc}
 800abac:	42a0      	cmp	r0, r4
 800abae:	d3f3      	bcc.n	800ab98 <__mcmp+0x14>
 800abb0:	e7fa      	b.n	800aba8 <__mcmp+0x24>
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295
 800abb6:	e7f7      	b.n	800aba8 <__mcmp+0x24>

0800abb8 <__mdiff>:
 800abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abbc:	460d      	mov	r5, r1
 800abbe:	4607      	mov	r7, r0
 800abc0:	4611      	mov	r1, r2
 800abc2:	4628      	mov	r0, r5
 800abc4:	4614      	mov	r4, r2
 800abc6:	f7ff ffdd 	bl	800ab84 <__mcmp>
 800abca:	1e06      	subs	r6, r0, #0
 800abcc:	d108      	bne.n	800abe0 <__mdiff+0x28>
 800abce:	4631      	mov	r1, r6
 800abd0:	4638      	mov	r0, r7
 800abd2:	f7ff fdc1 	bl	800a758 <_Balloc>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800abdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe0:	bfa4      	itt	ge
 800abe2:	4623      	movge	r3, r4
 800abe4:	462c      	movge	r4, r5
 800abe6:	4638      	mov	r0, r7
 800abe8:	6861      	ldr	r1, [r4, #4]
 800abea:	bfa6      	itte	ge
 800abec:	461d      	movge	r5, r3
 800abee:	2600      	movge	r6, #0
 800abf0:	2601      	movlt	r6, #1
 800abf2:	f7ff fdb1 	bl	800a758 <_Balloc>
 800abf6:	692b      	ldr	r3, [r5, #16]
 800abf8:	60c6      	str	r6, [r0, #12]
 800abfa:	6926      	ldr	r6, [r4, #16]
 800abfc:	f105 0914 	add.w	r9, r5, #20
 800ac00:	f104 0214 	add.w	r2, r4, #20
 800ac04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ac08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ac0c:	f100 0514 	add.w	r5, r0, #20
 800ac10:	f04f 0e00 	mov.w	lr, #0
 800ac14:	f852 ab04 	ldr.w	sl, [r2], #4
 800ac18:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac1c:	fa1e f18a 	uxtah	r1, lr, sl
 800ac20:	b2a3      	uxth	r3, r4
 800ac22:	1ac9      	subs	r1, r1, r3
 800ac24:	0c23      	lsrs	r3, r4, #16
 800ac26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ac2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ac2e:	b289      	uxth	r1, r1
 800ac30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ac34:	45c8      	cmp	r8, r9
 800ac36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ac3a:	4694      	mov	ip, r2
 800ac3c:	f845 3b04 	str.w	r3, [r5], #4
 800ac40:	d8e8      	bhi.n	800ac14 <__mdiff+0x5c>
 800ac42:	45bc      	cmp	ip, r7
 800ac44:	d304      	bcc.n	800ac50 <__mdiff+0x98>
 800ac46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ac4a:	b183      	cbz	r3, 800ac6e <__mdiff+0xb6>
 800ac4c:	6106      	str	r6, [r0, #16]
 800ac4e:	e7c5      	b.n	800abdc <__mdiff+0x24>
 800ac50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ac54:	fa1e f381 	uxtah	r3, lr, r1
 800ac58:	141a      	asrs	r2, r3, #16
 800ac5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ac68:	f845 3b04 	str.w	r3, [r5], #4
 800ac6c:	e7e9      	b.n	800ac42 <__mdiff+0x8a>
 800ac6e:	3e01      	subs	r6, #1
 800ac70:	e7e9      	b.n	800ac46 <__mdiff+0x8e>

0800ac72 <__d2b>:
 800ac72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac76:	460e      	mov	r6, r1
 800ac78:	2101      	movs	r1, #1
 800ac7a:	ec59 8b10 	vmov	r8, r9, d0
 800ac7e:	4615      	mov	r5, r2
 800ac80:	f7ff fd6a 	bl	800a758 <_Balloc>
 800ac84:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac88:	4607      	mov	r7, r0
 800ac8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac8e:	bb34      	cbnz	r4, 800acde <__d2b+0x6c>
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	f1b8 0300 	subs.w	r3, r8, #0
 800ac96:	d027      	beq.n	800ace8 <__d2b+0x76>
 800ac98:	a802      	add	r0, sp, #8
 800ac9a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ac9e:	f7ff fe00 	bl	800a8a2 <__lo0bits>
 800aca2:	9900      	ldr	r1, [sp, #0]
 800aca4:	b1f0      	cbz	r0, 800ace4 <__d2b+0x72>
 800aca6:	9a01      	ldr	r2, [sp, #4]
 800aca8:	f1c0 0320 	rsb	r3, r0, #32
 800acac:	fa02 f303 	lsl.w	r3, r2, r3
 800acb0:	430b      	orrs	r3, r1
 800acb2:	40c2      	lsrs	r2, r0
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	9201      	str	r2, [sp, #4]
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	61bb      	str	r3, [r7, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bf14      	ite	ne
 800acc0:	2102      	movne	r1, #2
 800acc2:	2101      	moveq	r1, #1
 800acc4:	6139      	str	r1, [r7, #16]
 800acc6:	b1c4      	cbz	r4, 800acfa <__d2b+0x88>
 800acc8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800accc:	4404      	add	r4, r0
 800acce:	6034      	str	r4, [r6, #0]
 800acd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acd4:	6028      	str	r0, [r5, #0]
 800acd6:	4638      	mov	r0, r7
 800acd8:	b003      	add	sp, #12
 800acda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ace2:	e7d5      	b.n	800ac90 <__d2b+0x1e>
 800ace4:	6179      	str	r1, [r7, #20]
 800ace6:	e7e7      	b.n	800acb8 <__d2b+0x46>
 800ace8:	a801      	add	r0, sp, #4
 800acea:	f7ff fdda 	bl	800a8a2 <__lo0bits>
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	617b      	str	r3, [r7, #20]
 800acf2:	2101      	movs	r1, #1
 800acf4:	6139      	str	r1, [r7, #16]
 800acf6:	3020      	adds	r0, #32
 800acf8:	e7e5      	b.n	800acc6 <__d2b+0x54>
 800acfa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800acfe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad02:	6030      	str	r0, [r6, #0]
 800ad04:	6918      	ldr	r0, [r3, #16]
 800ad06:	f7ff fdad 	bl	800a864 <__hi0bits>
 800ad0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ad0e:	e7e1      	b.n	800acd4 <__d2b+0x62>

0800ad10 <_calloc_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	fb02 f401 	mul.w	r4, r2, r1
 800ad16:	4621      	mov	r1, r4
 800ad18:	f7fe fb16 	bl	8009348 <_malloc_r>
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	b118      	cbz	r0, 800ad28 <_calloc_r+0x18>
 800ad20:	4622      	mov	r2, r4
 800ad22:	2100      	movs	r1, #0
 800ad24:	f7fe fab9 	bl	800929a <memset>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}

0800ad2c <__ascii_mbtowc>:
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	b901      	cbnz	r1, 800ad32 <__ascii_mbtowc+0x6>
 800ad30:	a901      	add	r1, sp, #4
 800ad32:	b142      	cbz	r2, 800ad46 <__ascii_mbtowc+0x1a>
 800ad34:	b14b      	cbz	r3, 800ad4a <__ascii_mbtowc+0x1e>
 800ad36:	7813      	ldrb	r3, [r2, #0]
 800ad38:	600b      	str	r3, [r1, #0]
 800ad3a:	7812      	ldrb	r2, [r2, #0]
 800ad3c:	1c10      	adds	r0, r2, #0
 800ad3e:	bf18      	it	ne
 800ad40:	2001      	movne	r0, #1
 800ad42:	b002      	add	sp, #8
 800ad44:	4770      	bx	lr
 800ad46:	4610      	mov	r0, r2
 800ad48:	e7fb      	b.n	800ad42 <__ascii_mbtowc+0x16>
 800ad4a:	f06f 0001 	mvn.w	r0, #1
 800ad4e:	e7f8      	b.n	800ad42 <__ascii_mbtowc+0x16>

0800ad50 <__ascii_wctomb>:
 800ad50:	b149      	cbz	r1, 800ad66 <__ascii_wctomb+0x16>
 800ad52:	2aff      	cmp	r2, #255	; 0xff
 800ad54:	bf85      	ittet	hi
 800ad56:	238a      	movhi	r3, #138	; 0x8a
 800ad58:	6003      	strhi	r3, [r0, #0]
 800ad5a:	700a      	strbls	r2, [r1, #0]
 800ad5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad60:	bf98      	it	ls
 800ad62:	2001      	movls	r0, #1
 800ad64:	4770      	bx	lr
 800ad66:	4608      	mov	r0, r1
 800ad68:	4770      	bx	lr
	...

0800ad6c <_init>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr

0800ad78 <_fini>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	bf00      	nop
 800ad7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7e:	bc08      	pop	{r3}
 800ad80:	469e      	mov	lr, r3
 800ad82:	4770      	bx	lr
