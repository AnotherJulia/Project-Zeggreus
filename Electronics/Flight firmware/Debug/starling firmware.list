
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  08017c40  08017c40  00027c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018878  08018878  00030608  2**0
                  CONTENTS
  4 .ARM          00000008  08018878  08018878  00028878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018880  08018880  00030608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018880  08018880  00028880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018884  08018884  00028884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  08018888  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006268  20000608  08018e90  00030608  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006870  08018e90  00036870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031a5a  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006879  00000000  00000000  00062092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002350  00000000  00000000  00068910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002088  00000000  00000000  0006ac60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002afb6  00000000  00000000  0006cce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021964  00000000  00000000  00097c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6f4c  00000000  00000000  000b9602  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a054e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8f0  00000000  00000000  001a05cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000608 	.word	0x20000608
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017c28 	.word	0x08017c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000060c 	.word	0x2000060c
 800020c:	08017c28 	.word	0x08017c28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f005 fec0 	bl	8006d74 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f009 fbc9 	bl	800a79e <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f009 fe89 	bl	800ad38 <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f005 fe9c 	bl	8006d74 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f005 fe7d 	bl	8006d74 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f009 f94c 	bl	800a324 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f009 fe49 	bl	800ad38 <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f005 fe5c 	bl	8006d74 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f004 fc4c 	bl	80059a8 <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f004 fc44 	bl	80059a8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f004 fc3c 	bl	80059a8 <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	671a      	str	r2, [r3, #112]	; 0x70

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	675a      	str	r2, [r3, #116]	; 0x74



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f004 fc2e 	bl	80059a8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f004 fc26 	bl	80059a8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f004 fc1e 	bl	80059a8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f004 fc16 	bl	80059a8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f004 fc0e 	bl	80059a8 <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f004 fc0b 	bl	80059a8 <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40

080011bc <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	731a      	strb	r2, [r3, #12]
 80011d2:	23a2      	movs	r3, #162	; 0xa2
 80011d4:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f005 fdc7 	bl	8006d74 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	f009 fad0 	bl	800a79e <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800120e:	bf00      	nop
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fd8f 	bl	800ad38 <HAL_SPI_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d1f7      	bne.n	8001210 <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f005 fda2 	bl	8006d74 <HAL_GPIO_WritePin>

    if (status == 1) {
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b01      	cmp	r3, #1
 8001236:	d13b      	bne.n	80012b0 <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	849a      	strh	r2, [r3, #36]	; 0x24
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	84da      	strh	r2, [r3, #38]	; 0x26
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	851a      	strh	r2, [r3, #40]	; 0x28

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 800126e:	7c3b      	ldrb	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

        // convert units
        LSM_Convert(imu);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f808 	bl	80012c0 <LSM_Convert>

    }

    return status;
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	a367      	add	r3, pc, #412	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc73 	bl	8000c28 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	665a      	str	r2, [r3, #100]	; 0x64
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a35e      	add	r3, pc, #376	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fc60 	bl	8000c28 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	669a      	str	r2, [r3, #104]	; 0x68
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	a354      	add	r3, pc, #336	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f95b 	bl	8000638 <__aeabi_dmul>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc4d 	bl	8000c28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	66da      	str	r2, [r3, #108]	; 0x6c

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a32a      	add	r3, pc, #168	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbf5 	bl	8000c28 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89d 	bl	8000588 <__aeabi_f2d>
 800144e:	a31c      	add	r3, pc, #112	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8f0 	bl	8000638 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LSM_Convert+0x208>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4603      	mov	r3, r0
 800146c:	460c      	mov	r4, r1
 800146e:	4618      	mov	r0, r3
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff fbd9 	bl	8000c28 <__aeabi_d2f>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	a30e      	add	r3, pc, #56	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LSM_Convert+0x208>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fbbd 	bl	8000c28 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	54442eea 	.word	0x54442eea
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	40668000 	.word	0x40668000
 80014cc:	3a92a305 	.word	0x3a92a305
 80014d0:	40239d01 	.word	0x40239d01

080014d4 <LSM_ReadDMA>:

uint8_t LSM_ReadDMA(lsm6dso *imu) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	731a      	strb	r2, [r3, #12]
 80014ea:	23a2      	movs	r3, #162	; 0xa2
 80014ec:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6858      	ldr	r0, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	891b      	ldrh	r3, [r3, #8]
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	f005 fc3b 	bl	8006d74 <HAL_GPIO_WritePin>

    if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, imu->rxBuf, 13) == HAL_OK) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f103 0217 	add.w	r2, r3, #23
 8001508:	f107 0118 	add.w	r1, r7, #24
 800150c:	230d      	movs	r3, #13
 800150e:	f009 fae9 	bl	800aae4 <HAL_SPI_TransmitReceive_DMA>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LSM_ReadDMA+0x48>
        return 1;
 8001518:	2301      	movs	r3, #1
 800151a:	e008      	b.n	800152e <LSM_ReadDMA+0x5a>
    }
    else {
        HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6858      	ldr	r0, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	891b      	ldrh	r3, [r3, #8]
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	f005 fc24 	bl	8006d74 <HAL_GPIO_WritePin>
        return 0;
 800152c:	2300      	movs	r3, #0
    }

}
 800152e:	4618      	mov	r0, r3
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LSM_ReadDMA_Complete>:

void LSM_ReadDMA_Complete(lsm6dso *imu) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6858      	ldr	r0, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f005 fc13 	bl	8006d74 <HAL_GPIO_WritePin>

    imu->rawGyro[0] = (uint16_t) (imu->rxBuf[2] << 8 | imu->rxBuf[1]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e5b      	ldrb	r3, [r3, #25]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e1b      	ldrb	r3, [r3, #24]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	849a      	strh	r2, [r3, #36]	; 0x24
    imu->rawGyro[1] = (uint16_t) (imu->rxBuf[4] << 8 | imu->rxBuf[3]);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7edb      	ldrb	r3, [r3, #27]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e9b      	ldrb	r3, [r3, #26]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	84da      	strh	r2, [r3, #38]	; 0x26
    imu->rawGyro[2] = (uint16_t) (imu->rxBuf[6] << 8 | imu->rxBuf[5]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7f5b      	ldrb	r3, [r3, #29]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7f1b      	ldrb	r3, [r3, #28]
 8001586:	b21b      	sxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b21a      	sxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28

    imu->rawAcc[0] = (uint16_t) (imu->rxBuf[8] << 8 | imu->rxBuf[7]);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7fdb      	ldrb	r3, [r3, #31]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7f9b      	ldrb	r3, [r3, #30]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    imu->rawAcc[1] = (uint16_t) (imu->rxBuf[10] << 8 | imu->rxBuf[9]);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    imu->rawAcc[2] = (uint16_t) (imu->rxBuf[12] << 8 | imu->rxBuf[11]);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    LSM_Convert(imu);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fe6d 	bl	80012c0 <LSM_Convert>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	; 0x50
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c

    bar->basepressure = 101325;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4a65      	ldr	r2, [pc, #404]	; (80017bc <SPL06_Init+0x1cc>)
 8001628:	631a      	str	r2, [r3, #48]	; 0x30

    uint8_t txBuf[2] = {0x00, 0x00};
 800162a:	2300      	movs	r3, #0
 800162c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001630:	2300      	movs	r3, #0
 8001632:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	b299      	uxth	r1, r3
 8001640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2301      	movs	r3, #1
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	220d      	movs	r2, #13
 8001654:	f005 fdf2 	bl	800723c <HAL_I2C_Mem_Read>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b2da      	uxtb	r2, r3
 8001666:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800166a:	4413      	add	r3, r2
 800166c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 8001670:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001674:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001678:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800167c:	2b10      	cmp	r3, #16
 800167e:	d001      	beq.n	8001684 <SPL06_Init+0x94>

        return 0;
 8001680:	2300      	movs	r3, #0
 8001682:	e13b      	b.n	80018fc <SPL06_Init+0x30c>

    }
    HAL_Delay(10);
 8001684:	200a      	movs	r0, #10
 8001686:	f004 f98f 	bl	80059a8 <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 800168a:	2390      	movs	r3, #144	; 0x90
 800168c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	b299      	uxth	r1, r3
 800169a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	2313      	movs	r3, #19
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	2210      	movs	r2, #16
 80016ae:	f005 fdc5 	bl	800723c <HAL_I2C_Mem_Read>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016c4:	4413      	add	r3, r2
 80016c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80016ca:	7c3b      	ldrb	r3, [r7, #16]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	7c7b      	ldrb	r3, [r7, #17]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21a      	sxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <SPL06_Init+0x112>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016f6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80016fa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80016fe:	b21b      	sxth	r3, r3
 8001700:	e002      	b.n	8001708 <SPL06_Init+0x118>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 800170c:	7c7b      	ldrb	r3, [r7, #17]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21b      	sxth	r3, r3
 8001712:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001716:	b21a      	sxth	r2, r3
 8001718:	7cbb      	ldrb	r3, [r7, #18]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21a      	sxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800172a:	b29b      	uxth	r3, r3
 800172c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <SPL06_Init+0x156>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800173a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800173e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001742:	b21b      	sxth	r3, r3
 8001744:	e002      	b.n	800174c <SPL06_Init+0x15c>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	031a      	lsls	r2, r3, #12
 8001754:	7d3b      	ldrb	r3, [r7, #20]
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4313      	orrs	r3, r2
 800175a:	7d7a      	ldrb	r2, [r7, #21]
 800175c:	0912      	lsrs	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	4313      	orrs	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <SPL06_Init+0x192>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800177c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001780:	e001      	b.n	8001786 <SPL06_Init+0x196>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 800178a:	7d7b      	ldrb	r3, [r7, #21]
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001792:	7dbb      	ldrb	r3, [r7, #22]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	4313      	orrs	r3, r2
 8001798:	7dfa      	ldrb	r2, [r7, #23]
 800179a:	4313      	orrs	r3, r2
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <SPL06_Init+0x1d0>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80017b6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80017ba:	e003      	b.n	80017c4 <SPL06_Init+0x1d4>
 80017bc:	47c5e680 	.word	0x47c5e680
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80017c8:	7e3b      	ldrb	r3, [r7, #24]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	7e7b      	ldrb	r3, [r7, #25]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80017da:	7ebb      	ldrb	r3, [r7, #26]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21a      	sxth	r2, r3
 80017e0:	7efb      	ldrb	r3, [r7, #27]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80017ec:	7f3b      	ldrb	r3, [r7, #28]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	7f7b      	ldrb	r3, [r7, #29]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80017fe:	7fbb      	ldrb	r3, [r7, #30]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b21a      	sxth	r2, r3
 8001804:	7ffb      	ldrb	r3, [r7, #31]
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21a      	sxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 8001810:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800181c:	b21b      	sxth	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b21a      	sxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001826:	2019      	movs	r0, #25
 8001828:	f004 f8be 	bl	80059a8 <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0b01100011; // 64 Hz with 8 times oversampling
 800182c:	2363      	movs	r3, #99	; 0x63
 800182e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	b299      	uxth	r1, r3
 800183c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	2301      	movs	r3, #1
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2301      	movs	r3, #1
 800184e:	2206      	movs	r2, #6
 8001850:	f005 fbfa 	bl	8007048 <HAL_I2C_Mem_Write>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf0c      	ite	eq
 800185a:	2301      	moveq	r3, #1
 800185c:	2300      	movne	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	b2da      	uxtb	r2, r3
 8001862:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001866:	4413      	add	r3, r2
 8001868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f004 f89b 	bl	80059a8 <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 8001872:	23b3      	movs	r3, #179	; 0xb3
 8001874:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	791b      	ldrb	r3, [r3, #4]
 8001880:	b299      	uxth	r1, r3
 8001882:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	2207      	movs	r2, #7
 8001896:	f005 fbd7 	bl	8007048 <HAL_I2C_Mem_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ac:	4413      	add	r3, r2
 80018ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 80018b2:	200a      	movs	r0, #10
 80018b4:	f004 f878 	bl	80059a8 <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 80018b8:	23ff      	movs	r3, #255	; 0xff
 80018ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	b299      	uxth	r1, r3
 80018c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	2208      	movs	r2, #8
 80018dc:	f005 fbb4 	bl	8007048 <HAL_I2C_Mem_Write>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018f2:	4413      	add	r3, r2
 80018f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80018f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3740      	adds	r7, #64	; 0x40
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SPL06_Read>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (POLLING)
 *
 */
void SPL06_Read(SPL06 *bar) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]

    uint8_t txBuf[7];
    txBuf[0] = 0x00 | 0x80;
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	743b      	strb	r3, [r7, #16]

    uint8_t rxBuf[6];

    //HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x80, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500);
    HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x00, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, 500);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	b299      	uxth	r1, r3
 800191a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2306      	movs	r3, #6
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2200      	movs	r2, #0
 800192e:	f005 fc85 	bl	800723c <HAL_I2C_Mem_Read>

    /* Convert raw to uncalibrated pressure and temperature */
    int32_t pres = ((uint32_t) rxBuf[0] << 16) | ((uint32_t) rxBuf[1] << 8) | ((uint32_t) rxBuf[2]);
 8001932:	7a3b      	ldrb	r3, [r7, #8]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	7a7b      	ldrb	r3, [r7, #9]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	4313      	orrs	r3, r2
 800193c:	7aba      	ldrb	r2, [r7, #10]
 800193e:	4313      	orrs	r3, r2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
            pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <SPL06_Read+0x50>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001952:	e000      	b.n	8001956 <SPL06_Read+0x52>
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t temp = ((uint32_t) rxBuf[3] << 16) | ((uint32_t) rxBuf[4] << 8) | ((uint32_t) rxBuf[5]);
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	041a      	lsls	r2, r3, #16
 800195c:	7b3b      	ldrb	r3, [r7, #12]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	4313      	orrs	r3, r2
 8001962:	7b7a      	ldrb	r2, [r7, #13]
 8001964:	4313      	orrs	r3, r2
 8001966:	623b      	str	r3, [r7, #32]
            temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <SPL06_Read+0x76>
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001978:	e000      	b.n	800197c <SPL06_Read+0x78>
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	623b      	str	r3, [r7, #32]

    /* Apply calibration */
    float tempRaw = (float) temp / 7864320.0f;
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001988:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001acc <SPL06_Read+0x1c8>
 800198c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001990:	edc7 7a07 	vstr	s15, [r7, #28]
    bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    float presRaw   = (float) pres / 7864320.0f;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001acc <SPL06_Read+0x1c8>
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	edc7 7a06 	vstr	s15, [r7, #24]
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a34:	ee37 7a27 	vadd.f32	s14, s14, s15
                    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a66:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a6a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee77 7a27 	vadd.f32	s15, s14, s15
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    bar->altitude = 44330 * (1 - powf(bar->pressure_Pa/bar->basepressure, 0.190295));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a9c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001ad0 <SPL06_Read+0x1cc>
 8001aa0:	eeb0 0a66 	vmov.f32	s0, s13
 8001aa4:	f013 feb0 	bl	8015808 <powf>
 8001aa8:	eeb0 7a40 	vmov.f32	s14, s0
 8001aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ab4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ad4 <SPL06_Read+0x1d0>
 8001ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	4af00000 	.word	0x4af00000
 8001ad0:	3e42dcb1 	.word	0x3e42dcb1
 8001ad4:	472d2a00 	.word	0x472d2a00

08001ad8 <servo_init>:
#include "servo.h"

void servo_init(Servo *servo, TIM_HandleTypeDef *tim, volatile uint32_t *timerval) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
    servo->timer = tim;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	605a      	str	r2, [r3, #4]
    servo->timerval = timerval;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <servo_writeangle>:


void servo_writeangle(Servo *servo, uint8_t angle) {
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
    // value between 0 and 180
    uint32_t newtimerval = 1000 + (angle * 1000 / 180);
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <servo_writeangle+0x40>)
 8001b14:	fb82 1203 	smull	r1, r2, r2, r3
 8001b18:	441a      	add	r2, r3
 8001b1a:	11d2      	asrs	r2, r2, #7
 8001b1c:	17db      	asrs	r3, r3, #31
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001b24:	60fb      	str	r3, [r7, #12]
    *servo->timerval = newtimerval;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	b60b60b7 	.word	0xb60b60b7

08001b40 <servo_disable>:

void servo_writemicros(Servo *servo, uint32_t pulse) {
    *servo->timerval = pulse;
}

void servo_disable(Servo *servo) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    *servo->timerval = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	4613      	mov	r3, r2
 8001b68:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6858      	ldr	r0, [r3, #4]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	891b      	ldrh	r3, [r3, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	4619      	mov	r1, r3
 8001b76:	f005 f8fd 	bl	8006d74 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	f008 fbcc 	bl	800a324 <HAL_SPI_Transmit>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6858      	ldr	r0, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	891b      	ldrh	r3, [r3, #8]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f005 f8e7 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6858      	ldr	r0, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	891b      	ldrh	r3, [r3, #8]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f005 f8d4 	bl	8006d74 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	f008 fddd 	bl	800a79e <HAL_SPI_TransmitReceive>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6858      	ldr	r0, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	891b      	ldrh	r3, [r3, #8]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f005 f8bb 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	887a      	ldrh	r2, [r7, #2]
 8001c26:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <sxInit+0xbc>)
 8001c2e:	f005 f8a1 	bl	8006d74 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001c32:	2002      	movs	r0, #2
 8001c34:	f003 feb8 	bl	80059a8 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2140      	movs	r1, #64	; 0x40
 8001c3c:	4821      	ldr	r0, [pc, #132]	; (8001cc4 <sxInit+0xbc>)
 8001c3e:	f005 f899 	bl	8006d74 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001c42:	2002      	movs	r0, #2
 8001c44:	f003 feb0 	bl	80059a8 <HAL_Delay>

    SetStandbyRC(radio);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f850 	bl	8001cee <SetStandbyRC>
    HAL_Delay(3);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f003 feaa 	bl	80059a8 <HAL_Delay>
    setPacketLora(radio);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f875 	bl	8001d44 <setPacketLora>
    HAL_Delay(2);
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f003 fea4 	bl	80059a8 <HAL_Delay>
    SetRfFrequency2(radio);
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f859 	bl	8001d18 <SetRfFrequency2>
    HAL_Delay(2);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f003 fe9e 	bl	80059a8 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f897 	bl	8001da4 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f003 fe96 	bl	80059a8 <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	2218      	movs	r2, #24
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f8a8 	bl	8001dd8 <SetModulationParams>
    HAL_Delay(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f003 fe8d 	bl	80059a8 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001c8e:	2232      	movs	r2, #50	; 0x32
 8001c90:	f640 1125 	movw	r1, #2341	; 0x925
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fa1f 	bl	80020d8 <WriteRegisterByte>

    HAL_Delay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f003 fe84 	bl	80059a8 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2320      	movs	r3, #32
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	210c      	movs	r1, #12
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f8b3 	bl	8001e1a <SetPacketParamsLora>
    HAL_Delay(1);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f003 fe77 	bl	80059a8 <HAL_Delay>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	821a      	strh	r2, [r3, #16]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	723b      	strb	r3, [r7, #8]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001cfe:	f107 020c 	add.w	r2, r7, #12
 8001d02:	f107 0108 	add.w	r1, r7, #8
 8001d06:	2302      	movs	r3, #2
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff50 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <SetRfFrequency2+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001d26:	f107 020c 	add.w	r2, r7, #12
 8001d2a:	f107 0108 	add.w	r1, r7, #8
 8001d2e:	2304      	movs	r3, #4
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff3c 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08017c44 	.word	0x08017c44

08001d44 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <setPacketLora+0x28>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	f107 0108 	add.w	r1, r7, #8
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff26 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08017c48 	.word	0x08017c48

08001d70 <SetTxParams>:
    WriteRegisterBytes(radio, 0x916, rangingAddress, 4);


}

void SetTxParams(sx1280_custom *radio, uint8_t power, uint8_t rampTime) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
 8001d80:	238e      	movs	r3, #142	; 0x8e
 8001d82:	723b      	strb	r3, [r7, #8]
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	727b      	strb	r3, [r7, #9]
 8001d88:	78bb      	ldrb	r3, [r7, #2]
 8001d8a:	72bb      	strb	r3, [r7, #10]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
 8001d8c:	f107 020c 	add.w	r2, r7, #12
 8001d90:	f107 0108 	add.w	r1, r7, #8
 8001d94:	2303      	movs	r3, #3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff09 	bl	8001bae <sxSpiTransmitReceive>
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
 8001db0:	4613      	mov	r3, r2
 8001db2:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001db4:	238f      	movs	r3, #143	; 0x8f
 8001db6:	723b      	strb	r3, [r7, #8]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	727b      	strb	r3, [r7, #9]
 8001dbc:	78bb      	ldrb	r3, [r7, #2]
 8001dbe:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001dc0:	f107 020c 	add.w	r2, r7, #12
 8001dc4:	f107 0108 	add.w	r1, r7, #8
 8001dc8:	2303      	movs	r3, #3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff feef 	bl	8001bae <sxSpiTransmitReceive>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	70fb      	strb	r3, [r7, #3]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70bb      	strb	r3, [r7, #2]
 8001dee:	4613      	mov	r3, r2
 8001df0:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001df2:	238b      	movs	r3, #139	; 0x8b
 8001df4:	723b      	strb	r3, [r7, #8]
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	727b      	strb	r3, [r7, #9]
 8001dfa:	78bb      	ldrb	r3, [r7, #2]
 8001dfc:	72bb      	strb	r3, [r7, #10]
 8001dfe:	787b      	ldrb	r3, [r7, #1]
 8001e00:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001e02:	f107 020c 	add.w	r2, r7, #12
 8001e06:	f107 0108 	add.w	r1, r7, #8
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fece 	bl	8001bae <sxSpiTransmitReceive>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	4608      	mov	r0, r1
 8001e24:	4611      	mov	r1, r2
 8001e26:	461a      	mov	r2, r3
 8001e28:	4603      	mov	r3, r0
 8001e2a:	70fb      	strb	r3, [r7, #3]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70bb      	strb	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001e34:	238c      	movs	r3, #140	; 0x8c
 8001e36:	723b      	strb	r3, [r7, #8]
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	727b      	strb	r3, [r7, #9]
 8001e3c:	78bb      	ldrb	r3, [r7, #2]
 8001e3e:	72bb      	strb	r3, [r7, #10]
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	72fb      	strb	r3, [r7, #11]
 8001e44:	7e3b      	ldrb	r3, [r7, #24]
 8001e46:	733b      	strb	r3, [r7, #12]
 8001e48:	7f3b      	ldrb	r3, [r7, #28]
 8001e4a:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	2206      	movs	r2, #6
 8001e52:	4619      	mov	r1, r3
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fe81 	bl	8001b5c <sxSpiTransmit>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <WriteBuffer>:

void WriteBuffer(sx1280_custom *radio, uint8_t offset, uint8_t *data, uint8_t size) {
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	72fb      	strb	r3, [r7, #11]
 8001e72:	4613      	mov	r3, r2
 8001e74:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1A, offset };
 8001e76:	231a      	movs	r3, #26
 8001e78:	753b      	strb	r3, [r7, #20]
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	757b      	strb	r3, [r7, #21]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6858      	ldr	r0, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	891b      	ldrh	r3, [r3, #8]
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f004 ff73 	bl	8006d74 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f107 0114 	add.w	r1, r7, #20
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f008 fa42 	bl	800a324 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	7abb      	ldrb	r3, [r7, #10]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	f008 fa39 	bl	800a324 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6858      	ldr	r0, [r3, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	891b      	ldrh	r3, [r3, #8]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f004 ff59 	bl	8006d74 <HAL_GPIO_WritePin>

}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <ReadBuffer>:

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	72fb      	strb	r3, [r7, #11]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001edc:	231b      	movs	r3, #27
 8001ede:	753b      	strb	r3, [r7, #20]
 8001ee0:	7afb      	ldrb	r3, [r7, #11]
 8001ee2:	757b      	strb	r3, [r7, #21]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6858      	ldr	r0, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	891b      	ldrh	r3, [r3, #8]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f004 ff3e 	bl	8006d74 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	f107 0114 	add.w	r1, r7, #20
 8001f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f04:	2203      	movs	r2, #3
 8001f06:	f008 fa0d 	bl	800a324 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	7abb      	ldrb	r3, [r7, #10]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f008 fb38 	bl	800a58c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6858      	ldr	r0, [r3, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	891b      	ldrh	r3, [r3, #8]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4619      	mov	r1, r3
 8001f28:	f004 ff24 	bl	8006d74 <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	4611      	mov	r1, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	817b      	strh	r3, [r7, #10]
 8001f46:	460b      	mov	r3, r1
 8001f48:	813b      	strh	r3, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001f4e:	238d      	movs	r3, #141	; 0x8d
 8001f50:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001f5c:	897b      	ldrh	r3, [r7, #10]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001f62:	893b      	ldrh	r3, [r7, #8]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001f82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	2209      	movs	r2, #9
 8001f98:	4619      	mov	r1, r3
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff fdde 	bl	8001b5c <sxSpiTransmit>
}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001fb4:	2397      	movs	r3, #151	; 0x97
 8001fb6:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2203      	movs	r2, #3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fdc3 	bl	8001b5c <sxSpiTransmit>
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <SetTx>:

void SetTx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	70fb      	strb	r3, [r7, #3]
 8001fea:	4613      	mov	r3, r2
 8001fec:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X83;
 8001fee:	2383      	movs	r3, #131	; 0x83
 8001ff0:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001ff6:	883b      	ldrh	r3, [r7, #0]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8002000:	883b      	ldrh	r3, [r7, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	2204      	movs	r2, #4
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fda4 	bl	8001b5c <sxSpiTransmit>
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <SetRx>:

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
 8002028:	4613      	mov	r3, r2
 800202a:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 800202c:	2382      	movs	r3, #130	; 0x82
 800202e:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8002034:	883b      	ldrh	r3, [r7, #0]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	b29b      	uxth	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 800203e:	883b      	ldrh	r3, [r7, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2204      	movs	r2, #4
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fd85 	bl	8001b5c <sxSpiTransmit>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8002062:	231d      	movs	r3, #29
 8002064:	723b      	strb	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	727b      	strb	r3, [r7, #9]
 800206a:	2300      	movs	r3, #0
 800206c:	72bb      	strb	r3, [r7, #10]
 800206e:	2300      	movs	r3, #0
 8002070:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8002072:	f107 020c 	add.w	r2, r7, #12
 8002076:	f107 0108 	add.w	r1, r7, #8
 800207a:	2304      	movs	r3, #4
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fd96 	bl	8001bae <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8002082:	7bba      	ldrb	r2, [r7, #14]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	b25a      	sxtb	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a2:	eeb1 7a67 	vneg.f32	s14, s15
 80020a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    radio->snr = ((float) radio->rawSnr)/4;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 80020e8:	2318      	movs	r3, #24
 80020ea:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2204      	movs	r2, #4
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fd27 	bl	8001b5c <sxSpiTransmit>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <encode_TLM>:
#include "main.h"
#include "telemetry.h"
#include "math.h"


void encode_TLM(TLM_decoded *dec, TLM_encoded *enc) {
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    enc->packet_state_bits = (dec->packet_type & (1<<0)) | ((0b00011111 & dec->flight_state) << 1) | ((1 & dec->is_playing_music) << 6) | ((1&dec->is_data_logging) <<7);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	b25a      	sxtb	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	b25b      	sxtb	r3, r3
 8002136:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800213a:	b25b      	sxtb	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b25a      	sxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	789b      	ldrb	r3, [r3, #2]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	b25b      	sxtb	r3, r3
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	b25b      	sxtb	r3, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	b25a      	sxtb	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	01db      	lsls	r3, r3, #7
 8002158:	b25b      	sxtb	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b25b      	sxtb	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	701a      	strb	r2, [r3, #0]

    enc->pin_states_servo = (dec->pin_states & 0b00111111) | ((dec->servo_state & 0b00000011) << 6);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	b25b      	sxtb	r3, r3
 800216a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800216e:	b25a      	sxtb	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	795b      	ldrb	r3, [r3, #5]
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	b25b      	sxtb	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b25b      	sxtb	r3, r3
 800217c:	b2da      	uxtb	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	705a      	strb	r2, [r3, #1]

    enc->systick[0] = 0xff & (dec->systick >> 16);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	b2da      	uxtb	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	709a      	strb	r2, [r3, #2]
    enc->systick[1] = 0xff & (dec->systick >> 8);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b2da      	uxtb	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	70da      	strb	r2, [r3, #3]
    enc->systick[2] = 0xff & dec->systick;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	711a      	strb	r2, [r3, #4]

    uint16_t vbat_10mV = (uint16_t) round(dec->vbat * 100); // 0.01 V/lsb
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021aa:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8002510 <encode_TLM+0x3f8>
 80021ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b2:	ee17 0a90 	vmov	r0, s15
 80021b6:	f7fe f9e7 	bl	8000588 <__aeabi_f2d>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	ec44 3b10 	vmov	d0, r3, r4
 80021c2:	f013 f9d9 	bl	8015578 <round>
 80021c6:	ec54 3b10 	vmov	r3, r4, d0
 80021ca:	4618      	mov	r0, r3
 80021cc:	4621      	mov	r1, r4
 80021ce:	f7fe fd0b 	bl	8000be8 <__aeabi_d2uiz>
 80021d2:	4603      	mov	r3, r0
 80021d4:	817b      	strh	r3, [r7, #10]

    enc->vbat_MSB = (uint8_t) ((vbat_10mV >> 2) & 0xFF);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	715a      	strb	r2, [r3, #5]
    enc->padding_vbat_LSB = (uint8_t) (vbat_10mV & 0b00000011);
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	719a      	strb	r2, [r3, #6]

    enc->orientation_quat[0] = (int8_t) round(dec->orientation_quat[0]*127);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80021f6:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8002514 <encode_TLM+0x3fc>
 80021fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9c1 	bl	8000588 <__aeabi_f2d>
 8002206:	4603      	mov	r3, r0
 8002208:	460c      	mov	r4, r1
 800220a:	ec44 3b10 	vmov	d0, r3, r4
 800220e:	f013 f9b3 	bl	8015578 <round>
 8002212:	ec54 3b10 	vmov	r3, r4, d0
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	f7fe fcbd 	bl	8000b98 <__aeabi_d2iz>
 800221e:	4603      	mov	r3, r0
 8002220:	b25a      	sxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	71da      	strb	r2, [r3, #7]
    enc->orientation_quat[1] = (int8_t) round(dec->orientation_quat[1]*127);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edd3 7a05 	vldr	s15, [r3, #20]
 800222c:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8002514 <encode_TLM+0x3fc>
 8002230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002234:	ee17 0a90 	vmov	r0, s15
 8002238:	f7fe f9a6 	bl	8000588 <__aeabi_f2d>
 800223c:	4603      	mov	r3, r0
 800223e:	460c      	mov	r4, r1
 8002240:	ec44 3b10 	vmov	d0, r3, r4
 8002244:	f013 f998 	bl	8015578 <round>
 8002248:	ec54 3b10 	vmov	r3, r4, d0
 800224c:	4618      	mov	r0, r3
 800224e:	4621      	mov	r1, r4
 8002250:	f7fe fca2 	bl	8000b98 <__aeabi_d2iz>
 8002254:	4603      	mov	r3, r0
 8002256:	b25a      	sxtb	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	721a      	strb	r2, [r3, #8]
    enc->orientation_quat[2] = (int8_t) round(dec->orientation_quat[2]*127);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002262:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002514 <encode_TLM+0x3fc>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f98b 	bl	8000588 <__aeabi_f2d>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	ec44 3b10 	vmov	d0, r3, r4
 800227a:	f013 f97d 	bl	8015578 <round>
 800227e:	ec54 3b10 	vmov	r3, r4, d0
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	f7fe fc87 	bl	8000b98 <__aeabi_d2iz>
 800228a:	4603      	mov	r3, r0
 800228c:	b25a      	sxtb	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	725a      	strb	r2, [r3, #9]
    enc->orientation_quat[3] = (int8_t) round(dec->orientation_quat[3]*127);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	edd3 7a07 	vldr	s15, [r3, #28]
 8002298:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002514 <encode_TLM+0x3fc>
 800229c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a0:	ee17 0a90 	vmov	r0, s15
 80022a4:	f7fe f970 	bl	8000588 <__aeabi_f2d>
 80022a8:	4603      	mov	r3, r0
 80022aa:	460c      	mov	r4, r1
 80022ac:	ec44 3b10 	vmov	d0, r3, r4
 80022b0:	f013 f962 	bl	8015578 <round>
 80022b4:	ec54 3b10 	vmov	r3, r4, d0
 80022b8:	4618      	mov	r0, r3
 80022ba:	4621      	mov	r1, r4
 80022bc:	f7fe fc6c 	bl	8000b98 <__aeabi_d2iz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b25a      	sxtb	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	729a      	strb	r2, [r3, #10]

    for (int i = 0; i < 3; i++) {
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e01e      	b.n	800230c <encode_TLM+0x1f4>
        enc->acc[i] = dec->acc[i];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	3210      	adds	r2, #16
 80022d4:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3304      	adds	r3, #4
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	460a      	mov	r2, r1
 80022e4:	f8a3 2003 	strh.w	r2, [r3, #3]
        enc->gyro[i] = dec->gyro[i];
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3310      	adds	r3, #16
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3308      	adds	r3, #8
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	460a      	mov	r2, r1
 8002302:	f8a3 2001 	strh.w	r2, [r3, #1]
    for (int i = 0; i < 3; i++) {
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b02      	cmp	r3, #2
 8002310:	dddd      	ble.n	80022ce <encode_TLM+0x1b6>
    }

    enc->baro = (uint16_t) round(dec->baro - 50000); // 50000 Pa as zero point. Max ISA height: 5.5 km, max pressure: 115536 Pa
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002318:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002518 <encode_TLM+0x400>
 800231c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002320:	ee17 0a90 	vmov	r0, s15
 8002324:	f7fe f930 	bl	8000588 <__aeabi_f2d>
 8002328:	4603      	mov	r3, r0
 800232a:	460c      	mov	r4, r1
 800232c:	ec44 3b10 	vmov	d0, r3, r4
 8002330:	f013 f922 	bl	8015578 <round>
 8002334:	ec54 3b10 	vmov	r3, r4, d0
 8002338:	4618      	mov	r0, r3
 800233a:	4621      	mov	r1, r4
 800233c:	f7fe fc54 	bl	8000be8 <__aeabi_d2uiz>
 8002340:	4603      	mov	r3, r0
 8002342:	b29a      	uxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f8a3 2017 	strh.w	r2, [r3, #23]

    enc->temp = (uint8_t) round(dec->temp * 4);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002350:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002358:	ee17 0a90 	vmov	r0, s15
 800235c:	f7fe f914 	bl	8000588 <__aeabi_f2d>
 8002360:	4603      	mov	r3, r0
 8002362:	460c      	mov	r4, r1
 8002364:	ec44 3b10 	vmov	d0, r3, r4
 8002368:	f013 f906 	bl	8015578 <round>
 800236c:	ec54 3b10 	vmov	r3, r4, d0
 8002370:	4618      	mov	r0, r3
 8002372:	4621      	mov	r1, r4
 8002374:	f7fe fc38 	bl	8000be8 <__aeabi_d2uiz>
 8002378:	4603      	mov	r3, r0
 800237a:	b2da      	uxtb	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	765a      	strb	r2, [r3, #25]

    enc->altitude = (uint16_t) round((dec->altitude+48) * 16); // 0.0625m/LSB, -48 m as reference and max 2000 m.
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002386:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800251c <encode_TLM+0x404>
 800238a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800238e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002396:	ee17 0a90 	vmov	r0, s15
 800239a:	f7fe f8f5 	bl	8000588 <__aeabi_f2d>
 800239e:	4603      	mov	r3, r0
 80023a0:	460c      	mov	r4, r1
 80023a2:	ec44 3b10 	vmov	d0, r3, r4
 80023a6:	f013 f8e7 	bl	8015578 <round>
 80023aa:	ec54 3b10 	vmov	r3, r4, d0
 80023ae:	4618      	mov	r0, r3
 80023b0:	4621      	mov	r1, r4
 80023b2:	f7fe fc19 	bl	8000be8 <__aeabi_d2uiz>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	835a      	strh	r2, [r3, #26]

    enc->vertical_velocity = (uint8_t) MIN(MAX(round(dec->vertical_velocity + 80),0),255); // 0-255 maps to -80-175 m/s.
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023c4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002520 <encode_TLM+0x408>
 80023c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023cc:	ee17 0a90 	vmov	r0, s15
 80023d0:	f7fe f8da 	bl	8000588 <__aeabi_f2d>
 80023d4:	4603      	mov	r3, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	ec44 3b10 	vmov	d0, r3, r4
 80023dc:	f013 f8cc 	bl	8015578 <round>
 80023e0:	ec51 0b10 	vmov	r0, r1, d0
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	f7fe fbb4 	bl	8000b58 <__aeabi_dcmpgt>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d020      	beq.n	8002438 <encode_TLM+0x320>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023fc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002520 <encode_TLM+0x408>
 8002400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f8be 	bl	8000588 <__aeabi_f2d>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	ec44 3b10 	vmov	d0, r3, r4
 8002414:	f013 f8b0 	bl	8015578 <round>
 8002418:	ec51 0b10 	vmov	r0, r1, d0
 800241c:	2301      	movs	r3, #1
 800241e:	461c      	mov	r4, r3
 8002420:	a339      	add	r3, pc, #228	; (adr r3, 8002508 <encode_TLM+0x3f0>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fe fb79 	bl	8000b1c <__aeabi_dcmplt>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <encode_TLM+0x31c>
 8002430:	2300      	movs	r3, #0
 8002432:	461c      	mov	r4, r3
 8002434:	b2e3      	uxtb	r3, r4
 8002436:	e000      	b.n	800243a <encode_TLM+0x322>
 8002438:	2301      	movs	r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d037      	beq.n	80024ae <encode_TLM+0x396>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002444:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002520 <encode_TLM+0x408>
 8002448:	ee77 7a87 	vadd.f32	s15, s15, s14
 800244c:	ee17 0a90 	vmov	r0, s15
 8002450:	f7fe f89a 	bl	8000588 <__aeabi_f2d>
 8002454:	4603      	mov	r3, r0
 8002456:	460c      	mov	r4, r1
 8002458:	ec44 3b10 	vmov	d0, r3, r4
 800245c:	f013 f88c 	bl	8015578 <round>
 8002460:	ec51 0b10 	vmov	r0, r1, d0
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	f7fe fb74 	bl	8000b58 <__aeabi_dcmpgt>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d019      	beq.n	80024aa <encode_TLM+0x392>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800247c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002520 <encode_TLM+0x408>
 8002480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002484:	ee17 0a90 	vmov	r0, s15
 8002488:	f7fe f87e 	bl	8000588 <__aeabi_f2d>
 800248c:	4603      	mov	r3, r0
 800248e:	460c      	mov	r4, r1
 8002490:	ec44 3b10 	vmov	d0, r3, r4
 8002494:	f013 f870 	bl	8015578 <round>
 8002498:	ec54 3b10 	vmov	r3, r4, d0
 800249c:	4618      	mov	r0, r3
 800249e:	4621      	mov	r1, r4
 80024a0:	f7fe fba2 	bl	8000be8 <__aeabi_d2uiz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	e002      	b.n	80024b0 <encode_TLM+0x398>
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <encode_TLM+0x398>
 80024ae:	23ff      	movs	r3, #255	; 0xff
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	7713      	strb	r3, [r2, #28]

    if (dec->packet_type == 1) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d11c      	bne.n	80024f6 <encode_TLM+0x3de>
        enc->debug_ranging = (uint16_t) round(dec->ranging * 4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80024c2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	ee17 0a90 	vmov	r0, s15
 80024ce:	f7fe f85b 	bl	8000588 <__aeabi_f2d>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	ec44 3b10 	vmov	d0, r3, r4
 80024da:	f013 f84d 	bl	8015578 <round>
 80024de:	ec54 3b10 	vmov	r3, r4, d0
 80024e2:	4618      	mov	r0, r3
 80024e4:	4621      	mov	r1, r4
 80024e6:	f7fe fb7f 	bl	8000be8 <__aeabi_d2uiz>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f8a3 201d 	strh.w	r2, [r3, #29]
    }
    else {
        enc->debug_ranging = dec->debug;
    }
}
 80024f4:	e004      	b.n	8002500 <encode_TLM+0x3e8>
        enc->debug_ranging = dec->debug;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f8a3 201d 	strh.w	r2, [r3, #29]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bd90      	pop	{r4, r7, pc}
 8002508:	00000000 	.word	0x00000000
 800250c:	406fe000 	.word	0x406fe000
 8002510:	42c80000 	.word	0x42c80000
 8002514:	42fe0000 	.word	0x42fe0000
 8002518:	47435000 	.word	0x47435000
 800251c:	42400000 	.word	0x42400000
 8002520:	42a00000 	.word	0x42a00000

08002524 <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	ed87 0a05 	vstr	s0, [r7, #20]
 800252e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002532:	ed87 1a03 	vstr	s2, [r7, #12]
 8002536:	edc7 1a02 	vstr	s3, [r7, #8]
 800253a:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <Quaternion_set+0x2a>
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <Quaternion_set+0x4c>)
 8002544:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <Quaternion_set+0x50>)
 8002546:	211b      	movs	r1, #27
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <Quaternion_set+0x54>)
 800254a:	f010 fa0b 	bl	8012964 <__assert_func>
    output->w = w;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	60da      	str	r2, [r3, #12]
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	08017c54 	.word	0x08017c54
 8002574:	08018290 	.word	0x08018290
 8002578:	08017c64 	.word	0x08017c64

0800257c <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <Quaternion_setIdentity+0x1a>
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <Quaternion_setIdentity+0x38>)
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <Quaternion_setIdentity+0x3c>)
 800258e:	2124      	movs	r1, #36	; 0x24
 8002590:	480a      	ldr	r0, [pc, #40]	; (80025bc <Quaternion_setIdentity+0x40>)
 8002592:	f010 f9e7 	bl	8012964 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	eddf 1a09 	vldr	s3, [pc, #36]	; 80025c0 <Quaternion_setIdentity+0x44>
 800259c:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80025c0 <Quaternion_setIdentity+0x44>
 80025a0:	eddf 0a07 	vldr	s1, [pc, #28]	; 80025c0 <Quaternion_setIdentity+0x44>
 80025a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025a8:	f7ff ffbc 	bl	8002524 <Quaternion_set>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08017c80 	.word	0x08017c80
 80025b8:	080182a0 	.word	0x080182a0
 80025bc:	08017c64 	.word	0x08017c64
 80025c0:	00000000 	.word	0x00000000

080025c4 <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	ed93 6a03 	vldr	s12, [r3, #12]
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	eef0 1a46 	vmov.f32	s3, s12
 80025ec:	eeb0 1a66 	vmov.f32	s2, s13
 80025f0:	eef0 0a47 	vmov.f32	s1, s14
 80025f4:	eeb0 0a67 	vmov.f32	s0, s15
 80025f8:	f7ff ff94 	bl	8002524 <Quaternion_set>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	0000      	movs	r0, r0
	...

08002608 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <Quaternion_toEulerZYX+0x1c>
 8002618:	4b87      	ldr	r3, [pc, #540]	; (8002838 <Quaternion_toEulerZYX+0x230>)
 800261a:	4a88      	ldr	r2, [pc, #544]	; (800283c <Quaternion_toEulerZYX+0x234>)
 800261c:	2185      	movs	r1, #133	; 0x85
 800261e:	4888      	ldr	r0, [pc, #544]	; (8002840 <Quaternion_toEulerZYX+0x238>)
 8002620:	f010 f9a0 	bl	8012964 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	ed93 7a00 	vldr	s14, [r3]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	edd3 6a02 	vldr	s13, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002648:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264c:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	ed93 7a01 	vldr	s14, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	edd3 7a01 	vldr	s15, [r3, #4]
 800265c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 6a02 	vldr	s13, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	edd3 7a02 	vldr	s15, [r3, #8]
 800266c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	ee17 0a90 	vmov	r0, s15
 8002678:	f7fd ff86 	bl	8000588 <__aeabi_f2d>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	f7fd fe24 	bl	80002cc <__adddf3>
 8002684:	4603      	mov	r3, r0
 8002686:	460c      	mov	r4, r1
 8002688:	461a      	mov	r2, r3
 800268a:	4623      	mov	r3, r4
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	496c      	ldr	r1, [pc, #432]	; (8002844 <Quaternion_toEulerZYX+0x23c>)
 8002692:	f7fd fe19 	bl	80002c8 <__aeabi_dsub>
 8002696:	4603      	mov	r3, r0
 8002698:	460c      	mov	r4, r1
 800269a:	4618      	mov	r0, r3
 800269c:	4621      	mov	r1, r4
 800269e:	f7fe fac3 	bl	8000c28 <__aeabi_d2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 80026a6:	69f8      	ldr	r0, [r7, #28]
 80026a8:	f7fd ff6e 	bl	8000588 <__aeabi_f2d>
 80026ac:	4604      	mov	r4, r0
 80026ae:	460d      	mov	r5, r1
 80026b0:	69b8      	ldr	r0, [r7, #24]
 80026b2:	f7fd ff69 	bl	8000588 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	ec43 2b11 	vmov	d1, r2, r3
 80026be:	ec45 4b10 	vmov	d0, r4, r5
 80026c2:	f013 f845 	bl	8015750 <atan2>
 80026c6:	ec54 3b10 	vmov	r3, r4, d0
 80026ca:	4618      	mov	r0, r3
 80026cc:	4621      	mov	r1, r4
 80026ce:	f7fe faab 	bl	8000c28 <__aeabi_d2f>
 80026d2:	4602      	mov	r2, r0
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80026e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002700:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 8002704:	edd7 7a05 	vldr	s15, [r7, #20]
 8002708:	eef0 7ae7 	vabs.f32	s15, s15
 800270c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	db15      	blt.n	8002746 <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7fd ff34 	bl	8000588 <__aeabi_f2d>
 8002720:	4603      	mov	r3, r0
 8002722:	460c      	mov	r4, r1
 8002724:	ec44 3b11 	vmov	d1, r3, r4
 8002728:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8002830 <Quaternion_toEulerZYX+0x228>
 800272c:	f010 ffdc 	bl	80136e8 <copysign>
 8002730:	ec52 1b10 	vmov	r1, r2, d0
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	1d1c      	adds	r4, r3, #4
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	f7fe fa74 	bl	8000c28 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	e012      	b.n	800276c <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7fd ff1e 	bl	8000588 <__aeabi_f2d>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	ec44 3b10 	vmov	d0, r3, r4
 8002754:	f012 ffa4 	bl	80156a0 <asin>
 8002758:	ec52 1b10 	vmov	r1, r2, d0
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	1d1c      	adds	r4, r3, #4
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	f7fe fa60 	bl	8000c28 <__aeabi_d2f>
 8002768:	4603      	mov	r3, r0
 800276a:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	ed93 7a00 	vldr	s14, [r3]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	edd3 7a03 	vldr	s15, [r3, #12]
 8002778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	edd3 7a02 	vldr	s15, [r3, #8]
 8002788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002790:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002794:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	ed93 7a02 	vldr	s14, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027bc:	ee17 0a90 	vmov	r0, s15
 80027c0:	f7fd fee2 	bl	8000588 <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	f7fd fd80 	bl	80002cc <__adddf3>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	f04f 0000 	mov.w	r0, #0
 80027d8:	491a      	ldr	r1, [pc, #104]	; (8002844 <Quaternion_toEulerZYX+0x23c>)
 80027da:	f7fd fd75 	bl	80002c8 <__aeabi_dsub>
 80027de:	4603      	mov	r3, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	4618      	mov	r0, r3
 80027e4:	4621      	mov	r1, r4
 80027e6:	f7fe fa1f 	bl	8000c28 <__aeabi_d2f>
 80027ea:	4603      	mov	r3, r0
 80027ec:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 80027ee:	6938      	ldr	r0, [r7, #16]
 80027f0:	f7fd feca 	bl	8000588 <__aeabi_f2d>
 80027f4:	4604      	mov	r4, r0
 80027f6:	460d      	mov	r5, r1
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7fd fec5 	bl	8000588 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b11 	vmov	d1, r2, r3
 8002806:	ec45 4b10 	vmov	d0, r4, r5
 800280a:	f012 ffa1 	bl	8015750 <atan2>
 800280e:	ec52 1b10 	vmov	r1, r2, d0
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f103 0408 	add.w	r4, r3, #8
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	f7fe fa04 	bl	8000c28 <__aeabi_d2f>
 8002820:	4603      	mov	r3, r0
 8002822:	6023      	str	r3, [r4, #0]
}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bdb0      	pop	{r4, r5, r7, pc}
 800282c:	f3af 8000 	nop.w
 8002830:	54442d18 	.word	0x54442d18
 8002834:	3ff921fb 	.word	0x3ff921fb
 8002838:	08017c54 	.word	0x08017c54
 800283c:	080182b8 	.word	0x080182b8
 8002840:	08017c64 	.word	0x08017c64
 8002844:	3ff00000 	.word	0x3ff00000

08002848 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <Quaternion_conjugate+0x1c>
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <Quaternion_conjugate+0x5c>)
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <Quaternion_conjugate+0x60>)
 800285c:	21b7      	movs	r1, #183	; 0xb7
 800285e:	4813      	ldr	r0, [pc, #76]	; (80028ac <Quaternion_conjugate+0x64>)
 8002860:	f010 f880 	bl	8012964 <__assert_func>
    output->w = q->w;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002872:	eef1 7a67 	vneg.f32	s15, s15
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002882:	eef1 7a67 	vneg.f32	s15, s15
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002892:	eef1 7a67 	vneg.f32	s15, s15
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	08017c54 	.word	0x08017c54
 80028a8:	080182d0 	.word	0x080182d0
 80028ac:	08017c64 	.word	0x08017c64

080028b0 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <Quaternion_multiply+0x1e>
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <Quaternion_multiply+0x174>)
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <Quaternion_multiply+0x178>)
 80028c6:	21d2      	movs	r1, #210	; 0xd2
 80028c8:	4858      	ldr	r0, [pc, #352]	; (8002a2c <Quaternion_multiply+0x17c>)
 80028ca:	f010 f84b 	bl	8012964 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	ed93 7a00 	vldr	s14, [r3]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	edd3 6a03 	vldr	s13, [r3, #12]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291a:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	ed93 7a01 	vldr	s14, [r3, #4]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	edd3 6a00 	vldr	s13, [r3]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	edd3 7a01 	vldr	s15, [r3, #4]
 800293a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	edd3 6a02 	vldr	s13, [r3, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	edd3 7a03 	vldr	s15, [r3, #12]
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	edd3 6a03 	vldr	s13, [r3, #12]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296a:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	edd3 7a02 	vldr	s15, [r3, #8]
 800297a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	edd3 6a01 	vldr	s13, [r3, #4]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	edd3 7a03 	vldr	s15, [r3, #12]
 800298a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	edd3 6a02 	vldr	s13, [r3, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	ed93 7a00 	vldr	s14, [r3]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80029da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	461c      	mov	r4, r3
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002a1c:	bf00      	nop
 8002a1e:	3724      	adds	r7, #36	; 0x24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	08017c54 	.word	0x08017c54
 8002a28:	080182e8 	.word	0x080182e8
 8002a2c:	08017c64 	.word	0x08017c64

08002a30 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b092      	sub	sp, #72	; 0x48
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <Quaternion_rotate+0x1e>
 8002a42:	4bbc      	ldr	r3, [pc, #752]	; (8002d34 <Quaternion_rotate+0x304>)
 8002a44:	4abc      	ldr	r2, [pc, #752]	; (8002d38 <Quaternion_rotate+0x308>)
 8002a46:	21e6      	movs	r1, #230	; 0xe6
 8002a48:	48bc      	ldr	r0, [pc, #752]	; (8002d3c <Quaternion_rotate+0x30c>)
 8002a4a:	f00f ff8b 	bl	8012964 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	ed93 7a00 	vldr	s14, [r3]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	ed93 7a00 	vldr	s14, [r3]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	ed93 7a00 	vldr	s14, [r3]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	ed93 7a00 	vldr	s14, [r3]
 8002b1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b28:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3308      	adds	r3, #8
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3304      	adds	r3, #4
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b50:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	edd3 6a00 	vldr	s13, [r3]
 8002b5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002b62:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002b66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b6a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3304      	adds	r3, #4
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b82:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3308      	adds	r3, #8
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b92:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	edd3 6a00 	vldr	s13, [r3]
 8002b9c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	edd3 6a00 	vldr	s13, [r3]
 8002bae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002bba:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002bbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002bc2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	edd3 6a00 	vldr	s13, [r3]
 8002bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002be8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002bfc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c00:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3304      	adds	r3, #4
 8002c16:	edd3 6a00 	vldr	s13, [r3]
 8002c1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	edd3 6a00 	vldr	s13, [r3]
 8002c2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c36:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002c3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3308      	adds	r3, #8
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3304      	adds	r3, #4
 8002c56:	edd3 6a00 	vldr	s13, [r3]
 8002c5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c62:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002c66:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002c6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c6e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	3304      	adds	r3, #4
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3308      	adds	r3, #8
 8002c98:	edd3 6a00 	vldr	s13, [r3]
 8002c9c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002ca8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002cac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002cba:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	edd3 6a00 	vldr	s13, [r3]
 8002cc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002cd6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3308      	adds	r3, #8
 8002cee:	edd3 6a00 	vldr	s13, [r3]
 8002cf2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3308      	adds	r3, #8
 8002d02:	edd3 6a00 	vldr	s13, [r3]
 8002d06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002d12:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3308      	adds	r3, #8
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	601a      	str	r2, [r3, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	3748      	adds	r7, #72	; 0x48
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	08017c54 	.word	0x08017c54
 8002d38:	080182fc 	.word	0x080182fc
 8002d3c:	08017c64 	.word	0x08017c64

08002d40 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b08b      	sub	sp, #44	; 0x2c
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d4c:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d80:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3308      	adds	r3, #8
 8002d88:	ed93 7a00 	vldr	s14, [r3]
 8002d8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9c:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8002da0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002da4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dac:	edd7 6a08 	vldr	s13, [r7, #32]
 8002db0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS*QUATERNION_EPS) {
 8002dd0:	69b8      	ldr	r0, [r7, #24]
 8002dd2:	f7fd fbd9 	bl	8000588 <__aeabi_f2d>
 8002dd6:	a336      	add	r3, pc, #216	; (adr r3, 8002eb0 <Quaternion_fromRate+0x170>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd febc 	bl	8000b58 <__aeabi_dcmpgt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d05c      	beq.n	8002ea0 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 8002de6:	69b8      	ldr	r0, [r7, #24]
 8002de8:	f7fd fbce 	bl	8000588 <__aeabi_f2d>
 8002dec:	4603      	mov	r3, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	ec44 3b10 	vmov	d0, r3, r4
 8002df4:	f012 fcae 	bl	8015754 <sqrt>
 8002df8:	ec54 3b10 	vmov	r3, r4, d0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4621      	mov	r1, r4
 8002e00:	f7fd ff12 	bl	8000c28 <__aeabi_d2f>
 8002e04:	4603      	mov	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 8002e08:	69b8      	ldr	r0, [r7, #24]
 8002e0a:	f7fd fbbd 	bl	8000588 <__aeabi_f2d>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460c      	mov	r4, r1
 8002e12:	ec44 3b10 	vmov	d0, r3, r4
 8002e16:	f012 fbfb 	bl	8015610 <sin>
 8002e1a:	ec56 5b10 	vmov	r5, r6, d0
 8002e1e:	69b8      	ldr	r0, [r7, #24]
 8002e20:	f7fd fbb2 	bl	8000588 <__aeabi_f2d>
 8002e24:	4603      	mov	r3, r0
 8002e26:	460c      	mov	r4, r1
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	4631      	mov	r1, r6
 8002e30:	f7fd fd2c 	bl	800088c <__aeabi_ddiv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	f7fd fef4 	bl	8000c28 <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 8002e44:	69b8      	ldr	r0, [r7, #24]
 8002e46:	f7fd fb9f 	bl	8000588 <__aeabi_f2d>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	ec44 3b10 	vmov	d0, r3, r4
 8002e52:	f012 fb4d 	bl	80154f0 <cos>
 8002e56:	ec54 3b10 	vmov	r3, r4, d0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	f7fd fee3 	bl	8000c28 <__aeabi_d2f>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8002e68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8002e7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8002e8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8002e9e:	e002      	b.n	8002ea6 <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fb6b 	bl	800257c <Quaternion_setIdentity>
}
 8002ea6:	bf00      	nop
 8002ea8:	372c      	adds	r7, #44	; 0x2c
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	812dea11 	.word	0x812dea11
 8002eb4:	3d719799 	.word	0x3d719799

08002eb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ec8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <vApplicationGetIdleTaskMemory+0x30>)
 8002ece:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000624 	.word	0x20000624
 8002ee8:	20000678 	.word	0x20000678
 8002eec:	00000000 	.word	0x00000000

08002ef0 <get_battery_voltage>:
void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB);
void jingleBell();
void rick();
void ksp();

float get_battery_voltage() {
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002ef6:	4816      	ldr	r0, [pc, #88]	; (8002f50 <get_battery_voltage+0x60>)
 8002ef8:	f002 fdbc 	bl	8005a74 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002efc:	2164      	movs	r1, #100	; 0x64
 8002efe:	4814      	ldr	r0, [pc, #80]	; (8002f50 <get_battery_voltage+0x60>)
 8002f00:	f002 fe7e 	bl	8005c00 <HAL_ADC_PollForConversion>
    float voltage = ((float) HAL_ADC_GetValue(&hadc1)) * VBAT_CALIBRATION;
 8002f04:	4812      	ldr	r0, [pc, #72]	; (8002f50 <get_battery_voltage+0x60>)
 8002f06:	f002 feff 	bl	8005d08 <HAL_ADC_GetValue>
 8002f0a:	ee07 0a90 	vmov	s15, r0
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	ee17 0a90 	vmov	r0, s15
 8002f16:	f7fd fb37 	bl	8000588 <__aeabi_f2d>
 8002f1a:	a30b      	add	r3, pc, #44	; (adr r3, 8002f48 <get_battery_voltage+0x58>)
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f7fd fb8a 	bl	8000638 <__aeabi_dmul>
 8002f24:	4603      	mov	r3, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4618      	mov	r0, r3
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	f7fd fe7c 	bl	8000c28 <__aeabi_d2f>
 8002f30:	4603      	mov	r3, r0
 8002f32:	607b      	str	r3, [r7, #4]
    return voltage;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	ee07 3a90 	vmov	s15, r3
}
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	f3af 8000 	nop.w
 8002f48:	f34eff30 	.word	0xf34eff30
 8002f4c:	3f72b5b7 	.word	0x3f72b5b7
 8002f50:	200048b0 	.word	0x200048b0

08002f54 <is_armed>:

uint8_t is_armed() {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(RBF_GPIO_Port, RBF_Pin);// High corresponds to disconected = armed
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4803      	ldr	r0, [pc, #12]	; (8002f68 <is_armed+0x14>)
 8002f5c:	f003 fef2 	bl	8006d44 <HAL_GPIO_ReadPin>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020000 	.word	0x40020000

08002f6c <is_armed_debounce>:

uint8_t is_armed_debounce() {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	e00c      	b.n	8002f92 <is_armed_debounce+0x26>
        if (!is_armed()) {
 8002f78:	f7ff ffec 	bl	8002f54 <is_armed>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <is_armed_debounce+0x1a>
            return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e009      	b.n	8002f9a <is_armed_debounce+0x2e>
        }
        osDelay(1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f00c fd7a 	bl	800fa80 <osDelay>
    for (int i = 0; i < 20; i++) {
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b13      	cmp	r3, #19
 8002f96:	ddef      	ble.n	8002f78 <is_armed_debounce+0xc>
    }
    return 1;
 8002f98:	2301      	movs	r3, #1
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <is_soft_enabled>:

uint8_t is_soft_enabled() {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ARM_GPIO_Port, ARM_Pin);
 8002fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <is_soft_enabled+0x14>)
 8002fae:	f003 fec9 	bl	8006d44 <HAL_GPIO_ReadPin>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40020400 	.word	0x40020400

08002fbc <is_breakwire_connected>:

uint8_t is_breakwire_connected() {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
    return !HAL_GPIO_ReadPin(BREAKWIRE_GPIO_Port, BREAKWIRE_Pin);
 8002fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <is_breakwire_connected+0x20>)
 8002fc6:	f003 febd 	bl	8006d44 <HAL_GPIO_ReadPin>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40020400 	.word	0x40020400

08002fe0 <is_breakwire_broken_debounce>:

uint8_t is_breakwire_broken_debounce() {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	e00c      	b.n	8003006 <is_breakwire_broken_debounce+0x26>
        if (is_breakwire_connected()) {
 8002fec:	f7ff ffe6 	bl	8002fbc <is_breakwire_connected>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <is_breakwire_broken_debounce+0x1a>
            return 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e009      	b.n	800300e <is_breakwire_broken_debounce+0x2e>
        }
        osDelay(1);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f00c fd40 	bl	800fa80 <osDelay>
    for (int i = 0; i < 20; i++) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3301      	adds	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b13      	cmp	r3, #19
 800300a:	ddef      	ble.n	8002fec <is_breakwire_broken_debounce+0xc>
    }
    return 1;
 800300c:	2301      	movs	r3, #1
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <buzzer_beep>:

void buzzer_beep(uint8_t delayval) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
    buzzer_setting = REPEAT_BEEP;
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <buzzer_beep+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
    buzzer_delay = delayval * 20;
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <buzzer_beep+0x50>)
 8003038:	801a      	strh	r2, [r3, #0]

    if (osMessageAvailableSpace(BuzzerQueueHandle)) {
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <buzzer_beep+0x54>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f00c fe10 	bl	800fc64 <osMessageAvailableSpace>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <buzzer_beep+0x42>
        osMessagePut(BuzzerQueueHandle, buzzer_delay, 100);
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <buzzer_beep+0x54>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <buzzer_beep+0x50>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	2264      	movs	r2, #100	; 0x64
 8003054:	4619      	mov	r1, r3
 8003056:	f00c fd51 	bl	800fafc <osMessagePut>
    }
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000001 	.word	0x20000001
 8003068:	20000002 	.word	0x20000002
 800306c:	200048f8 	.word	0x200048f8

08003070 <buzzer_clear_queue>:

void buzzer_clear_queue() {
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
    xQueueReset(BuzzerQueueHandle);
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <buzzer_clear_queue+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f00c feb2 	bl	800fde4 <xQueueGenericReset>
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200048f8 	.word	0x200048f8

08003088 <pulse_recording_button>:

void pulse_recording_button() {
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_SET);
 800308c:	2201      	movs	r2, #1
 800308e:	2120      	movs	r1, #32
 8003090:	4806      	ldr	r0, [pc, #24]	; (80030ac <pulse_recording_button+0x24>)
 8003092:	f003 fe6f 	bl	8006d74 <HAL_GPIO_WritePin>
    osDelay(300);
 8003096:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800309a:	f00c fcf1 	bl	800fa80 <osDelay>
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	2120      	movs	r1, #32
 80030a2:	4802      	ldr	r0, [pc, #8]	; (80030ac <pulse_recording_button+0x24>)
 80030a4:	f003 fe66 	bl	8006d74 <HAL_GPIO_WritePin>
}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40020800 	.word	0x40020800

080030b0 <enable_recording>:

void enable_recording() {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
    if (!is_camera_recording) {
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <enable_recording+0x1c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <enable_recording+0x16>
        pulse_recording_button();
 80030bc:	f7ff ffe4 	bl	8003088 <pulse_recording_button>
        is_camera_recording = 1;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <enable_recording+0x1c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
    }
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000880 	.word	0x20000880

080030d0 <enable_camera>:
        pulse_recording_button();
        is_camera_recording = 0;
    }
}

void enable_camera() {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_SET);
 80030d4:	2201      	movs	r2, #1
 80030d6:	2104      	movs	r1, #4
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <enable_camera+0x20>)
 80030da:	f003 fe4b 	bl	8006d74 <HAL_GPIO_WritePin>
    is_camera_recording = 0;
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <enable_camera+0x24>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
    is_camera_on = 1;
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <enable_camera+0x28>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40020000 	.word	0x40020000
 80030f4:	20000880 	.word	0x20000880
 80030f8:	20000881 	.word	0x20000881

080030fc <disable_camera>:

void disable_camera() {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
    if (is_camera_recording) {
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <disable_camera+0x34>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <disable_camera+0x1e>
        pulse_recording_button();
 8003108:	f7ff ffbe 	bl	8003088 <pulse_recording_button>
        osDelay(1000);
 800310c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003110:	f00c fcb6 	bl	800fa80 <osDelay>
        is_camera_recording = 0;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <disable_camera+0x34>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
    }
    is_camera_on = 0;
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <disable_camera+0x38>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_RESET);
 8003120:	2200      	movs	r2, #0
 8003122:	2104      	movs	r1, #4
 8003124:	4804      	ldr	r0, [pc, #16]	; (8003138 <disable_camera+0x3c>)
 8003126:	f003 fe25 	bl	8006d74 <HAL_GPIO_WritePin>
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000880 	.word	0x20000880
 8003134:	20000881 	.word	0x20000881
 8003138:	40020000 	.word	0x40020000

0800313c <restart_camera_with_recording>:

void restart_camera_with_recording() {
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
    disable_camera();
 8003140:	f7ff ffdc 	bl	80030fc <disable_camera>
    osDelay(300);
 8003144:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003148:	f00c fc9a 	bl	800fa80 <osDelay>
    enable_camera();
 800314c:	f7ff ffc0 	bl	80030d0 <enable_camera>
    osDelay(10000);
 8003150:	f242 7010 	movw	r0, #10000	; 0x2710
 8003154:	f00c fc94 	bl	800fa80 <osDelay>
    enable_recording();
 8003158:	f7ff ffaa 	bl	80030b0 <enable_recording>
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <set_status_led>:

void set_status_led(uint8_t status_state) {
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
    // TODO
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <is_vote_asserted>:

uint8_t is_vote_asserted() {
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
    // Todo
    return 0;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <loraOrientation>:
        }

    }
}

void loraOrientation(uint8_t isTx) {
 8003188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8003190:	af0c      	add	r7, sp, #48	; 0x30
 8003192:	4602      	mov	r2, r0
 8003194:	f107 0317 	add.w	r3, r7, #23
 8003198:	701a      	strb	r2, [r3, #0]

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 800319a:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 800319e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a2:	4a9a      	ldr	r2, [pc, #616]	; (800340c <loraOrientation+0x284>)
 80031a4:	499a      	ldr	r1, [pc, #616]	; (8003410 <loraOrientation+0x288>)
 80031a6:	f7fe fd2f 	bl	8001c08 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 80031aa:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80031ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b2:	4998      	ldr	r1, [pc, #608]	; (8003414 <loraOrientation+0x28c>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fd87 	bl	8001cc8 <sxSetDio1Pin>

    float data[4];

    char printBuffer[128];

    if (isTx) {
 80031ba:	f107 0317 	add.w	r3, r7, #23
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8133 	beq.w	800342c <loraOrientation+0x2a4>
        //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
        SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 80031c6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80031ca:	22e0      	movs	r2, #224	; 0xe0
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fdce 	bl	8001d70 <SetTxParams>
        HAL_Delay(3);
 80031d4:	2003      	movs	r0, #3
 80031d6:	f002 fbe7 	bl	80059a8 <HAL_Delay>

        lsm6dso imu;
        uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 80031da:	f107 0018 	add.w	r0, r7, #24
 80031de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e2:	4a8d      	ldr	r2, [pc, #564]	; (8003418 <loraOrientation+0x290>)
 80031e4:	498d      	ldr	r1, [pc, #564]	; (800341c <loraOrientation+0x294>)
 80031e6:	f7fd ff6f 	bl	80010c8 <LSM_init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
        SPI2_NSS_Pin);

        Orientation ori;
        orientation_init(&ori);
 80031f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fd98 	bl	8004d2a <orientation_init>
        uint32_t counter = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

        data[0] = ori.orientationQuat.w;
 8003200:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        data[1] = ori.orientationQuat.v[0];
 800320a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
        data[2] = ori.orientationQuat.v[1];
 8003214:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        data[3] = ori.orientationQuat.v[2];
 800321e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 8003228:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800322c:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003230:	2310      	movs	r3, #16
 8003232:	2100      	movs	r1, #0
 8003234:	f7fe fe15 	bl	8001e62 <WriteBuffer>
        HAL_Delay(1);
 8003238:	2001      	movs	r0, #1
 800323a:	f002 fbb5 	bl	80059a8 <HAL_Delay>

        SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 800323e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003242:	2300      	movs	r3, #0
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	2201      	movs	r2, #1
 800324a:	2101      	movs	r1, #1
 800324c:	f7fe fe72 	bl	8001f34 <SetDioIrqParams>

        HAL_Delay(3);
 8003250:	2003      	movs	r0, #3
 8003252:	f002 fba9 	bl	80059a8 <HAL_Delay>

        uint32_t lasttime = HAL_GetTick();
 8003256:	f002 fb9b 	bl	8005990 <HAL_GetTick>
 800325a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        uint32_t nowtime = HAL_GetTick();
 800325e:	f002 fb97 	bl	8005990 <HAL_GetTick>
 8003262:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        float dt = 0;
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        changeLed(100, 100, 100);
 800326e:	2264      	movs	r2, #100	; 0x64
 8003270:	2164      	movs	r1, #100	; 0x64
 8003272:	2064      	movs	r0, #100	; 0x64
 8003274:	f001 f820 	bl	80042b8 <changeLed>

        while (1) {

            LSM_pollsensors(&imu);
 8003278:	f107 0318 	add.w	r3, r7, #24
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd ff9d 	bl	80011bc <LSM_pollsensors>
            changeLed(0, 0, 100);
 8003282:	2264      	movs	r2, #100	; 0x64
 8003284:	2100      	movs	r1, #0
 8003286:	2000      	movs	r0, #0
 8003288:	f001 f816 	bl	80042b8 <changeLed>
            nowtime = HAL_GetTick();
 800328c:	f002 fb80 	bl	8005990 <HAL_GetTick>
 8003290:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
            dt = (nowtime - lasttime) / 1000.0;
 8003294:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8003298:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f950 	bl	8000544 <__aeabi_ui2d>
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <loraOrientation+0x298>)
 80032aa:	f7fd faef 	bl	800088c <__aeabi_ddiv>
 80032ae:	4603      	mov	r3, r0
 80032b0:	460c      	mov	r4, r1
 80032b2:	4618      	mov	r0, r3
 80032b4:	4621      	mov	r1, r4
 80032b6:	f7fd fcb7 	bl	8000c28 <__aeabi_d2f>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            lasttime = nowtime;
 80032c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

            orientation_setGyro(&ori, imu.gyroRPS);
 80032c8:	f107 0318 	add.w	r3, r7, #24
 80032cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80032d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fd55 	bl	8004d86 <orientation_setGyro>
            orientation_setAcc(&ori, imu.accMPS);
 80032dc:	f107 0318 	add.w	r3, r7, #24
 80032e0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80032e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fd62 	bl	8004db4 <orientation_setAcc>
            orientation_update(&ori, dt, 1);
 80032f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032f4:	2101      	movs	r1, #1
 80032f6:	ed97 0a7d 	vldr	s0, [r7, #500]	; 0x1f4
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fd74 	bl	8004de8 <orientation_update>

            counter++;
 8003300:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003304:	3301      	adds	r3, #1
 8003306:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

            if (counter % 20 == 0) {
 800330a:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800330e:	4b45      	ldr	r3, [pc, #276]	; (8003424 <loraOrientation+0x29c>)
 8003310:	fba3 2301 	umull	r2, r3, r3, r1
 8003314:	091a      	lsrs	r2, r3, #4
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	1aca      	subs	r2, r1, r3
 8003320:	2a00      	cmp	r2, #0
 8003322:	d16e      	bne.n	8003402 <loraOrientation+0x27a>
                data[0] = ori.orientationQuat.w;
 8003324:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                data[1] = ori.orientationQuat.v[0];
 800332e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
                data[2] = ori.orientationQuat.v[1];
 8003338:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
                data[3] = ori.orientationQuat.v[2];
 8003342:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 800334c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd f919 	bl	8000588 <__aeabi_f2d>
 8003356:	4682      	mov	sl, r0
 8003358:	468b      	mov	fp, r1
                        data[1], data[2], data[3]);
 800335a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f912 	bl	8000588 <__aeabi_f2d>
 8003364:	4604      	mov	r4, r0
 8003366:	460d      	mov	r5, r1
                        data[1], data[2], data[3]);
 8003368:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd f90b 	bl	8000588 <__aeabi_f2d>
 8003372:	4680      	mov	r8, r0
 8003374:	4689      	mov	r9, r1
                        data[1], data[2], data[3]);
 8003376:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f904 	bl	8000588 <__aeabi_f2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8003388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800338c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003390:	e9cd 4500 	strd	r4, r5, [sp]
 8003394:	4652      	mov	r2, sl
 8003396:	465b      	mov	r3, fp
 8003398:	4923      	ldr	r1, [pc, #140]	; (8003428 <loraOrientation+0x2a0>)
 800339a:	f010 f9f9 	bl	8013790 <siprintf>
                //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
                CDC_Transmit_FS((uint8_t*) printBuffer,
                        MIN(strlen(printBuffer), 128));
 800339e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fc ff34 	bl	8000210 <strlen>
 80033a8:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 80033aa:	2b7f      	cmp	r3, #127	; 0x7f
 80033ac:	d807      	bhi.n	80033be <loraOrientation+0x236>
                        MIN(strlen(printBuffer), 128));
 80033ae:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fc ff2c 	bl	8000210 <strlen>
 80033b8:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	e000      	b.n	80033c0 <loraOrientation+0x238>
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f00e fe2a 	bl	8012020 <CDC_Transmit_FS>

                WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 80033cc:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80033d0:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 80033d4:	2310      	movs	r3, #16
 80033d6:	2100      	movs	r1, #0
 80033d8:	f7fe fd43 	bl	8001e62 <WriteBuffer>
                HAL_Delay(1);
 80033dc:	2001      	movs	r0, #1
 80033de:	f002 fae3 	bl	80059a8 <HAL_Delay>
                ClrIrqStatus(&radio, 1); // clear txdone irq
 80033e2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe fddd 	bl	8001fa8 <ClrIrqStatus>
                HAL_Delay(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f002 fada 	bl	80059a8 <HAL_Delay>
                SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 80033f4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80033f8:	2232      	movs	r2, #50	; 0x32
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe fdee 	bl	8001fde <SetTx>
            }

            HAL_Delay(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f002 fad0 	bl	80059a8 <HAL_Delay>
            LSM_pollsensors(&imu);
 8003408:	e736      	b.n	8003278 <loraOrientation+0xf0>
 800340a:	bf00      	nop
 800340c:	40020000 	.word	0x40020000
 8003410:	20004858 	.word	0x20004858
 8003414:	40020800 	.word	0x40020800
 8003418:	40020400 	.word	0x40020400
 800341c:	200046dc 	.word	0x200046dc
 8003420:	408f4000 	.word	0x408f4000
 8003424:	cccccccd 	.word	0xcccccccd
 8003428:	08017ca8 	.word	0x08017ca8

        }
    } else {
        // rx mode
        SetDioIrqParams(&radio, 1 << 1, 1 << 1, 0, 0); //rxdone on gpio1
 800342c:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003430:	2300      	movs	r3, #0
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2300      	movs	r3, #0
 8003436:	2202      	movs	r2, #2
 8003438:	2102      	movs	r1, #2
 800343a:	f7fe fd7b 	bl	8001f34 <SetDioIrqParams>
        HAL_Delay(1);
 800343e:	2001      	movs	r0, #1
 8003440:	f002 fab2 	bl	80059a8 <HAL_Delay>

        uint8_t rxStartBufferPointer = 1;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff

        changeLed(0, 100, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2164      	movs	r1, #100	; 0x64
 800344e:	2000      	movs	r0, #0
 8003450:	f000 ff32 	bl	80042b8 <changeLed>
        while (1) {

            //SetRx(0x00, 0xffff); // continous rx
            SetRx(&radio, 0x00, 0); // No timeout
 8003454:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe fddd 	bl	800201c <SetRx>
            //SetRx(0x02, 200); // 200 ms timeout
            HAL_Delay(1);
 8003462:	2001      	movs	r0, #1
 8003464:	f002 faa0 	bl	80059a8 <HAL_Delay>
            // wait for reception:
            while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8003468:	bf00      	nop
 800346a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346e:	4837      	ldr	r0, [pc, #220]	; (800354c <loraOrientation+0x3c4>)
 8003470:	f003 fc68 	bl	8006d44 <HAL_GPIO_ReadPin>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f7      	beq.n	800346a <loraOrientation+0x2e2>
            }

            GetPacketStatusLora(&radio);
 800347a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fdeb 	bl	800205a <GetPacketStatusLora>
            ClrIrqStatus(&radio, 1 << 1); // clear rxdone Irq
 8003484:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003488:	2102      	movs	r1, #2
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fd8c 	bl	8001fa8 <ClrIrqStatus>
            HAL_Delay(1);
 8003490:	2001      	movs	r0, #1
 8003492:	f002 fa89 	bl	80059a8 <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(data),
 8003496:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800349a:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 800349e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 80034a2:	2210      	movs	r2, #16
 80034a4:	f7fe fd11 	bl	8001eca <ReadBuffer>
                    (uint8_t*) data);
            snprintf(printBuffer, 128,
                    "Quaternion: %f, %f, %f, %f, RSSI: %f, SNR: %f\r\n",
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
            snprintf(printBuffer, 128,
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd f86b 	bl	8000588 <__aeabi_f2d>
 80034b2:	4604      	mov	r4, r0
 80034b4:	460d      	mov	r5, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034b6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
            snprintf(printBuffer, 128,
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f864 	bl	8000588 <__aeabi_f2d>
 80034c0:	4680      	mov	r8, r0
 80034c2:	4689      	mov	r9, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034c4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
            snprintf(printBuffer, 128,
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f85d 	bl	8000588 <__aeabi_f2d>
 80034ce:	4682      	mov	sl, r0
 80034d0:	468b      	mov	fp, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
            snprintf(printBuffer, 128,
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd f856 	bl	8000588 <__aeabi_f2d>
 80034dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
            snprintf(printBuffer, 128,
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd f84f 	bl	8000588 <__aeabi_f2d>
 80034ea:	e9c7 0100 	strd	r0, r1, [r7]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80034ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
            snprintf(printBuffer, 128,
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd f848 	bl	8000588 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8003500:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003504:	ed97 7b00 	vldr	d7, [r7]
 8003508:	ed8d 7b08 	vstr	d7, [sp, #32]
 800350c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003510:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003514:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003518:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800351c:	e9cd 4500 	strd	r4, r5, [sp]
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <loraOrientation+0x3c8>)
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	f010 f900 	bl	8013728 <sniprintf>
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8003528:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800352c:	4618      	mov	r0, r3
 800352e:	f7fc fe6f 	bl	8000210 <strlen>
 8003532:	4603      	mov	r3, r0
 8003534:	b29a      	uxth	r2, r3
 8003536:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f00e fd6f 	bl	8012020 <CDC_Transmit_FS>
            HAL_Delay(1);
 8003542:	2001      	movs	r0, #1
 8003544:	f002 fa30 	bl	80059a8 <HAL_Delay>
            SetRx(&radio, 0x00, 0); // No timeout
 8003548:	e784      	b.n	8003454 <loraOrientation+0x2cc>
 800354a:	bf00      	nop
 800354c:	40020800 	.word	0x40020800
 8003550:	08017cc8 	.word	0x08017cc8

08003554 <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 8003558:	2214      	movs	r2, #20
 800355a:	2122      	movs	r1, #34	; 0x22
 800355c:	2064      	movs	r0, #100	; 0x64
 800355e:	f000 feab 	bl	80042b8 <changeLed>

    changeLed(255, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	20ff      	movs	r0, #255	; 0xff
 8003568:	f000 fea6 	bl	80042b8 <changeLed>
    playtone(1046, 100, 10);
 800356c:	220a      	movs	r2, #10
 800356e:	2164      	movs	r1, #100	; 0x64
 8003570:	f240 4016 	movw	r0, #1046	; 0x416
 8003574:	f000 fda8 	bl	80040c8 <playtone>
    HAL_Delay(100);
 8003578:	2064      	movs	r0, #100	; 0x64
 800357a:	f002 fa15 	bl	80059a8 <HAL_Delay>
    changeLed(0, 255, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	21ff      	movs	r1, #255	; 0xff
 8003582:	2000      	movs	r0, #0
 8003584:	f000 fe98 	bl	80042b8 <changeLed>
    playtone(1319, 100, 10);
 8003588:	220a      	movs	r2, #10
 800358a:	2164      	movs	r1, #100	; 0x64
 800358c:	f240 5027 	movw	r0, #1319	; 0x527
 8003590:	f000 fd9a 	bl	80040c8 <playtone>
    return;
 8003594:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == IMU_INT_Pin && imu_ready) {
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a8:	d106      	bne.n	80035b8 <HAL_GPIO_EXTI_Callback+0x20>
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_GPIO_EXTI_Callback+0x20>
        LSM_ReadDMA(&imu);
 80035b2:	4804      	ldr	r0, [pc, #16]	; (80035c4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80035b4:	f7fd ff8e 	bl	80014d4 <LSM_ReadDMA>
    }
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000882 	.word	0x20000882
 80035c4:	20004734 	.word	0x20004734

080035c8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <HAL_SPI_TxRxCpltCallback+0x20>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d102      	bne.n	80035e0 <HAL_SPI_TxRxCpltCallback+0x18>
        LSM_ReadDMA_Complete(&imu);
 80035da:	4804      	ldr	r0, [pc, #16]	; (80035ec <HAL_SPI_TxRxCpltCallback+0x24>)
 80035dc:	f7fd ffab 	bl	8001536 <LSM_ReadDMA_Complete>
    }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40003800 	.word	0x40003800
 80035ec:	20004734 	.word	0x20004734

080035f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b0ce      	sub	sp, #312	; 0x138
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035f6:	f002 f995 	bl	8005924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035fa:	f000 f92f 	bl	800385c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035fe:	f000 fc5d 	bl	8003ebc <MX_GPIO_Init>
  MX_DMA_Init();
 8003602:	f000 fc1d 	bl	8003e40 <MX_DMA_Init>
  MX_TIM3_Init();
 8003606:	f000 fb4b 	bl	8003ca0 <MX_TIM3_Init>
  MX_SPI2_Init();
 800360a:	f000 fa79 	bl	8003b00 <MX_SPI2_Init>
  MX_SPI3_Init();
 800360e:	f000 faad 	bl	8003b6c <MX_SPI3_Init>
  MX_TIM2_Init();
 8003612:	f000 fae1 	bl	8003bd8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003616:	f000 fa3d 	bl	8003a94 <MX_SPI1_Init>
  MX_FATFS_Init();
 800361a:	f009 ffcf 	bl	800d5bc <MX_FATFS_Init>
  MX_I2C3_Init();
 800361e:	f000 fa0b 	bl	8003a38 <MX_I2C3_Init>
  MX_ADC1_Init();
 8003622:	f000 f9b7 	bl	8003994 <MX_ADC1_Init>
  MX_TIM6_Init();
 8003626:	f000 fbd5 	bl	8003dd4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800362a:	210c      	movs	r1, #12
 800362c:	4875      	ldr	r0, [pc, #468]	; (8003804 <main+0x214>)
 800362e:	f007 fe19 	bl	800b264 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003632:	2104      	movs	r1, #4
 8003634:	4873      	ldr	r0, [pc, #460]	; (8003804 <main+0x214>)
 8003636:	f007 fe15 	bl	800b264 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800363a:	2108      	movs	r1, #8
 800363c:	4871      	ldr	r0, [pc, #452]	; (8003804 <main+0x214>)
 800363e:	f007 fe11 	bl	800b264 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003642:	2100      	movs	r1, #0
 8003644:	486f      	ldr	r0, [pc, #444]	; (8003804 <main+0x214>)
 8003646:	f007 fe0d 	bl	800b264 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800364a:	210c      	movs	r1, #12
 800364c:	486e      	ldr	r0, [pc, #440]	; (8003808 <main+0x218>)
 800364e:	f007 fe09 	bl	800b264 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start(&htim6);
 8003652:	486e      	ldr	r0, [pc, #440]	; (800380c <main+0x21c>)
 8003654:	f007 fd93 	bl	800b17e <HAL_TIM_Base_Start>

    startupMusic();
 8003658:	f7ff ff7c 	bl	8003554 <startupMusic>
    //while (1) {rick();}

    changeLed(90, 0, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2100      	movs	r1, #0
 8003660:	205a      	movs	r0, #90	; 0x5a
 8003662:	f000 fe29 	bl	80042b8 <changeLed>

    htim3.Instance->CCR2 = 0;
 8003666:	4b67      	ldr	r3, [pc, #412]	; (8003804 <main+0x214>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800366e:	4b65      	ldr	r3, [pc, #404]	; (8003804 <main+0x214>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8003676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800367a:	f002 f995 	bl	80059a8 <HAL_Delay>

    //BWtest();
    uint8_t is_tx = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    //loraTesting(is_tx);
    // setting to go into ground station mode
    if (!is_tx) {
 8003684:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <main+0xa6>
        loraOrientation(is_tx);
 800368c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fd79 	bl	8003188 <loraOrientation>
    }
    //servoToggleTest();

    // LSM6dso setup
    orientation_init(&ori);
 8003696:	485e      	ldr	r0, [pc, #376]	; (8003810 <main+0x220>)
 8003698:	f001 fb47 	bl	8004d2a <orientation_init>
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800369c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a0:	4a5c      	ldr	r2, [pc, #368]	; (8003814 <main+0x224>)
 80036a2:	495d      	ldr	r1, [pc, #372]	; (8003818 <main+0x228>)
 80036a4:	485d      	ldr	r0, [pc, #372]	; (800381c <main+0x22c>)
 80036a6:	f7fd fd0f 	bl	80010c8 <LSM_init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
    __HAL_TIM_SET_COUNTER(&htim6,0);
 80036b0:	4b56      	ldr	r3, [pc, #344]	; (800380c <main+0x21c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
    imu_ready = 1;
 80036b8:	4b59      	ldr	r3, [pc, #356]	; (8003820 <main+0x230>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]

    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 80036be:	2277      	movs	r2, #119	; 0x77
 80036c0:	4958      	ldr	r1, [pc, #352]	; (8003824 <main+0x234>)
 80036c2:	4859      	ldr	r0, [pc, #356]	; (8003828 <main+0x238>)
 80036c4:	f7fd ff94 	bl	80015f0 <SPL06_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

    if (barostatus != 5) {
 80036ce:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d00f      	beq.n	80036f6 <main+0x106>

            HAL_Delay(100);
 80036d6:	2064      	movs	r0, #100	; 0x64
 80036d8:	f002 f966 	bl	80059a8 <HAL_Delay>
            changeLed(100, 0, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	2100      	movs	r1, #0
 80036e0:	2064      	movs	r0, #100	; 0x64
 80036e2:	f000 fde9 	bl	80042b8 <changeLed>
            HAL_Delay(100);
 80036e6:	2064      	movs	r0, #100	; 0x64
 80036e8:	f002 f95e 	bl	80059a8 <HAL_Delay>
            changeLed(0, 0, 0);
 80036ec:	2200      	movs	r2, #0
 80036ee:	2100      	movs	r1, #0
 80036f0:	2000      	movs	r0, #0
 80036f2:	f000 fde1 	bl	80042b8 <changeLed>

    }

    //SDTesting();

    float yrot = 0;
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    uint32_t lasttime = HAL_GetTick();
 80036fe:	f002 f947 	bl	8005990 <HAL_GetTick>
 8003702:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    uint32_t nowtime = HAL_GetTick();
 8003706:	f002 f943 	bl	8005990 <HAL_GetTick>
 800370a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    float dt = 0;
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    uint16_t rawadc;

    uint32_t counter = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of BuzzerQueue */
  osMessageQDef(BuzzerQueue, 6, uint16_t);
 800371c:	4b43      	ldr	r3, [pc, #268]	; (800382c <main+0x23c>)
 800371e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BuzzerQueueHandle = osMessageCreate(osMessageQ(BuzzerQueue), NULL);
 8003728:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f00c f9ba 	bl	800faa8 <osMessageCreate>
 8003734:	4602      	mov	r2, r0
 8003736:	4b3e      	ldr	r3, [pc, #248]	; (8003830 <main+0x240>)
 8003738:	601a      	str	r2, [r3, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLedTask, osPriorityBelowNormal, 0, 128);
 800373a:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <main+0x244>)
 800373c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003740:	461d      	mov	r5, r3
 8003742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800374a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 800374e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f00c f947 	bl	800f9e8 <osThreadCreate>
 800375a:	4602      	mov	r2, r0
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <main+0x248>)
 800375e:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <main+0x24c>)
 8003762:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003766:	461d      	mov	r5, r3
 8003768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800376a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800376c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8003774:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f00c f934 	bl	800f9e8 <osThreadCreate>
 8003780:	4602      	mov	r2, r0
 8003782:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <main+0x250>)
 8003784:	601a      	str	r2, [r3, #0]

  /* definition and creation of stateMachineTas */
  osThreadDef(stateMachineTas, startStateMachine, osPriorityHigh, 0, 256);
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <main+0x254>)
 8003788:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800378c:	461d      	mov	r5, r3
 800378e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003792:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stateMachineTasHandle = osThreadCreate(osThread(stateMachineTas), NULL);
 800379a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f00c f921 	bl	800f9e8 <osThreadCreate>
 80037a6:	4602      	mov	r2, r0
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <main+0x258>)
 80037aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of telemTask */
  osThreadDef(telemTask, StartTelemTask, osPriorityNormal, 0, 256);
 80037ac:	f107 0320 	add.w	r3, r7, #32
 80037b0:	4a26      	ldr	r2, [pc, #152]	; (800384c <main+0x25c>)
 80037b2:	461c      	mov	r4, r3
 80037b4:	4615      	mov	r5, r2
 80037b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemTaskHandle = osThreadCreate(osThread(telemTask), NULL);
 80037c2:	f107 0320 	add.w	r3, r7, #32
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f00c f90d 	bl	800f9e8 <osThreadCreate>
 80037ce:	4602      	mov	r2, r0
 80037d0:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <main+0x260>)
 80037d2:	601a      	str	r2, [r3, #0]

  /* definition and creation of baroTask */
  osThreadDef(baroTask, StartBaroTask, osPriorityNormal, 0, 128);
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <main+0x264>)
 80037d8:	461c      	mov	r4, r3
 80037da:	4615      	mov	r5, r2
 80037dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  baroTaskHandle = osThreadCreate(osThread(baroTask), NULL);
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f00c f8fb 	bl	800f9e8 <osThreadCreate>
 80037f2:	4602      	mov	r2, r0
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <main+0x268>)
 80037f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80037f8:	f00c f8df 	bl	800f9ba <osKernelStart>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        HAL_Delay(1);
 80037fc:	2001      	movs	r0, #1
 80037fe:	f002 f8d3 	bl	80059a8 <HAL_Delay>
 8003802:	e7fb      	b.n	80037fc <main+0x20c>
 8003804:	20004818 	.word	0x20004818
 8003808:	200049d0 	.word	0x200049d0
 800380c:	20004934 	.word	0x20004934
 8003810:	200045ec 	.word	0x200045ec
 8003814:	40020400 	.word	0x40020400
 8003818:	200046dc 	.word	0x200046dc
 800381c:	20004734 	.word	0x20004734
 8003820:	20000882 	.word	0x20000882
 8003824:	20004688 	.word	0x20004688
 8003828:	200048fc 	.word	0x200048fc
 800382c:	08017edc 	.word	0x08017edc
 8003830:	200048f8 	.word	0x200048f8
 8003834:	08017ef4 	.word	0x08017ef4
 8003838:	20004814 	.word	0x20004814
 800383c:	08017f1c 	.word	0x08017f1c
 8003840:	20004a14 	.word	0x20004a14
 8003844:	08017f48 	.word	0x08017f48
 8003848:	20004974 	.word	0x20004974
 800384c:	08017f70 	.word	0x08017f70
 8003850:	20004ad8 	.word	0x20004ad8
 8003854:	08017f98 	.word	0x08017f98
 8003858:	20004a10 	.word	0x20004a10

0800385c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b0ac      	sub	sp, #176	; 0xb0
 8003860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003862:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003866:	2234      	movs	r2, #52	; 0x34
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f00f f8ef 	bl	8012a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003870:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	225c      	movs	r2, #92	; 0x5c
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f00f f8e0 	bl	8012a4e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	4b3e      	ldr	r3, [pc, #248]	; (800398c <SystemClock_Config+0x130>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a3d      	ldr	r2, [pc, #244]	; (800398c <SystemClock_Config+0x130>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <SystemClock_Config+0x130>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <SystemClock_Config+0x134>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a37      	ldr	r2, [pc, #220]	; (8003990 <SystemClock_Config+0x134>)
 80038b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b35      	ldr	r3, [pc, #212]	; (8003990 <SystemClock_Config+0x134>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038d2:	2302      	movs	r3, #2
 80038d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038e0:	2304      	movs	r3, #4
 80038e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80038e6:	23b4      	movs	r3, #180	; 0xb4
 80038e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80038f2:	2308      	movs	r3, #8
 80038f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038f8:	2302      	movs	r3, #2
 80038fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003902:	4618      	mov	r0, r3
 8003904:	f006 fa50 	bl	8009da8 <HAL_RCC_OscConfig>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800390e:	f001 f955 	bl	8004bbc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003912:	f005 fbe3 	bl	80090dc <HAL_PWREx_EnableOverDrive>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800391c:	f001 f94e 	bl	8004bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003920:	230f      	movs	r3, #15
 8003922:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003924:	2302      	movs	r3, #2
 8003926:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003928:	2300      	movs	r3, #0
 800392a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800392c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003930:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003936:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003938:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800393c:	2105      	movs	r1, #5
 800393e:	4618      	mov	r0, r3
 8003940:	f005 fc1c 	bl	800917c <HAL_RCC_ClockConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800394a:	f001 f937 	bl	8004bbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800394e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003952:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8003954:	2304      	movs	r3, #4
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8003958:	2360      	movs	r3, #96	; 0x60
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800395c:	2302      	movs	r3, #2
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8003960:	2304      	movs	r3, #4
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003964:	2301      	movs	r3, #1
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8003968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800396c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	4618      	mov	r0, r3
 8003974:	f005 fd4e 	bl	8009414 <HAL_RCCEx_PeriphCLKConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <SystemClock_Config+0x126>
  {
    Error_Handler();
 800397e:	f001 f91d 	bl	8004bbc <Error_Handler>
  }
}
 8003982:	bf00      	nop
 8003984:	37b0      	adds	r7, #176	; 0xb0
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000

08003994 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800399a:	463b      	mov	r3, r7
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039a8:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <MX_ADC1_Init+0x9c>)
 80039aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039ac:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039d6:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <MX_ADC1_Init+0xa0>)
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039da:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039f4:	480d      	ldr	r0, [pc, #52]	; (8003a2c <MX_ADC1_Init+0x98>)
 80039f6:	f001 fff9 	bl	80059ec <HAL_ADC_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003a00:	f001 f8dc 	bl	8004bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003a04:	230c      	movs	r3, #12
 8003a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a10:	463b      	mov	r3, r7
 8003a12:	4619      	mov	r1, r3
 8003a14:	4805      	ldr	r0, [pc, #20]	; (8003a2c <MX_ADC1_Init+0x98>)
 8003a16:	f002 f985 	bl	8005d24 <HAL_ADC_ConfigChannel>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003a20:	f001 f8cc 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200048b0 	.word	0x200048b0
 8003a30:	40012000 	.word	0x40012000
 8003a34:	0f000001 	.word	0x0f000001

08003a38 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <MX_I2C3_Init+0x54>)
 8003a40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a44:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <MX_I2C3_Init+0x58>)
 8003a46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <MX_I2C3_Init+0x50>)
 8003a76:	f003 f9af 	bl	8006dd8 <HAL_I2C_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a80:	f001 f89c 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20004688 	.word	0x20004688
 8003a8c:	40005c00 	.word	0x40005c00
 8003a90:	00061a80 	.word	0x00061a80

08003a94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <MX_SPI1_Init+0x68>)
 8003a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003abe:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ac8:	2238      	movs	r2, #56	; 0x38
 8003aca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ae0:	220a      	movs	r2, #10
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ae4:	4804      	ldr	r0, [pc, #16]	; (8003af8 <MX_SPI1_Init+0x64>)
 8003ae6:	f006 fbb9 	bl	800a25c <HAL_SPI_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003af0:	f001 f864 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20004978 	.word	0x20004978
 8003afc:	40013000 	.word	0x40013000

08003b00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b06:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <MX_SPI2_Init+0x68>)
 8003b08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b34:	2210      	movs	r2, #16
 8003b36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b4c:	220a      	movs	r2, #10
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b50:	4804      	ldr	r0, [pc, #16]	; (8003b64 <MX_SPI2_Init+0x64>)
 8003b52:	f006 fb83 	bl	800a25c <HAL_SPI_Init>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003b5c:	f001 f82e 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200046dc 	.word	0x200046dc
 8003b68:	40003800 	.word	0x40003800

08003b6c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <MX_SPI3_Init+0x68>)
 8003b74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003bb8:	220a      	movs	r2, #10
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003bbc:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <MX_SPI3_Init+0x64>)
 8003bbe:	f006 fb4d 	bl	800a25c <HAL_SPI_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003bc8:	f000 fff8 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20004858 	.word	0x20004858
 8003bd4:	40003c00 	.word	0x40003c00

08003bd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bde:	f107 0320 	add.w	r3, r7, #32
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
 8003bf2:	60da      	str	r2, [r3, #12]
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	615a      	str	r2, [r3, #20]
 8003bf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c04:	2259      	movs	r2, #89	; 0x59
 8003c06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c10:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003c14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c22:	481e      	ldr	r0, [pc, #120]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c24:	f007 faf3 	bl	800b20e <HAL_TIM_PWM_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003c2e:	f000 ffc5 	bl	8004bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c3a:	f107 0320 	add.w	r3, r7, #32
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4816      	ldr	r0, [pc, #88]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c42:	f008 f90b 	bl	800be5c <HAL_TIMEx_MasterConfigSynchronization>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003c4c:	f000 ffb6 	bl	8004bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c50:	2360      	movs	r3, #96	; 0x60
 8003c52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	2204      	movs	r2, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	480d      	ldr	r0, [pc, #52]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c68:	f007 fc42 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003c72:	f000 ffa3 	bl	8004bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	220c      	movs	r2, #12
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4807      	ldr	r0, [pc, #28]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c7e:	f007 fc37 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c88:	f000 ff98 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003c8c:	4803      	ldr	r0, [pc, #12]	; (8003c9c <MX_TIM2_Init+0xc4>)
 8003c8e:	f001 fc19 	bl	80054c4 <HAL_TIM_MspPostInit>

}
 8003c92:	bf00      	nop
 8003c94:	3728      	adds	r7, #40	; 0x28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200049d0 	.word	0x200049d0

08003ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	; 0x38
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb4:	f107 0320 	add.w	r3, r7, #32
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	611a      	str	r2, [r3, #16]
 8003ccc:	615a      	str	r2, [r3, #20]
 8003cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003cd2:	4a3f      	ldr	r2, [pc, #252]	; (8003dd0 <MX_TIM3_Init+0x130>)
 8003cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003cd8:	2259      	movs	r2, #89	; 0x59
 8003cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8003ce2:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003ce4:	22ff      	movs	r2, #255	; 0xff
 8003ce6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce8:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cf4:	4835      	ldr	r0, [pc, #212]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003cf6:	f007 fa17 	bl	800b128 <HAL_TIM_Base_Init>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003d00:	f000 ff5c 	bl	8004bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d0e:	4619      	mov	r1, r3
 8003d10:	482e      	ldr	r0, [pc, #184]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003d12:	f007 fcb3 	bl	800b67c <HAL_TIM_ConfigClockSource>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003d1c:	f000 ff4e 	bl	8004bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d20:	482a      	ldr	r0, [pc, #168]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003d22:	f007 fa74 	bl	800b20e <HAL_TIM_PWM_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003d2c:	f000 ff46 	bl	8004bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d30:	2300      	movs	r3, #0
 8003d32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d38:	f107 0320 	add.w	r3, r7, #32
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4823      	ldr	r0, [pc, #140]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003d40:	f008 f88c 	bl	800be5c <HAL_TIMEx_MasterConfigSynchronization>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003d4a:	f000 ff37 	bl	8004bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d4e:	2360      	movs	r3, #96	; 0x60
 8003d50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003d56:	2302      	movs	r3, #2
 8003d58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	2200      	movs	r2, #0
 8003d62:	4619      	mov	r1, r3
 8003d64:	4819      	ldr	r0, [pc, #100]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003d66:	f007 fbc3 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003d70:	f000 ff24 	bl	8004bbc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4813      	ldr	r0, [pc, #76]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003d80:	f007 fbb6 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003d8a:	f000 ff17 	bl	8004bbc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	2208      	movs	r2, #8
 8003d96:	4619      	mov	r1, r3
 8003d98:	480c      	ldr	r0, [pc, #48]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003d9a:	f007 fba9 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003da4:	f000 ff0a 	bl	8004bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	220c      	movs	r2, #12
 8003dac:	4619      	mov	r1, r3
 8003dae:	4807      	ldr	r0, [pc, #28]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003db0:	f007 fb9e 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003dba:	f000 feff 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003dbe:	4803      	ldr	r0, [pc, #12]	; (8003dcc <MX_TIM3_Init+0x12c>)
 8003dc0:	f001 fb80 	bl	80054c4 <HAL_TIM_MspPostInit>

}
 8003dc4:	bf00      	nop
 8003dc6:	3738      	adds	r7, #56	; 0x38
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20004818 	.word	0x20004818
 8003dd0:	40000400 	.word	0x40000400

08003dd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dda:	463b      	mov	r3, r7
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <MX_TIM6_Init+0x68>)
 8003de6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003dea:	2259      	movs	r2, #89	; 0x59
 8003dec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003df4:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003e02:	480d      	ldr	r0, [pc, #52]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003e04:	f007 f990 	bl	800b128 <HAL_TIM_Base_Init>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003e0e:	f000 fed5 	bl	8004bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4806      	ldr	r0, [pc, #24]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003e20:	f008 f81c 	bl	800be5c <HAL_TIMEx_MasterConfigSynchronization>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003e2a:	f000 fec7 	bl	8004bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20004934 	.word	0x20004934
 8003e3c:	40001000 	.word	0x40001000

08003e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <MX_DMA_Init+0x78>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <MX_DMA_Init+0x78>)
 8003e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e54:	6313      	str	r3, [r2, #48]	; 0x30
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <MX_DMA_Init+0x78>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <MX_DMA_Init+0x78>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <MX_DMA_Init+0x78>)
 8003e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <MX_DMA_Init+0x78>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2105      	movs	r1, #5
 8003e82:	200e      	movs	r0, #14
 8003e84:	f002 fa34 	bl	80062f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003e88:	200e      	movs	r0, #14
 8003e8a:	f002 fa4d 	bl	8006328 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2105      	movs	r1, #5
 8003e92:	200f      	movs	r0, #15
 8003e94:	f002 fa2c 	bl	80062f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003e98:	200f      	movs	r0, #15
 8003e9a:	f002 fa45 	bl	8006328 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2105      	movs	r1, #5
 8003ea2:	203b      	movs	r0, #59	; 0x3b
 8003ea4:	f002 fa24 	bl	80062f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003ea8:	203b      	movs	r0, #59	; 0x3b
 8003eaa:	f002 fa3d 	bl	8006328 <HAL_NVIC_EnableIRQ>

}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	4b75      	ldr	r3, [pc, #468]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a74      	ldr	r2, [pc, #464]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee2:	4b72      	ldr	r3, [pc, #456]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	4b6e      	ldr	r3, [pc, #440]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a6d      	ldr	r2, [pc, #436]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b6b      	ldr	r3, [pc, #428]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	4b67      	ldr	r3, [pc, #412]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a66      	ldr	r2, [pc, #408]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b64      	ldr	r3, [pc, #400]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	4b60      	ldr	r3, [pc, #384]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4a5f      	ldr	r2, [pc, #380]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f30:	f043 0302 	orr.w	r3, r3, #2
 8003f34:	6313      	str	r3, [r2, #48]	; 0x30
 8003f36:	4b5d      	ldr	r3, [pc, #372]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	4b59      	ldr	r3, [pc, #356]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a58      	ldr	r2, [pc, #352]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
 8003f52:	4b56      	ldr	r3, [pc, #344]	; (80040ac <MX_GPIO_Init+0x1f0>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_POWER_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f248 0104 	movw	r1, #32772	; 0x8004
 8003f64:	4852      	ldr	r0, [pc, #328]	; (80040b0 <MX_GPIO_Init+0x1f4>)
 8003f66:	f002 ff05 	bl	8006d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_NSS_Pin|VTX_BTN1_Pin, GPIO_PIN_RESET);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2130      	movs	r1, #48	; 0x30
 8003f6e:	4851      	ldr	r0, [pc, #324]	; (80040b4 <MX_GPIO_Init+0x1f8>)
 8003f70:	f002 ff00 	bl	8006d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f7a:	484f      	ldr	r0, [pc, #316]	; (80040b8 <MX_GPIO_Init+0x1fc>)
 8003f7c:	f002 fefa 	bl	8006d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8003f80:	2201      	movs	r2, #1
 8003f82:	2140      	movs	r1, #64	; 0x40
 8003f84:	484c      	ldr	r0, [pc, #304]	; (80040b8 <MX_GPIO_Init+0x1fc>)
 8003f86:	f002 fef5 	bl	8006d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8003f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f90:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <MX_GPIO_Init+0x200>)
 8003f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8003f98:	f107 0314 	add.w	r3, r7, #20
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4845      	ldr	r0, [pc, #276]	; (80040b4 <MX_GPIO_Init+0x1f8>)
 8003fa0:	f002 fd3e 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RBF_Pin */
  GPIO_InitStruct.Pin = RBF_Pin;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fac:	2301      	movs	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RBF_GPIO_Port, &GPIO_InitStruct);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	483e      	ldr	r0, [pc, #248]	; (80040b0 <MX_GPIO_Init+0x1f4>)
 8003fb8:	f002 fd32 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_POWER_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = CAM_POWER_Pin|LORA_NSS_Pin;
 8003fbc:	f248 0304 	movw	r3, #32772	; 0x8004
 8003fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fce:	f107 0314 	add.w	r3, r7, #20
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4836      	ldr	r0, [pc, #216]	; (80040b0 <MX_GPIO_Init+0x1f4>)
 8003fd6:	f002 fd23 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003fda:	2310      	movs	r3, #16
 8003fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003fea:	f107 0314 	add.w	r3, r7, #20
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4830      	ldr	r0, [pc, #192]	; (80040b4 <MX_GPIO_Init+0x1f8>)
 8003ff2:	f002 fd15 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : VTX_BTN1_Pin */
  GPIO_InitStruct.Pin = VTX_BTN1_Pin;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ffe:	2302      	movs	r3, #2
 8004000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VTX_BTN1_GPIO_Port, &GPIO_InitStruct);
 8004006:	f107 0314 	add.w	r3, r7, #20
 800400a:	4619      	mov	r1, r3
 800400c:	4829      	ldr	r0, [pc, #164]	; (80040b4 <MX_GPIO_Init+0x1f8>)
 800400e:	f002 fd07 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 8004012:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8004016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004018:	2301      	movs	r3, #1
 800401a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004024:	f107 0314 	add.w	r3, r7, #20
 8004028:	4619      	mov	r1, r3
 800402a:	4823      	ldr	r0, [pc, #140]	; (80040b8 <MX_GPIO_Init+0x1fc>)
 800402c:	f002 fcf8 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 8004030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	4619      	mov	r1, r3
 8004044:	481b      	ldr	r0, [pc, #108]	; (80040b4 <MX_GPIO_Init+0x1f8>)
 8004046:	f002 fceb 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 800404a:	2304      	movs	r3, #4
 800404c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8004056:	f107 0314 	add.w	r3, r7, #20
 800405a:	4619      	mov	r1, r3
 800405c:	4818      	ldr	r0, [pc, #96]	; (80040c0 <MX_GPIO_Init+0x204>)
 800405e:	f002 fcdf 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8004062:	2310      	movs	r3, #16
 8004064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4619      	mov	r1, r3
 8004074:	4810      	ldr	r0, [pc, #64]	; (80040b8 <MX_GPIO_Init+0x1fc>)
 8004076:	f002 fcd3 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BREAKWIRE_Pin ARM_Pin */
  GPIO_InitStruct.Pin = BREAKWIRE_Pin|ARM_Pin;
 800407a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800407e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004084:	2301      	movs	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	4619      	mov	r1, r3
 800408e:	480a      	ldr	r0, [pc, #40]	; (80040b8 <MX_GPIO_Init+0x1fc>)
 8004090:	f002 fcc6 	bl	8006a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004094:	2200      	movs	r2, #0
 8004096:	2105      	movs	r1, #5
 8004098:	2028      	movs	r0, #40	; 0x28
 800409a:	f002 f929 	bl	80062f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800409e:	2028      	movs	r0, #40	; 0x28
 80040a0:	f002 f942 	bl	8006328 <HAL_NVIC_EnableIRQ>

}
 80040a4:	bf00      	nop
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020000 	.word	0x40020000
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020400 	.word	0x40020400
 80040bc:	10110000 	.word	0x10110000
 80040c0:	40020c00 	.word	0x40020c00
 80040c4:	00000000 	.word	0x00000000

080040c8 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	80fb      	strh	r3, [r7, #6]
 80040d2:	460b      	mov	r3, r1
 80040d4:	80bb      	strh	r3, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <playtone+0xf0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 80040e2:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <playtone+0xf0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <playtone+0xf0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc fa35 	bl	8000564 <__aeabi_i2d>
 80040fa:	4603      	mov	r3, r0
 80040fc:	460c      	mov	r4, r1
 80040fe:	461a      	mov	r2, r3
 8004100:	4623      	mov	r3, r4
 8004102:	a12b      	add	r1, pc, #172	; (adr r1, 80041b0 <playtone+0xe8>)
 8004104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004108:	f7fc fbc0 	bl	800088c <__aeabi_ddiv>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	4618      	mov	r0, r3
 8004112:	4621      	mov	r1, r4
 8004114:	f7fc fd68 	bl	8000be8 <__aeabi_d2uiz>
 8004118:	4603      	mov	r3, r0
 800411a:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <playtone+0xf0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8004124:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <playtone+0xf0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	fb02 f203 	mul.w	r2, r2, r3
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <playtone+0xf0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4920      	ldr	r1, [pc, #128]	; (80041bc <playtone+0xf4>)
 800413a:	fba1 1202 	umull	r1, r2, r1, r2
 800413e:	0992      	lsrs	r2, r2, #6
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8004142:	8afb      	ldrh	r3, [r7, #22]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	fb02 f203 	mul.w	r2, r2, r3
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <playtone+0xf0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	0a12      	lsrs	r2, r2, #8
 8004150:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8004152:	8abb      	ldrh	r3, [r7, #20]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	fb02 f203 	mul.w	r2, r2, r3
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <playtone+0xf0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	0a12      	lsrs	r2, r2, #8
 8004160:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8004162:	8a7b      	ldrh	r3, [r7, #18]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	fb02 f203 	mul.w	r2, r2, r3
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <playtone+0xf0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0a12      	lsrs	r2, r2, #8
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 8004172:	88bb      	ldrh	r3, [r7, #4]
 8004174:	4618      	mov	r0, r3
 8004176:	f001 fc17 	bl	80059a8 <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <playtone+0xf0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <playtone+0xf0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <playtone+0xf0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	8afa      	ldrh	r2, [r7, #22]
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <playtone+0xf0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	8aba      	ldrh	r2, [r7, #20]
 8004198:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <playtone+0xf0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	8a7a      	ldrh	r2, [r7, #18]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd90      	pop	{r4, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	f3af 8000 	nop.w
 80041b0:	00000000 	.word	0x00000000
 80041b4:	412e8480 	.word	0x412e8480
 80041b8:	20004818 	.word	0x20004818
 80041bc:	51eb851f 	.word	0x51eb851f

080041c0 <playtoneRTOS>:

void playtoneRTOS(uint16_t freq, uint16_t ms, uint8_t vol) {
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
 80041ca:	460b      	mov	r3, r1
 80041cc:	80bb      	strh	r3, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 80041d2:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <playtoneRTOS+0xf0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <playtoneRTOS+0xf0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 80041e2:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <playtoneRTOS+0xf0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc f9b9 	bl	8000564 <__aeabi_i2d>
 80041f2:	4603      	mov	r3, r0
 80041f4:	460c      	mov	r4, r1
 80041f6:	461a      	mov	r2, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	a12b      	add	r1, pc, #172	; (adr r1, 80042a8 <playtoneRTOS+0xe8>)
 80041fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004200:	f7fc fb44 	bl	800088c <__aeabi_ddiv>
 8004204:	4603      	mov	r3, r0
 8004206:	460c      	mov	r4, r1
 8004208:	4618      	mov	r0, r3
 800420a:	4621      	mov	r1, r4
 800420c:	f7fc fcec 	bl	8000be8 <__aeabi_d2uiz>
 8004210:	4603      	mov	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8004214:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <playtoneRTOS+0xf0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2200      	movs	r2, #0
 800421a:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 800421c:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <playtoneRTOS+0xf0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	fb02 f203 	mul.w	r2, r2, r3
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <playtoneRTOS+0xf0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4920      	ldr	r1, [pc, #128]	; (80042b4 <playtoneRTOS+0xf4>)
 8004232:	fba1 1202 	umull	r1, r2, r1, r2
 8004236:	0992      	lsrs	r2, r2, #6
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 800423a:	8afb      	ldrh	r3, [r7, #22]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	fb02 f203 	mul.w	r2, r2, r3
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <playtoneRTOS+0xf0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	0a12      	lsrs	r2, r2, #8
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 800424a:	8abb      	ldrh	r3, [r7, #20]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	fb02 f203 	mul.w	r2, r2, r3
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <playtoneRTOS+0xf0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0a12      	lsrs	r2, r2, #8
 8004258:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 800425a:	8a7b      	ldrh	r3, [r7, #18]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	fb02 f203 	mul.w	r2, r2, r3
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <playtoneRTOS+0xf0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	0a12      	lsrs	r2, r2, #8
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

    osDelay(ms);
 800426a:	88bb      	ldrh	r3, [r7, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	f00b fc07 	bl	800fa80 <osDelay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8004272:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <playtoneRTOS+0xf0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800427a:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <playtoneRTOS+0xf0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	22ff      	movs	r2, #255	; 0xff
 8004280:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <playtoneRTOS+0xf0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	8afa      	ldrh	r2, [r7, #22]
 8004288:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <playtoneRTOS+0xf0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	8aba      	ldrh	r2, [r7, #20]
 8004290:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <playtoneRTOS+0xf0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	8a7a      	ldrh	r2, [r7, #18]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd90      	pop	{r4, r7, pc}
 80042a2:	bf00      	nop
 80042a4:	f3af 8000 	nop.w
 80042a8:	00000000 	.word	0x00000000
 80042ac:	412e8480 	.word	0x412e8480
 80042b0:	20004818 	.word	0x20004818
 80042b4:	51eb851f 	.word	0x51eb851f

080042b8 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
 80042c2:	460b      	mov	r3, r1
 80042c4:	71bb      	strb	r3, [r7, #6]
 80042c6:	4613      	mov	r3, r2
 80042c8:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <changeLed+0x38>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	79fa      	ldrb	r2, [r7, #7]
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <changeLed+0x38>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	79ba      	ldrb	r2, [r7, #6]
 80042d8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <changeLed+0x38>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	797a      	ldrb	r2, [r7, #5]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20004818 	.word	0x20004818

080042f4 <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80042fc:	f00d fdbe 	bl	8011e7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        //changeLed(0, 100, 0);
        osDelay(1000);
 8004300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004304:	f00b fbbc 	bl	800fa80 <osDelay>
        //changeLed(0, 0, 100);
        osDelay(1000);
 8004308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800430c:	f00b fbb8 	bl	800fa80 <osDelay>
        osDelay(1000);
 8004310:	e7f6      	b.n	8004300 <StartLedTask+0xc>
	...

08004314 <StartMusicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	; 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
    /* Infinite loop */

    uint16_t vol = 0; // 13
 800431c:	2300      	movs	r3, #0
 800431e:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t beatlength = 50; // determines tempo
 8004320:	2332      	movs	r3, #50	; 0x32
 8004322:	847b      	strh	r3, [r7, #34]	; 0x22
    float beatseparationconstant = 0.3;
 8004324:	4b79      	ldr	r3, [pc, #484]	; (800450c <StartMusicTask+0x1f8>)
 8004326:	61fb      	str	r3, [r7, #28]

    int a = 4; // part index
 8004328:	2304      	movs	r3, #4
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
    int b = 0; // song index
 800432c:	2300      	movs	r3, #0
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
    int c; // lyric index

    osEvent messagebox;
    uint16_t sounddelay;

    int ksp_playhead = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
    int ksp_total = 20;
 8004334:	2314      	movs	r3, #20
 8004336:	61bb      	str	r3, [r7, #24]

    for (;;) {
        if (is_soft_enabled()) {
 8004338:	f7fe fe34 	bl	8002fa4 <is_soft_enabled>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01c      	beq.n	800437c <StartMusicTask+0x68>
            messagebox = osMessageGet(BuzzerQueueHandle, 1000);
 8004342:	4b73      	ldr	r3, [pc, #460]	; (8004510 <StartMusicTask+0x1fc>)
 8004344:	6819      	ldr	r1, [r3, #0]
 8004346:	f107 0308 	add.w	r3, r7, #8
 800434a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800434e:	4618      	mov	r0, r3
 8004350:	f00b fc14 	bl	800fb7c <osMessageGet>
            if (messagebox.status && messagebox.value.v) {
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ee      	beq.n	8004338 <StartMusicTask+0x24>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0eb      	beq.n	8004338 <StartMusicTask+0x24>
                sounddelay = messagebox.value.v;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	82fb      	strh	r3, [r7, #22]
                playtoneRTOS(OPTIMAL_BUZZER_FREQ, sounddelay,
 8004364:	8afb      	ldrh	r3, [r7, #22]
 8004366:	2246      	movs	r2, #70	; 0x46
 8004368:	4619      	mov	r1, r3
 800436a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800436e:	f7ff ff27 	bl	80041c0 <playtoneRTOS>
                        OPTIMAL_BUZZER_DUTY);
                osDelay(sounddelay);
 8004372:	8afb      	ldrh	r3, [r7, #22]
 8004374:	4618      	mov	r0, r3
 8004376:	f00b fb83 	bl	800fa80 <osDelay>
 800437a:	e7dd      	b.n	8004338 <StartMusicTask+0x24>
            }


        }
        else if (buzzer_setting == RICK){
 800437c:	4b65      	ldr	r3, [pc, #404]	; (8004514 <StartMusicTask+0x200>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	f040 80a5 	bne.w	80044d0 <StartMusicTask+0x1bc>
            uint16_t notelength;
            if (a == 1 || a == 2) {
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	2b01      	cmp	r3, #1
 800438a:	d002      	beq.n	8004392 <StartMusicTask+0x7e>
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	2b02      	cmp	r3, #2
 8004390:	d125      	bne.n	80043de <StartMusicTask+0xca>
                // intro
                notelength = beatlength * song1_intro_rhythmn[b];
 8004392:	4a61      	ldr	r2, [pc, #388]	; (8004518 <StartMusicTask+0x204>)
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800439c:	fb12 f303 	smulbb	r3, r2, r3
 80043a0:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_intro_melody[b] > 0) {
 80043a2:	4a5e      	ldr	r2, [pc, #376]	; (800451c <StartMusicTask+0x208>)
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <StartMusicTask+0xae>
                    playtoneRTOS(song1_intro_melody[b], notelength, vol);
 80043ae:	4a5b      	ldr	r2, [pc, #364]	; (800451c <StartMusicTask+0x208>)
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff feff 	bl	80041c0 <playtoneRTOS>
                }
                b++;
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	3301      	adds	r3, #1
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d966      	bls.n	800449c <StartMusicTask+0x188>
                    a++;
 80043ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d0:	3301      	adds	r3, #1
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 80043dc:	e05e      	b.n	800449c <StartMusicTask+0x188>
                }
            } else if (a == 3 || a == 5) {
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d002      	beq.n	80043ea <StartMusicTask+0xd6>
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d12a      	bne.n	8004440 <StartMusicTask+0x12c>
                // verse
                notelength = beatlength * 2 * song1_verse1_rhythmn[b];
 80043ea:	4a4d      	ldr	r2, [pc, #308]	; (8004520 <StartMusicTask+0x20c>)
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80043f4:	fb12 f303 	smulbb	r3, r2, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_verse1_melody[b] > 0) {
 80043fe:	4a49      	ldr	r2, [pc, #292]	; (8004524 <StartMusicTask+0x210>)
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00c      	beq.n	8004424 <StartMusicTask+0x110>
                    playtoneRTOS(song1_verse1_melody[b], notelength, vol);
 800440a:	4a46      	ldr	r2, [pc, #280]	; (8004524 <StartMusicTask+0x210>)
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fed1 	bl	80041c0 <playtoneRTOS>
                    c++;
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	3301      	adds	r3, #1
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	3301      	adds	r3, #1
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	2b3e      	cmp	r3, #62	; 0x3e
 800442e:	d935      	bls.n	800449c <StartMusicTask+0x188>
                    a++;
 8004430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004432:	3301      	adds	r3, #1
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 800443e:	e02d      	b.n	800449c <StartMusicTask+0x188>
                }
            } else if (a == 4 || a == 6) {
 8004440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004442:	2b04      	cmp	r3, #4
 8004444:	d002      	beq.n	800444c <StartMusicTask+0x138>
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004448:	2b06      	cmp	r3, #6
 800444a:	d127      	bne.n	800449c <StartMusicTask+0x188>
                // chorus
                notelength = beatlength * song1_chorus_rhythmn[b];
 800444c:	4a36      	ldr	r2, [pc, #216]	; (8004528 <StartMusicTask+0x214>)
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004454:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004456:	fb12 f303 	smulbb	r3, r2, r3
 800445a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_chorus_melody[b] > 0) {
 800445c:	4a33      	ldr	r2, [pc, #204]	; (800452c <StartMusicTask+0x218>)
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00c      	beq.n	8004482 <StartMusicTask+0x16e>
                    playtoneRTOS(song1_chorus_melody[b], notelength, vol);
 8004468:	4a30      	ldr	r2, [pc, #192]	; (800452c <StartMusicTask+0x218>)
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004470:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fea2 	bl	80041c0 <playtoneRTOS>
                    c++;
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	3301      	adds	r3, #1
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	3301      	adds	r3, #1
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_chorus_melody) / sizeof(uint16_t)) {
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	2b3a      	cmp	r3, #58	; 0x3a
 800448c:	d906      	bls.n	800449c <StartMusicTask+0x188>
                    a++;
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	3301      	adds	r3, #1
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            osDelay(notelength);
 800449c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800449e:	4618      	mov	r0, r3
 80044a0:	f00b faee 	bl	800fa80 <osDelay>
            //noTone(piezo);

            osDelay(notelength * beatseparationconstant);
 80044a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ba:	ee17 0a90 	vmov	r0, s15
 80044be:	f00b fadf 	bl	800fa80 <osDelay>
            if (a == 7) { // loop back around to beginning of song
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	f47f af37 	bne.w	8004338 <StartMusicTask+0x24>
                a = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	e733      	b.n	8004338 <StartMusicTask+0x24>
            }
        }
        else if (buzzer_setting == KSP_MAIN) {
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <StartMusicTask+0x200>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f47f af2f 	bne.w	8004338 <StartMusicTask+0x24>
            playtoneRTOS(ksp_tunes[ksp_playhead], ksp_delays[ksp_playhead], vol);
 80044da:	4a15      	ldr	r2, [pc, #84]	; (8004530 <StartMusicTask+0x21c>)
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <StartMusicTask+0x220>)
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7ff fe66 	bl	80041c0 <playtoneRTOS>
            ksp_playhead = (ksp_playhead + 1) % ksp_total;
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	3301      	adds	r3, #1
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80044fe:	69b9      	ldr	r1, [r7, #24]
 8004500:	fb01 f202 	mul.w	r2, r1, r2
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
        if (is_soft_enabled()) {
 8004508:	e716      	b.n	8004338 <StartMusicTask+0x24>
 800450a:	bf00      	nop
 800450c:	3e99999a 	.word	0x3e99999a
 8004510:	200048f8 	.word	0x200048f8
 8004514:	20000001 	.word	0x20000001
 8004518:	20000020 	.word	0x20000020
 800451c:	20000004 	.word	0x20000004
 8004520:	200000bc 	.word	0x200000bc
 8004524:	2000003c 	.word	0x2000003c
 8004528:	200001b4 	.word	0x200001b4
 800452c:	2000013c 	.word	0x2000013c
 8004530:	2000022c 	.word	0x2000022c
 8004534:	20000254 	.word	0x20000254

08004538 <startStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStateMachine */
void startStateMachine(void const * argument)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStateMachine */

    uint32_t launchTime = osKernelSysTick();
 8004540:	f00b fa42 	bl	800f9c8 <osKernelSysTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t currentTime = osKernelSysTick();
 8004546:	f00b fa3f 	bl	800f9c8 <osKernelSysTick>
 800454a:	6238      	str	r0, [r7, #32]
    uint32_t timeSinceLaunch = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
    Servo deployServo;
    servo_init(&deployServo, &htim2, &htim2.Instance->CCR4);
 8004550:	4bc5      	ldr	r3, [pc, #788]	; (8004868 <startStateMachine+0x330>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004558:	f107 0308 	add.w	r3, r7, #8
 800455c:	49c2      	ldr	r1, [pc, #776]	; (8004868 <startStateMachine+0x330>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7fd faba 	bl	8001ad8 <servo_init>
    servo_disable(&deployServo);
 8004564:	f107 0308 	add.w	r3, r7, #8
 8004568:	4618      	mov	r0, r3
 800456a:	f7fd fae9 	bl	8001b40 <servo_disable>
    servo_setting = 0;
 800456e:	4bbf      	ldr	r3, [pc, #764]	; (800486c <startStateMachine+0x334>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]

    /* Infinite loop */
    for (;;) {

        currentTime = osKernelSysTick();
 8004574:	f00b fa28 	bl	800f9c8 <osKernelSysTick>
 8004578:	6238      	str	r0, [r7, #32]
        timeSinceLaunch = currentTime - launchTime;
 800457a:	6a3a      	ldr	r2, [r7, #32]
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	61fb      	str	r3, [r7, #28]

        if (is_soft_enabled()) {
 8004582:	f7fe fd0f 	bl	8002fa4 <is_soft_enabled>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 813a 	beq.w	8004802 <startStateMachine+0x2ca>
            switch (flight_state) {
 800458e:	4bb8      	ldr	r3, [pc, #736]	; (8004870 <startStateMachine+0x338>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b07      	cmp	r3, #7
 8004594:	f200 815d 	bhi.w	8004852 <startStateMachine+0x31a>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <startStateMachine+0x68>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045c1 	.word	0x080045c1
 80045a4:	0800460d 	.word	0x0800460d
 80045a8:	0800468b 	.word	0x0800468b
 80045ac:	080046d3 	.word	0x080046d3
 80045b0:	08004727 	.word	0x08004727
 80045b4:	0800476b 	.word	0x0800476b
 80045b8:	080047db 	.word	0x080047db
 80045bc:	080047fb 	.word	0x080047fb
            case FLIGHT_ERROR:
                // be annoying TODO
                buzzer_beep(BEEP_LONG);
 80045c0:	2032      	movs	r0, #50	; 0x32
 80045c2:	f7fe fd29 	bl	8003018 <buzzer_beep>

                // exit the state once we're no longer armed,
                // if battery voltage is in good state
                // and if there's a squib connected if one is necessary
                changeLed(0, 0, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7ff fe74 	bl	80042b8 <changeLed>
                if (!is_armed() && get_battery_voltage() > BATTERY_EMPTY_LIMIT) {
 80045d0:	f7fe fcc0 	bl	8002f54 <is_armed>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 8130 	bne.w	800483c <startStateMachine+0x304>
 80045dc:	f7fe fc88 	bl	8002ef0 <get_battery_voltage>
 80045e0:	eeb0 7a40 	vmov.f32	s14, s0
 80045e4:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80045e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	dc00      	bgt.n	80045f4 <startStateMachine+0xbc>
                    buzzer_beep(BEEP_SHORT);
                    buzzer_beep(BEEP_SHORT);
                    //set_status_led(ON);
                    flight_state = IDLE;
                }
                break;
 80045f2:	e123      	b.n	800483c <startStateMachine+0x304>
                    buzzer_clear_queue();
 80045f4:	f7fe fd3c 	bl	8003070 <buzzer_clear_queue>
                    buzzer_beep(BEEP_SHORT);
 80045f8:	200c      	movs	r0, #12
 80045fa:	f7fe fd0d 	bl	8003018 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80045fe:	200c      	movs	r0, #12
 8004600:	f7fe fd0a 	bl	8003018 <buzzer_beep>
                    flight_state = IDLE;
 8004604:	4b9a      	ldr	r3, [pc, #616]	; (8004870 <startStateMachine+0x338>)
 8004606:	2202      	movs	r2, #2
 8004608:	701a      	strb	r2, [r3, #0]
                break;
 800460a:	e117      	b.n	800483c <startStateMachine+0x304>

            case SYSTEMS_CHECK:
                // this state is the entry state, it performs startup checking of some peripherals
                changeLed(100, 0, 0);
 800460c:	2200      	movs	r2, #0
 800460e:	2100      	movs	r1, #0
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	f7ff fe51 	bl	80042b8 <changeLed>
                apply_complementary = 1;
 8004616:	4b97      	ldr	r3, [pc, #604]	; (8004874 <startStateMachine+0x33c>)
 8004618:	2201      	movs	r2, #1
 800461a:	701a      	strb	r2, [r3, #0]
                // close the servo if necessary
                servo_writeangle(&deployServo, SERVO_CLOSED_POSITION);
 800461c:	f107 0308 	add.w	r3, r7, #8
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd fa6a 	bl	8001afc <servo_writeangle>
                servo_setting = 1;
 8004628:	4b90      	ldr	r3, [pc, #576]	; (800486c <startStateMachine+0x334>)
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]

                float vbat = get_battery_voltage();
 800462e:	f7fe fc5f 	bl	8002ef0 <get_battery_voltage>
 8004632:	ed87 0a06 	vstr	s0, [r7, #24]

                // enable power to camera/video transmitter
                if (vbat > 7.4) {
 8004636:	69b8      	ldr	r0, [r7, #24]
 8004638:	f7fb ffa6 	bl	8000588 <__aeabi_f2d>
 800463c:	a388      	add	r3, pc, #544	; (adr r3, 8004860 <startStateMachine+0x328>)
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f7fc fa89 	bl	8000b58 <__aeabi_dcmpgt>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <startStateMachine+0x11a>
                    restart_camera_with_recording();
 800464c:	f7fe fd76 	bl	800313c <restart_camera_with_recording>
 8004650:	e001      	b.n	8004656 <startStateMachine+0x11e>
                } else {
                    disable_camera();
 8004652:	f7fe fd53 	bl	80030fc <disable_camera>
                }

                // check if the battery is empty
                if (vbat <= BATTERY_EMPTY_LIMIT) {
 8004656:	edd7 7a06 	vldr	s15, [r7, #24]
 800465a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800465e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004666:	d803      	bhi.n	8004670 <startStateMachine+0x138>
                    flight_state = FLIGHT_ERROR;
 8004668:	4b81      	ldr	r3, [pc, #516]	; (8004870 <startStateMachine+0x338>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
                    break;
 800466e:	e0f0      	b.n	8004852 <startStateMachine+0x31a>
                }

                // if everything's okay, go into idle
                buzzer_beep(BEEP_SHORT);
 8004670:	200c      	movs	r0, #12
 8004672:	f7fe fcd1 	bl	8003018 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 8004676:	200c      	movs	r0, #12
 8004678:	f7fe fcce 	bl	8003018 <buzzer_beep>
                set_status_led(1);
 800467c:	2001      	movs	r0, #1
 800467e:	f7fe fd6f 	bl	8003160 <set_status_led>
                flight_state = IDLE;
 8004682:	4b7b      	ldr	r3, [pc, #492]	; (8004870 <startStateMachine+0x338>)
 8004684:	2202      	movs	r2, #2
 8004686:	701a      	strb	r2, [r3, #0]
                break;
 8004688:	e0e3      	b.n	8004852 <startStateMachine+0x31a>

            case IDLE:
                changeLed(0, 100, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2164      	movs	r1, #100	; 0x64
 800468e:	2000      	movs	r0, #0
 8004690:	f7ff fe12 	bl	80042b8 <changeLed>
                apply_complementary = 1;
 8004694:	4b77      	ldr	r3, [pc, #476]	; (8004874 <startStateMachine+0x33c>)
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
                if (is_armed()) {
 800469a:	f7fe fc5b 	bl	8002f54 <is_armed>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <startStateMachine+0x174>
                    flight_state = FLIGHT_ERROR;
 80046a4:	4b72      	ldr	r3, [pc, #456]	; (8004870 <startStateMachine+0x338>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
                    break;
 80046aa:	e0d2      	b.n	8004852 <startStateMachine+0x31a>
                }

                if (is_breakwire_connected()) {
 80046ac:	f7fe fc86 	bl	8002fbc <is_breakwire_connected>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80c4 	beq.w	8004840 <startStateMachine+0x308>
                    buzzer_beep(BEEP_SHORT);
 80046b8:	200c      	movs	r0, #12
 80046ba:	f7fe fcad 	bl	8003018 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80046be:	200c      	movs	r0, #12
 80046c0:	f7fe fcaa 	bl	8003018 <buzzer_beep>
                    set_status_led(0);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fe fd4b 	bl	8003160 <set_status_led>
                    flight_state = PREPARATION;
 80046ca:	4b69      	ldr	r3, [pc, #420]	; (8004870 <startStateMachine+0x338>)
 80046cc:	2203      	movs	r2, #3
 80046ce:	701a      	strb	r2, [r3, #0]
                    break;
 80046d0:	e0bf      	b.n	8004852 <startStateMachine+0x31a>
                }
                break;

            case PREPARATION:
                changeLed(0, 0, 100);
 80046d2:	2264      	movs	r2, #100	; 0x64
 80046d4:	2100      	movs	r1, #0
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7ff fdee 	bl	80042b8 <changeLed>
                apply_complementary = 1;
 80046dc:	4b65      	ldr	r3, [pc, #404]	; (8004874 <startStateMachine+0x33c>)
 80046de:	2201      	movs	r2, #1
 80046e0:	701a      	strb	r2, [r3, #0]
                if (is_breakwire_broken_debounce()) {
 80046e2:	f7fe fc7d 	bl	8002fe0 <is_breakwire_broken_debounce>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <startStateMachine+0x1c8>
                    buzzer_beep(BEEP_LONG);
 80046ec:	2032      	movs	r0, #50	; 0x32
 80046ee:	f7fe fc93 	bl	8003018 <buzzer_beep>
                    set_status_led(1);
 80046f2:	2001      	movs	r0, #1
 80046f4:	f7fe fd34 	bl	8003160 <set_status_led>
                    flight_state = IDLE;
 80046f8:	4b5d      	ldr	r3, [pc, #372]	; (8004870 <startStateMachine+0x338>)
 80046fa:	2202      	movs	r2, #2
 80046fc:	701a      	strb	r2, [r3, #0]
                    break;
 80046fe:	e0a8      	b.n	8004852 <startStateMachine+0x31a>
                }

                // check arming switch with debouncing
                if (is_armed_debounce()) {
 8004700:	f7fe fc34 	bl	8002f6c <is_armed_debounce>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 809c 	beq.w	8004844 <startStateMachine+0x30c>
                    buzzer_beep(BEEP_SHORT);
 800470c:	200c      	movs	r0, #12
 800470e:	f7fe fc83 	bl	8003018 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 8004712:	200c      	movs	r0, #12
 8004714:	f7fe fc80 	bl	8003018 <buzzer_beep>
                    set_status_led(1);
 8004718:	2001      	movs	r0, #1
 800471a:	f7fe fd21 	bl	8003160 <set_status_led>
                    flight_state = ARMED;
 800471e:	4b54      	ldr	r3, [pc, #336]	; (8004870 <startStateMachine+0x338>)
 8004720:	2204      	movs	r2, #4
 8004722:	701a      	strb	r2, [r3, #0]
                }
                break;
 8004724:	e08e      	b.n	8004844 <startStateMachine+0x30c>

            case ARMED:
                changeLed(100, 100, 0);
 8004726:	2200      	movs	r2, #0
 8004728:	2164      	movs	r1, #100	; 0x64
 800472a:	2064      	movs	r0, #100	; 0x64
 800472c:	f7ff fdc4 	bl	80042b8 <changeLed>
                apply_complementary = 1;
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <startStateMachine+0x33c>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
                if (!is_armed()) {
 8004736:	f7fe fc0d 	bl	8002f54 <is_armed>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <startStateMachine+0x21c>
                    buzzer_beep(BEEP_LONG);
 8004740:	2032      	movs	r0, #50	; 0x32
 8004742:	f7fe fc69 	bl	8003018 <buzzer_beep>
                    set_status_led(0);
 8004746:	2000      	movs	r0, #0
 8004748:	f7fe fd0a 	bl	8003160 <set_status_led>
                    flight_state = PREPARATION;
 800474c:	4b48      	ldr	r3, [pc, #288]	; (8004870 <startStateMachine+0x338>)
 800474e:	2203      	movs	r2, #3
 8004750:	701a      	strb	r2, [r3, #0]
                    break;
 8004752:	e07e      	b.n	8004852 <startStateMachine+0x31a>
                }

                if (is_breakwire_broken_debounce()) {
 8004754:	f7fe fc44 	bl	8002fe0 <is_breakwire_broken_debounce>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d074      	beq.n	8004848 <startStateMachine+0x310>
                    //reset_timer();

                    launchTime = currentTime;
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	627b      	str	r3, [r7, #36]	; 0x24

                    //set_launch_asserted(ON);
                    flight_state = LAUNCHED;
 8004762:	4b43      	ldr	r3, [pc, #268]	; (8004870 <startStateMachine+0x338>)
 8004764:	2205      	movs	r2, #5
 8004766:	701a      	strb	r2, [r3, #0]
                    break;
 8004768:	e073      	b.n	8004852 <startStateMachine+0x31a>
                }
                break;

            case LAUNCHED:
                changeLed(100, 100, 100);
 800476a:	2264      	movs	r2, #100	; 0x64
 800476c:	2164      	movs	r1, #100	; 0x64
 800476e:	2064      	movs	r0, #100	; 0x64
 8004770:	f7ff fda2 	bl	80042b8 <changeLed>
                apply_complementary = 0;
 8004774:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <startStateMachine+0x33c>)
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
                buzzer_beep(BEEP_SHORT);
 800477a:	200c      	movs	r0, #12
 800477c:	f7fe fc4c 	bl	8003018 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 8004780:	200c      	movs	r0, #12
 8004782:	f7fe fc49 	bl	8003018 <buzzer_beep>

                if (timeSinceLaunch >= MAX_DEPLOY_TIME
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f243 62af 	movw	r2, #13999	; 0x36af
 800478c:	4293      	cmp	r3, r2
 800478e:	d809      	bhi.n	80047a4 <startStateMachine+0x26c>
                        || (timeSinceLaunch >= MIN_DEPLOY_TIME
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f242 720f 	movw	r2, #9999	; 0x270f
 8004796:	4293      	cmp	r3, r2
 8004798:	d958      	bls.n	800484c <startStateMachine+0x314>
                                && is_vote_asserted())) {
 800479a:	f7fe fcec 	bl	8003176 <is_vote_asserted>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d053      	beq.n	800484c <startStateMachine+0x314>

                    if (is_armed()) {
 80047a4:	f7fe fbd6 	bl	8002f54 <is_armed>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <startStateMachine+0x29a>
                        servo_writeangle(&deployServo, SERVO_DEPLOY_POSITION);
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	21b4      	movs	r1, #180	; 0xb4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd f9a1 	bl	8001afc <servo_writeangle>
                        servo_setting = 2;
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <startStateMachine+0x334>)
 80047bc:	2202      	movs	r2, #2
 80047be:	701a      	strb	r2, [r3, #0]

                        last_logged_deploy_time = timeSinceLaunch;
 80047c0:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <startStateMachine+0x340>)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	6013      	str	r3, [r2, #0]
                        buzzer_clear_queue();
 80047c6:	f7fe fc53 	bl	8003070 <buzzer_clear_queue>
                        flight_state = DEPLOYED;
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <startStateMachine+0x338>)
 80047cc:	2206      	movs	r2, #6
 80047ce:	701a      	strb	r2, [r3, #0]
                        break;
 80047d0:	e03f      	b.n	8004852 <startStateMachine+0x31a>
                    } else { // go back to systems check if rearmed
                        flight_state = SYSTEMS_CHECK;
 80047d2:	4b27      	ldr	r3, [pc, #156]	; (8004870 <startStateMachine+0x338>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
                        break;
 80047d8:	e03b      	b.n	8004852 <startStateMachine+0x31a>
                    }
                }
                break;

            case DEPLOYED:
                changeLed(100, 0, 100);
 80047da:	2264      	movs	r2, #100	; 0x64
 80047dc:	2100      	movs	r1, #0
 80047de:	2064      	movs	r0, #100	; 0x64
 80047e0:	f7ff fd6a 	bl	80042b8 <changeLed>
                buzzer_beep(BEEP_LONG);
 80047e4:	2032      	movs	r0, #50	; 0x32
 80047e6:	f7fe fc17 	bl	8003018 <buzzer_beep>

                if (timeSinceLaunch > 240000) {
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <startStateMachine+0x344>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d92e      	bls.n	8004850 <startStateMachine+0x318>
                    flight_state = LANDED;
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <startStateMachine+0x338>)
 80047f4:	2207      	movs	r2, #7
 80047f6:	701a      	strb	r2, [r3, #0]
                }

                break;
 80047f8:	e02a      	b.n	8004850 <startStateMachine+0x318>

            case LANDED:
                disable_camera();
 80047fa:	f7fe fc7f 	bl	80030fc <disable_camera>
                break;
 80047fe:	bf00      	nop
 8004800:	e027      	b.n	8004852 <startStateMachine+0x31a>
            }
        } else {
            // when "soft on/off switch" is off. Play some music and disable everything
            apply_complementary = 1;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <startStateMachine+0x33c>)
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
            changeLed(100, 0, 0);
 8004808:	2200      	movs	r2, #0
 800480a:	2100      	movs	r1, #0
 800480c:	2064      	movs	r0, #100	; 0x64
 800480e:	f7ff fd53 	bl	80042b8 <changeLed>
            buzzer_setting = KSP_MAIN;
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <startStateMachine+0x348>)
 8004814:	2201      	movs	r2, #1
 8004816:	701a      	strb	r2, [r3, #0]
            flight_state = SYSTEMS_CHECK;
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <startStateMachine+0x338>)
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
            servo_disable(&deployServo);
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd f98c 	bl	8001b40 <servo_disable>
            servo_setting = 0;
 8004828:	4b10      	ldr	r3, [pc, #64]	; (800486c <startStateMachine+0x334>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
            baro.basepressure = baro.pressure_Pa; // Continously "zero out" altitude when soft off
 800482e:	4b15      	ldr	r3, [pc, #84]	; (8004884 <startStateMachine+0x34c>)
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <startStateMachine+0x34c>)
 8004834:	6313      	str	r3, [r2, #48]	; 0x30
            disable_camera();
 8004836:	f7fe fc61 	bl	80030fc <disable_camera>
 800483a:	e00a      	b.n	8004852 <startStateMachine+0x31a>
                break;
 800483c:	bf00      	nop
 800483e:	e008      	b.n	8004852 <startStateMachine+0x31a>
                break;
 8004840:	bf00      	nop
 8004842:	e006      	b.n	8004852 <startStateMachine+0x31a>
                break;
 8004844:	bf00      	nop
 8004846:	e004      	b.n	8004852 <startStateMachine+0x31a>
                break;
 8004848:	bf00      	nop
 800484a:	e002      	b.n	8004852 <startStateMachine+0x31a>
                break;
 800484c:	bf00      	nop
 800484e:	e000      	b.n	8004852 <startStateMachine+0x31a>
                break;
 8004850:	bf00      	nop
        }
        osDelay(1);
 8004852:	2001      	movs	r0, #1
 8004854:	f00b f914 	bl	800fa80 <osDelay>
        currentTime = osKernelSysTick();
 8004858:	e68c      	b.n	8004574 <startStateMachine+0x3c>
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w
 8004860:	9999999a 	.word	0x9999999a
 8004864:	401d9999 	.word	0x401d9999
 8004868:	200049d0 	.word	0x200049d0
 800486c:	20000878 	.word	0x20000878
 8004870:	20000000 	.word	0x20000000
 8004874:	2000027c 	.word	0x2000027c
 8004878:	2000087c 	.word	0x2000087c
 800487c:	0003a980 	.word	0x0003a980
 8004880:	20000001 	.word	0x20000001
 8004884:	200048fc 	.word	0x200048fc

08004888 <StartTelemTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemTask */
void StartTelemTask(void const * argument)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b0af      	sub	sp, #188	; 0xbc
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemTask */
    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8004890:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004898:	4a89      	ldr	r2, [pc, #548]	; (8004ac0 <StartTelemTask+0x238>)
 800489a:	498a      	ldr	r1, [pc, #552]	; (8004ac4 <StartTelemTask+0x23c>)
 800489c:	f7fd f9b4 	bl	8001c08 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 80048a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80048a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048a8:	4987      	ldr	r1, [pc, #540]	; (8004ac8 <StartTelemTask+0x240>)
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd fa0c 	bl	8001cc8 <sxSetDio1Pin>

    SetTxParams(&radio, 0x1F, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
 80048b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80048b4:	22e0      	movs	r2, #224	; 0xe0
 80048b6:	211f      	movs	r1, #31
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fd fa59 	bl	8001d70 <SetTxParams>
    //SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
    osDelay(3);
 80048be:	2003      	movs	r0, #3
 80048c0:	f00b f8de 	bl	800fa80 <osDelay>

    //lsm6dso imu;
    //uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,SPI2_NSS_Pin);

    uint32_t counter = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    TLM_dec.packet_type = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    TLM_dec.flight_state = 4;
 80048d0:	2304      	movs	r3, #4
 80048d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    TLM_dec.is_playing_music = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    TLM_dec.is_data_logging = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    TLM_dec.pin_states = 0b00011011;
 80048e2:	231b      	movs	r3, #27
 80048e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    TLM_dec.servo_state = 3;
 80048e8:	2303      	movs	r3, #3
 80048ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    TLM_dec.vbat = 7.283;
 80048ee:	4b77      	ldr	r3, [pc, #476]	; (8004acc <StartTelemTask+0x244>)
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
    TLM_dec.systick = 1232432;
 80048f2:	4b77      	ldr	r3, [pc, #476]	; (8004ad0 <StartTelemTask+0x248>)
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
    TLM_dec.orientation_quat[0] = 0.143123;
 80048f6:	4b77      	ldr	r3, [pc, #476]	; (8004ad4 <StartTelemTask+0x24c>)
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    TLM_dec.acc[2] = 1337;
 80048fa:	f240 5339 	movw	r3, #1337	; 0x539
 80048fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    TLM_dec.gyro[2] = -21;
 8004902:	f64f 73eb 	movw	r3, #65515	; 0xffeb
 8004906:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    TLM_dec.baro = 90001.623;
 800490a:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <StartTelemTask+0x250>)
 800490c:	65bb      	str	r3, [r7, #88]	; 0x58
    TLM_dec.temp = 63.4;
 800490e:	4b73      	ldr	r3, [pc, #460]	; (8004adc <StartTelemTask+0x254>)
 8004910:	65fb      	str	r3, [r7, #92]	; 0x5c
    TLM_dec.vertical_velocity = 180;
 8004912:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <StartTelemTask+0x258>)
 8004914:	667b      	str	r3, [r7, #100]	; 0x64
    TLM_dec.altitude = 1321;
 8004916:	4b73      	ldr	r3, [pc, #460]	; (8004ae4 <StartTelemTask+0x25c>)
 8004918:	663b      	str	r3, [r7, #96]	; 0x60
    TLM_dec.debug = 1337;
 800491a:	f240 5339 	movw	r3, #1337	; 0x539
 800491e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    TLM_dec.ranging = 15212;
 8004922:	4b71      	ldr	r3, [pc, #452]	; (8004ae8 <StartTelemTask+0x260>)
 8004924:	66fb      	str	r3, [r7, #108]	; 0x6c

    encode_TLM(&TLM_dec, &TLM_enc);
 8004926:	f107 020c 	add.w	r2, r7, #12
 800492a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800492e:	4611      	mov	r1, r2
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd fbf1 	bl	8002118 <encode_TLM>

    WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 8004936:	f107 020c 	add.w	r2, r7, #12
 800493a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800493e:	231f      	movs	r3, #31
 8004940:	2100      	movs	r1, #0
 8004942:	f7fd fa8e 	bl	8001e62 <WriteBuffer>
    osDelay(1);
 8004946:	2001      	movs	r0, #1
 8004948:	f00b f89a 	bl	800fa80 <osDelay>

    SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 800494c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004950:	2300      	movs	r3, #0
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	2201      	movs	r2, #1
 8004958:	2101      	movs	r1, #1
 800495a:	f7fd faeb 	bl	8001f34 <SetDioIrqParams>

    osDelay(3);
 800495e:	2003      	movs	r0, #3
 8004960:	f00b f88e 	bl	800fa80 <osDelay>

    uint32_t lasttime = HAL_GetTick();
 8004964:	f001 f814 	bl	8005990 <HAL_GetTick>
 8004968:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    uint32_t nowtime = HAL_GetTick();
 800496c:	f001 f810 	bl	8005990 <HAL_GetTick>
 8004970:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        //changeLed(0, 0, 100);
        //nowtime = HAL_GetTick();
        //dt = (nowtime - lasttime) / 1000.0;
        //lasttime = nowtime;

        counter++;
 8004974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004978:	3301      	adds	r3, #1
 800497a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        for (int i = 0; i < 10; i++) {
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004984:	e00f      	b.n	80049a6 <StartTelemTask+0x11e>
            if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8004986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800498a:	484f      	ldr	r0, [pc, #316]	; (8004ac8 <StartTelemTask+0x240>)
 800498c:	f002 f9da 	bl	8006d44 <HAL_GPIO_ReadPin>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <StartTelemTask+0x128>
                break;
            }
            osDelay(5);
 8004996:	2005      	movs	r0, #5
 8004998:	f00b f872 	bl	800fa80 <osDelay>
        for (int i = 0; i < 10; i++) {
 800499c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049a0:	3301      	adds	r3, #1
 80049a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049aa:	2b09      	cmp	r3, #9
 80049ac:	ddeb      	ble.n	8004986 <StartTelemTask+0xfe>
 80049ae:	e000      	b.n	80049b2 <StartTelemTask+0x12a>
                break;
 80049b0:	bf00      	nop
        }

        TLM_dec.vbat = get_battery_voltage();
 80049b2:	f7fe fa9d 	bl	8002ef0 <get_battery_voltage>
 80049b6:	eef0 7a40 	vmov.f32	s15, s0
 80049ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        TLM_dec.systick = osKernelSysTick();
 80049be:	f00b f803 	bl	800f9c8 <osKernelSysTick>
 80049c2:	4603      	mov	r3, r0
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
        TLM_dec.acc[0] = imu.rawAcc[0];
 80049c6:	4b49      	ldr	r3, [pc, #292]	; (8004aec <StartTelemTask+0x264>)
 80049c8:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80049cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        TLM_dec.acc[1] = imu.rawAcc[1];
 80049d0:	4b46      	ldr	r3, [pc, #280]	; (8004aec <StartTelemTask+0x264>)
 80049d2:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80049d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        TLM_dec.acc[2] = imu.rawAcc[2];
 80049da:	4b44      	ldr	r3, [pc, #272]	; (8004aec <StartTelemTask+0x264>)
 80049dc:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80049e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        TLM_dec.gyro[0] = imu.rawGyro[0];
 80049e4:	4b41      	ldr	r3, [pc, #260]	; (8004aec <StartTelemTask+0x264>)
 80049e6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80049ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        TLM_dec.gyro[1] = imu.rawGyro[1];
 80049ee:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <StartTelemTask+0x264>)
 80049f0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80049f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        TLM_dec.gyro[2] = imu.rawGyro[2];
 80049f8:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <StartTelemTask+0x264>)
 80049fa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80049fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        TLM_dec.orientation_quat[0] = ori.orientationQuat.w;
 8004a02:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <StartTelemTask+0x268>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        TLM_dec.orientation_quat[1] = ori.orientationQuat.v[0];
 8004a08:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <StartTelemTask+0x268>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
        TLM_dec.orientation_quat[2] = ori.orientationQuat.v[1];
 8004a0e:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <StartTelemTask+0x268>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
        TLM_dec.orientation_quat[3] = ori.orientationQuat.v[2];
 8004a14:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <StartTelemTask+0x268>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	64bb      	str	r3, [r7, #72]	; 0x48
        // SPL06_Read(&baro);
        TLM_dec.baro = baro.pressure_Pa;
 8004a1a:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <StartTelemTask+0x26c>)
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	65bb      	str	r3, [r7, #88]	; 0x58
        TLM_dec.temp = baro.temperature_C;
 8004a20:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <StartTelemTask+0x26c>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	65fb      	str	r3, [r7, #92]	; 0x5c
        TLM_dec.altitude = baro.altitude;
 8004a26:	4b33      	ldr	r3, [pc, #204]	; (8004af4 <StartTelemTask+0x26c>)
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	663b      	str	r3, [r7, #96]	; 0x60
        TLM_dec.flight_state = flight_state;
 8004a2c:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <StartTelemTask+0x270>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        TLM_dec.pin_states = (is_soft_enabled()) | (is_armed() << 1) | (is_breakwire_connected() << 2) | (is_camera_on << 3);
 8004a34:	f7fe fab6 	bl	8002fa4 <is_soft_enabled>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	b25c      	sxtb	r4, r3
 8004a3c:	f7fe fa8a 	bl	8002f54 <is_armed>
 8004a40:	4603      	mov	r3, r0
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	4323      	orrs	r3, r4
 8004a48:	b25c      	sxtb	r4, r3
 8004a4a:	f7fe fab7 	bl	8002fbc <is_breakwire_connected>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	4323      	orrs	r3, r4
 8004a56:	b25a      	sxtb	r2, r3
 8004a58:	4b28      	ldr	r3, [pc, #160]	; (8004afc <StartTelemTask+0x274>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        TLM_dec.servo_state = servo_setting;
 8004a6a:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <StartTelemTask+0x278>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        //        data[1], data[2], data[3]);
        //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
        //CDC_Transmit_FS((uint8_t*) printBuffer,
        //        MIN(strlen(printBuffer), 128));

        encode_TLM(&TLM_dec, &TLM_enc);
 8004a72:	f107 020c 	add.w	r2, r7, #12
 8004a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fd fb4b 	bl	8002118 <encode_TLM>
        WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 8004a82:	f107 020c 	add.w	r2, r7, #12
 8004a86:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004a8a:	231f      	movs	r3, #31
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	f7fd f9e8 	bl	8001e62 <WriteBuffer>
        //WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
        osDelay(1);
 8004a92:	2001      	movs	r0, #1
 8004a94:	f00a fff4 	bl	800fa80 <osDelay>
        ClrIrqStatus(&radio, 1); // clear txdone irq
 8004a98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd fa82 	bl	8001fa8 <ClrIrqStatus>
        osDelay(1);
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	f00a ffeb 	bl	800fa80 <osDelay>
        SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 8004aaa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004aae:	2232      	movs	r2, #50	; 0x32
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fa93 	bl	8001fde <SetTx>

        osDelay(10);
 8004ab8:	200a      	movs	r0, #10
 8004aba:	f00a ffe1 	bl	800fa80 <osDelay>
        counter++;
 8004abe:	e759      	b.n	8004974 <StartTelemTask+0xec>
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	20004858 	.word	0x20004858
 8004ac8:	40020800 	.word	0x40020800
 8004acc:	40e90e56 	.word	0x40e90e56
 8004ad0:	0012ce30 	.word	0x0012ce30
 8004ad4:	3e128ed6 	.word	0x3e128ed6
 8004ad8:	47afc8d0 	.word	0x47afc8d0
 8004adc:	427d999a 	.word	0x427d999a
 8004ae0:	43340000 	.word	0x43340000
 8004ae4:	44a52000 	.word	0x44a52000
 8004ae8:	466db000 	.word	0x466db000
 8004aec:	20004734 	.word	0x20004734
 8004af0:	200045ec 	.word	0x200045ec
 8004af4:	200048fc 	.word	0x200048fc
 8004af8:	20000000 	.word	0x20000000
 8004afc:	20000881 	.word	0x20000881
 8004b00:	20000878 	.word	0x20000878

08004b04 <StartBaroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBaroTask */
void StartBaroTask(void const * argument)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBaroTask */
  /* Infinite loop */
    uint32_t counter = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
    for (;;) {
        float dt = ((float) __HAL_TIM_GET_COUNTER(&htim6))/1000000;
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <StartBaroTask+0x74>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b1e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004b7c <StartBaroTask+0x78>
 8004b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b26:	edc7 7a02 	vstr	s15, [r7, #8]
        __HAL_TIM_SET_COUNTER(&htim6,0);
 8004b2a:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <StartBaroTask+0x74>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
        orientation_setGyro(&ori, imu.gyroRPS);
 8004b32:	4913      	ldr	r1, [pc, #76]	; (8004b80 <StartBaroTask+0x7c>)
 8004b34:	4813      	ldr	r0, [pc, #76]	; (8004b84 <StartBaroTask+0x80>)
 8004b36:	f000 f926 	bl	8004d86 <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 8004b3a:	4913      	ldr	r1, [pc, #76]	; (8004b88 <StartBaroTask+0x84>)
 8004b3c:	4811      	ldr	r0, [pc, #68]	; (8004b84 <StartBaroTask+0x80>)
 8004b3e:	f000 f939 	bl	8004db4 <orientation_setAcc>
        orientation_update(&ori, dt, apply_complementary);
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <StartBaroTask+0x88>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	4619      	mov	r1, r3
 8004b48:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b4c:	480d      	ldr	r0, [pc, #52]	; (8004b84 <StartBaroTask+0x80>)
 8004b4e:	f000 f94b 	bl	8004de8 <orientation_update>
        if (counter % 50 == 0) { // 20 Hz
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <StartBaroTask+0x8c>)
 8004b56:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	2132      	movs	r1, #50	; 0x32
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <StartBaroTask+0x6a>
            SPL06_Read(&baro);
 8004b68:	480a      	ldr	r0, [pc, #40]	; (8004b94 <StartBaroTask+0x90>)
 8004b6a:	f7fc fecb 	bl	8001904 <SPL06_Read>
        }
        osDelay(1);
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f00a ff86 	bl	800fa80 <osDelay>
    for (;;) {
 8004b74:	e7cc      	b.n	8004b10 <StartBaroTask+0xc>
 8004b76:	bf00      	nop
 8004b78:	20004934 	.word	0x20004934
 8004b7c:	49742400 	.word	0x49742400
 8004b80:	2000476c 	.word	0x2000476c
 8004b84:	200045ec 	.word	0x200045ec
 8004b88:	20004798 	.word	0x20004798
 8004b8c:	2000027c 	.word	0x2000027c
 8004b90:	51eb851f 	.word	0x51eb851f
 8004b94:	200048fc 	.word	0x200048fc

08004b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004baa:	f000 fedd 	bl	8005968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000

08004bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bc0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8004bc2:	e7fe      	b.n	8004bc2 <Error_Handler+0x6>

08004bc4 <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	ed93 7a00 	vldr	s14, [r3]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3308      	adds	r3, #8
 8004bdc:	edd3 7a00 	vldr	s15, [r3]
 8004be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3308      	adds	r3, #8
 8004be8:	edd3 6a00 	vldr	s13, [r3]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	edd3 7a00 	vldr	s15, [r3]
 8004bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3308      	adds	r3, #8
 8004c06:	ed93 7a00 	vldr	s14, [r3]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	edd3 7a00 	vldr	s15, [r3]
 8004c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	edd3 6a00 	vldr	s13, [r3]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	edd3 7a00 	vldr	s15, [r3]
 8004c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c2e:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	ed93 7a00 	vldr	s14, [r3]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	edd3 7a00 	vldr	s15, [r3]
 8004c40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3304      	adds	r3, #4
 8004c48:	edd3 6a00 	vldr	s13, [r3]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	edd3 7a00 	vldr	s15, [r3]
 8004c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3308      	adds	r3, #8
 8004c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c5e:	edc3 7a00 	vstr	s15, [r3]
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	ed93 7a00 	vldr	s14, [r3]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	edd3 7a00 	vldr	s15, [r3]
 8004c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3304      	adds	r3, #4
 8004c94:	ed93 7a00 	vldr	s14, [r3]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	edd3 7a00 	vldr	s15, [r3]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca8:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	ed93 7a00 	vldr	s14, [r3]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	edd3 7a00 	vldr	s15, [r3]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc4:	edc3 7a00 	vstr	s15, [r3]
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	ed93 7a00 	vldr	s14, [r3]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	edd3 7a00 	vldr	s15, [r3]
 8004ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	edd3 6a00 	vldr	s13, [r3]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	edd3 7a00 	vldr	s15, [r3]
 8004cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3308      	adds	r3, #8
 8004d08:	edd3 6a00 	vldr	s13, [r3]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	edd3 7a00 	vldr	s15, [r3]
 8004d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d18:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <orientation_init>:

void orientation_init(Orientation *ori) {
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd fc21 	bl	800257c <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3370      	adds	r3, #112	; 0x70
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd fc1c 	bl	800257c <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3360      	adds	r3, #96	; 0x60
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd fc17 	bl	800257c <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004d64:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[2];
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[0];
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[1];
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[2];
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[0];
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[1];
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	0000      	movs	r0, r0
 8004de4:	0000      	movs	r0, r0
	...

08004de8 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt, uint8_t apply_complementary) {
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b091      	sub	sp, #68	; 0x44
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004df4:	460b      	mov	r3, r1
 8004df6:	71fb      	strb	r3, [r7, #7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3348      	adds	r3, #72	; 0x48
 8004e04:	461a      	mov	r2, r3
 8004e06:	f7fd fe13 	bl	8002a30 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3354      	adds	r3, #84	; 0x54
 8004e14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f7ff fed3 	bl	8004bc4 <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3310      	adds	r3, #16
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7fd fd0e 	bl	8002848 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3310      	adds	r3, #16
 8004e30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004e34:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fd fdf9 	bl	8002a30 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fba1 	bl	8000588 <__aeabi_f2d>
 8004e46:	a348      	add	r3, pc, #288	; (adr r3, 8004f68 <orientation_update+0x180>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb fbf4 	bl	8000638 <__aeabi_dmul>
 8004e50:	4603      	mov	r3, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	4618      	mov	r0, r3
 8004e56:	4621      	mov	r1, r4
 8004e58:	f7fb fee6 	bl	8000c28 <__aeabi_d2f>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
    correctionBody[1] = correctionBody[1] * 0.1;
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fb90 	bl	8000588 <__aeabi_f2d>
 8004e68:	a33f      	add	r3, pc, #252	; (adr r3, 8004f68 <orientation_update+0x180>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fbe3 	bl	8000638 <__aeabi_dmul>
 8004e72:	4603      	mov	r3, r0
 8004e74:	460c      	mov	r4, r1
 8004e76:	4618      	mov	r0, r3
 8004e78:	4621      	mov	r1, r4
 8004e7a:	f7fb fed5 	bl	8000c28 <__aeabi_d2f>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
    correctionBody[2] = correctionBody[2] * 0.1;
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fb7f 	bl	8000588 <__aeabi_f2d>
 8004e8a:	a337      	add	r3, pc, #220	; (adr r3, 8004f68 <orientation_update+0x180>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb fbd2 	bl	8000638 <__aeabi_dmul>
 8004e94:	4603      	mov	r3, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	4618      	mov	r0, r3
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	f7fb fec4 	bl	8000c28 <__aeabi_d2f>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	333c      	adds	r3, #60	; 0x3c
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ff13 	bl	8004cd4 <vector_lenSquared>
 8004eae:	ee10 3a10 	vmov	r3, s0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb fb68 	bl	8000588 <__aeabi_f2d>
 8004eb8:	a32d      	add	r3, pc, #180	; (adr r3, 8004f70 <orientation_update+0x188>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f7fb fce5 	bl	800088c <__aeabi_ddiv>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f7fb fead 	bl	8000c28 <__aeabi_d2f>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (GsSquared > 0.81 && GsSquared < 1.21 && apply_complementary) {
 8004ed2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ed4:	f7fb fb58 	bl	8000588 <__aeabi_f2d>
 8004ed8:	a327      	add	r3, pc, #156	; (adr r3, 8004f78 <orientation_update+0x190>)
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	f7fb fe3b 	bl	8000b58 <__aeabi_dcmpgt>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d018      	beq.n	8004f1a <orientation_update+0x132>
 8004ee8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004eea:	f7fb fb4d 	bl	8000588 <__aeabi_f2d>
 8004eee:	a324      	add	r3, pc, #144	; (adr r3, 8004f80 <orientation_update+0x198>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fe12 	bl	8000b1c <__aeabi_dcmplt>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <orientation_update+0x132>
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <orientation_update+0x132>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7ff feaa 	bl	8004c6e <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3320      	adds	r3, #32
 8004f24:	4619      	mov	r1, r3
 8004f26:	ed97 0a02 	vldr	s0, [r7, #8]
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fd ff08 	bl	8002d40 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3320      	adds	r3, #32
 8004f36:	f107 0214 	add.w	r2, r7, #20
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f7fd fcb8 	bl	80028b0 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	f107 0314 	add.w	r3, r7, #20
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fd fb3b 	bl	80025c4 <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3380      	adds	r3, #128	; 0x80
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7fd fb56 	bl	8002608 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 8004f5c:	bf00      	nop
 8004f5e:	3744      	adds	r7, #68	; 0x44
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd90      	pop	{r4, r7, pc}
 8004f64:	f3af 8000 	nop.w
 8004f68:	9999999a 	.word	0x9999999a
 8004f6c:	3fb99999 	.word	0x3fb99999
 8004f70:	9339d914 	.word	0x9339d914
 8004f74:	40580ae7 	.word	0x40580ae7
 8004f78:	1eb851ec 	.word	0x1eb851ec
 8004f7c:	3fe9eb85 	.word	0x3fe9eb85
 8004f80:	f5c28f5c 	.word	0xf5c28f5c
 8004f84:	3ff35c28 	.word	0x3ff35c28

08004f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <HAL_MspInit+0x54>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <HAL_MspInit+0x54>)
 8004f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <HAL_MspInit+0x54>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_MspInit+0x54>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <HAL_MspInit+0x54>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <HAL_MspInit+0x54>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	210f      	movs	r1, #15
 8004fca:	f06f 0001 	mvn.w	r0, #1
 8004fce:	f001 f98f 	bl	80062f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023800 	.word	0x40023800

08004fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	; 0x28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	609a      	str	r2, [r3, #8]
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a17      	ldr	r2, [pc, #92]	; (800505c <HAL_ADC_MspInit+0x7c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d127      	bne.n	8005052 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_ADC_MspInit+0x80>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <HAL_ADC_MspInit+0x80>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6453      	str	r3, [r2, #68]	; 0x44
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_ADC_MspInit+0x80>)
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_ADC_MspInit+0x80>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_ADC_MspInit+0x80>)
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	6313      	str	r3, [r2, #48]	; 0x30
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_ADC_MspInit+0x80>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 800503a:	2304      	movs	r3, #4
 800503c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800503e:	2303      	movs	r3, #3
 8005040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8005046:	f107 0314 	add.w	r3, r7, #20
 800504a:	4619      	mov	r1, r3
 800504c:	4805      	ldr	r0, [pc, #20]	; (8005064 <HAL_ADC_MspInit+0x84>)
 800504e:	f001 fce7 	bl	8006a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005052:	bf00      	nop
 8005054:	3728      	adds	r7, #40	; 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40012000 	.word	0x40012000
 8005060:	40023800 	.word	0x40023800
 8005064:	40020800 	.word	0x40020800

08005068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a29      	ldr	r2, [pc, #164]	; (800512c <HAL_I2C_MspInit+0xc4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d14b      	bne.n	8005122 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	4b28      	ldr	r3, [pc, #160]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	4a27      	ldr	r2, [pc, #156]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 8005094:	f043 0304 	orr.w	r3, r3, #4
 8005098:	6313      	str	r3, [r2, #48]	; 0x30
 800509a:	4b25      	ldr	r3, [pc, #148]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	4b21      	ldr	r3, [pc, #132]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	4a20      	ldr	r2, [pc, #128]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6313      	str	r3, [r2, #48]	; 0x30
 80050b6:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050c8:	2312      	movs	r3, #18
 80050ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050cc:	2301      	movs	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d0:	2303      	movs	r3, #3
 80050d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050d4:	2304      	movs	r3, #4
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	4619      	mov	r1, r3
 80050de:	4815      	ldr	r0, [pc, #84]	; (8005134 <HAL_I2C_MspInit+0xcc>)
 80050e0:	f001 fc9e 	bl	8006a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050ea:	2312      	movs	r3, #18
 80050ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f2:	2303      	movs	r3, #3
 80050f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050f6:	2304      	movs	r3, #4
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fa:	f107 0314 	add.w	r3, r7, #20
 80050fe:	4619      	mov	r1, r3
 8005100:	480d      	ldr	r0, [pc, #52]	; (8005138 <HAL_I2C_MspInit+0xd0>)
 8005102:	f001 fc8d 	bl	8006a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 8005110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005114:	6413      	str	r3, [r2, #64]	; 0x40
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_I2C_MspInit+0xc8>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005122:	bf00      	nop
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40005c00 	.word	0x40005c00
 8005130:	40023800 	.word	0x40023800
 8005134:	40020800 	.word	0x40020800
 8005138:	40020000 	.word	0x40020000

0800513c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4aa1      	ldr	r2, [pc, #644]	; (80053e0 <HAL_SPI_MspInit+0x2a4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d15b      	bne.n	8005216 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	623b      	str	r3, [r7, #32]
 8005162:	4ba0      	ldr	r3, [pc, #640]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	4a9f      	ldr	r2, [pc, #636]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800516c:	6453      	str	r3, [r2, #68]	; 0x44
 800516e:	4b9d      	ldr	r3, [pc, #628]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005176:	623b      	str	r3, [r7, #32]
 8005178:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	4b99      	ldr	r3, [pc, #612]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	4a98      	ldr	r2, [pc, #608]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6313      	str	r3, [r2, #48]	; 0x30
 800518a:	4b96      	ldr	r3, [pc, #600]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005196:	23e0      	movs	r3, #224	; 0xe0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519a:	2302      	movs	r3, #2
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a2:	2303      	movs	r3, #3
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051a6:	2305      	movs	r3, #5
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ae:	4619      	mov	r1, r3
 80051b0:	488d      	ldr	r0, [pc, #564]	; (80053e8 <HAL_SPI_MspInit+0x2ac>)
 80051b2:	f001 fc35 	bl	8006a20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80051b6:	4b8d      	ldr	r3, [pc, #564]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051b8:	4a8d      	ldr	r2, [pc, #564]	; (80053f0 <HAL_SPI_MspInit+0x2b4>)
 80051ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80051bc:	4b8b      	ldr	r3, [pc, #556]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051be:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80051c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051c4:	4b89      	ldr	r3, [pc, #548]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ca:	4b88      	ldr	r3, [pc, #544]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051d0:	4b86      	ldr	r3, [pc, #536]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051d8:	4b84      	ldr	r3, [pc, #528]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051da:	2200      	movs	r2, #0
 80051dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051de:	4b83      	ldr	r3, [pc, #524]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80051e4:	4b81      	ldr	r3, [pc, #516]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80051ea:	4b80      	ldr	r3, [pc, #512]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051f2:	4b7e      	ldr	r3, [pc, #504]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80051f8:	487c      	ldr	r0, [pc, #496]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 80051fa:	f001 f8a3 	bl	8006344 <HAL_DMA_Init>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8005204:	f7ff fcda 	bl	8004bbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a78      	ldr	r2, [pc, #480]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 800520c:	649a      	str	r2, [r3, #72]	; 0x48
 800520e:	4a77      	ldr	r2, [pc, #476]	; (80053ec <HAL_SPI_MspInit+0x2b0>)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005214:	e0df      	b.n	80053d6 <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI2)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a76      	ldr	r2, [pc, #472]	; (80053f4 <HAL_SPI_MspInit+0x2b8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	f040 808a 	bne.w	8005336 <HAL_SPI_MspInit+0x1fa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	4b6f      	ldr	r3, [pc, #444]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a6e      	ldr	r2, [pc, #440]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 800522c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
 8005232:	4b6c      	ldr	r3, [pc, #432]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	4b68      	ldr	r3, [pc, #416]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	4a67      	ldr	r2, [pc, #412]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005248:	f043 0302 	orr.w	r3, r3, #2
 800524c:	6313      	str	r3, [r2, #48]	; 0x30
 800524e:	4b65      	ldr	r3, [pc, #404]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800525a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005260:	2302      	movs	r3, #2
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005264:	2300      	movs	r3, #0
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005268:	2303      	movs	r3, #3
 800526a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800526c:	2305      	movs	r3, #5
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005274:	4619      	mov	r1, r3
 8005276:	4860      	ldr	r0, [pc, #384]	; (80053f8 <HAL_SPI_MspInit+0x2bc>)
 8005278:	f001 fbd2 	bl	8006a20 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800527c:	4b5f      	ldr	r3, [pc, #380]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 800527e:	4a60      	ldr	r2, [pc, #384]	; (8005400 <HAL_SPI_MspInit+0x2c4>)
 8005280:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005282:	4b5e      	ldr	r3, [pc, #376]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005288:	4b5c      	ldr	r3, [pc, #368]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 800528a:	2200      	movs	r2, #0
 800528c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800528e:	4b5b      	ldr	r3, [pc, #364]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 8005290:	2200      	movs	r2, #0
 8005292:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005294:	4b59      	ldr	r3, [pc, #356]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 8005296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800529a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800529c:	4b57      	ldr	r3, [pc, #348]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 800529e:	2200      	movs	r2, #0
 80052a0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052a2:	4b56      	ldr	r3, [pc, #344]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80052a8:	4b54      	ldr	r3, [pc, #336]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80052ae:	4b53      	ldr	r3, [pc, #332]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 80052b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052b6:	4b51      	ldr	r3, [pc, #324]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80052bc:	484f      	ldr	r0, [pc, #316]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 80052be:	f001 f841 	bl	8006344 <HAL_DMA_Init>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_SPI_MspInit+0x190>
      Error_Handler();
 80052c8:	f7ff fc78 	bl	8004bbc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a4b      	ldr	r2, [pc, #300]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 80052d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80052d2:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <HAL_SPI_MspInit+0x2c0>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80052d8:	4b4a      	ldr	r3, [pc, #296]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 80052da:	4a4b      	ldr	r2, [pc, #300]	; (8005408 <HAL_SPI_MspInit+0x2cc>)
 80052dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80052de:	4b49      	ldr	r3, [pc, #292]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052e4:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052ea:	4b46      	ldr	r3, [pc, #280]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052f0:	4b44      	ldr	r3, [pc, #272]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 80052f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052f8:	4b42      	ldr	r3, [pc, #264]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052fe:	4b41      	ldr	r3, [pc, #260]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 8005300:	2200      	movs	r2, #0
 8005302:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005304:	4b3f      	ldr	r3, [pc, #252]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 8005306:	2200      	movs	r2, #0
 8005308:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800530a:	4b3e      	ldr	r3, [pc, #248]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 800530c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005310:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005312:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 8005314:	2200      	movs	r2, #0
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005318:	483a      	ldr	r0, [pc, #232]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 800531a:	f001 f813 	bl	8006344 <HAL_DMA_Init>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_SPI_MspInit+0x1ec>
      Error_Handler();
 8005324:	f7ff fc4a 	bl	8004bbc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a36      	ldr	r2, [pc, #216]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 800532c:	649a      	str	r2, [r3, #72]	; 0x48
 800532e:	4a35      	ldr	r2, [pc, #212]	; (8005404 <HAL_SPI_MspInit+0x2c8>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005334:	e04f      	b.n	80053d6 <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI3)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a34      	ldr	r2, [pc, #208]	; (800540c <HAL_SPI_MspInit+0x2d0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d14a      	bne.n	80053d6 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 800534a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534e:	6413      	str	r3, [r2, #64]	; 0x40
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	6313      	str	r3, [r2, #48]	; 0x30
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005378:	2300      	movs	r3, #0
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 8005382:	f043 0302 	orr.w	r3, r3, #2
 8005386:	6313      	str	r3, [r2, #48]	; 0x30
 8005388:	4b16      	ldr	r3, [pc, #88]	; (80053e4 <HAL_SPI_MspInit+0x2a8>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005394:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539a:	2302      	movs	r3, #2
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a2:	2303      	movs	r3, #3
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80053a6:	2306      	movs	r3, #6
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ae:	4619      	mov	r1, r3
 80053b0:	4817      	ldr	r0, [pc, #92]	; (8005410 <HAL_SPI_MspInit+0x2d4>)
 80053b2:	f001 fb35 	bl	8006a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80053b6:	2320      	movs	r3, #32
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ba:	2302      	movs	r3, #2
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80053c6:	2306      	movs	r3, #6
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ce:	4619      	mov	r1, r3
 80053d0:	4809      	ldr	r0, [pc, #36]	; (80053f8 <HAL_SPI_MspInit+0x2bc>)
 80053d2:	f001 fb25 	bl	8006a20 <HAL_GPIO_Init>
}
 80053d6:	bf00      	nop
 80053d8:	3738      	adds	r7, #56	; 0x38
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40013000 	.word	0x40013000
 80053e4:	40023800 	.word	0x40023800
 80053e8:	40020000 	.word	0x40020000
 80053ec:	20004a78 	.word	0x20004a78
 80053f0:	40026458 	.word	0x40026458
 80053f4:	40003800 	.word	0x40003800
 80053f8:	40020400 	.word	0x40020400
 80053fc:	200047b4 	.word	0x200047b4
 8005400:	40026058 	.word	0x40026058
 8005404:	20004a18 	.word	0x20004a18
 8005408:	40026070 	.word	0x40026070
 800540c:	40003c00 	.word	0x40003c00
 8005410:	40020800 	.word	0x40020800

08005414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d10d      	bne.n	8005442 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_TIM_PWM_MspInit+0x3c>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <HAL_TIM_PWM_MspInit+0x3c>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	6413      	str	r3, [r2, #64]	; 0x40
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_TIM_PWM_MspInit+0x3c>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800

08005454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <HAL_TIM_Base_MspInit+0x64>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10e      	bne.n	8005484 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <HAL_TIM_Base_MspInit+0x68>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <HAL_TIM_Base_MspInit+0x68>)
 8005470:	f043 0302 	orr.w	r3, r3, #2
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <HAL_TIM_Base_MspInit+0x68>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005482:	e012      	b.n	80054aa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a0d      	ldr	r2, [pc, #52]	; (80054c0 <HAL_TIM_Base_MspInit+0x6c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10d      	bne.n	80054aa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_TIM_Base_MspInit+0x68>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <HAL_TIM_Base_MspInit+0x68>)
 8005498:	f043 0310 	orr.w	r3, r3, #16
 800549c:	6413      	str	r3, [r2, #64]	; 0x40
 800549e:	4b07      	ldr	r3, [pc, #28]	; (80054bc <HAL_TIM_Base_MspInit+0x68>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40023800 	.word	0x40023800
 80054c0:	40001000 	.word	0x40001000

080054c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	; 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054cc:	f107 0314 	add.w	r3, r7, #20
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d11e      	bne.n	8005524 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	4a30      	ldr	r2, [pc, #192]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	6313      	str	r3, [r2, #48]	; 0x30
 80054f6:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8005502:	230a      	movs	r3, #10
 8005504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005506:	2302      	movs	r3, #2
 8005508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550a:	2300      	movs	r3, #0
 800550c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800550e:	2300      	movs	r3, #0
 8005510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005512:	2301      	movs	r3, #1
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005516:	f107 0314 	add.w	r3, r7, #20
 800551a:	4619      	mov	r1, r3
 800551c:	4825      	ldr	r0, [pc, #148]	; (80055b4 <HAL_TIM_MspPostInit+0xf0>)
 800551e:	f001 fa7f 	bl	8006a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005522:	e041      	b.n	80055a8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a23      	ldr	r2, [pc, #140]	; (80055b8 <HAL_TIM_MspPostInit+0xf4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d13c      	bne.n	80055a8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	6313      	str	r3, [r2, #48]	; 0x30
 800553e:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	6313      	str	r3, [r2, #48]	; 0x30
 800555a:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <HAL_TIM_MspPostInit+0xec>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005566:	2302      	movs	r3, #2
 8005568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556a:	2302      	movs	r3, #2
 800556c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005572:	2300      	movs	r3, #0
 8005574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005576:	2302      	movs	r3, #2
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4619      	mov	r1, r3
 8005580:	480e      	ldr	r0, [pc, #56]	; (80055bc <HAL_TIM_MspPostInit+0xf8>)
 8005582:	f001 fa4d 	bl	8006a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8005586:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800558a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005594:	2300      	movs	r3, #0
 8005596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005598:	2302      	movs	r3, #2
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	4619      	mov	r1, r3
 80055a2:	4807      	ldr	r0, [pc, #28]	; (80055c0 <HAL_TIM_MspPostInit+0xfc>)
 80055a4:	f001 fa3c 	bl	8006a20 <HAL_GPIO_Init>
}
 80055a8:	bf00      	nop
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40020000 	.word	0x40020000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40020400 	.word	0x40020400
 80055c0:	40020800 	.word	0x40020800

080055c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08c      	sub	sp, #48	; 0x30
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80055d4:	2200      	movs	r2, #0
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	2019      	movs	r0, #25
 80055da:	f000 fe89 	bl	80062f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80055de:	2019      	movs	r0, #25
 80055e0:	f000 fea2 	bl	8006328 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <HAL_InitTick+0xa4>)
 80055ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ec:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <HAL_InitTick+0xa4>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6453      	str	r3, [r2, #68]	; 0x44
 80055f4:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <HAL_InitTick+0xa4>)
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005600:	f107 0210 	add.w	r2, r7, #16
 8005604:	f107 0314 	add.w	r3, r7, #20
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f003 fed0 	bl	80093b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005610:	f003 feba 	bl	8009388 <HAL_RCC_GetPCLK2Freq>
 8005614:	4603      	mov	r3, r0
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	4a13      	ldr	r2, [pc, #76]	; (800566c <HAL_InitTick+0xa8>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0c9b      	lsrs	r3, r3, #18
 8005624:	3b01      	subs	r3, #1
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <HAL_InitTick+0xac>)
 800562a:	4a12      	ldr	r2, [pc, #72]	; (8005674 <HAL_InitTick+0xb0>)
 800562c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800562e:	4b10      	ldr	r3, [pc, #64]	; (8005670 <HAL_InitTick+0xac>)
 8005630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005634:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005636:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <HAL_InitTick+0xac>)
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <HAL_InitTick+0xac>)
 800563e:	2200      	movs	r2, #0
 8005640:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_InitTick+0xac>)
 8005644:	2200      	movs	r2, #0
 8005646:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005648:	4809      	ldr	r0, [pc, #36]	; (8005670 <HAL_InitTick+0xac>)
 800564a:	f005 fd6d 	bl	800b128 <HAL_TIM_Base_Init>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005654:	4806      	ldr	r0, [pc, #24]	; (8005670 <HAL_InitTick+0xac>)
 8005656:	f005 fdb6 	bl	800b1c6 <HAL_TIM_Base_Start_IT>
 800565a:	4603      	mov	r3, r0
 800565c:	e000      	b.n	8005660 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
}
 8005660:	4618      	mov	r0, r3
 8005662:	3730      	adds	r7, #48	; 0x30
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	431bde83 	.word	0x431bde83
 8005670:	20004adc 	.word	0x20004adc
 8005674:	40010000 	.word	0x40010000

08005678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800567c:	e7fe      	b.n	800567c <NMI_Handler+0x4>

0800567e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800567e:	b480      	push	{r7}
 8005680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005682:	e7fe      	b.n	8005682 <HardFault_Handler+0x4>

08005684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005688:	e7fe      	b.n	8005688 <MemManage_Handler+0x4>

0800568a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800568a:	b480      	push	{r7}
 800568c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800568e:	e7fe      	b.n	800568e <BusFault_Handler+0x4>

08005690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005694:	e7fe      	b.n	8005694 <UsageFault_Handler+0x4>

08005696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005696:	b480      	push	{r7}
 8005698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800569a:	bf00      	nop
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80056a8:	4802      	ldr	r0, [pc, #8]	; (80056b4 <DMA1_Stream3_IRQHandler+0x10>)
 80056aa:	f000 ff51 	bl	8006550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200047b4 	.word	0x200047b4

080056b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80056bc:	4802      	ldr	r0, [pc, #8]	; (80056c8 <DMA1_Stream4_IRQHandler+0x10>)
 80056be:	f000 ff47 	bl	8006550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20004a18 	.word	0x20004a18

080056cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056d0:	4802      	ldr	r0, [pc, #8]	; (80056dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80056d2:	f005 fe05 	bl	800b2e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20004adc 	.word	0x20004adc

080056e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80056e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056e8:	f001 fb5e 	bl	8006da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80056f4:	4802      	ldr	r0, [pc, #8]	; (8005700 <DMA2_Stream3_IRQHandler+0x10>)
 80056f6:	f000 ff2b 	bl	8006550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20004a78 	.word	0x20004a78

08005704 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <OTG_FS_IRQHandler+0x10>)
 800570a:	f002 fc6f 	bl	8007fec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20006464 	.word	0x20006464

08005718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
	return 1;
 800571c:	2301      	movs	r3, #1
}
 800571e:	4618      	mov	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <_kill>:

int _kill(int pid, int sig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005732:	f00d f935 	bl	80129a0 <__errno>
 8005736:	4602      	mov	r2, r0
 8005738:	2316      	movs	r3, #22
 800573a:	6013      	str	r3, [r2, #0]
	return -1;
 800573c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <_exit>:

void _exit (int status)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005750:	f04f 31ff 	mov.w	r1, #4294967295
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ffe7 	bl	8005728 <_kill>
	while (1) {}		/* Make sure we hang here */
 800575a:	e7fe      	b.n	800575a <_exit+0x12>

0800575c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e00a      	b.n	8005784 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800576e:	f3af 8000 	nop.w
 8005772:	4601      	mov	r1, r0
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	60ba      	str	r2, [r7, #8]
 800577a:	b2ca      	uxtb	r2, r1
 800577c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	3301      	adds	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	429a      	cmp	r2, r3
 800578a:	dbf0      	blt.n	800576e <_read+0x12>
	}

return len;
 800578c:	687b      	ldr	r3, [r7, #4]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e009      	b.n	80057bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	60ba      	str	r2, [r7, #8]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	3301      	adds	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	dbf1      	blt.n	80057a8 <_write+0x12>
	}
	return len;
 80057c4:	687b      	ldr	r3, [r7, #4]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <_close>:

int _close(int file)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
	return -1;
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057f6:	605a      	str	r2, [r3, #4]
	return 0;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <_isatty>:

int _isatty(int file)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
	return 1;
 800580e:	2301      	movs	r3, #1
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	return 0;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005840:	4a14      	ldr	r2, [pc, #80]	; (8005894 <_sbrk+0x5c>)
 8005842:	4b15      	ldr	r3, [pc, #84]	; (8005898 <_sbrk+0x60>)
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800584c:	4b13      	ldr	r3, [pc, #76]	; (800589c <_sbrk+0x64>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <_sbrk+0x64>)
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <_sbrk+0x68>)
 8005858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <_sbrk+0x64>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d207      	bcs.n	8005878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005868:	f00d f89a 	bl	80129a0 <__errno>
 800586c:	4602      	mov	r2, r0
 800586e:	230c      	movs	r3, #12
 8005870:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295
 8005876:	e009      	b.n	800588c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005878:	4b08      	ldr	r3, [pc, #32]	; (800589c <_sbrk+0x64>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800587e:	4b07      	ldr	r3, [pc, #28]	; (800589c <_sbrk+0x64>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4413      	add	r3, r2
 8005886:	4a05      	ldr	r2, [pc, #20]	; (800589c <_sbrk+0x64>)
 8005888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800588a:	68fb      	ldr	r3, [r7, #12]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20020000 	.word	0x20020000
 8005898:	00000400 	.word	0x00000400
 800589c:	20000884 	.word	0x20000884
 80058a0:	20006870 	.word	0x20006870

080058a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058a8:	4b08      	ldr	r3, [pc, #32]	; (80058cc <SystemInit+0x28>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <SystemInit+0x28>)
 80058b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <SystemInit+0x28>)
 80058ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058be:	609a      	str	r2, [r3, #8]
#endif
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80058d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80058d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80058d6:	e003      	b.n	80058e0 <LoopCopyDataInit>

080058d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80058dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80058de:	3104      	adds	r1, #4

080058e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80058e0:	480b      	ldr	r0, [pc, #44]	; (8005910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80058e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80058e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80058e8:	d3f6      	bcc.n	80058d8 <CopyDataInit>
  ldr  r2, =_sbss
 80058ea:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80058ec:	e002      	b.n	80058f4 <LoopFillZerobss>

080058ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80058ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80058f0:	f842 3b04 	str.w	r3, [r2], #4

080058f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80058f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80058f8:	d3f9      	bcc.n	80058ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80058fa:	f7ff ffd3 	bl	80058a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058fe:	f00d f867 	bl	80129d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005902:	f7fd fe75 	bl	80035f0 <main>
  bx  lr    
 8005906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005908:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800590c:	08018888 	.word	0x08018888
  ldr  r0, =_sdata
 8005910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005914:	20000608 	.word	0x20000608
  ldr  r2, =_sbss
 8005918:	20000608 	.word	0x20000608
  ldr  r3, = _ebss
 800591c:	20006870 	.word	0x20006870

08005920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005920:	e7fe      	b.n	8005920 <ADC_IRQHandler>
	...

08005924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <HAL_Init+0x40>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <HAL_Init+0x40>)
 800592e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_Init+0x40>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a0a      	ldr	r2, [pc, #40]	; (8005964 <HAL_Init+0x40>)
 800593a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800593e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <HAL_Init+0x40>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a07      	ldr	r2, [pc, #28]	; (8005964 <HAL_Init+0x40>)
 8005946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800594c:	2003      	movs	r0, #3
 800594e:	f000 fcc4 	bl	80062da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005952:	2000      	movs	r0, #0
 8005954:	f7ff fe36 	bl	80055c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005958:	f7ff fb16 	bl	8004f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40023c00 	.word	0x40023c00

08005968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_IncTick+0x20>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <HAL_IncTick+0x24>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4413      	add	r3, r2
 8005978:	4a04      	ldr	r2, [pc, #16]	; (800598c <HAL_IncTick+0x24>)
 800597a:	6013      	str	r3, [r2, #0]
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000288 	.word	0x20000288
 800598c:	20004b1c 	.word	0x20004b1c

08005990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return uwTick;
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <HAL_GetTick+0x14>)
 8005996:	681b      	ldr	r3, [r3, #0]
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20004b1c 	.word	0x20004b1c

080059a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059b0:	f7ff ffee 	bl	8005990 <HAL_GetTick>
 80059b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d005      	beq.n	80059ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_Delay+0x40>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059ce:	bf00      	nop
 80059d0:	f7ff ffde 	bl	8005990 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d8f7      	bhi.n	80059d0 <HAL_Delay+0x28>
  {
  }
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000288 	.word	0x20000288

080059ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e033      	b.n	8005a6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fae8 	bl	8004fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d118      	bne.n	8005a5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a32:	f023 0302 	bic.w	r3, r3, #2
 8005a36:	f043 0202 	orr.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 faa2 	bl	8005f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
 8005a5a:	e001      	b.n	8005a60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_ADC_Start+0x1a>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0a5      	b.n	8005bda <HAL_ADC_Start+0x166>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d018      	beq.n	8005ad6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ab4:	4b4c      	ldr	r3, [pc, #304]	; (8005be8 <HAL_ADC_Start+0x174>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a4c      	ldr	r2, [pc, #304]	; (8005bec <HAL_ADC_Start+0x178>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0c9a      	lsrs	r2, r3, #18
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ac8:	e002      	b.n	8005ad0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f9      	bne.n	8005aca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d179      	bne.n	8005bd8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d106      	bne.n	8005b32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b28:	f023 0206 	bic.w	r2, r3, #6
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44
 8005b30:	e002      	b.n	8005b38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b40:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <HAL_ADC_Start+0x17c>)
 8005b42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d12a      	bne.n	8005bb0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <HAL_ADC_Start+0x180>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d015      	beq.n	8005b90 <HAL_ADC_Start+0x11c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a23      	ldr	r2, [pc, #140]	; (8005bf8 <HAL_ADC_Start+0x184>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d105      	bne.n	8005b7a <HAL_ADC_Start+0x106>
 8005b6e:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_ADC_Start+0x17c>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <HAL_ADC_Start+0x188>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d129      	bne.n	8005bd8 <HAL_ADC_Start+0x164>
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <HAL_ADC_Start+0x17c>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d823      	bhi.n	8005bd8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11c      	bne.n	8005bd8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bac:	609a      	str	r2, [r3, #8]
 8005bae:	e013      	b.n	8005bd8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <HAL_ADC_Start+0x180>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_ADC_Start+0x164>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bd6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000280 	.word	0x20000280
 8005bec:	431bde83 	.word	0x431bde83
 8005bf0:	40012300 	.word	0x40012300
 8005bf4:	40012000 	.word	0x40012000
 8005bf8:	40012100 	.word	0x40012100
 8005bfc:	40012200 	.word	0x40012200

08005c00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1c:	d113      	bne.n	8005c46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2c:	d10b      	bne.n	8005c46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e05c      	b.n	8005d00 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005c46:	f7ff fea3 	bl	8005990 <HAL_GetTick>
 8005c4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c4c:	e01a      	b.n	8005c84 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d016      	beq.n	8005c84 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_ADC_PollForConversion+0x6c>
 8005c5c:	f7ff fe98 	bl	8005990 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d20b      	bcs.n	8005c84 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e03d      	b.n	8005d00 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d1dd      	bne.n	8005c4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f06f 0212 	mvn.w	r2, #18
 8005c9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d123      	bne.n	8005cfe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11f      	bne.n	8005cfe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d006      	beq.n	8005cda <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d111      	bne.n	8005cfe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d105      	bne.n	8005cfe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0x1c>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e113      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x244>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	d925      	bls.n	8005d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68d9      	ldr	r1, [r3, #12]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4613      	mov	r3, r2
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4413      	add	r3, r2
 8005d64:	3b1e      	subs	r3, #30
 8005d66:	2207      	movs	r2, #7
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43da      	mvns	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	400a      	ands	r2, r1
 8005d74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68d9      	ldr	r1, [r3, #12]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4618      	mov	r0, r3
 8005d88:	4603      	mov	r3, r0
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4403      	add	r3, r0
 8005d8e:	3b1e      	subs	r3, #30
 8005d90:	409a      	lsls	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e022      	b.n	8005de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6919      	ldr	r1, [r3, #16]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	4613      	mov	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	4413      	add	r3, r2
 8005db0:	2207      	movs	r2, #7
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43da      	mvns	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	400a      	ands	r2, r1
 8005dbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6919      	ldr	r1, [r3, #16]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4403      	add	r3, r0
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d824      	bhi.n	8005e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	3b05      	subs	r3, #5
 8005dfc:	221f      	movs	r2, #31
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43da      	mvns	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	400a      	ands	r2, r1
 8005e0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4618      	mov	r0, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	3b05      	subs	r3, #5
 8005e26:	fa00 f203 	lsl.w	r2, r0, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	635a      	str	r2, [r3, #52]	; 0x34
 8005e32:	e04c      	b.n	8005ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d824      	bhi.n	8005e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3b23      	subs	r3, #35	; 0x23
 8005e4e:	221f      	movs	r2, #31
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43da      	mvns	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	3b23      	subs	r3, #35	; 0x23
 8005e78:	fa00 f203 	lsl.w	r2, r0, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
 8005e84:	e023      	b.n	8005ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	3b41      	subs	r3, #65	; 0x41
 8005e98:	221f      	movs	r2, #31
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43da      	mvns	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	400a      	ands	r2, r1
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3b41      	subs	r3, #65	; 0x41
 8005ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <HAL_ADC_ConfigChannel+0x250>)
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a28      	ldr	r2, [pc, #160]	; (8005f78 <HAL_ADC_ConfigChannel+0x254>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10f      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x1d8>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b12      	cmp	r3, #18
 8005ee2:	d10b      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1d      	ldr	r2, [pc, #116]	; (8005f78 <HAL_ADC_ConfigChannel+0x254>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d12b      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x23a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_ADC_ConfigChannel+0x258>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <HAL_ADC_ConfigChannel+0x1f4>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b11      	cmp	r3, #17
 8005f16:	d122      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <HAL_ADC_ConfigChannel+0x258>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d111      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <HAL_ADC_ConfigChannel+0x25c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a11      	ldr	r2, [pc, #68]	; (8005f84 <HAL_ADC_ConfigChannel+0x260>)
 8005f40:	fba2 2303 	umull	r2, r3, r2, r3
 8005f44:	0c9a      	lsrs	r2, r3, #18
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f50:	e002      	b.n	8005f58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f9      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012300 	.word	0x40012300
 8005f78:	40012000 	.word	0x40012000
 8005f7c:	10000012 	.word	0x10000012
 8005f80:	20000280 	.word	0x20000280
 8005f84:	431bde83 	.word	0x431bde83

08005f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f90:	4b79      	ldr	r3, [pc, #484]	; (8006178 <ADC_Init+0x1f0>)
 8005f92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	021a      	lsls	r2, r3, #8
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6859      	ldr	r1, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6899      	ldr	r1, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	4a58      	ldr	r2, [pc, #352]	; (800617c <ADC_Init+0x1f4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800602e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6899      	ldr	r1, [r3, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	e00f      	b.n	8006086 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006084:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0202 	bic.w	r2, r2, #2
 8006094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	7e1b      	ldrb	r3, [r3, #24]
 80060a0:	005a      	lsls	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6859      	ldr	r1, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	3b01      	subs	r3, #1
 80060e0:	035a      	lsls	r2, r3, #13
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	e007      	b.n	80060fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	3b01      	subs	r3, #1
 8006118:	051a      	lsls	r2, r3, #20
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6899      	ldr	r1, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800613e:	025a      	lsls	r2, r3, #9
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	029a      	lsls	r2, r3, #10
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012300 	.word	0x40012300
 800617c:	0f000001 	.word	0x0f000001

08006180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800619c:	4013      	ands	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061b2:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <__NVIC_SetPriorityGrouping+0x44>)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	60d3      	str	r3, [r2, #12]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	e000ed00 	.word	0xe000ed00

080061c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <__NVIC_GetPriorityGrouping+0x18>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	0a1b      	lsrs	r3, r3, #8
 80061d2:	f003 0307 	and.w	r3, r3, #7
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	db0b      	blt.n	800620e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	f003 021f 	and.w	r2, r3, #31
 80061fc:	4907      	ldr	r1, [pc, #28]	; (800621c <__NVIC_EnableIRQ+0x38>)
 80061fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	2001      	movs	r0, #1
 8006206:	fa00 f202 	lsl.w	r2, r0, r2
 800620a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	e000e100 	.word	0xe000e100

08006220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800622c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006230:	2b00      	cmp	r3, #0
 8006232:	db0a      	blt.n	800624a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	490c      	ldr	r1, [pc, #48]	; (800626c <__NVIC_SetPriority+0x4c>)
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	0112      	lsls	r2, r2, #4
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	440b      	add	r3, r1
 8006244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006248:	e00a      	b.n	8006260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	4908      	ldr	r1, [pc, #32]	; (8006270 <__NVIC_SetPriority+0x50>)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	3b04      	subs	r3, #4
 8006258:	0112      	lsls	r2, r2, #4
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	440b      	add	r3, r1
 800625e:	761a      	strb	r2, [r3, #24]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	e000e100 	.word	0xe000e100
 8006270:	e000ed00 	.word	0xe000ed00

08006274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f1c3 0307 	rsb	r3, r3, #7
 800628e:	2b04      	cmp	r3, #4
 8006290:	bf28      	it	cs
 8006292:	2304      	movcs	r3, #4
 8006294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3304      	adds	r3, #4
 800629a:	2b06      	cmp	r3, #6
 800629c:	d902      	bls.n	80062a4 <NVIC_EncodePriority+0x30>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	3b03      	subs	r3, #3
 80062a2:	e000      	b.n	80062a6 <NVIC_EncodePriority+0x32>
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43da      	mvns	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	401a      	ands	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062bc:	f04f 31ff 	mov.w	r1, #4294967295
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	fa01 f303 	lsl.w	r3, r1, r3
 80062c6:	43d9      	mvns	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	4313      	orrs	r3, r2
         );
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3724      	adds	r7, #36	; 0x24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ff4c 	bl	8006180 <__NVIC_SetPriorityGrouping>
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006302:	f7ff ff61 	bl	80061c8 <__NVIC_GetPriorityGrouping>
 8006306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	6978      	ldr	r0, [r7, #20]
 800630e:	f7ff ffb1 	bl	8006274 <NVIC_EncodePriority>
 8006312:	4602      	mov	r2, r0
 8006314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ff80 	bl	8006220 <__NVIC_SetPriority>
}
 8006320:	bf00      	nop
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff ff54 	bl	80061e4 <__NVIC_EnableIRQ>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006350:	f7ff fb1e 	bl	8005990 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e099      	b.n	8006494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006380:	e00f      	b.n	80063a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006382:	f7ff fb05 	bl	8005990 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b05      	cmp	r3, #5
 800638e:	d908      	bls.n	80063a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2203      	movs	r2, #3
 800639a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e078      	b.n	8006494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e8      	bne.n	8006382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4b38      	ldr	r3, [pc, #224]	; (800649c <HAL_DMA_Init+0x158>)
 80063bc:	4013      	ands	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d107      	bne.n	800640c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	4313      	orrs	r3, r2
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0307 	bic.w	r3, r3, #7
 8006422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	2b04      	cmp	r3, #4
 8006434:	d117      	bne.n	8006466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00e      	beq.n	8006466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fa6f 	bl	800692c <DMA_CheckFifoParam>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006462:	2301      	movs	r3, #1
 8006464:	e016      	b.n	8006494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa26 	bl	80068c0 <DMA_CalcBaseAndBitshift>
 8006474:	4603      	mov	r3, r0
 8006476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647c:	223f      	movs	r2, #63	; 0x3f
 800647e:	409a      	lsls	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	f010803f 	.word	0xf010803f

080064a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_DMA_Start_IT+0x26>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e040      	b.n	8006548 <HAL_DMA_Start_IT+0xa8>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d12f      	bne.n	800653a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f9b8 	bl	8006864 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	223f      	movs	r2, #63	; 0x3f
 80064fa:	409a      	lsls	r2, r3
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0216 	orr.w	r2, r2, #22
 800650e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0208 	orr.w	r2, r2, #8
 8006526:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e005      	b.n	8006546 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006542:	2302      	movs	r3, #2
 8006544:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800655c:	4b92      	ldr	r3, [pc, #584]	; (80067a8 <HAL_DMA_IRQHandler+0x258>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a92      	ldr	r2, [pc, #584]	; (80067ac <HAL_DMA_IRQHandler+0x25c>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	0a9b      	lsrs	r3, r3, #10
 8006568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657a:	2208      	movs	r2, #8
 800657c:	409a      	lsls	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4013      	ands	r3, r2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01a      	beq.n	80065bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	2208      	movs	r2, #8
 80065aa:	409a      	lsls	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	f043 0201 	orr.w	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	2201      	movs	r2, #1
 80065c2:	409a      	lsls	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d012      	beq.n	80065f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	2201      	movs	r2, #1
 80065e0:	409a      	lsls	r2, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	f043 0202 	orr.w	r2, r3, #2
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f6:	2204      	movs	r2, #4
 80065f8:	409a      	lsls	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d012      	beq.n	8006628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	2204      	movs	r2, #4
 8006616:	409a      	lsls	r2, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	f043 0204 	orr.w	r2, r3, #4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662c:	2210      	movs	r2, #16
 800662e:	409a      	lsls	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d043      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d03c      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	2210      	movs	r2, #16
 800664c:	409a      	lsls	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d018      	beq.n	8006692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d108      	bne.n	8006680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d024      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
 800667e:	e01f      	b.n	80066c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
 8006690:	e016      	b.n	80066c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669c:	2b00      	cmp	r3, #0
 800669e:	d107      	bne.n	80066b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0208 	bic.w	r2, r2, #8
 80066ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c4:	2220      	movs	r2, #32
 80066c6:	409a      	lsls	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 808e 	beq.w	80067ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8086 	beq.w	80067ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e6:	2220      	movs	r2, #32
 80066e8:	409a      	lsls	r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d136      	bne.n	8006768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0216 	bic.w	r2, r2, #22
 8006708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <HAL_DMA_IRQHandler+0x1da>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0208 	bic.w	r2, r2, #8
 8006738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673e:	223f      	movs	r2, #63	; 0x3f
 8006740:	409a      	lsls	r2, r3
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d07d      	beq.n	800685a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
        }
        return;
 8006766:	e078      	b.n	800685a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01c      	beq.n	80067b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	2b00      	cmp	r3, #0
 800678a:	d030      	beq.n	80067ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
 8006794:	e02b      	b.n	80067ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d027      	beq.n	80067ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
 80067a6:	e022      	b.n	80067ee <HAL_DMA_IRQHandler+0x29e>
 80067a8:	20000280 	.word	0x20000280
 80067ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10f      	bne.n	80067de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0210 	bic.w	r2, r2, #16
 80067cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d032      	beq.n	800685c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d022      	beq.n	8006848 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2205      	movs	r2, #5
 8006806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	3301      	adds	r3, #1
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	429a      	cmp	r2, r3
 8006824:	d307      	bcc.n	8006836 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1f2      	bne.n	800681a <HAL_DMA_IRQHandler+0x2ca>
 8006834:	e000      	b.n	8006838 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006836:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
 8006858:	e000      	b.n	800685c <HAL_DMA_IRQHandler+0x30c>
        return;
 800685a:	bf00      	nop
    }
  }
}
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop

08006864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006880:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d108      	bne.n	80068a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80068a2:	e007      	b.n	80068b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	3b10      	subs	r3, #16
 80068d0:	4a14      	ldr	r2, [pc, #80]	; (8006924 <DMA_CalcBaseAndBitshift+0x64>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068da:	4a13      	ldr	r2, [pc, #76]	; (8006928 <DMA_CalcBaseAndBitshift+0x68>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d909      	bls.n	8006902 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	1d1a      	adds	r2, r3, #4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	659a      	str	r2, [r3, #88]	; 0x58
 8006900:	e007      	b.n	8006912 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	aaaaaaab 	.word	0xaaaaaaab
 8006928:	08018328 	.word	0x08018328

0800692c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11f      	bne.n	8006986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b03      	cmp	r3, #3
 800694a:	d855      	bhi.n	80069f8 <DMA_CheckFifoParam+0xcc>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <DMA_CheckFifoParam+0x28>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006965 	.word	0x08006965
 8006958:	08006977 	.word	0x08006977
 800695c:	08006965 	.word	0x08006965
 8006960:	080069f9 	.word	0x080069f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d045      	beq.n	80069fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006974:	e042      	b.n	80069fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800697e:	d13f      	bne.n	8006a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006984:	e03c      	b.n	8006a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	d121      	bne.n	80069d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b03      	cmp	r3, #3
 8006994:	d836      	bhi.n	8006a04 <DMA_CheckFifoParam+0xd8>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <DMA_CheckFifoParam+0x70>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069b3 	.word	0x080069b3
 80069a4:	080069ad 	.word	0x080069ad
 80069a8:	080069c5 	.word	0x080069c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
      break;
 80069b0:	e02f      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d024      	beq.n	8006a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069c2:	e021      	b.n	8006a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069cc:	d11e      	bne.n	8006a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80069d2:	e01b      	b.n	8006a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d902      	bls.n	80069e0 <DMA_CheckFifoParam+0xb4>
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d003      	beq.n	80069e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80069de:	e018      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
      break;
 80069e4:	e015      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
      break;
 80069f6:	e00b      	b.n	8006a10 <DMA_CheckFifoParam+0xe4>
      break;
 80069f8:	bf00      	nop
 80069fa:	e00a      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 80069fc:	bf00      	nop
 80069fe:	e008      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a00:	bf00      	nop
 8006a02:	e006      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a04:	bf00      	nop
 8006a06:	e004      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e002      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a10:	bf00      	nop
    }
  } 
  
  return status; 
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b089      	sub	sp, #36	; 0x24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e165      	b.n	8006d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	f040 8154 	bne.w	8006d02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d00b      	beq.n	8006a7a <HAL_GPIO_Init+0x5a>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d007      	beq.n	8006a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a6e:	2b11      	cmp	r3, #17
 8006a70:	d003      	beq.n	8006a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b12      	cmp	r3, #18
 8006a78:	d130      	bne.n	8006adc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	2203      	movs	r2, #3
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	4013      	ands	r3, r2
 8006abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	f003 0201 	and.w	r2, r3, #1
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d003      	beq.n	8006b1c <HAL_GPIO_Init+0xfc>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b12      	cmp	r3, #18
 8006b1a:	d123      	bne.n	8006b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	08da      	lsrs	r2, r3, #3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3208      	adds	r2, #8
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	220f      	movs	r2, #15
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	08da      	lsrs	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3208      	adds	r2, #8
 8006b5e:	69b9      	ldr	r1, [r7, #24]
 8006b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	2203      	movs	r2, #3
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 0203 	and.w	r2, r3, #3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80ae 	beq.w	8006d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	4b5c      	ldr	r3, [pc, #368]	; (8006d1c <HAL_GPIO_Init+0x2fc>)
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	4a5b      	ldr	r2, [pc, #364]	; (8006d1c <HAL_GPIO_Init+0x2fc>)
 8006bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006bb6:	4b59      	ldr	r3, [pc, #356]	; (8006d1c <HAL_GPIO_Init+0x2fc>)
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bc2:	4a57      	ldr	r2, [pc, #348]	; (8006d20 <HAL_GPIO_Init+0x300>)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	220f      	movs	r2, #15
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a4e      	ldr	r2, [pc, #312]	; (8006d24 <HAL_GPIO_Init+0x304>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d025      	beq.n	8006c3a <HAL_GPIO_Init+0x21a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a4d      	ldr	r2, [pc, #308]	; (8006d28 <HAL_GPIO_Init+0x308>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01f      	beq.n	8006c36 <HAL_GPIO_Init+0x216>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a4c      	ldr	r2, [pc, #304]	; (8006d2c <HAL_GPIO_Init+0x30c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d019      	beq.n	8006c32 <HAL_GPIO_Init+0x212>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a4b      	ldr	r2, [pc, #300]	; (8006d30 <HAL_GPIO_Init+0x310>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <HAL_GPIO_Init+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a4a      	ldr	r2, [pc, #296]	; (8006d34 <HAL_GPIO_Init+0x314>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00d      	beq.n	8006c2a <HAL_GPIO_Init+0x20a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a49      	ldr	r2, [pc, #292]	; (8006d38 <HAL_GPIO_Init+0x318>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d007      	beq.n	8006c26 <HAL_GPIO_Init+0x206>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a48      	ldr	r2, [pc, #288]	; (8006d3c <HAL_GPIO_Init+0x31c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d101      	bne.n	8006c22 <HAL_GPIO_Init+0x202>
 8006c1e:	2306      	movs	r3, #6
 8006c20:	e00c      	b.n	8006c3c <HAL_GPIO_Init+0x21c>
 8006c22:	2307      	movs	r3, #7
 8006c24:	e00a      	b.n	8006c3c <HAL_GPIO_Init+0x21c>
 8006c26:	2305      	movs	r3, #5
 8006c28:	e008      	b.n	8006c3c <HAL_GPIO_Init+0x21c>
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	e006      	b.n	8006c3c <HAL_GPIO_Init+0x21c>
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e004      	b.n	8006c3c <HAL_GPIO_Init+0x21c>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e002      	b.n	8006c3c <HAL_GPIO_Init+0x21c>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <HAL_GPIO_Init+0x21c>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	f002 0203 	and.w	r2, r2, #3
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	4093      	lsls	r3, r2
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c4c:	4934      	ldr	r1, [pc, #208]	; (8006d20 <HAL_GPIO_Init+0x300>)
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	089b      	lsrs	r3, r3, #2
 8006c52:	3302      	adds	r3, #2
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c5a:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	43db      	mvns	r3, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c7e:	4a30      	ldr	r2, [pc, #192]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c84:	4b2e      	ldr	r3, [pc, #184]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	4013      	ands	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ca8:	4a25      	ldr	r2, [pc, #148]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cd2:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cd8:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	43db      	mvns	r3, r3
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cfc:	4a10      	ldr	r2, [pc, #64]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	3301      	adds	r3, #1
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	f67f ae96 	bls.w	8006a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d10:	bf00      	nop
 8006d12:	3724      	adds	r7, #36	; 0x24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40013800 	.word	0x40013800
 8006d24:	40020000 	.word	0x40020000
 8006d28:	40020400 	.word	0x40020400
 8006d2c:	40020800 	.word	0x40020800
 8006d30:	40020c00 	.word	0x40020c00
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40021400 	.word	0x40021400
 8006d3c:	40021800 	.word	0x40021800
 8006d40:	40013c00 	.word	0x40013c00

08006d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	887b      	ldrh	r3, [r7, #2]
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e001      	b.n	8006d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	807b      	strh	r3, [r7, #2]
 8006d80:	4613      	mov	r3, r2
 8006d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d84:	787b      	ldrb	r3, [r7, #1]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d8a:	887a      	ldrh	r2, [r7, #2]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d90:	e003      	b.n	8006d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d92:	887b      	ldrh	r3, [r7, #2]
 8006d94:	041a      	lsls	r2, r3, #16
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	619a      	str	r2, [r3, #24]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006db2:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d006      	beq.n	8006dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dbe:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fc fbe6 	bl	8003598 <HAL_GPIO_EXTI_Callback>
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40013c00 	.word	0x40013c00

08006dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e11f      	b.n	800702a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fe f932 	bl	8005068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2224      	movs	r2, #36	; 0x24
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e3c:	f002 fa90 	bl	8009360 <HAL_RCC_GetPCLK1Freq>
 8006e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	4a7b      	ldr	r2, [pc, #492]	; (8007034 <HAL_I2C_Init+0x25c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d807      	bhi.n	8006e5c <HAL_I2C_Init+0x84>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4a7a      	ldr	r2, [pc, #488]	; (8007038 <HAL_I2C_Init+0x260>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	bf94      	ite	ls
 8006e54:	2301      	movls	r3, #1
 8006e56:	2300      	movhi	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	e006      	b.n	8006e6a <HAL_I2C_Init+0x92>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a77      	ldr	r2, [pc, #476]	; (800703c <HAL_I2C_Init+0x264>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	bf94      	ite	ls
 8006e64:	2301      	movls	r3, #1
 8006e66:	2300      	movhi	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e0db      	b.n	800702a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a72      	ldr	r2, [pc, #456]	; (8007040 <HAL_I2C_Init+0x268>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	0c9b      	lsrs	r3, r3, #18
 8006e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a64      	ldr	r2, [pc, #400]	; (8007034 <HAL_I2C_Init+0x25c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d802      	bhi.n	8006eac <HAL_I2C_Init+0xd4>
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	e009      	b.n	8006ec0 <HAL_I2C_Init+0xe8>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	4a63      	ldr	r2, [pc, #396]	; (8007044 <HAL_I2C_Init+0x26c>)
 8006eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebc:	099b      	lsrs	r3, r3, #6
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6812      	ldr	r2, [r2, #0]
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4956      	ldr	r1, [pc, #344]	; (8007034 <HAL_I2C_Init+0x25c>)
 8006edc:	428b      	cmp	r3, r1
 8006ede:	d80d      	bhi.n	8006efc <HAL_I2C_Init+0x124>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	1e59      	subs	r1, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	bf38      	it	cc
 8006ef8:	2304      	movcc	r3, #4
 8006efa:	e04f      	b.n	8006f9c <HAL_I2C_Init+0x1c4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d111      	bne.n	8006f28 <HAL_I2C_Init+0x150>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	1e58      	subs	r0, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6859      	ldr	r1, [r3, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	440b      	add	r3, r1
 8006f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f16:	3301      	adds	r3, #1
 8006f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bf0c      	ite	eq
 8006f20:	2301      	moveq	r3, #1
 8006f22:	2300      	movne	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	e012      	b.n	8006f4e <HAL_I2C_Init+0x176>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1e58      	subs	r0, r3, #1
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6859      	ldr	r1, [r3, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	0099      	lsls	r1, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f3e:	3301      	adds	r3, #1
 8006f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf0c      	ite	eq
 8006f48:	2301      	moveq	r3, #1
 8006f4a:	2300      	movne	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_I2C_Init+0x17e>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e022      	b.n	8006f9c <HAL_I2C_Init+0x1c4>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10e      	bne.n	8006f7c <HAL_I2C_Init+0x1a4>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1e58      	subs	r0, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6859      	ldr	r1, [r3, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	440b      	add	r3, r1
 8006f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f70:	3301      	adds	r3, #1
 8006f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7a:	e00f      	b.n	8006f9c <HAL_I2C_Init+0x1c4>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	1e58      	subs	r0, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6859      	ldr	r1, [r3, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	0099      	lsls	r1, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f92:	3301      	adds	r3, #1
 8006f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	6809      	ldr	r1, [r1, #0]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69da      	ldr	r2, [r3, #28]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6911      	ldr	r1, [r2, #16]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	68d2      	ldr	r2, [r2, #12]
 8006fd6:	4311      	orrs	r1, r2
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6812      	ldr	r2, [r2, #0]
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695a      	ldr	r2, [r3, #20]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	000186a0 	.word	0x000186a0
 8007038:	001e847f 	.word	0x001e847f
 800703c:	003d08ff 	.word	0x003d08ff
 8007040:	431bde83 	.word	0x431bde83
 8007044:	10624dd3 	.word	0x10624dd3

08007048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	4608      	mov	r0, r1
 8007052:	4611      	mov	r1, r2
 8007054:	461a      	mov	r2, r3
 8007056:	4603      	mov	r3, r0
 8007058:	817b      	strh	r3, [r7, #10]
 800705a:	460b      	mov	r3, r1
 800705c:	813b      	strh	r3, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007062:	f7fe fc95 	bl	8005990 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b20      	cmp	r3, #32
 8007072:	f040 80d9 	bne.w	8007228 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	2319      	movs	r3, #25
 800707c:	2201      	movs	r2, #1
 800707e:	496d      	ldr	r1, [pc, #436]	; (8007234 <HAL_I2C_Mem_Write+0x1ec>)
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fc7f 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800708c:	2302      	movs	r3, #2
 800708e:	e0cc      	b.n	800722a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_I2C_Mem_Write+0x56>
 800709a:	2302      	movs	r3, #2
 800709c:	e0c5      	b.n	800722a <HAL_I2C_Mem_Write+0x1e2>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d007      	beq.n	80070c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2221      	movs	r2, #33	; 0x21
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2240      	movs	r2, #64	; 0x40
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a3a      	ldr	r2, [r7, #32]
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a4d      	ldr	r2, [pc, #308]	; (8007238 <HAL_I2C_Mem_Write+0x1f0>)
 8007104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007106:	88f8      	ldrh	r0, [r7, #6]
 8007108:	893a      	ldrh	r2, [r7, #8]
 800710a:	8979      	ldrh	r1, [r7, #10]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4603      	mov	r3, r0
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fab6 	bl	8007688 <I2C_RequestMemoryWrite>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d052      	beq.n	80071c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e081      	b.n	800722a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fd00 	bl	8007b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00d      	beq.n	8007152 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	2b04      	cmp	r3, #4
 800713c:	d107      	bne.n	800714e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800714c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e06b      	b.n	800722a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	781a      	ldrb	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b04      	cmp	r3, #4
 800718e:	d11b      	bne.n	80071c8 <HAL_I2C_Mem_Write+0x180>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1aa      	bne.n	8007126 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fcec 	bl	8007bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00d      	beq.n	80071fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d107      	bne.n	80071f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e016      	b.n	800722a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800720a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	00100002 	.word	0x00100002
 8007238:	ffff0000 	.word	0xffff0000

0800723c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	461a      	mov	r2, r3
 800724a:	4603      	mov	r3, r0
 800724c:	817b      	strh	r3, [r7, #10]
 800724e:	460b      	mov	r3, r1
 8007250:	813b      	strh	r3, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007256:	f7fe fb9b 	bl	8005990 <HAL_GetTick>
 800725a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b20      	cmp	r3, #32
 8007266:	f040 8208 	bne.w	800767a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2319      	movs	r3, #25
 8007270:	2201      	movs	r2, #1
 8007272:	497b      	ldr	r1, [pc, #492]	; (8007460 <HAL_I2C_Mem_Read+0x224>)
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fb85 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007280:	2302      	movs	r3, #2
 8007282:	e1fb      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_I2C_Mem_Read+0x56>
 800728e:	2302      	movs	r3, #2
 8007290:	e1f4      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d007      	beq.n	80072b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0201 	orr.w	r2, r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2222      	movs	r2, #34	; 0x22
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2240      	movs	r2, #64	; 0x40
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80072e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a5b      	ldr	r2, [pc, #364]	; (8007464 <HAL_I2C_Mem_Read+0x228>)
 80072f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072fa:	88f8      	ldrh	r0, [r7, #6]
 80072fc:	893a      	ldrh	r2, [r7, #8]
 80072fe:	8979      	ldrh	r1, [r7, #10]
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	9301      	str	r3, [sp, #4]
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	4603      	mov	r3, r0
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fa52 	bl	80077b4 <I2C_RequestMemoryRead>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e1b0      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d113      	bne.n	800734a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007322:	2300      	movs	r3, #0
 8007324:	623b      	str	r3, [r7, #32]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e184      	b.n	8007654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734e:	2b01      	cmp	r3, #1
 8007350:	d11b      	bne.n	800738a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e164      	b.n	8007654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738e:	2b02      	cmp	r3, #2
 8007390:	d11b      	bne.n	80073ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b2:	2300      	movs	r3, #0
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	e144      	b.n	8007654 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073e0:	e138      	b.n	8007654 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	f200 80f1 	bhi.w	80075ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d123      	bne.n	800743c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fc1b 	bl	8007c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e139      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800743a:	e10b      	b.n	8007654 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007440:	2b02      	cmp	r3, #2
 8007442:	d14e      	bne.n	80074e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	2200      	movs	r2, #0
 800744c:	4906      	ldr	r1, [pc, #24]	; (8007468 <HAL_I2C_Mem_Read+0x22c>)
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fa98 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e10e      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
 800745e:	bf00      	nop
 8007460:	00100002 	.word	0x00100002
 8007464:	ffff0000 	.word	0xffff0000
 8007468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800747a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074e0:	e0b8      	b.n	8007654 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	2200      	movs	r2, #0
 80074ea:	4966      	ldr	r1, [pc, #408]	; (8007684 <HAL_I2C_Mem_Read+0x448>)
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fa49 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0bf      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	2200      	movs	r2, #0
 8007546:	494f      	ldr	r1, [pc, #316]	; (8007684 <HAL_I2C_Mem_Read+0x448>)
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fa1b 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e091      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075cc:	e042      	b.n	8007654 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fb2e 	bl	8007c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e04c      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b04      	cmp	r3, #4
 8007620:	d118      	bne.n	8007654 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	f47f aec2 	bne.w	80073e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	e000      	b.n	800767c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800767a:	2302      	movs	r3, #2
  }
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	; 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	00010004 	.word	0x00010004

08007688 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	461a      	mov	r2, r3
 8007696:	4603      	mov	r3, r0
 8007698:	817b      	strh	r3, [r7, #10]
 800769a:	460b      	mov	r3, r1
 800769c:	813b      	strh	r3, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f960 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00d      	beq.n	80076e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d8:	d103      	bne.n	80076e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e05f      	b.n	80077a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	6a3a      	ldr	r2, [r7, #32]
 80076fa:	492d      	ldr	r1, [pc, #180]	; (80077b0 <I2C_RequestMemoryWrite+0x128>)
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f998 	bl	8007a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e04c      	b.n	80077a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007724:	6a39      	ldr	r1, [r7, #32]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fa02 	bl	8007b30 <I2C_WaitOnTXEFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00d      	beq.n	800774e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	2b04      	cmp	r3, #4
 8007738:	d107      	bne.n	800774a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e02b      	b.n	80077a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d105      	bne.n	8007760 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007754:	893b      	ldrh	r3, [r7, #8]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	611a      	str	r2, [r3, #16]
 800775e:	e021      	b.n	80077a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007760:	893b      	ldrh	r3, [r7, #8]
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	b29b      	uxth	r3, r3
 8007766:	b2da      	uxtb	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800776e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007770:	6a39      	ldr	r1, [r7, #32]
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 f9dc 	bl	8007b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00d      	beq.n	800779a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	2b04      	cmp	r3, #4
 8007784:	d107      	bne.n	8007796 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e005      	b.n	80077a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800779a:	893b      	ldrh	r3, [r7, #8]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	00010002 	.word	0x00010002

080077b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	461a      	mov	r2, r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	817b      	strh	r3, [r7, #10]
 80077c6:	460b      	mov	r3, r1
 80077c8:	813b      	strh	r3, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f8c2 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d103      	bne.n	800781e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e0aa      	b.n	8007978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007822:	897b      	ldrh	r3, [r7, #10]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	6a3a      	ldr	r2, [r7, #32]
 8007836:	4952      	ldr	r1, [pc, #328]	; (8007980 <I2C_RequestMemoryRead+0x1cc>)
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f8fa 	bl	8007a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e097      	b.n	8007978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800785e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007860:	6a39      	ldr	r1, [r7, #32]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 f964 	bl	8007b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00d      	beq.n	800788a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b04      	cmp	r3, #4
 8007874:	d107      	bne.n	8007886 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e076      	b.n	8007978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d105      	bne.n	800789c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007890:	893b      	ldrh	r3, [r7, #8]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	611a      	str	r2, [r3, #16]
 800789a:	e021      	b.n	80078e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800789c:	893b      	ldrh	r3, [r7, #8]
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ac:	6a39      	ldr	r1, [r7, #32]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f93e 	bl	8007b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00d      	beq.n	80078d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d107      	bne.n	80078d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e050      	b.n	8007978 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078d6:	893b      	ldrh	r3, [r7, #8]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e2:	6a39      	ldr	r1, [r7, #32]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f923 	bl	8007b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00d      	beq.n	800790c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d107      	bne.n	8007908 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007906:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e035      	b.n	8007978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800791a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	2200      	movs	r2, #0
 8007924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f82b 	bl	8007984 <I2C_WaitOnFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00d      	beq.n	8007950 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007942:	d103      	bne.n	800794c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800794a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e013      	b.n	8007978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007950:	897b      	ldrh	r3, [r7, #10]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	6a3a      	ldr	r2, [r7, #32]
 8007964:	4906      	ldr	r1, [pc, #24]	; (8007980 <I2C_RequestMemoryRead+0x1cc>)
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f863 	bl	8007a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	00010002 	.word	0x00010002

08007984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4613      	mov	r3, r2
 8007992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007994:	e025      	b.n	80079e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d021      	beq.n	80079e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799e:	f7fd fff7 	bl	8005990 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d116      	bne.n	80079e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f043 0220 	orr.w	r2, r3, #32
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e023      	b.n	8007a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d10d      	bne.n	8007a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	43da      	mvns	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4013      	ands	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bf0c      	ite	eq
 80079fe:	2301      	moveq	r3, #1
 8007a00:	2300      	movne	r3, #0
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	e00c      	b.n	8007a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	43da      	mvns	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4013      	ands	r3, r2
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bf0c      	ite	eq
 8007a1a:	2301      	moveq	r3, #1
 8007a1c:	2300      	movne	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d0b6      	beq.n	8007996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	607a      	str	r2, [r7, #4]
 8007a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a40:	e051      	b.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a50:	d123      	bne.n	8007a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	f043 0204 	orr.w	r2, r3, #4
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e046      	b.n	8007b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d021      	beq.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa2:	f7fd ff75 	bl	8005990 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d302      	bcc.n	8007ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d116      	bne.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f043 0220 	orr.w	r2, r3, #32
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e020      	b.n	8007b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	0c1b      	lsrs	r3, r3, #16
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d10c      	bne.n	8007b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	43da      	mvns	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4013      	ands	r3, r2
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bf14      	ite	ne
 8007b02:	2301      	movne	r3, #1
 8007b04:	2300      	moveq	r3, #0
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	e00b      	b.n	8007b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	43da      	mvns	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	4013      	ands	r3, r2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d18d      	bne.n	8007a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b3c:	e02d      	b.n	8007b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 f8ce 	bl	8007ce0 <I2C_IsAcknowledgeFailed>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e02d      	b.n	8007baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b54:	d021      	beq.n	8007b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b56:	f7fd ff1b 	bl	8005990 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d302      	bcc.n	8007b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d116      	bne.n	8007b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f043 0220 	orr.w	r2, r3, #32
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e007      	b.n	8007baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba4:	2b80      	cmp	r3, #128	; 0x80
 8007ba6:	d1ca      	bne.n	8007b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bbe:	e02d      	b.n	8007c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f88d 	bl	8007ce0 <I2C_IsAcknowledgeFailed>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e02d      	b.n	8007c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd6:	d021      	beq.n	8007c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd8:	f7fd feda 	bl	8005990 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d302      	bcc.n	8007bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d116      	bne.n	8007c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c08:	f043 0220 	orr.w	r2, r3, #32
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e007      	b.n	8007c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	f003 0304 	and.w	r3, r3, #4
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d1ca      	bne.n	8007bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c40:	e042      	b.n	8007cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d119      	bne.n	8007c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0210 	mvn.w	r2, #16
 8007c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e029      	b.n	8007cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c84:	f7fd fe84 	bl	8005990 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d302      	bcc.n	8007c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d116      	bne.n	8007cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	f043 0220 	orr.w	r2, r3, #32
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e007      	b.n	8007cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d1b5      	bne.n	8007c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf6:	d11b      	bne.n	8007d30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	f043 0204 	orr.w	r2, r3, #4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d40:	b08f      	sub	sp, #60	; 0x3c
 8007d42:	af0a      	add	r7, sp, #40	; 0x28
 8007d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e116      	b.n	8007f7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f00a fab0 	bl	80122d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2203      	movs	r2, #3
 8007d74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f004 fa09 	bl	800c1a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	603b      	str	r3, [r7, #0]
 8007d9a:	687e      	ldr	r6, [r7, #4]
 8007d9c:	466d      	mov	r5, sp
 8007d9e:	f106 0410 	add.w	r4, r6, #16
 8007da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8007db2:	1d33      	adds	r3, r6, #4
 8007db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007db6:	6838      	ldr	r0, [r7, #0]
 8007db8:	f004 f8e0 	bl	800bf7c <USB_CoreInit>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e0d7      	b.n	8007f7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f004 f9f7 	bl	800c1c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
 8007dde:	e04a      	b.n	8007e76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007de0:	7bfa      	ldrb	r2, [r7, #15]
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	4613      	mov	r3, r2
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	1a9b      	subs	r3, r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	333d      	adds	r3, #61	; 0x3d
 8007df0:	2201      	movs	r2, #1
 8007df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007df4:	7bfa      	ldrb	r2, [r7, #15]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	333c      	adds	r3, #60	; 0x3c
 8007e04:	7bfa      	ldrb	r2, [r7, #15]
 8007e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007e08:	7bfa      	ldrb	r2, [r7, #15]
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	b298      	uxth	r0, r3
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	3342      	adds	r3, #66	; 0x42
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e20:	7bfa      	ldrb	r2, [r7, #15]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	333f      	adds	r3, #63	; 0x3f
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007e34:	7bfa      	ldrb	r2, [r7, #15]
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	1a9b      	subs	r3, r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	3344      	adds	r3, #68	; 0x44
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007e48:	7bfa      	ldrb	r2, [r7, #15]
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	3348      	adds	r3, #72	; 0x48
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007e5c:	7bfa      	ldrb	r2, [r7, #15]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	3350      	adds	r3, #80	; 0x50
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	3301      	adds	r3, #1
 8007e74:	73fb      	strb	r3, [r7, #15]
 8007e76:	7bfa      	ldrb	r2, [r7, #15]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d3af      	bcc.n	8007de0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
 8007e84:	e044      	b.n	8007f10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e86:	7bfa      	ldrb	r2, [r7, #15]
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007e98:	2200      	movs	r2, #0
 8007e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e9c:	7bfa      	ldrb	r2, [r7, #15]
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007eae:	7bfa      	ldrb	r2, [r7, #15]
 8007eb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007eb2:	7bfa      	ldrb	r2, [r7, #15]
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	440b      	add	r3, r1
 8007ec0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007ec8:	7bfa      	ldrb	r2, [r7, #15]
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007ede:	7bfa      	ldrb	r2, [r7, #15]
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ef4:	7bfa      	ldrb	r2, [r7, #15]
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
 8007f10:	7bfa      	ldrb	r2, [r7, #15]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d3b5      	bcc.n	8007e86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	687e      	ldr	r6, [r7, #4]
 8007f22:	466d      	mov	r5, sp
 8007f24:	f106 0410 	add.w	r4, r6, #16
 8007f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f34:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f38:	1d33      	adds	r3, r6, #4
 8007f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f3c:	6838      	ldr	r0, [r7, #0]
 8007f3e:	f004 f96d 	bl	800c21c <USB_DevInit>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e014      	b.n	8007f7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d102      	bne.n	8007f72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f891 	bl	8009094 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f005 f9a8 	bl	800d2cc <USB_DevDisconnect>

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_PCD_Start+0x1c>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e020      	b.n	8007fe4 <HAL_PCD_Start+0x5e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d109      	bne.n	8007fc6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d005      	beq.n	8007fc6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f004 f8da 	bl	800c184 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f005 f958 	bl	800d28a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b08d      	sub	sp, #52	; 0x34
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f005 fa16 	bl	800d434 <USB_GetMode>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	f040 83ca 	bne.w	80087a4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f005 f97a 	bl	800d30e <USB_ReadInterrupts>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 83c0 	beq.w	80087a2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f005 f971 	bl	800d30e <USB_ReadInterrupts>
 800802c:	4603      	mov	r3, r0
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b02      	cmp	r3, #2
 8008034:	d107      	bne.n	8008046 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	695a      	ldr	r2, [r3, #20]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f002 0202 	and.w	r2, r2, #2
 8008044:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f005 f95f 	bl	800d30e <USB_ReadInterrupts>
 8008050:	4603      	mov	r3, r0
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b10      	cmp	r3, #16
 8008058:	d161      	bne.n	800811e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0210 	bic.w	r2, r2, #16
 8008068:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 020f 	and.w	r2, r3, #15
 8008076:	4613      	mov	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	4413      	add	r3, r2
 8008086:	3304      	adds	r3, #4
 8008088:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	0c5b      	lsrs	r3, r3, #17
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	2b02      	cmp	r3, #2
 8008094:	d124      	bne.n	80080e0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800809c:	4013      	ands	r3, r2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d035      	beq.n	800810e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	091b      	lsrs	r3, r3, #4
 80080aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80080ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	6a38      	ldr	r0, [r7, #32]
 80080b6:	f004 ffc5 	bl	800d044 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	091b      	lsrs	r3, r3, #4
 80080c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080c6:	441a      	add	r2, r3
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	699a      	ldr	r2, [r3, #24]
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	091b      	lsrs	r3, r3, #4
 80080d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080d8:	441a      	add	r2, r3
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	619a      	str	r2, [r3, #24]
 80080de:	e016      	b.n	800810e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	0c5b      	lsrs	r3, r3, #17
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	2b06      	cmp	r3, #6
 80080ea:	d110      	bne.n	800810e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080f2:	2208      	movs	r2, #8
 80080f4:	4619      	mov	r1, r3
 80080f6:	6a38      	ldr	r0, [r7, #32]
 80080f8:	f004 ffa4 	bl	800d044 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008108:	441a      	add	r2, r3
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0210 	orr.w	r2, r2, #16
 800811c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f005 f8f3 	bl	800d30e <USB_ReadInterrupts>
 8008128:	4603      	mov	r3, r0
 800812a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800812e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008132:	d16e      	bne.n	8008212 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f005 f8f9 	bl	800d334 <USB_ReadDevAllOutEpInterrupt>
 8008142:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008144:	e062      	b.n	800820c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d057      	beq.n	8008200 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f005 f91e 	bl	800d39c <USB_ReadDevOutEPInterrupt>
 8008160:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00c      	beq.n	8008186 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008178:	461a      	mov	r2, r3
 800817a:	2301      	movs	r3, #1
 800817c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800817e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fddd 	bl	8008d40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	461a      	mov	r2, r3
 800819e:	2308      	movs	r3, #8
 80081a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80081a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fed7 	bl	8008f58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c0:	461a      	mov	r2, r3
 80081c2:	2310      	movs	r3, #16
 80081c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081dc:	461a      	mov	r2, r3
 80081de:	2320      	movs	r3, #32
 80081e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	461a      	mov	r2, r3
 80081fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	3301      	adds	r3, #1
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	085b      	lsrs	r3, r3, #1
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d199      	bne.n	8008146 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f005 f879 	bl	800d30e <USB_ReadInterrupts>
 800821c:	4603      	mov	r3, r0
 800821e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008222:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008226:	f040 80c0 	bne.w	80083aa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f005 f89a 	bl	800d368 <USB_ReadDevAllInEpInterrupt>
 8008234:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800823a:	e0b2      	b.n	80083a2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80a7 	beq.w	8008396 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f005 f8c0 	bl	800d3d8 <USB_ReadDevInEPInterrupt>
 8008258:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d057      	beq.n	8008314 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	2201      	movs	r2, #1
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	43db      	mvns	r3, r3
 800827e:	69f9      	ldr	r1, [r7, #28]
 8008280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008284:	4013      	ands	r3, r2
 8008286:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008294:	461a      	mov	r2, r3
 8008296:	2301      	movs	r3, #1
 8008298:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d132      	bne.n	8008308 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a6:	4613      	mov	r3, r2
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	440b      	add	r3, r1
 80082b0:	3348      	adds	r3, #72	; 0x48
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b8:	4613      	mov	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4403      	add	r3, r0
 80082c2:	3344      	adds	r3, #68	; 0x44
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4419      	add	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4403      	add	r3, r0
 80082d6:	3348      	adds	r3, #72	; 0x48
 80082d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d113      	bne.n	8008308 <HAL_PCD_IRQHandler+0x31c>
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e4:	4613      	mov	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	3350      	adds	r3, #80	; 0x50
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d108      	bne.n	8008308 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008300:	461a      	mov	r2, r3
 8008302:	2101      	movs	r1, #1
 8008304:	f005 f8c8 	bl	800d498 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	b2db      	uxtb	r3, r3
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f00a f85f 	bl	80123d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832a:	461a      	mov	r2, r3
 800832c:	2308      	movs	r3, #8
 800832e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b00      	cmp	r3, #0
 8008338:	d008      	beq.n	800834c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008346:	461a      	mov	r2, r3
 8008348:	2310      	movs	r3, #16
 800834a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d008      	beq.n	8008368 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008362:	461a      	mov	r2, r3
 8008364:	2340      	movs	r3, #64	; 0x40
 8008366:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d008      	beq.n	8008384 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	461a      	mov	r2, r3
 8008380:	2302      	movs	r3, #2
 8008382:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800838e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fc48 	bl	8008c26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	3301      	adds	r3, #1
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f47f af49 	bne.w	800823c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f004 ffad 	bl	800d30e <USB_ReadInterrupts>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083be:	d122      	bne.n	8008406 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d108      	bne.n	80083f0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f00a fa41 	bl	8012870 <HAL_PCDEx_LPM_Callback>
 80083ee:	e002      	b.n	80083f6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f00a f865 	bl	80124c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	695a      	ldr	r2, [r3, #20]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f004 ff7f 	bl	800d30e <USB_ReadInterrupts>
 8008410:	4603      	mov	r3, r0
 8008412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841a:	d112      	bne.n	8008442 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	d102      	bne.n	8008432 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f00a f821 	bl	8012474 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695a      	ldr	r2, [r3, #20]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008440:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f004 ff61 	bl	800d30e <USB_ReadInterrupts>
 800844c:	4603      	mov	r3, r0
 800844e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008456:	d121      	bne.n	800849c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	695a      	ldr	r2, [r3, #20]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008466:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800846e:	2b00      	cmp	r3, #0
 8008470:	d111      	bne.n	8008496 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	089b      	lsrs	r3, r3, #2
 8008482:	f003 020f 	and.w	r2, r3, #15
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800848c:	2101      	movs	r1, #1
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f00a f9ee 	bl	8012870 <HAL_PCDEx_LPM_Callback>
 8008494:	e002      	b.n	800849c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f009 ffec 	bl	8012474 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f004 ff34 	bl	800d30e <USB_ReadInterrupts>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	f040 80c7 	bne.w	8008642 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2110      	movs	r1, #16
 80084ce:	4618      	mov	r0, r3
 80084d0:	f004 f802 	bl	800c4d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084d4:	2300      	movs	r3, #0
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084d8:	e056      	b.n	8008588 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e6:	461a      	mov	r2, r3
 80084e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008508:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800850c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	440a      	add	r2, r1
 8008524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800852c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853a:	461a      	mov	r2, r3
 800853c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008540:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008560:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	440a      	add	r2, r1
 8008578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008580:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	3301      	adds	r3, #1
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800858e:	429a      	cmp	r2, r3
 8008590:	d3a3      	bcc.n	80084da <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80085a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d016      	beq.n	80085dc <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085be:	f043 030b 	orr.w	r3, r3, #11
 80085c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d4:	f043 030b 	orr.w	r3, r3, #11
 80085d8:	6453      	str	r3, [r2, #68]	; 0x44
 80085da:	e015      	b.n	8008608 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80085f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008602:	f043 030b 	orr.w	r3, r3, #11
 8008606:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008616:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800861a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800862c:	461a      	mov	r2, r3
 800862e:	f004 ff33 	bl	800d498 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	695a      	ldr	r2, [r3, #20]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f004 fe61 	bl	800d30e <USB_ReadInterrupts>
 800864c:	4603      	mov	r3, r0
 800864e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008656:	d124      	bne.n	80086a2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f004 fef7 	bl	800d450 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f003 ff97 	bl	800c59a <USB_GetDevSpeed>
 800866c:	4603      	mov	r3, r0
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681c      	ldr	r4, [r3, #0]
 8008678:	f000 fe66 	bl	8009348 <HAL_RCC_GetHCLKFreq>
 800867c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	4620      	mov	r0, r4
 8008688:	f003 fcda 	bl	800c040 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f009 fec8 	bl	8012422 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695a      	ldr	r2, [r3, #20]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80086a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f004 fe31 	bl	800d30e <USB_ReadInterrupts>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d10a      	bne.n	80086cc <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f009 fea5 	bl	8012406 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695a      	ldr	r2, [r3, #20]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f002 0208 	and.w	r2, r2, #8
 80086ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f004 fe1c 	bl	800d30e <USB_ReadInterrupts>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e0:	d10f      	bne.n	8008702 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f009 ff07 	bl	8012500 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f004 fe01 	bl	800d30e <USB_ReadInterrupts>
 800870c:	4603      	mov	r3, r0
 800870e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008716:	d10f      	bne.n	8008738 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	b2db      	uxtb	r3, r3
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f009 feda 	bl	80124dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695a      	ldr	r2, [r3, #20]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f004 fde6 	bl	800d30e <USB_ReadInterrupts>
 8008742:	4603      	mov	r3, r0
 8008744:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874c:	d10a      	bne.n	8008764 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f009 fee8 	bl	8012524 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695a      	ldr	r2, [r3, #20]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f004 fdd0 	bl	800d30e <USB_ReadInterrupts>
 800876e:	4603      	mov	r3, r0
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b04      	cmp	r3, #4
 8008776:	d115      	bne.n	80087a4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f009 fed8 	bl	8012540 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6859      	ldr	r1, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	430a      	orrs	r2, r1
 800879e:	605a      	str	r2, [r3, #4]
 80087a0:	e000      	b.n	80087a4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80087a2:	bf00      	nop
    }
  }
}
 80087a4:	3734      	adds	r7, #52	; 0x34
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd90      	pop	{r4, r7, pc}

080087aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_PCD_SetAddress+0x1a>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e013      	b.n	80087ec <HAL_PCD_SetAddress+0x42>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	4611      	mov	r1, r2
 80087dc:	4618      	mov	r0, r3
 80087de:	f004 fd2e 	bl	800d23e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	461a      	mov	r2, r3
 8008802:	4603      	mov	r3, r0
 8008804:	70fb      	strb	r3, [r7, #3]
 8008806:	460b      	mov	r3, r1
 8008808:	803b      	strh	r3, [r7, #0]
 800880a:	4613      	mov	r3, r2
 800880c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008816:	2b00      	cmp	r3, #0
 8008818:	da0f      	bge.n	800883a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	f003 020f 	and.w	r2, r3, #15
 8008820:	4613      	mov	r3, r2
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	3338      	adds	r3, #56	; 0x38
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	4413      	add	r3, r2
 800882e:	3304      	adds	r3, #4
 8008830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	705a      	strb	r2, [r3, #1]
 8008838:	e00f      	b.n	800885a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	4413      	add	r3, r2
 8008850:	3304      	adds	r3, #4
 8008852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	b2da      	uxtb	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008866:	883a      	ldrh	r2, [r7, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	78ba      	ldrb	r2, [r7, #2]
 8008870:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	785b      	ldrb	r3, [r3, #1]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d004      	beq.n	8008884 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008884:	78bb      	ldrb	r3, [r7, #2]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d102      	bne.n	8008890 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_PCD_EP_Open+0xaa>
 800889a:	2302      	movs	r3, #2
 800889c:	e00e      	b.n	80088bc <HAL_PCD_EP_Open+0xc8>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68f9      	ldr	r1, [r7, #12]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f003 fe99 	bl	800c5e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80088ba:	7afb      	ldrb	r3, [r7, #11]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80088d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da0f      	bge.n	80088f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	f003 020f 	and.w	r2, r3, #15
 80088de:	4613      	mov	r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	1a9b      	subs	r3, r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	3338      	adds	r3, #56	; 0x38
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	4413      	add	r3, r2
 80088ec:	3304      	adds	r3, #4
 80088ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	705a      	strb	r2, [r3, #1]
 80088f6:	e00f      	b.n	8008918 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	f003 020f 	and.w	r2, r3, #15
 80088fe:	4613      	mov	r3, r2
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	3304      	adds	r3, #4
 8008910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	f003 030f 	and.w	r3, r3, #15
 800891e:	b2da      	uxtb	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800892a:	2b01      	cmp	r3, #1
 800892c:	d101      	bne.n	8008932 <HAL_PCD_EP_Close+0x6e>
 800892e:	2302      	movs	r3, #2
 8008930:	e00e      	b.n	8008950 <HAL_PCD_EP_Close+0x8c>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	4618      	mov	r0, r3
 8008942:	f003 fed7 	bl	800c6f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	607a      	str	r2, [r7, #4]
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	460b      	mov	r3, r1
 8008966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	f003 020f 	and.w	r2, r3, #15
 800896e:	4613      	mov	r3, r2
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	3304      	adds	r3, #4
 8008980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2200      	movs	r2, #0
 8008992:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2200      	movs	r2, #0
 8008998:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d102      	bne.n	80089b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d109      	bne.n	80089d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	461a      	mov	r2, r3
 80089ca:	6979      	ldr	r1, [r7, #20]
 80089cc:	f004 f9b2 	bl	800cd34 <USB_EP0StartXfer>
 80089d0:	e008      	b.n	80089e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	f003 ff64 	bl	800c8ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	f003 020f 	and.w	r2, r3, #15
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	440b      	add	r3, r1
 8008a0c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008a10:	681b      	ldr	r3, [r3, #0]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b086      	sub	sp, #24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	4613      	mov	r3, r2
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	1a9b      	subs	r3, r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	3338      	adds	r3, #56	; 0x38
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	3304      	adds	r3, #4
 8008a44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2200      	movs	r2, #0
 8008a56:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
 8008a60:	f003 030f 	and.w	r3, r3, #15
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d102      	bne.n	8008a78 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6979      	ldr	r1, [r7, #20]
 8008a90:	f004 f950 	bl	800cd34 <USB_EP0StartXfer>
 8008a94:	e008      	b.n	8008aa8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6818      	ldr	r0, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	f003 ff02 	bl	800c8ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	f003 020f 	and.w	r2, r3, #15
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d901      	bls.n	8008ad0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e050      	b.n	8008b72 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da0f      	bge.n	8008af8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	f003 020f 	and.w	r2, r3, #15
 8008ade:	4613      	mov	r3, r2
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	3338      	adds	r3, #56	; 0x38
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	4413      	add	r3, r2
 8008aec:	3304      	adds	r3, #4
 8008aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	705a      	strb	r2, [r3, #1]
 8008af6:	e00d      	b.n	8008b14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008af8:	78fa      	ldrb	r2, [r7, #3]
 8008afa:	4613      	mov	r3, r2
 8008afc:	00db      	lsls	r3, r3, #3
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	4413      	add	r3, r2
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_PCD_EP_SetStall+0x82>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e01e      	b.n	8008b72 <HAL_PCD_EP_SetStall+0xc0>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68f9      	ldr	r1, [r7, #12]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f004 faa7 	bl	800d096 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	b2d9      	uxtb	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b62:	461a      	mov	r2, r3
 8008b64:	f004 fc98 	bl	800d498 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	460b      	mov	r3, r1
 8008b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	f003 020f 	and.w	r2, r3, #15
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d901      	bls.n	8008b98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e042      	b.n	8008c1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	da0f      	bge.n	8008bc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	f003 020f 	and.w	r2, r3, #15
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	3338      	adds	r3, #56	; 0x38
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	705a      	strb	r2, [r3, #1]
 8008bbe:	e00f      	b.n	8008be0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	f003 020f 	and.w	r2, r3, #15
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_PCD_EP_ClrStall+0x86>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e00e      	b.n	8008c1e <HAL_PCD_EP_ClrStall+0xa4>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68f9      	ldr	r1, [r7, #12]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f004 faaf 	bl	800d172 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b08a      	sub	sp, #40	; 0x28
 8008c2a:	af02      	add	r7, sp, #8
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	3338      	adds	r3, #56	; 0x38
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	4413      	add	r3, r2
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d901      	bls.n	8008c5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e06c      	b.n	8008d38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	695a      	ldr	r2, [r3, #20]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d902      	bls.n	8008c7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	3303      	adds	r3, #3
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c82:	e02b      	b.n	8008cdc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	695a      	ldr	r2, [r3, #20]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d902      	bls.n	8008ca0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	3303      	adds	r3, #3
 8008ca4:	089b      	lsrs	r3, r3, #2
 8008ca6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	68d9      	ldr	r1, [r3, #12]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	6978      	ldr	r0, [r7, #20]
 8008cc0:	f004 f98b 	bl	800cfda <USB_WritePacket>

    ep->xfer_buff  += len;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	441a      	add	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	441a      	add	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d809      	bhi.n	8008d06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	699a      	ldr	r2, [r3, #24]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d203      	bcs.n	8008d06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1be      	bne.n	8008c84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	695a      	ldr	r2, [r3, #20]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d811      	bhi.n	8008d36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	f003 030f 	and.w	r3, r3, #15
 8008d18:	2201      	movs	r2, #1
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	43db      	mvns	r3, r3
 8008d2c:	6939      	ldr	r1, [r7, #16]
 8008d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d32:	4013      	ands	r3, r2
 8008d34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	333c      	adds	r3, #60	; 0x3c
 8008d58:	3304      	adds	r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	f040 80a0 	bne.w	8008eb8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d015      	beq.n	8008dae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a72      	ldr	r2, [pc, #456]	; (8008f50 <PCD_EP_OutXfrComplete_int+0x210>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	f240 80dd 	bls.w	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 80d7 	beq.w	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da4:	461a      	mov	r2, r3
 8008da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008daa:	6093      	str	r3, [r2, #8]
 8008dac:	e0cb      	b.n	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d009      	beq.n	8008dcc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	2320      	movs	r3, #32
 8008dc8:	6093      	str	r3, [r2, #8]
 8008dca:	e0bc      	b.n	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f040 80b7 	bne.w	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4a5d      	ldr	r2, [pc, #372]	; (8008f50 <PCD_EP_OutXfrComplete_int+0x210>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d90f      	bls.n	8008e00 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df6:	461a      	mov	r2, r3
 8008df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dfc:	6093      	str	r3, [r2, #8]
 8008dfe:	e0a2      	b.n	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	4613      	mov	r3, r2
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008e12:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	0159      	lsls	r1, r3, #5
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	440b      	add	r3, r1
 8008e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008e26:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	1a9b      	subs	r3, r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4403      	add	r3, r0
 8008e36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008e3a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	4613      	mov	r3, r2
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4403      	add	r3, r0
 8008e5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4419      	add	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4403      	add	r3, r0
 8008e74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e78:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d114      	bne.n	8008eaa <PCD_EP_OutXfrComplete_int+0x16a>
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d108      	bne.n	8008eaa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	f004 faf7 	bl	800d498 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f009 fa73 	bl	801239c <HAL_PCD_DataOutStageCallback>
 8008eb6:	e046      	b.n	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a26      	ldr	r2, [pc, #152]	; (8008f54 <PCD_EP_OutXfrComplete_int+0x214>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d124      	bne.n	8008f0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008edc:	6093      	str	r3, [r2, #8]
 8008ede:	e032      	b.n	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d008      	beq.n	8008efc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	2320      	movs	r3, #32
 8008efa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f009 fa4a 	bl	801239c <HAL_PCD_DataOutStageCallback>
 8008f08:	e01d      	b.n	8008f46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d114      	bne.n	8008f3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d108      	bne.n	8008f3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f32:	461a      	mov	r2, r3
 8008f34:	2100      	movs	r1, #0
 8008f36:	f004 faaf 	bl	800d498 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f009 fa2b 	bl	801239c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	4f54300a 	.word	0x4f54300a
 8008f54:	4f54310a 	.word	0x4f54310a

08008f58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	333c      	adds	r3, #60	; 0x3c
 8008f70:	3304      	adds	r3, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4a15      	ldr	r2, [pc, #84]	; (8008fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d90e      	bls.n	8008fac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d009      	beq.n	8008fac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008faa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f009 f9e3 	bl	8012378 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d90c      	bls.n	8008fd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d108      	bne.n	8008fd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fcc:	461a      	mov	r2, r3
 8008fce:	2101      	movs	r1, #1
 8008fd0:	f004 fa62 	bl	800d498 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	4f54300a 	.word	0x4f54300a

08008fe4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d107      	bne.n	8009012 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009002:	883b      	ldrh	r3, [r7, #0]
 8009004:	0419      	lsls	r1, r3, #16
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	430a      	orrs	r2, r1
 800900e:	629a      	str	r2, [r3, #40]	; 0x28
 8009010:	e028      	b.n	8009064 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
 8009024:	e00d      	b.n	8009042 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	3340      	adds	r3, #64	; 0x40
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	0c1b      	lsrs	r3, r3, #16
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	4413      	add	r3, r2
 800903a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	3301      	adds	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]
 8009042:	7bfa      	ldrb	r2, [r7, #15]
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	3b01      	subs	r3, #1
 8009048:	429a      	cmp	r2, r3
 800904a:	d3ec      	bcc.n	8009026 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800904c:	883b      	ldrh	r3, [r7, #0]
 800904e:	0418      	lsls	r0, r3, #16
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	3b01      	subs	r3, #1
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	4302      	orrs	r2, r0
 800905c:	3340      	adds	r3, #64	; 0x40
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	887a      	ldrh	r2, [r7, #2]
 8009084:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090c6:	f043 0303 	orr.w	r3, r3, #3
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80090e6:	2300      	movs	r3, #0
 80090e8:	603b      	str	r3, [r7, #0]
 80090ea:	4b20      	ldr	r3, [pc, #128]	; (800916c <HAL_PWREx_EnableOverDrive+0x90>)
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	4a1f      	ldr	r2, [pc, #124]	; (800916c <HAL_PWREx_EnableOverDrive+0x90>)
 80090f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090f4:	6413      	str	r3, [r2, #64]	; 0x40
 80090f6:	4b1d      	ldr	r3, [pc, #116]	; (800916c <HAL_PWREx_EnableOverDrive+0x90>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009102:	4b1b      	ldr	r3, [pc, #108]	; (8009170 <HAL_PWREx_EnableOverDrive+0x94>)
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009108:	f7fc fc42 	bl	8005990 <HAL_GetTick>
 800910c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800910e:	e009      	b.n	8009124 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009110:	f7fc fc3e 	bl	8005990 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800911e:	d901      	bls.n	8009124 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e01f      	b.n	8009164 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009124:	4b13      	ldr	r3, [pc, #76]	; (8009174 <HAL_PWREx_EnableOverDrive+0x98>)
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800912c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009130:	d1ee      	bne.n	8009110 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009132:	4b11      	ldr	r3, [pc, #68]	; (8009178 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009134:	2201      	movs	r2, #1
 8009136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009138:	f7fc fc2a 	bl	8005990 <HAL_GetTick>
 800913c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800913e:	e009      	b.n	8009154 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009140:	f7fc fc26 	bl	8005990 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800914e:	d901      	bls.n	8009154 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e007      	b.n	8009164 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009154:	4b07      	ldr	r3, [pc, #28]	; (8009174 <HAL_PWREx_EnableOverDrive+0x98>)
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009160:	d1ee      	bne.n	8009140 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40023800 	.word	0x40023800
 8009170:	420e0040 	.word	0x420e0040
 8009174:	40007000 	.word	0x40007000
 8009178:	420e0044 	.word	0x420e0044

0800917c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e0cc      	b.n	800932a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009190:	4b68      	ldr	r3, [pc, #416]	; (8009334 <HAL_RCC_ClockConfig+0x1b8>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d90c      	bls.n	80091b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800919e:	4b65      	ldr	r3, [pc, #404]	; (8009334 <HAL_RCC_ClockConfig+0x1b8>)
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091a6:	4b63      	ldr	r3, [pc, #396]	; (8009334 <HAL_RCC_ClockConfig+0x1b8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d001      	beq.n	80091b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e0b8      	b.n	800932a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d020      	beq.n	8009206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d005      	beq.n	80091dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091d0:	4b59      	ldr	r3, [pc, #356]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	4a58      	ldr	r2, [pc, #352]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80091d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091e8:	4b53      	ldr	r3, [pc, #332]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	4a52      	ldr	r2, [pc, #328]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80091ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091f4:	4b50      	ldr	r3, [pc, #320]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	494d      	ldr	r1, [pc, #308]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 8009202:	4313      	orrs	r3, r2
 8009204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	d044      	beq.n	800929c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d107      	bne.n	800922a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800921a:	4b47      	ldr	r3, [pc, #284]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d119      	bne.n	800925a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e07f      	b.n	800932a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d003      	beq.n	800923a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009236:	2b03      	cmp	r3, #3
 8009238:	d107      	bne.n	800924a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800923a:	4b3f      	ldr	r3, [pc, #252]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d109      	bne.n	800925a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e06f      	b.n	800932a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800924a:	4b3b      	ldr	r3, [pc, #236]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e067      	b.n	800932a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800925a:	4b37      	ldr	r3, [pc, #220]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f023 0203 	bic.w	r2, r3, #3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	4934      	ldr	r1, [pc, #208]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 8009268:	4313      	orrs	r3, r2
 800926a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800926c:	f7fc fb90 	bl	8005990 <HAL_GetTick>
 8009270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009272:	e00a      	b.n	800928a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009274:	f7fc fb8c 	bl	8005990 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009282:	4293      	cmp	r3, r2
 8009284:	d901      	bls.n	800928a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e04f      	b.n	800932a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800928a:	4b2b      	ldr	r3, [pc, #172]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f003 020c 	and.w	r2, r3, #12
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	429a      	cmp	r2, r3
 800929a:	d1eb      	bne.n	8009274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800929c:	4b25      	ldr	r3, [pc, #148]	; (8009334 <HAL_RCC_ClockConfig+0x1b8>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d20c      	bcs.n	80092c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092aa:	4b22      	ldr	r3, [pc, #136]	; (8009334 <HAL_RCC_ClockConfig+0x1b8>)
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	b2d2      	uxtb	r2, r2
 80092b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092b2:	4b20      	ldr	r3, [pc, #128]	; (8009334 <HAL_RCC_ClockConfig+0x1b8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d001      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e032      	b.n	800932a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d008      	beq.n	80092e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092d0:	4b19      	ldr	r3, [pc, #100]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	4916      	ldr	r1, [pc, #88]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0308 	and.w	r3, r3, #8
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092ee:	4b12      	ldr	r3, [pc, #72]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	490e      	ldr	r1, [pc, #56]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009302:	f000 fbb1 	bl	8009a68 <HAL_RCC_GetSysClockFreq>
 8009306:	4601      	mov	r1, r0
 8009308:	4b0b      	ldr	r3, [pc, #44]	; (8009338 <HAL_RCC_ClockConfig+0x1bc>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	4a0a      	ldr	r2, [pc, #40]	; (800933c <HAL_RCC_ClockConfig+0x1c0>)
 8009314:	5cd3      	ldrb	r3, [r2, r3]
 8009316:	fa21 f303 	lsr.w	r3, r1, r3
 800931a:	4a09      	ldr	r2, [pc, #36]	; (8009340 <HAL_RCC_ClockConfig+0x1c4>)
 800931c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800931e:	4b09      	ldr	r3, [pc, #36]	; (8009344 <HAL_RCC_ClockConfig+0x1c8>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f7fc f94e 	bl	80055c4 <HAL_InitTick>

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	40023c00 	.word	0x40023c00
 8009338:	40023800 	.word	0x40023800
 800933c:	08018310 	.word	0x08018310
 8009340:	20000280 	.word	0x20000280
 8009344:	20000284 	.word	0x20000284

08009348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800934c:	4b03      	ldr	r3, [pc, #12]	; (800935c <HAL_RCC_GetHCLKFreq+0x14>)
 800934e:	681b      	ldr	r3, [r3, #0]
}
 8009350:	4618      	mov	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	20000280 	.word	0x20000280

08009360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009364:	f7ff fff0 	bl	8009348 <HAL_RCC_GetHCLKFreq>
 8009368:	4601      	mov	r1, r0
 800936a:	4b05      	ldr	r3, [pc, #20]	; (8009380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	0a9b      	lsrs	r3, r3, #10
 8009370:	f003 0307 	and.w	r3, r3, #7
 8009374:	4a03      	ldr	r2, [pc, #12]	; (8009384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009376:	5cd3      	ldrb	r3, [r2, r3]
 8009378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800937c:	4618      	mov	r0, r3
 800937e:	bd80      	pop	{r7, pc}
 8009380:	40023800 	.word	0x40023800
 8009384:	08018320 	.word	0x08018320

08009388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800938c:	f7ff ffdc 	bl	8009348 <HAL_RCC_GetHCLKFreq>
 8009390:	4601      	mov	r1, r0
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	0b5b      	lsrs	r3, r3, #13
 8009398:	f003 0307 	and.w	r3, r3, #7
 800939c:	4a03      	ldr	r2, [pc, #12]	; (80093ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800939e:	5cd3      	ldrb	r3, [r2, r3]
 80093a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	40023800 	.word	0x40023800
 80093ac:	08018320 	.word	0x08018320

080093b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	220f      	movs	r2, #15
 80093be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093c0:	4b12      	ldr	r3, [pc, #72]	; (800940c <HAL_RCC_GetClockConfig+0x5c>)
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f003 0203 	and.w	r2, r3, #3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093cc:	4b0f      	ldr	r3, [pc, #60]	; (800940c <HAL_RCC_GetClockConfig+0x5c>)
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80093d8:	4b0c      	ldr	r3, [pc, #48]	; (800940c <HAL_RCC_GetClockConfig+0x5c>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80093e4:	4b09      	ldr	r3, [pc, #36]	; (800940c <HAL_RCC_GetClockConfig+0x5c>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	08db      	lsrs	r3, r3, #3
 80093ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093f2:	4b07      	ldr	r3, [pc, #28]	; (8009410 <HAL_RCC_GetClockConfig+0x60>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 020f 	and.w	r2, r3, #15
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	601a      	str	r2, [r3, #0]
}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	40023800 	.word	0x40023800
 8009410:	40023c00 	.word	0x40023c00

08009414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800942c:	2300      	movs	r3, #0
 800942e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800944c:	4b6f      	ldr	r3, [pc, #444]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800944e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009452:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945a:	496c      	ldr	r1, [pc, #432]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800945c:	4313      	orrs	r3, r2
 800945e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800946a:	2301      	movs	r3, #1
 800946c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d010      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800947a:	4b64      	ldr	r3, [pc, #400]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800947c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009480:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009488:	4960      	ldr	r1, [pc, #384]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800948a:	4313      	orrs	r3, r2
 800948c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8009498:	2301      	movs	r3, #1
 800949a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d017      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094a8:	4b58      	ldr	r3, [pc, #352]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	4955      	ldr	r1, [pc, #340]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094c6:	d101      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80094c8:	2301      	movs	r3, #1
 80094ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80094d4:	2301      	movs	r3, #1
 80094d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d017      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80094e4:	4b49      	ldr	r3, [pc, #292]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f2:	4946      	ldr	r1, [pc, #280]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009502:	d101      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009504:	2301      	movs	r3, #1
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8009510:	2301      	movs	r3, #1
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 808a 	beq.w	8009636 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]
 8009526:	4b39      	ldr	r3, [pc, #228]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	4a38      	ldr	r2, [pc, #224]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800952c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009530:	6413      	str	r3, [r2, #64]	; 0x40
 8009532:	4b36      	ldr	r3, [pc, #216]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800953a:	60bb      	str	r3, [r7, #8]
 800953c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800953e:	4b34      	ldr	r3, [pc, #208]	; (8009610 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a33      	ldr	r2, [pc, #204]	; (8009610 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009548:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800954a:	f7fc fa21 	bl	8005990 <HAL_GetTick>
 800954e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009550:	e008      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009552:	f7fc fa1d 	bl	8005990 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d901      	bls.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e278      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009564:	4b2a      	ldr	r3, [pc, #168]	; (8009610 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0f0      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009570:	4b26      	ldr	r3, [pc, #152]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009578:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800957a:	6a3b      	ldr	r3, [r7, #32]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d02f      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009588:	6a3a      	ldr	r2, [r7, #32]
 800958a:	429a      	cmp	r2, r3
 800958c:	d028      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800958e:	4b1f      	ldr	r3, [pc, #124]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009596:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009598:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800959e:	4b1d      	ldr	r3, [pc, #116]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80095a4:	4a19      	ldr	r2, [pc, #100]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095aa:	4b18      	ldr	r3, [pc, #96]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d114      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80095b6:	f7fc f9eb 	bl	8005990 <HAL_GetTick>
 80095ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095bc:	e00a      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095be:	f7fc f9e7 	bl	8005990 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d901      	bls.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e240      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095d4:	4b0d      	ldr	r3, [pc, #52]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80095d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0ee      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095ec:	d114      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80095ee:	4b07      	ldr	r3, [pc, #28]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009602:	4902      	ldr	r1, [pc, #8]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009604:	4313      	orrs	r3, r2
 8009606:	608b      	str	r3, [r1, #8]
 8009608:	e00c      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800960a:	bf00      	nop
 800960c:	40023800 	.word	0x40023800
 8009610:	40007000 	.word	0x40007000
 8009614:	42470e40 	.word	0x42470e40
 8009618:	4b4a      	ldr	r3, [pc, #296]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	4a49      	ldr	r2, [pc, #292]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800961e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009622:	6093      	str	r3, [r2, #8]
 8009624:	4b47      	ldr	r3, [pc, #284]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009630:	4944      	ldr	r1, [pc, #272]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009632:	4313      	orrs	r3, r2
 8009634:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009648:	4b3f      	ldr	r3, [pc, #252]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800964a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8009658:	4b3a      	ldr	r3, [pc, #232]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800965a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800965e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009666:	4937      	ldr	r1, [pc, #220]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009668:	4313      	orrs	r3, r2
 800966a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800967a:	4b32      	ldr	r3, [pc, #200]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800967c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009680:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009688:	492e      	ldr	r1, [pc, #184]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009698:	2b00      	cmp	r3, #0
 800969a:	d011      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800969c:	4b29      	ldr	r3, [pc, #164]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800969e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096aa:	4926      	ldr	r1, [pc, #152]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ba:	d101      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80096bc:	2301      	movs	r3, #1
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80096cc:	4b1d      	ldr	r3, [pc, #116]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096da:	491a      	ldr	r1, [pc, #104]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d011      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80096ee:	4b15      	ldr	r3, [pc, #84]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096f4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fc:	4911      	ldr	r1, [pc, #68]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800970c:	d101      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800970e:	2301      	movs	r3, #1
 8009710:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009714:	2b01      	cmp	r3, #1
 8009716:	d005      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009720:	f040 80ff 	bne.w	8009922 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009724:	4b09      	ldr	r3, [pc, #36]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009726:	2200      	movs	r2, #0
 8009728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800972a:	f7fc f931 	bl	8005990 <HAL_GetTick>
 800972e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009730:	e00e      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009732:	f7fc f92d 	bl	8005990 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d907      	bls.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e188      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009744:	40023800 	.word	0x40023800
 8009748:	424711e0 	.word	0x424711e0
 800974c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009750:	4b7e      	ldr	r3, [pc, #504]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1ea      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009778:	2b00      	cmp	r3, #0
 800977a:	d028      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d124      	bne.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009784:	4b71      	ldr	r3, [pc, #452]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800978a:	0c1b      	lsrs	r3, r3, #16
 800978c:	f003 0303 	and.w	r3, r3, #3
 8009790:	3301      	adds	r3, #1
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009796:	4b6d      	ldr	r3, [pc, #436]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800979c:	0e1b      	lsrs	r3, r3, #24
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	019b      	lsls	r3, r3, #6
 80097ae:	431a      	orrs	r2, r3
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	085b      	lsrs	r3, r3, #1
 80097b4:	3b01      	subs	r3, #1
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	431a      	orrs	r2, r3
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	061b      	lsls	r3, r3, #24
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	071b      	lsls	r3, r3, #28
 80097c6:	4961      	ldr	r1, [pc, #388]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097e2:	d00a      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d035      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097f8:	d130      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80097fa:	4b54      	ldr	r3, [pc, #336]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009800:	0c1b      	lsrs	r3, r3, #16
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	3301      	adds	r3, #1
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800980c:	4b4f      	ldr	r3, [pc, #316]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800980e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009812:	0f1b      	lsrs	r3, r3, #28
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	019b      	lsls	r3, r3, #6
 8009824:	431a      	orrs	r2, r3
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	085b      	lsrs	r3, r3, #1
 800982a:	3b01      	subs	r3, #1
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	061b      	lsls	r3, r3, #24
 8009836:	431a      	orrs	r2, r3
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	071b      	lsls	r3, r3, #28
 800983c:	4943      	ldr	r1, [pc, #268]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800983e:	4313      	orrs	r3, r2
 8009840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009844:	4b41      	ldr	r3, [pc, #260]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800984a:	f023 021f 	bic.w	r2, r3, #31
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	3b01      	subs	r3, #1
 8009854:	493d      	ldr	r1, [pc, #244]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009856:	4313      	orrs	r3, r2
 8009858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009864:	2b00      	cmp	r3, #0
 8009866:	d029      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009870:	d124      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009872:	4b36      	ldr	r3, [pc, #216]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009878:	0c1b      	lsrs	r3, r3, #16
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	3301      	adds	r3, #1
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009884:	4b31      	ldr	r3, [pc, #196]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800988a:	0f1b      	lsrs	r3, r3, #28
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	019b      	lsls	r3, r3, #6
 800989c:	431a      	orrs	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	085b      	lsrs	r3, r3, #1
 80098a4:	3b01      	subs	r3, #1
 80098a6:	041b      	lsls	r3, r3, #16
 80098a8:	431a      	orrs	r2, r3
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	061b      	lsls	r3, r3, #24
 80098ae:	431a      	orrs	r2, r3
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	071b      	lsls	r3, r3, #28
 80098b4:	4925      	ldr	r1, [pc, #148]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d016      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	019b      	lsls	r3, r3, #6
 80098d2:	431a      	orrs	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	085b      	lsrs	r3, r3, #1
 80098da:	3b01      	subs	r3, #1
 80098dc:	041b      	lsls	r3, r3, #16
 80098de:	431a      	orrs	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	061b      	lsls	r3, r3, #24
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	071b      	lsls	r3, r3, #28
 80098ee:	4917      	ldr	r1, [pc, #92]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80098f6:	4b16      	ldr	r3, [pc, #88]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80098fc:	f7fc f848 	bl	8005990 <HAL_GetTick>
 8009900:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009902:	e008      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009904:	f7fc f844 	bl	8005990 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d901      	bls.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e09f      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009916:	4b0d      	ldr	r3, [pc, #52]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0f0      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	2b01      	cmp	r3, #1
 8009926:	f040 8095 	bne.w	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009930:	f7fc f82e 	bl	8005990 <HAL_GetTick>
 8009934:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009936:	e00f      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009938:	f7fc f82a 	bl	8005990 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d908      	bls.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e085      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800994a:	bf00      	nop
 800994c:	40023800 	.word	0x40023800
 8009950:	42470068 	.word	0x42470068
 8009954:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009958:	4b41      	ldr	r3, [pc, #260]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009964:	d0e8      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0304 	and.w	r3, r3, #4
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	2b00      	cmp	r3, #0
 8009978:	d009      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009982:	2b00      	cmp	r3, #0
 8009984:	d02b      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	2b00      	cmp	r3, #0
 800998c:	d127      	bne.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800998e:	4b34      	ldr	r3, [pc, #208]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009994:	0c1b      	lsrs	r3, r3, #16
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	3301      	adds	r3, #1
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699a      	ldr	r2, [r3, #24]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	019b      	lsls	r3, r3, #6
 80099aa:	431a      	orrs	r2, r3
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	3b01      	subs	r3, #1
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	061b      	lsls	r3, r3, #24
 80099bc:	4928      	ldr	r1, [pc, #160]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80099c4:	4b26      	ldr	r3, [pc, #152]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80099c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	3b01      	subs	r3, #1
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	4922      	ldr	r1, [pc, #136]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d01d      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099f2:	d118      	bne.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80099f4:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80099f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fa:	0e1b      	lsrs	r3, r3, #24
 80099fc:	f003 030f 	and.w	r3, r3, #15
 8009a00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	019b      	lsls	r3, r3, #6
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	085b      	lsrs	r3, r3, #1
 8009a14:	3b01      	subs	r3, #1
 8009a16:	041b      	lsls	r3, r3, #16
 8009a18:	431a      	orrs	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	061b      	lsls	r3, r3, #24
 8009a1e:	4910      	ldr	r1, [pc, #64]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8009a28:	2201      	movs	r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a2c:	f7fb ffb0 	bl	8005990 <HAL_GetTick>
 8009a30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a32:	e008      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009a34:	f7fb ffac 	bl	8005990 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e007      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a52:	d1ef      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3730      	adds	r7, #48	; 0x30
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	40023800 	.word	0x40023800
 8009a64:	42470070 	.word	0x42470070

08009a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a82:	4bc6      	ldr	r3, [pc, #792]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f003 030c 	and.w	r3, r3, #12
 8009a8a:	2b0c      	cmp	r3, #12
 8009a8c:	f200 817e 	bhi.w	8009d8c <HAL_RCC_GetSysClockFreq+0x324>
 8009a90:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <HAL_RCC_GetSysClockFreq+0x30>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009acd 	.word	0x08009acd
 8009a9c:	08009d8d 	.word	0x08009d8d
 8009aa0:	08009d8d 	.word	0x08009d8d
 8009aa4:	08009d8d 	.word	0x08009d8d
 8009aa8:	08009ad3 	.word	0x08009ad3
 8009aac:	08009d8d 	.word	0x08009d8d
 8009ab0:	08009d8d 	.word	0x08009d8d
 8009ab4:	08009d8d 	.word	0x08009d8d
 8009ab8:	08009ad9 	.word	0x08009ad9
 8009abc:	08009d8d 	.word	0x08009d8d
 8009ac0:	08009d8d 	.word	0x08009d8d
 8009ac4:	08009d8d 	.word	0x08009d8d
 8009ac8:	08009c35 	.word	0x08009c35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009acc:	4bb4      	ldr	r3, [pc, #720]	; (8009da0 <HAL_RCC_GetSysClockFreq+0x338>)
 8009ace:	613b      	str	r3, [r7, #16]
       break;
 8009ad0:	e15f      	b.n	8009d92 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ad2:	4bb4      	ldr	r3, [pc, #720]	; (8009da4 <HAL_RCC_GetSysClockFreq+0x33c>)
 8009ad4:	613b      	str	r3, [r7, #16]
      break;
 8009ad6:	e15c      	b.n	8009d92 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ad8:	4bb0      	ldr	r3, [pc, #704]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ae2:	4bae      	ldr	r3, [pc, #696]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d04a      	beq.n	8009b84 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009aee:	4bab      	ldr	r3, [pc, #684]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	099b      	lsrs	r3, r3, #6
 8009af4:	f04f 0400 	mov.w	r4, #0
 8009af8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009afc:	f04f 0200 	mov.w	r2, #0
 8009b00:	ea03 0501 	and.w	r5, r3, r1
 8009b04:	ea04 0602 	and.w	r6, r4, r2
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4632      	mov	r2, r6
 8009b0c:	f04f 0300 	mov.w	r3, #0
 8009b10:	f04f 0400 	mov.w	r4, #0
 8009b14:	0154      	lsls	r4, r2, #5
 8009b16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009b1a:	014b      	lsls	r3, r1, #5
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4622      	mov	r2, r4
 8009b20:	1b49      	subs	r1, r1, r5
 8009b22:	eb62 0206 	sbc.w	r2, r2, r6
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	f04f 0400 	mov.w	r4, #0
 8009b2e:	0194      	lsls	r4, r2, #6
 8009b30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009b34:	018b      	lsls	r3, r1, #6
 8009b36:	1a5b      	subs	r3, r3, r1
 8009b38:	eb64 0402 	sbc.w	r4, r4, r2
 8009b3c:	f04f 0100 	mov.w	r1, #0
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	00e2      	lsls	r2, r4, #3
 8009b46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009b4a:	00d9      	lsls	r1, r3, #3
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4614      	mov	r4, r2
 8009b50:	195b      	adds	r3, r3, r5
 8009b52:	eb44 0406 	adc.w	r4, r4, r6
 8009b56:	f04f 0100 	mov.w	r1, #0
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	0262      	lsls	r2, r4, #9
 8009b60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009b64:	0259      	lsls	r1, r3, #9
 8009b66:	460b      	mov	r3, r1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f04f 0400 	mov.w	r4, #0
 8009b74:	461a      	mov	r2, r3
 8009b76:	4623      	mov	r3, r4
 8009b78:	f7f7 f8a6 	bl	8000cc8 <__aeabi_uldivmod>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	e049      	b.n	8009c18 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b84:	4b85      	ldr	r3, [pc, #532]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	099b      	lsrs	r3, r3, #6
 8009b8a:	f04f 0400 	mov.w	r4, #0
 8009b8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009b92:	f04f 0200 	mov.w	r2, #0
 8009b96:	ea03 0501 	and.w	r5, r3, r1
 8009b9a:	ea04 0602 	and.w	r6, r4, r2
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	f04f 0400 	mov.w	r4, #0
 8009baa:	0154      	lsls	r4, r2, #5
 8009bac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009bb0:	014b      	lsls	r3, r1, #5
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	1b49      	subs	r1, r1, r5
 8009bb8:	eb62 0206 	sbc.w	r2, r2, r6
 8009bbc:	f04f 0300 	mov.w	r3, #0
 8009bc0:	f04f 0400 	mov.w	r4, #0
 8009bc4:	0194      	lsls	r4, r2, #6
 8009bc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009bca:	018b      	lsls	r3, r1, #6
 8009bcc:	1a5b      	subs	r3, r3, r1
 8009bce:	eb64 0402 	sbc.w	r4, r4, r2
 8009bd2:	f04f 0100 	mov.w	r1, #0
 8009bd6:	f04f 0200 	mov.w	r2, #0
 8009bda:	00e2      	lsls	r2, r4, #3
 8009bdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009be0:	00d9      	lsls	r1, r3, #3
 8009be2:	460b      	mov	r3, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	195b      	adds	r3, r3, r5
 8009be8:	eb44 0406 	adc.w	r4, r4, r6
 8009bec:	f04f 0100 	mov.w	r1, #0
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	02a2      	lsls	r2, r4, #10
 8009bf6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009bfa:	0299      	lsls	r1, r3, #10
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4614      	mov	r4, r2
 8009c00:	4618      	mov	r0, r3
 8009c02:	4621      	mov	r1, r4
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f04f 0400 	mov.w	r4, #0
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	f7f7 f85b 	bl	8000cc8 <__aeabi_uldivmod>
 8009c12:	4603      	mov	r3, r0
 8009c14:	460c      	mov	r4, r1
 8009c16:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009c18:	4b60      	ldr	r3, [pc, #384]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	0c1b      	lsrs	r3, r3, #16
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	3301      	adds	r3, #1
 8009c24:	005b      	lsls	r3, r3, #1
 8009c26:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c30:	613b      	str	r3, [r7, #16]
      break;
 8009c32:	e0ae      	b.n	8009d92 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c34:	4b59      	ldr	r3, [pc, #356]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c3c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c3e:	4b57      	ldr	r3, [pc, #348]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d04a      	beq.n	8009ce0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c4a:	4b54      	ldr	r3, [pc, #336]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	099b      	lsrs	r3, r3, #6
 8009c50:	f04f 0400 	mov.w	r4, #0
 8009c54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	ea03 0501 	and.w	r5, r3, r1
 8009c60:	ea04 0602 	and.w	r6, r4, r2
 8009c64:	4629      	mov	r1, r5
 8009c66:	4632      	mov	r2, r6
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	f04f 0400 	mov.w	r4, #0
 8009c70:	0154      	lsls	r4, r2, #5
 8009c72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009c76:	014b      	lsls	r3, r1, #5
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	1b49      	subs	r1, r1, r5
 8009c7e:	eb62 0206 	sbc.w	r2, r2, r6
 8009c82:	f04f 0300 	mov.w	r3, #0
 8009c86:	f04f 0400 	mov.w	r4, #0
 8009c8a:	0194      	lsls	r4, r2, #6
 8009c8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009c90:	018b      	lsls	r3, r1, #6
 8009c92:	1a5b      	subs	r3, r3, r1
 8009c94:	eb64 0402 	sbc.w	r4, r4, r2
 8009c98:	f04f 0100 	mov.w	r1, #0
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	00e2      	lsls	r2, r4, #3
 8009ca2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ca6:	00d9      	lsls	r1, r3, #3
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4614      	mov	r4, r2
 8009cac:	195b      	adds	r3, r3, r5
 8009cae:	eb44 0406 	adc.w	r4, r4, r6
 8009cb2:	f04f 0100 	mov.w	r1, #0
 8009cb6:	f04f 0200 	mov.w	r2, #0
 8009cba:	0262      	lsls	r2, r4, #9
 8009cbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009cc0:	0259      	lsls	r1, r3, #9
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	4621      	mov	r1, r4
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f04f 0400 	mov.w	r4, #0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4623      	mov	r3, r4
 8009cd4:	f7f6 fff8 	bl	8000cc8 <__aeabi_uldivmod>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e049      	b.n	8009d74 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ce0:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	099b      	lsrs	r3, r3, #6
 8009ce6:	f04f 0400 	mov.w	r4, #0
 8009cea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	ea03 0501 	and.w	r5, r3, r1
 8009cf6:	ea04 0602 	and.w	r6, r4, r2
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	f04f 0300 	mov.w	r3, #0
 8009d02:	f04f 0400 	mov.w	r4, #0
 8009d06:	0154      	lsls	r4, r2, #5
 8009d08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009d0c:	014b      	lsls	r3, r1, #5
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4622      	mov	r2, r4
 8009d12:	1b49      	subs	r1, r1, r5
 8009d14:	eb62 0206 	sbc.w	r2, r2, r6
 8009d18:	f04f 0300 	mov.w	r3, #0
 8009d1c:	f04f 0400 	mov.w	r4, #0
 8009d20:	0194      	lsls	r4, r2, #6
 8009d22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009d26:	018b      	lsls	r3, r1, #6
 8009d28:	1a5b      	subs	r3, r3, r1
 8009d2a:	eb64 0402 	sbc.w	r4, r4, r2
 8009d2e:	f04f 0100 	mov.w	r1, #0
 8009d32:	f04f 0200 	mov.w	r2, #0
 8009d36:	00e2      	lsls	r2, r4, #3
 8009d38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009d3c:	00d9      	lsls	r1, r3, #3
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4614      	mov	r4, r2
 8009d42:	195b      	adds	r3, r3, r5
 8009d44:	eb44 0406 	adc.w	r4, r4, r6
 8009d48:	f04f 0100 	mov.w	r1, #0
 8009d4c:	f04f 0200 	mov.w	r2, #0
 8009d50:	02a2      	lsls	r2, r4, #10
 8009d52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009d56:	0299      	lsls	r1, r3, #10
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4614      	mov	r4, r2
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	4621      	mov	r1, r4
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f04f 0400 	mov.w	r4, #0
 8009d66:	461a      	mov	r2, r3
 8009d68:	4623      	mov	r3, r4
 8009d6a:	f7f6 ffad 	bl	8000cc8 <__aeabi_uldivmod>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009d74:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x334>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	0f1b      	lsrs	r3, r3, #28
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d88:	613b      	str	r3, [r7, #16]
      break;
 8009d8a:	e002      	b.n	8009d92 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d8c:	4b04      	ldr	r3, [pc, #16]	; (8009da0 <HAL_RCC_GetSysClockFreq+0x338>)
 8009d8e:	613b      	str	r3, [r7, #16]
      break;
 8009d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d92:	693b      	ldr	r3, [r7, #16]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	371c      	adds	r7, #28
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d9c:	40023800 	.word	0x40023800
 8009da0:	00f42400 	.word	0x00f42400
 8009da4:	007a1200 	.word	0x007a1200

08009da8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009db0:	2300      	movs	r3, #0
 8009db2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8083 	beq.w	8009ec8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009dc2:	4b95      	ldr	r3, [pc, #596]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f003 030c 	and.w	r3, r3, #12
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d019      	beq.n	8009e02 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009dce:	4b92      	ldr	r3, [pc, #584]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009dd6:	2b08      	cmp	r3, #8
 8009dd8:	d106      	bne.n	8009de8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009dda:	4b8f      	ldr	r3, [pc, #572]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009de6:	d00c      	beq.n	8009e02 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009de8:	4b8b      	ldr	r3, [pc, #556]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009df0:	2b0c      	cmp	r3, #12
 8009df2:	d112      	bne.n	8009e1a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009df4:	4b88      	ldr	r3, [pc, #544]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e00:	d10b      	bne.n	8009e1a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e02:	4b85      	ldr	r3, [pc, #532]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d05b      	beq.n	8009ec6 <HAL_RCC_OscConfig+0x11e>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d157      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e216      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e22:	d106      	bne.n	8009e32 <HAL_RCC_OscConfig+0x8a>
 8009e24:	4b7c      	ldr	r3, [pc, #496]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a7b      	ldr	r2, [pc, #492]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	e01d      	b.n	8009e6e <HAL_RCC_OscConfig+0xc6>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e3a:	d10c      	bne.n	8009e56 <HAL_RCC_OscConfig+0xae>
 8009e3c:	4b76      	ldr	r3, [pc, #472]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a75      	ldr	r2, [pc, #468]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	4b73      	ldr	r3, [pc, #460]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a72      	ldr	r2, [pc, #456]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	e00b      	b.n	8009e6e <HAL_RCC_OscConfig+0xc6>
 8009e56:	4b70      	ldr	r3, [pc, #448]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a6f      	ldr	r2, [pc, #444]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	4b6d      	ldr	r3, [pc, #436]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a6c      	ldr	r2, [pc, #432]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d013      	beq.n	8009e9e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e76:	f7fb fd8b 	bl	8005990 <HAL_GetTick>
 8009e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e7c:	e008      	b.n	8009e90 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e7e:	f7fb fd87 	bl	8005990 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	2b64      	cmp	r3, #100	; 0x64
 8009e8a:	d901      	bls.n	8009e90 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e1db      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e90:	4b61      	ldr	r3, [pc, #388]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0f0      	beq.n	8009e7e <HAL_RCC_OscConfig+0xd6>
 8009e9c:	e014      	b.n	8009ec8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9e:	f7fb fd77 	bl	8005990 <HAL_GetTick>
 8009ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ea4:	e008      	b.n	8009eb8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ea6:	f7fb fd73 	bl	8005990 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b64      	cmp	r3, #100	; 0x64
 8009eb2:	d901      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e1c7      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eb8:	4b57      	ldr	r3, [pc, #348]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1f0      	bne.n	8009ea6 <HAL_RCC_OscConfig+0xfe>
 8009ec4:	e000      	b.n	8009ec8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ec6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d06f      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009ed4:	4b50      	ldr	r3, [pc, #320]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f003 030c 	and.w	r3, r3, #12
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d017      	beq.n	8009f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009ee0:	4b4d      	ldr	r3, [pc, #308]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009ee8:	2b08      	cmp	r3, #8
 8009eea:	d105      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009eec:	4b4a      	ldr	r3, [pc, #296]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ef8:	4b47      	ldr	r3, [pc, #284]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009f00:	2b0c      	cmp	r3, #12
 8009f02:	d11c      	bne.n	8009f3e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f04:	4b44      	ldr	r3, [pc, #272]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d116      	bne.n	8009f3e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f10:	4b41      	ldr	r3, [pc, #260]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <HAL_RCC_OscConfig+0x180>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d001      	beq.n	8009f28 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e18f      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f28:	4b3b      	ldr	r3, [pc, #236]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	00db      	lsls	r3, r3, #3
 8009f36:	4938      	ldr	r1, [pc, #224]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f3c:	e03a      	b.n	8009fb4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d020      	beq.n	8009f88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f46:	4b35      	ldr	r3, [pc, #212]	; (800a01c <HAL_RCC_OscConfig+0x274>)
 8009f48:	2201      	movs	r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4c:	f7fb fd20 	bl	8005990 <HAL_GetTick>
 8009f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f52:	e008      	b.n	8009f66 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f54:	f7fb fd1c 	bl	8005990 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e170      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f66:	4b2c      	ldr	r3, [pc, #176]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0f0      	beq.n	8009f54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f72:	4b29      	ldr	r3, [pc, #164]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	4925      	ldr	r1, [pc, #148]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	600b      	str	r3, [r1, #0]
 8009f86:	e015      	b.n	8009fb4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f88:	4b24      	ldr	r3, [pc, #144]	; (800a01c <HAL_RCC_OscConfig+0x274>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f8e:	f7fb fcff 	bl	8005990 <HAL_GetTick>
 8009f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f94:	e008      	b.n	8009fa8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f96:	f7fb fcfb 	bl	8005990 <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d901      	bls.n	8009fa8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e14f      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fa8:	4b1b      	ldr	r3, [pc, #108]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0302 	and.w	r3, r3, #2
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1f0      	bne.n	8009f96 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0308 	and.w	r3, r3, #8
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d037      	beq.n	800a030 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d016      	beq.n	8009ff6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fc8:	4b15      	ldr	r3, [pc, #84]	; (800a020 <HAL_RCC_OscConfig+0x278>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fce:	f7fb fcdf 	bl	8005990 <HAL_GetTick>
 8009fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fd4:	e008      	b.n	8009fe8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fd6:	f7fb fcdb 	bl	8005990 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d901      	bls.n	8009fe8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e12f      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fe8:	4b0b      	ldr	r3, [pc, #44]	; (800a018 <HAL_RCC_OscConfig+0x270>)
 8009fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fec:	f003 0302 	and.w	r3, r3, #2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0f0      	beq.n	8009fd6 <HAL_RCC_OscConfig+0x22e>
 8009ff4:	e01c      	b.n	800a030 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <HAL_RCC_OscConfig+0x278>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ffc:	f7fb fcc8 	bl	8005990 <HAL_GetTick>
 800a000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a002:	e00f      	b.n	800a024 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a004:	f7fb fcc4 	bl	8005990 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d908      	bls.n	800a024 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e118      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
 800a016:	bf00      	nop
 800a018:	40023800 	.word	0x40023800
 800a01c:	42470000 	.word	0x42470000
 800a020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a024:	4b8a      	ldr	r3, [pc, #552]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e9      	bne.n	800a004 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8097 	beq.w	800a16c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a03e:	2300      	movs	r3, #0
 800a040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a042:	4b83      	ldr	r3, [pc, #524]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10f      	bne.n	800a06e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	4b7f      	ldr	r3, [pc, #508]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	4a7e      	ldr	r2, [pc, #504]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a05c:	6413      	str	r3, [r2, #64]	; 0x40
 800a05e:	4b7c      	ldr	r3, [pc, #496]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a06a:	2301      	movs	r3, #1
 800a06c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a06e:	4b79      	ldr	r3, [pc, #484]	; (800a254 <HAL_RCC_OscConfig+0x4ac>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a076:	2b00      	cmp	r3, #0
 800a078:	d118      	bne.n	800a0ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a07a:	4b76      	ldr	r3, [pc, #472]	; (800a254 <HAL_RCC_OscConfig+0x4ac>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a75      	ldr	r2, [pc, #468]	; (800a254 <HAL_RCC_OscConfig+0x4ac>)
 800a080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a086:	f7fb fc83 	bl	8005990 <HAL_GetTick>
 800a08a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a08c:	e008      	b.n	800a0a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a08e:	f7fb fc7f 	bl	8005990 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d901      	bls.n	800a0a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e0d3      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0a0:	4b6c      	ldr	r3, [pc, #432]	; (800a254 <HAL_RCC_OscConfig+0x4ac>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0f0      	beq.n	800a08e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d106      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x31a>
 800a0b4:	4b66      	ldr	r3, [pc, #408]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b8:	4a65      	ldr	r2, [pc, #404]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0ba:	f043 0301 	orr.w	r3, r3, #1
 800a0be:	6713      	str	r3, [r2, #112]	; 0x70
 800a0c0:	e01c      	b.n	800a0fc <HAL_RCC_OscConfig+0x354>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	d10c      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x33c>
 800a0ca:	4b61      	ldr	r3, [pc, #388]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ce:	4a60      	ldr	r2, [pc, #384]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0d0:	f043 0304 	orr.w	r3, r3, #4
 800a0d4:	6713      	str	r3, [r2, #112]	; 0x70
 800a0d6:	4b5e      	ldr	r3, [pc, #376]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0da:	4a5d      	ldr	r2, [pc, #372]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0dc:	f043 0301 	orr.w	r3, r3, #1
 800a0e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a0e2:	e00b      	b.n	800a0fc <HAL_RCC_OscConfig+0x354>
 800a0e4:	4b5a      	ldr	r3, [pc, #360]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e8:	4a59      	ldr	r2, [pc, #356]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0ea:	f023 0301 	bic.w	r3, r3, #1
 800a0ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a0f0:	4b57      	ldr	r3, [pc, #348]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f4:	4a56      	ldr	r2, [pc, #344]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a0f6:	f023 0304 	bic.w	r3, r3, #4
 800a0fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d015      	beq.n	800a130 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a104:	f7fb fc44 	bl	8005990 <HAL_GetTick>
 800a108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a10a:	e00a      	b.n	800a122 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a10c:	f7fb fc40 	bl	8005990 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	f241 3288 	movw	r2, #5000	; 0x1388
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d901      	bls.n	800a122 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e092      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a122:	4b4b      	ldr	r3, [pc, #300]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a126:	f003 0302 	and.w	r3, r3, #2
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0ee      	beq.n	800a10c <HAL_RCC_OscConfig+0x364>
 800a12e:	e014      	b.n	800a15a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a130:	f7fb fc2e 	bl	8005990 <HAL_GetTick>
 800a134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a136:	e00a      	b.n	800a14e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a138:	f7fb fc2a 	bl	8005990 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	f241 3288 	movw	r2, #5000	; 0x1388
 800a146:	4293      	cmp	r3, r2
 800a148:	d901      	bls.n	800a14e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e07c      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a14e:	4b40      	ldr	r3, [pc, #256]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1ee      	bne.n	800a138 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d105      	bne.n	800a16c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a160:	4b3b      	ldr	r3, [pc, #236]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a164:	4a3a      	ldr	r2, [pc, #232]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a16a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d068      	beq.n	800a246 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a174:	4b36      	ldr	r3, [pc, #216]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 030c 	and.w	r3, r3, #12
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d060      	beq.n	800a242 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d145      	bne.n	800a214 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a188:	4b33      	ldr	r3, [pc, #204]	; (800a258 <HAL_RCC_OscConfig+0x4b0>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a18e:	f7fb fbff 	bl	8005990 <HAL_GetTick>
 800a192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a194:	e008      	b.n	800a1a8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a196:	f7fb fbfb 	bl	8005990 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e04f      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1a8:	4b29      	ldr	r3, [pc, #164]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f0      	bne.n	800a196 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	69da      	ldr	r2, [r3, #28]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	019b      	lsls	r3, r3, #6
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	041b      	lsls	r3, r3, #16
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	061b      	lsls	r3, r3, #24
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1de:	071b      	lsls	r3, r3, #28
 800a1e0:	491b      	ldr	r1, [pc, #108]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1e6:	4b1c      	ldr	r3, [pc, #112]	; (800a258 <HAL_RCC_OscConfig+0x4b0>)
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ec:	f7fb fbd0 	bl	8005990 <HAL_GetTick>
 800a1f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1f4:	f7fb fbcc 	bl	8005990 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e020      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a206:	4b12      	ldr	r3, [pc, #72]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0f0      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x44c>
 800a212:	e018      	b.n	800a246 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a214:	4b10      	ldr	r3, [pc, #64]	; (800a258 <HAL_RCC_OscConfig+0x4b0>)
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a21a:	f7fb fbb9 	bl	8005990 <HAL_GetTick>
 800a21e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a220:	e008      	b.n	800a234 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a222:	f7fb fbb5 	bl	8005990 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d901      	bls.n	800a234 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e009      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a234:	4b06      	ldr	r3, [pc, #24]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1f0      	bne.n	800a222 <HAL_RCC_OscConfig+0x47a>
 800a240:	e001      	b.n	800a246 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	40023800 	.word	0x40023800
 800a254:	40007000 	.word	0x40007000
 800a258:	42470060 	.word	0x42470060

0800a25c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e056      	b.n	800a31c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d106      	bne.n	800a28e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7fa ff57 	bl	800513c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2202      	movs	r2, #2
 800a292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	695b      	ldr	r3, [r3, #20]
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	ea42 0103 	orr.w	r1, r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	0c1b      	lsrs	r3, r3, #16
 800a2ec:	f003 0104 	and.w	r1, r3, #4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	69da      	ldr	r2, [r3, #28]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a30a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	4613      	mov	r3, r2
 800a332:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_SPI_Transmit+0x22>
 800a342:	2302      	movs	r3, #2
 800a344:	e11e      	b.n	800a584 <HAL_SPI_Transmit+0x260>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a34e:	f7fb fb1f 	bl	8005990 <HAL_GetTick>
 800a352:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a354:	88fb      	ldrh	r3, [r7, #6]
 800a356:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b01      	cmp	r3, #1
 800a362:	d002      	beq.n	800a36a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a364:	2302      	movs	r3, #2
 800a366:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a368:	e103      	b.n	800a572 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <HAL_SPI_Transmit+0x52>
 800a370:	88fb      	ldrh	r3, [r7, #6]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d102      	bne.n	800a37c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a37a:	e0fa      	b.n	800a572 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2203      	movs	r2, #3
 800a380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	88fa      	ldrh	r2, [r7, #6]
 800a39a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c2:	d107      	bne.n	800a3d4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3de:	2b40      	cmp	r3, #64	; 0x40
 800a3e0:	d007      	beq.n	800a3f2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3fa:	d14b      	bne.n	800a494 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <HAL_SPI_Transmit+0xe6>
 800a404:	8afb      	ldrh	r3, [r7, #22]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d13e      	bne.n	800a488 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	881a      	ldrh	r2, [r3, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	1c9a      	adds	r2, r3, #2
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a424:	b29b      	uxth	r3, r3
 800a426:	3b01      	subs	r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a42e:	e02b      	b.n	800a488 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d112      	bne.n	800a464 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a442:	881a      	ldrh	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	1c9a      	adds	r2, r3, #2
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a458:	b29b      	uxth	r3, r3
 800a45a:	3b01      	subs	r3, #1
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	86da      	strh	r2, [r3, #54]	; 0x36
 800a462:	e011      	b.n	800a488 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a464:	f7fb fa94 	bl	8005990 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d803      	bhi.n	800a47c <HAL_SPI_Transmit+0x158>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d102      	bne.n	800a482 <HAL_SPI_Transmit+0x15e>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d102      	bne.n	800a488 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a486:	e074      	b.n	800a572 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1ce      	bne.n	800a430 <HAL_SPI_Transmit+0x10c>
 800a492:	e04c      	b.n	800a52e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <HAL_SPI_Transmit+0x17e>
 800a49c:	8afb      	ldrh	r3, [r7, #22]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d140      	bne.n	800a524 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	7812      	ldrb	r2, [r2, #0]
 800a4ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a4c8:	e02c      	b.n	800a524 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d113      	bne.n	800a500 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	330c      	adds	r3, #12
 800a4e2:	7812      	ldrb	r2, [r2, #0]
 800a4e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	86da      	strh	r2, [r3, #54]	; 0x36
 800a4fe:	e011      	b.n	800a524 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a500:	f7fb fa46 	bl	8005990 <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d803      	bhi.n	800a518 <HAL_SPI_Transmit+0x1f4>
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a516:	d102      	bne.n	800a51e <HAL_SPI_Transmit+0x1fa>
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d102      	bne.n	800a524 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a522:	e026      	b.n	800a572 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1cd      	bne.n	800a4ca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 fdb6 	bl	800b0a4 <SPI_EndRxTxTransaction>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2220      	movs	r2, #32
 800a542:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a54c:	2300      	movs	r3, #0
 800a54e:	613b      	str	r3, [r7, #16]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	613b      	str	r3, [r7, #16]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	613b      	str	r3, [r7, #16]
 800a560:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	77fb      	strb	r3, [r7, #31]
 800a56e:	e000      	b.n	800a572 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a582:	7ffb      	ldrb	r3, [r7, #31]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3720      	adds	r7, #32
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af02      	add	r7, sp, #8
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	603b      	str	r3, [r7, #0]
 800a598:	4613      	mov	r3, r2
 800a59a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5a8:	d112      	bne.n	800a5d0 <HAL_SPI_Receive+0x44>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10e      	bne.n	800a5d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a5ba:	88fa      	ldrh	r2, [r7, #6]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	68b9      	ldr	r1, [r7, #8]
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 f8e9 	bl	800a79e <HAL_SPI_TransmitReceive>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	e0e2      	b.n	800a796 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d101      	bne.n	800a5de <HAL_SPI_Receive+0x52>
 800a5da:	2302      	movs	r3, #2
 800a5dc:	e0db      	b.n	800a796 <HAL_SPI_Receive+0x20a>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5e6:	f7fb f9d3 	bl	8005990 <HAL_GetTick>
 800a5ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d002      	beq.n	800a5fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5fc:	e0c2      	b.n	800a784 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <HAL_SPI_Receive+0x7e>
 800a604:	88fb      	ldrh	r3, [r7, #6]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a60e:	e0b9      	b.n	800a784 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2204      	movs	r2, #4
 800a614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	88fa      	ldrh	r2, [r7, #6]
 800a628:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	88fa      	ldrh	r2, [r7, #6]
 800a62e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a656:	d107      	bne.n	800a668 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a666:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a672:	2b40      	cmp	r3, #64	; 0x40
 800a674:	d007      	beq.n	800a686 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a684:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d162      	bne.n	800a754 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a68e:	e02e      	b.n	800a6ee <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d115      	bne.n	800a6ca <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f103 020c 	add.w	r2, r3, #12
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	7812      	ldrb	r2, [r2, #0]
 800a6ac:	b2d2      	uxtb	r2, r2
 800a6ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6c8:	e011      	b.n	800a6ee <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6ca:	f7fb f961 	bl	8005990 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d803      	bhi.n	800a6e2 <HAL_SPI_Receive+0x156>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e0:	d102      	bne.n	800a6e8 <HAL_SPI_Receive+0x15c>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d102      	bne.n	800a6ee <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a6ec:	e04a      	b.n	800a784 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1cb      	bne.n	800a690 <HAL_SPI_Receive+0x104>
 800a6f8:	e031      	b.n	800a75e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b01      	cmp	r3, #1
 800a706:	d113      	bne.n	800a730 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68da      	ldr	r2, [r3, #12]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a712:	b292      	uxth	r2, r2
 800a714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71a:	1c9a      	adds	r2, r3, #2
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a724:	b29b      	uxth	r3, r3
 800a726:	3b01      	subs	r3, #1
 800a728:	b29a      	uxth	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a72e:	e011      	b.n	800a754 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a730:	f7fb f92e 	bl	8005990 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d803      	bhi.n	800a748 <HAL_SPI_Receive+0x1bc>
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a746:	d102      	bne.n	800a74e <HAL_SPI_Receive+0x1c2>
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a752:	e017      	b.n	800a784 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1cd      	bne.n	800a6fa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fc38 	bl	800afd8 <SPI_EndRxTransaction>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2220      	movs	r2, #32
 800a772:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	75fb      	strb	r3, [r7, #23]
 800a780:	e000      	b.n	800a784 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a782:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a794:	7dfb      	ldrb	r3, [r7, #23]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b08c      	sub	sp, #48	; 0x30
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
 800a7aa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d101      	bne.n	800a7c4 <HAL_SPI_TransmitReceive+0x26>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e18a      	b.n	800aada <HAL_SPI_TransmitReceive+0x33c>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7cc:	f7fb f8e0 	bl	8005990 <HAL_GetTick>
 800a7d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a7e2:	887b      	ldrh	r3, [r7, #2]
 800a7e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d00f      	beq.n	800a80e <HAL_SPI_TransmitReceive+0x70>
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7f4:	d107      	bne.n	800a806 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d103      	bne.n	800a806 <HAL_SPI_TransmitReceive+0x68>
 800a7fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a802:	2b04      	cmp	r3, #4
 800a804:	d003      	beq.n	800a80e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a806:	2302      	movs	r3, #2
 800a808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a80c:	e15b      	b.n	800aac6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <HAL_SPI_TransmitReceive+0x82>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <HAL_SPI_TransmitReceive+0x82>
 800a81a:	887b      	ldrh	r3, [r7, #2]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d103      	bne.n	800a828 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a826:	e14e      	b.n	800aac6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b04      	cmp	r3, #4
 800a832:	d003      	beq.n	800a83c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2205      	movs	r2, #5
 800a838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	887a      	ldrh	r2, [r7, #2]
 800a84c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	887a      	ldrh	r2, [r7, #2]
 800a852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	887a      	ldrh	r2, [r7, #2]
 800a85e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	887a      	ldrh	r2, [r7, #2]
 800a864:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d007      	beq.n	800a890 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a88e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a898:	d178      	bne.n	800a98c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d002      	beq.n	800a8a8 <HAL_SPI_TransmitReceive+0x10a>
 800a8a2:	8b7b      	ldrh	r3, [r7, #26]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d166      	bne.n	800a976 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ac:	881a      	ldrh	r2, [r3, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b8:	1c9a      	adds	r2, r3, #2
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8cc:	e053      	b.n	800a976 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d11b      	bne.n	800a914 <HAL_SPI_TransmitReceive+0x176>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d016      	beq.n	800a914 <HAL_SPI_TransmitReceive+0x176>
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d113      	bne.n	800a914 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f0:	881a      	ldrh	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	1c9a      	adds	r2, r3, #2
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a906:	b29b      	uxth	r3, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d119      	bne.n	800a956 <HAL_SPI_TransmitReceive+0x1b8>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a926:	b29b      	uxth	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d014      	beq.n	800a956 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a936:	b292      	uxth	r2, r2
 800a938:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93e:	1c9a      	adds	r2, r3, #2
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a948:	b29b      	uxth	r3, r3
 800a94a:	3b01      	subs	r3, #1
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a952:	2301      	movs	r3, #1
 800a954:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a956:	f7fb f81b 	bl	8005990 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a962:	429a      	cmp	r2, r3
 800a964:	d807      	bhi.n	800a976 <HAL_SPI_TransmitReceive+0x1d8>
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96c:	d003      	beq.n	800a976 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a974:	e0a7      	b.n	800aac6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1a6      	bne.n	800a8ce <HAL_SPI_TransmitReceive+0x130>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a984:	b29b      	uxth	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1a1      	bne.n	800a8ce <HAL_SPI_TransmitReceive+0x130>
 800a98a:	e07c      	b.n	800aa86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <HAL_SPI_TransmitReceive+0x1fc>
 800a994:	8b7b      	ldrh	r3, [r7, #26]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d16b      	bne.n	800aa72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	330c      	adds	r3, #12
 800a9a4:	7812      	ldrb	r2, [r2, #0]
 800a9a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ac:	1c5a      	adds	r2, r3, #1
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9c0:	e057      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f003 0302 	and.w	r3, r3, #2
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d11c      	bne.n	800aa0a <HAL_SPI_TransmitReceive+0x26c>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d017      	beq.n	800aa0a <HAL_SPI_TransmitReceive+0x26c>
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d114      	bne.n	800aa0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	7812      	ldrb	r2, [r2, #0]
 800a9ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d119      	bne.n	800aa4c <HAL_SPI_TransmitReceive+0x2ae>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d014      	beq.n	800aa4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2c:	b2d2      	uxtb	r2, r2
 800aa2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aa4c:	f7fa ffa0 	bl	8005990 <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d803      	bhi.n	800aa64 <HAL_SPI_TransmitReceive+0x2c6>
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d102      	bne.n	800aa6a <HAL_SPI_TransmitReceive+0x2cc>
 800aa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d103      	bne.n	800aa72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aa70:	e029      	b.n	800aac6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1a2      	bne.n	800a9c2 <HAL_SPI_TransmitReceive+0x224>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d19d      	bne.n	800a9c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f000 fb0a 	bl	800b0a4 <SPI_EndRxTxTransaction>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d006      	beq.n	800aaa4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aaa2:	e010      	b.n	800aac6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10b      	bne.n	800aac4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aaac:	2300      	movs	r3, #0
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	e000      	b.n	800aac6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aac4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3730      	adds	r7, #48	; 0x30
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d101      	bne.n	800ab04 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ab00:	2302      	movs	r3, #2
 800ab02:	e0e3      	b.n	800accc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab12:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ab1a:	7dbb      	ldrb	r3, [r7, #22]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d00d      	beq.n	800ab3c <HAL_SPI_TransmitReceive_DMA+0x58>
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab26:	d106      	bne.n	800ab36 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <HAL_SPI_TransmitReceive_DMA+0x52>
 800ab30:	7dbb      	ldrb	r3, [r7, #22]
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d002      	beq.n	800ab3c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ab36:	2302      	movs	r3, #2
 800ab38:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab3a:	e0c2      	b.n	800acc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ab48:	887b      	ldrh	r3, [r7, #2]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d102      	bne.n	800ab54 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab52:	e0b6      	b.n	800acc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b04      	cmp	r3, #4
 800ab5e:	d003      	beq.n	800ab68 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2205      	movs	r2, #5
 800ab64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	887a      	ldrh	r2, [r7, #2]
 800ab78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	887a      	ldrh	r2, [r7, #2]
 800ab7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	887a      	ldrh	r2, [r7, #2]
 800ab8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	887a      	ldrh	r2, [r7, #2]
 800ab90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b04      	cmp	r3, #4
 800aba8:	d108      	bne.n	800abbc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abae:	4a49      	ldr	r2, [pc, #292]	; (800acd4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800abb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb6:	4a48      	ldr	r2, [pc, #288]	; (800acd8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800abb8:	63da      	str	r2, [r3, #60]	; 0x3c
 800abba:	e007      	b.n	800abcc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc0:	4a46      	ldr	r2, [pc, #280]	; (800acdc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800abc2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc8:	4a45      	ldr	r2, [pc, #276]	; (800ace0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800abca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd0:	4a44      	ldr	r2, [pc, #272]	; (800ace4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800abd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd8:	2200      	movs	r2, #0
 800abda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	330c      	adds	r3, #12
 800abe6:	4619      	mov	r1, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abf2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800abf4:	f7fb fc54 	bl	80064a0 <HAL_DMA_Start_IT>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00c      	beq.n	800ac18 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac02:	f043 0210 	orr.w	r2, r3, #16
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ac16:	e054      	b.n	800acc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f042 0201 	orr.w	r2, r2, #1
 800ac26:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac34:	2200      	movs	r2, #0
 800ac36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac44:	2200      	movs	r2, #0
 800ac46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac50:	4619      	mov	r1, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	330c      	adds	r3, #12
 800ac58:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ac60:	f7fb fc1e 	bl	80064a0 <HAL_DMA_Start_IT>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00c      	beq.n	800ac84 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6e:	f043 0210 	orr.w	r2, r3, #16
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ac82:	e01e      	b.n	800acc2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac8e:	2b40      	cmp	r3, #64	; 0x40
 800ac90:	d007      	beq.n	800aca2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aca0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f042 0220 	orr.w	r2, r2, #32
 800acb0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f042 0202 	orr.w	r2, r2, #2
 800acc0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	0800ae8d 	.word	0x0800ae8d
 800acd8:	0800ad55 	.word	0x0800ad55
 800acdc:	0800aea9 	.word	0x0800aea9
 800ace0:	0800adfd 	.word	0x0800adfd
 800ace4:	0800aec5 	.word	0x0800aec5

0800ace8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad46:	b2db      	uxtb	r3, r3
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad60:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad62:	f7fa fe15 	bl	8005990 <HAL_GetTick>
 800ad66:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad76:	d03b      	beq.n	800adf0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f022 0220 	bic.w	r2, r2, #32
 800ad86:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10d      	bne.n	800adac <SPI_DMAReceiveCplt+0x58>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad98:	d108      	bne.n	800adac <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f022 0203 	bic.w	r2, r2, #3
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	e007      	b.n	800adbc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 0201 	bic.w	r2, r2, #1
 800adba:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	2164      	movs	r1, #100	; 0x64
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 f909 	bl	800afd8 <SPI_EndRxTransaction>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2220      	movs	r2, #32
 800add0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7ff ff9b 	bl	800ad24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800adee:	e002      	b.n	800adf6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f7ff ff79 	bl	800ace8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae08:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae0a:	f7fa fdc1 	bl	8005990 <HAL_GetTick>
 800ae0e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae1e:	d02f      	beq.n	800ae80 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f022 0220 	bic.w	r2, r2, #32
 800ae2e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	2164      	movs	r1, #100	; 0x64
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f000 f935 	bl	800b0a4 <SPI_EndRxTxTransaction>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae44:	f043 0220 	orr.w	r2, r3, #32
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0203 	bic.w	r2, r2, #3
 800ae5a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7ff ff53 	bl	800ad24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae7e:	e002      	b.n	800ae86 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f7f8 fba1 	bl	80035c8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7ff ff2e 	bl	800acfc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aea0:	bf00      	nop
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7ff ff2a 	bl	800ad10 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aebc:	bf00      	nop
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0203 	bic.w	r2, r2, #3
 800aee0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee6:	f043 0210 	orr.w	r2, r3, #16
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff ff14 	bl	800ad24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	4613      	mov	r3, r2
 800af12:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af14:	e04c      	b.n	800afb0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1c:	d048      	beq.n	800afb0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800af1e:	f7fa fd37 	bl	8005990 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d902      	bls.n	800af34 <SPI_WaitFlagStateUntilTimeout+0x30>
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d13d      	bne.n	800afb0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af4c:	d111      	bne.n	800af72 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af56:	d004      	beq.n	800af62 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af60:	d107      	bne.n	800af72 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af7a:	d10f      	bne.n	800af9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e00f      	b.n	800afd0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4013      	ands	r3, r2
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	bf0c      	ite	eq
 800afc0:	2301      	moveq	r3, #1
 800afc2:	2300      	movne	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d1a3      	bne.n	800af16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af02      	add	r7, sp, #8
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afec:	d111      	bne.n	800b012 <SPI_EndRxTransaction+0x3a>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aff6:	d004      	beq.n	800b002 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b000:	d107      	bne.n	800b012 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b010:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b01a:	d12a      	bne.n	800b072 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b024:	d012      	beq.n	800b04c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2200      	movs	r2, #0
 800b02e:	2180      	movs	r1, #128	; 0x80
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff ff67 	bl	800af04 <SPI_WaitFlagStateUntilTimeout>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d02d      	beq.n	800b098 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b040:	f043 0220 	orr.w	r2, r3, #32
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e026      	b.n	800b09a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2200      	movs	r2, #0
 800b054:	2101      	movs	r1, #1
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f7ff ff54 	bl	800af04 <SPI_WaitFlagStateUntilTimeout>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01a      	beq.n	800b098 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b066:	f043 0220 	orr.w	r2, r3, #32
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e013      	b.n	800b09a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2200      	movs	r2, #0
 800b07a:	2101      	movs	r1, #1
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7ff ff41 	bl	800af04 <SPI_WaitFlagStateUntilTimeout>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d007      	beq.n	800b098 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08c:	f043 0220 	orr.w	r2, r3, #32
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e000      	b.n	800b09a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b0b0:	4b1b      	ldr	r3, [pc, #108]	; (800b120 <SPI_EndRxTxTransaction+0x7c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a1b      	ldr	r2, [pc, #108]	; (800b124 <SPI_EndRxTxTransaction+0x80>)
 800b0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ba:	0d5b      	lsrs	r3, r3, #21
 800b0bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0c0:	fb02 f303 	mul.w	r3, r2, r3
 800b0c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0ce:	d112      	bne.n	800b0f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2180      	movs	r1, #128	; 0x80
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f7ff ff12 	bl	800af04 <SPI_WaitFlagStateUntilTimeout>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d016      	beq.n	800b114 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ea:	f043 0220 	orr.w	r2, r3, #32
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e00f      	b.n	800b116 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00a      	beq.n	800b112 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10c:	2b80      	cmp	r3, #128	; 0x80
 800b10e:	d0f2      	beq.n	800b0f6 <SPI_EndRxTxTransaction+0x52>
 800b110:	e000      	b.n	800b114 <SPI_EndRxTxTransaction+0x70>
        break;
 800b112:	bf00      	nop
  }

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000280 	.word	0x20000280
 800b124:	165e9f81 	.word	0x165e9f81

0800b128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e01d      	b.n	800b176 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7fa f980 	bl	8005454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2202      	movs	r2, #2
 800b158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3304      	adds	r3, #4
 800b164:	4619      	mov	r1, r3
 800b166:	4610      	mov	r0, r2
 800b168:	f000 fb68 	bl	800b83c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b17e:	b480      	push	{r7}
 800b180:	b085      	sub	sp, #20
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2202      	movs	r2, #2
 800b18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f003 0307 	and.w	r3, r3, #7
 800b198:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b06      	cmp	r3, #6
 800b19e:	d007      	beq.n	800b1b0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f042 0201 	orr.w	r2, r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68da      	ldr	r2, [r3, #12]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f042 0201 	orr.w	r2, r2, #1
 800b1dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	f003 0307 	and.w	r3, r3, #7
 800b1e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b06      	cmp	r3, #6
 800b1ee:	d007      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f042 0201 	orr.w	r2, r2, #1
 800b1fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e01d      	b.n	800b25c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d106      	bne.n	800b23a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7fa f8ed 	bl	8005414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2202      	movs	r2, #2
 800b23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3304      	adds	r3, #4
 800b24a:	4619      	mov	r1, r3
 800b24c:	4610      	mov	r0, r2
 800b24e:	f000 faf5 	bl	800b83c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2201      	movs	r2, #1
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fdca 	bl	800be10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a15      	ldr	r2, [pc, #84]	; (800b2d8 <HAL_TIM_PWM_Start+0x74>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d004      	beq.n	800b290 <HAL_TIM_PWM_Start+0x2c>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a14      	ldr	r2, [pc, #80]	; (800b2dc <HAL_TIM_PWM_Start+0x78>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d101      	bne.n	800b294 <HAL_TIM_PWM_Start+0x30>
 800b290:	2301      	movs	r3, #1
 800b292:	e000      	b.n	800b296 <HAL_TIM_PWM_Start+0x32>
 800b294:	2300      	movs	r3, #0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d007      	beq.n	800b2aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f003 0307 	and.w	r3, r3, #7
 800b2b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2b06      	cmp	r3, #6
 800b2ba:	d007      	beq.n	800b2cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0201 	orr.w	r2, r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	40010000 	.word	0x40010000
 800b2dc:	40010400 	.word	0x40010400

0800b2e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d122      	bne.n	800b33c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b02      	cmp	r3, #2
 800b302:	d11b      	bne.n	800b33c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f06f 0202 	mvn.w	r2, #2
 800b30c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	f003 0303 	and.w	r3, r3, #3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa6b 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b328:	e005      	b.n	800b336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa5d 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fa6e 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b04      	cmp	r3, #4
 800b348:	d122      	bne.n	800b390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b04      	cmp	r3, #4
 800b356:	d11b      	bne.n	800b390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f06f 0204 	mvn.w	r2, #4
 800b360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2202      	movs	r2, #2
 800b366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa41 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b37c:	e005      	b.n	800b38a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fa33 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fa44 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f003 0308 	and.w	r3, r3, #8
 800b39a:	2b08      	cmp	r3, #8
 800b39c:	d122      	bne.n	800b3e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f003 0308 	and.w	r3, r3, #8
 800b3a8:	2b08      	cmp	r3, #8
 800b3aa:	d11b      	bne.n	800b3e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0208 	mvn.w	r2, #8
 800b3b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fa17 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b3d0:	e005      	b.n	800b3de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fa09 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fa1a 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	f003 0310 	and.w	r3, r3, #16
 800b3ee:	2b10      	cmp	r3, #16
 800b3f0:	d122      	bne.n	800b438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f003 0310 	and.w	r3, r3, #16
 800b3fc:	2b10      	cmp	r3, #16
 800b3fe:	d11b      	bne.n	800b438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f06f 0210 	mvn.w	r2, #16
 800b408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2208      	movs	r2, #8
 800b40e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f9ed 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b424:	e005      	b.n	800b432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f9df 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f9f0 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	2b01      	cmp	r3, #1
 800b444:	d10e      	bne.n	800b464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	2b01      	cmp	r3, #1
 800b452:	d107      	bne.n	800b464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f06f 0201 	mvn.w	r2, #1
 800b45c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7f9 fb9a 	bl	8004b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b46e:	2b80      	cmp	r3, #128	; 0x80
 800b470:	d10e      	bne.n	800b490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47c:	2b80      	cmp	r3, #128	; 0x80
 800b47e:	d107      	bne.n	800b490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fd6c 	bl	800bf68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49a:	2b40      	cmp	r3, #64	; 0x40
 800b49c:	d10e      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a8:	2b40      	cmp	r3, #64	; 0x40
 800b4aa:	d107      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f9b5 	bl	800b826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b20      	cmp	r3, #32
 800b4c8:	d10e      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f003 0320 	and.w	r3, r3, #32
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d107      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f06f 0220 	mvn.w	r2, #32
 800b4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fd36 	bl	800bf54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b502:	2b01      	cmp	r3, #1
 800b504:	d101      	bne.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b506:	2302      	movs	r3, #2
 800b508:	e0b4      	b.n	800b674 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2202      	movs	r2, #2
 800b516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b0c      	cmp	r3, #12
 800b51e:	f200 809f 	bhi.w	800b660 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b522:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b55d 	.word	0x0800b55d
 800b52c:	0800b661 	.word	0x0800b661
 800b530:	0800b661 	.word	0x0800b661
 800b534:	0800b661 	.word	0x0800b661
 800b538:	0800b59d 	.word	0x0800b59d
 800b53c:	0800b661 	.word	0x0800b661
 800b540:	0800b661 	.word	0x0800b661
 800b544:	0800b661 	.word	0x0800b661
 800b548:	0800b5df 	.word	0x0800b5df
 800b54c:	0800b661 	.word	0x0800b661
 800b550:	0800b661 	.word	0x0800b661
 800b554:	0800b661 	.word	0x0800b661
 800b558:	0800b61f 	.word	0x0800b61f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68b9      	ldr	r1, [r7, #8]
 800b562:	4618      	mov	r0, r3
 800b564:	f000 fa0a 	bl	800b97c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	699a      	ldr	r2, [r3, #24]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f042 0208 	orr.w	r2, r2, #8
 800b576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	699a      	ldr	r2, [r3, #24]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f022 0204 	bic.w	r2, r2, #4
 800b586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6999      	ldr	r1, [r3, #24]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	691a      	ldr	r2, [r3, #16]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	430a      	orrs	r2, r1
 800b598:	619a      	str	r2, [r3, #24]
      break;
 800b59a:	e062      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fa5a 	bl	800ba5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6999      	ldr	r1, [r3, #24]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	021a      	lsls	r2, r3, #8
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	619a      	str	r2, [r3, #24]
      break;
 800b5dc:	e041      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 faaf 	bl	800bb48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	69da      	ldr	r2, [r3, #28]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f042 0208 	orr.w	r2, r2, #8
 800b5f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	69da      	ldr	r2, [r3, #28]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 0204 	bic.w	r2, r2, #4
 800b608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	69d9      	ldr	r1, [r3, #28]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	61da      	str	r2, [r3, #28]
      break;
 800b61c:	e021      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fb03 	bl	800bc30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69da      	ldr	r2, [r3, #28]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	69da      	ldr	r2, [r3, #28]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	69d9      	ldr	r1, [r3, #28]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	021a      	lsls	r2, r3, #8
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	61da      	str	r2, [r3, #28]
      break;
 800b65e:	e000      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b660:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_TIM_ConfigClockSource+0x18>
 800b690:	2302      	movs	r3, #2
 800b692:	e0a6      	b.n	800b7e2 <HAL_TIM_ConfigClockSource+0x166>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	d067      	beq.n	800b79c <HAL_TIM_ConfigClockSource+0x120>
 800b6cc:	2b40      	cmp	r3, #64	; 0x40
 800b6ce:	d80b      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x6c>
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d073      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
 800b6d4:	2b10      	cmp	r3, #16
 800b6d6:	d802      	bhi.n	800b6de <HAL_TIM_ConfigClockSource+0x62>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d06f      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b6dc:	e078      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d06c      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
 800b6e2:	2b30      	cmp	r3, #48	; 0x30
 800b6e4:	d06a      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b6e6:	e073      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b6e8:	2b70      	cmp	r3, #112	; 0x70
 800b6ea:	d00d      	beq.n	800b708 <HAL_TIM_ConfigClockSource+0x8c>
 800b6ec:	2b70      	cmp	r3, #112	; 0x70
 800b6ee:	d804      	bhi.n	800b6fa <HAL_TIM_ConfigClockSource+0x7e>
 800b6f0:	2b50      	cmp	r3, #80	; 0x50
 800b6f2:	d033      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0xe0>
 800b6f4:	2b60      	cmp	r3, #96	; 0x60
 800b6f6:	d041      	beq.n	800b77c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b6f8:	e06a      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6fe:	d066      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x152>
 800b700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b704:	d017      	beq.n	800b736 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b706:	e063      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	6899      	ldr	r1, [r3, #8]
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f000 fb5a 	bl	800bdd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b72a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	609a      	str	r2, [r3, #8]
      break;
 800b734:	e04c      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	6899      	ldr	r1, [r3, #8]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f000 fb43 	bl	800bdd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689a      	ldr	r2, [r3, #8]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b758:	609a      	str	r2, [r3, #8]
      break;
 800b75a:	e039      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	6859      	ldr	r1, [r3, #4]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	461a      	mov	r2, r3
 800b76a:	f000 fab7 	bl	800bcdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2150      	movs	r1, #80	; 0x50
 800b774:	4618      	mov	r0, r3
 800b776:	f000 fb10 	bl	800bd9a <TIM_ITRx_SetConfig>
      break;
 800b77a:	e029      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6818      	ldr	r0, [r3, #0]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	6859      	ldr	r1, [r3, #4]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	461a      	mov	r2, r3
 800b78a:	f000 fad6 	bl	800bd3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2160      	movs	r1, #96	; 0x60
 800b794:	4618      	mov	r0, r3
 800b796:	f000 fb00 	bl	800bd9a <TIM_ITRx_SetConfig>
      break;
 800b79a:	e019      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	6859      	ldr	r1, [r3, #4]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	f000 fa97 	bl	800bcdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2140      	movs	r1, #64	; 0x40
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 faf0 	bl	800bd9a <TIM_ITRx_SetConfig>
      break;
 800b7ba:	e009      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	f000 fae7 	bl	800bd9a <TIM_ITRx_SetConfig>
      break;
 800b7cc:	e000      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b7ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b083      	sub	sp, #12
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b806:	bf00      	nop
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b812:	b480      	push	{r7}
 800b814:	b083      	sub	sp, #12
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b81a:	bf00      	nop
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b826:	b480      	push	{r7}
 800b828:	b083      	sub	sp, #12
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b82e:	bf00      	nop
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
	...

0800b83c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a40      	ldr	r2, [pc, #256]	; (800b950 <TIM_Base_SetConfig+0x114>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d013      	beq.n	800b87c <TIM_Base_SetConfig+0x40>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b85a:	d00f      	beq.n	800b87c <TIM_Base_SetConfig+0x40>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a3d      	ldr	r2, [pc, #244]	; (800b954 <TIM_Base_SetConfig+0x118>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d00b      	beq.n	800b87c <TIM_Base_SetConfig+0x40>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a3c      	ldr	r2, [pc, #240]	; (800b958 <TIM_Base_SetConfig+0x11c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d007      	beq.n	800b87c <TIM_Base_SetConfig+0x40>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a3b      	ldr	r2, [pc, #236]	; (800b95c <TIM_Base_SetConfig+0x120>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d003      	beq.n	800b87c <TIM_Base_SetConfig+0x40>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a3a      	ldr	r2, [pc, #232]	; (800b960 <TIM_Base_SetConfig+0x124>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d108      	bne.n	800b88e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a2f      	ldr	r2, [pc, #188]	; (800b950 <TIM_Base_SetConfig+0x114>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d02b      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b89c:	d027      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a2c      	ldr	r2, [pc, #176]	; (800b954 <TIM_Base_SetConfig+0x118>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d023      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a2b      	ldr	r2, [pc, #172]	; (800b958 <TIM_Base_SetConfig+0x11c>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d01f      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a2a      	ldr	r2, [pc, #168]	; (800b95c <TIM_Base_SetConfig+0x120>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d01b      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a29      	ldr	r2, [pc, #164]	; (800b960 <TIM_Base_SetConfig+0x124>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d017      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a28      	ldr	r2, [pc, #160]	; (800b964 <TIM_Base_SetConfig+0x128>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d013      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a27      	ldr	r2, [pc, #156]	; (800b968 <TIM_Base_SetConfig+0x12c>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d00f      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a26      	ldr	r2, [pc, #152]	; (800b96c <TIM_Base_SetConfig+0x130>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d00b      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a25      	ldr	r2, [pc, #148]	; (800b970 <TIM_Base_SetConfig+0x134>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d007      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a24      	ldr	r2, [pc, #144]	; (800b974 <TIM_Base_SetConfig+0x138>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d003      	beq.n	800b8ee <TIM_Base_SetConfig+0xb2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a23      	ldr	r2, [pc, #140]	; (800b978 <TIM_Base_SetConfig+0x13c>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d108      	bne.n	800b900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	689a      	ldr	r2, [r3, #8]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a0a      	ldr	r2, [pc, #40]	; (800b950 <TIM_Base_SetConfig+0x114>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d003      	beq.n	800b934 <TIM_Base_SetConfig+0xf8>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a0c      	ldr	r2, [pc, #48]	; (800b960 <TIM_Base_SetConfig+0x124>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d103      	bne.n	800b93c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	691a      	ldr	r2, [r3, #16]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	615a      	str	r2, [r3, #20]
}
 800b942:	bf00      	nop
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	40010000 	.word	0x40010000
 800b954:	40000400 	.word	0x40000400
 800b958:	40000800 	.word	0x40000800
 800b95c:	40000c00 	.word	0x40000c00
 800b960:	40010400 	.word	0x40010400
 800b964:	40014000 	.word	0x40014000
 800b968:	40014400 	.word	0x40014400
 800b96c:	40014800 	.word	0x40014800
 800b970:	40001800 	.word	0x40001800
 800b974:	40001c00 	.word	0x40001c00
 800b978:	40002000 	.word	0x40002000

0800b97c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	f023 0201 	bic.w	r2, r3, #1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0303 	bic.w	r3, r3, #3
 800b9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f023 0302 	bic.w	r3, r3, #2
 800b9c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a20      	ldr	r2, [pc, #128]	; (800ba54 <TIM_OC1_SetConfig+0xd8>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d003      	beq.n	800b9e0 <TIM_OC1_SetConfig+0x64>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a1f      	ldr	r2, [pc, #124]	; (800ba58 <TIM_OC1_SetConfig+0xdc>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d10c      	bne.n	800b9fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f023 0308 	bic.w	r3, r3, #8
 800b9e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f023 0304 	bic.w	r3, r3, #4
 800b9f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a15      	ldr	r2, [pc, #84]	; (800ba54 <TIM_OC1_SetConfig+0xd8>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d003      	beq.n	800ba0a <TIM_OC1_SetConfig+0x8e>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a14      	ldr	r2, [pc, #80]	; (800ba58 <TIM_OC1_SetConfig+0xdc>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d111      	bne.n	800ba2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	621a      	str	r2, [r3, #32]
}
 800ba48:	bf00      	nop
 800ba4a:	371c      	adds	r7, #28
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	40010000 	.word	0x40010000
 800ba58:	40010400 	.word	0x40010400

0800ba5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f023 0210 	bic.w	r2, r3, #16
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f023 0320 	bic.w	r3, r3, #32
 800baa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a22      	ldr	r2, [pc, #136]	; (800bb40 <TIM_OC2_SetConfig+0xe4>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d003      	beq.n	800bac4 <TIM_OC2_SetConfig+0x68>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a21      	ldr	r2, [pc, #132]	; (800bb44 <TIM_OC2_SetConfig+0xe8>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d10d      	bne.n	800bae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	011b      	lsls	r3, r3, #4
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a17      	ldr	r2, [pc, #92]	; (800bb40 <TIM_OC2_SetConfig+0xe4>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d003      	beq.n	800baf0 <TIM_OC2_SetConfig+0x94>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a16      	ldr	r2, [pc, #88]	; (800bb44 <TIM_OC2_SetConfig+0xe8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d113      	bne.n	800bb18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800baf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bafe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	621a      	str	r2, [r3, #32]
}
 800bb32:	bf00      	nop
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	40010000 	.word	0x40010000
 800bb44:	40010400 	.word	0x40010400

0800bb48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	69db      	ldr	r3, [r3, #28]
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	021b      	lsls	r3, r3, #8
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a21      	ldr	r2, [pc, #132]	; (800bc28 <TIM_OC3_SetConfig+0xe0>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d003      	beq.n	800bbae <TIM_OC3_SetConfig+0x66>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a20      	ldr	r2, [pc, #128]	; (800bc2c <TIM_OC3_SetConfig+0xe4>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d10d      	bne.n	800bbca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bbc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a16      	ldr	r2, [pc, #88]	; (800bc28 <TIM_OC3_SetConfig+0xe0>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d003      	beq.n	800bbda <TIM_OC3_SetConfig+0x92>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a15      	ldr	r2, [pc, #84]	; (800bc2c <TIM_OC3_SetConfig+0xe4>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d113      	bne.n	800bc02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	011b      	lsls	r3, r3, #4
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	011b      	lsls	r3, r3, #4
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	621a      	str	r2, [r3, #32]
}
 800bc1c:	bf00      	nop
 800bc1e:	371c      	adds	r7, #28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	40010000 	.word	0x40010000
 800bc2c:	40010400 	.word	0x40010400

0800bc30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b087      	sub	sp, #28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	021b      	lsls	r3, r3, #8
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	031b      	lsls	r3, r3, #12
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a12      	ldr	r2, [pc, #72]	; (800bcd4 <TIM_OC4_SetConfig+0xa4>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d003      	beq.n	800bc98 <TIM_OC4_SetConfig+0x68>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a11      	ldr	r2, [pc, #68]	; (800bcd8 <TIM_OC4_SetConfig+0xa8>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d109      	bne.n	800bcac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	019b      	lsls	r3, r3, #6
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	621a      	str	r2, [r3, #32]
}
 800bcc6:	bf00      	nop
 800bcc8:	371c      	adds	r7, #28
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	40010000 	.word	0x40010000
 800bcd8:	40010400 	.word	0x40010400

0800bcdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	f023 0201 	bic.w	r2, r3, #1
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f023 030a 	bic.w	r3, r3, #10
 800bd18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	693a      	ldr	r2, [r7, #16]
 800bd26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	621a      	str	r2, [r3, #32]
}
 800bd2e:	bf00      	nop
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b087      	sub	sp, #28
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	f023 0210 	bic.w	r2, r3, #16
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	031b      	lsls	r3, r3, #12
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	621a      	str	r2, [r3, #32]
}
 800bd8e:	bf00      	nop
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b085      	sub	sp, #20
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	f043 0307 	orr.w	r3, r3, #7
 800bdbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	609a      	str	r2, [r3, #8]
}
 800bdc4:	bf00      	nop
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b087      	sub	sp, #28
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	021a      	lsls	r2, r3, #8
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	609a      	str	r2, [r3, #8]
}
 800be04:	bf00      	nop
 800be06:	371c      	adds	r7, #28
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f003 031f 	and.w	r3, r3, #31
 800be22:	2201      	movs	r2, #1
 800be24:	fa02 f303 	lsl.w	r3, r2, r3
 800be28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6a1a      	ldr	r2, [r3, #32]
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	43db      	mvns	r3, r3
 800be32:	401a      	ands	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6a1a      	ldr	r2, [r3, #32]
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f003 031f 	and.w	r3, r3, #31
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	fa01 f303 	lsl.w	r3, r1, r3
 800be48:	431a      	orrs	r2, r3
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	621a      	str	r2, [r3, #32]
}
 800be4e:	bf00      	nop
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d101      	bne.n	800be74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be70:	2302      	movs	r3, #2
 800be72:	e05a      	b.n	800bf2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2201      	movs	r2, #1
 800be78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2202      	movs	r2, #2
 800be80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a21      	ldr	r2, [pc, #132]	; (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d022      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bec0:	d01d      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a1d      	ldr	r2, [pc, #116]	; (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d018      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a1b      	ldr	r2, [pc, #108]	; (800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d013      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a1a      	ldr	r2, [pc, #104]	; (800bf44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00e      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a18      	ldr	r2, [pc, #96]	; (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d009      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a17      	ldr	r2, [pc, #92]	; (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d004      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a15      	ldr	r2, [pc, #84]	; (800bf50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d10c      	bne.n	800bf18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	40010000 	.word	0x40010000
 800bf3c:	40000400 	.word	0x40000400
 800bf40:	40000800 	.word	0x40000800
 800bf44:	40000c00 	.word	0x40000c00
 800bf48:	40010400 	.word	0x40010400
 800bf4c:	40014000 	.word	0x40014000
 800bf50:	40001800 	.word	0x40001800

0800bf54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	f107 001c 	add.w	r0, r7, #28
 800bf8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d122      	bne.n	800bfda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bfa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bfbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d105      	bne.n	800bfce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f001 fac0 	bl	800d554 <USB_CoreReset>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]
 800bfd8:	e01a      	b.n	800c010 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 fab4 	bl	800d554 <USB_CoreReset>
 800bfec:	4603      	mov	r3, r0
 800bfee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	639a      	str	r2, [r3, #56]	; 0x38
 800c002:	e005      	b.n	800c010 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	2b01      	cmp	r3, #1
 800c014:	d10b      	bne.n	800c02e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f043 0206 	orr.w	r2, r3, #6
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f043 0220 	orr.w	r2, r3, #32
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c03a:	b004      	add	sp, #16
 800c03c:	4770      	bx	lr
	...

0800c040 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	4613      	mov	r3, r2
 800c04c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c04e:	79fb      	ldrb	r3, [r7, #7]
 800c050:	2b02      	cmp	r3, #2
 800c052:	d165      	bne.n	800c120 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	4a41      	ldr	r2, [pc, #260]	; (800c15c <USB_SetTurnaroundTime+0x11c>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d906      	bls.n	800c06a <USB_SetTurnaroundTime+0x2a>
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	4a40      	ldr	r2, [pc, #256]	; (800c160 <USB_SetTurnaroundTime+0x120>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d802      	bhi.n	800c06a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c064:	230f      	movs	r3, #15
 800c066:	617b      	str	r3, [r7, #20]
 800c068:	e062      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	4a3c      	ldr	r2, [pc, #240]	; (800c160 <USB_SetTurnaroundTime+0x120>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d906      	bls.n	800c080 <USB_SetTurnaroundTime+0x40>
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	4a3b      	ldr	r2, [pc, #236]	; (800c164 <USB_SetTurnaroundTime+0x124>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d802      	bhi.n	800c080 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c07a:	230e      	movs	r3, #14
 800c07c:	617b      	str	r3, [r7, #20]
 800c07e:	e057      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	4a38      	ldr	r2, [pc, #224]	; (800c164 <USB_SetTurnaroundTime+0x124>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d906      	bls.n	800c096 <USB_SetTurnaroundTime+0x56>
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	4a37      	ldr	r2, [pc, #220]	; (800c168 <USB_SetTurnaroundTime+0x128>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d802      	bhi.n	800c096 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c090:	230d      	movs	r3, #13
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	e04c      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	4a33      	ldr	r2, [pc, #204]	; (800c168 <USB_SetTurnaroundTime+0x128>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d906      	bls.n	800c0ac <USB_SetTurnaroundTime+0x6c>
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	4a32      	ldr	r2, [pc, #200]	; (800c16c <USB_SetTurnaroundTime+0x12c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d802      	bhi.n	800c0ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	e041      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	4a2f      	ldr	r2, [pc, #188]	; (800c16c <USB_SetTurnaroundTime+0x12c>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d906      	bls.n	800c0c2 <USB_SetTurnaroundTime+0x82>
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	4a2e      	ldr	r2, [pc, #184]	; (800c170 <USB_SetTurnaroundTime+0x130>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d802      	bhi.n	800c0c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c0bc:	230b      	movs	r3, #11
 800c0be:	617b      	str	r3, [r7, #20]
 800c0c0:	e036      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	4a2a      	ldr	r2, [pc, #168]	; (800c170 <USB_SetTurnaroundTime+0x130>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d906      	bls.n	800c0d8 <USB_SetTurnaroundTime+0x98>
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	4a29      	ldr	r2, [pc, #164]	; (800c174 <USB_SetTurnaroundTime+0x134>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d802      	bhi.n	800c0d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c0d2:	230a      	movs	r3, #10
 800c0d4:	617b      	str	r3, [r7, #20]
 800c0d6:	e02b      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	4a26      	ldr	r2, [pc, #152]	; (800c174 <USB_SetTurnaroundTime+0x134>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d906      	bls.n	800c0ee <USB_SetTurnaroundTime+0xae>
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	4a25      	ldr	r2, [pc, #148]	; (800c178 <USB_SetTurnaroundTime+0x138>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d802      	bhi.n	800c0ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c0e8:	2309      	movs	r3, #9
 800c0ea:	617b      	str	r3, [r7, #20]
 800c0ec:	e020      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	4a21      	ldr	r2, [pc, #132]	; (800c178 <USB_SetTurnaroundTime+0x138>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d906      	bls.n	800c104 <USB_SetTurnaroundTime+0xc4>
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	4a20      	ldr	r2, [pc, #128]	; (800c17c <USB_SetTurnaroundTime+0x13c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d802      	bhi.n	800c104 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c0fe:	2308      	movs	r3, #8
 800c100:	617b      	str	r3, [r7, #20]
 800c102:	e015      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	4a1d      	ldr	r2, [pc, #116]	; (800c17c <USB_SetTurnaroundTime+0x13c>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d906      	bls.n	800c11a <USB_SetTurnaroundTime+0xda>
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	4a1c      	ldr	r2, [pc, #112]	; (800c180 <USB_SetTurnaroundTime+0x140>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d802      	bhi.n	800c11a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c114:	2307      	movs	r3, #7
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	e00a      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c11a:	2306      	movs	r3, #6
 800c11c:	617b      	str	r3, [r7, #20]
 800c11e:	e007      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d102      	bne.n	800c12c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c126:	2309      	movs	r3, #9
 800c128:	617b      	str	r3, [r7, #20]
 800c12a:	e001      	b.n	800c130 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c12c:	2309      	movs	r3, #9
 800c12e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	68da      	ldr	r2, [r3, #12]
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	029b      	lsls	r3, r3, #10
 800c144:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c148:	431a      	orrs	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	371c      	adds	r7, #28
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	00d8acbf 	.word	0x00d8acbf
 800c160:	00e4e1bf 	.word	0x00e4e1bf
 800c164:	00f423ff 	.word	0x00f423ff
 800c168:	0106737f 	.word	0x0106737f
 800c16c:	011a499f 	.word	0x011a499f
 800c170:	01312cff 	.word	0x01312cff
 800c174:	014ca43f 	.word	0x014ca43f
 800c178:	016e35ff 	.word	0x016e35ff
 800c17c:	01a6ab1f 	.word	0x01a6ab1f
 800c180:	01e847ff 	.word	0x01e847ff

0800c184 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f043 0201 	orr.w	r2, r3, #1
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	370c      	adds	r7, #12
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b083      	sub	sp, #12
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	f023 0201 	bic.w	r2, r3, #1
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d106      	bne.n	800c1f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	60da      	str	r2, [r3, #12]
 800c1f2:	e00b      	b.n	800c20c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c1f4:	78fb      	ldrb	r3, [r7, #3]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	60da      	str	r2, [r3, #12]
 800c206:	e001      	b.n	800c20c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e003      	b.n	800c214 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c20c:	2032      	movs	r0, #50	; 0x32
 800c20e:	f7f9 fbcb 	bl	80059a8 <HAL_Delay>

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c21c:	b084      	sub	sp, #16
 800c21e:	b580      	push	{r7, lr}
 800c220:	b086      	sub	sp, #24
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c22a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c22e:	2300      	movs	r3, #0
 800c230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c236:	2300      	movs	r3, #0
 800c238:	613b      	str	r3, [r7, #16]
 800c23a:	e009      	b.n	800c250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	3340      	adds	r3, #64	; 0x40
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	2200      	movs	r2, #0
 800c248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	3301      	adds	r3, #1
 800c24e:	613b      	str	r3, [r7, #16]
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	2b0e      	cmp	r3, #14
 800c254:	d9f2      	bls.n	800c23c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d11c      	bne.n	800c296 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c26a:	f043 0302 	orr.w	r3, r3, #2
 800c26e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c274:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	e005      	b.n	800c2a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2bc:	461a      	mov	r2, r3
 800c2be:	680b      	ldr	r3, [r1, #0]
 800c2c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d10c      	bne.n	800c2e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d104      	bne.n	800c2d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f949 	bl	800c568 <USB_SetDevSpeed>
 800c2d6:	e008      	b.n	800c2ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c2d8:	2101      	movs	r1, #1
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f944 	bl	800c568 <USB_SetDevSpeed>
 800c2e0:	e003      	b.n	800c2ea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c2e2:	2103      	movs	r1, #3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f93f 	bl	800c568 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c2ea:	2110      	movs	r1, #16
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f8f3 	bl	800c4d8 <USB_FlushTxFifo>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f911 	bl	800c524 <USB_FlushRxFifo>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c312:	461a      	mov	r2, r3
 800c314:	2300      	movs	r3, #0
 800c316:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c31e:	461a      	mov	r2, r3
 800c320:	2300      	movs	r3, #0
 800c322:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c32a:	461a      	mov	r2, r3
 800c32c:	2300      	movs	r3, #0
 800c32e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c330:	2300      	movs	r3, #0
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	e043      	b.n	800c3be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	015a      	lsls	r2, r3, #5
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	4413      	add	r3, r2
 800c33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c34c:	d118      	bne.n	800c380 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10a      	bne.n	800c36a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c360:	461a      	mov	r2, r3
 800c362:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c366:	6013      	str	r3, [r2, #0]
 800c368:	e013      	b.n	800c392 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c376:	461a      	mov	r2, r3
 800c378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	e008      	b.n	800c392 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38c:	461a      	mov	r2, r3
 800c38e:	2300      	movs	r3, #0
 800c390:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	015a      	lsls	r2, r3, #5
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	4413      	add	r3, r2
 800c39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39e:	461a      	mov	r2, r3
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	613b      	str	r3, [r7, #16]
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d3b7      	bcc.n	800c336 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	613b      	str	r3, [r7, #16]
 800c3ca:	e043      	b.n	800c454 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3e2:	d118      	bne.n	800c416 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10a      	bne.n	800c400 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	015a      	lsls	r2, r3, #5
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	e013      	b.n	800c428 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40c:	461a      	mov	r2, r3
 800c40e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	e008      	b.n	800c428 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	015a      	lsls	r2, r3, #5
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	4413      	add	r3, r2
 800c41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c422:	461a      	mov	r2, r3
 800c424:	2300      	movs	r3, #0
 800c426:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c434:	461a      	mov	r2, r3
 800c436:	2300      	movs	r3, #0
 800c438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c446:	461a      	mov	r2, r3
 800c448:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c44c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	3301      	adds	r3, #1
 800c452:	613b      	str	r3, [r7, #16]
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	693a      	ldr	r2, [r7, #16]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d3b7      	bcc.n	800c3cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c46a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c46e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c47c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	2b00      	cmp	r3, #0
 800c482:	d105      	bne.n	800c490 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	f043 0210 	orr.w	r2, r3, #16
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	699a      	ldr	r2, [r3, #24]
 800c494:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <USB_DevInit+0x2b8>)
 800c496:	4313      	orrs	r3, r2
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d005      	beq.n	800c4ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	f043 0208 	orr.w	r2, r3, #8
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d107      	bne.n	800c4c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c4bc:	f043 0304 	orr.w	r3, r3, #4
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4d0:	b004      	add	sp, #16
 800c4d2:	4770      	bx	lr
 800c4d4:	803c3800 	.word	0x803c3800

0800c4d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	019b      	lsls	r3, r3, #6
 800c4ea:	f043 0220 	orr.w	r2, r3, #32
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	60fb      	str	r3, [r7, #12]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	4a09      	ldr	r2, [pc, #36]	; (800c520 <USB_FlushTxFifo+0x48>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d901      	bls.n	800c504 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c500:	2303      	movs	r3, #3
 800c502:	e006      	b.n	800c512 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	f003 0320 	and.w	r3, r3, #32
 800c50c:	2b20      	cmp	r3, #32
 800c50e:	d0f0      	beq.n	800c4f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	00030d40 	.word	0x00030d40

0800c524 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2210      	movs	r2, #16
 800c534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	3301      	adds	r3, #1
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4a09      	ldr	r2, [pc, #36]	; (800c564 <USB_FlushRxFifo+0x40>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d901      	bls.n	800c548 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e006      	b.n	800c556 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	f003 0310 	and.w	r3, r3, #16
 800c550:	2b10      	cmp	r3, #16
 800c552:	d0f0      	beq.n	800c536 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	00030d40 	.word	0x00030d40

0800c568 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	460b      	mov	r3, r1
 800c572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	78fb      	ldrb	r3, [r7, #3]
 800c582:	68f9      	ldr	r1, [r7, #12]
 800c584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c588:	4313      	orrs	r3, r2
 800c58a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c59a:	b480      	push	{r7}
 800c59c:	b087      	sub	sp, #28
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	f003 0306 	and.w	r3, r3, #6
 800c5b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	75fb      	strb	r3, [r7, #23]
 800c5be:	e00a      	b.n	800c5d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d002      	beq.n	800c5cc <USB_GetDevSpeed+0x32>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2b06      	cmp	r3, #6
 800c5ca:	d102      	bne.n	800c5d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	75fb      	strb	r3, [r7, #23]
 800c5d0:	e001      	b.n	800c5d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c5d2:	230f      	movs	r3, #15
 800c5d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d13a      	bne.n	800c676 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c606:	69da      	ldr	r2, [r3, #28]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	f003 030f 	and.w	r3, r3, #15
 800c610:	2101      	movs	r1, #1
 800c612:	fa01 f303 	lsl.w	r3, r1, r3
 800c616:	b29b      	uxth	r3, r3
 800c618:	68f9      	ldr	r1, [r7, #12]
 800c61a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c61e:	4313      	orrs	r3, r2
 800c620:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	015a      	lsls	r2, r3, #5
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	4413      	add	r3, r2
 800c62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c634:	2b00      	cmp	r3, #0
 800c636:	d155      	bne.n	800c6e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	78db      	ldrb	r3, [r3, #3]
 800c652:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c654:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	059b      	lsls	r3, r3, #22
 800c65a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c65c:	4313      	orrs	r3, r2
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	0151      	lsls	r1, r2, #5
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	440a      	add	r2, r1
 800c666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c66a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c66e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	e036      	b.n	800c6e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67c:	69da      	ldr	r2, [r3, #28]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	f003 030f 	and.w	r3, r3, #15
 800c686:	2101      	movs	r1, #1
 800c688:	fa01 f303 	lsl.w	r3, r1, r3
 800c68c:	041b      	lsls	r3, r3, #16
 800c68e:	68f9      	ldr	r1, [r7, #12]
 800c690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c694:	4313      	orrs	r3, r2
 800c696:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d11a      	bne.n	800c6e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	015a      	lsls	r2, r3, #5
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	78db      	ldrb	r3, [r3, #3]
 800c6c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c6ca:	430b      	orrs	r3, r1
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	0151      	lsls	r1, r2, #5
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	440a      	add	r2, r1
 800c6d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
	...

0800c6f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	785b      	ldrb	r3, [r3, #1]
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d161      	bne.n	800c7d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c726:	d11f      	bne.n	800c768 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	015a      	lsls	r2, r3, #5
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	0151      	lsls	r1, r2, #5
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	440a      	add	r2, r1
 800c73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c746:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	015a      	lsls	r2, r3, #5
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	0151      	lsls	r1, r2, #5
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	440a      	add	r2, r1
 800c75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	f003 030f 	and.w	r3, r3, #15
 800c778:	2101      	movs	r1, #1
 800c77a:	fa01 f303 	lsl.w	r3, r1, r3
 800c77e:	b29b      	uxth	r3, r3
 800c780:	43db      	mvns	r3, r3
 800c782:	68f9      	ldr	r1, [r7, #12]
 800c784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c788:	4013      	ands	r3, r2
 800c78a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c792:	69da      	ldr	r2, [r3, #28]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	f003 030f 	and.w	r3, r3, #15
 800c79c:	2101      	movs	r1, #1
 800c79e:	fa01 f303 	lsl.w	r3, r1, r3
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	43db      	mvns	r3, r3
 800c7a6:	68f9      	ldr	r1, [r7, #12]
 800c7a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	0159      	lsls	r1, r3, #5
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	440b      	add	r3, r1
 800c7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4b35      	ldr	r3, [pc, #212]	; (800c8a4 <USB_DeactivateEndpoint+0x1b0>)
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	600b      	str	r3, [r1, #0]
 800c7d2:	e060      	b.n	800c896 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	015a      	lsls	r2, r3, #5
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	4413      	add	r3, r2
 800c7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7ea:	d11f      	bne.n	800c82c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	0151      	lsls	r1, r2, #5
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	440a      	add	r2, r1
 800c802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c80a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	0151      	lsls	r1, r2, #5
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	440a      	add	r2, r1
 800c822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c82a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	f003 030f 	and.w	r3, r3, #15
 800c83c:	2101      	movs	r1, #1
 800c83e:	fa01 f303 	lsl.w	r3, r1, r3
 800c842:	041b      	lsls	r3, r3, #16
 800c844:	43db      	mvns	r3, r3
 800c846:	68f9      	ldr	r1, [r7, #12]
 800c848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c84c:	4013      	ands	r3, r2
 800c84e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c856:	69da      	ldr	r2, [r3, #28]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	f003 030f 	and.w	r3, r3, #15
 800c860:	2101      	movs	r1, #1
 800c862:	fa01 f303 	lsl.w	r3, r1, r3
 800c866:	041b      	lsls	r3, r3, #16
 800c868:	43db      	mvns	r3, r3
 800c86a:	68f9      	ldr	r1, [r7, #12]
 800c86c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c870:	4013      	ands	r3, r2
 800c872:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	015a      	lsls	r2, r3, #5
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	4413      	add	r3, r2
 800c87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	0159      	lsls	r1, r3, #5
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	440b      	add	r3, r1
 800c88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88e:	4619      	mov	r1, r3
 800c890:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <USB_DeactivateEndpoint+0x1b4>)
 800c892:	4013      	ands	r3, r2
 800c894:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3714      	adds	r7, #20
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr
 800c8a4:	ec337800 	.word	0xec337800
 800c8a8:	eff37800 	.word	0xeff37800

0800c8ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08a      	sub	sp, #40	; 0x28
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	785b      	ldrb	r3, [r3, #1]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	f040 815c 	bne.w	800cb86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d132      	bne.n	800c93c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	69ba      	ldr	r2, [r7, #24]
 800c8e6:	0151      	lsls	r1, r2, #5
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	440a      	add	r2, r1
 800c8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	69ba      	ldr	r2, [r7, #24]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	69fa      	ldr	r2, [r7, #28]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	0151      	lsls	r1, r2, #5
 800c92c:	69fa      	ldr	r2, [r7, #28]
 800c92e:	440a      	add	r2, r1
 800c930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c934:	0cdb      	lsrs	r3, r3, #19
 800c936:	04db      	lsls	r3, r3, #19
 800c938:	6113      	str	r3, [r2, #16]
 800c93a:	e074      	b.n	800ca26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	69ba      	ldr	r2, [r7, #24]
 800c94c:	0151      	lsls	r1, r2, #5
 800c94e:	69fa      	ldr	r2, [r7, #28]
 800c950:	440a      	add	r2, r1
 800c952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c956:	0cdb      	lsrs	r3, r3, #19
 800c958:	04db      	lsls	r3, r3, #19
 800c95a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	69ba      	ldr	r2, [r7, #24]
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	69fa      	ldr	r2, [r7, #28]
 800c970:	440a      	add	r2, r1
 800c972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c976:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c97a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c97e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	015a      	lsls	r2, r3, #5
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	4413      	add	r3, r2
 800c988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c98c:	691a      	ldr	r2, [r3, #16]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	6959      	ldr	r1, [r3, #20]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	440b      	add	r3, r1
 800c998:	1e59      	subs	r1, r3, #1
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c9a2:	04d9      	lsls	r1, r3, #19
 800c9a4:	4b9d      	ldr	r3, [pc, #628]	; (800cc1c <USB_EPStartXfer+0x370>)
 800c9a6:	400b      	ands	r3, r1
 800c9a8:	69b9      	ldr	r1, [r7, #24]
 800c9aa:	0148      	lsls	r0, r1, #5
 800c9ac:	69f9      	ldr	r1, [r7, #28]
 800c9ae:	4401      	add	r1, r0
 800c9b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c4:	691a      	ldr	r2, [r3, #16]
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	695b      	ldr	r3, [r3, #20]
 800c9ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ce:	69b9      	ldr	r1, [r7, #24]
 800c9d0:	0148      	lsls	r0, r1, #5
 800c9d2:	69f9      	ldr	r1, [r7, #28]
 800c9d4:	4401      	add	r1, r0
 800c9d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	78db      	ldrb	r3, [r3, #3]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d11f      	bne.n	800ca26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	015a      	lsls	r2, r3, #5
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	69ba      	ldr	r2, [r7, #24]
 800c9f6:	0151      	lsls	r1, r2, #5
 800c9f8:	69fa      	ldr	r2, [r7, #28]
 800c9fa:	440a      	add	r2, r1
 800c9fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ca04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	015a      	lsls	r2, r3, #5
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	69ba      	ldr	r2, [r7, #24]
 800ca16:	0151      	lsls	r1, r2, #5
 800ca18:	69fa      	ldr	r2, [r7, #28]
 800ca1a:	440a      	add	r2, r1
 800ca1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ca26:	79fb      	ldrb	r3, [r7, #7]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d14b      	bne.n	800cac4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d009      	beq.n	800ca48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca40:	461a      	mov	r2, r3
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	78db      	ldrb	r3, [r3, #3]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d128      	bne.n	800caa2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d110      	bne.n	800ca82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	015a      	lsls	r2, r3, #5
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	4413      	add	r3, r2
 800ca68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	69ba      	ldr	r2, [r7, #24]
 800ca70:	0151      	lsls	r1, r2, #5
 800ca72:	69fa      	ldr	r2, [r7, #28]
 800ca74:	440a      	add	r2, r1
 800ca76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca7e:	6013      	str	r3, [r2, #0]
 800ca80:	e00f      	b.n	800caa2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	69ba      	ldr	r2, [r7, #24]
 800ca92:	0151      	lsls	r1, r2, #5
 800ca94:	69fa      	ldr	r2, [r7, #28]
 800ca96:	440a      	add	r2, r1
 800ca98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caa0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	015a      	lsls	r2, r3, #5
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	4413      	add	r3, r2
 800caaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	69ba      	ldr	r2, [r7, #24]
 800cab2:	0151      	lsls	r1, r2, #5
 800cab4:	69fa      	ldr	r2, [r7, #28]
 800cab6:	440a      	add	r2, r1
 800cab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cabc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	e12f      	b.n	800cd24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	015a      	lsls	r2, r3, #5
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	4413      	add	r3, r2
 800cacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	0151      	lsls	r1, r2, #5
 800cad6:	69fa      	ldr	r2, [r7, #28]
 800cad8:	440a      	add	r2, r1
 800cada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cade:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cae2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	78db      	ldrb	r3, [r3, #3]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d015      	beq.n	800cb18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 8117 	beq.w	800cd24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	f003 030f 	and.w	r3, r3, #15
 800cb06:	2101      	movs	r1, #1
 800cb08:	fa01 f303 	lsl.w	r3, r1, r3
 800cb0c:	69f9      	ldr	r1, [r7, #28]
 800cb0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb12:	4313      	orrs	r3, r2
 800cb14:	634b      	str	r3, [r1, #52]	; 0x34
 800cb16:	e105      	b.n	800cd24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d110      	bne.n	800cb4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	015a      	lsls	r2, r3, #5
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	4413      	add	r3, r2
 800cb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	69ba      	ldr	r2, [r7, #24]
 800cb38:	0151      	lsls	r1, r2, #5
 800cb3a:	69fa      	ldr	r2, [r7, #28]
 800cb3c:	440a      	add	r2, r1
 800cb3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	e00f      	b.n	800cb6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	015a      	lsls	r2, r3, #5
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	4413      	add	r3, r2
 800cb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	0151      	lsls	r1, r2, #5
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	440a      	add	r2, r1
 800cb60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	68d9      	ldr	r1, [r3, #12]
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	781a      	ldrb	r2, [r3, #0]
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	b298      	uxth	r0, r3
 800cb78:	79fb      	ldrb	r3, [r7, #7]
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f000 fa2b 	bl	800cfda <USB_WritePacket>
 800cb84:	e0ce      	b.n	800cd24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	0151      	lsls	r1, r2, #5
 800cb98:	69fa      	ldr	r2, [r7, #28]
 800cb9a:	440a      	add	r2, r1
 800cb9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cba0:	0cdb      	lsrs	r3, r3, #19
 800cba2:	04db      	lsls	r3, r3, #19
 800cba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	015a      	lsls	r2, r3, #5
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	4413      	add	r3, r2
 800cbae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	0151      	lsls	r1, r2, #5
 800cbb8:	69fa      	ldr	r2, [r7, #28]
 800cbba:	440a      	add	r2, r1
 800cbbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cbc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cbc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d126      	bne.n	800cc20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	015a      	lsls	r2, r3, #5
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	4413      	add	r3, r2
 800cbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbde:	691a      	ldr	r2, [r3, #16]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbe8:	69b9      	ldr	r1, [r7, #24]
 800cbea:	0148      	lsls	r0, r1, #5
 800cbec:	69f9      	ldr	r1, [r7, #28]
 800cbee:	4401      	add	r1, r0
 800cbf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	015a      	lsls	r2, r3, #5
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	4413      	add	r3, r2
 800cc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	0151      	lsls	r1, r2, #5
 800cc0a:	69fa      	ldr	r2, [r7, #28]
 800cc0c:	440a      	add	r2, r1
 800cc0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc16:	6113      	str	r3, [r2, #16]
 800cc18:	e036      	b.n	800cc88 <USB_EPStartXfer+0x3dc>
 800cc1a:	bf00      	nop
 800cc1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	695a      	ldr	r2, [r3, #20]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	4413      	add	r3, r2
 800cc2a:	1e5a      	subs	r2, r3, #1
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	015a      	lsls	r2, r3, #5
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc42:	691a      	ldr	r2, [r3, #16]
 800cc44:	8afb      	ldrh	r3, [r7, #22]
 800cc46:	04d9      	lsls	r1, r3, #19
 800cc48:	4b39      	ldr	r3, [pc, #228]	; (800cd30 <USB_EPStartXfer+0x484>)
 800cc4a:	400b      	ands	r3, r1
 800cc4c:	69b9      	ldr	r1, [r7, #24]
 800cc4e:	0148      	lsls	r0, r1, #5
 800cc50:	69f9      	ldr	r1, [r7, #28]
 800cc52:	4401      	add	r1, r0
 800cc54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc68:	691a      	ldr	r2, [r3, #16]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	8af9      	ldrh	r1, [r7, #22]
 800cc70:	fb01 f303 	mul.w	r3, r1, r3
 800cc74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc78:	69b9      	ldr	r1, [r7, #24]
 800cc7a:	0148      	lsls	r0, r1, #5
 800cc7c:	69f9      	ldr	r1, [r7, #28]
 800cc7e:	4401      	add	r1, r0
 800cc80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc84:	4313      	orrs	r3, r2
 800cc86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc88:	79fb      	ldrb	r3, [r7, #7]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d10d      	bne.n	800ccaa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d009      	beq.n	800ccaa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	68d9      	ldr	r1, [r3, #12]
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	015a      	lsls	r2, r3, #5
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	4413      	add	r3, r2
 800cca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca6:	460a      	mov	r2, r1
 800cca8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	78db      	ldrb	r3, [r3, #3]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d128      	bne.n	800cd04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d110      	bne.n	800cce4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	015a      	lsls	r2, r3, #5
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	69ba      	ldr	r2, [r7, #24]
 800ccd2:	0151      	lsls	r1, r2, #5
 800ccd4:	69fa      	ldr	r2, [r7, #28]
 800ccd6:	440a      	add	r2, r1
 800ccd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	e00f      	b.n	800cd04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	69ba      	ldr	r2, [r7, #24]
 800ccf4:	0151      	lsls	r1, r2, #5
 800ccf6:	69fa      	ldr	r2, [r7, #28]
 800ccf8:	440a      	add	r2, r1
 800ccfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	0151      	lsls	r1, r2, #5
 800cd16:	69fa      	ldr	r2, [r7, #28]
 800cd18:	440a      	add	r2, r1
 800cd1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3720      	adds	r7, #32
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	1ff80000 	.word	0x1ff80000

0800cd34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	785b      	ldrb	r3, [r3, #1]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	f040 80cd 	bne.w	800cef0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d132      	bne.n	800cdc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	015a      	lsls	r2, r3, #5
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	4413      	add	r3, r2
 800cd66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	693a      	ldr	r2, [r7, #16]
 800cd6e:	0151      	lsls	r1, r2, #5
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	440a      	add	r2, r1
 800cd74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cd7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cd80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	0151      	lsls	r1, r2, #5
 800cd94:	697a      	ldr	r2, [r7, #20]
 800cd96:	440a      	add	r2, r1
 800cd98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cda0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	015a      	lsls	r2, r3, #5
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	0151      	lsls	r1, r2, #5
 800cdb4:	697a      	ldr	r2, [r7, #20]
 800cdb6:	440a      	add	r2, r1
 800cdb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdbc:	0cdb      	lsrs	r3, r3, #19
 800cdbe:	04db      	lsls	r3, r3, #19
 800cdc0:	6113      	str	r3, [r2, #16]
 800cdc2:	e04e      	b.n	800ce62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	0151      	lsls	r1, r2, #5
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	440a      	add	r2, r1
 800cdda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdde:	0cdb      	lsrs	r3, r3, #19
 800cde0:	04db      	lsls	r3, r3, #19
 800cde2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	015a      	lsls	r2, r3, #5
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	4413      	add	r3, r2
 800cdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	0151      	lsls	r1, r2, #5
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	440a      	add	r2, r1
 800cdfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	695a      	ldr	r2, [r3, #20]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d903      	bls.n	800ce1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	689a      	ldr	r2, [r3, #8]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	0151      	lsls	r1, r2, #5
 800ce2e:	697a      	ldr	r2, [r7, #20]
 800ce30:	440a      	add	r2, r1
 800ce32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	015a      	lsls	r2, r3, #5
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	4413      	add	r3, r2
 800ce44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce48:	691a      	ldr	r2, [r3, #16]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	695b      	ldr	r3, [r3, #20]
 800ce4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce52:	6939      	ldr	r1, [r7, #16]
 800ce54:	0148      	lsls	r0, r1, #5
 800ce56:	6979      	ldr	r1, [r7, #20]
 800ce58:	4401      	add	r1, r0
 800ce5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d11e      	bne.n	800cea6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	015a      	lsls	r2, r3, #5
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	015a      	lsls	r2, r3, #5
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	693a      	ldr	r2, [r7, #16]
 800ce94:	0151      	lsls	r1, r2, #5
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	440a      	add	r2, r1
 800ce9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cea2:	6013      	str	r3, [r2, #0]
 800cea4:	e092      	b.n	800cfcc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	015a      	lsls	r2, r3, #5
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	4413      	add	r3, r2
 800ceae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	0151      	lsls	r1, r2, #5
 800ceb8:	697a      	ldr	r2, [r7, #20]
 800ceba:	440a      	add	r2, r1
 800cebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cec0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cec4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d07e      	beq.n	800cfcc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f003 030f 	and.w	r3, r3, #15
 800cede:	2101      	movs	r1, #1
 800cee0:	fa01 f303 	lsl.w	r3, r1, r3
 800cee4:	6979      	ldr	r1, [r7, #20]
 800cee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ceea:	4313      	orrs	r3, r2
 800ceec:	634b      	str	r3, [r1, #52]	; 0x34
 800ceee:	e06d      	b.n	800cfcc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	693a      	ldr	r2, [r7, #16]
 800cf00:	0151      	lsls	r1, r2, #5
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	440a      	add	r2, r1
 800cf06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf0a:	0cdb      	lsrs	r3, r3, #19
 800cf0c:	04db      	lsls	r3, r3, #19
 800cf0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	015a      	lsls	r2, r3, #5
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	4413      	add	r3, r2
 800cf18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	0151      	lsls	r1, r2, #5
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	440a      	add	r2, r1
 800cf26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf32:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d003      	beq.n	800cf44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	015a      	lsls	r2, r3, #5
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	0151      	lsls	r1, r2, #5
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	440a      	add	r2, r1
 800cf5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	015a      	lsls	r2, r3, #5
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf70:	691a      	ldr	r2, [r3, #16]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf7a:	6939      	ldr	r1, [r7, #16]
 800cf7c:	0148      	lsls	r0, r1, #5
 800cf7e:	6979      	ldr	r1, [r7, #20]
 800cf80:	4401      	add	r1, r0
 800cf82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf86:	4313      	orrs	r3, r2
 800cf88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d10d      	bne.n	800cfac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d009      	beq.n	800cfac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	68d9      	ldr	r1, [r3, #12]
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa8:	460a      	mov	r2, r1
 800cfaa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	015a      	lsls	r2, r3, #5
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	693a      	ldr	r2, [r7, #16]
 800cfbc:	0151      	lsls	r1, r2, #5
 800cfbe:	697a      	ldr	r2, [r7, #20]
 800cfc0:	440a      	add	r2, r1
 800cfc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	371c      	adds	r7, #28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cfda:	b480      	push	{r7}
 800cfdc:	b089      	sub	sp, #36	; 0x24
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	60f8      	str	r0, [r7, #12]
 800cfe2:	60b9      	str	r1, [r7, #8]
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	460b      	mov	r3, r1
 800cfea:	71fb      	strb	r3, [r7, #7]
 800cfec:	4613      	mov	r3, r2
 800cfee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d11a      	bne.n	800d036 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d000:	88bb      	ldrh	r3, [r7, #4]
 800d002:	3303      	adds	r3, #3
 800d004:	089b      	lsrs	r3, r3, #2
 800d006:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d008:	2300      	movs	r3, #0
 800d00a:	61bb      	str	r3, [r7, #24]
 800d00c:	e00f      	b.n	800d02e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	031a      	lsls	r2, r3, #12
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	4413      	add	r3, r2
 800d016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d01a:	461a      	mov	r2, r3
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	3304      	adds	r3, #4
 800d026:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	3301      	adds	r3, #1
 800d02c:	61bb      	str	r3, [r7, #24]
 800d02e:	69ba      	ldr	r2, [r7, #24]
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	429a      	cmp	r2, r3
 800d034:	d3eb      	bcc.n	800d00e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3724      	adds	r7, #36	; 0x24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d044:	b480      	push	{r7}
 800d046:	b089      	sub	sp, #36	; 0x24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	4613      	mov	r3, r2
 800d050:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d05a:	88fb      	ldrh	r3, [r7, #6]
 800d05c:	3303      	adds	r3, #3
 800d05e:	089b      	lsrs	r3, r3, #2
 800d060:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d062:	2300      	movs	r3, #0
 800d064:	61bb      	str	r3, [r7, #24]
 800d066:	e00b      	b.n	800d080 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	601a      	str	r2, [r3, #0]
    pDest++;
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	3304      	adds	r3, #4
 800d078:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	3301      	adds	r3, #1
 800d07e:	61bb      	str	r3, [r7, #24]
 800d080:	69ba      	ldr	r2, [r7, #24]
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	429a      	cmp	r2, r3
 800d086:	d3ef      	bcc.n	800d068 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d088:	69fb      	ldr	r3, [r7, #28]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3724      	adds	r7, #36	; 0x24
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d096:	b480      	push	{r7}
 800d098:	b085      	sub	sp, #20
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	785b      	ldrb	r3, [r3, #1]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d12c      	bne.n	800d10c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	015a      	lsls	r2, r3, #5
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	db12      	blt.n	800d0ea <USB_EPSetStall+0x54>
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00f      	beq.n	800d0ea <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	0151      	lsls	r1, r2, #5
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	440a      	add	r2, r1
 800d0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0e8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	0151      	lsls	r1, r2, #5
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	440a      	add	r2, r1
 800d100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	e02b      	b.n	800d164 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	015a      	lsls	r2, r3, #5
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	4413      	add	r3, r2
 800d114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	db12      	blt.n	800d144 <USB_EPSetStall+0xae>
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00f      	beq.n	800d144 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	015a      	lsls	r2, r3, #5
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	4413      	add	r3, r2
 800d12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	0151      	lsls	r1, r2, #5
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	440a      	add	r2, r1
 800d13a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d13e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d142:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	0151      	lsls	r1, r2, #5
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	440a      	add	r2, r1
 800d15a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d15e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d172:	b480      	push	{r7}
 800d174:	b085      	sub	sp, #20
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
 800d17a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	785b      	ldrb	r3, [r3, #1]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d128      	bne.n	800d1e0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	015a      	lsls	r2, r3, #5
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	4413      	add	r3, r2
 800d196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	0151      	lsls	r1, r2, #5
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	440a      	add	r2, r1
 800d1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	78db      	ldrb	r3, [r3, #3]
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d003      	beq.n	800d1be <USB_EPClearStall+0x4c>
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	78db      	ldrb	r3, [r3, #3]
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	d138      	bne.n	800d230 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	015a      	lsls	r2, r3, #5
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	0151      	lsls	r1, r2, #5
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	440a      	add	r2, r1
 800d1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	e027      	b.n	800d230 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	015a      	lsls	r2, r3, #5
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	0151      	lsls	r1, r2, #5
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	440a      	add	r2, r1
 800d1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	78db      	ldrb	r3, [r3, #3]
 800d204:	2b03      	cmp	r3, #3
 800d206:	d003      	beq.n	800d210 <USB_EPClearStall+0x9e>
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	78db      	ldrb	r3, [r3, #3]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d10f      	bne.n	800d230 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	015a      	lsls	r2, r3, #5
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	4413      	add	r3, r2
 800d218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	0151      	lsls	r1, r2, #5
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	440a      	add	r2, r1
 800d226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d22a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d22e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d23e:	b480      	push	{r7}
 800d240:	b085      	sub	sp, #20
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	460b      	mov	r3, r1
 800d248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d25c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d260:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	78fb      	ldrb	r3, [r7, #3]
 800d26c:	011b      	lsls	r3, r3, #4
 800d26e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d272:	68f9      	ldr	r1, [r7, #12]
 800d274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d278:	4313      	orrs	r3, r2
 800d27a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d28a:	b480      	push	{r7}
 800d28c:	b085      	sub	sp, #20
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2a4:	f023 0303 	bic.w	r3, r3, #3
 800d2a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2b8:	f023 0302 	bic.w	r3, r3, #2
 800d2bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3714      	adds	r7, #20
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2e6:	f023 0303 	bic.w	r3, r3, #3
 800d2ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2fa:	f043 0302 	orr.w	r3, r3, #2
 800d2fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d30e:	b480      	push	{r7}
 800d310:	b085      	sub	sp, #20
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	695b      	ldr	r3, [r3, #20]
 800d31a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	4013      	ands	r3, r2
 800d324:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d326:	68fb      	ldr	r3, [r7, #12]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d350:	69db      	ldr	r3, [r3, #28]
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	4013      	ands	r3, r2
 800d356:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	0c1b      	lsrs	r3, r3, #16
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	4013      	ands	r3, r2
 800d38a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	b29b      	uxth	r3, r3
}
 800d390:	4618      	mov	r0, r3
 800d392:	3714      	adds	r7, #20
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d3ac:	78fb      	ldrb	r3, [r7, #3]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3ca:	68bb      	ldr	r3, [r7, #8]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b087      	sub	sp, #28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d3fc:	78fb      	ldrb	r3, [r7, #3]
 800d3fe:	f003 030f 	and.w	r3, r3, #15
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	fa22 f303 	lsr.w	r3, r2, r3
 800d408:	01db      	lsls	r3, r3, #7
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	4313      	orrs	r3, r2
 800d410:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d412:	78fb      	ldrb	r3, [r7, #3]
 800d414:	015a      	lsls	r2, r3, #5
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	4413      	add	r3, r2
 800d41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	4013      	ands	r3, r2
 800d424:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d426:	68bb      	ldr	r3, [r7, #8]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	371c      	adds	r7, #28
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	f003 0301 	and.w	r3, r3, #1
}
 800d444:	4618      	mov	r0, r3
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d46a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d46e:	f023 0307 	bic.w	r3, r3, #7
 800d472:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d486:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
	...

0800d498 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d498:	b480      	push	{r7}
 800d49a:	b087      	sub	sp, #28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	607a      	str	r2, [r7, #4]
 800d4a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	333c      	adds	r3, #60	; 0x3c
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	4a26      	ldr	r2, [pc, #152]	; (800d550 <USB_EP0_OutStart+0xb8>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d90a      	bls.n	800d4d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4cc:	d101      	bne.n	800d4d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e037      	b.n	800d542 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d8:	461a      	mov	r2, r3
 800d4da:	2300      	movs	r3, #0
 800d4dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d500:	f043 0318 	orr.w	r3, r3, #24
 800d504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d514:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d518:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d51a:	7afb      	ldrb	r3, [r7, #11]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d10f      	bne.n	800d540 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d526:	461a      	mov	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	697a      	ldr	r2, [r7, #20]
 800d536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d53a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d53e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	371c      	adds	r7, #28
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	4f54300a 	.word	0x4f54300a

0800d554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d55c:	2300      	movs	r3, #0
 800d55e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3301      	adds	r3, #1
 800d564:	60fb      	str	r3, [r7, #12]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	4a13      	ldr	r2, [pc, #76]	; (800d5b8 <USB_CoreReset+0x64>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d901      	bls.n	800d572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	e01b      	b.n	800d5aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	2b00      	cmp	r3, #0
 800d578:	daf2      	bge.n	800d560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d57a:	2300      	movs	r3, #0
 800d57c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	f043 0201 	orr.w	r2, r3, #1
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	3301      	adds	r3, #1
 800d58e:	60fb      	str	r3, [r7, #12]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	4a09      	ldr	r2, [pc, #36]	; (800d5b8 <USB_CoreReset+0x64>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d901      	bls.n	800d59c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e006      	b.n	800d5aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d0f0      	beq.n	800d58a <USB_CoreReset+0x36>

  return HAL_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3714      	adds	r7, #20
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	00030d40 	.word	0x00030d40

0800d5bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d5c0:	4904      	ldr	r1, [pc, #16]	; (800d5d4 <MX_FATFS_Init+0x18>)
 800d5c2:	4805      	ldr	r0, [pc, #20]	; (800d5d8 <MX_FATFS_Init+0x1c>)
 800d5c4:	f002 f9c0 	bl	800f948 <FATFS_LinkDriver>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	4b03      	ldr	r3, [pc, #12]	; (800d5dc <MX_FATFS_Init+0x20>)
 800d5ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d5d0:	bf00      	nop
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20004b20 	.word	0x20004b20
 800d5d8:	2000028c 	.word	0x2000028c
 800d5dc:	20004b24 	.word	0x20004b24

0800d5e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 f9d7 	bl	800d9a0 <USER_SPI_initialize>
 800d5f2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	4603      	mov	r3, r0
 800d604:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	4618      	mov	r0, r3
 800d60a:	f000 fab3 	bl	800db74 <USER_SPI_status>
 800d60e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60b9      	str	r1, [r7, #8]
 800d620:	607a      	str	r2, [r7, #4]
 800d622:	603b      	str	r3, [r7, #0]
 800d624:	4603      	mov	r3, r0
 800d626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800d628:	7bf8      	ldrb	r0, [r7, #15]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	f000 fab6 	bl	800dba0 <USER_SPI_read>
 800d634:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b084      	sub	sp, #16
 800d642:	af00      	add	r7, sp, #0
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
 800d64a:	4603      	mov	r3, r0
 800d64c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800d64e:	7bf8      	ldrb	r0, [r7, #15]
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	68b9      	ldr	r1, [r7, #8]
 800d656:	f000 fb09 	bl	800dc6c <USER_SPI_write>
 800d65a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	603a      	str	r2, [r7, #0]
 800d66e:	71fb      	strb	r3, [r7, #7]
 800d670:	460b      	mov	r3, r1
 800d672:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800d674:	79b9      	ldrb	r1, [r7, #6]
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 fb72 	bl	800dd64 <USER_SPI_ioctl>
 800d680:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d682:	4618      	mov	r0, r3
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
	...

0800d68c <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d694:	f7f8 f97c 	bl	8005990 <HAL_GetTick>
 800d698:	4602      	mov	r2, r0
 800d69a:	4b04      	ldr	r3, [pc, #16]	; (800d6ac <SPI_Timer_On+0x20>)
 800d69c:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800d69e:	4a04      	ldr	r2, [pc, #16]	; (800d6b0 <SPI_Timer_On+0x24>)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6013      	str	r3, [r2, #0]
}
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	20004f8c 	.word	0x20004f8c
 800d6b0:	20004f90 	.word	0x20004f90

0800d6b4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d6b8:	f7f8 f96a 	bl	8005990 <HAL_GetTick>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <SPI_Timer_Status+0x24>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	1ad2      	subs	r2, r2, r3
 800d6c4:	4b05      	ldr	r3, [pc, #20]	; (800d6dc <SPI_Timer_Status+0x28>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	bf34      	ite	cc
 800d6cc:	2301      	movcc	r3, #1
 800d6ce:	2300      	movcs	r3, #0
 800d6d0:	b2db      	uxtb	r3, r3
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20004f8c 	.word	0x20004f8c
 800d6dc:	20004f90 	.word	0x20004f90

0800d6e0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800d6ea:	f107 020f 	add.w	r2, r7, #15
 800d6ee:	1df9      	adds	r1, r7, #7
 800d6f0:	2332      	movs	r3, #50	; 0x32
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4804      	ldr	r0, [pc, #16]	; (800d708 <xchg_spi+0x28>)
 800d6f8:	f7fd f851 	bl	800a79e <HAL_SPI_TransmitReceive>
    return rxDat;
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20004978 	.word	0x20004978

0800d70c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800d70c:	b590      	push	{r4, r7, lr}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800d716:	2300      	movs	r3, #0
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	e00a      	b.n	800d732 <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	18d4      	adds	r4, r2, r3
 800d722:	20ff      	movs	r0, #255	; 0xff
 800d724:	f7ff ffdc 	bl	800d6e0 <xchg_spi>
 800d728:	4603      	mov	r3, r0
 800d72a:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	3301      	adds	r3, #1
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	429a      	cmp	r2, r3
 800d738:	d3f0      	bcc.n	800d71c <rcvr_spi_multi+0x10>
    }
}
 800d73a:	bf00      	nop
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd90      	pop	{r4, r7, pc}

0800d742 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800d74c:	2300      	movs	r3, #0
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	e009      	b.n	800d766 <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4413      	add	r3, r2
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff ffc0 	bl	800d6e0 <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	3301      	adds	r3, #1
 800d764:	60fb      	str	r3, [r7, #12]
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d3f1      	bcc.n	800d752 <xmit_spi_multi+0x10>
    }
}
 800d76e:	bf00      	nop
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b086      	sub	sp, #24
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800d77e:	f7f8 f907 	bl	8005990 <HAL_GetTick>
 800d782:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800d788:	20ff      	movs	r0, #255	; 0xff
 800d78a:	f7ff ffa9 	bl	800d6e0 <xchg_spi>
 800d78e:	4603      	mov	r3, r0
 800d790:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	2bff      	cmp	r3, #255	; 0xff
 800d796:	d007      	beq.n	800d7a8 <wait_ready+0x32>
 800d798:	f7f8 f8fa 	bl	8005990 <HAL_GetTick>
 800d79c:	4602      	mov	r2, r0
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	1ad3      	subs	r3, r2, r3
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d8ef      	bhi.n	800d788 <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
 800d7aa:	2bff      	cmp	r3, #255	; 0xff
 800d7ac:	bf0c      	ite	eq
 800d7ae:	2301      	moveq	r3, #1
 800d7b0:	2300      	movne	r3, #0
 800d7b2:	b2db      	uxtb	r3, r3
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	2110      	movs	r1, #16
 800d7c4:	4803      	ldr	r0, [pc, #12]	; (800d7d4 <despiselect+0x18>)
 800d7c6:	f7f9 fad5 	bl	8006d74 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800d7ca:	20ff      	movs	r0, #255	; 0xff
 800d7cc:	f7ff ff88 	bl	800d6e0 <xchg_spi>

}
 800d7d0:	bf00      	nop
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	40020800 	.word	0x40020800

0800d7d8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2110      	movs	r1, #16
 800d7e0:	4809      	ldr	r0, [pc, #36]	; (800d808 <spiselect+0x30>)
 800d7e2:	f7f9 fac7 	bl	8006d74 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800d7e6:	20ff      	movs	r0, #255	; 0xff
 800d7e8:	f7ff ff7a 	bl	800d6e0 <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800d7ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d7f0:	f7ff ffc1 	bl	800d776 <wait_ready>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <spiselect+0x26>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e002      	b.n	800d804 <spiselect+0x2c>

    despiselect();
 800d7fe:	f7ff ffdd 	bl	800d7bc <despiselect>
    return 0;   /* Timeout */
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	bd80      	pop	{r7, pc}
 800d808:	40020800 	.word	0x40020800

0800d80c <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800d816:	20c8      	movs	r0, #200	; 0xc8
 800d818:	f7ff ff38 	bl	800d68c <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800d81c:	20ff      	movs	r0, #255	; 0xff
 800d81e:	f7ff ff5f 	bl	800d6e0 <xchg_spi>
 800d822:	4603      	mov	r3, r0
 800d824:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800d826:	7bfb      	ldrb	r3, [r7, #15]
 800d828:	2bff      	cmp	r3, #255	; 0xff
 800d82a:	d104      	bne.n	800d836 <rcvr_datablock+0x2a>
 800d82c:	f7ff ff42 	bl	800d6b4 <SPI_Timer_Status>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1f2      	bne.n	800d81c <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800d836:	7bfb      	ldrb	r3, [r7, #15]
 800d838:	2bfe      	cmp	r3, #254	; 0xfe
 800d83a:	d001      	beq.n	800d840 <rcvr_datablock+0x34>
 800d83c:	2300      	movs	r3, #0
 800d83e:	e00a      	b.n	800d856 <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff ff62 	bl	800d70c <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800d848:	20ff      	movs	r0, #255	; 0xff
 800d84a:	f7ff ff49 	bl	800d6e0 <xchg_spi>
 800d84e:	20ff      	movs	r0, #255	; 0xff
 800d850:	f7ff ff46 	bl	800d6e0 <xchg_spi>

    return 1;                       /* Function succeeded */
 800d854:	2301      	movs	r3, #1
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b084      	sub	sp, #16
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	460b      	mov	r3, r1
 800d868:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800d86a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d86e:	f7ff ff82 	bl	800d776 <wait_ready>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d101      	bne.n	800d87c <xmit_datablock+0x1e>
 800d878:	2300      	movs	r3, #0
 800d87a:	e01e      	b.n	800d8ba <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800d87c:	78fb      	ldrb	r3, [r7, #3]
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff ff2e 	bl	800d6e0 <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800d884:	78fb      	ldrb	r3, [r7, #3]
 800d886:	2bfd      	cmp	r3, #253	; 0xfd
 800d888:	d016      	beq.n	800d8b8 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800d88a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7ff ff57 	bl	800d742 <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800d894:	20ff      	movs	r0, #255	; 0xff
 800d896:	f7ff ff23 	bl	800d6e0 <xchg_spi>
 800d89a:	20ff      	movs	r0, #255	; 0xff
 800d89c:	f7ff ff20 	bl	800d6e0 <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800d8a0:	20ff      	movs	r0, #255	; 0xff
 800d8a2:	f7ff ff1d 	bl	800d6e0 <xchg_spi>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	f003 031f 	and.w	r3, r3, #31
 800d8b0:	2b05      	cmp	r3, #5
 800d8b2:	d001      	beq.n	800d8b8 <xmit_datablock+0x5a>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	e000      	b.n	800d8ba <xmit_datablock+0x5c>
    }
    return 1;
 800d8b8:	2301      	movs	r3, #1
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b084      	sub	sp, #16
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	6039      	str	r1, [r7, #0]
 800d8cc:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800d8ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	da0e      	bge.n	800d8f4 <send_cmd+0x32>
        cmd &= 0x7F;
 800d8d6:	79fb      	ldrb	r3, [r7, #7]
 800d8d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8dc:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800d8de:	2100      	movs	r1, #0
 800d8e0:	2037      	movs	r0, #55	; 0x37
 800d8e2:	f7ff ffee 	bl	800d8c2 <send_cmd>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800d8ea:	7bbb      	ldrb	r3, [r7, #14]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d901      	bls.n	800d8f4 <send_cmd+0x32>
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	e051      	b.n	800d998 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	2b0c      	cmp	r3, #12
 800d8f8:	d008      	beq.n	800d90c <send_cmd+0x4a>
        despiselect();
 800d8fa:	f7ff ff5f 	bl	800d7bc <despiselect>
        if (!spiselect()) return 0xFF;
 800d8fe:	f7ff ff6b 	bl	800d7d8 <spiselect>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <send_cmd+0x4a>
 800d908:	23ff      	movs	r3, #255	; 0xff
 800d90a:	e045      	b.n	800d998 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d912:	b2db      	uxtb	r3, r3
 800d914:	4618      	mov	r0, r3
 800d916:	f7ff fee3 	bl	800d6e0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	0e1b      	lsrs	r3, r3, #24
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fedd 	bl	800d6e0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	0c1b      	lsrs	r3, r3, #16
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7ff fed7 	bl	800d6e0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	0a1b      	lsrs	r3, r3, #8
 800d936:	b2db      	uxtb	r3, r3
 800d938:	4618      	mov	r0, r3
 800d93a:	f7ff fed1 	bl	800d6e0 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	b2db      	uxtb	r3, r3
 800d942:	4618      	mov	r0, r3
 800d944:	f7ff fecc 	bl	800d6e0 <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800d948:	2301      	movs	r3, #1
 800d94a:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <send_cmd+0x94>
 800d952:	2395      	movs	r3, #149	; 0x95
 800d954:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	2b08      	cmp	r3, #8
 800d95a:	d101      	bne.n	800d960 <send_cmd+0x9e>
 800d95c:	2387      	movs	r3, #135	; 0x87
 800d95e:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800d960:	7bfb      	ldrb	r3, [r7, #15]
 800d962:	4618      	mov	r0, r3
 800d964:	f7ff febc 	bl	800d6e0 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800d968:	79fb      	ldrb	r3, [r7, #7]
 800d96a:	2b0c      	cmp	r3, #12
 800d96c:	d102      	bne.n	800d974 <send_cmd+0xb2>
 800d96e:	20ff      	movs	r0, #255	; 0xff
 800d970:	f7ff feb6 	bl	800d6e0 <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800d974:	230a      	movs	r3, #10
 800d976:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800d978:	20ff      	movs	r0, #255	; 0xff
 800d97a:	f7ff feb1 	bl	800d6e0 <xchg_spi>
 800d97e:	4603      	mov	r3, r0
 800d980:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800d982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d986:	2b00      	cmp	r3, #0
 800d988:	da05      	bge.n	800d996 <send_cmd+0xd4>
 800d98a:	7bfb      	ldrb	r3, [r7, #15]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	73fb      	strb	r3, [r7, #15]
 800d990:	7bfb      	ldrb	r3, [r7, #15]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1f0      	bne.n	800d978 <send_cmd+0xb6>

    return res;                         /* Return received response */
 800d996:	7bbb      	ldrb	r3, [r7, #14]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800d9a0:	b590      	push	{r4, r7, lr}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d001      	beq.n	800d9b4 <USER_SPI_initialize+0x14>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e0d4      	b.n	800db5e <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800d9b4:	4b6c      	ldr	r3, [pc, #432]	; (800db68 <USER_SPI_initialize+0x1c8>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 0302 	and.w	r3, r3, #2
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d003      	beq.n	800d9ca <USER_SPI_initialize+0x2a>
 800d9c2:	4b69      	ldr	r3, [pc, #420]	; (800db68 <USER_SPI_initialize+0x1c8>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	e0c9      	b.n	800db5e <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800d9ca:	4b68      	ldr	r3, [pc, #416]	; (800db6c <USER_SPI_initialize+0x1cc>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	4b66      	ldr	r3, [pc, #408]	; (800db6c <USER_SPI_initialize+0x1cc>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800d9d8:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800d9da:	230a      	movs	r3, #10
 800d9dc:	73fb      	strb	r3, [r7, #15]
 800d9de:	e005      	b.n	800d9ec <USER_SPI_initialize+0x4c>
 800d9e0:	20ff      	movs	r0, #255	; 0xff
 800d9e2:	f7ff fe7d 	bl	800d6e0 <xchg_spi>
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	73fb      	strb	r3, [r7, #15]
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1f6      	bne.n	800d9e0 <USER_SPI_initialize+0x40>

    ty = 0;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	f7ff ff62 	bl	800d8c2 <send_cmd>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b01      	cmp	r3, #1
 800da02:	f040 808b 	bne.w	800db1c <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800da06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da0a:	f7ff fe3f 	bl	800d68c <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800da0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da12:	2008      	movs	r0, #8
 800da14:	f7ff ff55 	bl	800d8c2 <send_cmd>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d151      	bne.n	800dac2 <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800da1e:	2300      	movs	r3, #0
 800da20:	73fb      	strb	r3, [r7, #15]
 800da22:	e00d      	b.n	800da40 <USER_SPI_initialize+0xa0>
 800da24:	7bfc      	ldrb	r4, [r7, #15]
 800da26:	20ff      	movs	r0, #255	; 0xff
 800da28:	f7ff fe5a 	bl	800d6e0 <xchg_spi>
 800da2c:	4603      	mov	r3, r0
 800da2e:	461a      	mov	r2, r3
 800da30:	f107 0310 	add.w	r3, r7, #16
 800da34:	4423      	add	r3, r4
 800da36:	f803 2c08 	strb.w	r2, [r3, #-8]
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	3301      	adds	r3, #1
 800da3e:	73fb      	strb	r3, [r7, #15]
 800da40:	7bfb      	ldrb	r3, [r7, #15]
 800da42:	2b03      	cmp	r3, #3
 800da44:	d9ee      	bls.n	800da24 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800da46:	7abb      	ldrb	r3, [r7, #10]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d167      	bne.n	800db1c <USER_SPI_initialize+0x17c>
 800da4c:	7afb      	ldrb	r3, [r7, #11]
 800da4e:	2baa      	cmp	r3, #170	; 0xaa
 800da50:	d164      	bne.n	800db1c <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800da52:	bf00      	nop
 800da54:	f7ff fe2e 	bl	800d6b4 <SPI_Timer_Status>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d007      	beq.n	800da6e <USER_SPI_initialize+0xce>
 800da5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800da62:	20a9      	movs	r0, #169	; 0xa9
 800da64:	f7ff ff2d 	bl	800d8c2 <send_cmd>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1f2      	bne.n	800da54 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800da6e:	f7ff fe21 	bl	800d6b4 <SPI_Timer_Status>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d051      	beq.n	800db1c <USER_SPI_initialize+0x17c>
 800da78:	2100      	movs	r1, #0
 800da7a:	203a      	movs	r0, #58	; 0x3a
 800da7c:	f7ff ff21 	bl	800d8c2 <send_cmd>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d14a      	bne.n	800db1c <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800da86:	2300      	movs	r3, #0
 800da88:	73fb      	strb	r3, [r7, #15]
 800da8a:	e00d      	b.n	800daa8 <USER_SPI_initialize+0x108>
 800da8c:	7bfc      	ldrb	r4, [r7, #15]
 800da8e:	20ff      	movs	r0, #255	; 0xff
 800da90:	f7ff fe26 	bl	800d6e0 <xchg_spi>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	f107 0310 	add.w	r3, r7, #16
 800da9c:	4423      	add	r3, r4
 800da9e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
 800daa4:	3301      	adds	r3, #1
 800daa6:	73fb      	strb	r3, [r7, #15]
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d9ee      	bls.n	800da8c <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800daae:	7a3b      	ldrb	r3, [r7, #8]
 800dab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <USER_SPI_initialize+0x11c>
 800dab8:	230c      	movs	r3, #12
 800daba:	e000      	b.n	800dabe <USER_SPI_initialize+0x11e>
 800dabc:	2304      	movs	r3, #4
 800dabe:	737b      	strb	r3, [r7, #13]
 800dac0:	e02c      	b.n	800db1c <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800dac2:	2100      	movs	r1, #0
 800dac4:	20a9      	movs	r0, #169	; 0xa9
 800dac6:	f7ff fefc 	bl	800d8c2 <send_cmd>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d804      	bhi.n	800dada <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800dad0:	2302      	movs	r3, #2
 800dad2:	737b      	strb	r3, [r7, #13]
 800dad4:	23a9      	movs	r3, #169	; 0xa9
 800dad6:	73bb      	strb	r3, [r7, #14]
 800dad8:	e003      	b.n	800dae2 <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800dada:	2301      	movs	r3, #1
 800dadc:	737b      	strb	r3, [r7, #13]
 800dade:	2301      	movs	r3, #1
 800dae0:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800dae2:	bf00      	nop
 800dae4:	f7ff fde6 	bl	800d6b4 <SPI_Timer_Status>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d007      	beq.n	800dafe <USER_SPI_initialize+0x15e>
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	2100      	movs	r1, #0
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff fee5 	bl	800d8c2 <send_cmd>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d1f2      	bne.n	800dae4 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800dafe:	f7ff fdd9 	bl	800d6b4 <SPI_Timer_Status>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d007      	beq.n	800db18 <USER_SPI_initialize+0x178>
 800db08:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db0c:	2010      	movs	r0, #16
 800db0e:	f7ff fed8 	bl	800d8c2 <send_cmd>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <USER_SPI_initialize+0x17c>
                ty = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800db1c:	4a14      	ldr	r2, [pc, #80]	; (800db70 <USER_SPI_initialize+0x1d0>)
 800db1e:	7b7b      	ldrb	r3, [r7, #13]
 800db20:	7013      	strb	r3, [r2, #0]
    despiselect();
 800db22:	f7ff fe4b 	bl	800d7bc <despiselect>

    if (ty) {           /* OK */
 800db26:	7b7b      	ldrb	r3, [r7, #13]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d012      	beq.n	800db52 <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800db2c:	4b0f      	ldr	r3, [pc, #60]	; (800db6c <USER_SPI_initialize+0x1cc>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800db36:	4b0d      	ldr	r3, [pc, #52]	; (800db6c <USER_SPI_initialize+0x1cc>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f042 0220 	orr.w	r2, r2, #32
 800db3e:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800db40:	4b09      	ldr	r3, [pc, #36]	; (800db68 <USER_SPI_initialize+0x1c8>)
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	b2db      	uxtb	r3, r3
 800db46:	f023 0301 	bic.w	r3, r3, #1
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	4b06      	ldr	r3, [pc, #24]	; (800db68 <USER_SPI_initialize+0x1c8>)
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	e002      	b.n	800db58 <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800db52:	4b05      	ldr	r3, [pc, #20]	; (800db68 <USER_SPI_initialize+0x1c8>)
 800db54:	2201      	movs	r2, #1
 800db56:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800db58:	4b03      	ldr	r3, [pc, #12]	; (800db68 <USER_SPI_initialize+0x1c8>)
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	b2db      	uxtb	r3, r3
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	bd90      	pop	{r4, r7, pc}
 800db66:	bf00      	nop
 800db68:	200002a0 	.word	0x200002a0
 800db6c:	20004978 	.word	0x20004978
 800db70:	20000888 	.word	0x20000888

0800db74 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	4603      	mov	r3, r0
 800db7c:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800db7e:	79fb      	ldrb	r3, [r7, #7]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <USER_SPI_status+0x14>
 800db84:	2301      	movs	r3, #1
 800db86:	e002      	b.n	800db8e <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800db88:	4b04      	ldr	r3, [pc, #16]	; (800db9c <USER_SPI_status+0x28>)
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	b2db      	uxtb	r3, r3
}
 800db8e:	4618      	mov	r0, r3
 800db90:	370c      	adds	r7, #12
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	200002a0 	.word	0x200002a0

0800dba0 <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60b9      	str	r1, [r7, #8]
 800dba8:	607a      	str	r2, [r7, #4]
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	4603      	mov	r3, r0
 800dbae:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d102      	bne.n	800dbbc <USER_SPI_read+0x1c>
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d101      	bne.n	800dbc0 <USER_SPI_read+0x20>
 800dbbc:	2304      	movs	r3, #4
 800dbbe:	e04d      	b.n	800dc5c <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800dbc0:	4b28      	ldr	r3, [pc, #160]	; (800dc64 <USER_SPI_read+0xc4>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <USER_SPI_read+0x32>
 800dbce:	2303      	movs	r3, #3
 800dbd0:	e044      	b.n	800dc5c <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800dbd2:	4b25      	ldr	r3, [pc, #148]	; (800dc68 <USER_SPI_read+0xc8>)
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	f003 0308 	and.w	r3, r3, #8
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d102      	bne.n	800dbe4 <USER_SPI_read+0x44>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	025b      	lsls	r3, r3, #9
 800dbe2:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d111      	bne.n	800dc0e <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800dbea:	6879      	ldr	r1, [r7, #4]
 800dbec:	2011      	movs	r0, #17
 800dbee:	f7ff fe68 	bl	800d8c2 <send_cmd>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d129      	bne.n	800dc4c <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800dbf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbfc:	68b8      	ldr	r0, [r7, #8]
 800dbfe:	f7ff fe05 	bl	800d80c <rcvr_datablock>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d021      	beq.n	800dc4c <USER_SPI_read+0xac>
            count = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	e01e      	b.n	800dc4c <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800dc0e:	6879      	ldr	r1, [r7, #4]
 800dc10:	2012      	movs	r0, #18
 800dc12:	f7ff fe56 	bl	800d8c2 <send_cmd>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d117      	bne.n	800dc4c <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800dc1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc20:	68b8      	ldr	r0, [r7, #8]
 800dc22:	f7ff fdf3 	bl	800d80c <rcvr_datablock>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00a      	beq.n	800dc42 <USER_SPI_read+0xa2>
                buff += 512;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dc32:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	3b01      	subs	r3, #1
 800dc38:	603b      	str	r3, [r7, #0]
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1ed      	bne.n	800dc1c <USER_SPI_read+0x7c>
 800dc40:	e000      	b.n	800dc44 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800dc42:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800dc44:	2100      	movs	r1, #0
 800dc46:	200c      	movs	r0, #12
 800dc48:	f7ff fe3b 	bl	800d8c2 <send_cmd>
        }
    }
    despiselect();
 800dc4c:	f7ff fdb6 	bl	800d7bc <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	bf14      	ite	ne
 800dc56:	2301      	movne	r3, #1
 800dc58:	2300      	moveq	r3, #0
 800dc5a:	b2db      	uxtb	r3, r3
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	200002a0 	.word	0x200002a0
 800dc68:	20000888 	.word	0x20000888

0800dc6c <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d102      	bne.n	800dc88 <USER_SPI_write+0x1c>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d101      	bne.n	800dc8c <USER_SPI_write+0x20>
 800dc88:	2304      	movs	r3, #4
 800dc8a:	e063      	b.n	800dd54 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800dc8c:	4b33      	ldr	r3, [pc, #204]	; (800dd5c <USER_SPI_write+0xf0>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <USER_SPI_write+0x32>
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	e05a      	b.n	800dd54 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800dc9e:	4b2f      	ldr	r3, [pc, #188]	; (800dd5c <USER_SPI_write+0xf0>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	f003 0304 	and.w	r3, r3, #4
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <USER_SPI_write+0x44>
 800dcac:	2302      	movs	r3, #2
 800dcae:	e051      	b.n	800dd54 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800dcb0:	4b2b      	ldr	r3, [pc, #172]	; (800dd60 <USER_SPI_write+0xf4>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	f003 0308 	and.w	r3, r3, #8
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <USER_SPI_write+0x56>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	025b      	lsls	r3, r3, #9
 800dcc0:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d110      	bne.n	800dcea <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	2018      	movs	r0, #24
 800dccc:	f7ff fdf9 	bl	800d8c2 <send_cmd>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d136      	bne.n	800dd44 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800dcd6:	21fe      	movs	r1, #254	; 0xfe
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f7ff fdc0 	bl	800d85e <xmit_datablock>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d02f      	beq.n	800dd44 <USER_SPI_write+0xd8>
            count = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	603b      	str	r3, [r7, #0]
 800dce8:	e02c      	b.n	800dd44 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800dcea:	4b1d      	ldr	r3, [pc, #116]	; (800dd60 <USER_SPI_write+0xf4>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	f003 0306 	and.w	r3, r3, #6
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <USER_SPI_write+0x92>
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	2097      	movs	r0, #151	; 0x97
 800dcfa:	f7ff fde2 	bl	800d8c2 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800dcfe:	6879      	ldr	r1, [r7, #4]
 800dd00:	2019      	movs	r0, #25
 800dd02:	f7ff fdde 	bl	800d8c2 <send_cmd>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d11b      	bne.n	800dd44 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800dd0c:	21fc      	movs	r1, #252	; 0xfc
 800dd0e:	68b8      	ldr	r0, [r7, #8]
 800dd10:	f7ff fda5 	bl	800d85e <xmit_datablock>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <USER_SPI_write+0xc4>
                buff += 512;
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dd20:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	3b01      	subs	r3, #1
 800dd26:	603b      	str	r3, [r7, #0]
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1ee      	bne.n	800dd0c <USER_SPI_write+0xa0>
 800dd2e:	e000      	b.n	800dd32 <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800dd30:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800dd32:	21fd      	movs	r1, #253	; 0xfd
 800dd34:	2000      	movs	r0, #0
 800dd36:	f7ff fd92 	bl	800d85e <xmit_datablock>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <USER_SPI_write+0xd8>
 800dd40:	2301      	movs	r3, #1
 800dd42:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800dd44:	f7ff fd3a 	bl	800d7bc <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	bf14      	ite	ne
 800dd4e:	2301      	movne	r3, #1
 800dd50:	2300      	moveq	r3, #0
 800dd52:	b2db      	uxtb	r3, r3
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3710      	adds	r7, #16
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	200002a0 	.word	0x200002a0
 800dd60:	20000888 	.word	0x20000888

0800dd64 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b08c      	sub	sp, #48	; 0x30
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	603a      	str	r2, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
 800dd70:	460b      	mov	r3, r1
 800dd72:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <USER_SPI_ioctl+0x1a>
 800dd7a:	2304      	movs	r3, #4
 800dd7c:	e15a      	b.n	800e034 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800dd7e:	4baf      	ldr	r3, [pc, #700]	; (800e03c <USER_SPI_ioctl+0x2d8>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	f003 0301 	and.w	r3, r3, #1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <USER_SPI_ioctl+0x2c>
 800dd8c:	2303      	movs	r3, #3
 800dd8e:	e151      	b.n	800e034 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800dd90:	2301      	movs	r3, #1
 800dd92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800dd96:	79bb      	ldrb	r3, [r7, #6]
 800dd98:	2b04      	cmp	r3, #4
 800dd9a:	f200 8136 	bhi.w	800e00a <USER_SPI_ioctl+0x2a6>
 800dd9e:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <USER_SPI_ioctl+0x40>)
 800dda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda4:	0800ddb9 	.word	0x0800ddb9
 800dda8:	0800ddcd 	.word	0x0800ddcd
 800ddac:	0800e00b 	.word	0x0800e00b
 800ddb0:	0800de79 	.word	0x0800de79
 800ddb4:	0800df6f 	.word	0x0800df6f
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800ddb8:	f7ff fd0e 	bl	800d7d8 <spiselect>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 8127 	beq.w	800e012 <USER_SPI_ioctl+0x2ae>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800ddca:	e122      	b.n	800e012 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800ddcc:	2100      	movs	r1, #0
 800ddce:	2009      	movs	r0, #9
 800ddd0:	f7ff fd77 	bl	800d8c2 <send_cmd>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f040 811d 	bne.w	800e016 <USER_SPI_ioctl+0x2b2>
 800dddc:	f107 030c 	add.w	r3, r7, #12
 800dde0:	2110      	movs	r1, #16
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7ff fd12 	bl	800d80c <rcvr_datablock>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 8113 	beq.w	800e016 <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800ddf0:	7b3b      	ldrb	r3, [r7, #12]
 800ddf2:	099b      	lsrs	r3, r3, #6
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d111      	bne.n	800de1e <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800ddfa:	7d7b      	ldrb	r3, [r7, #21]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	7d3b      	ldrb	r3, [r7, #20]
 800de00:	021b      	lsls	r3, r3, #8
 800de02:	4413      	add	r3, r2
 800de04:	461a      	mov	r2, r3
 800de06:	7cfb      	ldrb	r3, [r7, #19]
 800de08:	041b      	lsls	r3, r3, #16
 800de0a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800de0e:	4413      	add	r3, r2
 800de10:	3301      	adds	r3, #1
 800de12:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	029a      	lsls	r2, r3, #10
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	e028      	b.n	800de70 <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800de1e:	7c7b      	ldrb	r3, [r7, #17]
 800de20:	f003 030f 	and.w	r3, r3, #15
 800de24:	b2da      	uxtb	r2, r3
 800de26:	7dbb      	ldrb	r3, [r7, #22]
 800de28:	09db      	lsrs	r3, r3, #7
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	4413      	add	r3, r2
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	7d7b      	ldrb	r3, [r7, #21]
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	b2db      	uxtb	r3, r3
 800de36:	f003 0306 	and.w	r3, r3, #6
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	4413      	add	r3, r2
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	3302      	adds	r3, #2
 800de42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800de46:	7d3b      	ldrb	r3, [r7, #20]
 800de48:	099b      	lsrs	r3, r3, #6
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	461a      	mov	r2, r3
 800de4e:	7cfb      	ldrb	r3, [r7, #19]
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	441a      	add	r2, r3
 800de54:	7cbb      	ldrb	r3, [r7, #18]
 800de56:	029b      	lsls	r3, r3, #10
 800de58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800de5c:	4413      	add	r3, r2
 800de5e:	3301      	adds	r3, #1
 800de60:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800de62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de66:	3b09      	subs	r3, #9
 800de68:	69fa      	ldr	r2, [r7, #28]
 800de6a:	409a      	lsls	r2, r3
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800de76:	e0ce      	b.n	800e016 <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800de78:	4b71      	ldr	r3, [pc, #452]	; (800e040 <USER_SPI_ioctl+0x2dc>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	f003 0304 	and.w	r3, r3, #4
 800de80:	2b00      	cmp	r3, #0
 800de82:	d031      	beq.n	800dee8 <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800de84:	2100      	movs	r1, #0
 800de86:	208d      	movs	r0, #141	; 0x8d
 800de88:	f7ff fd1b 	bl	800d8c2 <send_cmd>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f040 80c3 	bne.w	800e01a <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800de94:	20ff      	movs	r0, #255	; 0xff
 800de96:	f7ff fc23 	bl	800d6e0 <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800de9a:	f107 030c 	add.w	r3, r7, #12
 800de9e:	2110      	movs	r1, #16
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff fcb3 	bl	800d80c <rcvr_datablock>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 80b6 	beq.w	800e01a <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800deae:	2330      	movs	r3, #48	; 0x30
 800deb0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800deb4:	e007      	b.n	800dec6 <USER_SPI_ioctl+0x162>
 800deb6:	20ff      	movs	r0, #255	; 0xff
 800deb8:	f7ff fc12 	bl	800d6e0 <xchg_spi>
 800debc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dec0:	3b01      	subs	r3, #1
 800dec2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800dec6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1f3      	bne.n	800deb6 <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800dece:	7dbb      	ldrb	r3, [r7, #22]
 800ded0:	091b      	lsrs	r3, r3, #4
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	461a      	mov	r2, r3
 800ded6:	2310      	movs	r3, #16
 800ded8:	fa03 f202 	lsl.w	r2, r3, r2
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800dee0:	2300      	movs	r3, #0
 800dee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800dee6:	e098      	b.n	800e01a <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800dee8:	2100      	movs	r1, #0
 800deea:	2009      	movs	r0, #9
 800deec:	f7ff fce9 	bl	800d8c2 <send_cmd>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	f040 8091 	bne.w	800e01a <USER_SPI_ioctl+0x2b6>
 800def8:	f107 030c 	add.w	r3, r7, #12
 800defc:	2110      	movs	r1, #16
 800defe:	4618      	mov	r0, r3
 800df00:	f7ff fc84 	bl	800d80c <rcvr_datablock>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 8087 	beq.w	800e01a <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800df0c:	4b4c      	ldr	r3, [pc, #304]	; (800e040 <USER_SPI_ioctl+0x2dc>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	f003 0302 	and.w	r3, r3, #2
 800df14:	2b00      	cmp	r3, #0
 800df16:	d012      	beq.n	800df3e <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800df18:	7dbb      	ldrb	r3, [r7, #22]
 800df1a:	005b      	lsls	r3, r3, #1
 800df1c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800df20:	7dfa      	ldrb	r2, [r7, #23]
 800df22:	09d2      	lsrs	r2, r2, #7
 800df24:	b2d2      	uxtb	r2, r2
 800df26:	4413      	add	r3, r2
 800df28:	1c5a      	adds	r2, r3, #1
 800df2a:	7e7b      	ldrb	r3, [r7, #25]
 800df2c:	099b      	lsrs	r3, r3, #6
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	3b01      	subs	r3, #1
 800df32:	fa02 f303 	lsl.w	r3, r2, r3
 800df36:	461a      	mov	r2, r3
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	601a      	str	r2, [r3, #0]
 800df3c:	e013      	b.n	800df66 <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800df3e:	7dbb      	ldrb	r3, [r7, #22]
 800df40:	109b      	asrs	r3, r3, #2
 800df42:	b29b      	uxth	r3, r3
 800df44:	f003 031f 	and.w	r3, r3, #31
 800df48:	3301      	adds	r3, #1
 800df4a:	7dfa      	ldrb	r2, [r7, #23]
 800df4c:	00d2      	lsls	r2, r2, #3
 800df4e:	f002 0218 	and.w	r2, r2, #24
 800df52:	7df9      	ldrb	r1, [r7, #23]
 800df54:	0949      	lsrs	r1, r1, #5
 800df56:	b2c9      	uxtb	r1, r1
 800df58:	440a      	add	r2, r1
 800df5a:	3201      	adds	r2, #1
 800df5c:	fb02 f303 	mul.w	r3, r2, r3
 800df60:	461a      	mov	r2, r3
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800df6c:	e055      	b.n	800e01a <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800df6e:	4b34      	ldr	r3, [pc, #208]	; (800e040 <USER_SPI_ioctl+0x2dc>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	f003 0306 	and.w	r3, r3, #6
 800df76:	2b00      	cmp	r3, #0
 800df78:	d051      	beq.n	800e01e <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800df7a:	f107 020c 	add.w	r2, r7, #12
 800df7e:	79fb      	ldrb	r3, [r7, #7]
 800df80:	210b      	movs	r1, #11
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff feee 	bl	800dd64 <USER_SPI_ioctl>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d149      	bne.n	800e022 <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800df8e:	7b3b      	ldrb	r3, [r7, #12]
 800df90:	099b      	lsrs	r3, r3, #6
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b00      	cmp	r3, #0
 800df96:	d104      	bne.n	800dfa2 <USER_SPI_ioctl+0x23e>
 800df98:	7dbb      	ldrb	r3, [r7, #22]
 800df9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d041      	beq.n	800e026 <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	623b      	str	r3, [r7, #32]
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfac:	6a3b      	ldr	r3, [r7, #32]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800dfb2:	4b23      	ldr	r3, [pc, #140]	; (800e040 <USER_SPI_ioctl+0x2dc>)
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	f003 0308 	and.w	r3, r3, #8
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d105      	bne.n	800dfca <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800dfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc0:	025b      	lsls	r3, r3, #9
 800dfc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	025b      	lsls	r3, r3, #9
 800dfc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800dfca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfcc:	2020      	movs	r0, #32
 800dfce:	f7ff fc78 	bl	800d8c2 <send_cmd>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d128      	bne.n	800e02a <USER_SPI_ioctl+0x2c6>
 800dfd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfda:	2021      	movs	r0, #33	; 0x21
 800dfdc:	f7ff fc71 	bl	800d8c2 <send_cmd>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d121      	bne.n	800e02a <USER_SPI_ioctl+0x2c6>
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	2026      	movs	r0, #38	; 0x26
 800dfea:	f7ff fc6a 	bl	800d8c2 <send_cmd>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d11a      	bne.n	800e02a <USER_SPI_ioctl+0x2c6>
 800dff4:	f247 5030 	movw	r0, #30000	; 0x7530
 800dff8:	f7ff fbbd 	bl	800d776 <wait_ready>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d013      	beq.n	800e02a <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800e002:	2300      	movs	r3, #0
 800e004:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800e008:	e00f      	b.n	800e02a <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800e00a:	2304      	movs	r3, #4
 800e00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e010:	e00c      	b.n	800e02c <USER_SPI_ioctl+0x2c8>
        break;
 800e012:	bf00      	nop
 800e014:	e00a      	b.n	800e02c <USER_SPI_ioctl+0x2c8>
        break;
 800e016:	bf00      	nop
 800e018:	e008      	b.n	800e02c <USER_SPI_ioctl+0x2c8>
        break;
 800e01a:	bf00      	nop
 800e01c:	e006      	b.n	800e02c <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800e01e:	bf00      	nop
 800e020:	e004      	b.n	800e02c <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800e022:	bf00      	nop
 800e024:	e002      	b.n	800e02c <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800e026:	bf00      	nop
 800e028:	e000      	b.n	800e02c <USER_SPI_ioctl+0x2c8>
        break;
 800e02a:	bf00      	nop
    }

    despiselect();
 800e02c:	f7ff fbc6 	bl	800d7bc <despiselect>

    return res;
 800e030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e034:	4618      	mov	r0, r3
 800e036:	3730      	adds	r7, #48	; 0x30
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	200002a0 	.word	0x200002a0
 800e040:	20000888 	.word	0x20000888

0800e044 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	460b      	mov	r3, r1
 800e04e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e050:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e054:	f004 fce0 	bl	8012a18 <malloc>
 800e058:	4603      	mov	r3, r0
 800e05a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d105      	bne.n	800e06e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e06a:	2302      	movs	r3, #2
 800e06c:	e066      	b.n	800e13c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	7c1b      	ldrb	r3, [r3, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d119      	bne.n	800e0b2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e07e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e082:	2202      	movs	r2, #2
 800e084:	2181      	movs	r1, #129	; 0x81
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f004 facf 	bl	801262a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e092:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e096:	2202      	movs	r2, #2
 800e098:	2101      	movs	r1, #1
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f004 fac5 	bl	801262a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2210      	movs	r2, #16
 800e0ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e0b0:	e016      	b.n	800e0e0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e0b2:	2340      	movs	r3, #64	; 0x40
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	2181      	movs	r1, #129	; 0x81
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f004 fab6 	bl	801262a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e0c4:	2340      	movs	r3, #64	; 0x40
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f004 faad 	bl	801262a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2210      	movs	r2, #16
 800e0dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e0e0:	2308      	movs	r3, #8
 800e0e2:	2203      	movs	r2, #3
 800e0e4:	2182      	movs	r1, #130	; 0x82
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f004 fa9f 	bl	801262a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	7c1b      	ldrb	r3, [r3, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d109      	bne.n	800e12a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e11c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e120:	2101      	movs	r1, #1
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f004 fb70 	bl	8012808 <USBD_LL_PrepareReceive>
 800e128:	e007      	b.n	800e13a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e130:	2340      	movs	r3, #64	; 0x40
 800e132:	2101      	movs	r1, #1
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f004 fb67 	bl	8012808 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	460b      	mov	r3, r1
 800e14e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e150:	2300      	movs	r3, #0
 800e152:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e154:	2181      	movs	r1, #129	; 0x81
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f004 fa8d 	bl	8012676 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e162:	2101      	movs	r1, #1
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f004 fa86 	bl	8012676 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e172:	2182      	movs	r1, #130	; 0x82
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f004 fa7e 	bl	8012676 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2200      	movs	r2, #0
 800e186:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00e      	beq.n	800e1b2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f004 fc3f 	bl	8012a28 <free>
    pdev->pClassData = NULL;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d03a      	beq.n	800e25c <USBD_CDC_Setup+0xa0>
 800e1e6:	2b20      	cmp	r3, #32
 800e1e8:	f040 8097 	bne.w	800e31a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	88db      	ldrh	r3, [r3, #6]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d029      	beq.n	800e248 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	b25b      	sxtb	r3, r3
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	da11      	bge.n	800e222 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e20a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	88d2      	ldrh	r2, [r2, #6]
 800e210:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e212:	6939      	ldr	r1, [r7, #16]
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	88db      	ldrh	r3, [r3, #6]
 800e218:	461a      	mov	r2, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f001 fac7 	bl	800f7ae <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e220:	e082      	b.n	800e328 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	785a      	ldrb	r2, [r3, #1]
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	88db      	ldrh	r3, [r3, #6]
 800e230:	b2da      	uxtb	r2, r3
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e238:	6939      	ldr	r1, [r7, #16]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	88db      	ldrh	r3, [r3, #6]
 800e23e:	461a      	mov	r2, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f001 fae0 	bl	800f806 <USBD_CtlPrepareRx>
    break;
 800e246:	e06f      	b.n	800e328 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	683a      	ldr	r2, [r7, #0]
 800e252:	7850      	ldrb	r0, [r2, #1]
 800e254:	2200      	movs	r2, #0
 800e256:	6839      	ldr	r1, [r7, #0]
 800e258:	4798      	blx	r3
    break;
 800e25a:	e065      	b.n	800e328 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	785b      	ldrb	r3, [r3, #1]
 800e260:	2b0b      	cmp	r3, #11
 800e262:	d84f      	bhi.n	800e304 <USBD_CDC_Setup+0x148>
 800e264:	a201      	add	r2, pc, #4	; (adr r2, 800e26c <USBD_CDC_Setup+0xb0>)
 800e266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26a:	bf00      	nop
 800e26c:	0800e29d 	.word	0x0800e29d
 800e270:	0800e313 	.word	0x0800e313
 800e274:	0800e305 	.word	0x0800e305
 800e278:	0800e305 	.word	0x0800e305
 800e27c:	0800e305 	.word	0x0800e305
 800e280:	0800e305 	.word	0x0800e305
 800e284:	0800e305 	.word	0x0800e305
 800e288:	0800e305 	.word	0x0800e305
 800e28c:	0800e305 	.word	0x0800e305
 800e290:	0800e305 	.word	0x0800e305
 800e294:	0800e2c5 	.word	0x0800e2c5
 800e298:	0800e2ed 	.word	0x0800e2ed
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2a2:	2b03      	cmp	r3, #3
 800e2a4:	d107      	bne.n	800e2b6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e2a6:	f107 030c 	add.w	r3, r7, #12
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f001 fa7d 	bl	800f7ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e2b4:	e030      	b.n	800e318 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f001 fa07 	bl	800f6cc <USBD_CtlError>
        ret = USBD_FAIL;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	75fb      	strb	r3, [r7, #23]
      break;
 800e2c2:	e029      	b.n	800e318 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2ca:	2b03      	cmp	r3, #3
 800e2cc:	d107      	bne.n	800e2de <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2ce:	f107 030f 	add.w	r3, r7, #15
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f001 fa69 	bl	800f7ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e2dc:	e01c      	b.n	800e318 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f001 f9f3 	bl	800f6cc <USBD_CtlError>
        ret = USBD_FAIL;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800e2ea:	e015      	b.n	800e318 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2f2:	2b03      	cmp	r3, #3
 800e2f4:	d00f      	beq.n	800e316 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e2f6:	6839      	ldr	r1, [r7, #0]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f001 f9e7 	bl	800f6cc <USBD_CtlError>
        ret = USBD_FAIL;
 800e2fe:	2303      	movs	r3, #3
 800e300:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e302:	e008      	b.n	800e316 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f001 f9e0 	bl	800f6cc <USBD_CtlError>
      ret = USBD_FAIL;
 800e30c:	2303      	movs	r3, #3
 800e30e:	75fb      	strb	r3, [r7, #23]
      break;
 800e310:	e002      	b.n	800e318 <USBD_CDC_Setup+0x15c>
      break;
 800e312:	bf00      	nop
 800e314:	e008      	b.n	800e328 <USBD_CDC_Setup+0x16c>
      break;
 800e316:	bf00      	nop
    }
    break;
 800e318:	e006      	b.n	800e328 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f001 f9d5 	bl	800f6cc <USBD_CtlError>
    ret = USBD_FAIL;
 800e322:	2303      	movs	r3, #3
 800e324:	75fb      	strb	r3, [r7, #23]
    break;
 800e326:	bf00      	nop
  }

  return (uint8_t)ret;
 800e328:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3718      	adds	r7, #24
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop

0800e334 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e346:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d101      	bne.n	800e356 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e352:	2303      	movs	r3, #3
 800e354:	e049      	b.n	800e3ea <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e35c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e35e:	78fa      	ldrb	r2, [r7, #3]
 800e360:	6879      	ldr	r1, [r7, #4]
 800e362:	4613      	mov	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	440b      	add	r3, r1
 800e36c:	3318      	adds	r3, #24
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d029      	beq.n	800e3c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e374:	78fa      	ldrb	r2, [r7, #3]
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	4613      	mov	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	440b      	add	r3, r1
 800e382:	3318      	adds	r3, #24
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	78f9      	ldrb	r1, [r7, #3]
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	460b      	mov	r3, r1
 800e38c:	00db      	lsls	r3, r3, #3
 800e38e:	1a5b      	subs	r3, r3, r1
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4403      	add	r3, r0
 800e394:	3344      	adds	r3, #68	; 0x44
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	fbb2 f1f3 	udiv	r1, r2, r3
 800e39c:	fb03 f301 	mul.w	r3, r3, r1
 800e3a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d110      	bne.n	800e3c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e3a6:	78fa      	ldrb	r2, [r7, #3]
 800e3a8:	6879      	ldr	r1, [r7, #4]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	3318      	adds	r3, #24
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3ba:	78f9      	ldrb	r1, [r7, #3]
 800e3bc:	2300      	movs	r3, #0
 800e3be:	2200      	movs	r2, #0
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f004 fa00 	bl	80127c6 <USBD_LL_Transmit>
 800e3c6:	e00f      	b.n	800e3e8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e3de:	68ba      	ldr	r2, [r7, #8]
 800e3e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e3e4:	78fa      	ldrb	r2, [r7, #3]
 800e3e6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b084      	sub	sp, #16
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e404:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e410:	2303      	movs	r3, #3
 800e412:	e015      	b.n	800e440 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e414:	78fb      	ldrb	r3, [r7, #3]
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f004 fa16 	bl	801284a <USBD_LL_GetRxDataSize>
 800e41e:	4602      	mov	r2, r0
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	68fa      	ldr	r2, [r7, #12]
 800e430:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e43a:	4611      	mov	r1, r2
 800e43c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e456:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d015      	beq.n	800e48e <USBD_CDC_EP0_RxReady+0x46>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e468:	2bff      	cmp	r3, #255	; 0xff
 800e46a:	d010      	beq.n	800e48e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e47a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e482:	b292      	uxth	r2, r2
 800e484:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	22ff      	movs	r2, #255	; 0xff
 800e48a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2243      	movs	r2, #67	; 0x43
 800e4a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e4a6:	4b03      	ldr	r3, [pc, #12]	; (800e4b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr
 800e4b4:	2000032c 	.word	0x2000032c

0800e4b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2243      	movs	r2, #67	; 0x43
 800e4c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e4c6:	4b03      	ldr	r3, [pc, #12]	; (800e4d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	200002e8 	.word	0x200002e8

0800e4d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2243      	movs	r2, #67	; 0x43
 800e4e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e4e6:	4b03      	ldr	r3, [pc, #12]	; (800e4f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	20000370 	.word	0x20000370

0800e4f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	220a      	movs	r2, #10
 800e504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e506:	4b03      	ldr	r3, [pc, #12]	; (800e514 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	200002a4 	.word	0x200002a4

0800e518 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d101      	bne.n	800e52c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e528:	2303      	movs	r3, #3
 800e52a:	e004      	b.n	800e536 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr

0800e542 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e542:	b480      	push	{r7}
 800e544:	b087      	sub	sp, #28
 800e546:	af00      	add	r7, sp, #0
 800e548:	60f8      	str	r0, [r7, #12]
 800e54a:	60b9      	str	r1, [r7, #8]
 800e54c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e554:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	371c      	adds	r7, #28
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr

0800e574 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e574:	b480      	push	{r7}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e584:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3714      	adds	r7, #20
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr

0800e59c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e5ba:	2303      	movs	r3, #3
 800e5bc:	e01a      	b.n	800e5f4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d114      	bne.n	800e5f2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e5e6:	2181      	movs	r1, #129	; 0x81
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f004 f8ec 	bl	80127c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e60a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e612:	2b00      	cmp	r3, #0
 800e614:	d101      	bne.n	800e61a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e616:	2303      	movs	r3, #3
 800e618:	e016      	b.n	800e648 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	7c1b      	ldrb	r3, [r3, #16]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d109      	bne.n	800e636 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e62c:	2101      	movs	r1, #1
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f004 f8ea 	bl	8012808 <USBD_LL_PrepareReceive>
 800e634:	e007      	b.n	800e646 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e63c:	2340      	movs	r3, #64	; 0x40
 800e63e:	2101      	movs	r1, #1
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f004 f8e1 	bl	8012808 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	4613      	mov	r3, r2
 800e65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e664:	2303      	movs	r3, #3
 800e666:	e025      	b.n	800e6b4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d003      	beq.n	800e67a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e680:	2b00      	cmp	r3, #0
 800e682:	d003      	beq.n	800e68c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2201      	movs	r2, #1
 800e69e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	79fa      	ldrb	r2, [r7, #7]
 800e6a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f003 ff57 	bl	801255c <USBD_LL_Init>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d101      	bne.n	800e6d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	e010      	b.n	800e6f6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e4:	f107 020e 	add.w	r2, r7, #14
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4798      	blx	r3
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b082      	sub	sp, #8
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f003 ff74 	bl	80125f4 <USBD_LL_Start>
 800e70c:	4603      	mov	r3, r0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e716:	b480      	push	{r7}
 800e718:	b083      	sub	sp, #12
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	460b      	mov	r3, r1
 800e736:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e738:	2303      	movs	r3, #3
 800e73a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e742:	2b00      	cmp	r3, #0
 800e744:	d009      	beq.n	800e75a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	78fa      	ldrb	r2, [r7, #3]
 800e750:	4611      	mov	r1, r2
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	4798      	blx	r3
 800e756:	4603      	mov	r3, r0
 800e758:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e776:	2b00      	cmp	r3, #0
 800e778:	d007      	beq.n	800e78a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	78fa      	ldrb	r2, [r7, #3]
 800e784:	4611      	mov	r1, r2
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	4798      	blx	r3
  }

  return USBD_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 ff56 	bl	800f658 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7c8:	f003 031f 	and.w	r3, r3, #31
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d00e      	beq.n	800e7ee <USBD_LL_SetupStage+0x5a>
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d302      	bcc.n	800e7da <USBD_LL_SetupStage+0x46>
 800e7d4:	2b02      	cmp	r3, #2
 800e7d6:	d014      	beq.n	800e802 <USBD_LL_SetupStage+0x6e>
 800e7d8:	e01d      	b.n	800e816 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fa18 	bl	800ec18 <USBD_StdDevReq>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	73fb      	strb	r3, [r7, #15]
      break;
 800e7ec:	e020      	b.n	800e830 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 fa7c 	bl	800ecf4 <USBD_StdItfReq>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e800:	e016      	b.n	800e830 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e808:	4619      	mov	r1, r3
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fab8 	bl	800ed80 <USBD_StdEPReq>
 800e810:	4603      	mov	r3, r0
 800e812:	73fb      	strb	r3, [r7, #15]
      break;
 800e814:	e00c      	b.n	800e830 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e81c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e820:	b2db      	uxtb	r3, r3
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f003 ff45 	bl	80126b4 <USBD_LL_StallEP>
 800e82a:	4603      	mov	r3, r0
 800e82c:	73fb      	strb	r3, [r7, #15]
      break;
 800e82e:	bf00      	nop
  }

  return ret;
 800e830:	7bfb      	ldrb	r3, [r7, #15]
}
 800e832:	4618      	mov	r0, r3
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b086      	sub	sp, #24
 800e83e:	af00      	add	r7, sp, #0
 800e840:	60f8      	str	r0, [r7, #12]
 800e842:	460b      	mov	r3, r1
 800e844:	607a      	str	r2, [r7, #4]
 800e846:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e848:	7afb      	ldrb	r3, [r7, #11]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d137      	bne.n	800e8be <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e854:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e85c:	2b03      	cmp	r3, #3
 800e85e:	d14a      	bne.n	800e8f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	689a      	ldr	r2, [r3, #8]
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d913      	bls.n	800e894 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	689a      	ldr	r2, [r3, #8]
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	1ad2      	subs	r2, r2, r3
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	68da      	ldr	r2, [r3, #12]
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	4293      	cmp	r3, r2
 800e884:	bf28      	it	cs
 800e886:	4613      	movcs	r3, r2
 800e888:	461a      	mov	r2, r3
 800e88a:	6879      	ldr	r1, [r7, #4]
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f000 ffd7 	bl	800f840 <USBD_CtlContinueRx>
 800e892:	e030      	b.n	800e8f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00a      	beq.n	800e8b6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	d105      	bne.n	800e8b6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f000 ffd3 	bl	800f862 <USBD_CtlSendStatus>
 800e8bc:	e01b      	b.n	800e8f6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8c4:	699b      	ldr	r3, [r3, #24]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d013      	beq.n	800e8f2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e8d0:	2b03      	cmp	r3, #3
 800e8d2:	d10e      	bne.n	800e8f2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	7afa      	ldrb	r2, [r7, #11]
 800e8de:	4611      	mov	r1, r2
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	4798      	blx	r3
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
 800e8f0:	e002      	b.n	800e8f8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	e000      	b.n	800e8f8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3718      	adds	r7, #24
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	460b      	mov	r3, r1
 800e90a:	607a      	str	r2, [r7, #4]
 800e90c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e90e:	7afb      	ldrb	r3, [r7, #11]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d16a      	bne.n	800e9ea <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3314      	adds	r3, #20
 800e918:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e920:	2b02      	cmp	r3, #2
 800e922:	d155      	bne.n	800e9d0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	689a      	ldr	r2, [r3, #8]
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d914      	bls.n	800e95a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	689a      	ldr	r2, [r3, #8]
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	1ad2      	subs	r2, r2, r3
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	461a      	mov	r2, r3
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	68f8      	ldr	r0, [r7, #12]
 800e948:	f000 ff4c 	bl	800f7e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e94c:	2300      	movs	r3, #0
 800e94e:	2200      	movs	r2, #0
 800e950:	2100      	movs	r1, #0
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f003 ff58 	bl	8012808 <USBD_LL_PrepareReceive>
 800e958:	e03a      	b.n	800e9d0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	68da      	ldr	r2, [r3, #12]
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	429a      	cmp	r2, r3
 800e964:	d11c      	bne.n	800e9a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	685a      	ldr	r2, [r3, #4]
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e96e:	429a      	cmp	r2, r3
 800e970:	d316      	bcc.n	800e9a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d20f      	bcs.n	800e9a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e980:	2200      	movs	r2, #0
 800e982:	2100      	movs	r1, #0
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f000 ff2d 	bl	800f7e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e992:	2300      	movs	r3, #0
 800e994:	2200      	movs	r2, #0
 800e996:	2100      	movs	r1, #0
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f003 ff35 	bl	8012808 <USBD_LL_PrepareReceive>
 800e99e:	e017      	b.n	800e9d0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00a      	beq.n	800e9c2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e9b2:	2b03      	cmp	r3, #3
 800e9b4:	d105      	bne.n	800e9c2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9c2:	2180      	movs	r1, #128	; 0x80
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f003 fe75 	bl	80126b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f000 ff5c 	bl	800f888 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d123      	bne.n	800ea22 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f7ff fe9b 	bl	800e716 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e9e8:	e01b      	b.n	800ea22 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d013      	beq.n	800ea1e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e9fc:	2b03      	cmp	r3, #3
 800e9fe:	d10e      	bne.n	800ea1e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea06:	695b      	ldr	r3, [r3, #20]
 800ea08:	7afa      	ldrb	r2, [r7, #11]
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	4798      	blx	r3
 800ea10:	4603      	mov	r3, r0
 800ea12:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d003      	beq.n	800ea22 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	e002      	b.n	800ea24 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ea1e:	2303      	movs	r3, #3
 800ea20:	e000      	b.n	800ea24 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3718      	adds	r7, #24
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2201      	movs	r2, #1
 800ea38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d009      	beq.n	800ea70 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	6852      	ldr	r2, [r2, #4]
 800ea68:	b2d2      	uxtb	r2, r2
 800ea6a:	4611      	mov	r1, r2
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea70:	2340      	movs	r3, #64	; 0x40
 800ea72:	2200      	movs	r2, #0
 800ea74:	2100      	movs	r1, #0
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f003 fdd7 	bl	801262a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2240      	movs	r2, #64	; 0x40
 800ea88:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea8c:	2340      	movs	r3, #64	; 0x40
 800ea8e:	2200      	movs	r2, #0
 800ea90:	2180      	movs	r1, #128	; 0x80
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f003 fdc9 	bl	801262a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2240      	movs	r2, #64	; 0x40
 800eaa2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b083      	sub	sp, #12
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	460b      	mov	r3, r1
 800eab8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	78fa      	ldrb	r2, [r7, #3]
 800eabe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eace:	b480      	push	{r7}
 800ead0:	b083      	sub	sp, #12
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2204      	movs	r2, #4
 800eae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb06:	2b04      	cmp	r3, #4
 800eb08:	d105      	bne.n	800eb16 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	370c      	adds	r7, #12
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb32:	2b03      	cmp	r3, #3
 800eb34:	d10b      	bne.n	800eb4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb3c:	69db      	ldr	r3, [r3, #28]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d005      	beq.n	800eb4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb48:	69db      	ldr	r3, [r3, #28]
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b083      	sub	sp, #12
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b082      	sub	sp, #8
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d009      	beq.n	800ebd0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	6852      	ldr	r2, [r2, #4]
 800ebc8:	b2d2      	uxtb	r2, r2
 800ebca:	4611      	mov	r1, r2
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	4798      	blx	r3
  }

  return USBD_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ebda:	b480      	push	{r7}
 800ebdc:	b087      	sub	sp, #28
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ebf8:	8a3b      	ldrh	r3, [r7, #16]
 800ebfa:	021b      	lsls	r3, r3, #8
 800ebfc:	b21a      	sxth	r2, r3
 800ebfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	b21b      	sxth	r3, r3
 800ec06:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec08:	89fb      	ldrh	r3, [r7, #14]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
	...

0800ec18 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec2e:	2b20      	cmp	r3, #32
 800ec30:	d004      	beq.n	800ec3c <USBD_StdDevReq+0x24>
 800ec32:	2b40      	cmp	r3, #64	; 0x40
 800ec34:	d002      	beq.n	800ec3c <USBD_StdDevReq+0x24>
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00a      	beq.n	800ec50 <USBD_StdDevReq+0x38>
 800ec3a:	e050      	b.n	800ecde <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	6839      	ldr	r1, [r7, #0]
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	4798      	blx	r3
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec4e:	e04b      	b.n	800ece8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	785b      	ldrb	r3, [r3, #1]
 800ec54:	2b09      	cmp	r3, #9
 800ec56:	d83c      	bhi.n	800ecd2 <USBD_StdDevReq+0xba>
 800ec58:	a201      	add	r2, pc, #4	; (adr r2, 800ec60 <USBD_StdDevReq+0x48>)
 800ec5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5e:	bf00      	nop
 800ec60:	0800ecb5 	.word	0x0800ecb5
 800ec64:	0800ecc9 	.word	0x0800ecc9
 800ec68:	0800ecd3 	.word	0x0800ecd3
 800ec6c:	0800ecbf 	.word	0x0800ecbf
 800ec70:	0800ecd3 	.word	0x0800ecd3
 800ec74:	0800ec93 	.word	0x0800ec93
 800ec78:	0800ec89 	.word	0x0800ec89
 800ec7c:	0800ecd3 	.word	0x0800ecd3
 800ec80:	0800ecab 	.word	0x0800ecab
 800ec84:	0800ec9d 	.word	0x0800ec9d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ec88:	6839      	ldr	r1, [r7, #0]
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 f9ce 	bl	800f02c <USBD_GetDescriptor>
      break;
 800ec90:	e024      	b.n	800ecdc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ec92:	6839      	ldr	r1, [r7, #0]
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 fb5d 	bl	800f354 <USBD_SetAddress>
      break;
 800ec9a:	e01f      	b.n	800ecdc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ec9c:	6839      	ldr	r1, [r7, #0]
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 fb9a 	bl	800f3d8 <USBD_SetConfig>
 800eca4:	4603      	mov	r3, r0
 800eca6:	73fb      	strb	r3, [r7, #15]
      break;
 800eca8:	e018      	b.n	800ecdc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ecaa:	6839      	ldr	r1, [r7, #0]
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 fc37 	bl	800f520 <USBD_GetConfig>
      break;
 800ecb2:	e013      	b.n	800ecdc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ecb4:	6839      	ldr	r1, [r7, #0]
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 fc66 	bl	800f588 <USBD_GetStatus>
      break;
 800ecbc:	e00e      	b.n	800ecdc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ecbe:	6839      	ldr	r1, [r7, #0]
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fc94 	bl	800f5ee <USBD_SetFeature>
      break;
 800ecc6:	e009      	b.n	800ecdc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 fca3 	bl	800f616 <USBD_ClrFeature>
      break;
 800ecd0:	e004      	b.n	800ecdc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fcf9 	bl	800f6cc <USBD_CtlError>
      break;
 800ecda:	bf00      	nop
    }
    break;
 800ecdc:	e004      	b.n	800ece8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fcf3 	bl	800f6cc <USBD_CtlError>
    break;
 800ece6:	bf00      	nop
  }

  return ret;
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop

0800ecf4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed0a:	2b20      	cmp	r3, #32
 800ed0c:	d003      	beq.n	800ed16 <USBD_StdItfReq+0x22>
 800ed0e:	2b40      	cmp	r3, #64	; 0x40
 800ed10:	d001      	beq.n	800ed16 <USBD_StdItfReq+0x22>
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d12a      	bne.n	800ed6c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d81d      	bhi.n	800ed5e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	889b      	ldrh	r3, [r3, #4]
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d813      	bhi.n	800ed54 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	88db      	ldrh	r3, [r3, #6]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d110      	bne.n	800ed68 <USBD_StdItfReq+0x74>
 800ed46:	7bfb      	ldrb	r3, [r7, #15]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d10d      	bne.n	800ed68 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fd88 	bl	800f862 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ed52:	e009      	b.n	800ed68 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ed54:	6839      	ldr	r1, [r7, #0]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 fcb8 	bl	800f6cc <USBD_CtlError>
      break;
 800ed5c:	e004      	b.n	800ed68 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 fcb3 	bl	800f6cc <USBD_CtlError>
      break;
 800ed66:	e000      	b.n	800ed6a <USBD_StdItfReq+0x76>
      break;
 800ed68:	bf00      	nop
    }
    break;
 800ed6a:	e004      	b.n	800ed76 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fcac 	bl	800f6cc <USBD_CtlError>
    break;
 800ed74:	bf00      	nop
  }

  return ret;
 800ed76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	889b      	ldrh	r3, [r3, #4]
 800ed92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed9c:	2b20      	cmp	r3, #32
 800ed9e:	d004      	beq.n	800edaa <USBD_StdEPReq+0x2a>
 800eda0:	2b40      	cmp	r3, #64	; 0x40
 800eda2:	d002      	beq.n	800edaa <USBD_StdEPReq+0x2a>
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00a      	beq.n	800edbe <USBD_StdEPReq+0x3e>
 800eda8:	e135      	b.n	800f016 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	4798      	blx	r3
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]
    break;
 800edbc:	e130      	b.n	800f020 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	785b      	ldrb	r3, [r3, #1]
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d03e      	beq.n	800ee44 <USBD_StdEPReq+0xc4>
 800edc6:	2b03      	cmp	r3, #3
 800edc8:	d002      	beq.n	800edd0 <USBD_StdEPReq+0x50>
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d077      	beq.n	800eebe <USBD_StdEPReq+0x13e>
 800edce:	e11c      	b.n	800f00a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	d002      	beq.n	800ede0 <USBD_StdEPReq+0x60>
 800edda:	2b03      	cmp	r3, #3
 800eddc:	d015      	beq.n	800ee0a <USBD_StdEPReq+0x8a>
 800edde:	e02b      	b.n	800ee38 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ede0:	7bbb      	ldrb	r3, [r7, #14]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00c      	beq.n	800ee00 <USBD_StdEPReq+0x80>
 800ede6:	7bbb      	ldrb	r3, [r7, #14]
 800ede8:	2b80      	cmp	r3, #128	; 0x80
 800edea:	d009      	beq.n	800ee00 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800edec:	7bbb      	ldrb	r3, [r7, #14]
 800edee:	4619      	mov	r1, r3
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f003 fc5f 	bl	80126b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800edf6:	2180      	movs	r1, #128	; 0x80
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f003 fc5b 	bl	80126b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800edfe:	e020      	b.n	800ee42 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fc62 	bl	800f6cc <USBD_CtlError>
        break;
 800ee08:	e01b      	b.n	800ee42 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	885b      	ldrh	r3, [r3, #2]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d10e      	bne.n	800ee30 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee12:	7bbb      	ldrb	r3, [r7, #14]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00b      	beq.n	800ee30 <USBD_StdEPReq+0xb0>
 800ee18:	7bbb      	ldrb	r3, [r7, #14]
 800ee1a:	2b80      	cmp	r3, #128	; 0x80
 800ee1c:	d008      	beq.n	800ee30 <USBD_StdEPReq+0xb0>
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	88db      	ldrh	r3, [r3, #6]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d104      	bne.n	800ee30 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee26:	7bbb      	ldrb	r3, [r7, #14]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f003 fc42 	bl	80126b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 fd16 	bl	800f862 <USBD_CtlSendStatus>

        break;
 800ee36:	e004      	b.n	800ee42 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fc46 	bl	800f6cc <USBD_CtlError>
        break;
 800ee40:	bf00      	nop
      }
      break;
 800ee42:	e0e7      	b.n	800f014 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee4a:	2b02      	cmp	r3, #2
 800ee4c:	d002      	beq.n	800ee54 <USBD_StdEPReq+0xd4>
 800ee4e:	2b03      	cmp	r3, #3
 800ee50:	d015      	beq.n	800ee7e <USBD_StdEPReq+0xfe>
 800ee52:	e02d      	b.n	800eeb0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee54:	7bbb      	ldrb	r3, [r7, #14]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00c      	beq.n	800ee74 <USBD_StdEPReq+0xf4>
 800ee5a:	7bbb      	ldrb	r3, [r7, #14]
 800ee5c:	2b80      	cmp	r3, #128	; 0x80
 800ee5e:	d009      	beq.n	800ee74 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee60:	7bbb      	ldrb	r3, [r7, #14]
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f003 fc25 	bl	80126b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee6a:	2180      	movs	r1, #128	; 0x80
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f003 fc21 	bl	80126b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee72:	e023      	b.n	800eebc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ee74:	6839      	ldr	r1, [r7, #0]
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 fc28 	bl	800f6cc <USBD_CtlError>
        break;
 800ee7c:	e01e      	b.n	800eebc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	885b      	ldrh	r3, [r3, #2]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d119      	bne.n	800eeba <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ee86:	7bbb      	ldrb	r3, [r7, #14]
 800ee88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d004      	beq.n	800ee9a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ee90:	7bbb      	ldrb	r3, [r7, #14]
 800ee92:	4619      	mov	r1, r3
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f003 fc2c 	bl	80126f2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 fce1 	bl	800f862 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	4798      	blx	r3
        }
        break;
 800eeae:	e004      	b.n	800eeba <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800eeb0:	6839      	ldr	r1, [r7, #0]
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fc0a 	bl	800f6cc <USBD_CtlError>
        break;
 800eeb8:	e000      	b.n	800eebc <USBD_StdEPReq+0x13c>
        break;
 800eeba:	bf00      	nop
      }
      break;
 800eebc:	e0aa      	b.n	800f014 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d002      	beq.n	800eece <USBD_StdEPReq+0x14e>
 800eec8:	2b03      	cmp	r3, #3
 800eeca:	d032      	beq.n	800ef32 <USBD_StdEPReq+0x1b2>
 800eecc:	e097      	b.n	800effe <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eece:	7bbb      	ldrb	r3, [r7, #14]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d007      	beq.n	800eee4 <USBD_StdEPReq+0x164>
 800eed4:	7bbb      	ldrb	r3, [r7, #14]
 800eed6:	2b80      	cmp	r3, #128	; 0x80
 800eed8:	d004      	beq.n	800eee4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800eeda:	6839      	ldr	r1, [r7, #0]
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 fbf5 	bl	800f6cc <USBD_CtlError>
          break;
 800eee2:	e091      	b.n	800f008 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	da0b      	bge.n	800ef04 <USBD_StdEPReq+0x184>
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eef2:	4613      	mov	r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4413      	add	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	3310      	adds	r3, #16
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	4413      	add	r3, r2
 800ef00:	3304      	adds	r3, #4
 800ef02:	e00b      	b.n	800ef1c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
 800ef06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	4413      	add	r3, r2
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	4413      	add	r3, r2
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	2200      	movs	r2, #0
 800ef22:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2202      	movs	r2, #2
 800ef28:	4619      	mov	r1, r3
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fc3f 	bl	800f7ae <USBD_CtlSendData>
        break;
 800ef30:	e06a      	b.n	800f008 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ef32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	da11      	bge.n	800ef5e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef3a:	7bbb      	ldrb	r3, [r7, #14]
 800ef3c:	f003 020f 	and.w	r2, r3, #15
 800ef40:	6879      	ldr	r1, [r7, #4]
 800ef42:	4613      	mov	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	440b      	add	r3, r1
 800ef4c:	3324      	adds	r3, #36	; 0x24
 800ef4e:	881b      	ldrh	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d117      	bne.n	800ef84 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fbb8 	bl	800f6cc <USBD_CtlError>
            break;
 800ef5c:	e054      	b.n	800f008 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ef5e:	7bbb      	ldrb	r3, [r7, #14]
 800ef60:	f003 020f 	and.w	r2, r3, #15
 800ef64:	6879      	ldr	r1, [r7, #4]
 800ef66:	4613      	mov	r3, r2
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	4413      	add	r3, r2
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	440b      	add	r3, r1
 800ef70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ef74:	881b      	ldrh	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d104      	bne.n	800ef84 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ef7a:	6839      	ldr	r1, [r7, #0]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fba5 	bl	800f6cc <USBD_CtlError>
            break;
 800ef82:	e041      	b.n	800f008 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	da0b      	bge.n	800efa4 <USBD_StdEPReq+0x224>
 800ef8c:	7bbb      	ldrb	r3, [r7, #14]
 800ef8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef92:	4613      	mov	r3, r2
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	4413      	add	r3, r2
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	3310      	adds	r3, #16
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	4413      	add	r3, r2
 800efa0:	3304      	adds	r3, #4
 800efa2:	e00b      	b.n	800efbc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800efa4:	7bbb      	ldrb	r3, [r7, #14]
 800efa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efaa:	4613      	mov	r3, r2
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4413      	add	r3, r2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	4413      	add	r3, r2
 800efba:	3304      	adds	r3, #4
 800efbc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800efbe:	7bbb      	ldrb	r3, [r7, #14]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <USBD_StdEPReq+0x24a>
 800efc4:	7bbb      	ldrb	r3, [r7, #14]
 800efc6:	2b80      	cmp	r3, #128	; 0x80
 800efc8:	d103      	bne.n	800efd2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	2200      	movs	r2, #0
 800efce:	601a      	str	r2, [r3, #0]
 800efd0:	e00e      	b.n	800eff0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800efd2:	7bbb      	ldrb	r3, [r7, #14]
 800efd4:	4619      	mov	r1, r3
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f003 fbaa 	bl	8012730 <USBD_LL_IsStallEP>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d003      	beq.n	800efea <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	2201      	movs	r2, #1
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	e002      	b.n	800eff0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	2200      	movs	r2, #0
 800efee:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	2202      	movs	r2, #2
 800eff4:	4619      	mov	r1, r3
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 fbd9 	bl	800f7ae <USBD_CtlSendData>
          break;
 800effc:	e004      	b.n	800f008 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fb63 	bl	800f6cc <USBD_CtlError>
        break;
 800f006:	bf00      	nop
      }
      break;
 800f008:	e004      	b.n	800f014 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f00a:	6839      	ldr	r1, [r7, #0]
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fb5d 	bl	800f6cc <USBD_CtlError>
      break;
 800f012:	bf00      	nop
    }
    break;
 800f014:	e004      	b.n	800f020 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f016:	6839      	ldr	r1, [r7, #0]
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 fb57 	bl	800f6cc <USBD_CtlError>
    break;
 800f01e:	bf00      	nop
  }

  return ret;
 800f020:	7bfb      	ldrb	r3, [r7, #15]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
	...

0800f02c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f036:	2300      	movs	r3, #0
 800f038:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f03a:	2300      	movs	r3, #0
 800f03c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f03e:	2300      	movs	r3, #0
 800f040:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	885b      	ldrh	r3, [r3, #2]
 800f046:	0a1b      	lsrs	r3, r3, #8
 800f048:	b29b      	uxth	r3, r3
 800f04a:	3b01      	subs	r3, #1
 800f04c:	2b0e      	cmp	r3, #14
 800f04e:	f200 8152 	bhi.w	800f2f6 <USBD_GetDescriptor+0x2ca>
 800f052:	a201      	add	r2, pc, #4	; (adr r2, 800f058 <USBD_GetDescriptor+0x2c>)
 800f054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f058:	0800f0c9 	.word	0x0800f0c9
 800f05c:	0800f0e1 	.word	0x0800f0e1
 800f060:	0800f121 	.word	0x0800f121
 800f064:	0800f2f7 	.word	0x0800f2f7
 800f068:	0800f2f7 	.word	0x0800f2f7
 800f06c:	0800f297 	.word	0x0800f297
 800f070:	0800f2c3 	.word	0x0800f2c3
 800f074:	0800f2f7 	.word	0x0800f2f7
 800f078:	0800f2f7 	.word	0x0800f2f7
 800f07c:	0800f2f7 	.word	0x0800f2f7
 800f080:	0800f2f7 	.word	0x0800f2f7
 800f084:	0800f2f7 	.word	0x0800f2f7
 800f088:	0800f2f7 	.word	0x0800f2f7
 800f08c:	0800f2f7 	.word	0x0800f2f7
 800f090:	0800f095 	.word	0x0800f095
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f09a:	69db      	ldr	r3, [r3, #28]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00b      	beq.n	800f0b8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0a6:	69db      	ldr	r3, [r3, #28]
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	7c12      	ldrb	r2, [r2, #16]
 800f0ac:	f107 0108 	add.w	r1, r7, #8
 800f0b0:	4610      	mov	r0, r2
 800f0b2:	4798      	blx	r3
 800f0b4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f0b6:	e126      	b.n	800f306 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f0b8:	6839      	ldr	r1, [r7, #0]
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fb06 	bl	800f6cc <USBD_CtlError>
      err++;
 800f0c0:	7afb      	ldrb	r3, [r7, #11]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	72fb      	strb	r3, [r7, #11]
    break;
 800f0c6:	e11e      	b.n	800f306 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	7c12      	ldrb	r2, [r2, #16]
 800f0d4:	f107 0108 	add.w	r1, r7, #8
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4798      	blx	r3
 800f0dc:	60f8      	str	r0, [r7, #12]
    break;
 800f0de:	e112      	b.n	800f306 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7c1b      	ldrb	r3, [r3, #16]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10d      	bne.n	800f104 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f0:	f107 0208 	add.w	r2, r7, #8
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	4798      	blx	r3
 800f0f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	2202      	movs	r2, #2
 800f100:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f102:	e100      	b.n	800f306 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10c:	f107 0208 	add.w	r2, r7, #8
 800f110:	4610      	mov	r0, r2
 800f112:	4798      	blx	r3
 800f114:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	3301      	adds	r3, #1
 800f11a:	2202      	movs	r2, #2
 800f11c:	701a      	strb	r2, [r3, #0]
    break;
 800f11e:	e0f2      	b.n	800f306 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	885b      	ldrh	r3, [r3, #2]
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b05      	cmp	r3, #5
 800f128:	f200 80ac 	bhi.w	800f284 <USBD_GetDescriptor+0x258>
 800f12c:	a201      	add	r2, pc, #4	; (adr r2, 800f134 <USBD_GetDescriptor+0x108>)
 800f12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f132:	bf00      	nop
 800f134:	0800f14d 	.word	0x0800f14d
 800f138:	0800f181 	.word	0x0800f181
 800f13c:	0800f1b5 	.word	0x0800f1b5
 800f140:	0800f1e9 	.word	0x0800f1e9
 800f144:	0800f21d 	.word	0x0800f21d
 800f148:	0800f251 	.word	0x0800f251
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00b      	beq.n	800f170 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	7c12      	ldrb	r2, [r2, #16]
 800f164:	f107 0108 	add.w	r1, r7, #8
 800f168:	4610      	mov	r0, r2
 800f16a:	4798      	blx	r3
 800f16c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f16e:	e091      	b.n	800f294 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 faaa 	bl	800f6cc <USBD_CtlError>
        err++;
 800f178:	7afb      	ldrb	r3, [r7, #11]
 800f17a:	3301      	adds	r3, #1
 800f17c:	72fb      	strb	r3, [r7, #11]
      break;
 800f17e:	e089      	b.n	800f294 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00b      	beq.n	800f1a4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	7c12      	ldrb	r2, [r2, #16]
 800f198:	f107 0108 	add.w	r1, r7, #8
 800f19c:	4610      	mov	r0, r2
 800f19e:	4798      	blx	r3
 800f1a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1a2:	e077      	b.n	800f294 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f1a4:	6839      	ldr	r1, [r7, #0]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 fa90 	bl	800f6cc <USBD_CtlError>
        err++;
 800f1ac:	7afb      	ldrb	r3, [r7, #11]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	72fb      	strb	r3, [r7, #11]
      break;
 800f1b2:	e06f      	b.n	800f294 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00b      	beq.n	800f1d8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	7c12      	ldrb	r2, [r2, #16]
 800f1cc:	f107 0108 	add.w	r1, r7, #8
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	4798      	blx	r3
 800f1d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1d6:	e05d      	b.n	800f294 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fa76 	bl	800f6cc <USBD_CtlError>
        err++;
 800f1e0:	7afb      	ldrb	r3, [r7, #11]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	72fb      	strb	r3, [r7, #11]
      break;
 800f1e6:	e055      	b.n	800f294 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ee:	691b      	ldr	r3, [r3, #16]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00b      	beq.n	800f20c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1fa:	691b      	ldr	r3, [r3, #16]
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	7c12      	ldrb	r2, [r2, #16]
 800f200:	f107 0108 	add.w	r1, r7, #8
 800f204:	4610      	mov	r0, r2
 800f206:	4798      	blx	r3
 800f208:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f20a:	e043      	b.n	800f294 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f20c:	6839      	ldr	r1, [r7, #0]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fa5c 	bl	800f6cc <USBD_CtlError>
        err++;
 800f214:	7afb      	ldrb	r3, [r7, #11]
 800f216:	3301      	adds	r3, #1
 800f218:	72fb      	strb	r3, [r7, #11]
      break;
 800f21a:	e03b      	b.n	800f294 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	7c12      	ldrb	r2, [r2, #16]
 800f234:	f107 0108 	add.w	r1, r7, #8
 800f238:	4610      	mov	r0, r2
 800f23a:	4798      	blx	r3
 800f23c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f23e:	e029      	b.n	800f294 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f240:	6839      	ldr	r1, [r7, #0]
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fa42 	bl	800f6cc <USBD_CtlError>
        err++;
 800f248:	7afb      	ldrb	r3, [r7, #11]
 800f24a:	3301      	adds	r3, #1
 800f24c:	72fb      	strb	r3, [r7, #11]
      break;
 800f24e:	e021      	b.n	800f294 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00b      	beq.n	800f274 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	7c12      	ldrb	r2, [r2, #16]
 800f268:	f107 0108 	add.w	r1, r7, #8
 800f26c:	4610      	mov	r0, r2
 800f26e:	4798      	blx	r3
 800f270:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f272:	e00f      	b.n	800f294 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fa28 	bl	800f6cc <USBD_CtlError>
        err++;
 800f27c:	7afb      	ldrb	r3, [r7, #11]
 800f27e:	3301      	adds	r3, #1
 800f280:	72fb      	strb	r3, [r7, #11]
      break;
 800f282:	e007      	b.n	800f294 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 fa20 	bl	800f6cc <USBD_CtlError>
      err++;
 800f28c:	7afb      	ldrb	r3, [r7, #11]
 800f28e:	3301      	adds	r3, #1
 800f290:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f292:	bf00      	nop
    }
    break;
 800f294:	e037      	b.n	800f306 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	7c1b      	ldrb	r3, [r3, #16]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d109      	bne.n	800f2b2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2a6:	f107 0208 	add.w	r2, r7, #8
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	4798      	blx	r3
 800f2ae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f2b0:	e029      	b.n	800f306 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fa09 	bl	800f6cc <USBD_CtlError>
      err++;
 800f2ba:	7afb      	ldrb	r3, [r7, #11]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	72fb      	strb	r3, [r7, #11]
    break;
 800f2c0:	e021      	b.n	800f306 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	7c1b      	ldrb	r3, [r3, #16]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10d      	bne.n	800f2e6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d2:	f107 0208 	add.w	r2, r7, #8
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	4798      	blx	r3
 800f2da:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	2207      	movs	r2, #7
 800f2e2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f2e4:	e00f      	b.n	800f306 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f9ef 	bl	800f6cc <USBD_CtlError>
      err++;
 800f2ee:	7afb      	ldrb	r3, [r7, #11]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	72fb      	strb	r3, [r7, #11]
    break;
 800f2f4:	e007      	b.n	800f306 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 f9e7 	bl	800f6cc <USBD_CtlError>
    err++;
 800f2fe:	7afb      	ldrb	r3, [r7, #11]
 800f300:	3301      	adds	r3, #1
 800f302:	72fb      	strb	r3, [r7, #11]
    break;
 800f304:	bf00      	nop
  }

  if (err != 0U)
 800f306:	7afb      	ldrb	r3, [r7, #11]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d11e      	bne.n	800f34a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	88db      	ldrh	r3, [r3, #6]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d016      	beq.n	800f342 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f314:	893b      	ldrh	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00e      	beq.n	800f338 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	88da      	ldrh	r2, [r3, #6]
 800f31e:	893b      	ldrh	r3, [r7, #8]
 800f320:	4293      	cmp	r3, r2
 800f322:	bf28      	it	cs
 800f324:	4613      	movcs	r3, r2
 800f326:	b29b      	uxth	r3, r3
 800f328:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f32a:	893b      	ldrh	r3, [r7, #8]
 800f32c:	461a      	mov	r2, r3
 800f32e:	68f9      	ldr	r1, [r7, #12]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 fa3c 	bl	800f7ae <USBD_CtlSendData>
 800f336:	e009      	b.n	800f34c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 f9c6 	bl	800f6cc <USBD_CtlError>
 800f340:	e004      	b.n	800f34c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fa8d 	bl	800f862 <USBD_CtlSendStatus>
 800f348:	e000      	b.n	800f34c <USBD_GetDescriptor+0x320>
    return;
 800f34a:	bf00      	nop
    }
  }
}
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop

0800f354 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	889b      	ldrh	r3, [r3, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d130      	bne.n	800f3c8 <USBD_SetAddress+0x74>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	88db      	ldrh	r3, [r3, #6]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d12c      	bne.n	800f3c8 <USBD_SetAddress+0x74>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	885b      	ldrh	r3, [r3, #2]
 800f372:	2b7f      	cmp	r3, #127	; 0x7f
 800f374:	d828      	bhi.n	800f3c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	885b      	ldrh	r3, [r3, #2]
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f388:	2b03      	cmp	r3, #3
 800f38a:	d104      	bne.n	800f396 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f99c 	bl	800f6cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f394:	e01c      	b.n	800f3d0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	7bfa      	ldrb	r2, [r7, #15]
 800f39a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f39e:	7bfb      	ldrb	r3, [r7, #15]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f003 f9f0 	bl	8012788 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fa5a 	bl	800f862 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d004      	beq.n	800f3be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2202      	movs	r2, #2
 800f3b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3bc:	e008      	b.n	800f3d0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c6:	e003      	b.n	800f3d0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f97e 	bl	800f6cc <USBD_CtlError>
  }
}
 800f3d0:	bf00      	nop
 800f3d2:	3710      	adds	r7, #16
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	885b      	ldrh	r3, [r3, #2]
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	4b4b      	ldr	r3, [pc, #300]	; (800f51c <USBD_SetConfig+0x144>)
 800f3ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f3f0:	4b4a      	ldr	r3, [pc, #296]	; (800f51c <USBD_SetConfig+0x144>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d905      	bls.n	800f404 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f966 	bl	800f6cc <USBD_CtlError>
    return USBD_FAIL;
 800f400:	2303      	movs	r3, #3
 800f402:	e087      	b.n	800f514 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d002      	beq.n	800f414 <USBD_SetConfig+0x3c>
 800f40e:	2b03      	cmp	r3, #3
 800f410:	d025      	beq.n	800f45e <USBD_SetConfig+0x86>
 800f412:	e071      	b.n	800f4f8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f414:	4b41      	ldr	r3, [pc, #260]	; (800f51c <USBD_SetConfig+0x144>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01c      	beq.n	800f456 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f41c:	4b3f      	ldr	r3, [pc, #252]	; (800f51c <USBD_SetConfig+0x144>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	461a      	mov	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f426:	4b3d      	ldr	r3, [pc, #244]	; (800f51c <USBD_SetConfig+0x144>)
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff f97d 	bl	800e72c <USBD_SetClassConfig>
 800f432:	4603      	mov	r3, r0
 800f434:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d004      	beq.n	800f446 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f43c:	6839      	ldr	r1, [r7, #0]
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 f944 	bl	800f6cc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f444:	e065      	b.n	800f512 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f000 fa0b 	bl	800f862 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2203      	movs	r2, #3
 800f450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f454:	e05d      	b.n	800f512 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fa03 	bl	800f862 <USBD_CtlSendStatus>
    break;
 800f45c:	e059      	b.n	800f512 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f45e:	4b2f      	ldr	r3, [pc, #188]	; (800f51c <USBD_SetConfig+0x144>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d112      	bne.n	800f48c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2202      	movs	r2, #2
 800f46a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f46e:	4b2b      	ldr	r3, [pc, #172]	; (800f51c <USBD_SetConfig+0x144>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	461a      	mov	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f478:	4b28      	ldr	r3, [pc, #160]	; (800f51c <USBD_SetConfig+0x144>)
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	4619      	mov	r1, r3
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7ff f970 	bl	800e764 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 f9ec 	bl	800f862 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f48a:	e042      	b.n	800f512 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f48c:	4b23      	ldr	r3, [pc, #140]	; (800f51c <USBD_SetConfig+0x144>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	461a      	mov	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	429a      	cmp	r2, r3
 800f498:	d02a      	beq.n	800f4f0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7ff f95e 	bl	800e764 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f4a8:	4b1c      	ldr	r3, [pc, #112]	; (800f51c <USBD_SetConfig+0x144>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f4b2:	4b1a      	ldr	r3, [pc, #104]	; (800f51c <USBD_SetConfig+0x144>)
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff f937 	bl	800e72c <USBD_SetClassConfig>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00f      	beq.n	800f4e8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f8fe 	bl	800f6cc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff f943 	bl	800e764 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2202      	movs	r2, #2
 800f4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f4e6:	e014      	b.n	800f512 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 f9ba 	bl	800f862 <USBD_CtlSendStatus>
    break;
 800f4ee:	e010      	b.n	800f512 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 f9b6 	bl	800f862 <USBD_CtlSendStatus>
    break;
 800f4f6:	e00c      	b.n	800f512 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 f8e6 	bl	800f6cc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f500:	4b06      	ldr	r3, [pc, #24]	; (800f51c <USBD_SetConfig+0x144>)
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	4619      	mov	r1, r3
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff f92c 	bl	800e764 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f50c:	2303      	movs	r3, #3
 800f50e:	73fb      	strb	r3, [r7, #15]
    break;
 800f510:	bf00      	nop
  }

  return ret;
 800f512:	7bfb      	ldrb	r3, [r7, #15]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20000889 	.word	0x20000889

0800f520 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	88db      	ldrh	r3, [r3, #6]
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d004      	beq.n	800f53c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f532:	6839      	ldr	r1, [r7, #0]
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 f8c9 	bl	800f6cc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f53a:	e021      	b.n	800f580 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f542:	2b01      	cmp	r3, #1
 800f544:	db17      	blt.n	800f576 <USBD_GetConfig+0x56>
 800f546:	2b02      	cmp	r3, #2
 800f548:	dd02      	ble.n	800f550 <USBD_GetConfig+0x30>
 800f54a:	2b03      	cmp	r3, #3
 800f54c:	d00b      	beq.n	800f566 <USBD_GetConfig+0x46>
 800f54e:	e012      	b.n	800f576 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	3308      	adds	r3, #8
 800f55a:	2201      	movs	r2, #1
 800f55c:	4619      	mov	r1, r3
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 f925 	bl	800f7ae <USBD_CtlSendData>
      break;
 800f564:	e00c      	b.n	800f580 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3304      	adds	r3, #4
 800f56a:	2201      	movs	r2, #1
 800f56c:	4619      	mov	r1, r3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f91d 	bl	800f7ae <USBD_CtlSendData>
      break;
 800f574:	e004      	b.n	800f580 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f576:	6839      	ldr	r1, [r7, #0]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 f8a7 	bl	800f6cc <USBD_CtlError>
      break;
 800f57e:	bf00      	nop
}
 800f580:	bf00      	nop
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f598:	3b01      	subs	r3, #1
 800f59a:	2b02      	cmp	r3, #2
 800f59c:	d81e      	bhi.n	800f5dc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	88db      	ldrh	r3, [r3, #6]
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	d004      	beq.n	800f5b0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 f88f 	bl	800f6cc <USBD_CtlError>
      break;
 800f5ae:	e01a      	b.n	800f5e6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d005      	beq.n	800f5cc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	f043 0202 	orr.w	r2, r3, #2
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	330c      	adds	r3, #12
 800f5d0:	2202      	movs	r2, #2
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f8ea 	bl	800f7ae <USBD_CtlSendData>
    break;
 800f5da:	e004      	b.n	800f5e6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f5dc:	6839      	ldr	r1, [r7, #0]
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f874 	bl	800f6cc <USBD_CtlError>
    break;
 800f5e4:	bf00      	nop
  }
}
 800f5e6:	bf00      	nop
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b082      	sub	sp, #8
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	885b      	ldrh	r3, [r3, #2]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d106      	bne.n	800f60e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2201      	movs	r2, #1
 800f604:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 f92a 	bl	800f862 <USBD_CtlSendStatus>
  }
}
 800f60e:	bf00      	nop
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b082      	sub	sp, #8
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
 800f61e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f626:	3b01      	subs	r3, #1
 800f628:	2b02      	cmp	r3, #2
 800f62a:	d80b      	bhi.n	800f644 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	885b      	ldrh	r3, [r3, #2]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d10c      	bne.n	800f64e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 f910 	bl	800f862 <USBD_CtlSendStatus>
      }
      break;
 800f642:	e004      	b.n	800f64e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f644:	6839      	ldr	r1, [r7, #0]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 f840 	bl	800f6cc <USBD_CtlError>
      break;
 800f64c:	e000      	b.n	800f650 <USBD_ClrFeature+0x3a>
      break;
 800f64e:	bf00      	nop
  }
}
 800f650:	bf00      	nop
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	781a      	ldrb	r2, [r3, #0]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3301      	adds	r3, #1
 800f672:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	781a      	ldrb	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	3301      	adds	r3, #1
 800f680:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f7ff faa9 	bl	800ebda <SWAPBYTE>
 800f688:	4603      	mov	r3, r0
 800f68a:	461a      	mov	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	3301      	adds	r3, #1
 800f694:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	3301      	adds	r3, #1
 800f69a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f7ff fa9c 	bl	800ebda <SWAPBYTE>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f7ff fa8f 	bl	800ebda <SWAPBYTE>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	461a      	mov	r2, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	80da      	strh	r2, [r3, #6]
}
 800f6c4:	bf00      	nop
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6d6:	2180      	movs	r1, #128	; 0x80
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f002 ffeb 	bl	80126b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f6de:	2100      	movs	r1, #0
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f002 ffe7 	bl	80126b4 <USBD_LL_StallEP>
}
 800f6e6:	bf00      	nop
 800f6e8:	3708      	adds	r7, #8
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b086      	sub	sp, #24
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	60f8      	str	r0, [r7, #12]
 800f6f6:	60b9      	str	r1, [r7, #8]
 800f6f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d036      	beq.n	800f772 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f708:	6938      	ldr	r0, [r7, #16]
 800f70a:	f000 f836 	bl	800f77a <USBD_GetLen>
 800f70e:	4603      	mov	r3, r0
 800f710:	3301      	adds	r3, #1
 800f712:	b29b      	uxth	r3, r3
 800f714:	005b      	lsls	r3, r3, #1
 800f716:	b29a      	uxth	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f71c:	7dfb      	ldrb	r3, [r7, #23]
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	4413      	add	r3, r2
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	7812      	ldrb	r2, [r2, #0]
 800f726:	701a      	strb	r2, [r3, #0]
  idx++;
 800f728:	7dfb      	ldrb	r3, [r7, #23]
 800f72a:	3301      	adds	r3, #1
 800f72c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f72e:	7dfb      	ldrb	r3, [r7, #23]
 800f730:	68ba      	ldr	r2, [r7, #8]
 800f732:	4413      	add	r3, r2
 800f734:	2203      	movs	r2, #3
 800f736:	701a      	strb	r2, [r3, #0]
  idx++;
 800f738:	7dfb      	ldrb	r3, [r7, #23]
 800f73a:	3301      	adds	r3, #1
 800f73c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f73e:	e013      	b.n	800f768 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f740:	7dfb      	ldrb	r3, [r7, #23]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	4413      	add	r3, r2
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	7812      	ldrb	r2, [r2, #0]
 800f74a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	3301      	adds	r3, #1
 800f750:	613b      	str	r3, [r7, #16]
    idx++;
 800f752:	7dfb      	ldrb	r3, [r7, #23]
 800f754:	3301      	adds	r3, #1
 800f756:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f758:	7dfb      	ldrb	r3, [r7, #23]
 800f75a:	68ba      	ldr	r2, [r7, #8]
 800f75c:	4413      	add	r3, r2
 800f75e:	2200      	movs	r2, #0
 800f760:	701a      	strb	r2, [r3, #0]
    idx++;
 800f762:	7dfb      	ldrb	r3, [r7, #23]
 800f764:	3301      	adds	r3, #1
 800f766:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1e7      	bne.n	800f740 <USBD_GetString+0x52>
 800f770:	e000      	b.n	800f774 <USBD_GetString+0x86>
    return;
 800f772:	bf00      	nop
  }
}
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f77a:	b480      	push	{r7}
 800f77c:	b085      	sub	sp, #20
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f782:	2300      	movs	r3, #0
 800f784:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f78a:	e005      	b.n	800f798 <USBD_GetLen+0x1e>
  {
    len++;
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	3301      	adds	r3, #1
 800f790:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	3301      	adds	r3, #1
 800f796:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1f5      	bne.n	800f78c <USBD_GetLen+0x12>
  }

  return len;
 800f7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3714      	adds	r7, #20
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b084      	sub	sp, #16
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	60f8      	str	r0, [r7, #12]
 800f7b6:	60b9      	str	r1, [r7, #8]
 800f7b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2202      	movs	r2, #2
 800f7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f002 fff6 	bl	80127c6 <USBD_LL_Transmit>

  return USBD_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	68ba      	ldr	r2, [r7, #8]
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f002 ffe5 	bl	80127c6 <USBD_LL_Transmit>

  return USBD_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b084      	sub	sp, #16
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	60f8      	str	r0, [r7, #12]
 800f80e:	60b9      	str	r1, [r7, #8]
 800f810:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2203      	movs	r2, #3
 800f816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	2100      	movs	r1, #0
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f002 ffe9 	bl	8012808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	2100      	movs	r1, #0
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f002 ffd8 	bl	8012808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2204      	movs	r2, #4
 800f86e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f872:	2300      	movs	r3, #0
 800f874:	2200      	movs	r2, #0
 800f876:	2100      	movs	r1, #0
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f002 ffa4 	bl	80127c6 <USBD_LL_Transmit>

  return USBD_OK;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2205      	movs	r2, #5
 800f894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f898:	2300      	movs	r3, #0
 800f89a:	2200      	movs	r2, #0
 800f89c:	2100      	movs	r1, #0
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f002 ffb2 	bl	8012808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
	...

0800f8b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b087      	sub	sp, #28
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f8c6:	4b1f      	ldr	r3, [pc, #124]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f8c8:	7a5b      	ldrb	r3, [r3, #9]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d131      	bne.n	800f934 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f8d0:	4b1c      	ldr	r3, [pc, #112]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f8d2:	7a5b      	ldrb	r3, [r3, #9]
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	4b1a      	ldr	r3, [pc, #104]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f8da:	2100      	movs	r1, #0
 800f8dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f8de:	4b19      	ldr	r3, [pc, #100]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f8e0:	7a5b      	ldrb	r3, [r3, #9]
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	4a17      	ldr	r2, [pc, #92]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	4413      	add	r3, r2
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f8ee:	4b15      	ldr	r3, [pc, #84]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f8f0:	7a5b      	ldrb	r3, [r3, #9]
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	4b13      	ldr	r3, [pc, #76]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f8f8:	4413      	add	r3, r2
 800f8fa:	79fa      	ldrb	r2, [r7, #7]
 800f8fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f8fe:	4b11      	ldr	r3, [pc, #68]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f900:	7a5b      	ldrb	r3, [r3, #9]
 800f902:	b2db      	uxtb	r3, r3
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	b2d1      	uxtb	r1, r2
 800f908:	4a0e      	ldr	r2, [pc, #56]	; (800f944 <FATFS_LinkDriverEx+0x94>)
 800f90a:	7251      	strb	r1, [r2, #9]
 800f90c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f90e:	7dbb      	ldrb	r3, [r7, #22]
 800f910:	3330      	adds	r3, #48	; 0x30
 800f912:	b2da      	uxtb	r2, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	3301      	adds	r3, #1
 800f91c:	223a      	movs	r2, #58	; 0x3a
 800f91e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	3302      	adds	r3, #2
 800f924:	222f      	movs	r2, #47	; 0x2f
 800f926:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	3303      	adds	r3, #3
 800f92c:	2200      	movs	r2, #0
 800f92e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f930:	2300      	movs	r3, #0
 800f932:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f934:	7dfb      	ldrb	r3, [r7, #23]
}
 800f936:	4618      	mov	r0, r3
 800f938:	371c      	adds	r7, #28
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	2000088c 	.word	0x2000088c

0800f948 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f952:	2200      	movs	r2, #0
 800f954:	6839      	ldr	r1, [r7, #0]
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7ff ffaa 	bl	800f8b0 <FATFS_LinkDriverEx>
 800f95c:	4603      	mov	r3, r0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f966:	b480      	push	{r7}
 800f968:	b085      	sub	sp, #20
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	4603      	mov	r3, r0
 800f96e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f970:	2300      	movs	r3, #0
 800f972:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f978:	2b84      	cmp	r3, #132	; 0x84
 800f97a:	d005      	beq.n	800f988 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f97c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	4413      	add	r3, r2
 800f984:	3303      	adds	r3, #3
 800f986:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f988:	68fb      	ldr	r3, [r7, #12]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3714      	adds	r7, #20
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f996:	b480      	push	{r7}
 800f998:	b083      	sub	sp, #12
 800f99a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f99c:	f3ef 8305 	mrs	r3, IPSR
 800f9a0:	607b      	str	r3, [r7, #4]
  return(result);
 800f9a2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bf14      	ite	ne
 800f9a8:	2301      	movne	r3, #1
 800f9aa:	2300      	moveq	r3, #0
 800f9ac:	b2db      	uxtb	r3, r3
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	370c      	adds	r7, #12
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr

0800f9ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f9be:	f001 f927 	bl	8010c10 <vTaskStartScheduler>
  
  return osOK;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f9cc:	f7ff ffe3 	bl	800f996 <inHandlerMode>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d003      	beq.n	800f9de <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f9d6:	f001 fa33 	bl	8010e40 <xTaskGetTickCountFromISR>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	e002      	b.n	800f9e4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f9de:	f001 fa1f 	bl	8010e20 <xTaskGetTickCount>
 800f9e2:	4603      	mov	r3, r0
  }
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ea:	b089      	sub	sp, #36	; 0x24
 800f9ec:	af04      	add	r7, sp, #16
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d020      	beq.n	800fa3c <osThreadCreate+0x54>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	699b      	ldr	r3, [r3, #24]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d01c      	beq.n	800fa3c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	685c      	ldr	r4, [r3, #4]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681d      	ldr	r5, [r3, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	691e      	ldr	r6, [r3, #16]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff ffa6 	bl	800f966 <makeFreeRtosPriority>
 800fa1a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	695b      	ldr	r3, [r3, #20]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa24:	9202      	str	r2, [sp, #8]
 800fa26:	9301      	str	r3, [sp, #4]
 800fa28:	9100      	str	r1, [sp, #0]
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	4632      	mov	r2, r6
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4620      	mov	r0, r4
 800fa32:	f000 ff2a 	bl	801088a <xTaskCreateStatic>
 800fa36:	4603      	mov	r3, r0
 800fa38:	60fb      	str	r3, [r7, #12]
 800fa3a:	e01c      	b.n	800fa76 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685c      	ldr	r4, [r3, #4]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa48:	b29e      	uxth	r6, r3
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7ff ff88 	bl	800f966 <makeFreeRtosPriority>
 800fa56:	4602      	mov	r2, r0
 800fa58:	f107 030c 	add.w	r3, r7, #12
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	9200      	str	r2, [sp, #0]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	4632      	mov	r2, r6
 800fa64:	4629      	mov	r1, r5
 800fa66:	4620      	mov	r0, r4
 800fa68:	f000 ff69 	bl	801093e <xTaskCreate>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d001      	beq.n	800fa76 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fa72:	2300      	movs	r3, #0
 800fa74:	e000      	b.n	800fa78 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fa76:	68fb      	ldr	r3, [r7, #12]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa80 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d001      	beq.n	800fa96 <osDelay+0x16>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	e000      	b.n	800fa98 <osDelay+0x18>
 800fa96:	2301      	movs	r3, #1
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f001 f885 	bl	8010ba8 <vTaskDelay>
  
  return osOK;
 800fa9e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800faa8:	b590      	push	{r4, r7, lr}
 800faaa:	b085      	sub	sp, #20
 800faac:	af02      	add	r7, sp, #8
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d012      	beq.n	800fae0 <osMessageCreate+0x38>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d00e      	beq.n	800fae0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6818      	ldr	r0, [r3, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6859      	ldr	r1, [r3, #4]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	689a      	ldr	r2, [r3, #8]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	68dc      	ldr	r4, [r3, #12]
 800fad2:	2300      	movs	r3, #0
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	4623      	mov	r3, r4
 800fad8:	f000 f9ec 	bl	800feb4 <xQueueGenericCreateStatic>
 800fadc:	4603      	mov	r3, r0
 800fade:	e008      	b.n	800faf2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6818      	ldr	r0, [r3, #0]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	4619      	mov	r1, r3
 800faec:	f000 fa55 	bl	800ff9a <xQueueGenericCreate>
 800faf0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	370c      	adds	r7, #12
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd90      	pop	{r4, r7, pc}
	...

0800fafc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d101      	bne.n	800fb1a <osMessagePut+0x1e>
    ticks = 1;
 800fb16:	2301      	movs	r3, #1
 800fb18:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fb1a:	f7ff ff3c 	bl	800f996 <inHandlerMode>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d018      	beq.n	800fb56 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fb24:	f107 0210 	add.w	r2, r7, #16
 800fb28:	f107 0108 	add.w	r1, r7, #8
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f000 fb8c 	bl	801024c <xQueueGenericSendFromISR>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d001      	beq.n	800fb3e <osMessagePut+0x42>
      return osErrorOS;
 800fb3a:	23ff      	movs	r3, #255	; 0xff
 800fb3c:	e018      	b.n	800fb70 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d014      	beq.n	800fb6e <osMessagePut+0x72>
 800fb44:	4b0c      	ldr	r3, [pc, #48]	; (800fb78 <osMessagePut+0x7c>)
 800fb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb4a:	601a      	str	r2, [r3, #0]
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	f3bf 8f6f 	isb	sy
 800fb54:	e00b      	b.n	800fb6e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fb56:	f107 0108 	add.w	r1, r7, #8
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	697a      	ldr	r2, [r7, #20]
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f000 fa7a 	bl	8010058 <xQueueGenericSend>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d001      	beq.n	800fb6e <osMessagePut+0x72>
      return osErrorOS;
 800fb6a:	23ff      	movs	r3, #255	; 0xff
 800fb6c:	e000      	b.n	800fb70 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3718      	adds	r7, #24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	e000ed04 	.word	0xe000ed04

0800fb7c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fb7c:	b590      	push	{r4, r7, lr}
 800fb7e:	b08b      	sub	sp, #44	; 0x2c
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d10a      	bne.n	800fbac <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fb96:	2380      	movs	r3, #128	; 0x80
 800fb98:	617b      	str	r3, [r7, #20]
    return event;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	461c      	mov	r4, r3
 800fb9e:	f107 0314 	add.w	r3, r7, #20
 800fba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fbaa:	e054      	b.n	800fc56 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fbac:	2300      	movs	r3, #0
 800fbae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbba:	d103      	bne.n	800fbc4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc0:	627b      	str	r3, [r7, #36]	; 0x24
 800fbc2:	e009      	b.n	800fbd8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d006      	beq.n	800fbd8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <osMessageGet+0x5c>
      ticks = 1;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fbd8:	f7ff fedd 	bl	800f996 <inHandlerMode>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d01c      	beq.n	800fc1c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fbe2:	f107 0220 	add.w	r2, r7, #32
 800fbe6:	f107 0314 	add.w	r3, r7, #20
 800fbea:	3304      	adds	r3, #4
 800fbec:	4619      	mov	r1, r3
 800fbee:	68b8      	ldr	r0, [r7, #8]
 800fbf0:	f000 fc9c 	bl	801052c <xQueueReceiveFromISR>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d102      	bne.n	800fc00 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fbfa:	2310      	movs	r3, #16
 800fbfc:	617b      	str	r3, [r7, #20]
 800fbfe:	e001      	b.n	800fc04 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fc04:	6a3b      	ldr	r3, [r7, #32]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d01d      	beq.n	800fc46 <osMessageGet+0xca>
 800fc0a:	4b15      	ldr	r3, [pc, #84]	; (800fc60 <osMessageGet+0xe4>)
 800fc0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	e014      	b.n	800fc46 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fc1c:	f107 0314 	add.w	r3, r7, #20
 800fc20:	3304      	adds	r3, #4
 800fc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc24:	4619      	mov	r1, r3
 800fc26:	68b8      	ldr	r0, [r7, #8]
 800fc28:	f000 fba4 	bl	8010374 <xQueueReceive>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d102      	bne.n	800fc38 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fc32:	2310      	movs	r3, #16
 800fc34:	617b      	str	r3, [r7, #20]
 800fc36:	e006      	b.n	800fc46 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d101      	bne.n	800fc42 <osMessageGet+0xc6>
 800fc3e:	2300      	movs	r3, #0
 800fc40:	e000      	b.n	800fc44 <osMessageGet+0xc8>
 800fc42:	2340      	movs	r3, #64	; 0x40
 800fc44:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	461c      	mov	r4, r3
 800fc4a:	f107 0314 	add.w	r3, r7, #20
 800fc4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	372c      	adds	r7, #44	; 0x2c
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd90      	pop	{r4, r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	e000ed04 	.word	0xe000ed04

0800fc64 <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 fcda 	bl	8010626 <uxQueueSpacesAvailable>
 800fc72:	4603      	mov	r3, r0
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f103 0208 	add.w	r2, r3, #8
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f04f 32ff 	mov.w	r2, #4294967295
 800fc94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f103 0208 	add.w	r2, r3, #8
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f103 0208 	add.w	r2, r3, #8
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2200      	movs	r2, #0
 800fcae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fcb0:	bf00      	nop
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fcca:	bf00      	nop
 800fccc:	370c      	adds	r7, #12
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcd6:	b480      	push	{r7}
 800fcd8:	b085      	sub	sp, #20
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
 800fcde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	689a      	ldr	r2, [r3, #8]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	683a      	ldr	r2, [r7, #0]
 800fcfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	683a      	ldr	r2, [r7, #0]
 800fd00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	1c5a      	adds	r2, r3, #1
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
}
 800fd12:	bf00      	nop
 800fd14:	3714      	adds	r7, #20
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr

0800fd1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd1e:	b480      	push	{r7}
 800fd20:	b085      	sub	sp, #20
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
 800fd26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd34:	d103      	bne.n	800fd3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	60fb      	str	r3, [r7, #12]
 800fd3c:	e00c      	b.n	800fd58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	3308      	adds	r3, #8
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e002      	b.n	800fd4c <vListInsert+0x2e>
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	68ba      	ldr	r2, [r7, #8]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d2f6      	bcs.n	800fd46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	601a      	str	r2, [r3, #0]
}
 800fd84:	bf00      	nop
 800fd86:	3714      	adds	r7, #20
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr

0800fd90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd90:	b480      	push	{r7}
 800fd92:	b085      	sub	sp, #20
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	691b      	ldr	r3, [r3, #16]
 800fd9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	6892      	ldr	r2, [r2, #8]
 800fda6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	6852      	ldr	r2, [r2, #4]
 800fdb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d103      	bne.n	800fdc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	689a      	ldr	r2, [r3, #8]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	1e5a      	subs	r2, r3, #1
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3714      	adds	r7, #20
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d109      	bne.n	800fe0c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	f383 8811 	msr	BASEPRI, r3
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	60bb      	str	r3, [r7, #8]
 800fe0a:	e7fe      	b.n	800fe0a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fe0c:	f001 fd46 	bl	801189c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe18:	68f9      	ldr	r1, [r7, #12]
 800fe1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe1c:	fb01 f303 	mul.w	r3, r1, r3
 800fe20:	441a      	add	r2, r3
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	68f9      	ldr	r1, [r7, #12]
 800fe40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe42:	fb01 f303 	mul.w	r3, r1, r3
 800fe46:	441a      	add	r2, r3
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	22ff      	movs	r2, #255	; 0xff
 800fe50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	22ff      	movs	r2, #255	; 0xff
 800fe58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d114      	bne.n	800fe8c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	691b      	ldr	r3, [r3, #16]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d01a      	beq.n	800fea0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	3310      	adds	r3, #16
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f001 f92e 	bl	80110d0 <xTaskRemoveFromEventList>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d012      	beq.n	800fea0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe7a:	4b0d      	ldr	r3, [pc, #52]	; (800feb0 <xQueueGenericReset+0xcc>)
 800fe7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe80:	601a      	str	r2, [r3, #0]
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	f3bf 8f6f 	isb	sy
 800fe8a:	e009      	b.n	800fea0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3310      	adds	r3, #16
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7ff fef3 	bl	800fc7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	3324      	adds	r3, #36	; 0x24
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff feee 	bl	800fc7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fea0:	f001 fd2a 	bl	80118f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fea4:	2301      	movs	r3, #1
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	e000ed04 	.word	0xe000ed04

0800feb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b08e      	sub	sp, #56	; 0x38
 800feb8:	af02      	add	r7, sp, #8
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	607a      	str	r2, [r7, #4]
 800fec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d109      	bne.n	800fedc <xQueueGenericCreateStatic+0x28>
 800fec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fecc:	f383 8811 	msr	BASEPRI, r3
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	62bb      	str	r3, [r7, #40]	; 0x28
 800feda:	e7fe      	b.n	800feda <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d109      	bne.n	800fef6 <xQueueGenericCreateStatic+0x42>
 800fee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	627b      	str	r3, [r7, #36]	; 0x24
 800fef4:	e7fe      	b.n	800fef4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <xQueueGenericCreateStatic+0x4e>
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <xQueueGenericCreateStatic+0x52>
 800ff02:	2301      	movs	r3, #1
 800ff04:	e000      	b.n	800ff08 <xQueueGenericCreateStatic+0x54>
 800ff06:	2300      	movs	r3, #0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d109      	bne.n	800ff20 <xQueueGenericCreateStatic+0x6c>
 800ff0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff10:	f383 8811 	msr	BASEPRI, r3
 800ff14:	f3bf 8f6f 	isb	sy
 800ff18:	f3bf 8f4f 	dsb	sy
 800ff1c:	623b      	str	r3, [r7, #32]
 800ff1e:	e7fe      	b.n	800ff1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d102      	bne.n	800ff2c <xQueueGenericCreateStatic+0x78>
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d101      	bne.n	800ff30 <xQueueGenericCreateStatic+0x7c>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e000      	b.n	800ff32 <xQueueGenericCreateStatic+0x7e>
 800ff30:	2300      	movs	r3, #0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d109      	bne.n	800ff4a <xQueueGenericCreateStatic+0x96>
 800ff36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	61fb      	str	r3, [r7, #28]
 800ff48:	e7fe      	b.n	800ff48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ff4a:	2348      	movs	r3, #72	; 0x48
 800ff4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	2b48      	cmp	r3, #72	; 0x48
 800ff52:	d009      	beq.n	800ff68 <xQueueGenericCreateStatic+0xb4>
 800ff54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff58:	f383 8811 	msr	BASEPRI, r3
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	61bb      	str	r3, [r7, #24]
 800ff66:	e7fe      	b.n	800ff66 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00d      	beq.n	800ff90 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff76:	2201      	movs	r2, #1
 800ff78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	4613      	mov	r3, r2
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	68b9      	ldr	r1, [r7, #8]
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f000 f844 	bl	8010018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3730      	adds	r7, #48	; 0x30
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b08a      	sub	sp, #40	; 0x28
 800ff9e:	af02      	add	r7, sp, #8
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	60b9      	str	r1, [r7, #8]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d109      	bne.n	800ffc2 <xQueueGenericCreate+0x28>
 800ffae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb2:	f383 8811 	msr	BASEPRI, r3
 800ffb6:	f3bf 8f6f 	isb	sy
 800ffba:	f3bf 8f4f 	dsb	sy
 800ffbe:	613b      	str	r3, [r7, #16]
 800ffc0:	e7fe      	b.n	800ffc0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d102      	bne.n	800ffce <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	61fb      	str	r3, [r7, #28]
 800ffcc:	e004      	b.n	800ffd8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	fb02 f303 	mul.w	r3, r2, r3
 800ffd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	3348      	adds	r3, #72	; 0x48
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f001 fd77 	bl	8011ad0 <pvPortMalloc>
 800ffe2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d011      	beq.n	801000e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	3348      	adds	r3, #72	; 0x48
 800fff2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fffc:	79fa      	ldrb	r2, [r7, #7]
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	4613      	mov	r3, r2
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	68b9      	ldr	r1, [r7, #8]
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f000 f805 	bl	8010018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801000e:	69bb      	ldr	r3, [r7, #24]
	}
 8010010:	4618      	mov	r0, r3
 8010012:	3720      	adds	r7, #32
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	607a      	str	r2, [r7, #4]
 8010024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d103      	bne.n	8010034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	69ba      	ldr	r2, [r7, #24]
 8010030:	601a      	str	r2, [r3, #0]
 8010032:	e002      	b.n	801003a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010046:	2101      	movs	r1, #1
 8010048:	69b8      	ldr	r0, [r7, #24]
 801004a:	f7ff fecb 	bl	800fde4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801004e:	bf00      	nop
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b08e      	sub	sp, #56	; 0x38
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
 8010064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010066:	2300      	movs	r3, #0
 8010068:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801006e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010070:	2b00      	cmp	r3, #0
 8010072:	d109      	bne.n	8010088 <xQueueGenericSend+0x30>
 8010074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010078:	f383 8811 	msr	BASEPRI, r3
 801007c:	f3bf 8f6f 	isb	sy
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	62bb      	str	r3, [r7, #40]	; 0x28
 8010086:	e7fe      	b.n	8010086 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d103      	bne.n	8010096 <xQueueGenericSend+0x3e>
 801008e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010092:	2b00      	cmp	r3, #0
 8010094:	d101      	bne.n	801009a <xQueueGenericSend+0x42>
 8010096:	2301      	movs	r3, #1
 8010098:	e000      	b.n	801009c <xQueueGenericSend+0x44>
 801009a:	2300      	movs	r3, #0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d109      	bne.n	80100b4 <xQueueGenericSend+0x5c>
 80100a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a4:	f383 8811 	msr	BASEPRI, r3
 80100a8:	f3bf 8f6f 	isb	sy
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
 80100b2:	e7fe      	b.n	80100b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	2b02      	cmp	r3, #2
 80100b8:	d103      	bne.n	80100c2 <xQueueGenericSend+0x6a>
 80100ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d101      	bne.n	80100c6 <xQueueGenericSend+0x6e>
 80100c2:	2301      	movs	r3, #1
 80100c4:	e000      	b.n	80100c8 <xQueueGenericSend+0x70>
 80100c6:	2300      	movs	r3, #0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d109      	bne.n	80100e0 <xQueueGenericSend+0x88>
 80100cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d0:	f383 8811 	msr	BASEPRI, r3
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	623b      	str	r3, [r7, #32]
 80100de:	e7fe      	b.n	80100de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100e0:	f001 f9ac 	bl	801143c <xTaskGetSchedulerState>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d102      	bne.n	80100f0 <xQueueGenericSend+0x98>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d101      	bne.n	80100f4 <xQueueGenericSend+0x9c>
 80100f0:	2301      	movs	r3, #1
 80100f2:	e000      	b.n	80100f6 <xQueueGenericSend+0x9e>
 80100f4:	2300      	movs	r3, #0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d109      	bne.n	801010e <xQueueGenericSend+0xb6>
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	61fb      	str	r3, [r7, #28]
 801010c:	e7fe      	b.n	801010c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801010e:	f001 fbc5 	bl	801189c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801011a:	429a      	cmp	r2, r3
 801011c:	d302      	bcc.n	8010124 <xQueueGenericSend+0xcc>
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	2b02      	cmp	r3, #2
 8010122:	d129      	bne.n	8010178 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010124:	683a      	ldr	r2, [r7, #0]
 8010126:	68b9      	ldr	r1, [r7, #8]
 8010128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801012a:	f000 fa9e 	bl	801066a <prvCopyDataToQueue>
 801012e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010134:	2b00      	cmp	r3, #0
 8010136:	d010      	beq.n	801015a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013a:	3324      	adds	r3, #36	; 0x24
 801013c:	4618      	mov	r0, r3
 801013e:	f000 ffc7 	bl	80110d0 <xTaskRemoveFromEventList>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d013      	beq.n	8010170 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010148:	4b3f      	ldr	r3, [pc, #252]	; (8010248 <xQueueGenericSend+0x1f0>)
 801014a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801014e:	601a      	str	r2, [r3, #0]
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	f3bf 8f6f 	isb	sy
 8010158:	e00a      	b.n	8010170 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801015a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015c:	2b00      	cmp	r3, #0
 801015e:	d007      	beq.n	8010170 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010160:	4b39      	ldr	r3, [pc, #228]	; (8010248 <xQueueGenericSend+0x1f0>)
 8010162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010166:	601a      	str	r2, [r3, #0]
 8010168:	f3bf 8f4f 	dsb	sy
 801016c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010170:	f001 fbc2 	bl	80118f8 <vPortExitCritical>
				return pdPASS;
 8010174:	2301      	movs	r3, #1
 8010176:	e063      	b.n	8010240 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d103      	bne.n	8010186 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801017e:	f001 fbbb 	bl	80118f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010182:	2300      	movs	r3, #0
 8010184:	e05c      	b.n	8010240 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010188:	2b00      	cmp	r3, #0
 801018a:	d106      	bne.n	801019a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801018c:	f107 0314 	add.w	r3, r7, #20
 8010190:	4618      	mov	r0, r3
 8010192:	f000 ffff 	bl	8011194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010196:	2301      	movs	r3, #1
 8010198:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801019a:	f001 fbad 	bl	80118f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801019e:	f000 fd95 	bl	8010ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101a2:	f001 fb7b 	bl	801189c <vPortEnterCritical>
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80101ac:	b25b      	sxtb	r3, r3
 80101ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b2:	d103      	bne.n	80101bc <xQueueGenericSend+0x164>
 80101b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b6:	2200      	movs	r2, #0
 80101b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101c2:	b25b      	sxtb	r3, r3
 80101c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c8:	d103      	bne.n	80101d2 <xQueueGenericSend+0x17a>
 80101ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101d2:	f001 fb91 	bl	80118f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101d6:	1d3a      	adds	r2, r7, #4
 80101d8:	f107 0314 	add.w	r3, r7, #20
 80101dc:	4611      	mov	r1, r2
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 ffee 	bl	80111c0 <xTaskCheckForTimeOut>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d124      	bne.n	8010234 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80101ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101ec:	f000 fb35 	bl	801085a <prvIsQueueFull>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d018      	beq.n	8010228 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	3310      	adds	r3, #16
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	4611      	mov	r1, r2
 80101fe:	4618      	mov	r0, r3
 8010200:	f000 ff42 	bl	8011088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010206:	f000 fac0 	bl	801078a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801020a:	f000 fd6d 	bl	8010ce8 <xTaskResumeAll>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	f47f af7c 	bne.w	801010e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010216:	4b0c      	ldr	r3, [pc, #48]	; (8010248 <xQueueGenericSend+0x1f0>)
 8010218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	e772      	b.n	801010e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801022a:	f000 faae 	bl	801078a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801022e:	f000 fd5b 	bl	8010ce8 <xTaskResumeAll>
 8010232:	e76c      	b.n	801010e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010236:	f000 faa8 	bl	801078a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801023a:	f000 fd55 	bl	8010ce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801023e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010240:	4618      	mov	r0, r3
 8010242:	3738      	adds	r7, #56	; 0x38
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	e000ed04 	.word	0xe000ed04

0801024c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b08e      	sub	sp, #56	; 0x38
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]
 8010258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010260:	2b00      	cmp	r3, #0
 8010262:	d109      	bne.n	8010278 <xQueueGenericSendFromISR+0x2c>
 8010264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010268:	f383 8811 	msr	BASEPRI, r3
 801026c:	f3bf 8f6f 	isb	sy
 8010270:	f3bf 8f4f 	dsb	sy
 8010274:	627b      	str	r3, [r7, #36]	; 0x24
 8010276:	e7fe      	b.n	8010276 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d103      	bne.n	8010286 <xQueueGenericSendFromISR+0x3a>
 801027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010282:	2b00      	cmp	r3, #0
 8010284:	d101      	bne.n	801028a <xQueueGenericSendFromISR+0x3e>
 8010286:	2301      	movs	r3, #1
 8010288:	e000      	b.n	801028c <xQueueGenericSendFromISR+0x40>
 801028a:	2300      	movs	r3, #0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d109      	bne.n	80102a4 <xQueueGenericSendFromISR+0x58>
 8010290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010294:	f383 8811 	msr	BASEPRI, r3
 8010298:	f3bf 8f6f 	isb	sy
 801029c:	f3bf 8f4f 	dsb	sy
 80102a0:	623b      	str	r3, [r7, #32]
 80102a2:	e7fe      	b.n	80102a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d103      	bne.n	80102b2 <xQueueGenericSendFromISR+0x66>
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d101      	bne.n	80102b6 <xQueueGenericSendFromISR+0x6a>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <xQueueGenericSendFromISR+0x6c>
 80102b6:	2300      	movs	r3, #0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d109      	bne.n	80102d0 <xQueueGenericSendFromISR+0x84>
 80102bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c0:	f383 8811 	msr	BASEPRI, r3
 80102c4:	f3bf 8f6f 	isb	sy
 80102c8:	f3bf 8f4f 	dsb	sy
 80102cc:	61fb      	str	r3, [r7, #28]
 80102ce:	e7fe      	b.n	80102ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102d0:	f001 fbc0 	bl	8011a54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80102d4:	f3ef 8211 	mrs	r2, BASEPRI
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	61ba      	str	r2, [r7, #24]
 80102ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80102ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80102f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d302      	bcc.n	8010302 <xQueueGenericSendFromISR+0xb6>
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	2b02      	cmp	r3, #2
 8010300:	d12c      	bne.n	801035c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801030c:	683a      	ldr	r2, [r7, #0]
 801030e:	68b9      	ldr	r1, [r7, #8]
 8010310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010312:	f000 f9aa 	bl	801066a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010316:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801031a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801031e:	d112      	bne.n	8010346 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010324:	2b00      	cmp	r3, #0
 8010326:	d016      	beq.n	8010356 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032a:	3324      	adds	r3, #36	; 0x24
 801032c:	4618      	mov	r0, r3
 801032e:	f000 fecf 	bl	80110d0 <xTaskRemoveFromEventList>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d00e      	beq.n	8010356 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00b      	beq.n	8010356 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2201      	movs	r2, #1
 8010342:	601a      	str	r2, [r3, #0]
 8010344:	e007      	b.n	8010356 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801034a:	3301      	adds	r3, #1
 801034c:	b2db      	uxtb	r3, r3
 801034e:	b25a      	sxtb	r2, r3
 8010350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010356:	2301      	movs	r3, #1
 8010358:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801035a:	e001      	b.n	8010360 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801035c:	2300      	movs	r3, #0
 801035e:	637b      	str	r3, [r7, #52]	; 0x34
 8010360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010362:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801036a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801036c:	4618      	mov	r0, r3
 801036e:	3738      	adds	r7, #56	; 0x38
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b08c      	sub	sp, #48	; 0x30
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010380:	2300      	movs	r3, #0
 8010382:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038a:	2b00      	cmp	r3, #0
 801038c:	d109      	bne.n	80103a2 <xQueueReceive+0x2e>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	623b      	str	r3, [r7, #32]
 80103a0:	e7fe      	b.n	80103a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d103      	bne.n	80103b0 <xQueueReceive+0x3c>
 80103a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d101      	bne.n	80103b4 <xQueueReceive+0x40>
 80103b0:	2301      	movs	r3, #1
 80103b2:	e000      	b.n	80103b6 <xQueueReceive+0x42>
 80103b4:	2300      	movs	r3, #0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d109      	bne.n	80103ce <xQueueReceive+0x5a>
 80103ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f3bf 8f6f 	isb	sy
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	61fb      	str	r3, [r7, #28]
 80103cc:	e7fe      	b.n	80103cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103ce:	f001 f835 	bl	801143c <xTaskGetSchedulerState>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <xQueueReceive+0x6a>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d101      	bne.n	80103e2 <xQueueReceive+0x6e>
 80103de:	2301      	movs	r3, #1
 80103e0:	e000      	b.n	80103e4 <xQueueReceive+0x70>
 80103e2:	2300      	movs	r3, #0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d109      	bne.n	80103fc <xQueueReceive+0x88>
 80103e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	61bb      	str	r3, [r7, #24]
 80103fa:	e7fe      	b.n	80103fa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103fc:	f001 fa4e 	bl	801189c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010404:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010408:	2b00      	cmp	r3, #0
 801040a:	d01f      	beq.n	801044c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801040c:	68b9      	ldr	r1, [r7, #8]
 801040e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010410:	f000 f995 	bl	801073e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	1e5a      	subs	r2, r3, #1
 8010418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801041c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041e:	691b      	ldr	r3, [r3, #16]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d00f      	beq.n	8010444 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010426:	3310      	adds	r3, #16
 8010428:	4618      	mov	r0, r3
 801042a:	f000 fe51 	bl	80110d0 <xTaskRemoveFromEventList>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d007      	beq.n	8010444 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010434:	4b3c      	ldr	r3, [pc, #240]	; (8010528 <xQueueReceive+0x1b4>)
 8010436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801043a:	601a      	str	r2, [r3, #0]
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010444:	f001 fa58 	bl	80118f8 <vPortExitCritical>
				return pdPASS;
 8010448:	2301      	movs	r3, #1
 801044a:	e069      	b.n	8010520 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d103      	bne.n	801045a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010452:	f001 fa51 	bl	80118f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010456:	2300      	movs	r3, #0
 8010458:	e062      	b.n	8010520 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045c:	2b00      	cmp	r3, #0
 801045e:	d106      	bne.n	801046e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010460:	f107 0310 	add.w	r3, r7, #16
 8010464:	4618      	mov	r0, r3
 8010466:	f000 fe95 	bl	8011194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801046a:	2301      	movs	r3, #1
 801046c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801046e:	f001 fa43 	bl	80118f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010472:	f000 fc2b 	bl	8010ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010476:	f001 fa11 	bl	801189c <vPortEnterCritical>
 801047a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010480:	b25b      	sxtb	r3, r3
 8010482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010486:	d103      	bne.n	8010490 <xQueueReceive+0x11c>
 8010488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048a:	2200      	movs	r2, #0
 801048c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010496:	b25b      	sxtb	r3, r3
 8010498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801049c:	d103      	bne.n	80104a6 <xQueueReceive+0x132>
 801049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a0:	2200      	movs	r2, #0
 80104a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104a6:	f001 fa27 	bl	80118f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104aa:	1d3a      	adds	r2, r7, #4
 80104ac:	f107 0310 	add.w	r3, r7, #16
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f000 fe84 	bl	80111c0 <xTaskCheckForTimeOut>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d123      	bne.n	8010506 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104c0:	f000 f9b5 	bl	801082e <prvIsQueueEmpty>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d017      	beq.n	80104fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104cc:	3324      	adds	r3, #36	; 0x24
 80104ce:	687a      	ldr	r2, [r7, #4]
 80104d0:	4611      	mov	r1, r2
 80104d2:	4618      	mov	r0, r3
 80104d4:	f000 fdd8 	bl	8011088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104da:	f000 f956 	bl	801078a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104de:	f000 fc03 	bl	8010ce8 <xTaskResumeAll>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d189      	bne.n	80103fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80104e8:	4b0f      	ldr	r3, [pc, #60]	; (8010528 <xQueueReceive+0x1b4>)
 80104ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ee:	601a      	str	r2, [r3, #0]
 80104f0:	f3bf 8f4f 	dsb	sy
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	e780      	b.n	80103fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104fc:	f000 f945 	bl	801078a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010500:	f000 fbf2 	bl	8010ce8 <xTaskResumeAll>
 8010504:	e77a      	b.n	80103fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010508:	f000 f93f 	bl	801078a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801050c:	f000 fbec 	bl	8010ce8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010512:	f000 f98c 	bl	801082e <prvIsQueueEmpty>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	f43f af6f 	beq.w	80103fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801051e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010520:	4618      	mov	r0, r3
 8010522:	3730      	adds	r7, #48	; 0x30
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	e000ed04 	.word	0xe000ed04

0801052c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b08e      	sub	sp, #56	; 0x38
 8010530:	af00      	add	r7, sp, #0
 8010532:	60f8      	str	r0, [r7, #12]
 8010534:	60b9      	str	r1, [r7, #8]
 8010536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053e:	2b00      	cmp	r3, #0
 8010540:	d109      	bne.n	8010556 <xQueueReceiveFromISR+0x2a>
 8010542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	623b      	str	r3, [r7, #32]
 8010554:	e7fe      	b.n	8010554 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d103      	bne.n	8010564 <xQueueReceiveFromISR+0x38>
 801055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <xQueueReceiveFromISR+0x3c>
 8010564:	2301      	movs	r3, #1
 8010566:	e000      	b.n	801056a <xQueueReceiveFromISR+0x3e>
 8010568:	2300      	movs	r3, #0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d109      	bne.n	8010582 <xQueueReceiveFromISR+0x56>
 801056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010572:	f383 8811 	msr	BASEPRI, r3
 8010576:	f3bf 8f6f 	isb	sy
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	61fb      	str	r3, [r7, #28]
 8010580:	e7fe      	b.n	8010580 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010582:	f001 fa67 	bl	8011a54 <vPortValidateInterruptPriority>
	__asm volatile
 8010586:	f3ef 8211 	mrs	r2, BASEPRI
 801058a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058e:	f383 8811 	msr	BASEPRI, r3
 8010592:	f3bf 8f6f 	isb	sy
 8010596:	f3bf 8f4f 	dsb	sy
 801059a:	61ba      	str	r2, [r7, #24]
 801059c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801059e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80105a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d02f      	beq.n	801060e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105b8:	68b9      	ldr	r1, [r7, #8]
 80105ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105bc:	f000 f8bf 	bl	801073e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80105c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c2:	1e5a      	subs	r2, r3, #1
 80105c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80105c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80105cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d0:	d112      	bne.n	80105f8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d016      	beq.n	8010608 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105dc:	3310      	adds	r3, #16
 80105de:	4618      	mov	r0, r3
 80105e0:	f000 fd76 	bl	80110d0 <xTaskRemoveFromEventList>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00e      	beq.n	8010608 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00b      	beq.n	8010608 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2201      	movs	r2, #1
 80105f4:	601a      	str	r2, [r3, #0]
 80105f6:	e007      	b.n	8010608 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80105f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105fc:	3301      	adds	r3, #1
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	b25a      	sxtb	r2, r3
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010608:	2301      	movs	r3, #1
 801060a:	637b      	str	r3, [r7, #52]	; 0x34
 801060c:	e001      	b.n	8010612 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801060e:	2300      	movs	r3, #0
 8010610:	637b      	str	r3, [r7, #52]	; 0x34
 8010612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010614:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801061c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801061e:	4618      	mov	r0, r3
 8010620:	3738      	adds	r7, #56	; 0x38
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b086      	sub	sp, #24
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d109      	bne.n	801064c <uxQueueSpacesAvailable+0x26>
	__asm volatile
 8010638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063c:	f383 8811 	msr	BASEPRI, r3
 8010640:	f3bf 8f6f 	isb	sy
 8010644:	f3bf 8f4f 	dsb	sy
 8010648:	60fb      	str	r3, [r7, #12]
 801064a:	e7fe      	b.n	801064a <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 801064c:	f001 f926 	bl	801189c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801065c:	f001 f94c 	bl	80118f8 <vPortExitCritical>

	return uxReturn;
 8010660:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010662:	4618      	mov	r0, r3
 8010664:	3718      	adds	r7, #24
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801066a:	b580      	push	{r7, lr}
 801066c:	b086      	sub	sp, #24
 801066e:	af00      	add	r7, sp, #0
 8010670:	60f8      	str	r0, [r7, #12]
 8010672:	60b9      	str	r1, [r7, #8]
 8010674:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010676:	2300      	movs	r3, #0
 8010678:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801067e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d10d      	bne.n	80106a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d14d      	bne.n	801072c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	4618      	mov	r0, r3
 8010696:	f000 feef 	bl	8011478 <xTaskPriorityDisinherit>
 801069a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2200      	movs	r2, #0
 80106a0:	609a      	str	r2, [r3, #8]
 80106a2:	e043      	b.n	801072c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d119      	bne.n	80106de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6858      	ldr	r0, [r3, #4]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106b2:	461a      	mov	r2, r3
 80106b4:	68b9      	ldr	r1, [r7, #8]
 80106b6:	f002 f9bf 	bl	8012a38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	685a      	ldr	r2, [r3, #4]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106c2:	441a      	add	r2, r3
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	685a      	ldr	r2, [r3, #4]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d32b      	bcc.n	801072c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	605a      	str	r2, [r3, #4]
 80106dc:	e026      	b.n	801072c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	68d8      	ldr	r0, [r3, #12]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e6:	461a      	mov	r2, r3
 80106e8:	68b9      	ldr	r1, [r7, #8]
 80106ea:	f002 f9a5 	bl	8012a38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	68da      	ldr	r2, [r3, #12]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106f6:	425b      	negs	r3, r3
 80106f8:	441a      	add	r2, r3
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	68da      	ldr	r2, [r3, #12]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	429a      	cmp	r2, r3
 8010708:	d207      	bcs.n	801071a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	689a      	ldr	r2, [r3, #8]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010712:	425b      	negs	r3, r3
 8010714:	441a      	add	r2, r3
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b02      	cmp	r3, #2
 801071e:	d105      	bne.n	801072c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d002      	beq.n	801072c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	3b01      	subs	r3, #1
 801072a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	1c5a      	adds	r2, r3, #1
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010734:	697b      	ldr	r3, [r7, #20]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3718      	adds	r7, #24
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}

0801073e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801073e:	b580      	push	{r7, lr}
 8010740:	b082      	sub	sp, #8
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
 8010746:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801074c:	2b00      	cmp	r3, #0
 801074e:	d018      	beq.n	8010782 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	68da      	ldr	r2, [r3, #12]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010758:	441a      	add	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	68da      	ldr	r2, [r3, #12]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	429a      	cmp	r2, r3
 8010768:	d303      	bcc.n	8010772 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	68d9      	ldr	r1, [r3, #12]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801077a:	461a      	mov	r2, r3
 801077c:	6838      	ldr	r0, [r7, #0]
 801077e:	f002 f95b 	bl	8012a38 <memcpy>
	}
}
 8010782:	bf00      	nop
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b084      	sub	sp, #16
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010792:	f001 f883 	bl	801189c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801079c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801079e:	e011      	b.n	80107c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d012      	beq.n	80107ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	3324      	adds	r3, #36	; 0x24
 80107ac:	4618      	mov	r0, r3
 80107ae:	f000 fc8f 	bl	80110d0 <xTaskRemoveFromEventList>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80107b8:	f000 fd62 	bl	8011280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80107bc:	7bfb      	ldrb	r3, [r7, #15]
 80107be:	3b01      	subs	r3, #1
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80107c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dce9      	bgt.n	80107a0 <prvUnlockQueue+0x16>
 80107cc:	e000      	b.n	80107d0 <prvUnlockQueue+0x46>
					break;
 80107ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	22ff      	movs	r2, #255	; 0xff
 80107d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80107d8:	f001 f88e 	bl	80118f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80107dc:	f001 f85e 	bl	801189c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80107e8:	e011      	b.n	801080e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	691b      	ldr	r3, [r3, #16]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d012      	beq.n	8010818 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	3310      	adds	r3, #16
 80107f6:	4618      	mov	r0, r3
 80107f8:	f000 fc6a 	bl	80110d0 <xTaskRemoveFromEventList>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d001      	beq.n	8010806 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010802:	f000 fd3d 	bl	8011280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010806:	7bbb      	ldrb	r3, [r7, #14]
 8010808:	3b01      	subs	r3, #1
 801080a:	b2db      	uxtb	r3, r3
 801080c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801080e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010812:	2b00      	cmp	r3, #0
 8010814:	dce9      	bgt.n	80107ea <prvUnlockQueue+0x60>
 8010816:	e000      	b.n	801081a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010818:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	22ff      	movs	r2, #255	; 0xff
 801081e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010822:	f001 f869 	bl	80118f8 <vPortExitCritical>
}
 8010826:	bf00      	nop
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801082e:	b580      	push	{r7, lr}
 8010830:	b084      	sub	sp, #16
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010836:	f001 f831 	bl	801189c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801083e:	2b00      	cmp	r3, #0
 8010840:	d102      	bne.n	8010848 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010842:	2301      	movs	r3, #1
 8010844:	60fb      	str	r3, [r7, #12]
 8010846:	e001      	b.n	801084c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010848:	2300      	movs	r3, #0
 801084a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801084c:	f001 f854 	bl	80118f8 <vPortExitCritical>

	return xReturn;
 8010850:	68fb      	ldr	r3, [r7, #12]
}
 8010852:	4618      	mov	r0, r3
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b084      	sub	sp, #16
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010862:	f001 f81b 	bl	801189c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801086e:	429a      	cmp	r2, r3
 8010870:	d102      	bne.n	8010878 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010872:	2301      	movs	r3, #1
 8010874:	60fb      	str	r3, [r7, #12]
 8010876:	e001      	b.n	801087c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010878:	2300      	movs	r3, #0
 801087a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801087c:	f001 f83c 	bl	80118f8 <vPortExitCritical>

	return xReturn;
 8010880:	68fb      	ldr	r3, [r7, #12]
}
 8010882:	4618      	mov	r0, r3
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}

0801088a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801088a:	b580      	push	{r7, lr}
 801088c:	b08e      	sub	sp, #56	; 0x38
 801088e:	af04      	add	r7, sp, #16
 8010890:	60f8      	str	r0, [r7, #12]
 8010892:	60b9      	str	r1, [r7, #8]
 8010894:	607a      	str	r2, [r7, #4]
 8010896:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801089a:	2b00      	cmp	r3, #0
 801089c:	d109      	bne.n	80108b2 <xTaskCreateStatic+0x28>
 801089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a2:	f383 8811 	msr	BASEPRI, r3
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	f3bf 8f4f 	dsb	sy
 80108ae:	623b      	str	r3, [r7, #32]
 80108b0:	e7fe      	b.n	80108b0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80108b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d109      	bne.n	80108cc <xTaskCreateStatic+0x42>
 80108b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	61fb      	str	r3, [r7, #28]
 80108ca:	e7fe      	b.n	80108ca <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80108cc:	2354      	movs	r3, #84	; 0x54
 80108ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	2b54      	cmp	r3, #84	; 0x54
 80108d4:	d009      	beq.n	80108ea <xTaskCreateStatic+0x60>
 80108d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108da:	f383 8811 	msr	BASEPRI, r3
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	f3bf 8f4f 	dsb	sy
 80108e6:	61bb      	str	r3, [r7, #24]
 80108e8:	e7fe      	b.n	80108e8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80108ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80108ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d01e      	beq.n	8010930 <xTaskCreateStatic+0xa6>
 80108f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d01b      	beq.n	8010930 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80108f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010900:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	2202      	movs	r2, #2
 8010906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801090a:	2300      	movs	r3, #0
 801090c:	9303      	str	r3, [sp, #12]
 801090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010910:	9302      	str	r3, [sp, #8]
 8010912:	f107 0314 	add.w	r3, r7, #20
 8010916:	9301      	str	r3, [sp, #4]
 8010918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	68b9      	ldr	r1, [r7, #8]
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f000 f850 	bl	80109c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801092a:	f000 f8d3 	bl	8010ad4 <prvAddNewTaskToReadyList>
 801092e:	e001      	b.n	8010934 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8010930:	2300      	movs	r3, #0
 8010932:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010934:	697b      	ldr	r3, [r7, #20]
	}
 8010936:	4618      	mov	r0, r3
 8010938:	3728      	adds	r7, #40	; 0x28
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}

0801093e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801093e:	b580      	push	{r7, lr}
 8010940:	b08c      	sub	sp, #48	; 0x30
 8010942:	af04      	add	r7, sp, #16
 8010944:	60f8      	str	r0, [r7, #12]
 8010946:	60b9      	str	r1, [r7, #8]
 8010948:	603b      	str	r3, [r7, #0]
 801094a:	4613      	mov	r3, r2
 801094c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801094e:	88fb      	ldrh	r3, [r7, #6]
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	4618      	mov	r0, r3
 8010954:	f001 f8bc 	bl	8011ad0 <pvPortMalloc>
 8010958:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d00e      	beq.n	801097e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010960:	2054      	movs	r0, #84	; 0x54
 8010962:	f001 f8b5 	bl	8011ad0 <pvPortMalloc>
 8010966:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d003      	beq.n	8010976 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	697a      	ldr	r2, [r7, #20]
 8010972:	631a      	str	r2, [r3, #48]	; 0x30
 8010974:	e005      	b.n	8010982 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010976:	6978      	ldr	r0, [r7, #20]
 8010978:	f001 f96c 	bl	8011c54 <vPortFree>
 801097c:	e001      	b.n	8010982 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801097e:	2300      	movs	r3, #0
 8010980:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010982:	69fb      	ldr	r3, [r7, #28]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d017      	beq.n	80109b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	2200      	movs	r2, #0
 801098c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010990:	88fa      	ldrh	r2, [r7, #6]
 8010992:	2300      	movs	r3, #0
 8010994:	9303      	str	r3, [sp, #12]
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	9302      	str	r3, [sp, #8]
 801099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099c:	9301      	str	r3, [sp, #4]
 801099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	68b9      	ldr	r1, [r7, #8]
 80109a6:	68f8      	ldr	r0, [r7, #12]
 80109a8:	f000 f80e 	bl	80109c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109ac:	69f8      	ldr	r0, [r7, #28]
 80109ae:	f000 f891 	bl	8010ad4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80109b2:	2301      	movs	r3, #1
 80109b4:	61bb      	str	r3, [r7, #24]
 80109b6:	e002      	b.n	80109be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80109b8:	f04f 33ff 	mov.w	r3, #4294967295
 80109bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80109be:	69bb      	ldr	r3, [r7, #24]
	}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3720      	adds	r7, #32
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b088      	sub	sp, #32
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
 80109d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80109e0:	3b01      	subs	r3, #1
 80109e2:	009b      	lsls	r3, r3, #2
 80109e4:	4413      	add	r3, r2
 80109e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	f023 0307 	bic.w	r3, r3, #7
 80109ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	f003 0307 	and.w	r3, r3, #7
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d009      	beq.n	8010a0e <prvInitialiseNewTask+0x46>
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	617b      	str	r3, [r7, #20]
 8010a0c:	e7fe      	b.n	8010a0c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d01f      	beq.n	8010a54 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a14:	2300      	movs	r3, #0
 8010a16:	61fb      	str	r3, [r7, #28]
 8010a18:	e012      	b.n	8010a40 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a1a:	68ba      	ldr	r2, [r7, #8]
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	4413      	add	r3, r2
 8010a20:	7819      	ldrb	r1, [r3, #0]
 8010a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	4413      	add	r3, r2
 8010a28:	3334      	adds	r3, #52	; 0x34
 8010a2a:	460a      	mov	r2, r1
 8010a2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010a2e:	68ba      	ldr	r2, [r7, #8]
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	4413      	add	r3, r2
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d006      	beq.n	8010a48 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	61fb      	str	r3, [r7, #28]
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	2b0f      	cmp	r3, #15
 8010a44:	d9e9      	bls.n	8010a1a <prvInitialiseNewTask+0x52>
 8010a46:	e000      	b.n	8010a4a <prvInitialiseNewTask+0x82>
			{
				break;
 8010a48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010a52:	e003      	b.n	8010a5c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a56:	2200      	movs	r2, #0
 8010a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5e:	2b06      	cmp	r3, #6
 8010a60:	d901      	bls.n	8010a66 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010a62:	2306      	movs	r3, #6
 8010a64:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a70:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a74:	2200      	movs	r2, #0
 8010a76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7ff f91d 	bl	800fcbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a84:	3318      	adds	r3, #24
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff f918 	bl	800fcbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a94:	f1c3 0207 	rsb	r2, r3, #7
 8010a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aa0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ab0:	683a      	ldr	r2, [r7, #0]
 8010ab2:	68f9      	ldr	r1, [r7, #12]
 8010ab4:	69b8      	ldr	r0, [r7, #24]
 8010ab6:	f000 fdc9 	bl	801164c <pxPortInitialiseStack>
 8010aba:	4602      	mov	r2, r0
 8010abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d002      	beq.n	8010acc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010acc:	bf00      	nop
 8010ace:	3720      	adds	r7, #32
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010adc:	f000 fede 	bl	801189c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ae0:	4b2a      	ldr	r3, [pc, #168]	; (8010b8c <prvAddNewTaskToReadyList+0xb8>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	4a29      	ldr	r2, [pc, #164]	; (8010b8c <prvAddNewTaskToReadyList+0xb8>)
 8010ae8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010aea:	4b29      	ldr	r3, [pc, #164]	; (8010b90 <prvAddNewTaskToReadyList+0xbc>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d109      	bne.n	8010b06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010af2:	4a27      	ldr	r2, [pc, #156]	; (8010b90 <prvAddNewTaskToReadyList+0xbc>)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010af8:	4b24      	ldr	r3, [pc, #144]	; (8010b8c <prvAddNewTaskToReadyList+0xb8>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d110      	bne.n	8010b22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010b00:	f000 fbe2 	bl	80112c8 <prvInitialiseTaskLists>
 8010b04:	e00d      	b.n	8010b22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010b06:	4b23      	ldr	r3, [pc, #140]	; (8010b94 <prvAddNewTaskToReadyList+0xc0>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d109      	bne.n	8010b22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010b0e:	4b20      	ldr	r3, [pc, #128]	; (8010b90 <prvAddNewTaskToReadyList+0xbc>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d802      	bhi.n	8010b22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010b1c:	4a1c      	ldr	r2, [pc, #112]	; (8010b90 <prvAddNewTaskToReadyList+0xbc>)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010b22:	4b1d      	ldr	r3, [pc, #116]	; (8010b98 <prvAddNewTaskToReadyList+0xc4>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	3301      	adds	r3, #1
 8010b28:	4a1b      	ldr	r2, [pc, #108]	; (8010b98 <prvAddNewTaskToReadyList+0xc4>)
 8010b2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b30:	2201      	movs	r2, #1
 8010b32:	409a      	lsls	r2, r3
 8010b34:	4b19      	ldr	r3, [pc, #100]	; (8010b9c <prvAddNewTaskToReadyList+0xc8>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	4a18      	ldr	r2, [pc, #96]	; (8010b9c <prvAddNewTaskToReadyList+0xc8>)
 8010b3c:	6013      	str	r3, [r2, #0]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b42:	4613      	mov	r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	4413      	add	r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	4a15      	ldr	r2, [pc, #84]	; (8010ba0 <prvAddNewTaskToReadyList+0xcc>)
 8010b4c:	441a      	add	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	3304      	adds	r3, #4
 8010b52:	4619      	mov	r1, r3
 8010b54:	4610      	mov	r0, r2
 8010b56:	f7ff f8be 	bl	800fcd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010b5a:	f000 fecd 	bl	80118f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010b5e:	4b0d      	ldr	r3, [pc, #52]	; (8010b94 <prvAddNewTaskToReadyList+0xc0>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00e      	beq.n	8010b84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010b66:	4b0a      	ldr	r3, [pc, #40]	; (8010b90 <prvAddNewTaskToReadyList+0xbc>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d207      	bcs.n	8010b84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010b74:	4b0b      	ldr	r3, [pc, #44]	; (8010ba4 <prvAddNewTaskToReadyList+0xd0>)
 8010b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	f3bf 8f4f 	dsb	sy
 8010b80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b84:	bf00      	nop
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	20000998 	.word	0x20000998
 8010b90:	20000898 	.word	0x20000898
 8010b94:	200009a4 	.word	0x200009a4
 8010b98:	200009b4 	.word	0x200009b4
 8010b9c:	200009a0 	.word	0x200009a0
 8010ba0:	2000089c 	.word	0x2000089c
 8010ba4:	e000ed04 	.word	0xe000ed04

08010ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d016      	beq.n	8010be8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010bba:	4b13      	ldr	r3, [pc, #76]	; (8010c08 <vTaskDelay+0x60>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d009      	beq.n	8010bd6 <vTaskDelay+0x2e>
 8010bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	60bb      	str	r3, [r7, #8]
 8010bd4:	e7fe      	b.n	8010bd4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010bd6:	f000 f879 	bl	8010ccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010bda:	2100      	movs	r1, #0
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 fccf 	bl	8011580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010be2:	f000 f881 	bl	8010ce8 <xTaskResumeAll>
 8010be6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d107      	bne.n	8010bfe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010bee:	4b07      	ldr	r3, [pc, #28]	; (8010c0c <vTaskDelay+0x64>)
 8010bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	f3bf 8f4f 	dsb	sy
 8010bfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010bfe:	bf00      	nop
 8010c00:	3710      	adds	r7, #16
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	200009c0 	.word	0x200009c0
 8010c0c:	e000ed04 	.word	0xe000ed04

08010c10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08a      	sub	sp, #40	; 0x28
 8010c14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010c1e:	463a      	mov	r2, r7
 8010c20:	1d39      	adds	r1, r7, #4
 8010c22:	f107 0308 	add.w	r3, r7, #8
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7f2 f946 	bl	8002eb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010c2c:	6839      	ldr	r1, [r7, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	68ba      	ldr	r2, [r7, #8]
 8010c32:	9202      	str	r2, [sp, #8]
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	2300      	movs	r3, #0
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	460a      	mov	r2, r1
 8010c3e:	491d      	ldr	r1, [pc, #116]	; (8010cb4 <vTaskStartScheduler+0xa4>)
 8010c40:	481d      	ldr	r0, [pc, #116]	; (8010cb8 <vTaskStartScheduler+0xa8>)
 8010c42:	f7ff fe22 	bl	801088a <xTaskCreateStatic>
 8010c46:	4602      	mov	r2, r0
 8010c48:	4b1c      	ldr	r3, [pc, #112]	; (8010cbc <vTaskStartScheduler+0xac>)
 8010c4a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010c4c:	4b1b      	ldr	r3, [pc, #108]	; (8010cbc <vTaskStartScheduler+0xac>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010c54:	2301      	movs	r3, #1
 8010c56:	617b      	str	r3, [r7, #20]
 8010c58:	e001      	b.n	8010c5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d115      	bne.n	8010c90 <vTaskStartScheduler+0x80>
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010c76:	4b12      	ldr	r3, [pc, #72]	; (8010cc0 <vTaskStartScheduler+0xb0>)
 8010c78:	f04f 32ff 	mov.w	r2, #4294967295
 8010c7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010c7e:	4b11      	ldr	r3, [pc, #68]	; (8010cc4 <vTaskStartScheduler+0xb4>)
 8010c80:	2201      	movs	r2, #1
 8010c82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010c84:	4b10      	ldr	r3, [pc, #64]	; (8010cc8 <vTaskStartScheduler+0xb8>)
 8010c86:	2200      	movs	r2, #0
 8010c88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010c8a:	f000 fd69 	bl	8011760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010c8e:	e00d      	b.n	8010cac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c96:	d109      	bne.n	8010cac <vTaskStartScheduler+0x9c>
 8010c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9c:	f383 8811 	msr	BASEPRI, r3
 8010ca0:	f3bf 8f6f 	isb	sy
 8010ca4:	f3bf 8f4f 	dsb	sy
 8010ca8:	60fb      	str	r3, [r7, #12]
 8010caa:	e7fe      	b.n	8010caa <vTaskStartScheduler+0x9a>
}
 8010cac:	bf00      	nop
 8010cae:	3718      	adds	r7, #24
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	08018240 	.word	0x08018240
 8010cb8:	08011299 	.word	0x08011299
 8010cbc:	200009bc 	.word	0x200009bc
 8010cc0:	200009b8 	.word	0x200009b8
 8010cc4:	200009a4 	.word	0x200009a4
 8010cc8:	2000099c 	.word	0x2000099c

08010ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010cd0:	4b04      	ldr	r3, [pc, #16]	; (8010ce4 <vTaskSuspendAll+0x18>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	4a03      	ldr	r2, [pc, #12]	; (8010ce4 <vTaskSuspendAll+0x18>)
 8010cd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010cda:	bf00      	nop
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr
 8010ce4:	200009c0 	.word	0x200009c0

08010ce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010cf6:	4b41      	ldr	r3, [pc, #260]	; (8010dfc <xTaskResumeAll+0x114>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d109      	bne.n	8010d12 <xTaskResumeAll+0x2a>
 8010cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	603b      	str	r3, [r7, #0]
 8010d10:	e7fe      	b.n	8010d10 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010d12:	f000 fdc3 	bl	801189c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010d16:	4b39      	ldr	r3, [pc, #228]	; (8010dfc <xTaskResumeAll+0x114>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	4a37      	ldr	r2, [pc, #220]	; (8010dfc <xTaskResumeAll+0x114>)
 8010d1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d20:	4b36      	ldr	r3, [pc, #216]	; (8010dfc <xTaskResumeAll+0x114>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d161      	bne.n	8010dec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d28:	4b35      	ldr	r3, [pc, #212]	; (8010e00 <xTaskResumeAll+0x118>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d05d      	beq.n	8010dec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d30:	e02e      	b.n	8010d90 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d32:	4b34      	ldr	r3, [pc, #208]	; (8010e04 <xTaskResumeAll+0x11c>)
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	3318      	adds	r3, #24
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff f826 	bl	800fd90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	3304      	adds	r3, #4
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff f821 	bl	800fd90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d52:	2201      	movs	r2, #1
 8010d54:	409a      	lsls	r2, r3
 8010d56:	4b2c      	ldr	r3, [pc, #176]	; (8010e08 <xTaskResumeAll+0x120>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	4a2a      	ldr	r2, [pc, #168]	; (8010e08 <xTaskResumeAll+0x120>)
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d64:	4613      	mov	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	4413      	add	r3, r2
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	4a27      	ldr	r2, [pc, #156]	; (8010e0c <xTaskResumeAll+0x124>)
 8010d6e:	441a      	add	r2, r3
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	3304      	adds	r3, #4
 8010d74:	4619      	mov	r1, r3
 8010d76:	4610      	mov	r0, r2
 8010d78:	f7fe ffad 	bl	800fcd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d80:	4b23      	ldr	r3, [pc, #140]	; (8010e10 <xTaskResumeAll+0x128>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d302      	bcc.n	8010d90 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8010d8a:	4b22      	ldr	r3, [pc, #136]	; (8010e14 <xTaskResumeAll+0x12c>)
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d90:	4b1c      	ldr	r3, [pc, #112]	; (8010e04 <xTaskResumeAll+0x11c>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1cc      	bne.n	8010d32 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d9e:	f000 fb2d 	bl	80113fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010da2:	4b1d      	ldr	r3, [pc, #116]	; (8010e18 <xTaskResumeAll+0x130>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d010      	beq.n	8010dd0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010dae:	f000 f859 	bl	8010e64 <xTaskIncrementTick>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d002      	beq.n	8010dbe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8010db8:	4b16      	ldr	r3, [pc, #88]	; (8010e14 <xTaskResumeAll+0x12c>)
 8010dba:	2201      	movs	r2, #1
 8010dbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1f1      	bne.n	8010dae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8010dca:	4b13      	ldr	r3, [pc, #76]	; (8010e18 <xTaskResumeAll+0x130>)
 8010dcc:	2200      	movs	r2, #0
 8010dce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010dd0:	4b10      	ldr	r3, [pc, #64]	; (8010e14 <xTaskResumeAll+0x12c>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d009      	beq.n	8010dec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010dd8:	2301      	movs	r3, #1
 8010dda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010ddc:	4b0f      	ldr	r3, [pc, #60]	; (8010e1c <xTaskResumeAll+0x134>)
 8010dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010de2:	601a      	str	r2, [r3, #0]
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010dec:	f000 fd84 	bl	80118f8 <vPortExitCritical>

	return xAlreadyYielded;
 8010df0:	68bb      	ldr	r3, [r7, #8]
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3710      	adds	r7, #16
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	200009c0 	.word	0x200009c0
 8010e00:	20000998 	.word	0x20000998
 8010e04:	20000958 	.word	0x20000958
 8010e08:	200009a0 	.word	0x200009a0
 8010e0c:	2000089c 	.word	0x2000089c
 8010e10:	20000898 	.word	0x20000898
 8010e14:	200009ac 	.word	0x200009ac
 8010e18:	200009a8 	.word	0x200009a8
 8010e1c:	e000ed04 	.word	0xe000ed04

08010e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010e26:	4b05      	ldr	r3, [pc, #20]	; (8010e3c <xTaskGetTickCount+0x1c>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010e2c:	687b      	ldr	r3, [r7, #4]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	370c      	adds	r7, #12
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	2000099c 	.word	0x2000099c

08010e40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e46:	f000 fe05 	bl	8011a54 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010e4e:	4b04      	ldr	r3, [pc, #16]	; (8010e60 <xTaskGetTickCountFromISR+0x20>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e54:	683b      	ldr	r3, [r7, #0]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3708      	adds	r7, #8
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	2000099c 	.word	0x2000099c

08010e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b086      	sub	sp, #24
 8010e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e6e:	4b4e      	ldr	r3, [pc, #312]	; (8010fa8 <xTaskIncrementTick+0x144>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f040 8087 	bne.w	8010f86 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e78:	4b4c      	ldr	r3, [pc, #304]	; (8010fac <xTaskIncrementTick+0x148>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e80:	4a4a      	ldr	r2, [pc, #296]	; (8010fac <xTaskIncrementTick+0x148>)
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d11f      	bne.n	8010ecc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e8c:	4b48      	ldr	r3, [pc, #288]	; (8010fb0 <xTaskIncrementTick+0x14c>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d009      	beq.n	8010eaa <xTaskIncrementTick+0x46>
 8010e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9a:	f383 8811 	msr	BASEPRI, r3
 8010e9e:	f3bf 8f6f 	isb	sy
 8010ea2:	f3bf 8f4f 	dsb	sy
 8010ea6:	603b      	str	r3, [r7, #0]
 8010ea8:	e7fe      	b.n	8010ea8 <xTaskIncrementTick+0x44>
 8010eaa:	4b41      	ldr	r3, [pc, #260]	; (8010fb0 <xTaskIncrementTick+0x14c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	60fb      	str	r3, [r7, #12]
 8010eb0:	4b40      	ldr	r3, [pc, #256]	; (8010fb4 <xTaskIncrementTick+0x150>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a3e      	ldr	r2, [pc, #248]	; (8010fb0 <xTaskIncrementTick+0x14c>)
 8010eb6:	6013      	str	r3, [r2, #0]
 8010eb8:	4a3e      	ldr	r2, [pc, #248]	; (8010fb4 <xTaskIncrementTick+0x150>)
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	6013      	str	r3, [r2, #0]
 8010ebe:	4b3e      	ldr	r3, [pc, #248]	; (8010fb8 <xTaskIncrementTick+0x154>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	4a3c      	ldr	r2, [pc, #240]	; (8010fb8 <xTaskIncrementTick+0x154>)
 8010ec6:	6013      	str	r3, [r2, #0]
 8010ec8:	f000 fa98 	bl	80113fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ecc:	4b3b      	ldr	r3, [pc, #236]	; (8010fbc <xTaskIncrementTick+0x158>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	693a      	ldr	r2, [r7, #16]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d348      	bcc.n	8010f68 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ed6:	4b36      	ldr	r3, [pc, #216]	; (8010fb0 <xTaskIncrementTick+0x14c>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d104      	bne.n	8010eea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ee0:	4b36      	ldr	r3, [pc, #216]	; (8010fbc <xTaskIncrementTick+0x158>)
 8010ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ee6:	601a      	str	r2, [r3, #0]
					break;
 8010ee8:	e03e      	b.n	8010f68 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010eea:	4b31      	ldr	r3, [pc, #196]	; (8010fb0 <xTaskIncrementTick+0x14c>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d203      	bcs.n	8010f0a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010f02:	4a2e      	ldr	r2, [pc, #184]	; (8010fbc <xTaskIncrementTick+0x158>)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f08:	e02e      	b.n	8010f68 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fe ff3e 	bl	800fd90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d004      	beq.n	8010f26 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	3318      	adds	r3, #24
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fe ff35 	bl	800fd90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	409a      	lsls	r2, r3
 8010f2e:	4b24      	ldr	r3, [pc, #144]	; (8010fc0 <xTaskIncrementTick+0x15c>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4313      	orrs	r3, r2
 8010f34:	4a22      	ldr	r2, [pc, #136]	; (8010fc0 <xTaskIncrementTick+0x15c>)
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	4a1f      	ldr	r2, [pc, #124]	; (8010fc4 <xTaskIncrementTick+0x160>)
 8010f46:	441a      	add	r2, r3
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	3304      	adds	r3, #4
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4610      	mov	r0, r2
 8010f50:	f7fe fec1 	bl	800fcd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f58:	4b1b      	ldr	r3, [pc, #108]	; (8010fc8 <xTaskIncrementTick+0x164>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d3b9      	bcc.n	8010ed6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010f62:	2301      	movs	r3, #1
 8010f64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f66:	e7b6      	b.n	8010ed6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010f68:	4b17      	ldr	r3, [pc, #92]	; (8010fc8 <xTaskIncrementTick+0x164>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f6e:	4915      	ldr	r1, [pc, #84]	; (8010fc4 <xTaskIncrementTick+0x160>)
 8010f70:	4613      	mov	r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	440b      	add	r3, r1
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d907      	bls.n	8010f90 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8010f80:	2301      	movs	r3, #1
 8010f82:	617b      	str	r3, [r7, #20]
 8010f84:	e004      	b.n	8010f90 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010f86:	4b11      	ldr	r3, [pc, #68]	; (8010fcc <xTaskIncrementTick+0x168>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	4a0f      	ldr	r2, [pc, #60]	; (8010fcc <xTaskIncrementTick+0x168>)
 8010f8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010f90:	4b0f      	ldr	r3, [pc, #60]	; (8010fd0 <xTaskIncrementTick+0x16c>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d001      	beq.n	8010f9c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010f9c:	697b      	ldr	r3, [r7, #20]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3718      	adds	r7, #24
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	200009c0 	.word	0x200009c0
 8010fac:	2000099c 	.word	0x2000099c
 8010fb0:	20000950 	.word	0x20000950
 8010fb4:	20000954 	.word	0x20000954
 8010fb8:	200009b0 	.word	0x200009b0
 8010fbc:	200009b8 	.word	0x200009b8
 8010fc0:	200009a0 	.word	0x200009a0
 8010fc4:	2000089c 	.word	0x2000089c
 8010fc8:	20000898 	.word	0x20000898
 8010fcc:	200009a8 	.word	0x200009a8
 8010fd0:	200009ac 	.word	0x200009ac

08010fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b087      	sub	sp, #28
 8010fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010fda:	4b26      	ldr	r3, [pc, #152]	; (8011074 <vTaskSwitchContext+0xa0>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d003      	beq.n	8010fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010fe2:	4b25      	ldr	r3, [pc, #148]	; (8011078 <vTaskSwitchContext+0xa4>)
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010fe8:	e03e      	b.n	8011068 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010fea:	4b23      	ldr	r3, [pc, #140]	; (8011078 <vTaskSwitchContext+0xa4>)
 8010fec:	2200      	movs	r2, #0
 8010fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ff0:	4b22      	ldr	r3, [pc, #136]	; (801107c <vTaskSwitchContext+0xa8>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	fab3 f383 	clz	r3, r3
 8010ffc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010ffe:	7afb      	ldrb	r3, [r7, #11]
 8011000:	f1c3 031f 	rsb	r3, r3, #31
 8011004:	617b      	str	r3, [r7, #20]
 8011006:	491e      	ldr	r1, [pc, #120]	; (8011080 <vTaskSwitchContext+0xac>)
 8011008:	697a      	ldr	r2, [r7, #20]
 801100a:	4613      	mov	r3, r2
 801100c:	009b      	lsls	r3, r3, #2
 801100e:	4413      	add	r3, r2
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	440b      	add	r3, r1
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d109      	bne.n	801102e <vTaskSwitchContext+0x5a>
	__asm volatile
 801101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	607b      	str	r3, [r7, #4]
 801102c:	e7fe      	b.n	801102c <vTaskSwitchContext+0x58>
 801102e:	697a      	ldr	r2, [r7, #20]
 8011030:	4613      	mov	r3, r2
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	4413      	add	r3, r2
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	4a11      	ldr	r2, [pc, #68]	; (8011080 <vTaskSwitchContext+0xac>)
 801103a:	4413      	add	r3, r2
 801103c:	613b      	str	r3, [r7, #16]
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	685a      	ldr	r2, [r3, #4]
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	605a      	str	r2, [r3, #4]
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	685a      	ldr	r2, [r3, #4]
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	3308      	adds	r3, #8
 8011050:	429a      	cmp	r2, r3
 8011052:	d104      	bne.n	801105e <vTaskSwitchContext+0x8a>
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	685a      	ldr	r2, [r3, #4]
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	605a      	str	r2, [r3, #4]
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	4a07      	ldr	r2, [pc, #28]	; (8011084 <vTaskSwitchContext+0xb0>)
 8011066:	6013      	str	r3, [r2, #0]
}
 8011068:	bf00      	nop
 801106a:	371c      	adds	r7, #28
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr
 8011074:	200009c0 	.word	0x200009c0
 8011078:	200009ac 	.word	0x200009ac
 801107c:	200009a0 	.word	0x200009a0
 8011080:	2000089c 	.word	0x2000089c
 8011084:	20000898 	.word	0x20000898

08011088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d109      	bne.n	80110ac <vTaskPlaceOnEventList+0x24>
 8011098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	60fb      	str	r3, [r7, #12]
 80110aa:	e7fe      	b.n	80110aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110ac:	4b07      	ldr	r3, [pc, #28]	; (80110cc <vTaskPlaceOnEventList+0x44>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3318      	adds	r3, #24
 80110b2:	4619      	mov	r1, r3
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7fe fe32 	bl	800fd1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110ba:	2101      	movs	r1, #1
 80110bc:	6838      	ldr	r0, [r7, #0]
 80110be:	f000 fa5f 	bl	8011580 <prvAddCurrentTaskToDelayedList>
}
 80110c2:	bf00      	nop
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	20000898 	.word	0x20000898

080110d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b086      	sub	sp, #24
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d109      	bne.n	80110fa <xTaskRemoveFromEventList+0x2a>
 80110e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ea:	f383 8811 	msr	BASEPRI, r3
 80110ee:	f3bf 8f6f 	isb	sy
 80110f2:	f3bf 8f4f 	dsb	sy
 80110f6:	60fb      	str	r3, [r7, #12]
 80110f8:	e7fe      	b.n	80110f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	3318      	adds	r3, #24
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fe fe46 	bl	800fd90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011104:	4b1d      	ldr	r3, [pc, #116]	; (801117c <xTaskRemoveFromEventList+0xac>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d11c      	bne.n	8011146 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	3304      	adds	r3, #4
 8011110:	4618      	mov	r0, r3
 8011112:	f7fe fe3d 	bl	800fd90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111a:	2201      	movs	r2, #1
 801111c:	409a      	lsls	r2, r3
 801111e:	4b18      	ldr	r3, [pc, #96]	; (8011180 <xTaskRemoveFromEventList+0xb0>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4313      	orrs	r3, r2
 8011124:	4a16      	ldr	r2, [pc, #88]	; (8011180 <xTaskRemoveFromEventList+0xb0>)
 8011126:	6013      	str	r3, [r2, #0]
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801112c:	4613      	mov	r3, r2
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	4413      	add	r3, r2
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	4a13      	ldr	r2, [pc, #76]	; (8011184 <xTaskRemoveFromEventList+0xb4>)
 8011136:	441a      	add	r2, r3
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	3304      	adds	r3, #4
 801113c:	4619      	mov	r1, r3
 801113e:	4610      	mov	r0, r2
 8011140:	f7fe fdc9 	bl	800fcd6 <vListInsertEnd>
 8011144:	e005      	b.n	8011152 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	3318      	adds	r3, #24
 801114a:	4619      	mov	r1, r3
 801114c:	480e      	ldr	r0, [pc, #56]	; (8011188 <xTaskRemoveFromEventList+0xb8>)
 801114e:	f7fe fdc2 	bl	800fcd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011156:	4b0d      	ldr	r3, [pc, #52]	; (801118c <xTaskRemoveFromEventList+0xbc>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801115c:	429a      	cmp	r2, r3
 801115e:	d905      	bls.n	801116c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011160:	2301      	movs	r3, #1
 8011162:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011164:	4b0a      	ldr	r3, [pc, #40]	; (8011190 <xTaskRemoveFromEventList+0xc0>)
 8011166:	2201      	movs	r2, #1
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	e001      	b.n	8011170 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801116c:	2300      	movs	r3, #0
 801116e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011170:	697b      	ldr	r3, [r7, #20]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3718      	adds	r7, #24
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	200009c0 	.word	0x200009c0
 8011180:	200009a0 	.word	0x200009a0
 8011184:	2000089c 	.word	0x2000089c
 8011188:	20000958 	.word	0x20000958
 801118c:	20000898 	.word	0x20000898
 8011190:	200009ac 	.word	0x200009ac

08011194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801119c:	4b06      	ldr	r3, [pc, #24]	; (80111b8 <vTaskInternalSetTimeOutState+0x24>)
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111a4:	4b05      	ldr	r3, [pc, #20]	; (80111bc <vTaskInternalSetTimeOutState+0x28>)
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	605a      	str	r2, [r3, #4]
}
 80111ac:	bf00      	nop
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr
 80111b8:	200009b0 	.word	0x200009b0
 80111bc:	2000099c 	.word	0x2000099c

080111c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b088      	sub	sp, #32
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d109      	bne.n	80111e4 <xTaskCheckForTimeOut+0x24>
 80111d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
 80111e0:	613b      	str	r3, [r7, #16]
 80111e2:	e7fe      	b.n	80111e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d109      	bne.n	80111fe <xTaskCheckForTimeOut+0x3e>
 80111ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ee:	f383 8811 	msr	BASEPRI, r3
 80111f2:	f3bf 8f6f 	isb	sy
 80111f6:	f3bf 8f4f 	dsb	sy
 80111fa:	60fb      	str	r3, [r7, #12]
 80111fc:	e7fe      	b.n	80111fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80111fe:	f000 fb4d 	bl	801189c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011202:	4b1d      	ldr	r3, [pc, #116]	; (8011278 <xTaskCheckForTimeOut+0xb8>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	69ba      	ldr	r2, [r7, #24]
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801121a:	d102      	bne.n	8011222 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801121c:	2300      	movs	r3, #0
 801121e:	61fb      	str	r3, [r7, #28]
 8011220:	e023      	b.n	801126a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	4b15      	ldr	r3, [pc, #84]	; (801127c <xTaskCheckForTimeOut+0xbc>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	429a      	cmp	r2, r3
 801122c:	d007      	beq.n	801123e <xTaskCheckForTimeOut+0x7e>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	69ba      	ldr	r2, [r7, #24]
 8011234:	429a      	cmp	r2, r3
 8011236:	d302      	bcc.n	801123e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011238:	2301      	movs	r3, #1
 801123a:	61fb      	str	r3, [r7, #28]
 801123c:	e015      	b.n	801126a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	697a      	ldr	r2, [r7, #20]
 8011244:	429a      	cmp	r2, r3
 8011246:	d20b      	bcs.n	8011260 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	1ad2      	subs	r2, r2, r3
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ff9d 	bl	8011194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801125a:	2300      	movs	r3, #0
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	e004      	b.n	801126a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011266:	2301      	movs	r3, #1
 8011268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801126a:	f000 fb45 	bl	80118f8 <vPortExitCritical>

	return xReturn;
 801126e:	69fb      	ldr	r3, [r7, #28]
}
 8011270:	4618      	mov	r0, r3
 8011272:	3720      	adds	r7, #32
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	2000099c 	.word	0x2000099c
 801127c:	200009b0 	.word	0x200009b0

08011280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011280:	b480      	push	{r7}
 8011282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011284:	4b03      	ldr	r3, [pc, #12]	; (8011294 <vTaskMissedYield+0x14>)
 8011286:	2201      	movs	r2, #1
 8011288:	601a      	str	r2, [r3, #0]
}
 801128a:	bf00      	nop
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr
 8011294:	200009ac 	.word	0x200009ac

08011298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80112a0:	f000 f852 	bl	8011348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80112a4:	4b06      	ldr	r3, [pc, #24]	; (80112c0 <prvIdleTask+0x28>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d9f9      	bls.n	80112a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80112ac:	4b05      	ldr	r3, [pc, #20]	; (80112c4 <prvIdleTask+0x2c>)
 80112ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	f3bf 8f4f 	dsb	sy
 80112b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112bc:	e7f0      	b.n	80112a0 <prvIdleTask+0x8>
 80112be:	bf00      	nop
 80112c0:	2000089c 	.word	0x2000089c
 80112c4:	e000ed04 	.word	0xe000ed04

080112c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112ce:	2300      	movs	r3, #0
 80112d0:	607b      	str	r3, [r7, #4]
 80112d2:	e00c      	b.n	80112ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	4613      	mov	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	4413      	add	r3, r2
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	4a12      	ldr	r2, [pc, #72]	; (8011328 <prvInitialiseTaskLists+0x60>)
 80112e0:	4413      	add	r3, r2
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fe fcca 	bl	800fc7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	3301      	adds	r3, #1
 80112ec:	607b      	str	r3, [r7, #4]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b06      	cmp	r3, #6
 80112f2:	d9ef      	bls.n	80112d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112f4:	480d      	ldr	r0, [pc, #52]	; (801132c <prvInitialiseTaskLists+0x64>)
 80112f6:	f7fe fcc1 	bl	800fc7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112fa:	480d      	ldr	r0, [pc, #52]	; (8011330 <prvInitialiseTaskLists+0x68>)
 80112fc:	f7fe fcbe 	bl	800fc7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011300:	480c      	ldr	r0, [pc, #48]	; (8011334 <prvInitialiseTaskLists+0x6c>)
 8011302:	f7fe fcbb 	bl	800fc7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011306:	480c      	ldr	r0, [pc, #48]	; (8011338 <prvInitialiseTaskLists+0x70>)
 8011308:	f7fe fcb8 	bl	800fc7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801130c:	480b      	ldr	r0, [pc, #44]	; (801133c <prvInitialiseTaskLists+0x74>)
 801130e:	f7fe fcb5 	bl	800fc7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011312:	4b0b      	ldr	r3, [pc, #44]	; (8011340 <prvInitialiseTaskLists+0x78>)
 8011314:	4a05      	ldr	r2, [pc, #20]	; (801132c <prvInitialiseTaskLists+0x64>)
 8011316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011318:	4b0a      	ldr	r3, [pc, #40]	; (8011344 <prvInitialiseTaskLists+0x7c>)
 801131a:	4a05      	ldr	r2, [pc, #20]	; (8011330 <prvInitialiseTaskLists+0x68>)
 801131c:	601a      	str	r2, [r3, #0]
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	2000089c 	.word	0x2000089c
 801132c:	20000928 	.word	0x20000928
 8011330:	2000093c 	.word	0x2000093c
 8011334:	20000958 	.word	0x20000958
 8011338:	2000096c 	.word	0x2000096c
 801133c:	20000984 	.word	0x20000984
 8011340:	20000950 	.word	0x20000950
 8011344:	20000954 	.word	0x20000954

08011348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801134e:	e019      	b.n	8011384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011350:	f000 faa4 	bl	801189c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011354:	4b0f      	ldr	r3, [pc, #60]	; (8011394 <prvCheckTasksWaitingTermination+0x4c>)
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3304      	adds	r3, #4
 8011360:	4618      	mov	r0, r3
 8011362:	f7fe fd15 	bl	800fd90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011366:	4b0c      	ldr	r3, [pc, #48]	; (8011398 <prvCheckTasksWaitingTermination+0x50>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	3b01      	subs	r3, #1
 801136c:	4a0a      	ldr	r2, [pc, #40]	; (8011398 <prvCheckTasksWaitingTermination+0x50>)
 801136e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011370:	4b0a      	ldr	r3, [pc, #40]	; (801139c <prvCheckTasksWaitingTermination+0x54>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	3b01      	subs	r3, #1
 8011376:	4a09      	ldr	r2, [pc, #36]	; (801139c <prvCheckTasksWaitingTermination+0x54>)
 8011378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801137a:	f000 fabd 	bl	80118f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 f80e 	bl	80113a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011384:	4b05      	ldr	r3, [pc, #20]	; (801139c <prvCheckTasksWaitingTermination+0x54>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1e1      	bne.n	8011350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801138c:	bf00      	nop
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	2000096c 	.word	0x2000096c
 8011398:	20000998 	.word	0x20000998
 801139c:	20000980 	.word	0x20000980

080113a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d108      	bne.n	80113c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113b6:	4618      	mov	r0, r3
 80113b8:	f000 fc4c 	bl	8011c54 <vPortFree>
				vPortFree( pxTCB );
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f000 fc49 	bl	8011c54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80113c2:	e017      	b.n	80113f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d103      	bne.n	80113d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 fc40 	bl	8011c54 <vPortFree>
	}
 80113d4:	e00e      	b.n	80113f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d009      	beq.n	80113f4 <prvDeleteTCB+0x54>
 80113e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	60fb      	str	r3, [r7, #12]
 80113f2:	e7fe      	b.n	80113f2 <prvDeleteTCB+0x52>
	}
 80113f4:	bf00      	nop
 80113f6:	3710      	adds	r7, #16
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011402:	4b0c      	ldr	r3, [pc, #48]	; (8011434 <prvResetNextTaskUnblockTime+0x38>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d104      	bne.n	8011416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801140c:	4b0a      	ldr	r3, [pc, #40]	; (8011438 <prvResetNextTaskUnblockTime+0x3c>)
 801140e:	f04f 32ff 	mov.w	r2, #4294967295
 8011412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011414:	e008      	b.n	8011428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011416:	4b07      	ldr	r3, [pc, #28]	; (8011434 <prvResetNextTaskUnblockTime+0x38>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	685b      	ldr	r3, [r3, #4]
 8011424:	4a04      	ldr	r2, [pc, #16]	; (8011438 <prvResetNextTaskUnblockTime+0x3c>)
 8011426:	6013      	str	r3, [r2, #0]
}
 8011428:	bf00      	nop
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr
 8011434:	20000950 	.word	0x20000950
 8011438:	200009b8 	.word	0x200009b8

0801143c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011442:	4b0b      	ldr	r3, [pc, #44]	; (8011470 <xTaskGetSchedulerState+0x34>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d102      	bne.n	8011450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801144a:	2301      	movs	r3, #1
 801144c:	607b      	str	r3, [r7, #4]
 801144e:	e008      	b.n	8011462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011450:	4b08      	ldr	r3, [pc, #32]	; (8011474 <xTaskGetSchedulerState+0x38>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d102      	bne.n	801145e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011458:	2302      	movs	r3, #2
 801145a:	607b      	str	r3, [r7, #4]
 801145c:	e001      	b.n	8011462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801145e:	2300      	movs	r3, #0
 8011460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011462:	687b      	ldr	r3, [r7, #4]
	}
 8011464:	4618      	mov	r0, r3
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	200009a4 	.word	0x200009a4
 8011474:	200009c0 	.word	0x200009c0

08011478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011478:	b580      	push	{r7, lr}
 801147a:	b086      	sub	sp, #24
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011484:	2300      	movs	r3, #0
 8011486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d06c      	beq.n	8011568 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801148e:	4b39      	ldr	r3, [pc, #228]	; (8011574 <xTaskPriorityDisinherit+0xfc>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	693a      	ldr	r2, [r7, #16]
 8011494:	429a      	cmp	r2, r3
 8011496:	d009      	beq.n	80114ac <xTaskPriorityDisinherit+0x34>
 8011498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149c:	f383 8811 	msr	BASEPRI, r3
 80114a0:	f3bf 8f6f 	isb	sy
 80114a4:	f3bf 8f4f 	dsb	sy
 80114a8:	60fb      	str	r3, [r7, #12]
 80114aa:	e7fe      	b.n	80114aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d109      	bne.n	80114c8 <xTaskPriorityDisinherit+0x50>
 80114b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b8:	f383 8811 	msr	BASEPRI, r3
 80114bc:	f3bf 8f6f 	isb	sy
 80114c0:	f3bf 8f4f 	dsb	sy
 80114c4:	60bb      	str	r3, [r7, #8]
 80114c6:	e7fe      	b.n	80114c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114cc:	1e5a      	subs	r2, r3, #1
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114da:	429a      	cmp	r2, r3
 80114dc:	d044      	beq.n	8011568 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d140      	bne.n	8011568 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	3304      	adds	r3, #4
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fe fc50 	bl	800fd90 <uxListRemove>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d115      	bne.n	8011522 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114fa:	491f      	ldr	r1, [pc, #124]	; (8011578 <xTaskPriorityDisinherit+0x100>)
 80114fc:	4613      	mov	r3, r2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	4413      	add	r3, r2
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	440b      	add	r3, r1
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d10a      	bne.n	8011522 <xTaskPriorityDisinherit+0xaa>
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011510:	2201      	movs	r2, #1
 8011512:	fa02 f303 	lsl.w	r3, r2, r3
 8011516:	43da      	mvns	r2, r3
 8011518:	4b18      	ldr	r3, [pc, #96]	; (801157c <xTaskPriorityDisinherit+0x104>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	4013      	ands	r3, r2
 801151e:	4a17      	ldr	r2, [pc, #92]	; (801157c <xTaskPriorityDisinherit+0x104>)
 8011520:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801152e:	f1c3 0207 	rsb	r2, r3, #7
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801153a:	2201      	movs	r2, #1
 801153c:	409a      	lsls	r2, r3
 801153e:	4b0f      	ldr	r3, [pc, #60]	; (801157c <xTaskPriorityDisinherit+0x104>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4313      	orrs	r3, r2
 8011544:	4a0d      	ldr	r2, [pc, #52]	; (801157c <xTaskPriorityDisinherit+0x104>)
 8011546:	6013      	str	r3, [r2, #0]
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801154c:	4613      	mov	r3, r2
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4413      	add	r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	4a08      	ldr	r2, [pc, #32]	; (8011578 <xTaskPriorityDisinherit+0x100>)
 8011556:	441a      	add	r2, r3
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	3304      	adds	r3, #4
 801155c:	4619      	mov	r1, r3
 801155e:	4610      	mov	r0, r2
 8011560:	f7fe fbb9 	bl	800fcd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011564:	2301      	movs	r3, #1
 8011566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011568:	697b      	ldr	r3, [r7, #20]
	}
 801156a:	4618      	mov	r0, r3
 801156c:	3718      	adds	r7, #24
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
 8011572:	bf00      	nop
 8011574:	20000898 	.word	0x20000898
 8011578:	2000089c 	.word	0x2000089c
 801157c:	200009a0 	.word	0x200009a0

08011580 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801158a:	4b29      	ldr	r3, [pc, #164]	; (8011630 <prvAddCurrentTaskToDelayedList+0xb0>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011590:	4b28      	ldr	r3, [pc, #160]	; (8011634 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	3304      	adds	r3, #4
 8011596:	4618      	mov	r0, r3
 8011598:	f7fe fbfa 	bl	800fd90 <uxListRemove>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d10b      	bne.n	80115ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80115a2:	4b24      	ldr	r3, [pc, #144]	; (8011634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a8:	2201      	movs	r2, #1
 80115aa:	fa02 f303 	lsl.w	r3, r2, r3
 80115ae:	43da      	mvns	r2, r3
 80115b0:	4b21      	ldr	r3, [pc, #132]	; (8011638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4013      	ands	r3, r2
 80115b6:	4a20      	ldr	r2, [pc, #128]	; (8011638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c0:	d10a      	bne.n	80115d8 <prvAddCurrentTaskToDelayedList+0x58>
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d007      	beq.n	80115d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115c8:	4b1a      	ldr	r3, [pc, #104]	; (8011634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	3304      	adds	r3, #4
 80115ce:	4619      	mov	r1, r3
 80115d0:	481a      	ldr	r0, [pc, #104]	; (801163c <prvAddCurrentTaskToDelayedList+0xbc>)
 80115d2:	f7fe fb80 	bl	800fcd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80115d6:	e026      	b.n	8011626 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80115d8:	68fa      	ldr	r2, [r7, #12]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4413      	add	r3, r2
 80115de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80115e0:	4b14      	ldr	r3, [pc, #80]	; (8011634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68ba      	ldr	r2, [r7, #8]
 80115e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80115e8:	68ba      	ldr	r2, [r7, #8]
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d209      	bcs.n	8011604 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115f0:	4b13      	ldr	r3, [pc, #76]	; (8011640 <prvAddCurrentTaskToDelayedList+0xc0>)
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	4b0f      	ldr	r3, [pc, #60]	; (8011634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	3304      	adds	r3, #4
 80115fa:	4619      	mov	r1, r3
 80115fc:	4610      	mov	r0, r2
 80115fe:	f7fe fb8e 	bl	800fd1e <vListInsert>
}
 8011602:	e010      	b.n	8011626 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011604:	4b0f      	ldr	r3, [pc, #60]	; (8011644 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <prvAddCurrentTaskToDelayedList+0xb4>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3304      	adds	r3, #4
 801160e:	4619      	mov	r1, r3
 8011610:	4610      	mov	r0, r2
 8011612:	f7fe fb84 	bl	800fd1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011616:	4b0c      	ldr	r3, [pc, #48]	; (8011648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	68ba      	ldr	r2, [r7, #8]
 801161c:	429a      	cmp	r2, r3
 801161e:	d202      	bcs.n	8011626 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011620:	4a09      	ldr	r2, [pc, #36]	; (8011648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	6013      	str	r3, [r2, #0]
}
 8011626:	bf00      	nop
 8011628:	3710      	adds	r7, #16
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	2000099c 	.word	0x2000099c
 8011634:	20000898 	.word	0x20000898
 8011638:	200009a0 	.word	0x200009a0
 801163c:	20000984 	.word	0x20000984
 8011640:	20000954 	.word	0x20000954
 8011644:	20000950 	.word	0x20000950
 8011648:	200009b8 	.word	0x200009b8

0801164c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801164c:	b480      	push	{r7}
 801164e:	b085      	sub	sp, #20
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	3b04      	subs	r3, #4
 801165c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	3b04      	subs	r3, #4
 801166a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	f023 0201 	bic.w	r2, r3, #1
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	3b04      	subs	r3, #4
 801167a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801167c:	4a0c      	ldr	r2, [pc, #48]	; (80116b0 <pxPortInitialiseStack+0x64>)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	3b14      	subs	r3, #20
 8011686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	3b04      	subs	r3, #4
 8011692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f06f 0202 	mvn.w	r2, #2
 801169a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	3b20      	subs	r3, #32
 80116a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80116a2:	68fb      	ldr	r3, [r7, #12]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3714      	adds	r7, #20
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr
 80116b0:	080116b5 	.word	0x080116b5

080116b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80116b4:	b480      	push	{r7}
 80116b6:	b085      	sub	sp, #20
 80116b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80116ba:	2300      	movs	r3, #0
 80116bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80116be:	4b11      	ldr	r3, [pc, #68]	; (8011704 <prvTaskExitError+0x50>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c6:	d009      	beq.n	80116dc <prvTaskExitError+0x28>
 80116c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116cc:	f383 8811 	msr	BASEPRI, r3
 80116d0:	f3bf 8f6f 	isb	sy
 80116d4:	f3bf 8f4f 	dsb	sy
 80116d8:	60fb      	str	r3, [r7, #12]
 80116da:	e7fe      	b.n	80116da <prvTaskExitError+0x26>
 80116dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e0:	f383 8811 	msr	BASEPRI, r3
 80116e4:	f3bf 8f6f 	isb	sy
 80116e8:	f3bf 8f4f 	dsb	sy
 80116ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80116ee:	bf00      	nop
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d0fc      	beq.n	80116f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80116f6:	bf00      	nop
 80116f8:	3714      	adds	r7, #20
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	200003b4 	.word	0x200003b4
	...

08011710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011710:	4b07      	ldr	r3, [pc, #28]	; (8011730 <pxCurrentTCBConst2>)
 8011712:	6819      	ldr	r1, [r3, #0]
 8011714:	6808      	ldr	r0, [r1, #0]
 8011716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171a:	f380 8809 	msr	PSP, r0
 801171e:	f3bf 8f6f 	isb	sy
 8011722:	f04f 0000 	mov.w	r0, #0
 8011726:	f380 8811 	msr	BASEPRI, r0
 801172a:	4770      	bx	lr
 801172c:	f3af 8000 	nop.w

08011730 <pxCurrentTCBConst2>:
 8011730:	20000898 	.word	0x20000898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011734:	bf00      	nop
 8011736:	bf00      	nop

08011738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011738:	4808      	ldr	r0, [pc, #32]	; (801175c <prvPortStartFirstTask+0x24>)
 801173a:	6800      	ldr	r0, [r0, #0]
 801173c:	6800      	ldr	r0, [r0, #0]
 801173e:	f380 8808 	msr	MSP, r0
 8011742:	f04f 0000 	mov.w	r0, #0
 8011746:	f380 8814 	msr	CONTROL, r0
 801174a:	b662      	cpsie	i
 801174c:	b661      	cpsie	f
 801174e:	f3bf 8f4f 	dsb	sy
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	df00      	svc	0
 8011758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801175a:	bf00      	nop
 801175c:	e000ed08 	.word	0xe000ed08

08011760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b086      	sub	sp, #24
 8011764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011766:	4b44      	ldr	r3, [pc, #272]	; (8011878 <xPortStartScheduler+0x118>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4a44      	ldr	r2, [pc, #272]	; (801187c <xPortStartScheduler+0x11c>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d109      	bne.n	8011784 <xPortStartScheduler+0x24>
 8011770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011774:	f383 8811 	msr	BASEPRI, r3
 8011778:	f3bf 8f6f 	isb	sy
 801177c:	f3bf 8f4f 	dsb	sy
 8011780:	613b      	str	r3, [r7, #16]
 8011782:	e7fe      	b.n	8011782 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011784:	4b3c      	ldr	r3, [pc, #240]	; (8011878 <xPortStartScheduler+0x118>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	4a3d      	ldr	r2, [pc, #244]	; (8011880 <xPortStartScheduler+0x120>)
 801178a:	4293      	cmp	r3, r2
 801178c:	d109      	bne.n	80117a2 <xPortStartScheduler+0x42>
 801178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011792:	f383 8811 	msr	BASEPRI, r3
 8011796:	f3bf 8f6f 	isb	sy
 801179a:	f3bf 8f4f 	dsb	sy
 801179e:	60fb      	str	r3, [r7, #12]
 80117a0:	e7fe      	b.n	80117a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80117a2:	4b38      	ldr	r3, [pc, #224]	; (8011884 <xPortStartScheduler+0x124>)
 80117a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	22ff      	movs	r2, #255	; 0xff
 80117b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80117bc:	78fb      	ldrb	r3, [r7, #3]
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80117c4:	b2da      	uxtb	r2, r3
 80117c6:	4b30      	ldr	r3, [pc, #192]	; (8011888 <xPortStartScheduler+0x128>)
 80117c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80117ca:	4b30      	ldr	r3, [pc, #192]	; (801188c <xPortStartScheduler+0x12c>)
 80117cc:	2207      	movs	r2, #7
 80117ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80117d0:	e009      	b.n	80117e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80117d2:	4b2e      	ldr	r3, [pc, #184]	; (801188c <xPortStartScheduler+0x12c>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	3b01      	subs	r3, #1
 80117d8:	4a2c      	ldr	r2, [pc, #176]	; (801188c <xPortStartScheduler+0x12c>)
 80117da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80117dc:	78fb      	ldrb	r3, [r7, #3]
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	005b      	lsls	r3, r3, #1
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80117e6:	78fb      	ldrb	r3, [r7, #3]
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117ee:	2b80      	cmp	r3, #128	; 0x80
 80117f0:	d0ef      	beq.n	80117d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80117f2:	4b26      	ldr	r3, [pc, #152]	; (801188c <xPortStartScheduler+0x12c>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f1c3 0307 	rsb	r3, r3, #7
 80117fa:	2b04      	cmp	r3, #4
 80117fc:	d009      	beq.n	8011812 <xPortStartScheduler+0xb2>
 80117fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011802:	f383 8811 	msr	BASEPRI, r3
 8011806:	f3bf 8f6f 	isb	sy
 801180a:	f3bf 8f4f 	dsb	sy
 801180e:	60bb      	str	r3, [r7, #8]
 8011810:	e7fe      	b.n	8011810 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011812:	4b1e      	ldr	r3, [pc, #120]	; (801188c <xPortStartScheduler+0x12c>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	021b      	lsls	r3, r3, #8
 8011818:	4a1c      	ldr	r2, [pc, #112]	; (801188c <xPortStartScheduler+0x12c>)
 801181a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801181c:	4b1b      	ldr	r3, [pc, #108]	; (801188c <xPortStartScheduler+0x12c>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011824:	4a19      	ldr	r2, [pc, #100]	; (801188c <xPortStartScheduler+0x12c>)
 8011826:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	b2da      	uxtb	r2, r3
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011830:	4b17      	ldr	r3, [pc, #92]	; (8011890 <xPortStartScheduler+0x130>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	4a16      	ldr	r2, [pc, #88]	; (8011890 <xPortStartScheduler+0x130>)
 8011836:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801183a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801183c:	4b14      	ldr	r3, [pc, #80]	; (8011890 <xPortStartScheduler+0x130>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4a13      	ldr	r2, [pc, #76]	; (8011890 <xPortStartScheduler+0x130>)
 8011842:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011846:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011848:	f000 f8d6 	bl	80119f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801184c:	4b11      	ldr	r3, [pc, #68]	; (8011894 <xPortStartScheduler+0x134>)
 801184e:	2200      	movs	r2, #0
 8011850:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011852:	f000 f8f5 	bl	8011a40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011856:	4b10      	ldr	r3, [pc, #64]	; (8011898 <xPortStartScheduler+0x138>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	4a0f      	ldr	r2, [pc, #60]	; (8011898 <xPortStartScheduler+0x138>)
 801185c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011860:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011862:	f7ff ff69 	bl	8011738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011866:	f7ff fbb5 	bl	8010fd4 <vTaskSwitchContext>
	prvTaskExitError();
 801186a:	f7ff ff23 	bl	80116b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3718      	adds	r7, #24
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	e000ed00 	.word	0xe000ed00
 801187c:	410fc271 	.word	0x410fc271
 8011880:	410fc270 	.word	0x410fc270
 8011884:	e000e400 	.word	0xe000e400
 8011888:	200009c4 	.word	0x200009c4
 801188c:	200009c8 	.word	0x200009c8
 8011890:	e000ed20 	.word	0xe000ed20
 8011894:	200003b4 	.word	0x200003b4
 8011898:	e000ef34 	.word	0xe000ef34

0801189c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80118b4:	4b0e      	ldr	r3, [pc, #56]	; (80118f0 <vPortEnterCritical+0x54>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	3301      	adds	r3, #1
 80118ba:	4a0d      	ldr	r2, [pc, #52]	; (80118f0 <vPortEnterCritical+0x54>)
 80118bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80118be:	4b0c      	ldr	r3, [pc, #48]	; (80118f0 <vPortEnterCritical+0x54>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	d10e      	bne.n	80118e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80118c6:	4b0b      	ldr	r3, [pc, #44]	; (80118f4 <vPortEnterCritical+0x58>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	b2db      	uxtb	r3, r3
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d009      	beq.n	80118e4 <vPortEnterCritical+0x48>
 80118d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d4:	f383 8811 	msr	BASEPRI, r3
 80118d8:	f3bf 8f6f 	isb	sy
 80118dc:	f3bf 8f4f 	dsb	sy
 80118e0:	603b      	str	r3, [r7, #0]
 80118e2:	e7fe      	b.n	80118e2 <vPortEnterCritical+0x46>
	}
}
 80118e4:	bf00      	nop
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr
 80118f0:	200003b4 	.word	0x200003b4
 80118f4:	e000ed04 	.word	0xe000ed04

080118f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80118f8:	b480      	push	{r7}
 80118fa:	b083      	sub	sp, #12
 80118fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80118fe:	4b11      	ldr	r3, [pc, #68]	; (8011944 <vPortExitCritical+0x4c>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d109      	bne.n	801191a <vPortExitCritical+0x22>
 8011906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190a:	f383 8811 	msr	BASEPRI, r3
 801190e:	f3bf 8f6f 	isb	sy
 8011912:	f3bf 8f4f 	dsb	sy
 8011916:	607b      	str	r3, [r7, #4]
 8011918:	e7fe      	b.n	8011918 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801191a:	4b0a      	ldr	r3, [pc, #40]	; (8011944 <vPortExitCritical+0x4c>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	3b01      	subs	r3, #1
 8011920:	4a08      	ldr	r2, [pc, #32]	; (8011944 <vPortExitCritical+0x4c>)
 8011922:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011924:	4b07      	ldr	r3, [pc, #28]	; (8011944 <vPortExitCritical+0x4c>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d104      	bne.n	8011936 <vPortExitCritical+0x3e>
 801192c:	2300      	movs	r3, #0
 801192e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011936:	bf00      	nop
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	200003b4 	.word	0x200003b4
	...

08011950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011950:	f3ef 8009 	mrs	r0, PSP
 8011954:	f3bf 8f6f 	isb	sy
 8011958:	4b15      	ldr	r3, [pc, #84]	; (80119b0 <pxCurrentTCBConst>)
 801195a:	681a      	ldr	r2, [r3, #0]
 801195c:	f01e 0f10 	tst.w	lr, #16
 8011960:	bf08      	it	eq
 8011962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196a:	6010      	str	r0, [r2, #0]
 801196c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011974:	f380 8811 	msr	BASEPRI, r0
 8011978:	f3bf 8f4f 	dsb	sy
 801197c:	f3bf 8f6f 	isb	sy
 8011980:	f7ff fb28 	bl	8010fd4 <vTaskSwitchContext>
 8011984:	f04f 0000 	mov.w	r0, #0
 8011988:	f380 8811 	msr	BASEPRI, r0
 801198c:	bc09      	pop	{r0, r3}
 801198e:	6819      	ldr	r1, [r3, #0]
 8011990:	6808      	ldr	r0, [r1, #0]
 8011992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011996:	f01e 0f10 	tst.w	lr, #16
 801199a:	bf08      	it	eq
 801199c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80119a0:	f380 8809 	msr	PSP, r0
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	f3af 8000 	nop.w

080119b0 <pxCurrentTCBConst>:
 80119b0:	20000898 	.word	0x20000898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80119b4:	bf00      	nop
 80119b6:	bf00      	nop

080119b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
	__asm volatile
 80119be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c2:	f383 8811 	msr	BASEPRI, r3
 80119c6:	f3bf 8f6f 	isb	sy
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80119d0:	f7ff fa48 	bl	8010e64 <xTaskIncrementTick>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d003      	beq.n	80119e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80119da:	4b06      	ldr	r3, [pc, #24]	; (80119f4 <SysTick_Handler+0x3c>)
 80119dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e0:	601a      	str	r2, [r3, #0]
 80119e2:	2300      	movs	r3, #0
 80119e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80119ec:	bf00      	nop
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	e000ed04 	.word	0xe000ed04

080119f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80119f8:	b480      	push	{r7}
 80119fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80119fc:	4b0b      	ldr	r3, [pc, #44]	; (8011a2c <vPortSetupTimerInterrupt+0x34>)
 80119fe:	2200      	movs	r2, #0
 8011a00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a02:	4b0b      	ldr	r3, [pc, #44]	; (8011a30 <vPortSetupTimerInterrupt+0x38>)
 8011a04:	2200      	movs	r2, #0
 8011a06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a08:	4b0a      	ldr	r3, [pc, #40]	; (8011a34 <vPortSetupTimerInterrupt+0x3c>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	4a0a      	ldr	r2, [pc, #40]	; (8011a38 <vPortSetupTimerInterrupt+0x40>)
 8011a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a12:	099b      	lsrs	r3, r3, #6
 8011a14:	4a09      	ldr	r2, [pc, #36]	; (8011a3c <vPortSetupTimerInterrupt+0x44>)
 8011a16:	3b01      	subs	r3, #1
 8011a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a1a:	4b04      	ldr	r3, [pc, #16]	; (8011a2c <vPortSetupTimerInterrupt+0x34>)
 8011a1c:	2207      	movs	r2, #7
 8011a1e:	601a      	str	r2, [r3, #0]
}
 8011a20:	bf00      	nop
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop
 8011a2c:	e000e010 	.word	0xe000e010
 8011a30:	e000e018 	.word	0xe000e018
 8011a34:	20000280 	.word	0x20000280
 8011a38:	10624dd3 	.word	0x10624dd3
 8011a3c:	e000e014 	.word	0xe000e014

08011a40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011a40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011a50 <vPortEnableVFP+0x10>
 8011a44:	6801      	ldr	r1, [r0, #0]
 8011a46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011a4a:	6001      	str	r1, [r0, #0]
 8011a4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011a4e:	bf00      	nop
 8011a50:	e000ed88 	.word	0xe000ed88

08011a54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011a54:	b480      	push	{r7}
 8011a56:	b085      	sub	sp, #20
 8011a58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011a5a:	f3ef 8305 	mrs	r3, IPSR
 8011a5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2b0f      	cmp	r3, #15
 8011a64:	d913      	bls.n	8011a8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011a66:	4a16      	ldr	r2, [pc, #88]	; (8011ac0 <vPortValidateInterruptPriority+0x6c>)
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011a70:	4b14      	ldr	r3, [pc, #80]	; (8011ac4 <vPortValidateInterruptPriority+0x70>)
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	7afa      	ldrb	r2, [r7, #11]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d209      	bcs.n	8011a8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7e:	f383 8811 	msr	BASEPRI, r3
 8011a82:	f3bf 8f6f 	isb	sy
 8011a86:	f3bf 8f4f 	dsb	sy
 8011a8a:	607b      	str	r3, [r7, #4]
 8011a8c:	e7fe      	b.n	8011a8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011a8e:	4b0e      	ldr	r3, [pc, #56]	; (8011ac8 <vPortValidateInterruptPriority+0x74>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011a96:	4b0d      	ldr	r3, [pc, #52]	; (8011acc <vPortValidateInterruptPriority+0x78>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d909      	bls.n	8011ab2 <vPortValidateInterruptPriority+0x5e>
 8011a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa2:	f383 8811 	msr	BASEPRI, r3
 8011aa6:	f3bf 8f6f 	isb	sy
 8011aaa:	f3bf 8f4f 	dsb	sy
 8011aae:	603b      	str	r3, [r7, #0]
 8011ab0:	e7fe      	b.n	8011ab0 <vPortValidateInterruptPriority+0x5c>
	}
 8011ab2:	bf00      	nop
 8011ab4:	3714      	adds	r7, #20
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	e000e3f0 	.word	0xe000e3f0
 8011ac4:	200009c4 	.word	0x200009c4
 8011ac8:	e000ed0c 	.word	0xe000ed0c
 8011acc:	200009c8 	.word	0x200009c8

08011ad0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b08a      	sub	sp, #40	; 0x28
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011adc:	f7ff f8f6 	bl	8010ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011ae0:	4b57      	ldr	r3, [pc, #348]	; (8011c40 <pvPortMalloc+0x170>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d101      	bne.n	8011aec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011ae8:	f000 f90c 	bl	8011d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011aec:	4b55      	ldr	r3, [pc, #340]	; (8011c44 <pvPortMalloc+0x174>)
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	4013      	ands	r3, r2
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f040 808c 	bne.w	8011c12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d01c      	beq.n	8011b3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011b00:	2208      	movs	r2, #8
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4413      	add	r3, r2
 8011b06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f003 0307 	and.w	r3, r3, #7
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d013      	beq.n	8011b3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f023 0307 	bic.w	r3, r3, #7
 8011b18:	3308      	adds	r3, #8
 8011b1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f003 0307 	and.w	r3, r3, #7
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d009      	beq.n	8011b3a <pvPortMalloc+0x6a>
 8011b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2a:	f383 8811 	msr	BASEPRI, r3
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	617b      	str	r3, [r7, #20]
 8011b38:	e7fe      	b.n	8011b38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d068      	beq.n	8011c12 <pvPortMalloc+0x142>
 8011b40:	4b41      	ldr	r3, [pc, #260]	; (8011c48 <pvPortMalloc+0x178>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d863      	bhi.n	8011c12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011b4a:	4b40      	ldr	r3, [pc, #256]	; (8011c4c <pvPortMalloc+0x17c>)
 8011b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011b4e:	4b3f      	ldr	r3, [pc, #252]	; (8011c4c <pvPortMalloc+0x17c>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b54:	e004      	b.n	8011b60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d903      	bls.n	8011b72 <pvPortMalloc+0xa2>
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1f1      	bne.n	8011b56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011b72:	4b33      	ldr	r3, [pc, #204]	; (8011c40 <pvPortMalloc+0x170>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d04a      	beq.n	8011c12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b7c:	6a3b      	ldr	r3, [r7, #32]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2208      	movs	r2, #8
 8011b82:	4413      	add	r3, r2
 8011b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	685a      	ldr	r2, [r3, #4]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	1ad2      	subs	r2, r2, r3
 8011b96:	2308      	movs	r3, #8
 8011b98:	005b      	lsls	r3, r3, #1
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d91e      	bls.n	8011bdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	f003 0307 	and.w	r3, r3, #7
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d009      	beq.n	8011bc4 <pvPortMalloc+0xf4>
 8011bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb4:	f383 8811 	msr	BASEPRI, r3
 8011bb8:	f3bf 8f6f 	isb	sy
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	613b      	str	r3, [r7, #16]
 8011bc2:	e7fe      	b.n	8011bc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	685a      	ldr	r2, [r3, #4]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	1ad2      	subs	r2, r2, r3
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011bd6:	69b8      	ldr	r0, [r7, #24]
 8011bd8:	f000 f8f6 	bl	8011dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011bdc:	4b1a      	ldr	r3, [pc, #104]	; (8011c48 <pvPortMalloc+0x178>)
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	1ad3      	subs	r3, r2, r3
 8011be6:	4a18      	ldr	r2, [pc, #96]	; (8011c48 <pvPortMalloc+0x178>)
 8011be8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011bea:	4b17      	ldr	r3, [pc, #92]	; (8011c48 <pvPortMalloc+0x178>)
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	4b18      	ldr	r3, [pc, #96]	; (8011c50 <pvPortMalloc+0x180>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d203      	bcs.n	8011bfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011bf6:	4b14      	ldr	r3, [pc, #80]	; (8011c48 <pvPortMalloc+0x178>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4a15      	ldr	r2, [pc, #84]	; (8011c50 <pvPortMalloc+0x180>)
 8011bfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c00:	685a      	ldr	r2, [r3, #4]
 8011c02:	4b10      	ldr	r3, [pc, #64]	; (8011c44 <pvPortMalloc+0x174>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	431a      	orrs	r2, r3
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0e:	2200      	movs	r2, #0
 8011c10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011c12:	f7ff f869 	bl	8010ce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	f003 0307 	and.w	r3, r3, #7
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d009      	beq.n	8011c34 <pvPortMalloc+0x164>
 8011c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c24:	f383 8811 	msr	BASEPRI, r3
 8011c28:	f3bf 8f6f 	isb	sy
 8011c2c:	f3bf 8f4f 	dsb	sy
 8011c30:	60fb      	str	r3, [r7, #12]
 8011c32:	e7fe      	b.n	8011c32 <pvPortMalloc+0x162>
	return pvReturn;
 8011c34:	69fb      	ldr	r3, [r7, #28]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3728      	adds	r7, #40	; 0x28
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	200045d4 	.word	0x200045d4
 8011c44:	200045e0 	.word	0x200045e0
 8011c48:	200045d8 	.word	0x200045d8
 8011c4c:	200045cc 	.word	0x200045cc
 8011c50:	200045dc 	.word	0x200045dc

08011c54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b086      	sub	sp, #24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d046      	beq.n	8011cf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011c66:	2308      	movs	r3, #8
 8011c68:	425b      	negs	r3, r3
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	685a      	ldr	r2, [r3, #4]
 8011c78:	4b20      	ldr	r3, [pc, #128]	; (8011cfc <vPortFree+0xa8>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	4013      	ands	r3, r2
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d109      	bne.n	8011c96 <vPortFree+0x42>
 8011c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c86:	f383 8811 	msr	BASEPRI, r3
 8011c8a:	f3bf 8f6f 	isb	sy
 8011c8e:	f3bf 8f4f 	dsb	sy
 8011c92:	60fb      	str	r3, [r7, #12]
 8011c94:	e7fe      	b.n	8011c94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d009      	beq.n	8011cb2 <vPortFree+0x5e>
 8011c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca2:	f383 8811 	msr	BASEPRI, r3
 8011ca6:	f3bf 8f6f 	isb	sy
 8011caa:	f3bf 8f4f 	dsb	sy
 8011cae:	60bb      	str	r3, [r7, #8]
 8011cb0:	e7fe      	b.n	8011cb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	685a      	ldr	r2, [r3, #4]
 8011cb6:	4b11      	ldr	r3, [pc, #68]	; (8011cfc <vPortFree+0xa8>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4013      	ands	r3, r2
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d019      	beq.n	8011cf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d115      	bne.n	8011cf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	685a      	ldr	r2, [r3, #4]
 8011ccc:	4b0b      	ldr	r3, [pc, #44]	; (8011cfc <vPortFree+0xa8>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	43db      	mvns	r3, r3
 8011cd2:	401a      	ands	r2, r3
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011cd8:	f7fe fff8 	bl	8010ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	685a      	ldr	r2, [r3, #4]
 8011ce0:	4b07      	ldr	r3, [pc, #28]	; (8011d00 <vPortFree+0xac>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	4a06      	ldr	r2, [pc, #24]	; (8011d00 <vPortFree+0xac>)
 8011ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011cea:	6938      	ldr	r0, [r7, #16]
 8011cec:	f000 f86c 	bl	8011dc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011cf0:	f7fe fffa 	bl	8010ce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011cf4:	bf00      	nop
 8011cf6:	3718      	adds	r7, #24
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	200045e0 	.word	0x200045e0
 8011d00:	200045d8 	.word	0x200045d8

08011d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011d04:	b480      	push	{r7}
 8011d06:	b085      	sub	sp, #20
 8011d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011d0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011d10:	4b27      	ldr	r3, [pc, #156]	; (8011db0 <prvHeapInit+0xac>)
 8011d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f003 0307 	and.w	r3, r3, #7
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d00c      	beq.n	8011d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	3307      	adds	r3, #7
 8011d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f023 0307 	bic.w	r3, r3, #7
 8011d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	4a1f      	ldr	r2, [pc, #124]	; (8011db0 <prvHeapInit+0xac>)
 8011d34:	4413      	add	r3, r2
 8011d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011d3c:	4a1d      	ldr	r2, [pc, #116]	; (8011db4 <prvHeapInit+0xb0>)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011d42:	4b1c      	ldr	r3, [pc, #112]	; (8011db4 <prvHeapInit+0xb0>)
 8011d44:	2200      	movs	r2, #0
 8011d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	68ba      	ldr	r2, [r7, #8]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011d50:	2208      	movs	r2, #8
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	1a9b      	subs	r3, r3, r2
 8011d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f023 0307 	bic.w	r3, r3, #7
 8011d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	4a15      	ldr	r2, [pc, #84]	; (8011db8 <prvHeapInit+0xb4>)
 8011d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011d66:	4b14      	ldr	r3, [pc, #80]	; (8011db8 <prvHeapInit+0xb4>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011d6e:	4b12      	ldr	r3, [pc, #72]	; (8011db8 <prvHeapInit+0xb4>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2200      	movs	r2, #0
 8011d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	1ad2      	subs	r2, r2, r3
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d84:	4b0c      	ldr	r3, [pc, #48]	; (8011db8 <prvHeapInit+0xb4>)
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	4a0a      	ldr	r2, [pc, #40]	; (8011dbc <prvHeapInit+0xb8>)
 8011d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	4a09      	ldr	r2, [pc, #36]	; (8011dc0 <prvHeapInit+0xbc>)
 8011d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d9c:	4b09      	ldr	r3, [pc, #36]	; (8011dc4 <prvHeapInit+0xc0>)
 8011d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011da2:	601a      	str	r2, [r3, #0]
}
 8011da4:	bf00      	nop
 8011da6:	3714      	adds	r7, #20
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr
 8011db0:	200009cc 	.word	0x200009cc
 8011db4:	200045cc 	.word	0x200045cc
 8011db8:	200045d4 	.word	0x200045d4
 8011dbc:	200045dc 	.word	0x200045dc
 8011dc0:	200045d8 	.word	0x200045d8
 8011dc4:	200045e0 	.word	0x200045e0

08011dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b085      	sub	sp, #20
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011dd0:	4b28      	ldr	r3, [pc, #160]	; (8011e74 <prvInsertBlockIntoFreeList+0xac>)
 8011dd2:	60fb      	str	r3, [r7, #12]
 8011dd4:	e002      	b.n	8011ddc <prvInsertBlockIntoFreeList+0x14>
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	60fb      	str	r3, [r7, #12]
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d8f7      	bhi.n	8011dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	68ba      	ldr	r2, [r7, #8]
 8011df0:	4413      	add	r3, r2
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d108      	bne.n	8011e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	685a      	ldr	r2, [r3, #4]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	441a      	add	r2, r3
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	441a      	add	r2, r3
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d118      	bne.n	8011e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	4b15      	ldr	r3, [pc, #84]	; (8011e78 <prvInsertBlockIntoFreeList+0xb0>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d00d      	beq.n	8011e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	685a      	ldr	r2, [r3, #4]
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	441a      	add	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	601a      	str	r2, [r3, #0]
 8011e44:	e008      	b.n	8011e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011e46:	4b0c      	ldr	r3, [pc, #48]	; (8011e78 <prvInsertBlockIntoFreeList+0xb0>)
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	601a      	str	r2, [r3, #0]
 8011e4e:	e003      	b.n	8011e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011e58:	68fa      	ldr	r2, [r7, #12]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d002      	beq.n	8011e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e66:	bf00      	nop
 8011e68:	3714      	adds	r7, #20
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	200045cc 	.word	0x200045cc
 8011e78:	200045d4 	.word	0x200045d4

08011e7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011e80:	2200      	movs	r2, #0
 8011e82:	4912      	ldr	r1, [pc, #72]	; (8011ecc <MX_USB_DEVICE_Init+0x50>)
 8011e84:	4812      	ldr	r0, [pc, #72]	; (8011ed0 <MX_USB_DEVICE_Init+0x54>)
 8011e86:	f7fc fbe3 	bl	800e650 <USBD_Init>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d001      	beq.n	8011e94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011e90:	f7f2 fe94 	bl	8004bbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011e94:	490f      	ldr	r1, [pc, #60]	; (8011ed4 <MX_USB_DEVICE_Init+0x58>)
 8011e96:	480e      	ldr	r0, [pc, #56]	; (8011ed0 <MX_USB_DEVICE_Init+0x54>)
 8011e98:	f7fc fc10 	bl	800e6bc <USBD_RegisterClass>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d001      	beq.n	8011ea6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011ea2:	f7f2 fe8b 	bl	8004bbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011ea6:	490c      	ldr	r1, [pc, #48]	; (8011ed8 <MX_USB_DEVICE_Init+0x5c>)
 8011ea8:	4809      	ldr	r0, [pc, #36]	; (8011ed0 <MX_USB_DEVICE_Init+0x54>)
 8011eaa:	f7fc fb35 	bl	800e518 <USBD_CDC_RegisterInterface>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d001      	beq.n	8011eb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011eb4:	f7f2 fe82 	bl	8004bbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011eb8:	4805      	ldr	r0, [pc, #20]	; (8011ed0 <MX_USB_DEVICE_Init+0x54>)
 8011eba:	f7fc fc20 	bl	800e6fe <USBD_Start>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d001      	beq.n	8011ec8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011ec4:	f7f2 fe7a 	bl	8004bbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011ec8:	bf00      	nop
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	200003d4 	.word	0x200003d4
 8011ed0:	20004f94 	.word	0x20004f94
 8011ed4:	200002b0 	.word	0x200002b0
 8011ed8:	200003c0 	.word	0x200003c0

08011edc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	4905      	ldr	r1, [pc, #20]	; (8011ef8 <CDC_Init_FS+0x1c>)
 8011ee4:	4805      	ldr	r0, [pc, #20]	; (8011efc <CDC_Init_FS+0x20>)
 8011ee6:	f7fc fb2c 	bl	800e542 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011eea:	4905      	ldr	r1, [pc, #20]	; (8011f00 <CDC_Init_FS+0x24>)
 8011eec:	4803      	ldr	r0, [pc, #12]	; (8011efc <CDC_Init_FS+0x20>)
 8011eee:	f7fc fb41 	bl	800e574 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011ef2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	20005a64 	.word	0x20005a64
 8011efc:	20004f94 	.word	0x20004f94
 8011f00:	20005264 	.word	0x20005264

08011f04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011f04:	b480      	push	{r7}
 8011f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011f08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr

08011f14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	6039      	str	r1, [r7, #0]
 8011f1e:	71fb      	strb	r3, [r7, #7]
 8011f20:	4613      	mov	r3, r2
 8011f22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	2b23      	cmp	r3, #35	; 0x23
 8011f28:	d85c      	bhi.n	8011fe4 <CDC_Control_FS+0xd0>
 8011f2a:	a201      	add	r2, pc, #4	; (adr r2, 8011f30 <CDC_Control_FS+0x1c>)
 8011f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f30:	08011fe5 	.word	0x08011fe5
 8011f34:	08011fe5 	.word	0x08011fe5
 8011f38:	08011fe5 	.word	0x08011fe5
 8011f3c:	08011fe5 	.word	0x08011fe5
 8011f40:	08011fe5 	.word	0x08011fe5
 8011f44:	08011fe5 	.word	0x08011fe5
 8011f48:	08011fe5 	.word	0x08011fe5
 8011f4c:	08011fe5 	.word	0x08011fe5
 8011f50:	08011fe5 	.word	0x08011fe5
 8011f54:	08011fe5 	.word	0x08011fe5
 8011f58:	08011fe5 	.word	0x08011fe5
 8011f5c:	08011fe5 	.word	0x08011fe5
 8011f60:	08011fe5 	.word	0x08011fe5
 8011f64:	08011fe5 	.word	0x08011fe5
 8011f68:	08011fe5 	.word	0x08011fe5
 8011f6c:	08011fe5 	.word	0x08011fe5
 8011f70:	08011fe5 	.word	0x08011fe5
 8011f74:	08011fe5 	.word	0x08011fe5
 8011f78:	08011fe5 	.word	0x08011fe5
 8011f7c:	08011fe5 	.word	0x08011fe5
 8011f80:	08011fe5 	.word	0x08011fe5
 8011f84:	08011fe5 	.word	0x08011fe5
 8011f88:	08011fe5 	.word	0x08011fe5
 8011f8c:	08011fe5 	.word	0x08011fe5
 8011f90:	08011fe5 	.word	0x08011fe5
 8011f94:	08011fe5 	.word	0x08011fe5
 8011f98:	08011fe5 	.word	0x08011fe5
 8011f9c:	08011fe5 	.word	0x08011fe5
 8011fa0:	08011fe5 	.word	0x08011fe5
 8011fa4:	08011fe5 	.word	0x08011fe5
 8011fa8:	08011fe5 	.word	0x08011fe5
 8011fac:	08011fe5 	.word	0x08011fe5
 8011fb0:	08011fc1 	.word	0x08011fc1
 8011fb4:	08011fd3 	.word	0x08011fd3
 8011fb8:	08011fe5 	.word	0x08011fe5
 8011fbc:	08011fe5 	.word	0x08011fe5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8011fc0:	4b0c      	ldr	r3, [pc, #48]	; (8011ff4 <CDC_Control_FS+0xe0>)
 8011fc2:	683a      	ldr	r2, [r7, #0]
 8011fc4:	6810      	ldr	r0, [r2, #0]
 8011fc6:	6018      	str	r0, [r3, #0]
 8011fc8:	8891      	ldrh	r1, [r2, #4]
 8011fca:	7992      	ldrb	r2, [r2, #6]
 8011fcc:	8099      	strh	r1, [r3, #4]
 8011fce:	719a      	strb	r2, [r3, #6]
    break;
 8011fd0:	e009      	b.n	8011fe6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	4a07      	ldr	r2, [pc, #28]	; (8011ff4 <CDC_Control_FS+0xe0>)
 8011fd6:	6810      	ldr	r0, [r2, #0]
 8011fd8:	6018      	str	r0, [r3, #0]
 8011fda:	8891      	ldrh	r1, [r2, #4]
 8011fdc:	7992      	ldrb	r2, [r2, #6]
 8011fde:	8099      	strh	r1, [r3, #4]
 8011fe0:	719a      	strb	r2, [r3, #6]
    break;
 8011fe2:	e000      	b.n	8011fe6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011fe4:	bf00      	nop
  }

  return (USBD_OK);
 8011fe6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	370c      	adds	r7, #12
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr
 8011ff4:	200003b8 	.word	0x200003b8

08011ff8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012002:	6879      	ldr	r1, [r7, #4]
 8012004:	4805      	ldr	r0, [pc, #20]	; (801201c <CDC_Receive_FS+0x24>)
 8012006:	f7fc fab5 	bl	800e574 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801200a:	4804      	ldr	r0, [pc, #16]	; (801201c <CDC_Receive_FS+0x24>)
 801200c:	f7fc faf6 	bl	800e5fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012010:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012012:	4618      	mov	r0, r3
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	20004f94 	.word	0x20004f94

08012020 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	460b      	mov	r3, r1
 801202a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801202c:	2300      	movs	r3, #0
 801202e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012030:	4b0d      	ldr	r3, [pc, #52]	; (8012068 <CDC_Transmit_FS+0x48>)
 8012032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012036:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801203e:	2b00      	cmp	r3, #0
 8012040:	d001      	beq.n	8012046 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012042:	2301      	movs	r3, #1
 8012044:	e00b      	b.n	801205e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012046:	887b      	ldrh	r3, [r7, #2]
 8012048:	461a      	mov	r2, r3
 801204a:	6879      	ldr	r1, [r7, #4]
 801204c:	4806      	ldr	r0, [pc, #24]	; (8012068 <CDC_Transmit_FS+0x48>)
 801204e:	f7fc fa78 	bl	800e542 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012052:	4805      	ldr	r0, [pc, #20]	; (8012068 <CDC_Transmit_FS+0x48>)
 8012054:	f7fc faa2 	bl	800e59c <USBD_CDC_TransmitPacket>
 8012058:	4603      	mov	r3, r0
 801205a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801205c:	7bfb      	ldrb	r3, [r7, #15]
}
 801205e:	4618      	mov	r0, r3
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	20004f94 	.word	0x20004f94

0801206c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801206c:	b480      	push	{r7}
 801206e:	b087      	sub	sp, #28
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	4613      	mov	r3, r2
 8012078:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801207a:	2300      	movs	r3, #0
 801207c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801207e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012082:	4618      	mov	r0, r3
 8012084:	371c      	adds	r7, #28
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
	...

08012090 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	4603      	mov	r3, r0
 8012098:	6039      	str	r1, [r7, #0]
 801209a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	2212      	movs	r2, #18
 80120a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80120a2:	4b03      	ldr	r3, [pc, #12]	; (80120b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr
 80120b0:	200003f4 	.word	0x200003f4

080120b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	4603      	mov	r3, r0
 80120bc:	6039      	str	r1, [r7, #0]
 80120be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	2204      	movs	r2, #4
 80120c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80120c6:	4b03      	ldr	r3, [pc, #12]	; (80120d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	370c      	adds	r7, #12
 80120cc:	46bd      	mov	sp, r7
 80120ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d2:	4770      	bx	lr
 80120d4:	20000414 	.word	0x20000414

080120d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	4603      	mov	r3, r0
 80120e0:	6039      	str	r1, [r7, #0]
 80120e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80120e4:	79fb      	ldrb	r3, [r7, #7]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d105      	bne.n	80120f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80120ea:	683a      	ldr	r2, [r7, #0]
 80120ec:	4907      	ldr	r1, [pc, #28]	; (801210c <USBD_FS_ProductStrDescriptor+0x34>)
 80120ee:	4808      	ldr	r0, [pc, #32]	; (8012110 <USBD_FS_ProductStrDescriptor+0x38>)
 80120f0:	f7fd fafd 	bl	800f6ee <USBD_GetString>
 80120f4:	e004      	b.n	8012100 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	4904      	ldr	r1, [pc, #16]	; (801210c <USBD_FS_ProductStrDescriptor+0x34>)
 80120fa:	4805      	ldr	r0, [pc, #20]	; (8012110 <USBD_FS_ProductStrDescriptor+0x38>)
 80120fc:	f7fd faf7 	bl	800f6ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8012100:	4b02      	ldr	r3, [pc, #8]	; (801210c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012102:	4618      	mov	r0, r3
 8012104:	3708      	adds	r7, #8
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	20006264 	.word	0x20006264
 8012110:	08018248 	.word	0x08018248

08012114 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	4603      	mov	r3, r0
 801211c:	6039      	str	r1, [r7, #0]
 801211e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	4904      	ldr	r1, [pc, #16]	; (8012134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012124:	4804      	ldr	r0, [pc, #16]	; (8012138 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012126:	f7fd fae2 	bl	800f6ee <USBD_GetString>
  return USBD_StrDesc;
 801212a:	4b02      	ldr	r3, [pc, #8]	; (8012134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801212c:	4618      	mov	r0, r3
 801212e:	3708      	adds	r7, #8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	20006264 	.word	0x20006264
 8012138:	08018260 	.word	0x08018260

0801213c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	4603      	mov	r3, r0
 8012144:	6039      	str	r1, [r7, #0]
 8012146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	221a      	movs	r2, #26
 801214c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801214e:	f000 f855 	bl	80121fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012152:	4b02      	ldr	r3, [pc, #8]	; (801215c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012154:	4618      	mov	r0, r3
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	20000418 	.word	0x20000418

08012160 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	4603      	mov	r3, r0
 8012168:	6039      	str	r1, [r7, #0]
 801216a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801216c:	79fb      	ldrb	r3, [r7, #7]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d105      	bne.n	801217e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012172:	683a      	ldr	r2, [r7, #0]
 8012174:	4907      	ldr	r1, [pc, #28]	; (8012194 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012176:	4808      	ldr	r0, [pc, #32]	; (8012198 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012178:	f7fd fab9 	bl	800f6ee <USBD_GetString>
 801217c:	e004      	b.n	8012188 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801217e:	683a      	ldr	r2, [r7, #0]
 8012180:	4904      	ldr	r1, [pc, #16]	; (8012194 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012182:	4805      	ldr	r0, [pc, #20]	; (8012198 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012184:	f7fd fab3 	bl	800f6ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8012188:	4b02      	ldr	r3, [pc, #8]	; (8012194 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801218a:	4618      	mov	r0, r3
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	20006264 	.word	0x20006264
 8012198:	08018274 	.word	0x08018274

0801219c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	4603      	mov	r3, r0
 80121a4:	6039      	str	r1, [r7, #0]
 80121a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80121a8:	79fb      	ldrb	r3, [r7, #7]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d105      	bne.n	80121ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80121ae:	683a      	ldr	r2, [r7, #0]
 80121b0:	4907      	ldr	r1, [pc, #28]	; (80121d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80121b2:	4808      	ldr	r0, [pc, #32]	; (80121d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80121b4:	f7fd fa9b 	bl	800f6ee <USBD_GetString>
 80121b8:	e004      	b.n	80121c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80121ba:	683a      	ldr	r2, [r7, #0]
 80121bc:	4904      	ldr	r1, [pc, #16]	; (80121d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80121be:	4805      	ldr	r0, [pc, #20]	; (80121d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80121c0:	f7fd fa95 	bl	800f6ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80121c4:	4b02      	ldr	r3, [pc, #8]	; (80121d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3708      	adds	r7, #8
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	20006264 	.word	0x20006264
 80121d4:	08018280 	.word	0x08018280

080121d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	4603      	mov	r3, r0
 80121e0:	6039      	str	r1, [r7, #0]
 80121e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	220c      	movs	r2, #12
 80121e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80121ea:	4b03      	ldr	r3, [pc, #12]	; (80121f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr
 80121f8:	20000408 	.word	0x20000408

080121fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012202:	4b0f      	ldr	r3, [pc, #60]	; (8012240 <Get_SerialNum+0x44>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012208:	4b0e      	ldr	r3, [pc, #56]	; (8012244 <Get_SerialNum+0x48>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801220e:	4b0e      	ldr	r3, [pc, #56]	; (8012248 <Get_SerialNum+0x4c>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012214:	68fa      	ldr	r2, [r7, #12]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	4413      	add	r3, r2
 801221a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d009      	beq.n	8012236 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012222:	2208      	movs	r2, #8
 8012224:	4909      	ldr	r1, [pc, #36]	; (801224c <Get_SerialNum+0x50>)
 8012226:	68f8      	ldr	r0, [r7, #12]
 8012228:	f000 f814 	bl	8012254 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801222c:	2204      	movs	r2, #4
 801222e:	4908      	ldr	r1, [pc, #32]	; (8012250 <Get_SerialNum+0x54>)
 8012230:	68b8      	ldr	r0, [r7, #8]
 8012232:	f000 f80f 	bl	8012254 <IntToUnicode>
  }
}
 8012236:	bf00      	nop
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	1fff7a10 	.word	0x1fff7a10
 8012244:	1fff7a14 	.word	0x1fff7a14
 8012248:	1fff7a18 	.word	0x1fff7a18
 801224c:	2000041a 	.word	0x2000041a
 8012250:	2000042a 	.word	0x2000042a

08012254 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012254:	b480      	push	{r7}
 8012256:	b087      	sub	sp, #28
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	4613      	mov	r3, r2
 8012260:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012262:	2300      	movs	r3, #0
 8012264:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012266:	2300      	movs	r3, #0
 8012268:	75fb      	strb	r3, [r7, #23]
 801226a:	e027      	b.n	80122bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	0f1b      	lsrs	r3, r3, #28
 8012270:	2b09      	cmp	r3, #9
 8012272:	d80b      	bhi.n	801228c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	0f1b      	lsrs	r3, r3, #28
 8012278:	b2da      	uxtb	r2, r3
 801227a:	7dfb      	ldrb	r3, [r7, #23]
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	4619      	mov	r1, r3
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	440b      	add	r3, r1
 8012284:	3230      	adds	r2, #48	; 0x30
 8012286:	b2d2      	uxtb	r2, r2
 8012288:	701a      	strb	r2, [r3, #0]
 801228a:	e00a      	b.n	80122a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	0f1b      	lsrs	r3, r3, #28
 8012290:	b2da      	uxtb	r2, r3
 8012292:	7dfb      	ldrb	r3, [r7, #23]
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	4619      	mov	r1, r3
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	440b      	add	r3, r1
 801229c:	3237      	adds	r2, #55	; 0x37
 801229e:	b2d2      	uxtb	r2, r2
 80122a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	011b      	lsls	r3, r3, #4
 80122a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80122a8:	7dfb      	ldrb	r3, [r7, #23]
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	3301      	adds	r3, #1
 80122ae:	68ba      	ldr	r2, [r7, #8]
 80122b0:	4413      	add	r3, r2
 80122b2:	2200      	movs	r2, #0
 80122b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80122b6:	7dfb      	ldrb	r3, [r7, #23]
 80122b8:	3301      	adds	r3, #1
 80122ba:	75fb      	strb	r3, [r7, #23]
 80122bc:	7dfa      	ldrb	r2, [r7, #23]
 80122be:	79fb      	ldrb	r3, [r7, #7]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d3d3      	bcc.n	801226c <IntToUnicode+0x18>
  }
}
 80122c4:	bf00      	nop
 80122c6:	371c      	adds	r7, #28
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b08a      	sub	sp, #40	; 0x28
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80122d8:	f107 0314 	add.w	r3, r7, #20
 80122dc:	2200      	movs	r2, #0
 80122de:	601a      	str	r2, [r3, #0]
 80122e0:	605a      	str	r2, [r3, #4]
 80122e2:	609a      	str	r2, [r3, #8]
 80122e4:	60da      	str	r2, [r3, #12]
 80122e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80122f0:	d13a      	bne.n	8012368 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80122f2:	2300      	movs	r3, #0
 80122f4:	613b      	str	r3, [r7, #16]
 80122f6:	4b1e      	ldr	r3, [pc, #120]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 80122f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122fa:	4a1d      	ldr	r2, [pc, #116]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 80122fc:	f043 0301 	orr.w	r3, r3, #1
 8012300:	6313      	str	r3, [r2, #48]	; 0x30
 8012302:	4b1b      	ldr	r3, [pc, #108]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 8012304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012306:	f003 0301 	and.w	r3, r3, #1
 801230a:	613b      	str	r3, [r7, #16]
 801230c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801230e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012314:	2302      	movs	r3, #2
 8012316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012318:	2300      	movs	r3, #0
 801231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801231c:	2303      	movs	r3, #3
 801231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012320:	230a      	movs	r3, #10
 8012322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012324:	f107 0314 	add.w	r3, r7, #20
 8012328:	4619      	mov	r1, r3
 801232a:	4812      	ldr	r0, [pc, #72]	; (8012374 <HAL_PCD_MspInit+0xa4>)
 801232c:	f7f4 fb78 	bl	8006a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012330:	4b0f      	ldr	r3, [pc, #60]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 8012332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012334:	4a0e      	ldr	r2, [pc, #56]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 8012336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801233a:	6353      	str	r3, [r2, #52]	; 0x34
 801233c:	2300      	movs	r3, #0
 801233e:	60fb      	str	r3, [r7, #12]
 8012340:	4b0b      	ldr	r3, [pc, #44]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 8012342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012344:	4a0a      	ldr	r2, [pc, #40]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 8012346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801234a:	6453      	str	r3, [r2, #68]	; 0x44
 801234c:	4b08      	ldr	r3, [pc, #32]	; (8012370 <HAL_PCD_MspInit+0xa0>)
 801234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012354:	60fb      	str	r3, [r7, #12]
 8012356:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012358:	2200      	movs	r2, #0
 801235a:	2105      	movs	r1, #5
 801235c:	2043      	movs	r0, #67	; 0x43
 801235e:	f7f3 ffc7 	bl	80062f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012362:	2043      	movs	r0, #67	; 0x43
 8012364:	f7f3 ffe0 	bl	8006328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012368:	bf00      	nop
 801236a:	3728      	adds	r7, #40	; 0x28
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	40023800 	.word	0x40023800
 8012374:	40020000 	.word	0x40020000

08012378 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801238c:	4619      	mov	r1, r3
 801238e:	4610      	mov	r0, r2
 8012390:	f7fc fa00 	bl	800e794 <USBD_LL_SetupStage>
}
 8012394:	bf00      	nop
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	460b      	mov	r3, r1
 80123a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80123ae:	78fa      	ldrb	r2, [r7, #3]
 80123b0:	6879      	ldr	r1, [r7, #4]
 80123b2:	4613      	mov	r3, r2
 80123b4:	00db      	lsls	r3, r3, #3
 80123b6:	1a9b      	subs	r3, r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	440b      	add	r3, r1
 80123bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	78fb      	ldrb	r3, [r7, #3]
 80123c4:	4619      	mov	r1, r3
 80123c6:	f7fc fa38 	bl	800e83a <USBD_LL_DataOutStage>
}
 80123ca:	bf00      	nop
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b082      	sub	sp, #8
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	460b      	mov	r3, r1
 80123dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80123e4:	78fa      	ldrb	r2, [r7, #3]
 80123e6:	6879      	ldr	r1, [r7, #4]
 80123e8:	4613      	mov	r3, r2
 80123ea:	00db      	lsls	r3, r3, #3
 80123ec:	1a9b      	subs	r3, r3, r2
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	440b      	add	r3, r1
 80123f2:	3348      	adds	r3, #72	; 0x48
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	78fb      	ldrb	r3, [r7, #3]
 80123f8:	4619      	mov	r1, r3
 80123fa:	f7fc fa81 	bl	800e900 <USBD_LL_DataInStage>
}
 80123fe:	bf00      	nop
 8012400:	3708      	adds	r7, #8
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}

08012406 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012406:	b580      	push	{r7, lr}
 8012408:	b082      	sub	sp, #8
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012414:	4618      	mov	r0, r3
 8012416:	f7fc fb85 	bl	800eb24 <USBD_LL_SOF>
}
 801241a:	bf00      	nop
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012422:	b580      	push	{r7, lr}
 8012424:	b084      	sub	sp, #16
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801242a:	2301      	movs	r3, #1
 801242c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d102      	bne.n	801243c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012436:	2300      	movs	r3, #0
 8012438:	73fb      	strb	r3, [r7, #15]
 801243a:	e008      	b.n	801244e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	2b02      	cmp	r3, #2
 8012442:	d102      	bne.n	801244a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012444:	2301      	movs	r3, #1
 8012446:	73fb      	strb	r3, [r7, #15]
 8012448:	e001      	b.n	801244e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801244a:	f7f2 fbb7 	bl	8004bbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012454:	7bfa      	ldrb	r2, [r7, #15]
 8012456:	4611      	mov	r1, r2
 8012458:	4618      	mov	r0, r3
 801245a:	f7fc fb28 	bl	800eaae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012464:	4618      	mov	r0, r3
 8012466:	f7fc fae1 	bl	800ea2c <USBD_LL_Reset>
}
 801246a:	bf00      	nop
 801246c:	3710      	adds	r7, #16
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
	...

08012474 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012482:	4618      	mov	r0, r3
 8012484:	f7fc fb23 	bl	800eace <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	6812      	ldr	r2, [r2, #0]
 8012496:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801249a:	f043 0301 	orr.w	r3, r3, #1
 801249e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6a1b      	ldr	r3, [r3, #32]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d005      	beq.n	80124b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80124a8:	4b04      	ldr	r3, [pc, #16]	; (80124bc <HAL_PCD_SuspendCallback+0x48>)
 80124aa:	691b      	ldr	r3, [r3, #16]
 80124ac:	4a03      	ldr	r2, [pc, #12]	; (80124bc <HAL_PCD_SuspendCallback+0x48>)
 80124ae:	f043 0306 	orr.w	r3, r3, #6
 80124b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80124b4:	bf00      	nop
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	e000ed00 	.word	0xe000ed00

080124c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fc fb12 	bl	800eaf8 <USBD_LL_Resume>
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	460b      	mov	r3, r1
 80124e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124ee:	78fa      	ldrb	r2, [r7, #3]
 80124f0:	4611      	mov	r1, r2
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fc fb3d 	bl	800eb72 <USBD_LL_IsoOUTIncomplete>
}
 80124f8:	bf00      	nop
 80124fa:	3708      	adds	r7, #8
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	460b      	mov	r3, r1
 801250a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012512:	78fa      	ldrb	r2, [r7, #3]
 8012514:	4611      	mov	r1, r2
 8012516:	4618      	mov	r0, r3
 8012518:	f7fc fb1e 	bl	800eb58 <USBD_LL_IsoINIncomplete>
}
 801251c:	bf00      	nop
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012532:	4618      	mov	r0, r3
 8012534:	f7fc fb2a 	bl	800eb8c <USBD_LL_DevConnected>
}
 8012538:	bf00      	nop
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801254e:	4618      	mov	r0, r3
 8012550:	f7fc fb27 	bl	800eba2 <USBD_LL_DevDisconnected>
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d13c      	bne.n	80125e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801256c:	4a20      	ldr	r2, [pc, #128]	; (80125f0 <USBD_LL_Init+0x94>)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4a1e      	ldr	r2, [pc, #120]	; (80125f0 <USBD_LL_Init+0x94>)
 8012578:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801257c:	4b1c      	ldr	r3, [pc, #112]	; (80125f0 <USBD_LL_Init+0x94>)
 801257e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012582:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012584:	4b1a      	ldr	r3, [pc, #104]	; (80125f0 <USBD_LL_Init+0x94>)
 8012586:	2206      	movs	r2, #6
 8012588:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801258a:	4b19      	ldr	r3, [pc, #100]	; (80125f0 <USBD_LL_Init+0x94>)
 801258c:	2202      	movs	r2, #2
 801258e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012590:	4b17      	ldr	r3, [pc, #92]	; (80125f0 <USBD_LL_Init+0x94>)
 8012592:	2200      	movs	r2, #0
 8012594:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012596:	4b16      	ldr	r3, [pc, #88]	; (80125f0 <USBD_LL_Init+0x94>)
 8012598:	2202      	movs	r2, #2
 801259a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801259c:	4b14      	ldr	r3, [pc, #80]	; (80125f0 <USBD_LL_Init+0x94>)
 801259e:	2200      	movs	r2, #0
 80125a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80125a2:	4b13      	ldr	r3, [pc, #76]	; (80125f0 <USBD_LL_Init+0x94>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80125a8:	4b11      	ldr	r3, [pc, #68]	; (80125f0 <USBD_LL_Init+0x94>)
 80125aa:	2200      	movs	r2, #0
 80125ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80125ae:	4b10      	ldr	r3, [pc, #64]	; (80125f0 <USBD_LL_Init+0x94>)
 80125b0:	2200      	movs	r2, #0
 80125b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80125b4:	4b0e      	ldr	r3, [pc, #56]	; (80125f0 <USBD_LL_Init+0x94>)
 80125b6:	2200      	movs	r2, #0
 80125b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80125ba:	480d      	ldr	r0, [pc, #52]	; (80125f0 <USBD_LL_Init+0x94>)
 80125bc:	f7f5 fbbf 	bl	8007d3e <HAL_PCD_Init>
 80125c0:	4603      	mov	r3, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d001      	beq.n	80125ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80125c6:	f7f2 faf9 	bl	8004bbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80125ca:	2180      	movs	r1, #128	; 0x80
 80125cc:	4808      	ldr	r0, [pc, #32]	; (80125f0 <USBD_LL_Init+0x94>)
 80125ce:	f7f6 fd50 	bl	8009072 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80125d2:	2240      	movs	r2, #64	; 0x40
 80125d4:	2100      	movs	r1, #0
 80125d6:	4806      	ldr	r0, [pc, #24]	; (80125f0 <USBD_LL_Init+0x94>)
 80125d8:	f7f6 fd04 	bl	8008fe4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80125dc:	2280      	movs	r2, #128	; 0x80
 80125de:	2101      	movs	r1, #1
 80125e0:	4803      	ldr	r0, [pc, #12]	; (80125f0 <USBD_LL_Init+0x94>)
 80125e2:	f7f6 fcff 	bl	8008fe4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80125e6:	2300      	movs	r3, #0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3708      	adds	r7, #8
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}
 80125f0:	20006464 	.word	0x20006464

080125f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125fc:	2300      	movs	r3, #0
 80125fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012600:	2300      	movs	r3, #0
 8012602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801260a:	4618      	mov	r0, r3
 801260c:	f7f5 fcbb 	bl	8007f86 <HAL_PCD_Start>
 8012610:	4603      	mov	r3, r0
 8012612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012614:	7bfb      	ldrb	r3, [r7, #15]
 8012616:	4618      	mov	r0, r3
 8012618:	f000 f978 	bl	801290c <USBD_Get_USB_Status>
 801261c:	4603      	mov	r3, r0
 801261e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012620:	7bbb      	ldrb	r3, [r7, #14]
}
 8012622:	4618      	mov	r0, r3
 8012624:	3710      	adds	r7, #16
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}

0801262a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801262a:	b580      	push	{r7, lr}
 801262c:	b084      	sub	sp, #16
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
 8012632:	4608      	mov	r0, r1
 8012634:	4611      	mov	r1, r2
 8012636:	461a      	mov	r2, r3
 8012638:	4603      	mov	r3, r0
 801263a:	70fb      	strb	r3, [r7, #3]
 801263c:	460b      	mov	r3, r1
 801263e:	70bb      	strb	r3, [r7, #2]
 8012640:	4613      	mov	r3, r2
 8012642:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012644:	2300      	movs	r3, #0
 8012646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012648:	2300      	movs	r3, #0
 801264a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012652:	78bb      	ldrb	r3, [r7, #2]
 8012654:	883a      	ldrh	r2, [r7, #0]
 8012656:	78f9      	ldrb	r1, [r7, #3]
 8012658:	f7f6 f8cc 	bl	80087f4 <HAL_PCD_EP_Open>
 801265c:	4603      	mov	r3, r0
 801265e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012660:	7bfb      	ldrb	r3, [r7, #15]
 8012662:	4618      	mov	r0, r3
 8012664:	f000 f952 	bl	801290c <USBD_Get_USB_Status>
 8012668:	4603      	mov	r3, r0
 801266a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801266c:	7bbb      	ldrb	r3, [r7, #14]
}
 801266e:	4618      	mov	r0, r3
 8012670:	3710      	adds	r7, #16
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}

08012676 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012676:	b580      	push	{r7, lr}
 8012678:	b084      	sub	sp, #16
 801267a:	af00      	add	r7, sp, #0
 801267c:	6078      	str	r0, [r7, #4]
 801267e:	460b      	mov	r3, r1
 8012680:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012682:	2300      	movs	r3, #0
 8012684:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012686:	2300      	movs	r3, #0
 8012688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012690:	78fa      	ldrb	r2, [r7, #3]
 8012692:	4611      	mov	r1, r2
 8012694:	4618      	mov	r0, r3
 8012696:	f7f6 f915 	bl	80088c4 <HAL_PCD_EP_Close>
 801269a:	4603      	mov	r3, r0
 801269c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801269e:	7bfb      	ldrb	r3, [r7, #15]
 80126a0:	4618      	mov	r0, r3
 80126a2:	f000 f933 	bl	801290c <USBD_Get_USB_Status>
 80126a6:	4603      	mov	r3, r0
 80126a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3710      	adds	r7, #16
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	460b      	mov	r3, r1
 80126be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126c0:	2300      	movs	r3, #0
 80126c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126c4:	2300      	movs	r3, #0
 80126c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80126ce:	78fa      	ldrb	r2, [r7, #3]
 80126d0:	4611      	mov	r1, r2
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7f6 f9ed 	bl	8008ab2 <HAL_PCD_EP_SetStall>
 80126d8:	4603      	mov	r3, r0
 80126da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126dc:	7bfb      	ldrb	r3, [r7, #15]
 80126de:	4618      	mov	r0, r3
 80126e0:	f000 f914 	bl	801290c <USBD_Get_USB_Status>
 80126e4:	4603      	mov	r3, r0
 80126e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3710      	adds	r7, #16
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}

080126f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b084      	sub	sp, #16
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	460b      	mov	r3, r1
 80126fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126fe:	2300      	movs	r3, #0
 8012700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012702:	2300      	movs	r3, #0
 8012704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801270c:	78fa      	ldrb	r2, [r7, #3]
 801270e:	4611      	mov	r1, r2
 8012710:	4618      	mov	r0, r3
 8012712:	f7f6 fa32 	bl	8008b7a <HAL_PCD_EP_ClrStall>
 8012716:	4603      	mov	r3, r0
 8012718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801271a:	7bfb      	ldrb	r3, [r7, #15]
 801271c:	4618      	mov	r0, r3
 801271e:	f000 f8f5 	bl	801290c <USBD_Get_USB_Status>
 8012722:	4603      	mov	r3, r0
 8012724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012726:	7bbb      	ldrb	r3, [r7, #14]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012730:	b480      	push	{r7}
 8012732:	b085      	sub	sp, #20
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	460b      	mov	r3, r1
 801273a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012742:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012748:	2b00      	cmp	r3, #0
 801274a:	da0b      	bge.n	8012764 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012752:	68f9      	ldr	r1, [r7, #12]
 8012754:	4613      	mov	r3, r2
 8012756:	00db      	lsls	r3, r3, #3
 8012758:	1a9b      	subs	r3, r3, r2
 801275a:	009b      	lsls	r3, r3, #2
 801275c:	440b      	add	r3, r1
 801275e:	333e      	adds	r3, #62	; 0x3e
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	e00b      	b.n	801277c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012764:	78fb      	ldrb	r3, [r7, #3]
 8012766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801276a:	68f9      	ldr	r1, [r7, #12]
 801276c:	4613      	mov	r3, r2
 801276e:	00db      	lsls	r3, r3, #3
 8012770:	1a9b      	subs	r3, r3, r2
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	440b      	add	r3, r1
 8012776:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801277a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801277c:	4618      	mov	r0, r3
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr

08012788 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	460b      	mov	r3, r1
 8012792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012794:	2300      	movs	r3, #0
 8012796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012798:	2300      	movs	r3, #0
 801279a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80127a2:	78fa      	ldrb	r2, [r7, #3]
 80127a4:	4611      	mov	r1, r2
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7f5 ffff 	bl	80087aa <HAL_PCD_SetAddress>
 80127ac:	4603      	mov	r3, r0
 80127ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127b0:	7bfb      	ldrb	r3, [r7, #15]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f000 f8aa 	bl	801290c <USBD_Get_USB_Status>
 80127b8:	4603      	mov	r3, r0
 80127ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3710      	adds	r7, #16
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b086      	sub	sp, #24
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	60f8      	str	r0, [r7, #12]
 80127ce:	607a      	str	r2, [r7, #4]
 80127d0:	603b      	str	r3, [r7, #0]
 80127d2:	460b      	mov	r3, r1
 80127d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127da:	2300      	movs	r3, #0
 80127dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80127e4:	7af9      	ldrb	r1, [r7, #11]
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	f7f6 f918 	bl	8008a1e <HAL_PCD_EP_Transmit>
 80127ee:	4603      	mov	r3, r0
 80127f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127f2:	7dfb      	ldrb	r3, [r7, #23]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f000 f889 	bl	801290c <USBD_Get_USB_Status>
 80127fa:	4603      	mov	r3, r0
 80127fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8012800:	4618      	mov	r0, r3
 8012802:	3718      	adds	r7, #24
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b086      	sub	sp, #24
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	607a      	str	r2, [r7, #4]
 8012812:	603b      	str	r3, [r7, #0]
 8012814:	460b      	mov	r3, r1
 8012816:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012818:	2300      	movs	r3, #0
 801281a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801281c:	2300      	movs	r3, #0
 801281e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012826:	7af9      	ldrb	r1, [r7, #11]
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	f7f6 f894 	bl	8008958 <HAL_PCD_EP_Receive>
 8012830:	4603      	mov	r3, r0
 8012832:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012834:	7dfb      	ldrb	r3, [r7, #23]
 8012836:	4618      	mov	r0, r3
 8012838:	f000 f868 	bl	801290c <USBD_Get_USB_Status>
 801283c:	4603      	mov	r3, r0
 801283e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012840:	7dbb      	ldrb	r3, [r7, #22]
}
 8012842:	4618      	mov	r0, r3
 8012844:	3718      	adds	r7, #24
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801284a:	b580      	push	{r7, lr}
 801284c:	b082      	sub	sp, #8
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
 8012852:	460b      	mov	r3, r1
 8012854:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801285c:	78fa      	ldrb	r2, [r7, #3]
 801285e:	4611      	mov	r1, r2
 8012860:	4618      	mov	r0, r3
 8012862:	f7f6 f8c4 	bl	80089ee <HAL_PCD_EP_GetRxCount>
 8012866:	4603      	mov	r3, r0
}
 8012868:	4618      	mov	r0, r3
 801286a:	3708      	adds	r7, #8
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	460b      	mov	r3, r1
 801287a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801287c:	78fb      	ldrb	r3, [r7, #3]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d002      	beq.n	8012888 <HAL_PCDEx_LPM_Callback+0x18>
 8012882:	2b01      	cmp	r3, #1
 8012884:	d01f      	beq.n	80128c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012886:	e03b      	b.n	8012900 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6a1b      	ldr	r3, [r3, #32]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d007      	beq.n	80128a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8012890:	f7f0 ffe4 	bl	800385c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012894:	4b1c      	ldr	r3, [pc, #112]	; (8012908 <HAL_PCDEx_LPM_Callback+0x98>)
 8012896:	691b      	ldr	r3, [r3, #16]
 8012898:	4a1b      	ldr	r2, [pc, #108]	; (8012908 <HAL_PCDEx_LPM_Callback+0x98>)
 801289a:	f023 0306 	bic.w	r3, r3, #6
 801289e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	6812      	ldr	r2, [r2, #0]
 80128ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80128b2:	f023 0301 	bic.w	r3, r3, #1
 80128b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128be:	4618      	mov	r0, r3
 80128c0:	f7fc f91a 	bl	800eaf8 <USBD_LL_Resume>
    break;
 80128c4:	e01c      	b.n	8012900 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	6812      	ldr	r2, [r2, #0]
 80128d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80128d8:	f043 0301 	orr.w	r3, r3, #1
 80128dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fc f8f2 	bl	800eace <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6a1b      	ldr	r3, [r3, #32]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d005      	beq.n	80128fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80128f2:	4b05      	ldr	r3, [pc, #20]	; (8012908 <HAL_PCDEx_LPM_Callback+0x98>)
 80128f4:	691b      	ldr	r3, [r3, #16]
 80128f6:	4a04      	ldr	r2, [pc, #16]	; (8012908 <HAL_PCDEx_LPM_Callback+0x98>)
 80128f8:	f043 0306 	orr.w	r3, r3, #6
 80128fc:	6113      	str	r3, [r2, #16]
    break;
 80128fe:	bf00      	nop
}
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	e000ed00 	.word	0xe000ed00

0801290c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801290c:	b480      	push	{r7}
 801290e:	b085      	sub	sp, #20
 8012910:	af00      	add	r7, sp, #0
 8012912:	4603      	mov	r3, r0
 8012914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012916:	2300      	movs	r3, #0
 8012918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801291a:	79fb      	ldrb	r3, [r7, #7]
 801291c:	2b03      	cmp	r3, #3
 801291e:	d817      	bhi.n	8012950 <USBD_Get_USB_Status+0x44>
 8012920:	a201      	add	r2, pc, #4	; (adr r2, 8012928 <USBD_Get_USB_Status+0x1c>)
 8012922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012926:	bf00      	nop
 8012928:	08012939 	.word	0x08012939
 801292c:	0801293f 	.word	0x0801293f
 8012930:	08012945 	.word	0x08012945
 8012934:	0801294b 	.word	0x0801294b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012938:	2300      	movs	r3, #0
 801293a:	73fb      	strb	r3, [r7, #15]
    break;
 801293c:	e00b      	b.n	8012956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801293e:	2303      	movs	r3, #3
 8012940:	73fb      	strb	r3, [r7, #15]
    break;
 8012942:	e008      	b.n	8012956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012944:	2301      	movs	r3, #1
 8012946:	73fb      	strb	r3, [r7, #15]
    break;
 8012948:	e005      	b.n	8012956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801294a:	2303      	movs	r3, #3
 801294c:	73fb      	strb	r3, [r7, #15]
    break;
 801294e:	e002      	b.n	8012956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012950:	2303      	movs	r3, #3
 8012952:	73fb      	strb	r3, [r7, #15]
    break;
 8012954:	bf00      	nop
  }
  return usb_status;
 8012956:	7bfb      	ldrb	r3, [r7, #15]
}
 8012958:	4618      	mov	r0, r3
 801295a:	3714      	adds	r7, #20
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr

08012964 <__assert_func>:
 8012964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012966:	461c      	mov	r4, r3
 8012968:	4b09      	ldr	r3, [pc, #36]	; (8012990 <__assert_func+0x2c>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4605      	mov	r5, r0
 801296e:	68d8      	ldr	r0, [r3, #12]
 8012970:	b152      	cbz	r2, 8012988 <__assert_func+0x24>
 8012972:	4b08      	ldr	r3, [pc, #32]	; (8012994 <__assert_func+0x30>)
 8012974:	9100      	str	r1, [sp, #0]
 8012976:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801297a:	4907      	ldr	r1, [pc, #28]	; (8012998 <__assert_func+0x34>)
 801297c:	462b      	mov	r3, r5
 801297e:	4622      	mov	r2, r4
 8012980:	f000 f814 	bl	80129ac <fiprintf>
 8012984:	f001 f83a 	bl	80139fc <abort>
 8012988:	4b04      	ldr	r3, [pc, #16]	; (801299c <__assert_func+0x38>)
 801298a:	461a      	mov	r2, r3
 801298c:	e7f2      	b.n	8012974 <__assert_func+0x10>
 801298e:	bf00      	nop
 8012990:	20000434 	.word	0x20000434
 8012994:	08018330 	.word	0x08018330
 8012998:	0801833d 	.word	0x0801833d
 801299c:	0801836b 	.word	0x0801836b

080129a0 <__errno>:
 80129a0:	4b01      	ldr	r3, [pc, #4]	; (80129a8 <__errno+0x8>)
 80129a2:	6818      	ldr	r0, [r3, #0]
 80129a4:	4770      	bx	lr
 80129a6:	bf00      	nop
 80129a8:	20000434 	.word	0x20000434

080129ac <fiprintf>:
 80129ac:	b40e      	push	{r1, r2, r3}
 80129ae:	b503      	push	{r0, r1, lr}
 80129b0:	4601      	mov	r1, r0
 80129b2:	ab03      	add	r3, sp, #12
 80129b4:	4805      	ldr	r0, [pc, #20]	; (80129cc <fiprintf+0x20>)
 80129b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ba:	6800      	ldr	r0, [r0, #0]
 80129bc:	9301      	str	r3, [sp, #4]
 80129be:	f000 f921 	bl	8012c04 <_vfiprintf_r>
 80129c2:	b002      	add	sp, #8
 80129c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129c8:	b003      	add	sp, #12
 80129ca:	4770      	bx	lr
 80129cc:	20000434 	.word	0x20000434

080129d0 <__libc_init_array>:
 80129d0:	b570      	push	{r4, r5, r6, lr}
 80129d2:	4e0d      	ldr	r6, [pc, #52]	; (8012a08 <__libc_init_array+0x38>)
 80129d4:	4c0d      	ldr	r4, [pc, #52]	; (8012a0c <__libc_init_array+0x3c>)
 80129d6:	1ba4      	subs	r4, r4, r6
 80129d8:	10a4      	asrs	r4, r4, #2
 80129da:	2500      	movs	r5, #0
 80129dc:	42a5      	cmp	r5, r4
 80129de:	d109      	bne.n	80129f4 <__libc_init_array+0x24>
 80129e0:	4e0b      	ldr	r6, [pc, #44]	; (8012a10 <__libc_init_array+0x40>)
 80129e2:	4c0c      	ldr	r4, [pc, #48]	; (8012a14 <__libc_init_array+0x44>)
 80129e4:	f005 f920 	bl	8017c28 <_init>
 80129e8:	1ba4      	subs	r4, r4, r6
 80129ea:	10a4      	asrs	r4, r4, #2
 80129ec:	2500      	movs	r5, #0
 80129ee:	42a5      	cmp	r5, r4
 80129f0:	d105      	bne.n	80129fe <__libc_init_array+0x2e>
 80129f2:	bd70      	pop	{r4, r5, r6, pc}
 80129f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80129f8:	4798      	blx	r3
 80129fa:	3501      	adds	r5, #1
 80129fc:	e7ee      	b.n	80129dc <__libc_init_array+0xc>
 80129fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012a02:	4798      	blx	r3
 8012a04:	3501      	adds	r5, #1
 8012a06:	e7f2      	b.n	80129ee <__libc_init_array+0x1e>
 8012a08:	08018880 	.word	0x08018880
 8012a0c:	08018880 	.word	0x08018880
 8012a10:	08018880 	.word	0x08018880
 8012a14:	08018884 	.word	0x08018884

08012a18 <malloc>:
 8012a18:	4b02      	ldr	r3, [pc, #8]	; (8012a24 <malloc+0xc>)
 8012a1a:	4601      	mov	r1, r0
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	f000 b86d 	b.w	8012afc <_malloc_r>
 8012a22:	bf00      	nop
 8012a24:	20000434 	.word	0x20000434

08012a28 <free>:
 8012a28:	4b02      	ldr	r3, [pc, #8]	; (8012a34 <free+0xc>)
 8012a2a:	4601      	mov	r1, r0
 8012a2c:	6818      	ldr	r0, [r3, #0]
 8012a2e:	f000 b817 	b.w	8012a60 <_free_r>
 8012a32:	bf00      	nop
 8012a34:	20000434 	.word	0x20000434

08012a38 <memcpy>:
 8012a38:	b510      	push	{r4, lr}
 8012a3a:	1e43      	subs	r3, r0, #1
 8012a3c:	440a      	add	r2, r1
 8012a3e:	4291      	cmp	r1, r2
 8012a40:	d100      	bne.n	8012a44 <memcpy+0xc>
 8012a42:	bd10      	pop	{r4, pc}
 8012a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a4c:	e7f7      	b.n	8012a3e <memcpy+0x6>

08012a4e <memset>:
 8012a4e:	4402      	add	r2, r0
 8012a50:	4603      	mov	r3, r0
 8012a52:	4293      	cmp	r3, r2
 8012a54:	d100      	bne.n	8012a58 <memset+0xa>
 8012a56:	4770      	bx	lr
 8012a58:	f803 1b01 	strb.w	r1, [r3], #1
 8012a5c:	e7f9      	b.n	8012a52 <memset+0x4>
	...

08012a60 <_free_r>:
 8012a60:	b538      	push	{r3, r4, r5, lr}
 8012a62:	4605      	mov	r5, r0
 8012a64:	2900      	cmp	r1, #0
 8012a66:	d045      	beq.n	8012af4 <_free_r+0x94>
 8012a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a6c:	1f0c      	subs	r4, r1, #4
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	bfb8      	it	lt
 8012a72:	18e4      	addlt	r4, r4, r3
 8012a74:	f002 f837 	bl	8014ae6 <__malloc_lock>
 8012a78:	4a1f      	ldr	r2, [pc, #124]	; (8012af8 <_free_r+0x98>)
 8012a7a:	6813      	ldr	r3, [r2, #0]
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	b933      	cbnz	r3, 8012a8e <_free_r+0x2e>
 8012a80:	6063      	str	r3, [r4, #4]
 8012a82:	6014      	str	r4, [r2, #0]
 8012a84:	4628      	mov	r0, r5
 8012a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a8a:	f002 b82d 	b.w	8014ae8 <__malloc_unlock>
 8012a8e:	42a3      	cmp	r3, r4
 8012a90:	d90c      	bls.n	8012aac <_free_r+0x4c>
 8012a92:	6821      	ldr	r1, [r4, #0]
 8012a94:	1862      	adds	r2, r4, r1
 8012a96:	4293      	cmp	r3, r2
 8012a98:	bf04      	itt	eq
 8012a9a:	681a      	ldreq	r2, [r3, #0]
 8012a9c:	685b      	ldreq	r3, [r3, #4]
 8012a9e:	6063      	str	r3, [r4, #4]
 8012aa0:	bf04      	itt	eq
 8012aa2:	1852      	addeq	r2, r2, r1
 8012aa4:	6022      	streq	r2, [r4, #0]
 8012aa6:	6004      	str	r4, [r0, #0]
 8012aa8:	e7ec      	b.n	8012a84 <_free_r+0x24>
 8012aaa:	4613      	mov	r3, r2
 8012aac:	685a      	ldr	r2, [r3, #4]
 8012aae:	b10a      	cbz	r2, 8012ab4 <_free_r+0x54>
 8012ab0:	42a2      	cmp	r2, r4
 8012ab2:	d9fa      	bls.n	8012aaa <_free_r+0x4a>
 8012ab4:	6819      	ldr	r1, [r3, #0]
 8012ab6:	1858      	adds	r0, r3, r1
 8012ab8:	42a0      	cmp	r0, r4
 8012aba:	d10b      	bne.n	8012ad4 <_free_r+0x74>
 8012abc:	6820      	ldr	r0, [r4, #0]
 8012abe:	4401      	add	r1, r0
 8012ac0:	1858      	adds	r0, r3, r1
 8012ac2:	4282      	cmp	r2, r0
 8012ac4:	6019      	str	r1, [r3, #0]
 8012ac6:	d1dd      	bne.n	8012a84 <_free_r+0x24>
 8012ac8:	6810      	ldr	r0, [r2, #0]
 8012aca:	6852      	ldr	r2, [r2, #4]
 8012acc:	605a      	str	r2, [r3, #4]
 8012ace:	4401      	add	r1, r0
 8012ad0:	6019      	str	r1, [r3, #0]
 8012ad2:	e7d7      	b.n	8012a84 <_free_r+0x24>
 8012ad4:	d902      	bls.n	8012adc <_free_r+0x7c>
 8012ad6:	230c      	movs	r3, #12
 8012ad8:	602b      	str	r3, [r5, #0]
 8012ada:	e7d3      	b.n	8012a84 <_free_r+0x24>
 8012adc:	6820      	ldr	r0, [r4, #0]
 8012ade:	1821      	adds	r1, r4, r0
 8012ae0:	428a      	cmp	r2, r1
 8012ae2:	bf04      	itt	eq
 8012ae4:	6811      	ldreq	r1, [r2, #0]
 8012ae6:	6852      	ldreq	r2, [r2, #4]
 8012ae8:	6062      	str	r2, [r4, #4]
 8012aea:	bf04      	itt	eq
 8012aec:	1809      	addeq	r1, r1, r0
 8012aee:	6021      	streq	r1, [r4, #0]
 8012af0:	605c      	str	r4, [r3, #4]
 8012af2:	e7c7      	b.n	8012a84 <_free_r+0x24>
 8012af4:	bd38      	pop	{r3, r4, r5, pc}
 8012af6:	bf00      	nop
 8012af8:	200045e4 	.word	0x200045e4

08012afc <_malloc_r>:
 8012afc:	b570      	push	{r4, r5, r6, lr}
 8012afe:	1ccd      	adds	r5, r1, #3
 8012b00:	f025 0503 	bic.w	r5, r5, #3
 8012b04:	3508      	adds	r5, #8
 8012b06:	2d0c      	cmp	r5, #12
 8012b08:	bf38      	it	cc
 8012b0a:	250c      	movcc	r5, #12
 8012b0c:	2d00      	cmp	r5, #0
 8012b0e:	4606      	mov	r6, r0
 8012b10:	db01      	blt.n	8012b16 <_malloc_r+0x1a>
 8012b12:	42a9      	cmp	r1, r5
 8012b14:	d903      	bls.n	8012b1e <_malloc_r+0x22>
 8012b16:	230c      	movs	r3, #12
 8012b18:	6033      	str	r3, [r6, #0]
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	bd70      	pop	{r4, r5, r6, pc}
 8012b1e:	f001 ffe2 	bl	8014ae6 <__malloc_lock>
 8012b22:	4a21      	ldr	r2, [pc, #132]	; (8012ba8 <_malloc_r+0xac>)
 8012b24:	6814      	ldr	r4, [r2, #0]
 8012b26:	4621      	mov	r1, r4
 8012b28:	b991      	cbnz	r1, 8012b50 <_malloc_r+0x54>
 8012b2a:	4c20      	ldr	r4, [pc, #128]	; (8012bac <_malloc_r+0xb0>)
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	b91b      	cbnz	r3, 8012b38 <_malloc_r+0x3c>
 8012b30:	4630      	mov	r0, r6
 8012b32:	f000 fde9 	bl	8013708 <_sbrk_r>
 8012b36:	6020      	str	r0, [r4, #0]
 8012b38:	4629      	mov	r1, r5
 8012b3a:	4630      	mov	r0, r6
 8012b3c:	f000 fde4 	bl	8013708 <_sbrk_r>
 8012b40:	1c43      	adds	r3, r0, #1
 8012b42:	d124      	bne.n	8012b8e <_malloc_r+0x92>
 8012b44:	230c      	movs	r3, #12
 8012b46:	6033      	str	r3, [r6, #0]
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f001 ffcd 	bl	8014ae8 <__malloc_unlock>
 8012b4e:	e7e4      	b.n	8012b1a <_malloc_r+0x1e>
 8012b50:	680b      	ldr	r3, [r1, #0]
 8012b52:	1b5b      	subs	r3, r3, r5
 8012b54:	d418      	bmi.n	8012b88 <_malloc_r+0x8c>
 8012b56:	2b0b      	cmp	r3, #11
 8012b58:	d90f      	bls.n	8012b7a <_malloc_r+0x7e>
 8012b5a:	600b      	str	r3, [r1, #0]
 8012b5c:	50cd      	str	r5, [r1, r3]
 8012b5e:	18cc      	adds	r4, r1, r3
 8012b60:	4630      	mov	r0, r6
 8012b62:	f001 ffc1 	bl	8014ae8 <__malloc_unlock>
 8012b66:	f104 000b 	add.w	r0, r4, #11
 8012b6a:	1d23      	adds	r3, r4, #4
 8012b6c:	f020 0007 	bic.w	r0, r0, #7
 8012b70:	1ac3      	subs	r3, r0, r3
 8012b72:	d0d3      	beq.n	8012b1c <_malloc_r+0x20>
 8012b74:	425a      	negs	r2, r3
 8012b76:	50e2      	str	r2, [r4, r3]
 8012b78:	e7d0      	b.n	8012b1c <_malloc_r+0x20>
 8012b7a:	428c      	cmp	r4, r1
 8012b7c:	684b      	ldr	r3, [r1, #4]
 8012b7e:	bf16      	itet	ne
 8012b80:	6063      	strne	r3, [r4, #4]
 8012b82:	6013      	streq	r3, [r2, #0]
 8012b84:	460c      	movne	r4, r1
 8012b86:	e7eb      	b.n	8012b60 <_malloc_r+0x64>
 8012b88:	460c      	mov	r4, r1
 8012b8a:	6849      	ldr	r1, [r1, #4]
 8012b8c:	e7cc      	b.n	8012b28 <_malloc_r+0x2c>
 8012b8e:	1cc4      	adds	r4, r0, #3
 8012b90:	f024 0403 	bic.w	r4, r4, #3
 8012b94:	42a0      	cmp	r0, r4
 8012b96:	d005      	beq.n	8012ba4 <_malloc_r+0xa8>
 8012b98:	1a21      	subs	r1, r4, r0
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f000 fdb4 	bl	8013708 <_sbrk_r>
 8012ba0:	3001      	adds	r0, #1
 8012ba2:	d0cf      	beq.n	8012b44 <_malloc_r+0x48>
 8012ba4:	6025      	str	r5, [r4, #0]
 8012ba6:	e7db      	b.n	8012b60 <_malloc_r+0x64>
 8012ba8:	200045e4 	.word	0x200045e4
 8012bac:	200045e8 	.word	0x200045e8

08012bb0 <__sfputc_r>:
 8012bb0:	6893      	ldr	r3, [r2, #8]
 8012bb2:	3b01      	subs	r3, #1
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	b410      	push	{r4}
 8012bb8:	6093      	str	r3, [r2, #8]
 8012bba:	da08      	bge.n	8012bce <__sfputc_r+0x1e>
 8012bbc:	6994      	ldr	r4, [r2, #24]
 8012bbe:	42a3      	cmp	r3, r4
 8012bc0:	db01      	blt.n	8012bc6 <__sfputc_r+0x16>
 8012bc2:	290a      	cmp	r1, #10
 8012bc4:	d103      	bne.n	8012bce <__sfputc_r+0x1e>
 8012bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bca:	f000 be45 	b.w	8013858 <__swbuf_r>
 8012bce:	6813      	ldr	r3, [r2, #0]
 8012bd0:	1c58      	adds	r0, r3, #1
 8012bd2:	6010      	str	r0, [r2, #0]
 8012bd4:	7019      	strb	r1, [r3, #0]
 8012bd6:	4608      	mov	r0, r1
 8012bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <__sfputs_r>:
 8012bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012be0:	4606      	mov	r6, r0
 8012be2:	460f      	mov	r7, r1
 8012be4:	4614      	mov	r4, r2
 8012be6:	18d5      	adds	r5, r2, r3
 8012be8:	42ac      	cmp	r4, r5
 8012bea:	d101      	bne.n	8012bf0 <__sfputs_r+0x12>
 8012bec:	2000      	movs	r0, #0
 8012bee:	e007      	b.n	8012c00 <__sfputs_r+0x22>
 8012bf0:	463a      	mov	r2, r7
 8012bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bf6:	4630      	mov	r0, r6
 8012bf8:	f7ff ffda 	bl	8012bb0 <__sfputc_r>
 8012bfc:	1c43      	adds	r3, r0, #1
 8012bfe:	d1f3      	bne.n	8012be8 <__sfputs_r+0xa>
 8012c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c04 <_vfiprintf_r>:
 8012c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c08:	460c      	mov	r4, r1
 8012c0a:	b09d      	sub	sp, #116	; 0x74
 8012c0c:	4617      	mov	r7, r2
 8012c0e:	461d      	mov	r5, r3
 8012c10:	4606      	mov	r6, r0
 8012c12:	b118      	cbz	r0, 8012c1c <_vfiprintf_r+0x18>
 8012c14:	6983      	ldr	r3, [r0, #24]
 8012c16:	b90b      	cbnz	r3, 8012c1c <_vfiprintf_r+0x18>
 8012c18:	f001 fe3e 	bl	8014898 <__sinit>
 8012c1c:	4b7c      	ldr	r3, [pc, #496]	; (8012e10 <_vfiprintf_r+0x20c>)
 8012c1e:	429c      	cmp	r4, r3
 8012c20:	d158      	bne.n	8012cd4 <_vfiprintf_r+0xd0>
 8012c22:	6874      	ldr	r4, [r6, #4]
 8012c24:	89a3      	ldrh	r3, [r4, #12]
 8012c26:	0718      	lsls	r0, r3, #28
 8012c28:	d55e      	bpl.n	8012ce8 <_vfiprintf_r+0xe4>
 8012c2a:	6923      	ldr	r3, [r4, #16]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d05b      	beq.n	8012ce8 <_vfiprintf_r+0xe4>
 8012c30:	2300      	movs	r3, #0
 8012c32:	9309      	str	r3, [sp, #36]	; 0x24
 8012c34:	2320      	movs	r3, #32
 8012c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c3a:	2330      	movs	r3, #48	; 0x30
 8012c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c40:	9503      	str	r5, [sp, #12]
 8012c42:	f04f 0b01 	mov.w	fp, #1
 8012c46:	46b8      	mov	r8, r7
 8012c48:	4645      	mov	r5, r8
 8012c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c4e:	b10b      	cbz	r3, 8012c54 <_vfiprintf_r+0x50>
 8012c50:	2b25      	cmp	r3, #37	; 0x25
 8012c52:	d154      	bne.n	8012cfe <_vfiprintf_r+0xfa>
 8012c54:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c58:	d00b      	beq.n	8012c72 <_vfiprintf_r+0x6e>
 8012c5a:	4653      	mov	r3, sl
 8012c5c:	463a      	mov	r2, r7
 8012c5e:	4621      	mov	r1, r4
 8012c60:	4630      	mov	r0, r6
 8012c62:	f7ff ffbc 	bl	8012bde <__sfputs_r>
 8012c66:	3001      	adds	r0, #1
 8012c68:	f000 80c2 	beq.w	8012df0 <_vfiprintf_r+0x1ec>
 8012c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c6e:	4453      	add	r3, sl
 8012c70:	9309      	str	r3, [sp, #36]	; 0x24
 8012c72:	f898 3000 	ldrb.w	r3, [r8]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 80ba 	beq.w	8012df0 <_vfiprintf_r+0x1ec>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c86:	9304      	str	r3, [sp, #16]
 8012c88:	9307      	str	r3, [sp, #28]
 8012c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8012c90:	46a8      	mov	r8, r5
 8012c92:	2205      	movs	r2, #5
 8012c94:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012c98:	485e      	ldr	r0, [pc, #376]	; (8012e14 <_vfiprintf_r+0x210>)
 8012c9a:	f7ed fac1 	bl	8000220 <memchr>
 8012c9e:	9b04      	ldr	r3, [sp, #16]
 8012ca0:	bb78      	cbnz	r0, 8012d02 <_vfiprintf_r+0xfe>
 8012ca2:	06d9      	lsls	r1, r3, #27
 8012ca4:	bf44      	itt	mi
 8012ca6:	2220      	movmi	r2, #32
 8012ca8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cac:	071a      	lsls	r2, r3, #28
 8012cae:	bf44      	itt	mi
 8012cb0:	222b      	movmi	r2, #43	; 0x2b
 8012cb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cb6:	782a      	ldrb	r2, [r5, #0]
 8012cb8:	2a2a      	cmp	r2, #42	; 0x2a
 8012cba:	d02a      	beq.n	8012d12 <_vfiprintf_r+0x10e>
 8012cbc:	9a07      	ldr	r2, [sp, #28]
 8012cbe:	46a8      	mov	r8, r5
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	250a      	movs	r5, #10
 8012cc4:	4641      	mov	r1, r8
 8012cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cca:	3b30      	subs	r3, #48	; 0x30
 8012ccc:	2b09      	cmp	r3, #9
 8012cce:	d969      	bls.n	8012da4 <_vfiprintf_r+0x1a0>
 8012cd0:	b360      	cbz	r0, 8012d2c <_vfiprintf_r+0x128>
 8012cd2:	e024      	b.n	8012d1e <_vfiprintf_r+0x11a>
 8012cd4:	4b50      	ldr	r3, [pc, #320]	; (8012e18 <_vfiprintf_r+0x214>)
 8012cd6:	429c      	cmp	r4, r3
 8012cd8:	d101      	bne.n	8012cde <_vfiprintf_r+0xda>
 8012cda:	68b4      	ldr	r4, [r6, #8]
 8012cdc:	e7a2      	b.n	8012c24 <_vfiprintf_r+0x20>
 8012cde:	4b4f      	ldr	r3, [pc, #316]	; (8012e1c <_vfiprintf_r+0x218>)
 8012ce0:	429c      	cmp	r4, r3
 8012ce2:	bf08      	it	eq
 8012ce4:	68f4      	ldreq	r4, [r6, #12]
 8012ce6:	e79d      	b.n	8012c24 <_vfiprintf_r+0x20>
 8012ce8:	4621      	mov	r1, r4
 8012cea:	4630      	mov	r0, r6
 8012cec:	f000 fe18 	bl	8013920 <__swsetup_r>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d09d      	beq.n	8012c30 <_vfiprintf_r+0x2c>
 8012cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf8:	b01d      	add	sp, #116	; 0x74
 8012cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cfe:	46a8      	mov	r8, r5
 8012d00:	e7a2      	b.n	8012c48 <_vfiprintf_r+0x44>
 8012d02:	4a44      	ldr	r2, [pc, #272]	; (8012e14 <_vfiprintf_r+0x210>)
 8012d04:	1a80      	subs	r0, r0, r2
 8012d06:	fa0b f000 	lsl.w	r0, fp, r0
 8012d0a:	4318      	orrs	r0, r3
 8012d0c:	9004      	str	r0, [sp, #16]
 8012d0e:	4645      	mov	r5, r8
 8012d10:	e7be      	b.n	8012c90 <_vfiprintf_r+0x8c>
 8012d12:	9a03      	ldr	r2, [sp, #12]
 8012d14:	1d11      	adds	r1, r2, #4
 8012d16:	6812      	ldr	r2, [r2, #0]
 8012d18:	9103      	str	r1, [sp, #12]
 8012d1a:	2a00      	cmp	r2, #0
 8012d1c:	db01      	blt.n	8012d22 <_vfiprintf_r+0x11e>
 8012d1e:	9207      	str	r2, [sp, #28]
 8012d20:	e004      	b.n	8012d2c <_vfiprintf_r+0x128>
 8012d22:	4252      	negs	r2, r2
 8012d24:	f043 0302 	orr.w	r3, r3, #2
 8012d28:	9207      	str	r2, [sp, #28]
 8012d2a:	9304      	str	r3, [sp, #16]
 8012d2c:	f898 3000 	ldrb.w	r3, [r8]
 8012d30:	2b2e      	cmp	r3, #46	; 0x2e
 8012d32:	d10e      	bne.n	8012d52 <_vfiprintf_r+0x14e>
 8012d34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d38:	2b2a      	cmp	r3, #42	; 0x2a
 8012d3a:	d138      	bne.n	8012dae <_vfiprintf_r+0x1aa>
 8012d3c:	9b03      	ldr	r3, [sp, #12]
 8012d3e:	1d1a      	adds	r2, r3, #4
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	9203      	str	r2, [sp, #12]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bfb8      	it	lt
 8012d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d4c:	f108 0802 	add.w	r8, r8, #2
 8012d50:	9305      	str	r3, [sp, #20]
 8012d52:	4d33      	ldr	r5, [pc, #204]	; (8012e20 <_vfiprintf_r+0x21c>)
 8012d54:	f898 1000 	ldrb.w	r1, [r8]
 8012d58:	2203      	movs	r2, #3
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	f7ed fa60 	bl	8000220 <memchr>
 8012d60:	b140      	cbz	r0, 8012d74 <_vfiprintf_r+0x170>
 8012d62:	2340      	movs	r3, #64	; 0x40
 8012d64:	1b40      	subs	r0, r0, r5
 8012d66:	fa03 f000 	lsl.w	r0, r3, r0
 8012d6a:	9b04      	ldr	r3, [sp, #16]
 8012d6c:	4303      	orrs	r3, r0
 8012d6e:	f108 0801 	add.w	r8, r8, #1
 8012d72:	9304      	str	r3, [sp, #16]
 8012d74:	f898 1000 	ldrb.w	r1, [r8]
 8012d78:	482a      	ldr	r0, [pc, #168]	; (8012e24 <_vfiprintf_r+0x220>)
 8012d7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d7e:	2206      	movs	r2, #6
 8012d80:	f108 0701 	add.w	r7, r8, #1
 8012d84:	f7ed fa4c 	bl	8000220 <memchr>
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d037      	beq.n	8012dfc <_vfiprintf_r+0x1f8>
 8012d8c:	4b26      	ldr	r3, [pc, #152]	; (8012e28 <_vfiprintf_r+0x224>)
 8012d8e:	bb1b      	cbnz	r3, 8012dd8 <_vfiprintf_r+0x1d4>
 8012d90:	9b03      	ldr	r3, [sp, #12]
 8012d92:	3307      	adds	r3, #7
 8012d94:	f023 0307 	bic.w	r3, r3, #7
 8012d98:	3308      	adds	r3, #8
 8012d9a:	9303      	str	r3, [sp, #12]
 8012d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d9e:	444b      	add	r3, r9
 8012da0:	9309      	str	r3, [sp, #36]	; 0x24
 8012da2:	e750      	b.n	8012c46 <_vfiprintf_r+0x42>
 8012da4:	fb05 3202 	mla	r2, r5, r2, r3
 8012da8:	2001      	movs	r0, #1
 8012daa:	4688      	mov	r8, r1
 8012dac:	e78a      	b.n	8012cc4 <_vfiprintf_r+0xc0>
 8012dae:	2300      	movs	r3, #0
 8012db0:	f108 0801 	add.w	r8, r8, #1
 8012db4:	9305      	str	r3, [sp, #20]
 8012db6:	4619      	mov	r1, r3
 8012db8:	250a      	movs	r5, #10
 8012dba:	4640      	mov	r0, r8
 8012dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dc0:	3a30      	subs	r2, #48	; 0x30
 8012dc2:	2a09      	cmp	r2, #9
 8012dc4:	d903      	bls.n	8012dce <_vfiprintf_r+0x1ca>
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d0c3      	beq.n	8012d52 <_vfiprintf_r+0x14e>
 8012dca:	9105      	str	r1, [sp, #20]
 8012dcc:	e7c1      	b.n	8012d52 <_vfiprintf_r+0x14e>
 8012dce:	fb05 2101 	mla	r1, r5, r1, r2
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	4680      	mov	r8, r0
 8012dd6:	e7f0      	b.n	8012dba <_vfiprintf_r+0x1b6>
 8012dd8:	ab03      	add	r3, sp, #12
 8012dda:	9300      	str	r3, [sp, #0]
 8012ddc:	4622      	mov	r2, r4
 8012dde:	4b13      	ldr	r3, [pc, #76]	; (8012e2c <_vfiprintf_r+0x228>)
 8012de0:	a904      	add	r1, sp, #16
 8012de2:	4630      	mov	r0, r6
 8012de4:	f000 f8b8 	bl	8012f58 <_printf_float>
 8012de8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012dec:	4681      	mov	r9, r0
 8012dee:	d1d5      	bne.n	8012d9c <_vfiprintf_r+0x198>
 8012df0:	89a3      	ldrh	r3, [r4, #12]
 8012df2:	065b      	lsls	r3, r3, #25
 8012df4:	f53f af7e 	bmi.w	8012cf4 <_vfiprintf_r+0xf0>
 8012df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dfa:	e77d      	b.n	8012cf8 <_vfiprintf_r+0xf4>
 8012dfc:	ab03      	add	r3, sp, #12
 8012dfe:	9300      	str	r3, [sp, #0]
 8012e00:	4622      	mov	r2, r4
 8012e02:	4b0a      	ldr	r3, [pc, #40]	; (8012e2c <_vfiprintf_r+0x228>)
 8012e04:	a904      	add	r1, sp, #16
 8012e06:	4630      	mov	r0, r6
 8012e08:	f000 fb5c 	bl	80134c4 <_printf_i>
 8012e0c:	e7ec      	b.n	8012de8 <_vfiprintf_r+0x1e4>
 8012e0e:	bf00      	nop
 8012e10:	080183e4 	.word	0x080183e4
 8012e14:	08018370 	.word	0x08018370
 8012e18:	08018404 	.word	0x08018404
 8012e1c:	080183c4 	.word	0x080183c4
 8012e20:	08018376 	.word	0x08018376
 8012e24:	0801837a 	.word	0x0801837a
 8012e28:	08012f59 	.word	0x08012f59
 8012e2c:	08012bdf 	.word	0x08012bdf

08012e30 <__cvt>:
 8012e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e34:	ec55 4b10 	vmov	r4, r5, d0
 8012e38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012e3a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012e3e:	2d00      	cmp	r5, #0
 8012e40:	460e      	mov	r6, r1
 8012e42:	4691      	mov	r9, r2
 8012e44:	4619      	mov	r1, r3
 8012e46:	bfb8      	it	lt
 8012e48:	4622      	movlt	r2, r4
 8012e4a:	462b      	mov	r3, r5
 8012e4c:	f027 0720 	bic.w	r7, r7, #32
 8012e50:	bfbb      	ittet	lt
 8012e52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012e56:	461d      	movlt	r5, r3
 8012e58:	2300      	movge	r3, #0
 8012e5a:	232d      	movlt	r3, #45	; 0x2d
 8012e5c:	bfb8      	it	lt
 8012e5e:	4614      	movlt	r4, r2
 8012e60:	2f46      	cmp	r7, #70	; 0x46
 8012e62:	700b      	strb	r3, [r1, #0]
 8012e64:	d004      	beq.n	8012e70 <__cvt+0x40>
 8012e66:	2f45      	cmp	r7, #69	; 0x45
 8012e68:	d100      	bne.n	8012e6c <__cvt+0x3c>
 8012e6a:	3601      	adds	r6, #1
 8012e6c:	2102      	movs	r1, #2
 8012e6e:	e000      	b.n	8012e72 <__cvt+0x42>
 8012e70:	2103      	movs	r1, #3
 8012e72:	ab03      	add	r3, sp, #12
 8012e74:	9301      	str	r3, [sp, #4]
 8012e76:	ab02      	add	r3, sp, #8
 8012e78:	9300      	str	r3, [sp, #0]
 8012e7a:	4632      	mov	r2, r6
 8012e7c:	4653      	mov	r3, sl
 8012e7e:	ec45 4b10 	vmov	d0, r4, r5
 8012e82:	f000 fe61 	bl	8013b48 <_dtoa_r>
 8012e86:	2f47      	cmp	r7, #71	; 0x47
 8012e88:	4680      	mov	r8, r0
 8012e8a:	d102      	bne.n	8012e92 <__cvt+0x62>
 8012e8c:	f019 0f01 	tst.w	r9, #1
 8012e90:	d026      	beq.n	8012ee0 <__cvt+0xb0>
 8012e92:	2f46      	cmp	r7, #70	; 0x46
 8012e94:	eb08 0906 	add.w	r9, r8, r6
 8012e98:	d111      	bne.n	8012ebe <__cvt+0x8e>
 8012e9a:	f898 3000 	ldrb.w	r3, [r8]
 8012e9e:	2b30      	cmp	r3, #48	; 0x30
 8012ea0:	d10a      	bne.n	8012eb8 <__cvt+0x88>
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	f7ed fe2d 	bl	8000b08 <__aeabi_dcmpeq>
 8012eae:	b918      	cbnz	r0, 8012eb8 <__cvt+0x88>
 8012eb0:	f1c6 0601 	rsb	r6, r6, #1
 8012eb4:	f8ca 6000 	str.w	r6, [sl]
 8012eb8:	f8da 3000 	ldr.w	r3, [sl]
 8012ebc:	4499      	add	r9, r3
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	f7ed fe1f 	bl	8000b08 <__aeabi_dcmpeq>
 8012eca:	b938      	cbnz	r0, 8012edc <__cvt+0xac>
 8012ecc:	2230      	movs	r2, #48	; 0x30
 8012ece:	9b03      	ldr	r3, [sp, #12]
 8012ed0:	454b      	cmp	r3, r9
 8012ed2:	d205      	bcs.n	8012ee0 <__cvt+0xb0>
 8012ed4:	1c59      	adds	r1, r3, #1
 8012ed6:	9103      	str	r1, [sp, #12]
 8012ed8:	701a      	strb	r2, [r3, #0]
 8012eda:	e7f8      	b.n	8012ece <__cvt+0x9e>
 8012edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ee0:	9b03      	ldr	r3, [sp, #12]
 8012ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ee4:	eba3 0308 	sub.w	r3, r3, r8
 8012ee8:	4640      	mov	r0, r8
 8012eea:	6013      	str	r3, [r2, #0]
 8012eec:	b004      	add	sp, #16
 8012eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012ef2 <__exponent>:
 8012ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ef4:	2900      	cmp	r1, #0
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	bfba      	itte	lt
 8012efa:	4249      	neglt	r1, r1
 8012efc:	232d      	movlt	r3, #45	; 0x2d
 8012efe:	232b      	movge	r3, #43	; 0x2b
 8012f00:	2909      	cmp	r1, #9
 8012f02:	f804 2b02 	strb.w	r2, [r4], #2
 8012f06:	7043      	strb	r3, [r0, #1]
 8012f08:	dd20      	ble.n	8012f4c <__exponent+0x5a>
 8012f0a:	f10d 0307 	add.w	r3, sp, #7
 8012f0e:	461f      	mov	r7, r3
 8012f10:	260a      	movs	r6, #10
 8012f12:	fb91 f5f6 	sdiv	r5, r1, r6
 8012f16:	fb06 1115 	mls	r1, r6, r5, r1
 8012f1a:	3130      	adds	r1, #48	; 0x30
 8012f1c:	2d09      	cmp	r5, #9
 8012f1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012f22:	f103 32ff 	add.w	r2, r3, #4294967295
 8012f26:	4629      	mov	r1, r5
 8012f28:	dc09      	bgt.n	8012f3e <__exponent+0x4c>
 8012f2a:	3130      	adds	r1, #48	; 0x30
 8012f2c:	3b02      	subs	r3, #2
 8012f2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012f32:	42bb      	cmp	r3, r7
 8012f34:	4622      	mov	r2, r4
 8012f36:	d304      	bcc.n	8012f42 <__exponent+0x50>
 8012f38:	1a10      	subs	r0, r2, r0
 8012f3a:	b003      	add	sp, #12
 8012f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f3e:	4613      	mov	r3, r2
 8012f40:	e7e7      	b.n	8012f12 <__exponent+0x20>
 8012f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f46:	f804 2b01 	strb.w	r2, [r4], #1
 8012f4a:	e7f2      	b.n	8012f32 <__exponent+0x40>
 8012f4c:	2330      	movs	r3, #48	; 0x30
 8012f4e:	4419      	add	r1, r3
 8012f50:	7083      	strb	r3, [r0, #2]
 8012f52:	1d02      	adds	r2, r0, #4
 8012f54:	70c1      	strb	r1, [r0, #3]
 8012f56:	e7ef      	b.n	8012f38 <__exponent+0x46>

08012f58 <_printf_float>:
 8012f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f5c:	b08d      	sub	sp, #52	; 0x34
 8012f5e:	460c      	mov	r4, r1
 8012f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012f64:	4616      	mov	r6, r2
 8012f66:	461f      	mov	r7, r3
 8012f68:	4605      	mov	r5, r0
 8012f6a:	f001 fd1f 	bl	80149ac <_localeconv_r>
 8012f6e:	6803      	ldr	r3, [r0, #0]
 8012f70:	9304      	str	r3, [sp, #16]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ed f94c 	bl	8000210 <strlen>
 8012f78:	2300      	movs	r3, #0
 8012f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8012f80:	9005      	str	r0, [sp, #20]
 8012f82:	3307      	adds	r3, #7
 8012f84:	f023 0307 	bic.w	r3, r3, #7
 8012f88:	f103 0208 	add.w	r2, r3, #8
 8012f8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012f90:	f8d4 b000 	ldr.w	fp, [r4]
 8012f94:	f8c8 2000 	str.w	r2, [r8]
 8012f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012fa0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012fa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012fa8:	9307      	str	r3, [sp, #28]
 8012faa:	f8cd 8018 	str.w	r8, [sp, #24]
 8012fae:	f04f 32ff 	mov.w	r2, #4294967295
 8012fb2:	4ba7      	ldr	r3, [pc, #668]	; (8013250 <_printf_float+0x2f8>)
 8012fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fb8:	f7ed fdd8 	bl	8000b6c <__aeabi_dcmpun>
 8012fbc:	bb70      	cbnz	r0, 801301c <_printf_float+0xc4>
 8012fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc2:	4ba3      	ldr	r3, [pc, #652]	; (8013250 <_printf_float+0x2f8>)
 8012fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fc8:	f7ed fdb2 	bl	8000b30 <__aeabi_dcmple>
 8012fcc:	bb30      	cbnz	r0, 801301c <_printf_float+0xc4>
 8012fce:	2200      	movs	r2, #0
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	4640      	mov	r0, r8
 8012fd4:	4649      	mov	r1, r9
 8012fd6:	f7ed fda1 	bl	8000b1c <__aeabi_dcmplt>
 8012fda:	b110      	cbz	r0, 8012fe2 <_printf_float+0x8a>
 8012fdc:	232d      	movs	r3, #45	; 0x2d
 8012fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fe2:	4a9c      	ldr	r2, [pc, #624]	; (8013254 <_printf_float+0x2fc>)
 8012fe4:	4b9c      	ldr	r3, [pc, #624]	; (8013258 <_printf_float+0x300>)
 8012fe6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012fea:	bf8c      	ite	hi
 8012fec:	4690      	movhi	r8, r2
 8012fee:	4698      	movls	r8, r3
 8012ff0:	2303      	movs	r3, #3
 8012ff2:	f02b 0204 	bic.w	r2, fp, #4
 8012ff6:	6123      	str	r3, [r4, #16]
 8012ff8:	6022      	str	r2, [r4, #0]
 8012ffa:	f04f 0900 	mov.w	r9, #0
 8012ffe:	9700      	str	r7, [sp, #0]
 8013000:	4633      	mov	r3, r6
 8013002:	aa0b      	add	r2, sp, #44	; 0x2c
 8013004:	4621      	mov	r1, r4
 8013006:	4628      	mov	r0, r5
 8013008:	f000 f9e6 	bl	80133d8 <_printf_common>
 801300c:	3001      	adds	r0, #1
 801300e:	f040 808d 	bne.w	801312c <_printf_float+0x1d4>
 8013012:	f04f 30ff 	mov.w	r0, #4294967295
 8013016:	b00d      	add	sp, #52	; 0x34
 8013018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301c:	4642      	mov	r2, r8
 801301e:	464b      	mov	r3, r9
 8013020:	4640      	mov	r0, r8
 8013022:	4649      	mov	r1, r9
 8013024:	f7ed fda2 	bl	8000b6c <__aeabi_dcmpun>
 8013028:	b110      	cbz	r0, 8013030 <_printf_float+0xd8>
 801302a:	4a8c      	ldr	r2, [pc, #560]	; (801325c <_printf_float+0x304>)
 801302c:	4b8c      	ldr	r3, [pc, #560]	; (8013260 <_printf_float+0x308>)
 801302e:	e7da      	b.n	8012fe6 <_printf_float+0x8e>
 8013030:	6861      	ldr	r1, [r4, #4]
 8013032:	1c4b      	adds	r3, r1, #1
 8013034:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013038:	a80a      	add	r0, sp, #40	; 0x28
 801303a:	d13e      	bne.n	80130ba <_printf_float+0x162>
 801303c:	2306      	movs	r3, #6
 801303e:	6063      	str	r3, [r4, #4]
 8013040:	2300      	movs	r3, #0
 8013042:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013046:	ab09      	add	r3, sp, #36	; 0x24
 8013048:	9300      	str	r3, [sp, #0]
 801304a:	ec49 8b10 	vmov	d0, r8, r9
 801304e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013052:	6022      	str	r2, [r4, #0]
 8013054:	f8cd a004 	str.w	sl, [sp, #4]
 8013058:	6861      	ldr	r1, [r4, #4]
 801305a:	4628      	mov	r0, r5
 801305c:	f7ff fee8 	bl	8012e30 <__cvt>
 8013060:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013064:	2b47      	cmp	r3, #71	; 0x47
 8013066:	4680      	mov	r8, r0
 8013068:	d109      	bne.n	801307e <_printf_float+0x126>
 801306a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801306c:	1cd8      	adds	r0, r3, #3
 801306e:	db02      	blt.n	8013076 <_printf_float+0x11e>
 8013070:	6862      	ldr	r2, [r4, #4]
 8013072:	4293      	cmp	r3, r2
 8013074:	dd47      	ble.n	8013106 <_printf_float+0x1ae>
 8013076:	f1aa 0a02 	sub.w	sl, sl, #2
 801307a:	fa5f fa8a 	uxtb.w	sl, sl
 801307e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013084:	d824      	bhi.n	80130d0 <_printf_float+0x178>
 8013086:	3901      	subs	r1, #1
 8013088:	4652      	mov	r2, sl
 801308a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801308e:	9109      	str	r1, [sp, #36]	; 0x24
 8013090:	f7ff ff2f 	bl	8012ef2 <__exponent>
 8013094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013096:	1813      	adds	r3, r2, r0
 8013098:	2a01      	cmp	r2, #1
 801309a:	4681      	mov	r9, r0
 801309c:	6123      	str	r3, [r4, #16]
 801309e:	dc02      	bgt.n	80130a6 <_printf_float+0x14e>
 80130a0:	6822      	ldr	r2, [r4, #0]
 80130a2:	07d1      	lsls	r1, r2, #31
 80130a4:	d501      	bpl.n	80130aa <_printf_float+0x152>
 80130a6:	3301      	adds	r3, #1
 80130a8:	6123      	str	r3, [r4, #16]
 80130aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d0a5      	beq.n	8012ffe <_printf_float+0xa6>
 80130b2:	232d      	movs	r3, #45	; 0x2d
 80130b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130b8:	e7a1      	b.n	8012ffe <_printf_float+0xa6>
 80130ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80130be:	f000 8177 	beq.w	80133b0 <_printf_float+0x458>
 80130c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80130c6:	d1bb      	bne.n	8013040 <_printf_float+0xe8>
 80130c8:	2900      	cmp	r1, #0
 80130ca:	d1b9      	bne.n	8013040 <_printf_float+0xe8>
 80130cc:	2301      	movs	r3, #1
 80130ce:	e7b6      	b.n	801303e <_printf_float+0xe6>
 80130d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80130d4:	d119      	bne.n	801310a <_printf_float+0x1b2>
 80130d6:	2900      	cmp	r1, #0
 80130d8:	6863      	ldr	r3, [r4, #4]
 80130da:	dd0c      	ble.n	80130f6 <_printf_float+0x19e>
 80130dc:	6121      	str	r1, [r4, #16]
 80130de:	b913      	cbnz	r3, 80130e6 <_printf_float+0x18e>
 80130e0:	6822      	ldr	r2, [r4, #0]
 80130e2:	07d2      	lsls	r2, r2, #31
 80130e4:	d502      	bpl.n	80130ec <_printf_float+0x194>
 80130e6:	3301      	adds	r3, #1
 80130e8:	440b      	add	r3, r1
 80130ea:	6123      	str	r3, [r4, #16]
 80130ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80130f0:	f04f 0900 	mov.w	r9, #0
 80130f4:	e7d9      	b.n	80130aa <_printf_float+0x152>
 80130f6:	b913      	cbnz	r3, 80130fe <_printf_float+0x1a6>
 80130f8:	6822      	ldr	r2, [r4, #0]
 80130fa:	07d0      	lsls	r0, r2, #31
 80130fc:	d501      	bpl.n	8013102 <_printf_float+0x1aa>
 80130fe:	3302      	adds	r3, #2
 8013100:	e7f3      	b.n	80130ea <_printf_float+0x192>
 8013102:	2301      	movs	r3, #1
 8013104:	e7f1      	b.n	80130ea <_printf_float+0x192>
 8013106:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801310a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801310e:	4293      	cmp	r3, r2
 8013110:	db05      	blt.n	801311e <_printf_float+0x1c6>
 8013112:	6822      	ldr	r2, [r4, #0]
 8013114:	6123      	str	r3, [r4, #16]
 8013116:	07d1      	lsls	r1, r2, #31
 8013118:	d5e8      	bpl.n	80130ec <_printf_float+0x194>
 801311a:	3301      	adds	r3, #1
 801311c:	e7e5      	b.n	80130ea <_printf_float+0x192>
 801311e:	2b00      	cmp	r3, #0
 8013120:	bfd4      	ite	le
 8013122:	f1c3 0302 	rsble	r3, r3, #2
 8013126:	2301      	movgt	r3, #1
 8013128:	4413      	add	r3, r2
 801312a:	e7de      	b.n	80130ea <_printf_float+0x192>
 801312c:	6823      	ldr	r3, [r4, #0]
 801312e:	055a      	lsls	r2, r3, #21
 8013130:	d407      	bmi.n	8013142 <_printf_float+0x1ea>
 8013132:	6923      	ldr	r3, [r4, #16]
 8013134:	4642      	mov	r2, r8
 8013136:	4631      	mov	r1, r6
 8013138:	4628      	mov	r0, r5
 801313a:	47b8      	blx	r7
 801313c:	3001      	adds	r0, #1
 801313e:	d12b      	bne.n	8013198 <_printf_float+0x240>
 8013140:	e767      	b.n	8013012 <_printf_float+0xba>
 8013142:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013146:	f240 80dc 	bls.w	8013302 <_printf_float+0x3aa>
 801314a:	2200      	movs	r2, #0
 801314c:	2300      	movs	r3, #0
 801314e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013152:	f7ed fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 8013156:	2800      	cmp	r0, #0
 8013158:	d033      	beq.n	80131c2 <_printf_float+0x26a>
 801315a:	2301      	movs	r3, #1
 801315c:	4a41      	ldr	r2, [pc, #260]	; (8013264 <_printf_float+0x30c>)
 801315e:	4631      	mov	r1, r6
 8013160:	4628      	mov	r0, r5
 8013162:	47b8      	blx	r7
 8013164:	3001      	adds	r0, #1
 8013166:	f43f af54 	beq.w	8013012 <_printf_float+0xba>
 801316a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801316e:	429a      	cmp	r2, r3
 8013170:	db02      	blt.n	8013178 <_printf_float+0x220>
 8013172:	6823      	ldr	r3, [r4, #0]
 8013174:	07d8      	lsls	r0, r3, #31
 8013176:	d50f      	bpl.n	8013198 <_printf_float+0x240>
 8013178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801317c:	4631      	mov	r1, r6
 801317e:	4628      	mov	r0, r5
 8013180:	47b8      	blx	r7
 8013182:	3001      	adds	r0, #1
 8013184:	f43f af45 	beq.w	8013012 <_printf_float+0xba>
 8013188:	f04f 0800 	mov.w	r8, #0
 801318c:	f104 091a 	add.w	r9, r4, #26
 8013190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013192:	3b01      	subs	r3, #1
 8013194:	4543      	cmp	r3, r8
 8013196:	dc09      	bgt.n	80131ac <_printf_float+0x254>
 8013198:	6823      	ldr	r3, [r4, #0]
 801319a:	079b      	lsls	r3, r3, #30
 801319c:	f100 8103 	bmi.w	80133a6 <_printf_float+0x44e>
 80131a0:	68e0      	ldr	r0, [r4, #12]
 80131a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a4:	4298      	cmp	r0, r3
 80131a6:	bfb8      	it	lt
 80131a8:	4618      	movlt	r0, r3
 80131aa:	e734      	b.n	8013016 <_printf_float+0xbe>
 80131ac:	2301      	movs	r3, #1
 80131ae:	464a      	mov	r2, r9
 80131b0:	4631      	mov	r1, r6
 80131b2:	4628      	mov	r0, r5
 80131b4:	47b8      	blx	r7
 80131b6:	3001      	adds	r0, #1
 80131b8:	f43f af2b 	beq.w	8013012 <_printf_float+0xba>
 80131bc:	f108 0801 	add.w	r8, r8, #1
 80131c0:	e7e6      	b.n	8013190 <_printf_float+0x238>
 80131c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	dc2b      	bgt.n	8013220 <_printf_float+0x2c8>
 80131c8:	2301      	movs	r3, #1
 80131ca:	4a26      	ldr	r2, [pc, #152]	; (8013264 <_printf_float+0x30c>)
 80131cc:	4631      	mov	r1, r6
 80131ce:	4628      	mov	r0, r5
 80131d0:	47b8      	blx	r7
 80131d2:	3001      	adds	r0, #1
 80131d4:	f43f af1d 	beq.w	8013012 <_printf_float+0xba>
 80131d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131da:	b923      	cbnz	r3, 80131e6 <_printf_float+0x28e>
 80131dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131de:	b913      	cbnz	r3, 80131e6 <_printf_float+0x28e>
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	07d9      	lsls	r1, r3, #31
 80131e4:	d5d8      	bpl.n	8013198 <_printf_float+0x240>
 80131e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131ea:	4631      	mov	r1, r6
 80131ec:	4628      	mov	r0, r5
 80131ee:	47b8      	blx	r7
 80131f0:	3001      	adds	r0, #1
 80131f2:	f43f af0e 	beq.w	8013012 <_printf_float+0xba>
 80131f6:	f04f 0900 	mov.w	r9, #0
 80131fa:	f104 0a1a 	add.w	sl, r4, #26
 80131fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013200:	425b      	negs	r3, r3
 8013202:	454b      	cmp	r3, r9
 8013204:	dc01      	bgt.n	801320a <_printf_float+0x2b2>
 8013206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013208:	e794      	b.n	8013134 <_printf_float+0x1dc>
 801320a:	2301      	movs	r3, #1
 801320c:	4652      	mov	r2, sl
 801320e:	4631      	mov	r1, r6
 8013210:	4628      	mov	r0, r5
 8013212:	47b8      	blx	r7
 8013214:	3001      	adds	r0, #1
 8013216:	f43f aefc 	beq.w	8013012 <_printf_float+0xba>
 801321a:	f109 0901 	add.w	r9, r9, #1
 801321e:	e7ee      	b.n	80131fe <_printf_float+0x2a6>
 8013220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013224:	429a      	cmp	r2, r3
 8013226:	bfa8      	it	ge
 8013228:	461a      	movge	r2, r3
 801322a:	2a00      	cmp	r2, #0
 801322c:	4691      	mov	r9, r2
 801322e:	dd07      	ble.n	8013240 <_printf_float+0x2e8>
 8013230:	4613      	mov	r3, r2
 8013232:	4631      	mov	r1, r6
 8013234:	4642      	mov	r2, r8
 8013236:	4628      	mov	r0, r5
 8013238:	47b8      	blx	r7
 801323a:	3001      	adds	r0, #1
 801323c:	f43f aee9 	beq.w	8013012 <_printf_float+0xba>
 8013240:	f104 031a 	add.w	r3, r4, #26
 8013244:	f04f 0b00 	mov.w	fp, #0
 8013248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801324c:	9306      	str	r3, [sp, #24]
 801324e:	e015      	b.n	801327c <_printf_float+0x324>
 8013250:	7fefffff 	.word	0x7fefffff
 8013254:	08018385 	.word	0x08018385
 8013258:	08018381 	.word	0x08018381
 801325c:	0801838d 	.word	0x0801838d
 8013260:	08018389 	.word	0x08018389
 8013264:	08018391 	.word	0x08018391
 8013268:	2301      	movs	r3, #1
 801326a:	9a06      	ldr	r2, [sp, #24]
 801326c:	4631      	mov	r1, r6
 801326e:	4628      	mov	r0, r5
 8013270:	47b8      	blx	r7
 8013272:	3001      	adds	r0, #1
 8013274:	f43f aecd 	beq.w	8013012 <_printf_float+0xba>
 8013278:	f10b 0b01 	add.w	fp, fp, #1
 801327c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013280:	ebaa 0309 	sub.w	r3, sl, r9
 8013284:	455b      	cmp	r3, fp
 8013286:	dcef      	bgt.n	8013268 <_printf_float+0x310>
 8013288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801328c:	429a      	cmp	r2, r3
 801328e:	44d0      	add	r8, sl
 8013290:	db15      	blt.n	80132be <_printf_float+0x366>
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	07da      	lsls	r2, r3, #31
 8013296:	d412      	bmi.n	80132be <_printf_float+0x366>
 8013298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801329a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801329c:	eba3 020a 	sub.w	r2, r3, sl
 80132a0:	eba3 0a01 	sub.w	sl, r3, r1
 80132a4:	4592      	cmp	sl, r2
 80132a6:	bfa8      	it	ge
 80132a8:	4692      	movge	sl, r2
 80132aa:	f1ba 0f00 	cmp.w	sl, #0
 80132ae:	dc0e      	bgt.n	80132ce <_printf_float+0x376>
 80132b0:	f04f 0800 	mov.w	r8, #0
 80132b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132b8:	f104 091a 	add.w	r9, r4, #26
 80132bc:	e019      	b.n	80132f2 <_printf_float+0x39a>
 80132be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132c2:	4631      	mov	r1, r6
 80132c4:	4628      	mov	r0, r5
 80132c6:	47b8      	blx	r7
 80132c8:	3001      	adds	r0, #1
 80132ca:	d1e5      	bne.n	8013298 <_printf_float+0x340>
 80132cc:	e6a1      	b.n	8013012 <_printf_float+0xba>
 80132ce:	4653      	mov	r3, sl
 80132d0:	4642      	mov	r2, r8
 80132d2:	4631      	mov	r1, r6
 80132d4:	4628      	mov	r0, r5
 80132d6:	47b8      	blx	r7
 80132d8:	3001      	adds	r0, #1
 80132da:	d1e9      	bne.n	80132b0 <_printf_float+0x358>
 80132dc:	e699      	b.n	8013012 <_printf_float+0xba>
 80132de:	2301      	movs	r3, #1
 80132e0:	464a      	mov	r2, r9
 80132e2:	4631      	mov	r1, r6
 80132e4:	4628      	mov	r0, r5
 80132e6:	47b8      	blx	r7
 80132e8:	3001      	adds	r0, #1
 80132ea:	f43f ae92 	beq.w	8013012 <_printf_float+0xba>
 80132ee:	f108 0801 	add.w	r8, r8, #1
 80132f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132f6:	1a9b      	subs	r3, r3, r2
 80132f8:	eba3 030a 	sub.w	r3, r3, sl
 80132fc:	4543      	cmp	r3, r8
 80132fe:	dcee      	bgt.n	80132de <_printf_float+0x386>
 8013300:	e74a      	b.n	8013198 <_printf_float+0x240>
 8013302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013304:	2a01      	cmp	r2, #1
 8013306:	dc01      	bgt.n	801330c <_printf_float+0x3b4>
 8013308:	07db      	lsls	r3, r3, #31
 801330a:	d53a      	bpl.n	8013382 <_printf_float+0x42a>
 801330c:	2301      	movs	r3, #1
 801330e:	4642      	mov	r2, r8
 8013310:	4631      	mov	r1, r6
 8013312:	4628      	mov	r0, r5
 8013314:	47b8      	blx	r7
 8013316:	3001      	adds	r0, #1
 8013318:	f43f ae7b 	beq.w	8013012 <_printf_float+0xba>
 801331c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013320:	4631      	mov	r1, r6
 8013322:	4628      	mov	r0, r5
 8013324:	47b8      	blx	r7
 8013326:	3001      	adds	r0, #1
 8013328:	f108 0801 	add.w	r8, r8, #1
 801332c:	f43f ae71 	beq.w	8013012 <_printf_float+0xba>
 8013330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013332:	2200      	movs	r2, #0
 8013334:	f103 3aff 	add.w	sl, r3, #4294967295
 8013338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801333c:	2300      	movs	r3, #0
 801333e:	f7ed fbe3 	bl	8000b08 <__aeabi_dcmpeq>
 8013342:	b9c8      	cbnz	r0, 8013378 <_printf_float+0x420>
 8013344:	4653      	mov	r3, sl
 8013346:	4642      	mov	r2, r8
 8013348:	4631      	mov	r1, r6
 801334a:	4628      	mov	r0, r5
 801334c:	47b8      	blx	r7
 801334e:	3001      	adds	r0, #1
 8013350:	d10e      	bne.n	8013370 <_printf_float+0x418>
 8013352:	e65e      	b.n	8013012 <_printf_float+0xba>
 8013354:	2301      	movs	r3, #1
 8013356:	4652      	mov	r2, sl
 8013358:	4631      	mov	r1, r6
 801335a:	4628      	mov	r0, r5
 801335c:	47b8      	blx	r7
 801335e:	3001      	adds	r0, #1
 8013360:	f43f ae57 	beq.w	8013012 <_printf_float+0xba>
 8013364:	f108 0801 	add.w	r8, r8, #1
 8013368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801336a:	3b01      	subs	r3, #1
 801336c:	4543      	cmp	r3, r8
 801336e:	dcf1      	bgt.n	8013354 <_printf_float+0x3fc>
 8013370:	464b      	mov	r3, r9
 8013372:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013376:	e6de      	b.n	8013136 <_printf_float+0x1de>
 8013378:	f04f 0800 	mov.w	r8, #0
 801337c:	f104 0a1a 	add.w	sl, r4, #26
 8013380:	e7f2      	b.n	8013368 <_printf_float+0x410>
 8013382:	2301      	movs	r3, #1
 8013384:	e7df      	b.n	8013346 <_printf_float+0x3ee>
 8013386:	2301      	movs	r3, #1
 8013388:	464a      	mov	r2, r9
 801338a:	4631      	mov	r1, r6
 801338c:	4628      	mov	r0, r5
 801338e:	47b8      	blx	r7
 8013390:	3001      	adds	r0, #1
 8013392:	f43f ae3e 	beq.w	8013012 <_printf_float+0xba>
 8013396:	f108 0801 	add.w	r8, r8, #1
 801339a:	68e3      	ldr	r3, [r4, #12]
 801339c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801339e:	1a9b      	subs	r3, r3, r2
 80133a0:	4543      	cmp	r3, r8
 80133a2:	dcf0      	bgt.n	8013386 <_printf_float+0x42e>
 80133a4:	e6fc      	b.n	80131a0 <_printf_float+0x248>
 80133a6:	f04f 0800 	mov.w	r8, #0
 80133aa:	f104 0919 	add.w	r9, r4, #25
 80133ae:	e7f4      	b.n	801339a <_printf_float+0x442>
 80133b0:	2900      	cmp	r1, #0
 80133b2:	f43f ae8b 	beq.w	80130cc <_printf_float+0x174>
 80133b6:	2300      	movs	r3, #0
 80133b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80133bc:	ab09      	add	r3, sp, #36	; 0x24
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	ec49 8b10 	vmov	d0, r8, r9
 80133c4:	6022      	str	r2, [r4, #0]
 80133c6:	f8cd a004 	str.w	sl, [sp, #4]
 80133ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80133ce:	4628      	mov	r0, r5
 80133d0:	f7ff fd2e 	bl	8012e30 <__cvt>
 80133d4:	4680      	mov	r8, r0
 80133d6:	e648      	b.n	801306a <_printf_float+0x112>

080133d8 <_printf_common>:
 80133d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133dc:	4691      	mov	r9, r2
 80133de:	461f      	mov	r7, r3
 80133e0:	688a      	ldr	r2, [r1, #8]
 80133e2:	690b      	ldr	r3, [r1, #16]
 80133e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133e8:	4293      	cmp	r3, r2
 80133ea:	bfb8      	it	lt
 80133ec:	4613      	movlt	r3, r2
 80133ee:	f8c9 3000 	str.w	r3, [r9]
 80133f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133f6:	4606      	mov	r6, r0
 80133f8:	460c      	mov	r4, r1
 80133fa:	b112      	cbz	r2, 8013402 <_printf_common+0x2a>
 80133fc:	3301      	adds	r3, #1
 80133fe:	f8c9 3000 	str.w	r3, [r9]
 8013402:	6823      	ldr	r3, [r4, #0]
 8013404:	0699      	lsls	r1, r3, #26
 8013406:	bf42      	ittt	mi
 8013408:	f8d9 3000 	ldrmi.w	r3, [r9]
 801340c:	3302      	addmi	r3, #2
 801340e:	f8c9 3000 	strmi.w	r3, [r9]
 8013412:	6825      	ldr	r5, [r4, #0]
 8013414:	f015 0506 	ands.w	r5, r5, #6
 8013418:	d107      	bne.n	801342a <_printf_common+0x52>
 801341a:	f104 0a19 	add.w	sl, r4, #25
 801341e:	68e3      	ldr	r3, [r4, #12]
 8013420:	f8d9 2000 	ldr.w	r2, [r9]
 8013424:	1a9b      	subs	r3, r3, r2
 8013426:	42ab      	cmp	r3, r5
 8013428:	dc28      	bgt.n	801347c <_printf_common+0xa4>
 801342a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801342e:	6822      	ldr	r2, [r4, #0]
 8013430:	3300      	adds	r3, #0
 8013432:	bf18      	it	ne
 8013434:	2301      	movne	r3, #1
 8013436:	0692      	lsls	r2, r2, #26
 8013438:	d42d      	bmi.n	8013496 <_printf_common+0xbe>
 801343a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801343e:	4639      	mov	r1, r7
 8013440:	4630      	mov	r0, r6
 8013442:	47c0      	blx	r8
 8013444:	3001      	adds	r0, #1
 8013446:	d020      	beq.n	801348a <_printf_common+0xb2>
 8013448:	6823      	ldr	r3, [r4, #0]
 801344a:	68e5      	ldr	r5, [r4, #12]
 801344c:	f8d9 2000 	ldr.w	r2, [r9]
 8013450:	f003 0306 	and.w	r3, r3, #6
 8013454:	2b04      	cmp	r3, #4
 8013456:	bf08      	it	eq
 8013458:	1aad      	subeq	r5, r5, r2
 801345a:	68a3      	ldr	r3, [r4, #8]
 801345c:	6922      	ldr	r2, [r4, #16]
 801345e:	bf0c      	ite	eq
 8013460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013464:	2500      	movne	r5, #0
 8013466:	4293      	cmp	r3, r2
 8013468:	bfc4      	itt	gt
 801346a:	1a9b      	subgt	r3, r3, r2
 801346c:	18ed      	addgt	r5, r5, r3
 801346e:	f04f 0900 	mov.w	r9, #0
 8013472:	341a      	adds	r4, #26
 8013474:	454d      	cmp	r5, r9
 8013476:	d11a      	bne.n	80134ae <_printf_common+0xd6>
 8013478:	2000      	movs	r0, #0
 801347a:	e008      	b.n	801348e <_printf_common+0xb6>
 801347c:	2301      	movs	r3, #1
 801347e:	4652      	mov	r2, sl
 8013480:	4639      	mov	r1, r7
 8013482:	4630      	mov	r0, r6
 8013484:	47c0      	blx	r8
 8013486:	3001      	adds	r0, #1
 8013488:	d103      	bne.n	8013492 <_printf_common+0xba>
 801348a:	f04f 30ff 	mov.w	r0, #4294967295
 801348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013492:	3501      	adds	r5, #1
 8013494:	e7c3      	b.n	801341e <_printf_common+0x46>
 8013496:	18e1      	adds	r1, r4, r3
 8013498:	1c5a      	adds	r2, r3, #1
 801349a:	2030      	movs	r0, #48	; 0x30
 801349c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80134a0:	4422      	add	r2, r4
 80134a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80134a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80134aa:	3302      	adds	r3, #2
 80134ac:	e7c5      	b.n	801343a <_printf_common+0x62>
 80134ae:	2301      	movs	r3, #1
 80134b0:	4622      	mov	r2, r4
 80134b2:	4639      	mov	r1, r7
 80134b4:	4630      	mov	r0, r6
 80134b6:	47c0      	blx	r8
 80134b8:	3001      	adds	r0, #1
 80134ba:	d0e6      	beq.n	801348a <_printf_common+0xb2>
 80134bc:	f109 0901 	add.w	r9, r9, #1
 80134c0:	e7d8      	b.n	8013474 <_printf_common+0x9c>
	...

080134c4 <_printf_i>:
 80134c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80134cc:	460c      	mov	r4, r1
 80134ce:	7e09      	ldrb	r1, [r1, #24]
 80134d0:	b085      	sub	sp, #20
 80134d2:	296e      	cmp	r1, #110	; 0x6e
 80134d4:	4617      	mov	r7, r2
 80134d6:	4606      	mov	r6, r0
 80134d8:	4698      	mov	r8, r3
 80134da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134dc:	f000 80b3 	beq.w	8013646 <_printf_i+0x182>
 80134e0:	d822      	bhi.n	8013528 <_printf_i+0x64>
 80134e2:	2963      	cmp	r1, #99	; 0x63
 80134e4:	d036      	beq.n	8013554 <_printf_i+0x90>
 80134e6:	d80a      	bhi.n	80134fe <_printf_i+0x3a>
 80134e8:	2900      	cmp	r1, #0
 80134ea:	f000 80b9 	beq.w	8013660 <_printf_i+0x19c>
 80134ee:	2958      	cmp	r1, #88	; 0x58
 80134f0:	f000 8083 	beq.w	80135fa <_printf_i+0x136>
 80134f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80134fc:	e032      	b.n	8013564 <_printf_i+0xa0>
 80134fe:	2964      	cmp	r1, #100	; 0x64
 8013500:	d001      	beq.n	8013506 <_printf_i+0x42>
 8013502:	2969      	cmp	r1, #105	; 0x69
 8013504:	d1f6      	bne.n	80134f4 <_printf_i+0x30>
 8013506:	6820      	ldr	r0, [r4, #0]
 8013508:	6813      	ldr	r3, [r2, #0]
 801350a:	0605      	lsls	r5, r0, #24
 801350c:	f103 0104 	add.w	r1, r3, #4
 8013510:	d52a      	bpl.n	8013568 <_printf_i+0xa4>
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	6011      	str	r1, [r2, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	da03      	bge.n	8013522 <_printf_i+0x5e>
 801351a:	222d      	movs	r2, #45	; 0x2d
 801351c:	425b      	negs	r3, r3
 801351e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013522:	486f      	ldr	r0, [pc, #444]	; (80136e0 <_printf_i+0x21c>)
 8013524:	220a      	movs	r2, #10
 8013526:	e039      	b.n	801359c <_printf_i+0xd8>
 8013528:	2973      	cmp	r1, #115	; 0x73
 801352a:	f000 809d 	beq.w	8013668 <_printf_i+0x1a4>
 801352e:	d808      	bhi.n	8013542 <_printf_i+0x7e>
 8013530:	296f      	cmp	r1, #111	; 0x6f
 8013532:	d020      	beq.n	8013576 <_printf_i+0xb2>
 8013534:	2970      	cmp	r1, #112	; 0x70
 8013536:	d1dd      	bne.n	80134f4 <_printf_i+0x30>
 8013538:	6823      	ldr	r3, [r4, #0]
 801353a:	f043 0320 	orr.w	r3, r3, #32
 801353e:	6023      	str	r3, [r4, #0]
 8013540:	e003      	b.n	801354a <_printf_i+0x86>
 8013542:	2975      	cmp	r1, #117	; 0x75
 8013544:	d017      	beq.n	8013576 <_printf_i+0xb2>
 8013546:	2978      	cmp	r1, #120	; 0x78
 8013548:	d1d4      	bne.n	80134f4 <_printf_i+0x30>
 801354a:	2378      	movs	r3, #120	; 0x78
 801354c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013550:	4864      	ldr	r0, [pc, #400]	; (80136e4 <_printf_i+0x220>)
 8013552:	e055      	b.n	8013600 <_printf_i+0x13c>
 8013554:	6813      	ldr	r3, [r2, #0]
 8013556:	1d19      	adds	r1, r3, #4
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	6011      	str	r1, [r2, #0]
 801355c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013564:	2301      	movs	r3, #1
 8013566:	e08c      	b.n	8013682 <_printf_i+0x1be>
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	6011      	str	r1, [r2, #0]
 801356c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013570:	bf18      	it	ne
 8013572:	b21b      	sxthne	r3, r3
 8013574:	e7cf      	b.n	8013516 <_printf_i+0x52>
 8013576:	6813      	ldr	r3, [r2, #0]
 8013578:	6825      	ldr	r5, [r4, #0]
 801357a:	1d18      	adds	r0, r3, #4
 801357c:	6010      	str	r0, [r2, #0]
 801357e:	0628      	lsls	r0, r5, #24
 8013580:	d501      	bpl.n	8013586 <_printf_i+0xc2>
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	e002      	b.n	801358c <_printf_i+0xc8>
 8013586:	0668      	lsls	r0, r5, #25
 8013588:	d5fb      	bpl.n	8013582 <_printf_i+0xbe>
 801358a:	881b      	ldrh	r3, [r3, #0]
 801358c:	4854      	ldr	r0, [pc, #336]	; (80136e0 <_printf_i+0x21c>)
 801358e:	296f      	cmp	r1, #111	; 0x6f
 8013590:	bf14      	ite	ne
 8013592:	220a      	movne	r2, #10
 8013594:	2208      	moveq	r2, #8
 8013596:	2100      	movs	r1, #0
 8013598:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801359c:	6865      	ldr	r5, [r4, #4]
 801359e:	60a5      	str	r5, [r4, #8]
 80135a0:	2d00      	cmp	r5, #0
 80135a2:	f2c0 8095 	blt.w	80136d0 <_printf_i+0x20c>
 80135a6:	6821      	ldr	r1, [r4, #0]
 80135a8:	f021 0104 	bic.w	r1, r1, #4
 80135ac:	6021      	str	r1, [r4, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d13d      	bne.n	801362e <_printf_i+0x16a>
 80135b2:	2d00      	cmp	r5, #0
 80135b4:	f040 808e 	bne.w	80136d4 <_printf_i+0x210>
 80135b8:	4665      	mov	r5, ip
 80135ba:	2a08      	cmp	r2, #8
 80135bc:	d10b      	bne.n	80135d6 <_printf_i+0x112>
 80135be:	6823      	ldr	r3, [r4, #0]
 80135c0:	07db      	lsls	r3, r3, #31
 80135c2:	d508      	bpl.n	80135d6 <_printf_i+0x112>
 80135c4:	6923      	ldr	r3, [r4, #16]
 80135c6:	6862      	ldr	r2, [r4, #4]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	bfde      	ittt	le
 80135cc:	2330      	movle	r3, #48	; 0x30
 80135ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80135d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80135d6:	ebac 0305 	sub.w	r3, ip, r5
 80135da:	6123      	str	r3, [r4, #16]
 80135dc:	f8cd 8000 	str.w	r8, [sp]
 80135e0:	463b      	mov	r3, r7
 80135e2:	aa03      	add	r2, sp, #12
 80135e4:	4621      	mov	r1, r4
 80135e6:	4630      	mov	r0, r6
 80135e8:	f7ff fef6 	bl	80133d8 <_printf_common>
 80135ec:	3001      	adds	r0, #1
 80135ee:	d14d      	bne.n	801368c <_printf_i+0x1c8>
 80135f0:	f04f 30ff 	mov.w	r0, #4294967295
 80135f4:	b005      	add	sp, #20
 80135f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135fa:	4839      	ldr	r0, [pc, #228]	; (80136e0 <_printf_i+0x21c>)
 80135fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013600:	6813      	ldr	r3, [r2, #0]
 8013602:	6821      	ldr	r1, [r4, #0]
 8013604:	1d1d      	adds	r5, r3, #4
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	6015      	str	r5, [r2, #0]
 801360a:	060a      	lsls	r2, r1, #24
 801360c:	d50b      	bpl.n	8013626 <_printf_i+0x162>
 801360e:	07ca      	lsls	r2, r1, #31
 8013610:	bf44      	itt	mi
 8013612:	f041 0120 	orrmi.w	r1, r1, #32
 8013616:	6021      	strmi	r1, [r4, #0]
 8013618:	b91b      	cbnz	r3, 8013622 <_printf_i+0x15e>
 801361a:	6822      	ldr	r2, [r4, #0]
 801361c:	f022 0220 	bic.w	r2, r2, #32
 8013620:	6022      	str	r2, [r4, #0]
 8013622:	2210      	movs	r2, #16
 8013624:	e7b7      	b.n	8013596 <_printf_i+0xd2>
 8013626:	064d      	lsls	r5, r1, #25
 8013628:	bf48      	it	mi
 801362a:	b29b      	uxthmi	r3, r3
 801362c:	e7ef      	b.n	801360e <_printf_i+0x14a>
 801362e:	4665      	mov	r5, ip
 8013630:	fbb3 f1f2 	udiv	r1, r3, r2
 8013634:	fb02 3311 	mls	r3, r2, r1, r3
 8013638:	5cc3      	ldrb	r3, [r0, r3]
 801363a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801363e:	460b      	mov	r3, r1
 8013640:	2900      	cmp	r1, #0
 8013642:	d1f5      	bne.n	8013630 <_printf_i+0x16c>
 8013644:	e7b9      	b.n	80135ba <_printf_i+0xf6>
 8013646:	6813      	ldr	r3, [r2, #0]
 8013648:	6825      	ldr	r5, [r4, #0]
 801364a:	6961      	ldr	r1, [r4, #20]
 801364c:	1d18      	adds	r0, r3, #4
 801364e:	6010      	str	r0, [r2, #0]
 8013650:	0628      	lsls	r0, r5, #24
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	d501      	bpl.n	801365a <_printf_i+0x196>
 8013656:	6019      	str	r1, [r3, #0]
 8013658:	e002      	b.n	8013660 <_printf_i+0x19c>
 801365a:	066a      	lsls	r2, r5, #25
 801365c:	d5fb      	bpl.n	8013656 <_printf_i+0x192>
 801365e:	8019      	strh	r1, [r3, #0]
 8013660:	2300      	movs	r3, #0
 8013662:	6123      	str	r3, [r4, #16]
 8013664:	4665      	mov	r5, ip
 8013666:	e7b9      	b.n	80135dc <_printf_i+0x118>
 8013668:	6813      	ldr	r3, [r2, #0]
 801366a:	1d19      	adds	r1, r3, #4
 801366c:	6011      	str	r1, [r2, #0]
 801366e:	681d      	ldr	r5, [r3, #0]
 8013670:	6862      	ldr	r2, [r4, #4]
 8013672:	2100      	movs	r1, #0
 8013674:	4628      	mov	r0, r5
 8013676:	f7ec fdd3 	bl	8000220 <memchr>
 801367a:	b108      	cbz	r0, 8013680 <_printf_i+0x1bc>
 801367c:	1b40      	subs	r0, r0, r5
 801367e:	6060      	str	r0, [r4, #4]
 8013680:	6863      	ldr	r3, [r4, #4]
 8013682:	6123      	str	r3, [r4, #16]
 8013684:	2300      	movs	r3, #0
 8013686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801368a:	e7a7      	b.n	80135dc <_printf_i+0x118>
 801368c:	6923      	ldr	r3, [r4, #16]
 801368e:	462a      	mov	r2, r5
 8013690:	4639      	mov	r1, r7
 8013692:	4630      	mov	r0, r6
 8013694:	47c0      	blx	r8
 8013696:	3001      	adds	r0, #1
 8013698:	d0aa      	beq.n	80135f0 <_printf_i+0x12c>
 801369a:	6823      	ldr	r3, [r4, #0]
 801369c:	079b      	lsls	r3, r3, #30
 801369e:	d413      	bmi.n	80136c8 <_printf_i+0x204>
 80136a0:	68e0      	ldr	r0, [r4, #12]
 80136a2:	9b03      	ldr	r3, [sp, #12]
 80136a4:	4298      	cmp	r0, r3
 80136a6:	bfb8      	it	lt
 80136a8:	4618      	movlt	r0, r3
 80136aa:	e7a3      	b.n	80135f4 <_printf_i+0x130>
 80136ac:	2301      	movs	r3, #1
 80136ae:	464a      	mov	r2, r9
 80136b0:	4639      	mov	r1, r7
 80136b2:	4630      	mov	r0, r6
 80136b4:	47c0      	blx	r8
 80136b6:	3001      	adds	r0, #1
 80136b8:	d09a      	beq.n	80135f0 <_printf_i+0x12c>
 80136ba:	3501      	adds	r5, #1
 80136bc:	68e3      	ldr	r3, [r4, #12]
 80136be:	9a03      	ldr	r2, [sp, #12]
 80136c0:	1a9b      	subs	r3, r3, r2
 80136c2:	42ab      	cmp	r3, r5
 80136c4:	dcf2      	bgt.n	80136ac <_printf_i+0x1e8>
 80136c6:	e7eb      	b.n	80136a0 <_printf_i+0x1dc>
 80136c8:	2500      	movs	r5, #0
 80136ca:	f104 0919 	add.w	r9, r4, #25
 80136ce:	e7f5      	b.n	80136bc <_printf_i+0x1f8>
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d1ac      	bne.n	801362e <_printf_i+0x16a>
 80136d4:	7803      	ldrb	r3, [r0, #0]
 80136d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136de:	e76c      	b.n	80135ba <_printf_i+0xf6>
 80136e0:	08018393 	.word	0x08018393
 80136e4:	080183a4 	.word	0x080183a4

080136e8 <copysign>:
 80136e8:	ec51 0b10 	vmov	r0, r1, d0
 80136ec:	ee11 0a90 	vmov	r0, s3
 80136f0:	ee10 2a10 	vmov	r2, s0
 80136f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80136f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80136fc:	ea41 0300 	orr.w	r3, r1, r0
 8013700:	ec43 2b10 	vmov	d0, r2, r3
 8013704:	4770      	bx	lr
	...

08013708 <_sbrk_r>:
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	4c06      	ldr	r4, [pc, #24]	; (8013724 <_sbrk_r+0x1c>)
 801370c:	2300      	movs	r3, #0
 801370e:	4605      	mov	r5, r0
 8013710:	4608      	mov	r0, r1
 8013712:	6023      	str	r3, [r4, #0]
 8013714:	f7f2 f890 	bl	8005838 <_sbrk>
 8013718:	1c43      	adds	r3, r0, #1
 801371a:	d102      	bne.n	8013722 <_sbrk_r+0x1a>
 801371c:	6823      	ldr	r3, [r4, #0]
 801371e:	b103      	cbz	r3, 8013722 <_sbrk_r+0x1a>
 8013720:	602b      	str	r3, [r5, #0]
 8013722:	bd38      	pop	{r3, r4, r5, pc}
 8013724:	2000686c 	.word	0x2000686c

08013728 <sniprintf>:
 8013728:	b40c      	push	{r2, r3}
 801372a:	b530      	push	{r4, r5, lr}
 801372c:	4b17      	ldr	r3, [pc, #92]	; (801378c <sniprintf+0x64>)
 801372e:	1e0c      	subs	r4, r1, #0
 8013730:	b09d      	sub	sp, #116	; 0x74
 8013732:	681d      	ldr	r5, [r3, #0]
 8013734:	da08      	bge.n	8013748 <sniprintf+0x20>
 8013736:	238b      	movs	r3, #139	; 0x8b
 8013738:	602b      	str	r3, [r5, #0]
 801373a:	f04f 30ff 	mov.w	r0, #4294967295
 801373e:	b01d      	add	sp, #116	; 0x74
 8013740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013744:	b002      	add	sp, #8
 8013746:	4770      	bx	lr
 8013748:	f44f 7302 	mov.w	r3, #520	; 0x208
 801374c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013750:	bf14      	ite	ne
 8013752:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013756:	4623      	moveq	r3, r4
 8013758:	9304      	str	r3, [sp, #16]
 801375a:	9307      	str	r3, [sp, #28]
 801375c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013760:	9002      	str	r0, [sp, #8]
 8013762:	9006      	str	r0, [sp, #24]
 8013764:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013768:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801376a:	ab21      	add	r3, sp, #132	; 0x84
 801376c:	a902      	add	r1, sp, #8
 801376e:	4628      	mov	r0, r5
 8013770:	9301      	str	r3, [sp, #4]
 8013772:	f001 fd23 	bl	80151bc <_svfiprintf_r>
 8013776:	1c43      	adds	r3, r0, #1
 8013778:	bfbc      	itt	lt
 801377a:	238b      	movlt	r3, #139	; 0x8b
 801377c:	602b      	strlt	r3, [r5, #0]
 801377e:	2c00      	cmp	r4, #0
 8013780:	d0dd      	beq.n	801373e <sniprintf+0x16>
 8013782:	9b02      	ldr	r3, [sp, #8]
 8013784:	2200      	movs	r2, #0
 8013786:	701a      	strb	r2, [r3, #0]
 8013788:	e7d9      	b.n	801373e <sniprintf+0x16>
 801378a:	bf00      	nop
 801378c:	20000434 	.word	0x20000434

08013790 <siprintf>:
 8013790:	b40e      	push	{r1, r2, r3}
 8013792:	b500      	push	{lr}
 8013794:	b09c      	sub	sp, #112	; 0x70
 8013796:	ab1d      	add	r3, sp, #116	; 0x74
 8013798:	9002      	str	r0, [sp, #8]
 801379a:	9006      	str	r0, [sp, #24]
 801379c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80137a0:	4809      	ldr	r0, [pc, #36]	; (80137c8 <siprintf+0x38>)
 80137a2:	9107      	str	r1, [sp, #28]
 80137a4:	9104      	str	r1, [sp, #16]
 80137a6:	4909      	ldr	r1, [pc, #36]	; (80137cc <siprintf+0x3c>)
 80137a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ac:	9105      	str	r1, [sp, #20]
 80137ae:	6800      	ldr	r0, [r0, #0]
 80137b0:	9301      	str	r3, [sp, #4]
 80137b2:	a902      	add	r1, sp, #8
 80137b4:	f001 fd02 	bl	80151bc <_svfiprintf_r>
 80137b8:	9b02      	ldr	r3, [sp, #8]
 80137ba:	2200      	movs	r2, #0
 80137bc:	701a      	strb	r2, [r3, #0]
 80137be:	b01c      	add	sp, #112	; 0x70
 80137c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80137c4:	b003      	add	sp, #12
 80137c6:	4770      	bx	lr
 80137c8:	20000434 	.word	0x20000434
 80137cc:	ffff0208 	.word	0xffff0208

080137d0 <__sread>:
 80137d0:	b510      	push	{r4, lr}
 80137d2:	460c      	mov	r4, r1
 80137d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137d8:	f001 fde8 	bl	80153ac <_read_r>
 80137dc:	2800      	cmp	r0, #0
 80137de:	bfab      	itete	ge
 80137e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80137e2:	89a3      	ldrhlt	r3, [r4, #12]
 80137e4:	181b      	addge	r3, r3, r0
 80137e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80137ea:	bfac      	ite	ge
 80137ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80137ee:	81a3      	strhlt	r3, [r4, #12]
 80137f0:	bd10      	pop	{r4, pc}

080137f2 <__swrite>:
 80137f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f6:	461f      	mov	r7, r3
 80137f8:	898b      	ldrh	r3, [r1, #12]
 80137fa:	05db      	lsls	r3, r3, #23
 80137fc:	4605      	mov	r5, r0
 80137fe:	460c      	mov	r4, r1
 8013800:	4616      	mov	r6, r2
 8013802:	d505      	bpl.n	8013810 <__swrite+0x1e>
 8013804:	2302      	movs	r3, #2
 8013806:	2200      	movs	r2, #0
 8013808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801380c:	f001 f8dc 	bl	80149c8 <_lseek_r>
 8013810:	89a3      	ldrh	r3, [r4, #12]
 8013812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801381a:	81a3      	strh	r3, [r4, #12]
 801381c:	4632      	mov	r2, r6
 801381e:	463b      	mov	r3, r7
 8013820:	4628      	mov	r0, r5
 8013822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013826:	f000 b869 	b.w	80138fc <_write_r>

0801382a <__sseek>:
 801382a:	b510      	push	{r4, lr}
 801382c:	460c      	mov	r4, r1
 801382e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013832:	f001 f8c9 	bl	80149c8 <_lseek_r>
 8013836:	1c43      	adds	r3, r0, #1
 8013838:	89a3      	ldrh	r3, [r4, #12]
 801383a:	bf15      	itete	ne
 801383c:	6560      	strne	r0, [r4, #84]	; 0x54
 801383e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013846:	81a3      	strheq	r3, [r4, #12]
 8013848:	bf18      	it	ne
 801384a:	81a3      	strhne	r3, [r4, #12]
 801384c:	bd10      	pop	{r4, pc}

0801384e <__sclose>:
 801384e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013852:	f000 b8db 	b.w	8013a0c <_close_r>
	...

08013858 <__swbuf_r>:
 8013858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385a:	460e      	mov	r6, r1
 801385c:	4614      	mov	r4, r2
 801385e:	4605      	mov	r5, r0
 8013860:	b118      	cbz	r0, 801386a <__swbuf_r+0x12>
 8013862:	6983      	ldr	r3, [r0, #24]
 8013864:	b90b      	cbnz	r3, 801386a <__swbuf_r+0x12>
 8013866:	f001 f817 	bl	8014898 <__sinit>
 801386a:	4b21      	ldr	r3, [pc, #132]	; (80138f0 <__swbuf_r+0x98>)
 801386c:	429c      	cmp	r4, r3
 801386e:	d12a      	bne.n	80138c6 <__swbuf_r+0x6e>
 8013870:	686c      	ldr	r4, [r5, #4]
 8013872:	69a3      	ldr	r3, [r4, #24]
 8013874:	60a3      	str	r3, [r4, #8]
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	071a      	lsls	r2, r3, #28
 801387a:	d52e      	bpl.n	80138da <__swbuf_r+0x82>
 801387c:	6923      	ldr	r3, [r4, #16]
 801387e:	b363      	cbz	r3, 80138da <__swbuf_r+0x82>
 8013880:	6923      	ldr	r3, [r4, #16]
 8013882:	6820      	ldr	r0, [r4, #0]
 8013884:	1ac0      	subs	r0, r0, r3
 8013886:	6963      	ldr	r3, [r4, #20]
 8013888:	b2f6      	uxtb	r6, r6
 801388a:	4283      	cmp	r3, r0
 801388c:	4637      	mov	r7, r6
 801388e:	dc04      	bgt.n	801389a <__swbuf_r+0x42>
 8013890:	4621      	mov	r1, r4
 8013892:	4628      	mov	r0, r5
 8013894:	f000 ff96 	bl	80147c4 <_fflush_r>
 8013898:	bb28      	cbnz	r0, 80138e6 <__swbuf_r+0x8e>
 801389a:	68a3      	ldr	r3, [r4, #8]
 801389c:	3b01      	subs	r3, #1
 801389e:	60a3      	str	r3, [r4, #8]
 80138a0:	6823      	ldr	r3, [r4, #0]
 80138a2:	1c5a      	adds	r2, r3, #1
 80138a4:	6022      	str	r2, [r4, #0]
 80138a6:	701e      	strb	r6, [r3, #0]
 80138a8:	6963      	ldr	r3, [r4, #20]
 80138aa:	3001      	adds	r0, #1
 80138ac:	4283      	cmp	r3, r0
 80138ae:	d004      	beq.n	80138ba <__swbuf_r+0x62>
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	07db      	lsls	r3, r3, #31
 80138b4:	d519      	bpl.n	80138ea <__swbuf_r+0x92>
 80138b6:	2e0a      	cmp	r6, #10
 80138b8:	d117      	bne.n	80138ea <__swbuf_r+0x92>
 80138ba:	4621      	mov	r1, r4
 80138bc:	4628      	mov	r0, r5
 80138be:	f000 ff81 	bl	80147c4 <_fflush_r>
 80138c2:	b190      	cbz	r0, 80138ea <__swbuf_r+0x92>
 80138c4:	e00f      	b.n	80138e6 <__swbuf_r+0x8e>
 80138c6:	4b0b      	ldr	r3, [pc, #44]	; (80138f4 <__swbuf_r+0x9c>)
 80138c8:	429c      	cmp	r4, r3
 80138ca:	d101      	bne.n	80138d0 <__swbuf_r+0x78>
 80138cc:	68ac      	ldr	r4, [r5, #8]
 80138ce:	e7d0      	b.n	8013872 <__swbuf_r+0x1a>
 80138d0:	4b09      	ldr	r3, [pc, #36]	; (80138f8 <__swbuf_r+0xa0>)
 80138d2:	429c      	cmp	r4, r3
 80138d4:	bf08      	it	eq
 80138d6:	68ec      	ldreq	r4, [r5, #12]
 80138d8:	e7cb      	b.n	8013872 <__swbuf_r+0x1a>
 80138da:	4621      	mov	r1, r4
 80138dc:	4628      	mov	r0, r5
 80138de:	f000 f81f 	bl	8013920 <__swsetup_r>
 80138e2:	2800      	cmp	r0, #0
 80138e4:	d0cc      	beq.n	8013880 <__swbuf_r+0x28>
 80138e6:	f04f 37ff 	mov.w	r7, #4294967295
 80138ea:	4638      	mov	r0, r7
 80138ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ee:	bf00      	nop
 80138f0:	080183e4 	.word	0x080183e4
 80138f4:	08018404 	.word	0x08018404
 80138f8:	080183c4 	.word	0x080183c4

080138fc <_write_r>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	4c07      	ldr	r4, [pc, #28]	; (801391c <_write_r+0x20>)
 8013900:	4605      	mov	r5, r0
 8013902:	4608      	mov	r0, r1
 8013904:	4611      	mov	r1, r2
 8013906:	2200      	movs	r2, #0
 8013908:	6022      	str	r2, [r4, #0]
 801390a:	461a      	mov	r2, r3
 801390c:	f7f1 ff43 	bl	8005796 <_write>
 8013910:	1c43      	adds	r3, r0, #1
 8013912:	d102      	bne.n	801391a <_write_r+0x1e>
 8013914:	6823      	ldr	r3, [r4, #0]
 8013916:	b103      	cbz	r3, 801391a <_write_r+0x1e>
 8013918:	602b      	str	r3, [r5, #0]
 801391a:	bd38      	pop	{r3, r4, r5, pc}
 801391c:	2000686c 	.word	0x2000686c

08013920 <__swsetup_r>:
 8013920:	4b32      	ldr	r3, [pc, #200]	; (80139ec <__swsetup_r+0xcc>)
 8013922:	b570      	push	{r4, r5, r6, lr}
 8013924:	681d      	ldr	r5, [r3, #0]
 8013926:	4606      	mov	r6, r0
 8013928:	460c      	mov	r4, r1
 801392a:	b125      	cbz	r5, 8013936 <__swsetup_r+0x16>
 801392c:	69ab      	ldr	r3, [r5, #24]
 801392e:	b913      	cbnz	r3, 8013936 <__swsetup_r+0x16>
 8013930:	4628      	mov	r0, r5
 8013932:	f000 ffb1 	bl	8014898 <__sinit>
 8013936:	4b2e      	ldr	r3, [pc, #184]	; (80139f0 <__swsetup_r+0xd0>)
 8013938:	429c      	cmp	r4, r3
 801393a:	d10f      	bne.n	801395c <__swsetup_r+0x3c>
 801393c:	686c      	ldr	r4, [r5, #4]
 801393e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013942:	b29a      	uxth	r2, r3
 8013944:	0715      	lsls	r5, r2, #28
 8013946:	d42c      	bmi.n	80139a2 <__swsetup_r+0x82>
 8013948:	06d0      	lsls	r0, r2, #27
 801394a:	d411      	bmi.n	8013970 <__swsetup_r+0x50>
 801394c:	2209      	movs	r2, #9
 801394e:	6032      	str	r2, [r6, #0]
 8013950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013954:	81a3      	strh	r3, [r4, #12]
 8013956:	f04f 30ff 	mov.w	r0, #4294967295
 801395a:	e03e      	b.n	80139da <__swsetup_r+0xba>
 801395c:	4b25      	ldr	r3, [pc, #148]	; (80139f4 <__swsetup_r+0xd4>)
 801395e:	429c      	cmp	r4, r3
 8013960:	d101      	bne.n	8013966 <__swsetup_r+0x46>
 8013962:	68ac      	ldr	r4, [r5, #8]
 8013964:	e7eb      	b.n	801393e <__swsetup_r+0x1e>
 8013966:	4b24      	ldr	r3, [pc, #144]	; (80139f8 <__swsetup_r+0xd8>)
 8013968:	429c      	cmp	r4, r3
 801396a:	bf08      	it	eq
 801396c:	68ec      	ldreq	r4, [r5, #12]
 801396e:	e7e6      	b.n	801393e <__swsetup_r+0x1e>
 8013970:	0751      	lsls	r1, r2, #29
 8013972:	d512      	bpl.n	801399a <__swsetup_r+0x7a>
 8013974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013976:	b141      	cbz	r1, 801398a <__swsetup_r+0x6a>
 8013978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801397c:	4299      	cmp	r1, r3
 801397e:	d002      	beq.n	8013986 <__swsetup_r+0x66>
 8013980:	4630      	mov	r0, r6
 8013982:	f7ff f86d 	bl	8012a60 <_free_r>
 8013986:	2300      	movs	r3, #0
 8013988:	6363      	str	r3, [r4, #52]	; 0x34
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013990:	81a3      	strh	r3, [r4, #12]
 8013992:	2300      	movs	r3, #0
 8013994:	6063      	str	r3, [r4, #4]
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	6023      	str	r3, [r4, #0]
 801399a:	89a3      	ldrh	r3, [r4, #12]
 801399c:	f043 0308 	orr.w	r3, r3, #8
 80139a0:	81a3      	strh	r3, [r4, #12]
 80139a2:	6923      	ldr	r3, [r4, #16]
 80139a4:	b94b      	cbnz	r3, 80139ba <__swsetup_r+0x9a>
 80139a6:	89a3      	ldrh	r3, [r4, #12]
 80139a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139b0:	d003      	beq.n	80139ba <__swsetup_r+0x9a>
 80139b2:	4621      	mov	r1, r4
 80139b4:	4630      	mov	r0, r6
 80139b6:	f001 f83d 	bl	8014a34 <__smakebuf_r>
 80139ba:	89a2      	ldrh	r2, [r4, #12]
 80139bc:	f012 0301 	ands.w	r3, r2, #1
 80139c0:	d00c      	beq.n	80139dc <__swsetup_r+0xbc>
 80139c2:	2300      	movs	r3, #0
 80139c4:	60a3      	str	r3, [r4, #8]
 80139c6:	6963      	ldr	r3, [r4, #20]
 80139c8:	425b      	negs	r3, r3
 80139ca:	61a3      	str	r3, [r4, #24]
 80139cc:	6923      	ldr	r3, [r4, #16]
 80139ce:	b953      	cbnz	r3, 80139e6 <__swsetup_r+0xc6>
 80139d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80139d8:	d1ba      	bne.n	8013950 <__swsetup_r+0x30>
 80139da:	bd70      	pop	{r4, r5, r6, pc}
 80139dc:	0792      	lsls	r2, r2, #30
 80139de:	bf58      	it	pl
 80139e0:	6963      	ldrpl	r3, [r4, #20]
 80139e2:	60a3      	str	r3, [r4, #8]
 80139e4:	e7f2      	b.n	80139cc <__swsetup_r+0xac>
 80139e6:	2000      	movs	r0, #0
 80139e8:	e7f7      	b.n	80139da <__swsetup_r+0xba>
 80139ea:	bf00      	nop
 80139ec:	20000434 	.word	0x20000434
 80139f0:	080183e4 	.word	0x080183e4
 80139f4:	08018404 	.word	0x08018404
 80139f8:	080183c4 	.word	0x080183c4

080139fc <abort>:
 80139fc:	b508      	push	{r3, lr}
 80139fe:	2006      	movs	r0, #6
 8013a00:	f001 fd0e 	bl	8015420 <raise>
 8013a04:	2001      	movs	r0, #1
 8013a06:	f7f1 fe9f 	bl	8005748 <_exit>
	...

08013a0c <_close_r>:
 8013a0c:	b538      	push	{r3, r4, r5, lr}
 8013a0e:	4c06      	ldr	r4, [pc, #24]	; (8013a28 <_close_r+0x1c>)
 8013a10:	2300      	movs	r3, #0
 8013a12:	4605      	mov	r5, r0
 8013a14:	4608      	mov	r0, r1
 8013a16:	6023      	str	r3, [r4, #0]
 8013a18:	f7f1 fed9 	bl	80057ce <_close>
 8013a1c:	1c43      	adds	r3, r0, #1
 8013a1e:	d102      	bne.n	8013a26 <_close_r+0x1a>
 8013a20:	6823      	ldr	r3, [r4, #0]
 8013a22:	b103      	cbz	r3, 8013a26 <_close_r+0x1a>
 8013a24:	602b      	str	r3, [r5, #0]
 8013a26:	bd38      	pop	{r3, r4, r5, pc}
 8013a28:	2000686c 	.word	0x2000686c

08013a2c <quorem>:
 8013a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a30:	6903      	ldr	r3, [r0, #16]
 8013a32:	690c      	ldr	r4, [r1, #16]
 8013a34:	42a3      	cmp	r3, r4
 8013a36:	4680      	mov	r8, r0
 8013a38:	f2c0 8082 	blt.w	8013b40 <quorem+0x114>
 8013a3c:	3c01      	subs	r4, #1
 8013a3e:	f101 0714 	add.w	r7, r1, #20
 8013a42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013a46:	f100 0614 	add.w	r6, r0, #20
 8013a4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013a4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013a52:	eb06 030c 	add.w	r3, r6, ip
 8013a56:	3501      	adds	r5, #1
 8013a58:	eb07 090c 	add.w	r9, r7, ip
 8013a5c:	9301      	str	r3, [sp, #4]
 8013a5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8013a62:	b395      	cbz	r5, 8013aca <quorem+0x9e>
 8013a64:	f04f 0a00 	mov.w	sl, #0
 8013a68:	4638      	mov	r0, r7
 8013a6a:	46b6      	mov	lr, r6
 8013a6c:	46d3      	mov	fp, sl
 8013a6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a72:	b293      	uxth	r3, r2
 8013a74:	fb05 a303 	mla	r3, r5, r3, sl
 8013a78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	ebab 0303 	sub.w	r3, fp, r3
 8013a82:	0c12      	lsrs	r2, r2, #16
 8013a84:	f8de b000 	ldr.w	fp, [lr]
 8013a88:	fb05 a202 	mla	r2, r5, r2, sl
 8013a8c:	fa13 f38b 	uxtah	r3, r3, fp
 8013a90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013a94:	fa1f fb82 	uxth.w	fp, r2
 8013a98:	f8de 2000 	ldr.w	r2, [lr]
 8013a9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013aaa:	4581      	cmp	r9, r0
 8013aac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013ab0:	f84e 3b04 	str.w	r3, [lr], #4
 8013ab4:	d2db      	bcs.n	8013a6e <quorem+0x42>
 8013ab6:	f856 300c 	ldr.w	r3, [r6, ip]
 8013aba:	b933      	cbnz	r3, 8013aca <quorem+0x9e>
 8013abc:	9b01      	ldr	r3, [sp, #4]
 8013abe:	3b04      	subs	r3, #4
 8013ac0:	429e      	cmp	r6, r3
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	d330      	bcc.n	8013b28 <quorem+0xfc>
 8013ac6:	f8c8 4010 	str.w	r4, [r8, #16]
 8013aca:	4640      	mov	r0, r8
 8013acc:	f001 fa22 	bl	8014f14 <__mcmp>
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	db25      	blt.n	8013b20 <quorem+0xf4>
 8013ad4:	3501      	adds	r5, #1
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	f04f 0c00 	mov.w	ip, #0
 8013adc:	f857 2b04 	ldr.w	r2, [r7], #4
 8013ae0:	f8d0 e000 	ldr.w	lr, [r0]
 8013ae4:	b293      	uxth	r3, r2
 8013ae6:	ebac 0303 	sub.w	r3, ip, r3
 8013aea:	0c12      	lsrs	r2, r2, #16
 8013aec:	fa13 f38e 	uxtah	r3, r3, lr
 8013af0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013afe:	45b9      	cmp	r9, r7
 8013b00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013b04:	f840 3b04 	str.w	r3, [r0], #4
 8013b08:	d2e8      	bcs.n	8013adc <quorem+0xb0>
 8013b0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013b0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013b12:	b92a      	cbnz	r2, 8013b20 <quorem+0xf4>
 8013b14:	3b04      	subs	r3, #4
 8013b16:	429e      	cmp	r6, r3
 8013b18:	461a      	mov	r2, r3
 8013b1a:	d30b      	bcc.n	8013b34 <quorem+0x108>
 8013b1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8013b20:	4628      	mov	r0, r5
 8013b22:	b003      	add	sp, #12
 8013b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b28:	6812      	ldr	r2, [r2, #0]
 8013b2a:	3b04      	subs	r3, #4
 8013b2c:	2a00      	cmp	r2, #0
 8013b2e:	d1ca      	bne.n	8013ac6 <quorem+0x9a>
 8013b30:	3c01      	subs	r4, #1
 8013b32:	e7c5      	b.n	8013ac0 <quorem+0x94>
 8013b34:	6812      	ldr	r2, [r2, #0]
 8013b36:	3b04      	subs	r3, #4
 8013b38:	2a00      	cmp	r2, #0
 8013b3a:	d1ef      	bne.n	8013b1c <quorem+0xf0>
 8013b3c:	3c01      	subs	r4, #1
 8013b3e:	e7ea      	b.n	8013b16 <quorem+0xea>
 8013b40:	2000      	movs	r0, #0
 8013b42:	e7ee      	b.n	8013b22 <quorem+0xf6>
 8013b44:	0000      	movs	r0, r0
	...

08013b48 <_dtoa_r>:
 8013b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b4c:	ec57 6b10 	vmov	r6, r7, d0
 8013b50:	b097      	sub	sp, #92	; 0x5c
 8013b52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b54:	9106      	str	r1, [sp, #24]
 8013b56:	4604      	mov	r4, r0
 8013b58:	920b      	str	r2, [sp, #44]	; 0x2c
 8013b5a:	9312      	str	r3, [sp, #72]	; 0x48
 8013b5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013b60:	e9cd 6700 	strd	r6, r7, [sp]
 8013b64:	b93d      	cbnz	r5, 8013b76 <_dtoa_r+0x2e>
 8013b66:	2010      	movs	r0, #16
 8013b68:	f7fe ff56 	bl	8012a18 <malloc>
 8013b6c:	6260      	str	r0, [r4, #36]	; 0x24
 8013b6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b72:	6005      	str	r5, [r0, #0]
 8013b74:	60c5      	str	r5, [r0, #12]
 8013b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b78:	6819      	ldr	r1, [r3, #0]
 8013b7a:	b151      	cbz	r1, 8013b92 <_dtoa_r+0x4a>
 8013b7c:	685a      	ldr	r2, [r3, #4]
 8013b7e:	604a      	str	r2, [r1, #4]
 8013b80:	2301      	movs	r3, #1
 8013b82:	4093      	lsls	r3, r2
 8013b84:	608b      	str	r3, [r1, #8]
 8013b86:	4620      	mov	r0, r4
 8013b88:	f000 ffe3 	bl	8014b52 <_Bfree>
 8013b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b8e:	2200      	movs	r2, #0
 8013b90:	601a      	str	r2, [r3, #0]
 8013b92:	1e3b      	subs	r3, r7, #0
 8013b94:	bfbb      	ittet	lt
 8013b96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013b9a:	9301      	strlt	r3, [sp, #4]
 8013b9c:	2300      	movge	r3, #0
 8013b9e:	2201      	movlt	r2, #1
 8013ba0:	bfac      	ite	ge
 8013ba2:	f8c8 3000 	strge.w	r3, [r8]
 8013ba6:	f8c8 2000 	strlt.w	r2, [r8]
 8013baa:	4baf      	ldr	r3, [pc, #700]	; (8013e68 <_dtoa_r+0x320>)
 8013bac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013bb0:	ea33 0308 	bics.w	r3, r3, r8
 8013bb4:	d114      	bne.n	8013be0 <_dtoa_r+0x98>
 8013bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8013bbc:	6013      	str	r3, [r2, #0]
 8013bbe:	9b00      	ldr	r3, [sp, #0]
 8013bc0:	b923      	cbnz	r3, 8013bcc <_dtoa_r+0x84>
 8013bc2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	f000 8542 	beq.w	8014650 <_dtoa_r+0xb08>
 8013bcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013e7c <_dtoa_r+0x334>
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	f000 8544 	beq.w	8014660 <_dtoa_r+0xb18>
 8013bd8:	f10b 0303 	add.w	r3, fp, #3
 8013bdc:	f000 bd3e 	b.w	801465c <_dtoa_r+0xb14>
 8013be0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013be4:	2200      	movs	r2, #0
 8013be6:	2300      	movs	r3, #0
 8013be8:	4630      	mov	r0, r6
 8013bea:	4639      	mov	r1, r7
 8013bec:	f7ec ff8c 	bl	8000b08 <__aeabi_dcmpeq>
 8013bf0:	4681      	mov	r9, r0
 8013bf2:	b168      	cbz	r0, 8013c10 <_dtoa_r+0xc8>
 8013bf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	6013      	str	r3, [r2, #0]
 8013bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	f000 8524 	beq.w	801464a <_dtoa_r+0xb02>
 8013c02:	4b9a      	ldr	r3, [pc, #616]	; (8013e6c <_dtoa_r+0x324>)
 8013c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013c06:	f103 3bff 	add.w	fp, r3, #4294967295
 8013c0a:	6013      	str	r3, [r2, #0]
 8013c0c:	f000 bd28 	b.w	8014660 <_dtoa_r+0xb18>
 8013c10:	aa14      	add	r2, sp, #80	; 0x50
 8013c12:	a915      	add	r1, sp, #84	; 0x54
 8013c14:	ec47 6b10 	vmov	d0, r6, r7
 8013c18:	4620      	mov	r0, r4
 8013c1a:	f001 f9f2 	bl	8015002 <__d2b>
 8013c1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013c22:	9004      	str	r0, [sp, #16]
 8013c24:	2d00      	cmp	r5, #0
 8013c26:	d07c      	beq.n	8013d22 <_dtoa_r+0x1da>
 8013c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013c30:	46b2      	mov	sl, r6
 8013c32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013c3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013c3e:	2200      	movs	r2, #0
 8013c40:	4b8b      	ldr	r3, [pc, #556]	; (8013e70 <_dtoa_r+0x328>)
 8013c42:	4650      	mov	r0, sl
 8013c44:	4659      	mov	r1, fp
 8013c46:	f7ec fb3f 	bl	80002c8 <__aeabi_dsub>
 8013c4a:	a381      	add	r3, pc, #516	; (adr r3, 8013e50 <_dtoa_r+0x308>)
 8013c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c50:	f7ec fcf2 	bl	8000638 <__aeabi_dmul>
 8013c54:	a380      	add	r3, pc, #512	; (adr r3, 8013e58 <_dtoa_r+0x310>)
 8013c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5a:	f7ec fb37 	bl	80002cc <__adddf3>
 8013c5e:	4606      	mov	r6, r0
 8013c60:	4628      	mov	r0, r5
 8013c62:	460f      	mov	r7, r1
 8013c64:	f7ec fc7e 	bl	8000564 <__aeabi_i2d>
 8013c68:	a37d      	add	r3, pc, #500	; (adr r3, 8013e60 <_dtoa_r+0x318>)
 8013c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6e:	f7ec fce3 	bl	8000638 <__aeabi_dmul>
 8013c72:	4602      	mov	r2, r0
 8013c74:	460b      	mov	r3, r1
 8013c76:	4630      	mov	r0, r6
 8013c78:	4639      	mov	r1, r7
 8013c7a:	f7ec fb27 	bl	80002cc <__adddf3>
 8013c7e:	4606      	mov	r6, r0
 8013c80:	460f      	mov	r7, r1
 8013c82:	f7ec ff89 	bl	8000b98 <__aeabi_d2iz>
 8013c86:	2200      	movs	r2, #0
 8013c88:	4682      	mov	sl, r0
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	4639      	mov	r1, r7
 8013c90:	f7ec ff44 	bl	8000b1c <__aeabi_dcmplt>
 8013c94:	b148      	cbz	r0, 8013caa <_dtoa_r+0x162>
 8013c96:	4650      	mov	r0, sl
 8013c98:	f7ec fc64 	bl	8000564 <__aeabi_i2d>
 8013c9c:	4632      	mov	r2, r6
 8013c9e:	463b      	mov	r3, r7
 8013ca0:	f7ec ff32 	bl	8000b08 <__aeabi_dcmpeq>
 8013ca4:	b908      	cbnz	r0, 8013caa <_dtoa_r+0x162>
 8013ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013caa:	f1ba 0f16 	cmp.w	sl, #22
 8013cae:	d859      	bhi.n	8013d64 <_dtoa_r+0x21c>
 8013cb0:	4970      	ldr	r1, [pc, #448]	; (8013e74 <_dtoa_r+0x32c>)
 8013cb2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cbe:	f7ec ff4b 	bl	8000b58 <__aeabi_dcmpgt>
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	d050      	beq.n	8013d68 <_dtoa_r+0x220>
 8013cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cca:	2300      	movs	r3, #0
 8013ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013cd0:	1b5d      	subs	r5, r3, r5
 8013cd2:	f1b5 0801 	subs.w	r8, r5, #1
 8013cd6:	bf49      	itett	mi
 8013cd8:	f1c5 0301 	rsbmi	r3, r5, #1
 8013cdc:	2300      	movpl	r3, #0
 8013cde:	9305      	strmi	r3, [sp, #20]
 8013ce0:	f04f 0800 	movmi.w	r8, #0
 8013ce4:	bf58      	it	pl
 8013ce6:	9305      	strpl	r3, [sp, #20]
 8013ce8:	f1ba 0f00 	cmp.w	sl, #0
 8013cec:	db3e      	blt.n	8013d6c <_dtoa_r+0x224>
 8013cee:	2300      	movs	r3, #0
 8013cf0:	44d0      	add	r8, sl
 8013cf2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013cf6:	9307      	str	r3, [sp, #28]
 8013cf8:	9b06      	ldr	r3, [sp, #24]
 8013cfa:	2b09      	cmp	r3, #9
 8013cfc:	f200 8090 	bhi.w	8013e20 <_dtoa_r+0x2d8>
 8013d00:	2b05      	cmp	r3, #5
 8013d02:	bfc4      	itt	gt
 8013d04:	3b04      	subgt	r3, #4
 8013d06:	9306      	strgt	r3, [sp, #24]
 8013d08:	9b06      	ldr	r3, [sp, #24]
 8013d0a:	f1a3 0302 	sub.w	r3, r3, #2
 8013d0e:	bfcc      	ite	gt
 8013d10:	2500      	movgt	r5, #0
 8013d12:	2501      	movle	r5, #1
 8013d14:	2b03      	cmp	r3, #3
 8013d16:	f200 808f 	bhi.w	8013e38 <_dtoa_r+0x2f0>
 8013d1a:	e8df f003 	tbb	[pc, r3]
 8013d1e:	7f7d      	.short	0x7f7d
 8013d20:	7131      	.short	0x7131
 8013d22:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013d26:	441d      	add	r5, r3
 8013d28:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013d2c:	2820      	cmp	r0, #32
 8013d2e:	dd13      	ble.n	8013d58 <_dtoa_r+0x210>
 8013d30:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013d34:	9b00      	ldr	r3, [sp, #0]
 8013d36:	fa08 f800 	lsl.w	r8, r8, r0
 8013d3a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013d3e:	fa23 f000 	lsr.w	r0, r3, r0
 8013d42:	ea48 0000 	orr.w	r0, r8, r0
 8013d46:	f7ec fbfd 	bl	8000544 <__aeabi_ui2d>
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	4682      	mov	sl, r0
 8013d4e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013d52:	3d01      	subs	r5, #1
 8013d54:	9313      	str	r3, [sp, #76]	; 0x4c
 8013d56:	e772      	b.n	8013c3e <_dtoa_r+0xf6>
 8013d58:	9b00      	ldr	r3, [sp, #0]
 8013d5a:	f1c0 0020 	rsb	r0, r0, #32
 8013d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8013d62:	e7f0      	b.n	8013d46 <_dtoa_r+0x1fe>
 8013d64:	2301      	movs	r3, #1
 8013d66:	e7b1      	b.n	8013ccc <_dtoa_r+0x184>
 8013d68:	900f      	str	r0, [sp, #60]	; 0x3c
 8013d6a:	e7b0      	b.n	8013cce <_dtoa_r+0x186>
 8013d6c:	9b05      	ldr	r3, [sp, #20]
 8013d6e:	eba3 030a 	sub.w	r3, r3, sl
 8013d72:	9305      	str	r3, [sp, #20]
 8013d74:	f1ca 0300 	rsb	r3, sl, #0
 8013d78:	9307      	str	r3, [sp, #28]
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8013d7e:	e7bb      	b.n	8013cf8 <_dtoa_r+0x1b0>
 8013d80:	2301      	movs	r3, #1
 8013d82:	930a      	str	r3, [sp, #40]	; 0x28
 8013d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	dd59      	ble.n	8013e3e <_dtoa_r+0x2f6>
 8013d8a:	9302      	str	r3, [sp, #8]
 8013d8c:	4699      	mov	r9, r3
 8013d8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d90:	2200      	movs	r2, #0
 8013d92:	6072      	str	r2, [r6, #4]
 8013d94:	2204      	movs	r2, #4
 8013d96:	f102 0014 	add.w	r0, r2, #20
 8013d9a:	4298      	cmp	r0, r3
 8013d9c:	6871      	ldr	r1, [r6, #4]
 8013d9e:	d953      	bls.n	8013e48 <_dtoa_r+0x300>
 8013da0:	4620      	mov	r0, r4
 8013da2:	f000 fea2 	bl	8014aea <_Balloc>
 8013da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013da8:	6030      	str	r0, [r6, #0]
 8013daa:	f1b9 0f0e 	cmp.w	r9, #14
 8013dae:	f8d3 b000 	ldr.w	fp, [r3]
 8013db2:	f200 80e6 	bhi.w	8013f82 <_dtoa_r+0x43a>
 8013db6:	2d00      	cmp	r5, #0
 8013db8:	f000 80e3 	beq.w	8013f82 <_dtoa_r+0x43a>
 8013dbc:	ed9d 7b00 	vldr	d7, [sp]
 8013dc0:	f1ba 0f00 	cmp.w	sl, #0
 8013dc4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013dc8:	dd74      	ble.n	8013eb4 <_dtoa_r+0x36c>
 8013dca:	4a2a      	ldr	r2, [pc, #168]	; (8013e74 <_dtoa_r+0x32c>)
 8013dcc:	f00a 030f 	and.w	r3, sl, #15
 8013dd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013dd4:	ed93 7b00 	vldr	d7, [r3]
 8013dd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013ddc:	06f0      	lsls	r0, r6, #27
 8013dde:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013de2:	d565      	bpl.n	8013eb0 <_dtoa_r+0x368>
 8013de4:	4b24      	ldr	r3, [pc, #144]	; (8013e78 <_dtoa_r+0x330>)
 8013de6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013dea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013dee:	f7ec fd4d 	bl	800088c <__aeabi_ddiv>
 8013df2:	e9cd 0100 	strd	r0, r1, [sp]
 8013df6:	f006 060f 	and.w	r6, r6, #15
 8013dfa:	2503      	movs	r5, #3
 8013dfc:	4f1e      	ldr	r7, [pc, #120]	; (8013e78 <_dtoa_r+0x330>)
 8013dfe:	e04c      	b.n	8013e9a <_dtoa_r+0x352>
 8013e00:	2301      	movs	r3, #1
 8013e02:	930a      	str	r3, [sp, #40]	; 0x28
 8013e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e06:	4453      	add	r3, sl
 8013e08:	f103 0901 	add.w	r9, r3, #1
 8013e0c:	9302      	str	r3, [sp, #8]
 8013e0e:	464b      	mov	r3, r9
 8013e10:	2b01      	cmp	r3, #1
 8013e12:	bfb8      	it	lt
 8013e14:	2301      	movlt	r3, #1
 8013e16:	e7ba      	b.n	8013d8e <_dtoa_r+0x246>
 8013e18:	2300      	movs	r3, #0
 8013e1a:	e7b2      	b.n	8013d82 <_dtoa_r+0x23a>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	e7f0      	b.n	8013e02 <_dtoa_r+0x2ba>
 8013e20:	2501      	movs	r5, #1
 8013e22:	2300      	movs	r3, #0
 8013e24:	9306      	str	r3, [sp, #24]
 8013e26:	950a      	str	r5, [sp, #40]	; 0x28
 8013e28:	f04f 33ff 	mov.w	r3, #4294967295
 8013e2c:	9302      	str	r3, [sp, #8]
 8013e2e:	4699      	mov	r9, r3
 8013e30:	2200      	movs	r2, #0
 8013e32:	2312      	movs	r3, #18
 8013e34:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e36:	e7aa      	b.n	8013d8e <_dtoa_r+0x246>
 8013e38:	2301      	movs	r3, #1
 8013e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8013e3c:	e7f4      	b.n	8013e28 <_dtoa_r+0x2e0>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	9302      	str	r3, [sp, #8]
 8013e42:	4699      	mov	r9, r3
 8013e44:	461a      	mov	r2, r3
 8013e46:	e7f5      	b.n	8013e34 <_dtoa_r+0x2ec>
 8013e48:	3101      	adds	r1, #1
 8013e4a:	6071      	str	r1, [r6, #4]
 8013e4c:	0052      	lsls	r2, r2, #1
 8013e4e:	e7a2      	b.n	8013d96 <_dtoa_r+0x24e>
 8013e50:	636f4361 	.word	0x636f4361
 8013e54:	3fd287a7 	.word	0x3fd287a7
 8013e58:	8b60c8b3 	.word	0x8b60c8b3
 8013e5c:	3fc68a28 	.word	0x3fc68a28
 8013e60:	509f79fb 	.word	0x509f79fb
 8013e64:	3fd34413 	.word	0x3fd34413
 8013e68:	7ff00000 	.word	0x7ff00000
 8013e6c:	08018392 	.word	0x08018392
 8013e70:	3ff80000 	.word	0x3ff80000
 8013e74:	08018450 	.word	0x08018450
 8013e78:	08018428 	.word	0x08018428
 8013e7c:	080183be 	.word	0x080183be
 8013e80:	07f1      	lsls	r1, r6, #31
 8013e82:	d508      	bpl.n	8013e96 <_dtoa_r+0x34e>
 8013e84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e8c:	f7ec fbd4 	bl	8000638 <__aeabi_dmul>
 8013e90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e94:	3501      	adds	r5, #1
 8013e96:	1076      	asrs	r6, r6, #1
 8013e98:	3708      	adds	r7, #8
 8013e9a:	2e00      	cmp	r6, #0
 8013e9c:	d1f0      	bne.n	8013e80 <_dtoa_r+0x338>
 8013e9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013ea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ea6:	f7ec fcf1 	bl	800088c <__aeabi_ddiv>
 8013eaa:	e9cd 0100 	strd	r0, r1, [sp]
 8013eae:	e01a      	b.n	8013ee6 <_dtoa_r+0x39e>
 8013eb0:	2502      	movs	r5, #2
 8013eb2:	e7a3      	b.n	8013dfc <_dtoa_r+0x2b4>
 8013eb4:	f000 80a0 	beq.w	8013ff8 <_dtoa_r+0x4b0>
 8013eb8:	f1ca 0600 	rsb	r6, sl, #0
 8013ebc:	4b9f      	ldr	r3, [pc, #636]	; (801413c <_dtoa_r+0x5f4>)
 8013ebe:	4fa0      	ldr	r7, [pc, #640]	; (8014140 <_dtoa_r+0x5f8>)
 8013ec0:	f006 020f 	and.w	r2, r6, #15
 8013ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ecc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013ed0:	f7ec fbb2 	bl	8000638 <__aeabi_dmul>
 8013ed4:	e9cd 0100 	strd	r0, r1, [sp]
 8013ed8:	1136      	asrs	r6, r6, #4
 8013eda:	2300      	movs	r3, #0
 8013edc:	2502      	movs	r5, #2
 8013ede:	2e00      	cmp	r6, #0
 8013ee0:	d17f      	bne.n	8013fe2 <_dtoa_r+0x49a>
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d1e1      	bne.n	8013eaa <_dtoa_r+0x362>
 8013ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 8087 	beq.w	8013ffc <_dtoa_r+0x4b4>
 8013eee:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	4b93      	ldr	r3, [pc, #588]	; (8014144 <_dtoa_r+0x5fc>)
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	4639      	mov	r1, r7
 8013efa:	f7ec fe0f 	bl	8000b1c <__aeabi_dcmplt>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d07c      	beq.n	8013ffc <_dtoa_r+0x4b4>
 8013f02:	f1b9 0f00 	cmp.w	r9, #0
 8013f06:	d079      	beq.n	8013ffc <_dtoa_r+0x4b4>
 8013f08:	9b02      	ldr	r3, [sp, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	dd35      	ble.n	8013f7a <_dtoa_r+0x432>
 8013f0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013f12:	9308      	str	r3, [sp, #32]
 8013f14:	4639      	mov	r1, r7
 8013f16:	2200      	movs	r2, #0
 8013f18:	4b8b      	ldr	r3, [pc, #556]	; (8014148 <_dtoa_r+0x600>)
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f7ec fb8c 	bl	8000638 <__aeabi_dmul>
 8013f20:	e9cd 0100 	strd	r0, r1, [sp]
 8013f24:	9f02      	ldr	r7, [sp, #8]
 8013f26:	3501      	adds	r5, #1
 8013f28:	4628      	mov	r0, r5
 8013f2a:	f7ec fb1b 	bl	8000564 <__aeabi_i2d>
 8013f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f32:	f7ec fb81 	bl	8000638 <__aeabi_dmul>
 8013f36:	2200      	movs	r2, #0
 8013f38:	4b84      	ldr	r3, [pc, #528]	; (801414c <_dtoa_r+0x604>)
 8013f3a:	f7ec f9c7 	bl	80002cc <__adddf3>
 8013f3e:	4605      	mov	r5, r0
 8013f40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013f44:	2f00      	cmp	r7, #0
 8013f46:	d15d      	bne.n	8014004 <_dtoa_r+0x4bc>
 8013f48:	2200      	movs	r2, #0
 8013f4a:	4b81      	ldr	r3, [pc, #516]	; (8014150 <_dtoa_r+0x608>)
 8013f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f50:	f7ec f9ba 	bl	80002c8 <__aeabi_dsub>
 8013f54:	462a      	mov	r2, r5
 8013f56:	4633      	mov	r3, r6
 8013f58:	e9cd 0100 	strd	r0, r1, [sp]
 8013f5c:	f7ec fdfc 	bl	8000b58 <__aeabi_dcmpgt>
 8013f60:	2800      	cmp	r0, #0
 8013f62:	f040 8288 	bne.w	8014476 <_dtoa_r+0x92e>
 8013f66:	462a      	mov	r2, r5
 8013f68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f70:	f7ec fdd4 	bl	8000b1c <__aeabi_dcmplt>
 8013f74:	2800      	cmp	r0, #0
 8013f76:	f040 827c 	bne.w	8014472 <_dtoa_r+0x92a>
 8013f7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8013f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f2c0 8150 	blt.w	801422a <_dtoa_r+0x6e2>
 8013f8a:	f1ba 0f0e 	cmp.w	sl, #14
 8013f8e:	f300 814c 	bgt.w	801422a <_dtoa_r+0x6e2>
 8013f92:	4b6a      	ldr	r3, [pc, #424]	; (801413c <_dtoa_r+0x5f4>)
 8013f94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013f98:	ed93 7b00 	vldr	d7, [r3]
 8013f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013fa4:	f280 80d8 	bge.w	8014158 <_dtoa_r+0x610>
 8013fa8:	f1b9 0f00 	cmp.w	r9, #0
 8013fac:	f300 80d4 	bgt.w	8014158 <_dtoa_r+0x610>
 8013fb0:	f040 825e 	bne.w	8014470 <_dtoa_r+0x928>
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	4b66      	ldr	r3, [pc, #408]	; (8014150 <_dtoa_r+0x608>)
 8013fb8:	ec51 0b17 	vmov	r0, r1, d7
 8013fbc:	f7ec fb3c 	bl	8000638 <__aeabi_dmul>
 8013fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fc4:	f7ec fdbe 	bl	8000b44 <__aeabi_dcmpge>
 8013fc8:	464f      	mov	r7, r9
 8013fca:	464e      	mov	r6, r9
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	f040 8234 	bne.w	801443a <_dtoa_r+0x8f2>
 8013fd2:	2331      	movs	r3, #49	; 0x31
 8013fd4:	f10b 0501 	add.w	r5, fp, #1
 8013fd8:	f88b 3000 	strb.w	r3, [fp]
 8013fdc:	f10a 0a01 	add.w	sl, sl, #1
 8013fe0:	e22f      	b.n	8014442 <_dtoa_r+0x8fa>
 8013fe2:	07f2      	lsls	r2, r6, #31
 8013fe4:	d505      	bpl.n	8013ff2 <_dtoa_r+0x4aa>
 8013fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013fea:	f7ec fb25 	bl	8000638 <__aeabi_dmul>
 8013fee:	3501      	adds	r5, #1
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	1076      	asrs	r6, r6, #1
 8013ff4:	3708      	adds	r7, #8
 8013ff6:	e772      	b.n	8013ede <_dtoa_r+0x396>
 8013ff8:	2502      	movs	r5, #2
 8013ffa:	e774      	b.n	8013ee6 <_dtoa_r+0x39e>
 8013ffc:	f8cd a020 	str.w	sl, [sp, #32]
 8014000:	464f      	mov	r7, r9
 8014002:	e791      	b.n	8013f28 <_dtoa_r+0x3e0>
 8014004:	4b4d      	ldr	r3, [pc, #308]	; (801413c <_dtoa_r+0x5f4>)
 8014006:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801400a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801400e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014010:	2b00      	cmp	r3, #0
 8014012:	d047      	beq.n	80140a4 <_dtoa_r+0x55c>
 8014014:	4602      	mov	r2, r0
 8014016:	460b      	mov	r3, r1
 8014018:	2000      	movs	r0, #0
 801401a:	494e      	ldr	r1, [pc, #312]	; (8014154 <_dtoa_r+0x60c>)
 801401c:	f7ec fc36 	bl	800088c <__aeabi_ddiv>
 8014020:	462a      	mov	r2, r5
 8014022:	4633      	mov	r3, r6
 8014024:	f7ec f950 	bl	80002c8 <__aeabi_dsub>
 8014028:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801402c:	465d      	mov	r5, fp
 801402e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014032:	f7ec fdb1 	bl	8000b98 <__aeabi_d2iz>
 8014036:	4606      	mov	r6, r0
 8014038:	f7ec fa94 	bl	8000564 <__aeabi_i2d>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014044:	f7ec f940 	bl	80002c8 <__aeabi_dsub>
 8014048:	3630      	adds	r6, #48	; 0x30
 801404a:	f805 6b01 	strb.w	r6, [r5], #1
 801404e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014052:	e9cd 0100 	strd	r0, r1, [sp]
 8014056:	f7ec fd61 	bl	8000b1c <__aeabi_dcmplt>
 801405a:	2800      	cmp	r0, #0
 801405c:	d163      	bne.n	8014126 <_dtoa_r+0x5de>
 801405e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014062:	2000      	movs	r0, #0
 8014064:	4937      	ldr	r1, [pc, #220]	; (8014144 <_dtoa_r+0x5fc>)
 8014066:	f7ec f92f 	bl	80002c8 <__aeabi_dsub>
 801406a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801406e:	f7ec fd55 	bl	8000b1c <__aeabi_dcmplt>
 8014072:	2800      	cmp	r0, #0
 8014074:	f040 80b7 	bne.w	80141e6 <_dtoa_r+0x69e>
 8014078:	eba5 030b 	sub.w	r3, r5, fp
 801407c:	429f      	cmp	r7, r3
 801407e:	f77f af7c 	ble.w	8013f7a <_dtoa_r+0x432>
 8014082:	2200      	movs	r2, #0
 8014084:	4b30      	ldr	r3, [pc, #192]	; (8014148 <_dtoa_r+0x600>)
 8014086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801408a:	f7ec fad5 	bl	8000638 <__aeabi_dmul>
 801408e:	2200      	movs	r2, #0
 8014090:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014094:	4b2c      	ldr	r3, [pc, #176]	; (8014148 <_dtoa_r+0x600>)
 8014096:	e9dd 0100 	ldrd	r0, r1, [sp]
 801409a:	f7ec facd 	bl	8000638 <__aeabi_dmul>
 801409e:	e9cd 0100 	strd	r0, r1, [sp]
 80140a2:	e7c4      	b.n	801402e <_dtoa_r+0x4e6>
 80140a4:	462a      	mov	r2, r5
 80140a6:	4633      	mov	r3, r6
 80140a8:	f7ec fac6 	bl	8000638 <__aeabi_dmul>
 80140ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80140b0:	eb0b 0507 	add.w	r5, fp, r7
 80140b4:	465e      	mov	r6, fp
 80140b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140ba:	f7ec fd6d 	bl	8000b98 <__aeabi_d2iz>
 80140be:	4607      	mov	r7, r0
 80140c0:	f7ec fa50 	bl	8000564 <__aeabi_i2d>
 80140c4:	3730      	adds	r7, #48	; 0x30
 80140c6:	4602      	mov	r2, r0
 80140c8:	460b      	mov	r3, r1
 80140ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140ce:	f7ec f8fb 	bl	80002c8 <__aeabi_dsub>
 80140d2:	f806 7b01 	strb.w	r7, [r6], #1
 80140d6:	42ae      	cmp	r6, r5
 80140d8:	e9cd 0100 	strd	r0, r1, [sp]
 80140dc:	f04f 0200 	mov.w	r2, #0
 80140e0:	d126      	bne.n	8014130 <_dtoa_r+0x5e8>
 80140e2:	4b1c      	ldr	r3, [pc, #112]	; (8014154 <_dtoa_r+0x60c>)
 80140e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80140e8:	f7ec f8f0 	bl	80002cc <__adddf3>
 80140ec:	4602      	mov	r2, r0
 80140ee:	460b      	mov	r3, r1
 80140f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140f4:	f7ec fd30 	bl	8000b58 <__aeabi_dcmpgt>
 80140f8:	2800      	cmp	r0, #0
 80140fa:	d174      	bne.n	80141e6 <_dtoa_r+0x69e>
 80140fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014100:	2000      	movs	r0, #0
 8014102:	4914      	ldr	r1, [pc, #80]	; (8014154 <_dtoa_r+0x60c>)
 8014104:	f7ec f8e0 	bl	80002c8 <__aeabi_dsub>
 8014108:	4602      	mov	r2, r0
 801410a:	460b      	mov	r3, r1
 801410c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014110:	f7ec fd04 	bl	8000b1c <__aeabi_dcmplt>
 8014114:	2800      	cmp	r0, #0
 8014116:	f43f af30 	beq.w	8013f7a <_dtoa_r+0x432>
 801411a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801411e:	2b30      	cmp	r3, #48	; 0x30
 8014120:	f105 32ff 	add.w	r2, r5, #4294967295
 8014124:	d002      	beq.n	801412c <_dtoa_r+0x5e4>
 8014126:	f8dd a020 	ldr.w	sl, [sp, #32]
 801412a:	e04a      	b.n	80141c2 <_dtoa_r+0x67a>
 801412c:	4615      	mov	r5, r2
 801412e:	e7f4      	b.n	801411a <_dtoa_r+0x5d2>
 8014130:	4b05      	ldr	r3, [pc, #20]	; (8014148 <_dtoa_r+0x600>)
 8014132:	f7ec fa81 	bl	8000638 <__aeabi_dmul>
 8014136:	e9cd 0100 	strd	r0, r1, [sp]
 801413a:	e7bc      	b.n	80140b6 <_dtoa_r+0x56e>
 801413c:	08018450 	.word	0x08018450
 8014140:	08018428 	.word	0x08018428
 8014144:	3ff00000 	.word	0x3ff00000
 8014148:	40240000 	.word	0x40240000
 801414c:	401c0000 	.word	0x401c0000
 8014150:	40140000 	.word	0x40140000
 8014154:	3fe00000 	.word	0x3fe00000
 8014158:	e9dd 6700 	ldrd	r6, r7, [sp]
 801415c:	465d      	mov	r5, fp
 801415e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014162:	4630      	mov	r0, r6
 8014164:	4639      	mov	r1, r7
 8014166:	f7ec fb91 	bl	800088c <__aeabi_ddiv>
 801416a:	f7ec fd15 	bl	8000b98 <__aeabi_d2iz>
 801416e:	4680      	mov	r8, r0
 8014170:	f7ec f9f8 	bl	8000564 <__aeabi_i2d>
 8014174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014178:	f7ec fa5e 	bl	8000638 <__aeabi_dmul>
 801417c:	4602      	mov	r2, r0
 801417e:	460b      	mov	r3, r1
 8014180:	4630      	mov	r0, r6
 8014182:	4639      	mov	r1, r7
 8014184:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014188:	f7ec f89e 	bl	80002c8 <__aeabi_dsub>
 801418c:	f805 6b01 	strb.w	r6, [r5], #1
 8014190:	eba5 060b 	sub.w	r6, r5, fp
 8014194:	45b1      	cmp	r9, r6
 8014196:	4602      	mov	r2, r0
 8014198:	460b      	mov	r3, r1
 801419a:	d139      	bne.n	8014210 <_dtoa_r+0x6c8>
 801419c:	f7ec f896 	bl	80002cc <__adddf3>
 80141a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141a4:	4606      	mov	r6, r0
 80141a6:	460f      	mov	r7, r1
 80141a8:	f7ec fcd6 	bl	8000b58 <__aeabi_dcmpgt>
 80141ac:	b9c8      	cbnz	r0, 80141e2 <_dtoa_r+0x69a>
 80141ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141b2:	4630      	mov	r0, r6
 80141b4:	4639      	mov	r1, r7
 80141b6:	f7ec fca7 	bl	8000b08 <__aeabi_dcmpeq>
 80141ba:	b110      	cbz	r0, 80141c2 <_dtoa_r+0x67a>
 80141bc:	f018 0f01 	tst.w	r8, #1
 80141c0:	d10f      	bne.n	80141e2 <_dtoa_r+0x69a>
 80141c2:	9904      	ldr	r1, [sp, #16]
 80141c4:	4620      	mov	r0, r4
 80141c6:	f000 fcc4 	bl	8014b52 <_Bfree>
 80141ca:	2300      	movs	r3, #0
 80141cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141ce:	702b      	strb	r3, [r5, #0]
 80141d0:	f10a 0301 	add.w	r3, sl, #1
 80141d4:	6013      	str	r3, [r2, #0]
 80141d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141d8:	2b00      	cmp	r3, #0
 80141da:	f000 8241 	beq.w	8014660 <_dtoa_r+0xb18>
 80141de:	601d      	str	r5, [r3, #0]
 80141e0:	e23e      	b.n	8014660 <_dtoa_r+0xb18>
 80141e2:	f8cd a020 	str.w	sl, [sp, #32]
 80141e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80141ea:	2a39      	cmp	r2, #57	; 0x39
 80141ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80141f0:	d108      	bne.n	8014204 <_dtoa_r+0x6bc>
 80141f2:	459b      	cmp	fp, r3
 80141f4:	d10a      	bne.n	801420c <_dtoa_r+0x6c4>
 80141f6:	9b08      	ldr	r3, [sp, #32]
 80141f8:	3301      	adds	r3, #1
 80141fa:	9308      	str	r3, [sp, #32]
 80141fc:	2330      	movs	r3, #48	; 0x30
 80141fe:	f88b 3000 	strb.w	r3, [fp]
 8014202:	465b      	mov	r3, fp
 8014204:	781a      	ldrb	r2, [r3, #0]
 8014206:	3201      	adds	r2, #1
 8014208:	701a      	strb	r2, [r3, #0]
 801420a:	e78c      	b.n	8014126 <_dtoa_r+0x5de>
 801420c:	461d      	mov	r5, r3
 801420e:	e7ea      	b.n	80141e6 <_dtoa_r+0x69e>
 8014210:	2200      	movs	r2, #0
 8014212:	4b9b      	ldr	r3, [pc, #620]	; (8014480 <_dtoa_r+0x938>)
 8014214:	f7ec fa10 	bl	8000638 <__aeabi_dmul>
 8014218:	2200      	movs	r2, #0
 801421a:	2300      	movs	r3, #0
 801421c:	4606      	mov	r6, r0
 801421e:	460f      	mov	r7, r1
 8014220:	f7ec fc72 	bl	8000b08 <__aeabi_dcmpeq>
 8014224:	2800      	cmp	r0, #0
 8014226:	d09a      	beq.n	801415e <_dtoa_r+0x616>
 8014228:	e7cb      	b.n	80141c2 <_dtoa_r+0x67a>
 801422a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801422c:	2a00      	cmp	r2, #0
 801422e:	f000 808b 	beq.w	8014348 <_dtoa_r+0x800>
 8014232:	9a06      	ldr	r2, [sp, #24]
 8014234:	2a01      	cmp	r2, #1
 8014236:	dc6e      	bgt.n	8014316 <_dtoa_r+0x7ce>
 8014238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801423a:	2a00      	cmp	r2, #0
 801423c:	d067      	beq.n	801430e <_dtoa_r+0x7c6>
 801423e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014242:	9f07      	ldr	r7, [sp, #28]
 8014244:	9d05      	ldr	r5, [sp, #20]
 8014246:	9a05      	ldr	r2, [sp, #20]
 8014248:	2101      	movs	r1, #1
 801424a:	441a      	add	r2, r3
 801424c:	4620      	mov	r0, r4
 801424e:	9205      	str	r2, [sp, #20]
 8014250:	4498      	add	r8, r3
 8014252:	f000 fd1e 	bl	8014c92 <__i2b>
 8014256:	4606      	mov	r6, r0
 8014258:	2d00      	cmp	r5, #0
 801425a:	dd0c      	ble.n	8014276 <_dtoa_r+0x72e>
 801425c:	f1b8 0f00 	cmp.w	r8, #0
 8014260:	dd09      	ble.n	8014276 <_dtoa_r+0x72e>
 8014262:	4545      	cmp	r5, r8
 8014264:	9a05      	ldr	r2, [sp, #20]
 8014266:	462b      	mov	r3, r5
 8014268:	bfa8      	it	ge
 801426a:	4643      	movge	r3, r8
 801426c:	1ad2      	subs	r2, r2, r3
 801426e:	9205      	str	r2, [sp, #20]
 8014270:	1aed      	subs	r5, r5, r3
 8014272:	eba8 0803 	sub.w	r8, r8, r3
 8014276:	9b07      	ldr	r3, [sp, #28]
 8014278:	b1eb      	cbz	r3, 80142b6 <_dtoa_r+0x76e>
 801427a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801427c:	2b00      	cmp	r3, #0
 801427e:	d067      	beq.n	8014350 <_dtoa_r+0x808>
 8014280:	b18f      	cbz	r7, 80142a6 <_dtoa_r+0x75e>
 8014282:	4631      	mov	r1, r6
 8014284:	463a      	mov	r2, r7
 8014286:	4620      	mov	r0, r4
 8014288:	f000 fda2 	bl	8014dd0 <__pow5mult>
 801428c:	9a04      	ldr	r2, [sp, #16]
 801428e:	4601      	mov	r1, r0
 8014290:	4606      	mov	r6, r0
 8014292:	4620      	mov	r0, r4
 8014294:	f000 fd06 	bl	8014ca4 <__multiply>
 8014298:	9904      	ldr	r1, [sp, #16]
 801429a:	9008      	str	r0, [sp, #32]
 801429c:	4620      	mov	r0, r4
 801429e:	f000 fc58 	bl	8014b52 <_Bfree>
 80142a2:	9b08      	ldr	r3, [sp, #32]
 80142a4:	9304      	str	r3, [sp, #16]
 80142a6:	9b07      	ldr	r3, [sp, #28]
 80142a8:	1bda      	subs	r2, r3, r7
 80142aa:	d004      	beq.n	80142b6 <_dtoa_r+0x76e>
 80142ac:	9904      	ldr	r1, [sp, #16]
 80142ae:	4620      	mov	r0, r4
 80142b0:	f000 fd8e 	bl	8014dd0 <__pow5mult>
 80142b4:	9004      	str	r0, [sp, #16]
 80142b6:	2101      	movs	r1, #1
 80142b8:	4620      	mov	r0, r4
 80142ba:	f000 fcea 	bl	8014c92 <__i2b>
 80142be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142c0:	4607      	mov	r7, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	f000 81d0 	beq.w	8014668 <_dtoa_r+0xb20>
 80142c8:	461a      	mov	r2, r3
 80142ca:	4601      	mov	r1, r0
 80142cc:	4620      	mov	r0, r4
 80142ce:	f000 fd7f 	bl	8014dd0 <__pow5mult>
 80142d2:	9b06      	ldr	r3, [sp, #24]
 80142d4:	2b01      	cmp	r3, #1
 80142d6:	4607      	mov	r7, r0
 80142d8:	dc40      	bgt.n	801435c <_dtoa_r+0x814>
 80142da:	9b00      	ldr	r3, [sp, #0]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d139      	bne.n	8014354 <_dtoa_r+0x80c>
 80142e0:	9b01      	ldr	r3, [sp, #4]
 80142e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d136      	bne.n	8014358 <_dtoa_r+0x810>
 80142ea:	9b01      	ldr	r3, [sp, #4]
 80142ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80142f0:	0d1b      	lsrs	r3, r3, #20
 80142f2:	051b      	lsls	r3, r3, #20
 80142f4:	b12b      	cbz	r3, 8014302 <_dtoa_r+0x7ba>
 80142f6:	9b05      	ldr	r3, [sp, #20]
 80142f8:	3301      	adds	r3, #1
 80142fa:	9305      	str	r3, [sp, #20]
 80142fc:	f108 0801 	add.w	r8, r8, #1
 8014300:	2301      	movs	r3, #1
 8014302:	9307      	str	r3, [sp, #28]
 8014304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014306:	2b00      	cmp	r3, #0
 8014308:	d12a      	bne.n	8014360 <_dtoa_r+0x818>
 801430a:	2001      	movs	r0, #1
 801430c:	e030      	b.n	8014370 <_dtoa_r+0x828>
 801430e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014310:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014314:	e795      	b.n	8014242 <_dtoa_r+0x6fa>
 8014316:	9b07      	ldr	r3, [sp, #28]
 8014318:	f109 37ff 	add.w	r7, r9, #4294967295
 801431c:	42bb      	cmp	r3, r7
 801431e:	bfbf      	itttt	lt
 8014320:	9b07      	ldrlt	r3, [sp, #28]
 8014322:	9707      	strlt	r7, [sp, #28]
 8014324:	1afa      	sublt	r2, r7, r3
 8014326:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014328:	bfbb      	ittet	lt
 801432a:	189b      	addlt	r3, r3, r2
 801432c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801432e:	1bdf      	subge	r7, r3, r7
 8014330:	2700      	movlt	r7, #0
 8014332:	f1b9 0f00 	cmp.w	r9, #0
 8014336:	bfb5      	itete	lt
 8014338:	9b05      	ldrlt	r3, [sp, #20]
 801433a:	9d05      	ldrge	r5, [sp, #20]
 801433c:	eba3 0509 	sublt.w	r5, r3, r9
 8014340:	464b      	movge	r3, r9
 8014342:	bfb8      	it	lt
 8014344:	2300      	movlt	r3, #0
 8014346:	e77e      	b.n	8014246 <_dtoa_r+0x6fe>
 8014348:	9f07      	ldr	r7, [sp, #28]
 801434a:	9d05      	ldr	r5, [sp, #20]
 801434c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801434e:	e783      	b.n	8014258 <_dtoa_r+0x710>
 8014350:	9a07      	ldr	r2, [sp, #28]
 8014352:	e7ab      	b.n	80142ac <_dtoa_r+0x764>
 8014354:	2300      	movs	r3, #0
 8014356:	e7d4      	b.n	8014302 <_dtoa_r+0x7ba>
 8014358:	9b00      	ldr	r3, [sp, #0]
 801435a:	e7d2      	b.n	8014302 <_dtoa_r+0x7ba>
 801435c:	2300      	movs	r3, #0
 801435e:	9307      	str	r3, [sp, #28]
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014366:	6918      	ldr	r0, [r3, #16]
 8014368:	f000 fc45 	bl	8014bf6 <__hi0bits>
 801436c:	f1c0 0020 	rsb	r0, r0, #32
 8014370:	4440      	add	r0, r8
 8014372:	f010 001f 	ands.w	r0, r0, #31
 8014376:	d047      	beq.n	8014408 <_dtoa_r+0x8c0>
 8014378:	f1c0 0320 	rsb	r3, r0, #32
 801437c:	2b04      	cmp	r3, #4
 801437e:	dd3b      	ble.n	80143f8 <_dtoa_r+0x8b0>
 8014380:	9b05      	ldr	r3, [sp, #20]
 8014382:	f1c0 001c 	rsb	r0, r0, #28
 8014386:	4403      	add	r3, r0
 8014388:	9305      	str	r3, [sp, #20]
 801438a:	4405      	add	r5, r0
 801438c:	4480      	add	r8, r0
 801438e:	9b05      	ldr	r3, [sp, #20]
 8014390:	2b00      	cmp	r3, #0
 8014392:	dd05      	ble.n	80143a0 <_dtoa_r+0x858>
 8014394:	461a      	mov	r2, r3
 8014396:	9904      	ldr	r1, [sp, #16]
 8014398:	4620      	mov	r0, r4
 801439a:	f000 fd67 	bl	8014e6c <__lshift>
 801439e:	9004      	str	r0, [sp, #16]
 80143a0:	f1b8 0f00 	cmp.w	r8, #0
 80143a4:	dd05      	ble.n	80143b2 <_dtoa_r+0x86a>
 80143a6:	4639      	mov	r1, r7
 80143a8:	4642      	mov	r2, r8
 80143aa:	4620      	mov	r0, r4
 80143ac:	f000 fd5e 	bl	8014e6c <__lshift>
 80143b0:	4607      	mov	r7, r0
 80143b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143b4:	b353      	cbz	r3, 801440c <_dtoa_r+0x8c4>
 80143b6:	4639      	mov	r1, r7
 80143b8:	9804      	ldr	r0, [sp, #16]
 80143ba:	f000 fdab 	bl	8014f14 <__mcmp>
 80143be:	2800      	cmp	r0, #0
 80143c0:	da24      	bge.n	801440c <_dtoa_r+0x8c4>
 80143c2:	2300      	movs	r3, #0
 80143c4:	220a      	movs	r2, #10
 80143c6:	9904      	ldr	r1, [sp, #16]
 80143c8:	4620      	mov	r0, r4
 80143ca:	f000 fbd9 	bl	8014b80 <__multadd>
 80143ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143d0:	9004      	str	r0, [sp, #16]
 80143d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f000 814d 	beq.w	8014676 <_dtoa_r+0xb2e>
 80143dc:	2300      	movs	r3, #0
 80143de:	4631      	mov	r1, r6
 80143e0:	220a      	movs	r2, #10
 80143e2:	4620      	mov	r0, r4
 80143e4:	f000 fbcc 	bl	8014b80 <__multadd>
 80143e8:	9b02      	ldr	r3, [sp, #8]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	4606      	mov	r6, r0
 80143ee:	dc4f      	bgt.n	8014490 <_dtoa_r+0x948>
 80143f0:	9b06      	ldr	r3, [sp, #24]
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	dd4c      	ble.n	8014490 <_dtoa_r+0x948>
 80143f6:	e011      	b.n	801441c <_dtoa_r+0x8d4>
 80143f8:	d0c9      	beq.n	801438e <_dtoa_r+0x846>
 80143fa:	9a05      	ldr	r2, [sp, #20]
 80143fc:	331c      	adds	r3, #28
 80143fe:	441a      	add	r2, r3
 8014400:	9205      	str	r2, [sp, #20]
 8014402:	441d      	add	r5, r3
 8014404:	4498      	add	r8, r3
 8014406:	e7c2      	b.n	801438e <_dtoa_r+0x846>
 8014408:	4603      	mov	r3, r0
 801440a:	e7f6      	b.n	80143fa <_dtoa_r+0x8b2>
 801440c:	f1b9 0f00 	cmp.w	r9, #0
 8014410:	dc38      	bgt.n	8014484 <_dtoa_r+0x93c>
 8014412:	9b06      	ldr	r3, [sp, #24]
 8014414:	2b02      	cmp	r3, #2
 8014416:	dd35      	ble.n	8014484 <_dtoa_r+0x93c>
 8014418:	f8cd 9008 	str.w	r9, [sp, #8]
 801441c:	9b02      	ldr	r3, [sp, #8]
 801441e:	b963      	cbnz	r3, 801443a <_dtoa_r+0x8f2>
 8014420:	4639      	mov	r1, r7
 8014422:	2205      	movs	r2, #5
 8014424:	4620      	mov	r0, r4
 8014426:	f000 fbab 	bl	8014b80 <__multadd>
 801442a:	4601      	mov	r1, r0
 801442c:	4607      	mov	r7, r0
 801442e:	9804      	ldr	r0, [sp, #16]
 8014430:	f000 fd70 	bl	8014f14 <__mcmp>
 8014434:	2800      	cmp	r0, #0
 8014436:	f73f adcc 	bgt.w	8013fd2 <_dtoa_r+0x48a>
 801443a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801443c:	465d      	mov	r5, fp
 801443e:	ea6f 0a03 	mvn.w	sl, r3
 8014442:	f04f 0900 	mov.w	r9, #0
 8014446:	4639      	mov	r1, r7
 8014448:	4620      	mov	r0, r4
 801444a:	f000 fb82 	bl	8014b52 <_Bfree>
 801444e:	2e00      	cmp	r6, #0
 8014450:	f43f aeb7 	beq.w	80141c2 <_dtoa_r+0x67a>
 8014454:	f1b9 0f00 	cmp.w	r9, #0
 8014458:	d005      	beq.n	8014466 <_dtoa_r+0x91e>
 801445a:	45b1      	cmp	r9, r6
 801445c:	d003      	beq.n	8014466 <_dtoa_r+0x91e>
 801445e:	4649      	mov	r1, r9
 8014460:	4620      	mov	r0, r4
 8014462:	f000 fb76 	bl	8014b52 <_Bfree>
 8014466:	4631      	mov	r1, r6
 8014468:	4620      	mov	r0, r4
 801446a:	f000 fb72 	bl	8014b52 <_Bfree>
 801446e:	e6a8      	b.n	80141c2 <_dtoa_r+0x67a>
 8014470:	2700      	movs	r7, #0
 8014472:	463e      	mov	r6, r7
 8014474:	e7e1      	b.n	801443a <_dtoa_r+0x8f2>
 8014476:	f8dd a020 	ldr.w	sl, [sp, #32]
 801447a:	463e      	mov	r6, r7
 801447c:	e5a9      	b.n	8013fd2 <_dtoa_r+0x48a>
 801447e:	bf00      	nop
 8014480:	40240000 	.word	0x40240000
 8014484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014486:	f8cd 9008 	str.w	r9, [sp, #8]
 801448a:	2b00      	cmp	r3, #0
 801448c:	f000 80fa 	beq.w	8014684 <_dtoa_r+0xb3c>
 8014490:	2d00      	cmp	r5, #0
 8014492:	dd05      	ble.n	80144a0 <_dtoa_r+0x958>
 8014494:	4631      	mov	r1, r6
 8014496:	462a      	mov	r2, r5
 8014498:	4620      	mov	r0, r4
 801449a:	f000 fce7 	bl	8014e6c <__lshift>
 801449e:	4606      	mov	r6, r0
 80144a0:	9b07      	ldr	r3, [sp, #28]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d04c      	beq.n	8014540 <_dtoa_r+0x9f8>
 80144a6:	6871      	ldr	r1, [r6, #4]
 80144a8:	4620      	mov	r0, r4
 80144aa:	f000 fb1e 	bl	8014aea <_Balloc>
 80144ae:	6932      	ldr	r2, [r6, #16]
 80144b0:	3202      	adds	r2, #2
 80144b2:	4605      	mov	r5, r0
 80144b4:	0092      	lsls	r2, r2, #2
 80144b6:	f106 010c 	add.w	r1, r6, #12
 80144ba:	300c      	adds	r0, #12
 80144bc:	f7fe fabc 	bl	8012a38 <memcpy>
 80144c0:	2201      	movs	r2, #1
 80144c2:	4629      	mov	r1, r5
 80144c4:	4620      	mov	r0, r4
 80144c6:	f000 fcd1 	bl	8014e6c <__lshift>
 80144ca:	9b00      	ldr	r3, [sp, #0]
 80144cc:	f8cd b014 	str.w	fp, [sp, #20]
 80144d0:	f003 0301 	and.w	r3, r3, #1
 80144d4:	46b1      	mov	r9, r6
 80144d6:	9307      	str	r3, [sp, #28]
 80144d8:	4606      	mov	r6, r0
 80144da:	4639      	mov	r1, r7
 80144dc:	9804      	ldr	r0, [sp, #16]
 80144de:	f7ff faa5 	bl	8013a2c <quorem>
 80144e2:	4649      	mov	r1, r9
 80144e4:	4605      	mov	r5, r0
 80144e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80144ea:	9804      	ldr	r0, [sp, #16]
 80144ec:	f000 fd12 	bl	8014f14 <__mcmp>
 80144f0:	4632      	mov	r2, r6
 80144f2:	9000      	str	r0, [sp, #0]
 80144f4:	4639      	mov	r1, r7
 80144f6:	4620      	mov	r0, r4
 80144f8:	f000 fd26 	bl	8014f48 <__mdiff>
 80144fc:	68c3      	ldr	r3, [r0, #12]
 80144fe:	4602      	mov	r2, r0
 8014500:	bb03      	cbnz	r3, 8014544 <_dtoa_r+0x9fc>
 8014502:	4601      	mov	r1, r0
 8014504:	9008      	str	r0, [sp, #32]
 8014506:	9804      	ldr	r0, [sp, #16]
 8014508:	f000 fd04 	bl	8014f14 <__mcmp>
 801450c:	9a08      	ldr	r2, [sp, #32]
 801450e:	4603      	mov	r3, r0
 8014510:	4611      	mov	r1, r2
 8014512:	4620      	mov	r0, r4
 8014514:	9308      	str	r3, [sp, #32]
 8014516:	f000 fb1c 	bl	8014b52 <_Bfree>
 801451a:	9b08      	ldr	r3, [sp, #32]
 801451c:	b9a3      	cbnz	r3, 8014548 <_dtoa_r+0xa00>
 801451e:	9a06      	ldr	r2, [sp, #24]
 8014520:	b992      	cbnz	r2, 8014548 <_dtoa_r+0xa00>
 8014522:	9a07      	ldr	r2, [sp, #28]
 8014524:	b982      	cbnz	r2, 8014548 <_dtoa_r+0xa00>
 8014526:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801452a:	d029      	beq.n	8014580 <_dtoa_r+0xa38>
 801452c:	9b00      	ldr	r3, [sp, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	dd01      	ble.n	8014536 <_dtoa_r+0x9ee>
 8014532:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014536:	9b05      	ldr	r3, [sp, #20]
 8014538:	1c5d      	adds	r5, r3, #1
 801453a:	f883 8000 	strb.w	r8, [r3]
 801453e:	e782      	b.n	8014446 <_dtoa_r+0x8fe>
 8014540:	4630      	mov	r0, r6
 8014542:	e7c2      	b.n	80144ca <_dtoa_r+0x982>
 8014544:	2301      	movs	r3, #1
 8014546:	e7e3      	b.n	8014510 <_dtoa_r+0x9c8>
 8014548:	9a00      	ldr	r2, [sp, #0]
 801454a:	2a00      	cmp	r2, #0
 801454c:	db04      	blt.n	8014558 <_dtoa_r+0xa10>
 801454e:	d125      	bne.n	801459c <_dtoa_r+0xa54>
 8014550:	9a06      	ldr	r2, [sp, #24]
 8014552:	bb1a      	cbnz	r2, 801459c <_dtoa_r+0xa54>
 8014554:	9a07      	ldr	r2, [sp, #28]
 8014556:	bb0a      	cbnz	r2, 801459c <_dtoa_r+0xa54>
 8014558:	2b00      	cmp	r3, #0
 801455a:	ddec      	ble.n	8014536 <_dtoa_r+0x9ee>
 801455c:	2201      	movs	r2, #1
 801455e:	9904      	ldr	r1, [sp, #16]
 8014560:	4620      	mov	r0, r4
 8014562:	f000 fc83 	bl	8014e6c <__lshift>
 8014566:	4639      	mov	r1, r7
 8014568:	9004      	str	r0, [sp, #16]
 801456a:	f000 fcd3 	bl	8014f14 <__mcmp>
 801456e:	2800      	cmp	r0, #0
 8014570:	dc03      	bgt.n	801457a <_dtoa_r+0xa32>
 8014572:	d1e0      	bne.n	8014536 <_dtoa_r+0x9ee>
 8014574:	f018 0f01 	tst.w	r8, #1
 8014578:	d0dd      	beq.n	8014536 <_dtoa_r+0x9ee>
 801457a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801457e:	d1d8      	bne.n	8014532 <_dtoa_r+0x9ea>
 8014580:	9b05      	ldr	r3, [sp, #20]
 8014582:	9a05      	ldr	r2, [sp, #20]
 8014584:	1c5d      	adds	r5, r3, #1
 8014586:	2339      	movs	r3, #57	; 0x39
 8014588:	7013      	strb	r3, [r2, #0]
 801458a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801458e:	2b39      	cmp	r3, #57	; 0x39
 8014590:	f105 32ff 	add.w	r2, r5, #4294967295
 8014594:	d04f      	beq.n	8014636 <_dtoa_r+0xaee>
 8014596:	3301      	adds	r3, #1
 8014598:	7013      	strb	r3, [r2, #0]
 801459a:	e754      	b.n	8014446 <_dtoa_r+0x8fe>
 801459c:	9a05      	ldr	r2, [sp, #20]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	f102 0501 	add.w	r5, r2, #1
 80145a4:	dd06      	ble.n	80145b4 <_dtoa_r+0xa6c>
 80145a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80145aa:	d0e9      	beq.n	8014580 <_dtoa_r+0xa38>
 80145ac:	f108 0801 	add.w	r8, r8, #1
 80145b0:	9b05      	ldr	r3, [sp, #20]
 80145b2:	e7c2      	b.n	801453a <_dtoa_r+0x9f2>
 80145b4:	9a02      	ldr	r2, [sp, #8]
 80145b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80145ba:	eba5 030b 	sub.w	r3, r5, fp
 80145be:	4293      	cmp	r3, r2
 80145c0:	d021      	beq.n	8014606 <_dtoa_r+0xabe>
 80145c2:	2300      	movs	r3, #0
 80145c4:	220a      	movs	r2, #10
 80145c6:	9904      	ldr	r1, [sp, #16]
 80145c8:	4620      	mov	r0, r4
 80145ca:	f000 fad9 	bl	8014b80 <__multadd>
 80145ce:	45b1      	cmp	r9, r6
 80145d0:	9004      	str	r0, [sp, #16]
 80145d2:	f04f 0300 	mov.w	r3, #0
 80145d6:	f04f 020a 	mov.w	r2, #10
 80145da:	4649      	mov	r1, r9
 80145dc:	4620      	mov	r0, r4
 80145de:	d105      	bne.n	80145ec <_dtoa_r+0xaa4>
 80145e0:	f000 face 	bl	8014b80 <__multadd>
 80145e4:	4681      	mov	r9, r0
 80145e6:	4606      	mov	r6, r0
 80145e8:	9505      	str	r5, [sp, #20]
 80145ea:	e776      	b.n	80144da <_dtoa_r+0x992>
 80145ec:	f000 fac8 	bl	8014b80 <__multadd>
 80145f0:	4631      	mov	r1, r6
 80145f2:	4681      	mov	r9, r0
 80145f4:	2300      	movs	r3, #0
 80145f6:	220a      	movs	r2, #10
 80145f8:	4620      	mov	r0, r4
 80145fa:	f000 fac1 	bl	8014b80 <__multadd>
 80145fe:	4606      	mov	r6, r0
 8014600:	e7f2      	b.n	80145e8 <_dtoa_r+0xaa0>
 8014602:	f04f 0900 	mov.w	r9, #0
 8014606:	2201      	movs	r2, #1
 8014608:	9904      	ldr	r1, [sp, #16]
 801460a:	4620      	mov	r0, r4
 801460c:	f000 fc2e 	bl	8014e6c <__lshift>
 8014610:	4639      	mov	r1, r7
 8014612:	9004      	str	r0, [sp, #16]
 8014614:	f000 fc7e 	bl	8014f14 <__mcmp>
 8014618:	2800      	cmp	r0, #0
 801461a:	dcb6      	bgt.n	801458a <_dtoa_r+0xa42>
 801461c:	d102      	bne.n	8014624 <_dtoa_r+0xadc>
 801461e:	f018 0f01 	tst.w	r8, #1
 8014622:	d1b2      	bne.n	801458a <_dtoa_r+0xa42>
 8014624:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014628:	2b30      	cmp	r3, #48	; 0x30
 801462a:	f105 32ff 	add.w	r2, r5, #4294967295
 801462e:	f47f af0a 	bne.w	8014446 <_dtoa_r+0x8fe>
 8014632:	4615      	mov	r5, r2
 8014634:	e7f6      	b.n	8014624 <_dtoa_r+0xadc>
 8014636:	4593      	cmp	fp, r2
 8014638:	d105      	bne.n	8014646 <_dtoa_r+0xafe>
 801463a:	2331      	movs	r3, #49	; 0x31
 801463c:	f10a 0a01 	add.w	sl, sl, #1
 8014640:	f88b 3000 	strb.w	r3, [fp]
 8014644:	e6ff      	b.n	8014446 <_dtoa_r+0x8fe>
 8014646:	4615      	mov	r5, r2
 8014648:	e79f      	b.n	801458a <_dtoa_r+0xa42>
 801464a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80146b0 <_dtoa_r+0xb68>
 801464e:	e007      	b.n	8014660 <_dtoa_r+0xb18>
 8014650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014652:	f8df b060 	ldr.w	fp, [pc, #96]	; 80146b4 <_dtoa_r+0xb6c>
 8014656:	b11b      	cbz	r3, 8014660 <_dtoa_r+0xb18>
 8014658:	f10b 0308 	add.w	r3, fp, #8
 801465c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801465e:	6013      	str	r3, [r2, #0]
 8014660:	4658      	mov	r0, fp
 8014662:	b017      	add	sp, #92	; 0x5c
 8014664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014668:	9b06      	ldr	r3, [sp, #24]
 801466a:	2b01      	cmp	r3, #1
 801466c:	f77f ae35 	ble.w	80142da <_dtoa_r+0x792>
 8014670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014672:	9307      	str	r3, [sp, #28]
 8014674:	e649      	b.n	801430a <_dtoa_r+0x7c2>
 8014676:	9b02      	ldr	r3, [sp, #8]
 8014678:	2b00      	cmp	r3, #0
 801467a:	dc03      	bgt.n	8014684 <_dtoa_r+0xb3c>
 801467c:	9b06      	ldr	r3, [sp, #24]
 801467e:	2b02      	cmp	r3, #2
 8014680:	f73f aecc 	bgt.w	801441c <_dtoa_r+0x8d4>
 8014684:	465d      	mov	r5, fp
 8014686:	4639      	mov	r1, r7
 8014688:	9804      	ldr	r0, [sp, #16]
 801468a:	f7ff f9cf 	bl	8013a2c <quorem>
 801468e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014692:	f805 8b01 	strb.w	r8, [r5], #1
 8014696:	9a02      	ldr	r2, [sp, #8]
 8014698:	eba5 030b 	sub.w	r3, r5, fp
 801469c:	429a      	cmp	r2, r3
 801469e:	ddb0      	ble.n	8014602 <_dtoa_r+0xaba>
 80146a0:	2300      	movs	r3, #0
 80146a2:	220a      	movs	r2, #10
 80146a4:	9904      	ldr	r1, [sp, #16]
 80146a6:	4620      	mov	r0, r4
 80146a8:	f000 fa6a 	bl	8014b80 <__multadd>
 80146ac:	9004      	str	r0, [sp, #16]
 80146ae:	e7ea      	b.n	8014686 <_dtoa_r+0xb3e>
 80146b0:	08018391 	.word	0x08018391
 80146b4:	080183b5 	.word	0x080183b5

080146b8 <__sflush_r>:
 80146b8:	898a      	ldrh	r2, [r1, #12]
 80146ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146be:	4605      	mov	r5, r0
 80146c0:	0710      	lsls	r0, r2, #28
 80146c2:	460c      	mov	r4, r1
 80146c4:	d458      	bmi.n	8014778 <__sflush_r+0xc0>
 80146c6:	684b      	ldr	r3, [r1, #4]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	dc05      	bgt.n	80146d8 <__sflush_r+0x20>
 80146cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	dc02      	bgt.n	80146d8 <__sflush_r+0x20>
 80146d2:	2000      	movs	r0, #0
 80146d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146da:	2e00      	cmp	r6, #0
 80146dc:	d0f9      	beq.n	80146d2 <__sflush_r+0x1a>
 80146de:	2300      	movs	r3, #0
 80146e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80146e4:	682f      	ldr	r7, [r5, #0]
 80146e6:	6a21      	ldr	r1, [r4, #32]
 80146e8:	602b      	str	r3, [r5, #0]
 80146ea:	d032      	beq.n	8014752 <__sflush_r+0x9a>
 80146ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80146ee:	89a3      	ldrh	r3, [r4, #12]
 80146f0:	075a      	lsls	r2, r3, #29
 80146f2:	d505      	bpl.n	8014700 <__sflush_r+0x48>
 80146f4:	6863      	ldr	r3, [r4, #4]
 80146f6:	1ac0      	subs	r0, r0, r3
 80146f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80146fa:	b10b      	cbz	r3, 8014700 <__sflush_r+0x48>
 80146fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146fe:	1ac0      	subs	r0, r0, r3
 8014700:	2300      	movs	r3, #0
 8014702:	4602      	mov	r2, r0
 8014704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014706:	6a21      	ldr	r1, [r4, #32]
 8014708:	4628      	mov	r0, r5
 801470a:	47b0      	blx	r6
 801470c:	1c43      	adds	r3, r0, #1
 801470e:	89a3      	ldrh	r3, [r4, #12]
 8014710:	d106      	bne.n	8014720 <__sflush_r+0x68>
 8014712:	6829      	ldr	r1, [r5, #0]
 8014714:	291d      	cmp	r1, #29
 8014716:	d848      	bhi.n	80147aa <__sflush_r+0xf2>
 8014718:	4a29      	ldr	r2, [pc, #164]	; (80147c0 <__sflush_r+0x108>)
 801471a:	40ca      	lsrs	r2, r1
 801471c:	07d6      	lsls	r6, r2, #31
 801471e:	d544      	bpl.n	80147aa <__sflush_r+0xf2>
 8014720:	2200      	movs	r2, #0
 8014722:	6062      	str	r2, [r4, #4]
 8014724:	04d9      	lsls	r1, r3, #19
 8014726:	6922      	ldr	r2, [r4, #16]
 8014728:	6022      	str	r2, [r4, #0]
 801472a:	d504      	bpl.n	8014736 <__sflush_r+0x7e>
 801472c:	1c42      	adds	r2, r0, #1
 801472e:	d101      	bne.n	8014734 <__sflush_r+0x7c>
 8014730:	682b      	ldr	r3, [r5, #0]
 8014732:	b903      	cbnz	r3, 8014736 <__sflush_r+0x7e>
 8014734:	6560      	str	r0, [r4, #84]	; 0x54
 8014736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014738:	602f      	str	r7, [r5, #0]
 801473a:	2900      	cmp	r1, #0
 801473c:	d0c9      	beq.n	80146d2 <__sflush_r+0x1a>
 801473e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014742:	4299      	cmp	r1, r3
 8014744:	d002      	beq.n	801474c <__sflush_r+0x94>
 8014746:	4628      	mov	r0, r5
 8014748:	f7fe f98a 	bl	8012a60 <_free_r>
 801474c:	2000      	movs	r0, #0
 801474e:	6360      	str	r0, [r4, #52]	; 0x34
 8014750:	e7c0      	b.n	80146d4 <__sflush_r+0x1c>
 8014752:	2301      	movs	r3, #1
 8014754:	4628      	mov	r0, r5
 8014756:	47b0      	blx	r6
 8014758:	1c41      	adds	r1, r0, #1
 801475a:	d1c8      	bne.n	80146ee <__sflush_r+0x36>
 801475c:	682b      	ldr	r3, [r5, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d0c5      	beq.n	80146ee <__sflush_r+0x36>
 8014762:	2b1d      	cmp	r3, #29
 8014764:	d001      	beq.n	801476a <__sflush_r+0xb2>
 8014766:	2b16      	cmp	r3, #22
 8014768:	d101      	bne.n	801476e <__sflush_r+0xb6>
 801476a:	602f      	str	r7, [r5, #0]
 801476c:	e7b1      	b.n	80146d2 <__sflush_r+0x1a>
 801476e:	89a3      	ldrh	r3, [r4, #12]
 8014770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014774:	81a3      	strh	r3, [r4, #12]
 8014776:	e7ad      	b.n	80146d4 <__sflush_r+0x1c>
 8014778:	690f      	ldr	r7, [r1, #16]
 801477a:	2f00      	cmp	r7, #0
 801477c:	d0a9      	beq.n	80146d2 <__sflush_r+0x1a>
 801477e:	0793      	lsls	r3, r2, #30
 8014780:	680e      	ldr	r6, [r1, #0]
 8014782:	bf08      	it	eq
 8014784:	694b      	ldreq	r3, [r1, #20]
 8014786:	600f      	str	r7, [r1, #0]
 8014788:	bf18      	it	ne
 801478a:	2300      	movne	r3, #0
 801478c:	eba6 0807 	sub.w	r8, r6, r7
 8014790:	608b      	str	r3, [r1, #8]
 8014792:	f1b8 0f00 	cmp.w	r8, #0
 8014796:	dd9c      	ble.n	80146d2 <__sflush_r+0x1a>
 8014798:	4643      	mov	r3, r8
 801479a:	463a      	mov	r2, r7
 801479c:	6a21      	ldr	r1, [r4, #32]
 801479e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80147a0:	4628      	mov	r0, r5
 80147a2:	47b0      	blx	r6
 80147a4:	2800      	cmp	r0, #0
 80147a6:	dc06      	bgt.n	80147b6 <__sflush_r+0xfe>
 80147a8:	89a3      	ldrh	r3, [r4, #12]
 80147aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147ae:	81a3      	strh	r3, [r4, #12]
 80147b0:	f04f 30ff 	mov.w	r0, #4294967295
 80147b4:	e78e      	b.n	80146d4 <__sflush_r+0x1c>
 80147b6:	4407      	add	r7, r0
 80147b8:	eba8 0800 	sub.w	r8, r8, r0
 80147bc:	e7e9      	b.n	8014792 <__sflush_r+0xda>
 80147be:	bf00      	nop
 80147c0:	20400001 	.word	0x20400001

080147c4 <_fflush_r>:
 80147c4:	b538      	push	{r3, r4, r5, lr}
 80147c6:	690b      	ldr	r3, [r1, #16]
 80147c8:	4605      	mov	r5, r0
 80147ca:	460c      	mov	r4, r1
 80147cc:	b1db      	cbz	r3, 8014806 <_fflush_r+0x42>
 80147ce:	b118      	cbz	r0, 80147d8 <_fflush_r+0x14>
 80147d0:	6983      	ldr	r3, [r0, #24]
 80147d2:	b90b      	cbnz	r3, 80147d8 <_fflush_r+0x14>
 80147d4:	f000 f860 	bl	8014898 <__sinit>
 80147d8:	4b0c      	ldr	r3, [pc, #48]	; (801480c <_fflush_r+0x48>)
 80147da:	429c      	cmp	r4, r3
 80147dc:	d109      	bne.n	80147f2 <_fflush_r+0x2e>
 80147de:	686c      	ldr	r4, [r5, #4]
 80147e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147e4:	b17b      	cbz	r3, 8014806 <_fflush_r+0x42>
 80147e6:	4621      	mov	r1, r4
 80147e8:	4628      	mov	r0, r5
 80147ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147ee:	f7ff bf63 	b.w	80146b8 <__sflush_r>
 80147f2:	4b07      	ldr	r3, [pc, #28]	; (8014810 <_fflush_r+0x4c>)
 80147f4:	429c      	cmp	r4, r3
 80147f6:	d101      	bne.n	80147fc <_fflush_r+0x38>
 80147f8:	68ac      	ldr	r4, [r5, #8]
 80147fa:	e7f1      	b.n	80147e0 <_fflush_r+0x1c>
 80147fc:	4b05      	ldr	r3, [pc, #20]	; (8014814 <_fflush_r+0x50>)
 80147fe:	429c      	cmp	r4, r3
 8014800:	bf08      	it	eq
 8014802:	68ec      	ldreq	r4, [r5, #12]
 8014804:	e7ec      	b.n	80147e0 <_fflush_r+0x1c>
 8014806:	2000      	movs	r0, #0
 8014808:	bd38      	pop	{r3, r4, r5, pc}
 801480a:	bf00      	nop
 801480c:	080183e4 	.word	0x080183e4
 8014810:	08018404 	.word	0x08018404
 8014814:	080183c4 	.word	0x080183c4

08014818 <std>:
 8014818:	2300      	movs	r3, #0
 801481a:	b510      	push	{r4, lr}
 801481c:	4604      	mov	r4, r0
 801481e:	e9c0 3300 	strd	r3, r3, [r0]
 8014822:	6083      	str	r3, [r0, #8]
 8014824:	8181      	strh	r1, [r0, #12]
 8014826:	6643      	str	r3, [r0, #100]	; 0x64
 8014828:	81c2      	strh	r2, [r0, #14]
 801482a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801482e:	6183      	str	r3, [r0, #24]
 8014830:	4619      	mov	r1, r3
 8014832:	2208      	movs	r2, #8
 8014834:	305c      	adds	r0, #92	; 0x5c
 8014836:	f7fe f90a 	bl	8012a4e <memset>
 801483a:	4b05      	ldr	r3, [pc, #20]	; (8014850 <std+0x38>)
 801483c:	6263      	str	r3, [r4, #36]	; 0x24
 801483e:	4b05      	ldr	r3, [pc, #20]	; (8014854 <std+0x3c>)
 8014840:	62a3      	str	r3, [r4, #40]	; 0x28
 8014842:	4b05      	ldr	r3, [pc, #20]	; (8014858 <std+0x40>)
 8014844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014846:	4b05      	ldr	r3, [pc, #20]	; (801485c <std+0x44>)
 8014848:	6224      	str	r4, [r4, #32]
 801484a:	6323      	str	r3, [r4, #48]	; 0x30
 801484c:	bd10      	pop	{r4, pc}
 801484e:	bf00      	nop
 8014850:	080137d1 	.word	0x080137d1
 8014854:	080137f3 	.word	0x080137f3
 8014858:	0801382b 	.word	0x0801382b
 801485c:	0801384f 	.word	0x0801384f

08014860 <_cleanup_r>:
 8014860:	4901      	ldr	r1, [pc, #4]	; (8014868 <_cleanup_r+0x8>)
 8014862:	f000 b885 	b.w	8014970 <_fwalk_reent>
 8014866:	bf00      	nop
 8014868:	080147c5 	.word	0x080147c5

0801486c <__sfmoreglue>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	1e4a      	subs	r2, r1, #1
 8014870:	2568      	movs	r5, #104	; 0x68
 8014872:	4355      	muls	r5, r2
 8014874:	460e      	mov	r6, r1
 8014876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801487a:	f7fe f93f 	bl	8012afc <_malloc_r>
 801487e:	4604      	mov	r4, r0
 8014880:	b140      	cbz	r0, 8014894 <__sfmoreglue+0x28>
 8014882:	2100      	movs	r1, #0
 8014884:	e9c0 1600 	strd	r1, r6, [r0]
 8014888:	300c      	adds	r0, #12
 801488a:	60a0      	str	r0, [r4, #8]
 801488c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014890:	f7fe f8dd 	bl	8012a4e <memset>
 8014894:	4620      	mov	r0, r4
 8014896:	bd70      	pop	{r4, r5, r6, pc}

08014898 <__sinit>:
 8014898:	6983      	ldr	r3, [r0, #24]
 801489a:	b510      	push	{r4, lr}
 801489c:	4604      	mov	r4, r0
 801489e:	bb33      	cbnz	r3, 80148ee <__sinit+0x56>
 80148a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80148a4:	6503      	str	r3, [r0, #80]	; 0x50
 80148a6:	4b12      	ldr	r3, [pc, #72]	; (80148f0 <__sinit+0x58>)
 80148a8:	4a12      	ldr	r2, [pc, #72]	; (80148f4 <__sinit+0x5c>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	6282      	str	r2, [r0, #40]	; 0x28
 80148ae:	4298      	cmp	r0, r3
 80148b0:	bf04      	itt	eq
 80148b2:	2301      	moveq	r3, #1
 80148b4:	6183      	streq	r3, [r0, #24]
 80148b6:	f000 f81f 	bl	80148f8 <__sfp>
 80148ba:	6060      	str	r0, [r4, #4]
 80148bc:	4620      	mov	r0, r4
 80148be:	f000 f81b 	bl	80148f8 <__sfp>
 80148c2:	60a0      	str	r0, [r4, #8]
 80148c4:	4620      	mov	r0, r4
 80148c6:	f000 f817 	bl	80148f8 <__sfp>
 80148ca:	2200      	movs	r2, #0
 80148cc:	60e0      	str	r0, [r4, #12]
 80148ce:	2104      	movs	r1, #4
 80148d0:	6860      	ldr	r0, [r4, #4]
 80148d2:	f7ff ffa1 	bl	8014818 <std>
 80148d6:	2201      	movs	r2, #1
 80148d8:	2109      	movs	r1, #9
 80148da:	68a0      	ldr	r0, [r4, #8]
 80148dc:	f7ff ff9c 	bl	8014818 <std>
 80148e0:	2202      	movs	r2, #2
 80148e2:	2112      	movs	r1, #18
 80148e4:	68e0      	ldr	r0, [r4, #12]
 80148e6:	f7ff ff97 	bl	8014818 <std>
 80148ea:	2301      	movs	r3, #1
 80148ec:	61a3      	str	r3, [r4, #24]
 80148ee:	bd10      	pop	{r4, pc}
 80148f0:	0801836c 	.word	0x0801836c
 80148f4:	08014861 	.word	0x08014861

080148f8 <__sfp>:
 80148f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148fa:	4b1b      	ldr	r3, [pc, #108]	; (8014968 <__sfp+0x70>)
 80148fc:	681e      	ldr	r6, [r3, #0]
 80148fe:	69b3      	ldr	r3, [r6, #24]
 8014900:	4607      	mov	r7, r0
 8014902:	b913      	cbnz	r3, 801490a <__sfp+0x12>
 8014904:	4630      	mov	r0, r6
 8014906:	f7ff ffc7 	bl	8014898 <__sinit>
 801490a:	3648      	adds	r6, #72	; 0x48
 801490c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014910:	3b01      	subs	r3, #1
 8014912:	d503      	bpl.n	801491c <__sfp+0x24>
 8014914:	6833      	ldr	r3, [r6, #0]
 8014916:	b133      	cbz	r3, 8014926 <__sfp+0x2e>
 8014918:	6836      	ldr	r6, [r6, #0]
 801491a:	e7f7      	b.n	801490c <__sfp+0x14>
 801491c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014920:	b16d      	cbz	r5, 801493e <__sfp+0x46>
 8014922:	3468      	adds	r4, #104	; 0x68
 8014924:	e7f4      	b.n	8014910 <__sfp+0x18>
 8014926:	2104      	movs	r1, #4
 8014928:	4638      	mov	r0, r7
 801492a:	f7ff ff9f 	bl	801486c <__sfmoreglue>
 801492e:	6030      	str	r0, [r6, #0]
 8014930:	2800      	cmp	r0, #0
 8014932:	d1f1      	bne.n	8014918 <__sfp+0x20>
 8014934:	230c      	movs	r3, #12
 8014936:	603b      	str	r3, [r7, #0]
 8014938:	4604      	mov	r4, r0
 801493a:	4620      	mov	r0, r4
 801493c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801493e:	4b0b      	ldr	r3, [pc, #44]	; (801496c <__sfp+0x74>)
 8014940:	6665      	str	r5, [r4, #100]	; 0x64
 8014942:	e9c4 5500 	strd	r5, r5, [r4]
 8014946:	60a5      	str	r5, [r4, #8]
 8014948:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801494c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014950:	2208      	movs	r2, #8
 8014952:	4629      	mov	r1, r5
 8014954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014958:	f7fe f879 	bl	8012a4e <memset>
 801495c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014964:	e7e9      	b.n	801493a <__sfp+0x42>
 8014966:	bf00      	nop
 8014968:	0801836c 	.word	0x0801836c
 801496c:	ffff0001 	.word	0xffff0001

08014970 <_fwalk_reent>:
 8014970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014974:	4680      	mov	r8, r0
 8014976:	4689      	mov	r9, r1
 8014978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801497c:	2600      	movs	r6, #0
 801497e:	b914      	cbnz	r4, 8014986 <_fwalk_reent+0x16>
 8014980:	4630      	mov	r0, r6
 8014982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014986:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801498a:	3f01      	subs	r7, #1
 801498c:	d501      	bpl.n	8014992 <_fwalk_reent+0x22>
 801498e:	6824      	ldr	r4, [r4, #0]
 8014990:	e7f5      	b.n	801497e <_fwalk_reent+0xe>
 8014992:	89ab      	ldrh	r3, [r5, #12]
 8014994:	2b01      	cmp	r3, #1
 8014996:	d907      	bls.n	80149a8 <_fwalk_reent+0x38>
 8014998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801499c:	3301      	adds	r3, #1
 801499e:	d003      	beq.n	80149a8 <_fwalk_reent+0x38>
 80149a0:	4629      	mov	r1, r5
 80149a2:	4640      	mov	r0, r8
 80149a4:	47c8      	blx	r9
 80149a6:	4306      	orrs	r6, r0
 80149a8:	3568      	adds	r5, #104	; 0x68
 80149aa:	e7ee      	b.n	801498a <_fwalk_reent+0x1a>

080149ac <_localeconv_r>:
 80149ac:	4b04      	ldr	r3, [pc, #16]	; (80149c0 <_localeconv_r+0x14>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	6a18      	ldr	r0, [r3, #32]
 80149b2:	4b04      	ldr	r3, [pc, #16]	; (80149c4 <_localeconv_r+0x18>)
 80149b4:	2800      	cmp	r0, #0
 80149b6:	bf08      	it	eq
 80149b8:	4618      	moveq	r0, r3
 80149ba:	30f0      	adds	r0, #240	; 0xf0
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop
 80149c0:	20000434 	.word	0x20000434
 80149c4:	20000498 	.word	0x20000498

080149c8 <_lseek_r>:
 80149c8:	b538      	push	{r3, r4, r5, lr}
 80149ca:	4c07      	ldr	r4, [pc, #28]	; (80149e8 <_lseek_r+0x20>)
 80149cc:	4605      	mov	r5, r0
 80149ce:	4608      	mov	r0, r1
 80149d0:	4611      	mov	r1, r2
 80149d2:	2200      	movs	r2, #0
 80149d4:	6022      	str	r2, [r4, #0]
 80149d6:	461a      	mov	r2, r3
 80149d8:	f7f0 ff20 	bl	800581c <_lseek>
 80149dc:	1c43      	adds	r3, r0, #1
 80149de:	d102      	bne.n	80149e6 <_lseek_r+0x1e>
 80149e0:	6823      	ldr	r3, [r4, #0]
 80149e2:	b103      	cbz	r3, 80149e6 <_lseek_r+0x1e>
 80149e4:	602b      	str	r3, [r5, #0]
 80149e6:	bd38      	pop	{r3, r4, r5, pc}
 80149e8:	2000686c 	.word	0x2000686c

080149ec <__swhatbuf_r>:
 80149ec:	b570      	push	{r4, r5, r6, lr}
 80149ee:	460e      	mov	r6, r1
 80149f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149f4:	2900      	cmp	r1, #0
 80149f6:	b096      	sub	sp, #88	; 0x58
 80149f8:	4614      	mov	r4, r2
 80149fa:	461d      	mov	r5, r3
 80149fc:	da07      	bge.n	8014a0e <__swhatbuf_r+0x22>
 80149fe:	2300      	movs	r3, #0
 8014a00:	602b      	str	r3, [r5, #0]
 8014a02:	89b3      	ldrh	r3, [r6, #12]
 8014a04:	061a      	lsls	r2, r3, #24
 8014a06:	d410      	bmi.n	8014a2a <__swhatbuf_r+0x3e>
 8014a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a0c:	e00e      	b.n	8014a2c <__swhatbuf_r+0x40>
 8014a0e:	466a      	mov	r2, sp
 8014a10:	f000 fd22 	bl	8015458 <_fstat_r>
 8014a14:	2800      	cmp	r0, #0
 8014a16:	dbf2      	blt.n	80149fe <__swhatbuf_r+0x12>
 8014a18:	9a01      	ldr	r2, [sp, #4]
 8014a1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a22:	425a      	negs	r2, r3
 8014a24:	415a      	adcs	r2, r3
 8014a26:	602a      	str	r2, [r5, #0]
 8014a28:	e7ee      	b.n	8014a08 <__swhatbuf_r+0x1c>
 8014a2a:	2340      	movs	r3, #64	; 0x40
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	6023      	str	r3, [r4, #0]
 8014a30:	b016      	add	sp, #88	; 0x58
 8014a32:	bd70      	pop	{r4, r5, r6, pc}

08014a34 <__smakebuf_r>:
 8014a34:	898b      	ldrh	r3, [r1, #12]
 8014a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a38:	079d      	lsls	r5, r3, #30
 8014a3a:	4606      	mov	r6, r0
 8014a3c:	460c      	mov	r4, r1
 8014a3e:	d507      	bpl.n	8014a50 <__smakebuf_r+0x1c>
 8014a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a44:	6023      	str	r3, [r4, #0]
 8014a46:	6123      	str	r3, [r4, #16]
 8014a48:	2301      	movs	r3, #1
 8014a4a:	6163      	str	r3, [r4, #20]
 8014a4c:	b002      	add	sp, #8
 8014a4e:	bd70      	pop	{r4, r5, r6, pc}
 8014a50:	ab01      	add	r3, sp, #4
 8014a52:	466a      	mov	r2, sp
 8014a54:	f7ff ffca 	bl	80149ec <__swhatbuf_r>
 8014a58:	9900      	ldr	r1, [sp, #0]
 8014a5a:	4605      	mov	r5, r0
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	f7fe f84d 	bl	8012afc <_malloc_r>
 8014a62:	b948      	cbnz	r0, 8014a78 <__smakebuf_r+0x44>
 8014a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a68:	059a      	lsls	r2, r3, #22
 8014a6a:	d4ef      	bmi.n	8014a4c <__smakebuf_r+0x18>
 8014a6c:	f023 0303 	bic.w	r3, r3, #3
 8014a70:	f043 0302 	orr.w	r3, r3, #2
 8014a74:	81a3      	strh	r3, [r4, #12]
 8014a76:	e7e3      	b.n	8014a40 <__smakebuf_r+0xc>
 8014a78:	4b0d      	ldr	r3, [pc, #52]	; (8014ab0 <__smakebuf_r+0x7c>)
 8014a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a7c:	89a3      	ldrh	r3, [r4, #12]
 8014a7e:	6020      	str	r0, [r4, #0]
 8014a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a84:	81a3      	strh	r3, [r4, #12]
 8014a86:	9b00      	ldr	r3, [sp, #0]
 8014a88:	6163      	str	r3, [r4, #20]
 8014a8a:	9b01      	ldr	r3, [sp, #4]
 8014a8c:	6120      	str	r0, [r4, #16]
 8014a8e:	b15b      	cbz	r3, 8014aa8 <__smakebuf_r+0x74>
 8014a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a94:	4630      	mov	r0, r6
 8014a96:	f000 fcf1 	bl	801547c <_isatty_r>
 8014a9a:	b128      	cbz	r0, 8014aa8 <__smakebuf_r+0x74>
 8014a9c:	89a3      	ldrh	r3, [r4, #12]
 8014a9e:	f023 0303 	bic.w	r3, r3, #3
 8014aa2:	f043 0301 	orr.w	r3, r3, #1
 8014aa6:	81a3      	strh	r3, [r4, #12]
 8014aa8:	89a3      	ldrh	r3, [r4, #12]
 8014aaa:	431d      	orrs	r5, r3
 8014aac:	81a5      	strh	r5, [r4, #12]
 8014aae:	e7cd      	b.n	8014a4c <__smakebuf_r+0x18>
 8014ab0:	08014861 	.word	0x08014861

08014ab4 <memmove>:
 8014ab4:	4288      	cmp	r0, r1
 8014ab6:	b510      	push	{r4, lr}
 8014ab8:	eb01 0302 	add.w	r3, r1, r2
 8014abc:	d807      	bhi.n	8014ace <memmove+0x1a>
 8014abe:	1e42      	subs	r2, r0, #1
 8014ac0:	4299      	cmp	r1, r3
 8014ac2:	d00a      	beq.n	8014ada <memmove+0x26>
 8014ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ac8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014acc:	e7f8      	b.n	8014ac0 <memmove+0xc>
 8014ace:	4283      	cmp	r3, r0
 8014ad0:	d9f5      	bls.n	8014abe <memmove+0xa>
 8014ad2:	1881      	adds	r1, r0, r2
 8014ad4:	1ad2      	subs	r2, r2, r3
 8014ad6:	42d3      	cmn	r3, r2
 8014ad8:	d100      	bne.n	8014adc <memmove+0x28>
 8014ada:	bd10      	pop	{r4, pc}
 8014adc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ae0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ae4:	e7f7      	b.n	8014ad6 <memmove+0x22>

08014ae6 <__malloc_lock>:
 8014ae6:	4770      	bx	lr

08014ae8 <__malloc_unlock>:
 8014ae8:	4770      	bx	lr

08014aea <_Balloc>:
 8014aea:	b570      	push	{r4, r5, r6, lr}
 8014aec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014aee:	4604      	mov	r4, r0
 8014af0:	460e      	mov	r6, r1
 8014af2:	b93d      	cbnz	r5, 8014b04 <_Balloc+0x1a>
 8014af4:	2010      	movs	r0, #16
 8014af6:	f7fd ff8f 	bl	8012a18 <malloc>
 8014afa:	6260      	str	r0, [r4, #36]	; 0x24
 8014afc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014b00:	6005      	str	r5, [r0, #0]
 8014b02:	60c5      	str	r5, [r0, #12]
 8014b04:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014b06:	68eb      	ldr	r3, [r5, #12]
 8014b08:	b183      	cbz	r3, 8014b2c <_Balloc+0x42>
 8014b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b0c:	68db      	ldr	r3, [r3, #12]
 8014b0e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014b12:	b9b8      	cbnz	r0, 8014b44 <_Balloc+0x5a>
 8014b14:	2101      	movs	r1, #1
 8014b16:	fa01 f506 	lsl.w	r5, r1, r6
 8014b1a:	1d6a      	adds	r2, r5, #5
 8014b1c:	0092      	lsls	r2, r2, #2
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f000 fabe 	bl	80150a0 <_calloc_r>
 8014b24:	b160      	cbz	r0, 8014b40 <_Balloc+0x56>
 8014b26:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014b2a:	e00e      	b.n	8014b4a <_Balloc+0x60>
 8014b2c:	2221      	movs	r2, #33	; 0x21
 8014b2e:	2104      	movs	r1, #4
 8014b30:	4620      	mov	r0, r4
 8014b32:	f000 fab5 	bl	80150a0 <_calloc_r>
 8014b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b38:	60e8      	str	r0, [r5, #12]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d1e4      	bne.n	8014b0a <_Balloc+0x20>
 8014b40:	2000      	movs	r0, #0
 8014b42:	bd70      	pop	{r4, r5, r6, pc}
 8014b44:	6802      	ldr	r2, [r0, #0]
 8014b46:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014b50:	e7f7      	b.n	8014b42 <_Balloc+0x58>

08014b52 <_Bfree>:
 8014b52:	b570      	push	{r4, r5, r6, lr}
 8014b54:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014b56:	4606      	mov	r6, r0
 8014b58:	460d      	mov	r5, r1
 8014b5a:	b93c      	cbnz	r4, 8014b6c <_Bfree+0x1a>
 8014b5c:	2010      	movs	r0, #16
 8014b5e:	f7fd ff5b 	bl	8012a18 <malloc>
 8014b62:	6270      	str	r0, [r6, #36]	; 0x24
 8014b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014b68:	6004      	str	r4, [r0, #0]
 8014b6a:	60c4      	str	r4, [r0, #12]
 8014b6c:	b13d      	cbz	r5, 8014b7e <_Bfree+0x2c>
 8014b6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014b70:	686a      	ldr	r2, [r5, #4]
 8014b72:	68db      	ldr	r3, [r3, #12]
 8014b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b78:	6029      	str	r1, [r5, #0]
 8014b7a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014b7e:	bd70      	pop	{r4, r5, r6, pc}

08014b80 <__multadd>:
 8014b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b84:	690d      	ldr	r5, [r1, #16]
 8014b86:	461f      	mov	r7, r3
 8014b88:	4606      	mov	r6, r0
 8014b8a:	460c      	mov	r4, r1
 8014b8c:	f101 0c14 	add.w	ip, r1, #20
 8014b90:	2300      	movs	r3, #0
 8014b92:	f8dc 0000 	ldr.w	r0, [ip]
 8014b96:	b281      	uxth	r1, r0
 8014b98:	fb02 7101 	mla	r1, r2, r1, r7
 8014b9c:	0c0f      	lsrs	r7, r1, #16
 8014b9e:	0c00      	lsrs	r0, r0, #16
 8014ba0:	fb02 7000 	mla	r0, r2, r0, r7
 8014ba4:	b289      	uxth	r1, r1
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014bac:	429d      	cmp	r5, r3
 8014bae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014bb2:	f84c 1b04 	str.w	r1, [ip], #4
 8014bb6:	dcec      	bgt.n	8014b92 <__multadd+0x12>
 8014bb8:	b1d7      	cbz	r7, 8014bf0 <__multadd+0x70>
 8014bba:	68a3      	ldr	r3, [r4, #8]
 8014bbc:	42ab      	cmp	r3, r5
 8014bbe:	dc12      	bgt.n	8014be6 <__multadd+0x66>
 8014bc0:	6861      	ldr	r1, [r4, #4]
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	3101      	adds	r1, #1
 8014bc6:	f7ff ff90 	bl	8014aea <_Balloc>
 8014bca:	6922      	ldr	r2, [r4, #16]
 8014bcc:	3202      	adds	r2, #2
 8014bce:	f104 010c 	add.w	r1, r4, #12
 8014bd2:	4680      	mov	r8, r0
 8014bd4:	0092      	lsls	r2, r2, #2
 8014bd6:	300c      	adds	r0, #12
 8014bd8:	f7fd ff2e 	bl	8012a38 <memcpy>
 8014bdc:	4621      	mov	r1, r4
 8014bde:	4630      	mov	r0, r6
 8014be0:	f7ff ffb7 	bl	8014b52 <_Bfree>
 8014be4:	4644      	mov	r4, r8
 8014be6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014bea:	3501      	adds	r5, #1
 8014bec:	615f      	str	r7, [r3, #20]
 8014bee:	6125      	str	r5, [r4, #16]
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014bf6 <__hi0bits>:
 8014bf6:	0c02      	lsrs	r2, r0, #16
 8014bf8:	0412      	lsls	r2, r2, #16
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	b9b2      	cbnz	r2, 8014c2c <__hi0bits+0x36>
 8014bfe:	0403      	lsls	r3, r0, #16
 8014c00:	2010      	movs	r0, #16
 8014c02:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014c06:	bf04      	itt	eq
 8014c08:	021b      	lsleq	r3, r3, #8
 8014c0a:	3008      	addeq	r0, #8
 8014c0c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014c10:	bf04      	itt	eq
 8014c12:	011b      	lsleq	r3, r3, #4
 8014c14:	3004      	addeq	r0, #4
 8014c16:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014c1a:	bf04      	itt	eq
 8014c1c:	009b      	lsleq	r3, r3, #2
 8014c1e:	3002      	addeq	r0, #2
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	db06      	blt.n	8014c32 <__hi0bits+0x3c>
 8014c24:	005b      	lsls	r3, r3, #1
 8014c26:	d503      	bpl.n	8014c30 <__hi0bits+0x3a>
 8014c28:	3001      	adds	r0, #1
 8014c2a:	4770      	bx	lr
 8014c2c:	2000      	movs	r0, #0
 8014c2e:	e7e8      	b.n	8014c02 <__hi0bits+0xc>
 8014c30:	2020      	movs	r0, #32
 8014c32:	4770      	bx	lr

08014c34 <__lo0bits>:
 8014c34:	6803      	ldr	r3, [r0, #0]
 8014c36:	f013 0207 	ands.w	r2, r3, #7
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	d00b      	beq.n	8014c56 <__lo0bits+0x22>
 8014c3e:	07da      	lsls	r2, r3, #31
 8014c40:	d423      	bmi.n	8014c8a <__lo0bits+0x56>
 8014c42:	0798      	lsls	r0, r3, #30
 8014c44:	bf49      	itett	mi
 8014c46:	085b      	lsrmi	r3, r3, #1
 8014c48:	089b      	lsrpl	r3, r3, #2
 8014c4a:	2001      	movmi	r0, #1
 8014c4c:	600b      	strmi	r3, [r1, #0]
 8014c4e:	bf5c      	itt	pl
 8014c50:	600b      	strpl	r3, [r1, #0]
 8014c52:	2002      	movpl	r0, #2
 8014c54:	4770      	bx	lr
 8014c56:	b298      	uxth	r0, r3
 8014c58:	b9a8      	cbnz	r0, 8014c86 <__lo0bits+0x52>
 8014c5a:	0c1b      	lsrs	r3, r3, #16
 8014c5c:	2010      	movs	r0, #16
 8014c5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014c62:	bf04      	itt	eq
 8014c64:	0a1b      	lsreq	r3, r3, #8
 8014c66:	3008      	addeq	r0, #8
 8014c68:	071a      	lsls	r2, r3, #28
 8014c6a:	bf04      	itt	eq
 8014c6c:	091b      	lsreq	r3, r3, #4
 8014c6e:	3004      	addeq	r0, #4
 8014c70:	079a      	lsls	r2, r3, #30
 8014c72:	bf04      	itt	eq
 8014c74:	089b      	lsreq	r3, r3, #2
 8014c76:	3002      	addeq	r0, #2
 8014c78:	07da      	lsls	r2, r3, #31
 8014c7a:	d402      	bmi.n	8014c82 <__lo0bits+0x4e>
 8014c7c:	085b      	lsrs	r3, r3, #1
 8014c7e:	d006      	beq.n	8014c8e <__lo0bits+0x5a>
 8014c80:	3001      	adds	r0, #1
 8014c82:	600b      	str	r3, [r1, #0]
 8014c84:	4770      	bx	lr
 8014c86:	4610      	mov	r0, r2
 8014c88:	e7e9      	b.n	8014c5e <__lo0bits+0x2a>
 8014c8a:	2000      	movs	r0, #0
 8014c8c:	4770      	bx	lr
 8014c8e:	2020      	movs	r0, #32
 8014c90:	4770      	bx	lr

08014c92 <__i2b>:
 8014c92:	b510      	push	{r4, lr}
 8014c94:	460c      	mov	r4, r1
 8014c96:	2101      	movs	r1, #1
 8014c98:	f7ff ff27 	bl	8014aea <_Balloc>
 8014c9c:	2201      	movs	r2, #1
 8014c9e:	6144      	str	r4, [r0, #20]
 8014ca0:	6102      	str	r2, [r0, #16]
 8014ca2:	bd10      	pop	{r4, pc}

08014ca4 <__multiply>:
 8014ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca8:	4614      	mov	r4, r2
 8014caa:	690a      	ldr	r2, [r1, #16]
 8014cac:	6923      	ldr	r3, [r4, #16]
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	bfb8      	it	lt
 8014cb2:	460b      	movlt	r3, r1
 8014cb4:	4688      	mov	r8, r1
 8014cb6:	bfbc      	itt	lt
 8014cb8:	46a0      	movlt	r8, r4
 8014cba:	461c      	movlt	r4, r3
 8014cbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014cc0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014cc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014cc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014ccc:	eb07 0609 	add.w	r6, r7, r9
 8014cd0:	42b3      	cmp	r3, r6
 8014cd2:	bfb8      	it	lt
 8014cd4:	3101      	addlt	r1, #1
 8014cd6:	f7ff ff08 	bl	8014aea <_Balloc>
 8014cda:	f100 0514 	add.w	r5, r0, #20
 8014cde:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014ce2:	462b      	mov	r3, r5
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	4573      	cmp	r3, lr
 8014ce8:	d316      	bcc.n	8014d18 <__multiply+0x74>
 8014cea:	f104 0214 	add.w	r2, r4, #20
 8014cee:	f108 0114 	add.w	r1, r8, #20
 8014cf2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014cf6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014cfa:	9300      	str	r3, [sp, #0]
 8014cfc:	9b00      	ldr	r3, [sp, #0]
 8014cfe:	9201      	str	r2, [sp, #4]
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d80c      	bhi.n	8014d1e <__multiply+0x7a>
 8014d04:	2e00      	cmp	r6, #0
 8014d06:	dd03      	ble.n	8014d10 <__multiply+0x6c>
 8014d08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d05d      	beq.n	8014dcc <__multiply+0x128>
 8014d10:	6106      	str	r6, [r0, #16]
 8014d12:	b003      	add	sp, #12
 8014d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d18:	f843 2b04 	str.w	r2, [r3], #4
 8014d1c:	e7e3      	b.n	8014ce6 <__multiply+0x42>
 8014d1e:	f8b2 b000 	ldrh.w	fp, [r2]
 8014d22:	f1bb 0f00 	cmp.w	fp, #0
 8014d26:	d023      	beq.n	8014d70 <__multiply+0xcc>
 8014d28:	4689      	mov	r9, r1
 8014d2a:	46ac      	mov	ip, r5
 8014d2c:	f04f 0800 	mov.w	r8, #0
 8014d30:	f859 4b04 	ldr.w	r4, [r9], #4
 8014d34:	f8dc a000 	ldr.w	sl, [ip]
 8014d38:	b2a3      	uxth	r3, r4
 8014d3a:	fa1f fa8a 	uxth.w	sl, sl
 8014d3e:	fb0b a303 	mla	r3, fp, r3, sl
 8014d42:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014d46:	f8dc 4000 	ldr.w	r4, [ip]
 8014d4a:	4443      	add	r3, r8
 8014d4c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014d50:	fb0b 840a 	mla	r4, fp, sl, r8
 8014d54:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014d58:	46e2      	mov	sl, ip
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014d60:	454f      	cmp	r7, r9
 8014d62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014d66:	f84a 3b04 	str.w	r3, [sl], #4
 8014d6a:	d82b      	bhi.n	8014dc4 <__multiply+0x120>
 8014d6c:	f8cc 8004 	str.w	r8, [ip, #4]
 8014d70:	9b01      	ldr	r3, [sp, #4]
 8014d72:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014d76:	3204      	adds	r2, #4
 8014d78:	f1ba 0f00 	cmp.w	sl, #0
 8014d7c:	d020      	beq.n	8014dc0 <__multiply+0x11c>
 8014d7e:	682b      	ldr	r3, [r5, #0]
 8014d80:	4689      	mov	r9, r1
 8014d82:	46a8      	mov	r8, r5
 8014d84:	f04f 0b00 	mov.w	fp, #0
 8014d88:	f8b9 c000 	ldrh.w	ip, [r9]
 8014d8c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014d90:	fb0a 440c 	mla	r4, sl, ip, r4
 8014d94:	445c      	add	r4, fp
 8014d96:	46c4      	mov	ip, r8
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014d9e:	f84c 3b04 	str.w	r3, [ip], #4
 8014da2:	f859 3b04 	ldr.w	r3, [r9], #4
 8014da6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014daa:	0c1b      	lsrs	r3, r3, #16
 8014dac:	fb0a b303 	mla	r3, sl, r3, fp
 8014db0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014db4:	454f      	cmp	r7, r9
 8014db6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014dba:	d805      	bhi.n	8014dc8 <__multiply+0x124>
 8014dbc:	f8c8 3004 	str.w	r3, [r8, #4]
 8014dc0:	3504      	adds	r5, #4
 8014dc2:	e79b      	b.n	8014cfc <__multiply+0x58>
 8014dc4:	46d4      	mov	ip, sl
 8014dc6:	e7b3      	b.n	8014d30 <__multiply+0x8c>
 8014dc8:	46e0      	mov	r8, ip
 8014dca:	e7dd      	b.n	8014d88 <__multiply+0xe4>
 8014dcc:	3e01      	subs	r6, #1
 8014dce:	e799      	b.n	8014d04 <__multiply+0x60>

08014dd0 <__pow5mult>:
 8014dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dd4:	4615      	mov	r5, r2
 8014dd6:	f012 0203 	ands.w	r2, r2, #3
 8014dda:	4606      	mov	r6, r0
 8014ddc:	460f      	mov	r7, r1
 8014dde:	d007      	beq.n	8014df0 <__pow5mult+0x20>
 8014de0:	3a01      	subs	r2, #1
 8014de2:	4c21      	ldr	r4, [pc, #132]	; (8014e68 <__pow5mult+0x98>)
 8014de4:	2300      	movs	r3, #0
 8014de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014dea:	f7ff fec9 	bl	8014b80 <__multadd>
 8014dee:	4607      	mov	r7, r0
 8014df0:	10ad      	asrs	r5, r5, #2
 8014df2:	d035      	beq.n	8014e60 <__pow5mult+0x90>
 8014df4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014df6:	b93c      	cbnz	r4, 8014e08 <__pow5mult+0x38>
 8014df8:	2010      	movs	r0, #16
 8014dfa:	f7fd fe0d 	bl	8012a18 <malloc>
 8014dfe:	6270      	str	r0, [r6, #36]	; 0x24
 8014e00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014e04:	6004      	str	r4, [r0, #0]
 8014e06:	60c4      	str	r4, [r0, #12]
 8014e08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014e10:	b94c      	cbnz	r4, 8014e26 <__pow5mult+0x56>
 8014e12:	f240 2171 	movw	r1, #625	; 0x271
 8014e16:	4630      	mov	r0, r6
 8014e18:	f7ff ff3b 	bl	8014c92 <__i2b>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014e22:	4604      	mov	r4, r0
 8014e24:	6003      	str	r3, [r0, #0]
 8014e26:	f04f 0800 	mov.w	r8, #0
 8014e2a:	07eb      	lsls	r3, r5, #31
 8014e2c:	d50a      	bpl.n	8014e44 <__pow5mult+0x74>
 8014e2e:	4639      	mov	r1, r7
 8014e30:	4622      	mov	r2, r4
 8014e32:	4630      	mov	r0, r6
 8014e34:	f7ff ff36 	bl	8014ca4 <__multiply>
 8014e38:	4639      	mov	r1, r7
 8014e3a:	4681      	mov	r9, r0
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	f7ff fe88 	bl	8014b52 <_Bfree>
 8014e42:	464f      	mov	r7, r9
 8014e44:	106d      	asrs	r5, r5, #1
 8014e46:	d00b      	beq.n	8014e60 <__pow5mult+0x90>
 8014e48:	6820      	ldr	r0, [r4, #0]
 8014e4a:	b938      	cbnz	r0, 8014e5c <__pow5mult+0x8c>
 8014e4c:	4622      	mov	r2, r4
 8014e4e:	4621      	mov	r1, r4
 8014e50:	4630      	mov	r0, r6
 8014e52:	f7ff ff27 	bl	8014ca4 <__multiply>
 8014e56:	6020      	str	r0, [r4, #0]
 8014e58:	f8c0 8000 	str.w	r8, [r0]
 8014e5c:	4604      	mov	r4, r0
 8014e5e:	e7e4      	b.n	8014e2a <__pow5mult+0x5a>
 8014e60:	4638      	mov	r0, r7
 8014e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e66:	bf00      	nop
 8014e68:	08018518 	.word	0x08018518

08014e6c <__lshift>:
 8014e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e70:	460c      	mov	r4, r1
 8014e72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014e76:	6923      	ldr	r3, [r4, #16]
 8014e78:	6849      	ldr	r1, [r1, #4]
 8014e7a:	eb0a 0903 	add.w	r9, sl, r3
 8014e7e:	68a3      	ldr	r3, [r4, #8]
 8014e80:	4607      	mov	r7, r0
 8014e82:	4616      	mov	r6, r2
 8014e84:	f109 0501 	add.w	r5, r9, #1
 8014e88:	42ab      	cmp	r3, r5
 8014e8a:	db32      	blt.n	8014ef2 <__lshift+0x86>
 8014e8c:	4638      	mov	r0, r7
 8014e8e:	f7ff fe2c 	bl	8014aea <_Balloc>
 8014e92:	2300      	movs	r3, #0
 8014e94:	4680      	mov	r8, r0
 8014e96:	f100 0114 	add.w	r1, r0, #20
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	4553      	cmp	r3, sl
 8014e9e:	db2b      	blt.n	8014ef8 <__lshift+0x8c>
 8014ea0:	6920      	ldr	r0, [r4, #16]
 8014ea2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ea6:	f104 0314 	add.w	r3, r4, #20
 8014eaa:	f016 021f 	ands.w	r2, r6, #31
 8014eae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014eb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014eb6:	d025      	beq.n	8014f04 <__lshift+0x98>
 8014eb8:	f1c2 0e20 	rsb	lr, r2, #32
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	681e      	ldr	r6, [r3, #0]
 8014ec0:	468a      	mov	sl, r1
 8014ec2:	4096      	lsls	r6, r2
 8014ec4:	4330      	orrs	r0, r6
 8014ec6:	f84a 0b04 	str.w	r0, [sl], #4
 8014eca:	f853 0b04 	ldr.w	r0, [r3], #4
 8014ece:	459c      	cmp	ip, r3
 8014ed0:	fa20 f00e 	lsr.w	r0, r0, lr
 8014ed4:	d814      	bhi.n	8014f00 <__lshift+0x94>
 8014ed6:	6048      	str	r0, [r1, #4]
 8014ed8:	b108      	cbz	r0, 8014ede <__lshift+0x72>
 8014eda:	f109 0502 	add.w	r5, r9, #2
 8014ede:	3d01      	subs	r5, #1
 8014ee0:	4638      	mov	r0, r7
 8014ee2:	f8c8 5010 	str.w	r5, [r8, #16]
 8014ee6:	4621      	mov	r1, r4
 8014ee8:	f7ff fe33 	bl	8014b52 <_Bfree>
 8014eec:	4640      	mov	r0, r8
 8014eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ef2:	3101      	adds	r1, #1
 8014ef4:	005b      	lsls	r3, r3, #1
 8014ef6:	e7c7      	b.n	8014e88 <__lshift+0x1c>
 8014ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014efc:	3301      	adds	r3, #1
 8014efe:	e7cd      	b.n	8014e9c <__lshift+0x30>
 8014f00:	4651      	mov	r1, sl
 8014f02:	e7dc      	b.n	8014ebe <__lshift+0x52>
 8014f04:	3904      	subs	r1, #4
 8014f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8014f0e:	459c      	cmp	ip, r3
 8014f10:	d8f9      	bhi.n	8014f06 <__lshift+0x9a>
 8014f12:	e7e4      	b.n	8014ede <__lshift+0x72>

08014f14 <__mcmp>:
 8014f14:	6903      	ldr	r3, [r0, #16]
 8014f16:	690a      	ldr	r2, [r1, #16]
 8014f18:	1a9b      	subs	r3, r3, r2
 8014f1a:	b530      	push	{r4, r5, lr}
 8014f1c:	d10c      	bne.n	8014f38 <__mcmp+0x24>
 8014f1e:	0092      	lsls	r2, r2, #2
 8014f20:	3014      	adds	r0, #20
 8014f22:	3114      	adds	r1, #20
 8014f24:	1884      	adds	r4, r0, r2
 8014f26:	4411      	add	r1, r2
 8014f28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014f2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014f30:	4295      	cmp	r5, r2
 8014f32:	d003      	beq.n	8014f3c <__mcmp+0x28>
 8014f34:	d305      	bcc.n	8014f42 <__mcmp+0x2e>
 8014f36:	2301      	movs	r3, #1
 8014f38:	4618      	mov	r0, r3
 8014f3a:	bd30      	pop	{r4, r5, pc}
 8014f3c:	42a0      	cmp	r0, r4
 8014f3e:	d3f3      	bcc.n	8014f28 <__mcmp+0x14>
 8014f40:	e7fa      	b.n	8014f38 <__mcmp+0x24>
 8014f42:	f04f 33ff 	mov.w	r3, #4294967295
 8014f46:	e7f7      	b.n	8014f38 <__mcmp+0x24>

08014f48 <__mdiff>:
 8014f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f4c:	460d      	mov	r5, r1
 8014f4e:	4607      	mov	r7, r0
 8014f50:	4611      	mov	r1, r2
 8014f52:	4628      	mov	r0, r5
 8014f54:	4614      	mov	r4, r2
 8014f56:	f7ff ffdd 	bl	8014f14 <__mcmp>
 8014f5a:	1e06      	subs	r6, r0, #0
 8014f5c:	d108      	bne.n	8014f70 <__mdiff+0x28>
 8014f5e:	4631      	mov	r1, r6
 8014f60:	4638      	mov	r0, r7
 8014f62:	f7ff fdc2 	bl	8014aea <_Balloc>
 8014f66:	2301      	movs	r3, #1
 8014f68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f70:	bfa4      	itt	ge
 8014f72:	4623      	movge	r3, r4
 8014f74:	462c      	movge	r4, r5
 8014f76:	4638      	mov	r0, r7
 8014f78:	6861      	ldr	r1, [r4, #4]
 8014f7a:	bfa6      	itte	ge
 8014f7c:	461d      	movge	r5, r3
 8014f7e:	2600      	movge	r6, #0
 8014f80:	2601      	movlt	r6, #1
 8014f82:	f7ff fdb2 	bl	8014aea <_Balloc>
 8014f86:	692b      	ldr	r3, [r5, #16]
 8014f88:	60c6      	str	r6, [r0, #12]
 8014f8a:	6926      	ldr	r6, [r4, #16]
 8014f8c:	f105 0914 	add.w	r9, r5, #20
 8014f90:	f104 0214 	add.w	r2, r4, #20
 8014f94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014f98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014f9c:	f100 0514 	add.w	r5, r0, #20
 8014fa0:	f04f 0e00 	mov.w	lr, #0
 8014fa4:	f852 ab04 	ldr.w	sl, [r2], #4
 8014fa8:	f859 4b04 	ldr.w	r4, [r9], #4
 8014fac:	fa1e f18a 	uxtah	r1, lr, sl
 8014fb0:	b2a3      	uxth	r3, r4
 8014fb2:	1ac9      	subs	r1, r1, r3
 8014fb4:	0c23      	lsrs	r3, r4, #16
 8014fb6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014fba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014fbe:	b289      	uxth	r1, r1
 8014fc0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014fc4:	45c8      	cmp	r8, r9
 8014fc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014fca:	4694      	mov	ip, r2
 8014fcc:	f845 3b04 	str.w	r3, [r5], #4
 8014fd0:	d8e8      	bhi.n	8014fa4 <__mdiff+0x5c>
 8014fd2:	45bc      	cmp	ip, r7
 8014fd4:	d304      	bcc.n	8014fe0 <__mdiff+0x98>
 8014fd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014fda:	b183      	cbz	r3, 8014ffe <__mdiff+0xb6>
 8014fdc:	6106      	str	r6, [r0, #16]
 8014fde:	e7c5      	b.n	8014f6c <__mdiff+0x24>
 8014fe0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014fe4:	fa1e f381 	uxtah	r3, lr, r1
 8014fe8:	141a      	asrs	r2, r3, #16
 8014fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ff4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014ff8:	f845 3b04 	str.w	r3, [r5], #4
 8014ffc:	e7e9      	b.n	8014fd2 <__mdiff+0x8a>
 8014ffe:	3e01      	subs	r6, #1
 8015000:	e7e9      	b.n	8014fd6 <__mdiff+0x8e>

08015002 <__d2b>:
 8015002:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015006:	460e      	mov	r6, r1
 8015008:	2101      	movs	r1, #1
 801500a:	ec59 8b10 	vmov	r8, r9, d0
 801500e:	4615      	mov	r5, r2
 8015010:	f7ff fd6b 	bl	8014aea <_Balloc>
 8015014:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015018:	4607      	mov	r7, r0
 801501a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801501e:	bb34      	cbnz	r4, 801506e <__d2b+0x6c>
 8015020:	9301      	str	r3, [sp, #4]
 8015022:	f1b8 0300 	subs.w	r3, r8, #0
 8015026:	d027      	beq.n	8015078 <__d2b+0x76>
 8015028:	a802      	add	r0, sp, #8
 801502a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801502e:	f7ff fe01 	bl	8014c34 <__lo0bits>
 8015032:	9900      	ldr	r1, [sp, #0]
 8015034:	b1f0      	cbz	r0, 8015074 <__d2b+0x72>
 8015036:	9a01      	ldr	r2, [sp, #4]
 8015038:	f1c0 0320 	rsb	r3, r0, #32
 801503c:	fa02 f303 	lsl.w	r3, r2, r3
 8015040:	430b      	orrs	r3, r1
 8015042:	40c2      	lsrs	r2, r0
 8015044:	617b      	str	r3, [r7, #20]
 8015046:	9201      	str	r2, [sp, #4]
 8015048:	9b01      	ldr	r3, [sp, #4]
 801504a:	61bb      	str	r3, [r7, #24]
 801504c:	2b00      	cmp	r3, #0
 801504e:	bf14      	ite	ne
 8015050:	2102      	movne	r1, #2
 8015052:	2101      	moveq	r1, #1
 8015054:	6139      	str	r1, [r7, #16]
 8015056:	b1c4      	cbz	r4, 801508a <__d2b+0x88>
 8015058:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801505c:	4404      	add	r4, r0
 801505e:	6034      	str	r4, [r6, #0]
 8015060:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015064:	6028      	str	r0, [r5, #0]
 8015066:	4638      	mov	r0, r7
 8015068:	b003      	add	sp, #12
 801506a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801506e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015072:	e7d5      	b.n	8015020 <__d2b+0x1e>
 8015074:	6179      	str	r1, [r7, #20]
 8015076:	e7e7      	b.n	8015048 <__d2b+0x46>
 8015078:	a801      	add	r0, sp, #4
 801507a:	f7ff fddb 	bl	8014c34 <__lo0bits>
 801507e:	9b01      	ldr	r3, [sp, #4]
 8015080:	617b      	str	r3, [r7, #20]
 8015082:	2101      	movs	r1, #1
 8015084:	6139      	str	r1, [r7, #16]
 8015086:	3020      	adds	r0, #32
 8015088:	e7e5      	b.n	8015056 <__d2b+0x54>
 801508a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801508e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015092:	6030      	str	r0, [r6, #0]
 8015094:	6918      	ldr	r0, [r3, #16]
 8015096:	f7ff fdae 	bl	8014bf6 <__hi0bits>
 801509a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801509e:	e7e1      	b.n	8015064 <__d2b+0x62>

080150a0 <_calloc_r>:
 80150a0:	b538      	push	{r3, r4, r5, lr}
 80150a2:	fb02 f401 	mul.w	r4, r2, r1
 80150a6:	4621      	mov	r1, r4
 80150a8:	f7fd fd28 	bl	8012afc <_malloc_r>
 80150ac:	4605      	mov	r5, r0
 80150ae:	b118      	cbz	r0, 80150b8 <_calloc_r+0x18>
 80150b0:	4622      	mov	r2, r4
 80150b2:	2100      	movs	r1, #0
 80150b4:	f7fd fccb 	bl	8012a4e <memset>
 80150b8:	4628      	mov	r0, r5
 80150ba:	bd38      	pop	{r3, r4, r5, pc}

080150bc <_realloc_r>:
 80150bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150be:	4607      	mov	r7, r0
 80150c0:	4614      	mov	r4, r2
 80150c2:	460e      	mov	r6, r1
 80150c4:	b921      	cbnz	r1, 80150d0 <_realloc_r+0x14>
 80150c6:	4611      	mov	r1, r2
 80150c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80150cc:	f7fd bd16 	b.w	8012afc <_malloc_r>
 80150d0:	b922      	cbnz	r2, 80150dc <_realloc_r+0x20>
 80150d2:	f7fd fcc5 	bl	8012a60 <_free_r>
 80150d6:	4625      	mov	r5, r4
 80150d8:	4628      	mov	r0, r5
 80150da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150dc:	f000 f9f0 	bl	80154c0 <_malloc_usable_size_r>
 80150e0:	42a0      	cmp	r0, r4
 80150e2:	d20f      	bcs.n	8015104 <_realloc_r+0x48>
 80150e4:	4621      	mov	r1, r4
 80150e6:	4638      	mov	r0, r7
 80150e8:	f7fd fd08 	bl	8012afc <_malloc_r>
 80150ec:	4605      	mov	r5, r0
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d0f2      	beq.n	80150d8 <_realloc_r+0x1c>
 80150f2:	4631      	mov	r1, r6
 80150f4:	4622      	mov	r2, r4
 80150f6:	f7fd fc9f 	bl	8012a38 <memcpy>
 80150fa:	4631      	mov	r1, r6
 80150fc:	4638      	mov	r0, r7
 80150fe:	f7fd fcaf 	bl	8012a60 <_free_r>
 8015102:	e7e9      	b.n	80150d8 <_realloc_r+0x1c>
 8015104:	4635      	mov	r5, r6
 8015106:	e7e7      	b.n	80150d8 <_realloc_r+0x1c>

08015108 <__ssputs_r>:
 8015108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801510c:	688e      	ldr	r6, [r1, #8]
 801510e:	429e      	cmp	r6, r3
 8015110:	4682      	mov	sl, r0
 8015112:	460c      	mov	r4, r1
 8015114:	4690      	mov	r8, r2
 8015116:	4699      	mov	r9, r3
 8015118:	d837      	bhi.n	801518a <__ssputs_r+0x82>
 801511a:	898a      	ldrh	r2, [r1, #12]
 801511c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015120:	d031      	beq.n	8015186 <__ssputs_r+0x7e>
 8015122:	6825      	ldr	r5, [r4, #0]
 8015124:	6909      	ldr	r1, [r1, #16]
 8015126:	1a6f      	subs	r7, r5, r1
 8015128:	6965      	ldr	r5, [r4, #20]
 801512a:	2302      	movs	r3, #2
 801512c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015130:	fb95 f5f3 	sdiv	r5, r5, r3
 8015134:	f109 0301 	add.w	r3, r9, #1
 8015138:	443b      	add	r3, r7
 801513a:	429d      	cmp	r5, r3
 801513c:	bf38      	it	cc
 801513e:	461d      	movcc	r5, r3
 8015140:	0553      	lsls	r3, r2, #21
 8015142:	d530      	bpl.n	80151a6 <__ssputs_r+0x9e>
 8015144:	4629      	mov	r1, r5
 8015146:	f7fd fcd9 	bl	8012afc <_malloc_r>
 801514a:	4606      	mov	r6, r0
 801514c:	b950      	cbnz	r0, 8015164 <__ssputs_r+0x5c>
 801514e:	230c      	movs	r3, #12
 8015150:	f8ca 3000 	str.w	r3, [sl]
 8015154:	89a3      	ldrh	r3, [r4, #12]
 8015156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801515a:	81a3      	strh	r3, [r4, #12]
 801515c:	f04f 30ff 	mov.w	r0, #4294967295
 8015160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015164:	463a      	mov	r2, r7
 8015166:	6921      	ldr	r1, [r4, #16]
 8015168:	f7fd fc66 	bl	8012a38 <memcpy>
 801516c:	89a3      	ldrh	r3, [r4, #12]
 801516e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015176:	81a3      	strh	r3, [r4, #12]
 8015178:	6126      	str	r6, [r4, #16]
 801517a:	6165      	str	r5, [r4, #20]
 801517c:	443e      	add	r6, r7
 801517e:	1bed      	subs	r5, r5, r7
 8015180:	6026      	str	r6, [r4, #0]
 8015182:	60a5      	str	r5, [r4, #8]
 8015184:	464e      	mov	r6, r9
 8015186:	454e      	cmp	r6, r9
 8015188:	d900      	bls.n	801518c <__ssputs_r+0x84>
 801518a:	464e      	mov	r6, r9
 801518c:	4632      	mov	r2, r6
 801518e:	4641      	mov	r1, r8
 8015190:	6820      	ldr	r0, [r4, #0]
 8015192:	f7ff fc8f 	bl	8014ab4 <memmove>
 8015196:	68a3      	ldr	r3, [r4, #8]
 8015198:	1b9b      	subs	r3, r3, r6
 801519a:	60a3      	str	r3, [r4, #8]
 801519c:	6823      	ldr	r3, [r4, #0]
 801519e:	441e      	add	r6, r3
 80151a0:	6026      	str	r6, [r4, #0]
 80151a2:	2000      	movs	r0, #0
 80151a4:	e7dc      	b.n	8015160 <__ssputs_r+0x58>
 80151a6:	462a      	mov	r2, r5
 80151a8:	f7ff ff88 	bl	80150bc <_realloc_r>
 80151ac:	4606      	mov	r6, r0
 80151ae:	2800      	cmp	r0, #0
 80151b0:	d1e2      	bne.n	8015178 <__ssputs_r+0x70>
 80151b2:	6921      	ldr	r1, [r4, #16]
 80151b4:	4650      	mov	r0, sl
 80151b6:	f7fd fc53 	bl	8012a60 <_free_r>
 80151ba:	e7c8      	b.n	801514e <__ssputs_r+0x46>

080151bc <_svfiprintf_r>:
 80151bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151c0:	461d      	mov	r5, r3
 80151c2:	898b      	ldrh	r3, [r1, #12]
 80151c4:	061f      	lsls	r7, r3, #24
 80151c6:	b09d      	sub	sp, #116	; 0x74
 80151c8:	4680      	mov	r8, r0
 80151ca:	460c      	mov	r4, r1
 80151cc:	4616      	mov	r6, r2
 80151ce:	d50f      	bpl.n	80151f0 <_svfiprintf_r+0x34>
 80151d0:	690b      	ldr	r3, [r1, #16]
 80151d2:	b96b      	cbnz	r3, 80151f0 <_svfiprintf_r+0x34>
 80151d4:	2140      	movs	r1, #64	; 0x40
 80151d6:	f7fd fc91 	bl	8012afc <_malloc_r>
 80151da:	6020      	str	r0, [r4, #0]
 80151dc:	6120      	str	r0, [r4, #16]
 80151de:	b928      	cbnz	r0, 80151ec <_svfiprintf_r+0x30>
 80151e0:	230c      	movs	r3, #12
 80151e2:	f8c8 3000 	str.w	r3, [r8]
 80151e6:	f04f 30ff 	mov.w	r0, #4294967295
 80151ea:	e0c8      	b.n	801537e <_svfiprintf_r+0x1c2>
 80151ec:	2340      	movs	r3, #64	; 0x40
 80151ee:	6163      	str	r3, [r4, #20]
 80151f0:	2300      	movs	r3, #0
 80151f2:	9309      	str	r3, [sp, #36]	; 0x24
 80151f4:	2320      	movs	r3, #32
 80151f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151fa:	2330      	movs	r3, #48	; 0x30
 80151fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015200:	9503      	str	r5, [sp, #12]
 8015202:	f04f 0b01 	mov.w	fp, #1
 8015206:	4637      	mov	r7, r6
 8015208:	463d      	mov	r5, r7
 801520a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801520e:	b10b      	cbz	r3, 8015214 <_svfiprintf_r+0x58>
 8015210:	2b25      	cmp	r3, #37	; 0x25
 8015212:	d13e      	bne.n	8015292 <_svfiprintf_r+0xd6>
 8015214:	ebb7 0a06 	subs.w	sl, r7, r6
 8015218:	d00b      	beq.n	8015232 <_svfiprintf_r+0x76>
 801521a:	4653      	mov	r3, sl
 801521c:	4632      	mov	r2, r6
 801521e:	4621      	mov	r1, r4
 8015220:	4640      	mov	r0, r8
 8015222:	f7ff ff71 	bl	8015108 <__ssputs_r>
 8015226:	3001      	adds	r0, #1
 8015228:	f000 80a4 	beq.w	8015374 <_svfiprintf_r+0x1b8>
 801522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801522e:	4453      	add	r3, sl
 8015230:	9309      	str	r3, [sp, #36]	; 0x24
 8015232:	783b      	ldrb	r3, [r7, #0]
 8015234:	2b00      	cmp	r3, #0
 8015236:	f000 809d 	beq.w	8015374 <_svfiprintf_r+0x1b8>
 801523a:	2300      	movs	r3, #0
 801523c:	f04f 32ff 	mov.w	r2, #4294967295
 8015240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015244:	9304      	str	r3, [sp, #16]
 8015246:	9307      	str	r3, [sp, #28]
 8015248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801524c:	931a      	str	r3, [sp, #104]	; 0x68
 801524e:	462f      	mov	r7, r5
 8015250:	2205      	movs	r2, #5
 8015252:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015256:	4850      	ldr	r0, [pc, #320]	; (8015398 <_svfiprintf_r+0x1dc>)
 8015258:	f7ea ffe2 	bl	8000220 <memchr>
 801525c:	9b04      	ldr	r3, [sp, #16]
 801525e:	b9d0      	cbnz	r0, 8015296 <_svfiprintf_r+0xda>
 8015260:	06d9      	lsls	r1, r3, #27
 8015262:	bf44      	itt	mi
 8015264:	2220      	movmi	r2, #32
 8015266:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801526a:	071a      	lsls	r2, r3, #28
 801526c:	bf44      	itt	mi
 801526e:	222b      	movmi	r2, #43	; 0x2b
 8015270:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015274:	782a      	ldrb	r2, [r5, #0]
 8015276:	2a2a      	cmp	r2, #42	; 0x2a
 8015278:	d015      	beq.n	80152a6 <_svfiprintf_r+0xea>
 801527a:	9a07      	ldr	r2, [sp, #28]
 801527c:	462f      	mov	r7, r5
 801527e:	2000      	movs	r0, #0
 8015280:	250a      	movs	r5, #10
 8015282:	4639      	mov	r1, r7
 8015284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015288:	3b30      	subs	r3, #48	; 0x30
 801528a:	2b09      	cmp	r3, #9
 801528c:	d94d      	bls.n	801532a <_svfiprintf_r+0x16e>
 801528e:	b1b8      	cbz	r0, 80152c0 <_svfiprintf_r+0x104>
 8015290:	e00f      	b.n	80152b2 <_svfiprintf_r+0xf6>
 8015292:	462f      	mov	r7, r5
 8015294:	e7b8      	b.n	8015208 <_svfiprintf_r+0x4c>
 8015296:	4a40      	ldr	r2, [pc, #256]	; (8015398 <_svfiprintf_r+0x1dc>)
 8015298:	1a80      	subs	r0, r0, r2
 801529a:	fa0b f000 	lsl.w	r0, fp, r0
 801529e:	4318      	orrs	r0, r3
 80152a0:	9004      	str	r0, [sp, #16]
 80152a2:	463d      	mov	r5, r7
 80152a4:	e7d3      	b.n	801524e <_svfiprintf_r+0x92>
 80152a6:	9a03      	ldr	r2, [sp, #12]
 80152a8:	1d11      	adds	r1, r2, #4
 80152aa:	6812      	ldr	r2, [r2, #0]
 80152ac:	9103      	str	r1, [sp, #12]
 80152ae:	2a00      	cmp	r2, #0
 80152b0:	db01      	blt.n	80152b6 <_svfiprintf_r+0xfa>
 80152b2:	9207      	str	r2, [sp, #28]
 80152b4:	e004      	b.n	80152c0 <_svfiprintf_r+0x104>
 80152b6:	4252      	negs	r2, r2
 80152b8:	f043 0302 	orr.w	r3, r3, #2
 80152bc:	9207      	str	r2, [sp, #28]
 80152be:	9304      	str	r3, [sp, #16]
 80152c0:	783b      	ldrb	r3, [r7, #0]
 80152c2:	2b2e      	cmp	r3, #46	; 0x2e
 80152c4:	d10c      	bne.n	80152e0 <_svfiprintf_r+0x124>
 80152c6:	787b      	ldrb	r3, [r7, #1]
 80152c8:	2b2a      	cmp	r3, #42	; 0x2a
 80152ca:	d133      	bne.n	8015334 <_svfiprintf_r+0x178>
 80152cc:	9b03      	ldr	r3, [sp, #12]
 80152ce:	1d1a      	adds	r2, r3, #4
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	9203      	str	r2, [sp, #12]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	bfb8      	it	lt
 80152d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80152dc:	3702      	adds	r7, #2
 80152de:	9305      	str	r3, [sp, #20]
 80152e0:	4d2e      	ldr	r5, [pc, #184]	; (801539c <_svfiprintf_r+0x1e0>)
 80152e2:	7839      	ldrb	r1, [r7, #0]
 80152e4:	2203      	movs	r2, #3
 80152e6:	4628      	mov	r0, r5
 80152e8:	f7ea ff9a 	bl	8000220 <memchr>
 80152ec:	b138      	cbz	r0, 80152fe <_svfiprintf_r+0x142>
 80152ee:	2340      	movs	r3, #64	; 0x40
 80152f0:	1b40      	subs	r0, r0, r5
 80152f2:	fa03 f000 	lsl.w	r0, r3, r0
 80152f6:	9b04      	ldr	r3, [sp, #16]
 80152f8:	4303      	orrs	r3, r0
 80152fa:	3701      	adds	r7, #1
 80152fc:	9304      	str	r3, [sp, #16]
 80152fe:	7839      	ldrb	r1, [r7, #0]
 8015300:	4827      	ldr	r0, [pc, #156]	; (80153a0 <_svfiprintf_r+0x1e4>)
 8015302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015306:	2206      	movs	r2, #6
 8015308:	1c7e      	adds	r6, r7, #1
 801530a:	f7ea ff89 	bl	8000220 <memchr>
 801530e:	2800      	cmp	r0, #0
 8015310:	d038      	beq.n	8015384 <_svfiprintf_r+0x1c8>
 8015312:	4b24      	ldr	r3, [pc, #144]	; (80153a4 <_svfiprintf_r+0x1e8>)
 8015314:	bb13      	cbnz	r3, 801535c <_svfiprintf_r+0x1a0>
 8015316:	9b03      	ldr	r3, [sp, #12]
 8015318:	3307      	adds	r3, #7
 801531a:	f023 0307 	bic.w	r3, r3, #7
 801531e:	3308      	adds	r3, #8
 8015320:	9303      	str	r3, [sp, #12]
 8015322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015324:	444b      	add	r3, r9
 8015326:	9309      	str	r3, [sp, #36]	; 0x24
 8015328:	e76d      	b.n	8015206 <_svfiprintf_r+0x4a>
 801532a:	fb05 3202 	mla	r2, r5, r2, r3
 801532e:	2001      	movs	r0, #1
 8015330:	460f      	mov	r7, r1
 8015332:	e7a6      	b.n	8015282 <_svfiprintf_r+0xc6>
 8015334:	2300      	movs	r3, #0
 8015336:	3701      	adds	r7, #1
 8015338:	9305      	str	r3, [sp, #20]
 801533a:	4619      	mov	r1, r3
 801533c:	250a      	movs	r5, #10
 801533e:	4638      	mov	r0, r7
 8015340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015344:	3a30      	subs	r2, #48	; 0x30
 8015346:	2a09      	cmp	r2, #9
 8015348:	d903      	bls.n	8015352 <_svfiprintf_r+0x196>
 801534a:	2b00      	cmp	r3, #0
 801534c:	d0c8      	beq.n	80152e0 <_svfiprintf_r+0x124>
 801534e:	9105      	str	r1, [sp, #20]
 8015350:	e7c6      	b.n	80152e0 <_svfiprintf_r+0x124>
 8015352:	fb05 2101 	mla	r1, r5, r1, r2
 8015356:	2301      	movs	r3, #1
 8015358:	4607      	mov	r7, r0
 801535a:	e7f0      	b.n	801533e <_svfiprintf_r+0x182>
 801535c:	ab03      	add	r3, sp, #12
 801535e:	9300      	str	r3, [sp, #0]
 8015360:	4622      	mov	r2, r4
 8015362:	4b11      	ldr	r3, [pc, #68]	; (80153a8 <_svfiprintf_r+0x1ec>)
 8015364:	a904      	add	r1, sp, #16
 8015366:	4640      	mov	r0, r8
 8015368:	f7fd fdf6 	bl	8012f58 <_printf_float>
 801536c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015370:	4681      	mov	r9, r0
 8015372:	d1d6      	bne.n	8015322 <_svfiprintf_r+0x166>
 8015374:	89a3      	ldrh	r3, [r4, #12]
 8015376:	065b      	lsls	r3, r3, #25
 8015378:	f53f af35 	bmi.w	80151e6 <_svfiprintf_r+0x2a>
 801537c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801537e:	b01d      	add	sp, #116	; 0x74
 8015380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015384:	ab03      	add	r3, sp, #12
 8015386:	9300      	str	r3, [sp, #0]
 8015388:	4622      	mov	r2, r4
 801538a:	4b07      	ldr	r3, [pc, #28]	; (80153a8 <_svfiprintf_r+0x1ec>)
 801538c:	a904      	add	r1, sp, #16
 801538e:	4640      	mov	r0, r8
 8015390:	f7fe f898 	bl	80134c4 <_printf_i>
 8015394:	e7ea      	b.n	801536c <_svfiprintf_r+0x1b0>
 8015396:	bf00      	nop
 8015398:	08018370 	.word	0x08018370
 801539c:	08018376 	.word	0x08018376
 80153a0:	0801837a 	.word	0x0801837a
 80153a4:	08012f59 	.word	0x08012f59
 80153a8:	08015109 	.word	0x08015109

080153ac <_read_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	4c07      	ldr	r4, [pc, #28]	; (80153cc <_read_r+0x20>)
 80153b0:	4605      	mov	r5, r0
 80153b2:	4608      	mov	r0, r1
 80153b4:	4611      	mov	r1, r2
 80153b6:	2200      	movs	r2, #0
 80153b8:	6022      	str	r2, [r4, #0]
 80153ba:	461a      	mov	r2, r3
 80153bc:	f7f0 f9ce 	bl	800575c <_read>
 80153c0:	1c43      	adds	r3, r0, #1
 80153c2:	d102      	bne.n	80153ca <_read_r+0x1e>
 80153c4:	6823      	ldr	r3, [r4, #0]
 80153c6:	b103      	cbz	r3, 80153ca <_read_r+0x1e>
 80153c8:	602b      	str	r3, [r5, #0]
 80153ca:	bd38      	pop	{r3, r4, r5, pc}
 80153cc:	2000686c 	.word	0x2000686c

080153d0 <_raise_r>:
 80153d0:	291f      	cmp	r1, #31
 80153d2:	b538      	push	{r3, r4, r5, lr}
 80153d4:	4604      	mov	r4, r0
 80153d6:	460d      	mov	r5, r1
 80153d8:	d904      	bls.n	80153e4 <_raise_r+0x14>
 80153da:	2316      	movs	r3, #22
 80153dc:	6003      	str	r3, [r0, #0]
 80153de:	f04f 30ff 	mov.w	r0, #4294967295
 80153e2:	bd38      	pop	{r3, r4, r5, pc}
 80153e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80153e6:	b112      	cbz	r2, 80153ee <_raise_r+0x1e>
 80153e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153ec:	b94b      	cbnz	r3, 8015402 <_raise_r+0x32>
 80153ee:	4620      	mov	r0, r4
 80153f0:	f000 f830 	bl	8015454 <_getpid_r>
 80153f4:	462a      	mov	r2, r5
 80153f6:	4601      	mov	r1, r0
 80153f8:	4620      	mov	r0, r4
 80153fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153fe:	f000 b817 	b.w	8015430 <_kill_r>
 8015402:	2b01      	cmp	r3, #1
 8015404:	d00a      	beq.n	801541c <_raise_r+0x4c>
 8015406:	1c59      	adds	r1, r3, #1
 8015408:	d103      	bne.n	8015412 <_raise_r+0x42>
 801540a:	2316      	movs	r3, #22
 801540c:	6003      	str	r3, [r0, #0]
 801540e:	2001      	movs	r0, #1
 8015410:	e7e7      	b.n	80153e2 <_raise_r+0x12>
 8015412:	2400      	movs	r4, #0
 8015414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015418:	4628      	mov	r0, r5
 801541a:	4798      	blx	r3
 801541c:	2000      	movs	r0, #0
 801541e:	e7e0      	b.n	80153e2 <_raise_r+0x12>

08015420 <raise>:
 8015420:	4b02      	ldr	r3, [pc, #8]	; (801542c <raise+0xc>)
 8015422:	4601      	mov	r1, r0
 8015424:	6818      	ldr	r0, [r3, #0]
 8015426:	f7ff bfd3 	b.w	80153d0 <_raise_r>
 801542a:	bf00      	nop
 801542c:	20000434 	.word	0x20000434

08015430 <_kill_r>:
 8015430:	b538      	push	{r3, r4, r5, lr}
 8015432:	4c07      	ldr	r4, [pc, #28]	; (8015450 <_kill_r+0x20>)
 8015434:	2300      	movs	r3, #0
 8015436:	4605      	mov	r5, r0
 8015438:	4608      	mov	r0, r1
 801543a:	4611      	mov	r1, r2
 801543c:	6023      	str	r3, [r4, #0]
 801543e:	f7f0 f973 	bl	8005728 <_kill>
 8015442:	1c43      	adds	r3, r0, #1
 8015444:	d102      	bne.n	801544c <_kill_r+0x1c>
 8015446:	6823      	ldr	r3, [r4, #0]
 8015448:	b103      	cbz	r3, 801544c <_kill_r+0x1c>
 801544a:	602b      	str	r3, [r5, #0]
 801544c:	bd38      	pop	{r3, r4, r5, pc}
 801544e:	bf00      	nop
 8015450:	2000686c 	.word	0x2000686c

08015454 <_getpid_r>:
 8015454:	f7f0 b960 	b.w	8005718 <_getpid>

08015458 <_fstat_r>:
 8015458:	b538      	push	{r3, r4, r5, lr}
 801545a:	4c07      	ldr	r4, [pc, #28]	; (8015478 <_fstat_r+0x20>)
 801545c:	2300      	movs	r3, #0
 801545e:	4605      	mov	r5, r0
 8015460:	4608      	mov	r0, r1
 8015462:	4611      	mov	r1, r2
 8015464:	6023      	str	r3, [r4, #0]
 8015466:	f7f0 f9be 	bl	80057e6 <_fstat>
 801546a:	1c43      	adds	r3, r0, #1
 801546c:	d102      	bne.n	8015474 <_fstat_r+0x1c>
 801546e:	6823      	ldr	r3, [r4, #0]
 8015470:	b103      	cbz	r3, 8015474 <_fstat_r+0x1c>
 8015472:	602b      	str	r3, [r5, #0]
 8015474:	bd38      	pop	{r3, r4, r5, pc}
 8015476:	bf00      	nop
 8015478:	2000686c 	.word	0x2000686c

0801547c <_isatty_r>:
 801547c:	b538      	push	{r3, r4, r5, lr}
 801547e:	4c06      	ldr	r4, [pc, #24]	; (8015498 <_isatty_r+0x1c>)
 8015480:	2300      	movs	r3, #0
 8015482:	4605      	mov	r5, r0
 8015484:	4608      	mov	r0, r1
 8015486:	6023      	str	r3, [r4, #0]
 8015488:	f7f0 f9bd 	bl	8005806 <_isatty>
 801548c:	1c43      	adds	r3, r0, #1
 801548e:	d102      	bne.n	8015496 <_isatty_r+0x1a>
 8015490:	6823      	ldr	r3, [r4, #0]
 8015492:	b103      	cbz	r3, 8015496 <_isatty_r+0x1a>
 8015494:	602b      	str	r3, [r5, #0]
 8015496:	bd38      	pop	{r3, r4, r5, pc}
 8015498:	2000686c 	.word	0x2000686c

0801549c <__ascii_mbtowc>:
 801549c:	b082      	sub	sp, #8
 801549e:	b901      	cbnz	r1, 80154a2 <__ascii_mbtowc+0x6>
 80154a0:	a901      	add	r1, sp, #4
 80154a2:	b142      	cbz	r2, 80154b6 <__ascii_mbtowc+0x1a>
 80154a4:	b14b      	cbz	r3, 80154ba <__ascii_mbtowc+0x1e>
 80154a6:	7813      	ldrb	r3, [r2, #0]
 80154a8:	600b      	str	r3, [r1, #0]
 80154aa:	7812      	ldrb	r2, [r2, #0]
 80154ac:	1c10      	adds	r0, r2, #0
 80154ae:	bf18      	it	ne
 80154b0:	2001      	movne	r0, #1
 80154b2:	b002      	add	sp, #8
 80154b4:	4770      	bx	lr
 80154b6:	4610      	mov	r0, r2
 80154b8:	e7fb      	b.n	80154b2 <__ascii_mbtowc+0x16>
 80154ba:	f06f 0001 	mvn.w	r0, #1
 80154be:	e7f8      	b.n	80154b2 <__ascii_mbtowc+0x16>

080154c0 <_malloc_usable_size_r>:
 80154c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154c4:	1f18      	subs	r0, r3, #4
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	bfbc      	itt	lt
 80154ca:	580b      	ldrlt	r3, [r1, r0]
 80154cc:	18c0      	addlt	r0, r0, r3
 80154ce:	4770      	bx	lr

080154d0 <__ascii_wctomb>:
 80154d0:	b149      	cbz	r1, 80154e6 <__ascii_wctomb+0x16>
 80154d2:	2aff      	cmp	r2, #255	; 0xff
 80154d4:	bf85      	ittet	hi
 80154d6:	238a      	movhi	r3, #138	; 0x8a
 80154d8:	6003      	strhi	r3, [r0, #0]
 80154da:	700a      	strbls	r2, [r1, #0]
 80154dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80154e0:	bf98      	it	ls
 80154e2:	2001      	movls	r0, #1
 80154e4:	4770      	bx	lr
 80154e6:	4608      	mov	r0, r1
 80154e8:	4770      	bx	lr
 80154ea:	0000      	movs	r0, r0
 80154ec:	0000      	movs	r0, r0
	...

080154f0 <cos>:
 80154f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80154f2:	ec51 0b10 	vmov	r0, r1, d0
 80154f6:	4a1e      	ldr	r2, [pc, #120]	; (8015570 <cos+0x80>)
 80154f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80154fc:	4293      	cmp	r3, r2
 80154fe:	dc06      	bgt.n	801550e <cos+0x1e>
 8015500:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8015568 <cos+0x78>
 8015504:	f001 fb3c 	bl	8016b80 <__kernel_cos>
 8015508:	ec51 0b10 	vmov	r0, r1, d0
 801550c:	e007      	b.n	801551e <cos+0x2e>
 801550e:	4a19      	ldr	r2, [pc, #100]	; (8015574 <cos+0x84>)
 8015510:	4293      	cmp	r3, r2
 8015512:	dd09      	ble.n	8015528 <cos+0x38>
 8015514:	ee10 2a10 	vmov	r2, s0
 8015518:	460b      	mov	r3, r1
 801551a:	f7ea fed5 	bl	80002c8 <__aeabi_dsub>
 801551e:	ec41 0b10 	vmov	d0, r0, r1
 8015522:	b005      	add	sp, #20
 8015524:	f85d fb04 	ldr.w	pc, [sp], #4
 8015528:	4668      	mov	r0, sp
 801552a:	f000 fdc1 	bl	80160b0 <__ieee754_rem_pio2>
 801552e:	f000 0003 	and.w	r0, r0, #3
 8015532:	2801      	cmp	r0, #1
 8015534:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015538:	ed9d 0b00 	vldr	d0, [sp]
 801553c:	d007      	beq.n	801554e <cos+0x5e>
 801553e:	2802      	cmp	r0, #2
 8015540:	d00e      	beq.n	8015560 <cos+0x70>
 8015542:	2800      	cmp	r0, #0
 8015544:	d0de      	beq.n	8015504 <cos+0x14>
 8015546:	2001      	movs	r0, #1
 8015548:	f001 ff22 	bl	8017390 <__kernel_sin>
 801554c:	e7dc      	b.n	8015508 <cos+0x18>
 801554e:	f001 ff1f 	bl	8017390 <__kernel_sin>
 8015552:	ec53 2b10 	vmov	r2, r3, d0
 8015556:	ee10 0a10 	vmov	r0, s0
 801555a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801555e:	e7de      	b.n	801551e <cos+0x2e>
 8015560:	f001 fb0e 	bl	8016b80 <__kernel_cos>
 8015564:	e7f5      	b.n	8015552 <cos+0x62>
 8015566:	bf00      	nop
	...
 8015570:	3fe921fb 	.word	0x3fe921fb
 8015574:	7fefffff 	.word	0x7fefffff

08015578 <round>:
 8015578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801557a:	ec57 6b10 	vmov	r6, r7, d0
 801557e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015582:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015586:	2c13      	cmp	r4, #19
 8015588:	463b      	mov	r3, r7
 801558a:	463d      	mov	r5, r7
 801558c:	dc17      	bgt.n	80155be <round+0x46>
 801558e:	2c00      	cmp	r4, #0
 8015590:	da09      	bge.n	80155a6 <round+0x2e>
 8015592:	3401      	adds	r4, #1
 8015594:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015598:	d103      	bne.n	80155a2 <round+0x2a>
 801559a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801559e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80155a2:	2100      	movs	r1, #0
 80155a4:	e02c      	b.n	8015600 <round+0x88>
 80155a6:	4a18      	ldr	r2, [pc, #96]	; (8015608 <round+0x90>)
 80155a8:	4122      	asrs	r2, r4
 80155aa:	4217      	tst	r7, r2
 80155ac:	d100      	bne.n	80155b0 <round+0x38>
 80155ae:	b19e      	cbz	r6, 80155d8 <round+0x60>
 80155b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80155b4:	4123      	asrs	r3, r4
 80155b6:	442b      	add	r3, r5
 80155b8:	ea23 0302 	bic.w	r3, r3, r2
 80155bc:	e7f1      	b.n	80155a2 <round+0x2a>
 80155be:	2c33      	cmp	r4, #51	; 0x33
 80155c0:	dd0d      	ble.n	80155de <round+0x66>
 80155c2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80155c6:	d107      	bne.n	80155d8 <round+0x60>
 80155c8:	4630      	mov	r0, r6
 80155ca:	4639      	mov	r1, r7
 80155cc:	ee10 2a10 	vmov	r2, s0
 80155d0:	f7ea fe7c 	bl	80002cc <__adddf3>
 80155d4:	4606      	mov	r6, r0
 80155d6:	460f      	mov	r7, r1
 80155d8:	ec47 6b10 	vmov	d0, r6, r7
 80155dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155de:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80155e2:	f04f 30ff 	mov.w	r0, #4294967295
 80155e6:	40d0      	lsrs	r0, r2
 80155e8:	4206      	tst	r6, r0
 80155ea:	d0f5      	beq.n	80155d8 <round+0x60>
 80155ec:	2201      	movs	r2, #1
 80155ee:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80155f2:	fa02 f404 	lsl.w	r4, r2, r4
 80155f6:	1931      	adds	r1, r6, r4
 80155f8:	bf28      	it	cs
 80155fa:	189b      	addcs	r3, r3, r2
 80155fc:	ea21 0100 	bic.w	r1, r1, r0
 8015600:	461f      	mov	r7, r3
 8015602:	460e      	mov	r6, r1
 8015604:	e7e8      	b.n	80155d8 <round+0x60>
 8015606:	bf00      	nop
 8015608:	000fffff 	.word	0x000fffff
 801560c:	00000000 	.word	0x00000000

08015610 <sin>:
 8015610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015612:	ec51 0b10 	vmov	r0, r1, d0
 8015616:	4a20      	ldr	r2, [pc, #128]	; (8015698 <sin+0x88>)
 8015618:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801561c:	4293      	cmp	r3, r2
 801561e:	dc07      	bgt.n	8015630 <sin+0x20>
 8015620:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8015690 <sin+0x80>
 8015624:	2000      	movs	r0, #0
 8015626:	f001 feb3 	bl	8017390 <__kernel_sin>
 801562a:	ec51 0b10 	vmov	r0, r1, d0
 801562e:	e007      	b.n	8015640 <sin+0x30>
 8015630:	4a1a      	ldr	r2, [pc, #104]	; (801569c <sin+0x8c>)
 8015632:	4293      	cmp	r3, r2
 8015634:	dd09      	ble.n	801564a <sin+0x3a>
 8015636:	ee10 2a10 	vmov	r2, s0
 801563a:	460b      	mov	r3, r1
 801563c:	f7ea fe44 	bl	80002c8 <__aeabi_dsub>
 8015640:	ec41 0b10 	vmov	d0, r0, r1
 8015644:	b005      	add	sp, #20
 8015646:	f85d fb04 	ldr.w	pc, [sp], #4
 801564a:	4668      	mov	r0, sp
 801564c:	f000 fd30 	bl	80160b0 <__ieee754_rem_pio2>
 8015650:	f000 0003 	and.w	r0, r0, #3
 8015654:	2801      	cmp	r0, #1
 8015656:	ed9d 1b02 	vldr	d1, [sp, #8]
 801565a:	ed9d 0b00 	vldr	d0, [sp]
 801565e:	d004      	beq.n	801566a <sin+0x5a>
 8015660:	2802      	cmp	r0, #2
 8015662:	d005      	beq.n	8015670 <sin+0x60>
 8015664:	b970      	cbnz	r0, 8015684 <sin+0x74>
 8015666:	2001      	movs	r0, #1
 8015668:	e7dd      	b.n	8015626 <sin+0x16>
 801566a:	f001 fa89 	bl	8016b80 <__kernel_cos>
 801566e:	e7dc      	b.n	801562a <sin+0x1a>
 8015670:	2001      	movs	r0, #1
 8015672:	f001 fe8d 	bl	8017390 <__kernel_sin>
 8015676:	ec53 2b10 	vmov	r2, r3, d0
 801567a:	ee10 0a10 	vmov	r0, s0
 801567e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015682:	e7dd      	b.n	8015640 <sin+0x30>
 8015684:	f001 fa7c 	bl	8016b80 <__kernel_cos>
 8015688:	e7f5      	b.n	8015676 <sin+0x66>
 801568a:	bf00      	nop
 801568c:	f3af 8000 	nop.w
	...
 8015698:	3fe921fb 	.word	0x3fe921fb
 801569c:	7fefffff 	.word	0x7fefffff

080156a0 <asin>:
 80156a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156a2:	ed2d 8b02 	vpush	{d8}
 80156a6:	4e26      	ldr	r6, [pc, #152]	; (8015740 <asin+0xa0>)
 80156a8:	b08b      	sub	sp, #44	; 0x2c
 80156aa:	ec55 4b10 	vmov	r4, r5, d0
 80156ae:	f000 fa0f 	bl	8015ad0 <__ieee754_asin>
 80156b2:	f996 3000 	ldrsb.w	r3, [r6]
 80156b6:	eeb0 8a40 	vmov.f32	s16, s0
 80156ba:	eef0 8a60 	vmov.f32	s17, s1
 80156be:	3301      	adds	r3, #1
 80156c0:	d036      	beq.n	8015730 <asin+0x90>
 80156c2:	4622      	mov	r2, r4
 80156c4:	462b      	mov	r3, r5
 80156c6:	4620      	mov	r0, r4
 80156c8:	4629      	mov	r1, r5
 80156ca:	f7eb fa4f 	bl	8000b6c <__aeabi_dcmpun>
 80156ce:	4607      	mov	r7, r0
 80156d0:	bb70      	cbnz	r0, 8015730 <asin+0x90>
 80156d2:	ec45 4b10 	vmov	d0, r4, r5
 80156d6:	f002 f8b7 	bl	8017848 <fabs>
 80156da:	2200      	movs	r2, #0
 80156dc:	4b19      	ldr	r3, [pc, #100]	; (8015744 <asin+0xa4>)
 80156de:	ec51 0b10 	vmov	r0, r1, d0
 80156e2:	f7eb fa39 	bl	8000b58 <__aeabi_dcmpgt>
 80156e6:	b318      	cbz	r0, 8015730 <asin+0x90>
 80156e8:	2301      	movs	r3, #1
 80156ea:	9300      	str	r3, [sp, #0]
 80156ec:	4816      	ldr	r0, [pc, #88]	; (8015748 <asin+0xa8>)
 80156ee:	4b17      	ldr	r3, [pc, #92]	; (801574c <asin+0xac>)
 80156f0:	9301      	str	r3, [sp, #4]
 80156f2:	9708      	str	r7, [sp, #32]
 80156f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80156f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80156fc:	f002 f938 	bl	8017970 <nan>
 8015700:	f996 3000 	ldrsb.w	r3, [r6]
 8015704:	2b02      	cmp	r3, #2
 8015706:	ed8d 0b06 	vstr	d0, [sp, #24]
 801570a:	d104      	bne.n	8015716 <asin+0x76>
 801570c:	f7fd f948 	bl	80129a0 <__errno>
 8015710:	2321      	movs	r3, #33	; 0x21
 8015712:	6003      	str	r3, [r0, #0]
 8015714:	e004      	b.n	8015720 <asin+0x80>
 8015716:	4668      	mov	r0, sp
 8015718:	f002 f926 	bl	8017968 <matherr>
 801571c:	2800      	cmp	r0, #0
 801571e:	d0f5      	beq.n	801570c <asin+0x6c>
 8015720:	9b08      	ldr	r3, [sp, #32]
 8015722:	b11b      	cbz	r3, 801572c <asin+0x8c>
 8015724:	f7fd f93c 	bl	80129a0 <__errno>
 8015728:	9b08      	ldr	r3, [sp, #32]
 801572a:	6003      	str	r3, [r0, #0]
 801572c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8015730:	eeb0 0a48 	vmov.f32	s0, s16
 8015734:	eef0 0a68 	vmov.f32	s1, s17
 8015738:	b00b      	add	sp, #44	; 0x2c
 801573a:	ecbd 8b02 	vpop	{d8}
 801573e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015740:	20000604 	.word	0x20000604
 8015744:	3ff00000 	.word	0x3ff00000
 8015748:	0801836b 	.word	0x0801836b
 801574c:	0801862f 	.word	0x0801862f

08015750 <atan2>:
 8015750:	f000 bbce 	b.w	8015ef0 <__ieee754_atan2>

08015754 <sqrt>:
 8015754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015758:	ed2d 8b02 	vpush	{d8}
 801575c:	b08b      	sub	sp, #44	; 0x2c
 801575e:	ec55 4b10 	vmov	r4, r5, d0
 8015762:	f000 fe97 	bl	8016494 <__ieee754_sqrt>
 8015766:	4b26      	ldr	r3, [pc, #152]	; (8015800 <sqrt+0xac>)
 8015768:	eeb0 8a40 	vmov.f32	s16, s0
 801576c:	eef0 8a60 	vmov.f32	s17, s1
 8015770:	f993 6000 	ldrsb.w	r6, [r3]
 8015774:	1c73      	adds	r3, r6, #1
 8015776:	d02a      	beq.n	80157ce <sqrt+0x7a>
 8015778:	4622      	mov	r2, r4
 801577a:	462b      	mov	r3, r5
 801577c:	4620      	mov	r0, r4
 801577e:	4629      	mov	r1, r5
 8015780:	f7eb f9f4 	bl	8000b6c <__aeabi_dcmpun>
 8015784:	4607      	mov	r7, r0
 8015786:	bb10      	cbnz	r0, 80157ce <sqrt+0x7a>
 8015788:	f04f 0800 	mov.w	r8, #0
 801578c:	f04f 0900 	mov.w	r9, #0
 8015790:	4642      	mov	r2, r8
 8015792:	464b      	mov	r3, r9
 8015794:	4620      	mov	r0, r4
 8015796:	4629      	mov	r1, r5
 8015798:	f7eb f9c0 	bl	8000b1c <__aeabi_dcmplt>
 801579c:	b1b8      	cbz	r0, 80157ce <sqrt+0x7a>
 801579e:	2301      	movs	r3, #1
 80157a0:	9300      	str	r3, [sp, #0]
 80157a2:	4b18      	ldr	r3, [pc, #96]	; (8015804 <sqrt+0xb0>)
 80157a4:	9301      	str	r3, [sp, #4]
 80157a6:	9708      	str	r7, [sp, #32]
 80157a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80157ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80157b0:	b9b6      	cbnz	r6, 80157e0 <sqrt+0x8c>
 80157b2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80157b6:	4668      	mov	r0, sp
 80157b8:	f002 f8d6 	bl	8017968 <matherr>
 80157bc:	b1d0      	cbz	r0, 80157f4 <sqrt+0xa0>
 80157be:	9b08      	ldr	r3, [sp, #32]
 80157c0:	b11b      	cbz	r3, 80157ca <sqrt+0x76>
 80157c2:	f7fd f8ed 	bl	80129a0 <__errno>
 80157c6:	9b08      	ldr	r3, [sp, #32]
 80157c8:	6003      	str	r3, [r0, #0]
 80157ca:	ed9d 8b06 	vldr	d8, [sp, #24]
 80157ce:	eeb0 0a48 	vmov.f32	s0, s16
 80157d2:	eef0 0a68 	vmov.f32	s1, s17
 80157d6:	b00b      	add	sp, #44	; 0x2c
 80157d8:	ecbd 8b02 	vpop	{d8}
 80157dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157e0:	4642      	mov	r2, r8
 80157e2:	464b      	mov	r3, r9
 80157e4:	4640      	mov	r0, r8
 80157e6:	4649      	mov	r1, r9
 80157e8:	f7eb f850 	bl	800088c <__aeabi_ddiv>
 80157ec:	2e02      	cmp	r6, #2
 80157ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80157f2:	d1e0      	bne.n	80157b6 <sqrt+0x62>
 80157f4:	f7fd f8d4 	bl	80129a0 <__errno>
 80157f8:	2321      	movs	r3, #33	; 0x21
 80157fa:	6003      	str	r3, [r0, #0]
 80157fc:	e7df      	b.n	80157be <sqrt+0x6a>
 80157fe:	bf00      	nop
 8015800:	20000604 	.word	0x20000604
 8015804:	08018634 	.word	0x08018634

08015808 <powf>:
 8015808:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801580c:	ed2d 8b04 	vpush	{d8-d9}
 8015810:	4ca7      	ldr	r4, [pc, #668]	; (8015ab0 <powf+0x2a8>)
 8015812:	b08a      	sub	sp, #40	; 0x28
 8015814:	eef0 8a40 	vmov.f32	s17, s0
 8015818:	eeb0 8a60 	vmov.f32	s16, s1
 801581c:	f000 feea 	bl	80165f4 <__ieee754_powf>
 8015820:	f994 5000 	ldrsb.w	r5, [r4]
 8015824:	1c6b      	adds	r3, r5, #1
 8015826:	eeb0 9a40 	vmov.f32	s18, s0
 801582a:	4626      	mov	r6, r4
 801582c:	d05f      	beq.n	80158ee <powf+0xe6>
 801582e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015836:	d65a      	bvs.n	80158ee <powf+0xe6>
 8015838:	eef4 8a68 	vcmp.f32	s17, s17
 801583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015840:	d721      	bvc.n	8015886 <powf+0x7e>
 8015842:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801584a:	d150      	bne.n	80158ee <powf+0xe6>
 801584c:	2301      	movs	r3, #1
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	4b98      	ldr	r3, [pc, #608]	; (8015ab4 <powf+0x2ac>)
 8015852:	9301      	str	r3, [sp, #4]
 8015854:	ee18 0a90 	vmov	r0, s17
 8015858:	2300      	movs	r3, #0
 801585a:	9308      	str	r3, [sp, #32]
 801585c:	f7ea fe94 	bl	8000588 <__aeabi_f2d>
 8015860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015864:	ee18 0a10 	vmov	r0, s16
 8015868:	f7ea fe8e 	bl	8000588 <__aeabi_f2d>
 801586c:	4b92      	ldr	r3, [pc, #584]	; (8015ab8 <powf+0x2b0>)
 801586e:	2200      	movs	r2, #0
 8015870:	2d02      	cmp	r5, #2
 8015872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015876:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801587a:	d032      	beq.n	80158e2 <powf+0xda>
 801587c:	4668      	mov	r0, sp
 801587e:	f002 f873 	bl	8017968 <matherr>
 8015882:	bb40      	cbnz	r0, 80158d6 <powf+0xce>
 8015884:	e065      	b.n	8015952 <powf+0x14a>
 8015886:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8015abc <powf+0x2b4>
 801588a:	eef4 8a69 	vcmp.f32	s17, s19
 801588e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015892:	d163      	bne.n	801595c <powf+0x154>
 8015894:	eeb4 8a69 	vcmp.f32	s16, s19
 8015898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801589c:	d12e      	bne.n	80158fc <powf+0xf4>
 801589e:	2301      	movs	r3, #1
 80158a0:	9300      	str	r3, [sp, #0]
 80158a2:	4b84      	ldr	r3, [pc, #528]	; (8015ab4 <powf+0x2ac>)
 80158a4:	9301      	str	r3, [sp, #4]
 80158a6:	ee18 0a90 	vmov	r0, s17
 80158aa:	2300      	movs	r3, #0
 80158ac:	9308      	str	r3, [sp, #32]
 80158ae:	f7ea fe6b 	bl	8000588 <__aeabi_f2d>
 80158b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158b6:	ee18 0a10 	vmov	r0, s16
 80158ba:	f7ea fe65 	bl	8000588 <__aeabi_f2d>
 80158be:	2200      	movs	r2, #0
 80158c0:	2300      	movs	r3, #0
 80158c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80158ca:	2d00      	cmp	r5, #0
 80158cc:	d0d6      	beq.n	801587c <powf+0x74>
 80158ce:	4b7a      	ldr	r3, [pc, #488]	; (8015ab8 <powf+0x2b0>)
 80158d0:	2200      	movs	r2, #0
 80158d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80158d6:	9b08      	ldr	r3, [sp, #32]
 80158d8:	b11b      	cbz	r3, 80158e2 <powf+0xda>
 80158da:	f7fd f861 	bl	80129a0 <__errno>
 80158de:	9b08      	ldr	r3, [sp, #32]
 80158e0:	6003      	str	r3, [r0, #0]
 80158e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80158e6:	f7eb f99f 	bl	8000c28 <__aeabi_d2f>
 80158ea:	ee09 0a10 	vmov	s18, r0
 80158ee:	eeb0 0a49 	vmov.f32	s0, s18
 80158f2:	b00a      	add	sp, #40	; 0x28
 80158f4:	ecbd 8b04 	vpop	{d8-d9}
 80158f8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80158fc:	eeb0 0a48 	vmov.f32	s0, s16
 8015900:	f002 f8bb 	bl	8017a7a <finitef>
 8015904:	2800      	cmp	r0, #0
 8015906:	d0f2      	beq.n	80158ee <powf+0xe6>
 8015908:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015910:	d5ed      	bpl.n	80158ee <powf+0xe6>
 8015912:	2301      	movs	r3, #1
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	4b67      	ldr	r3, [pc, #412]	; (8015ab4 <powf+0x2ac>)
 8015918:	9301      	str	r3, [sp, #4]
 801591a:	ee18 0a90 	vmov	r0, s17
 801591e:	2300      	movs	r3, #0
 8015920:	9308      	str	r3, [sp, #32]
 8015922:	f7ea fe31 	bl	8000588 <__aeabi_f2d>
 8015926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801592a:	ee18 0a10 	vmov	r0, s16
 801592e:	f7ea fe2b 	bl	8000588 <__aeabi_f2d>
 8015932:	f994 3000 	ldrsb.w	r3, [r4]
 8015936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801593a:	b923      	cbnz	r3, 8015946 <powf+0x13e>
 801593c:	2200      	movs	r2, #0
 801593e:	2300      	movs	r3, #0
 8015940:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015944:	e79a      	b.n	801587c <powf+0x74>
 8015946:	495e      	ldr	r1, [pc, #376]	; (8015ac0 <powf+0x2b8>)
 8015948:	2000      	movs	r0, #0
 801594a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801594e:	2b02      	cmp	r3, #2
 8015950:	d194      	bne.n	801587c <powf+0x74>
 8015952:	f7fd f825 	bl	80129a0 <__errno>
 8015956:	2321      	movs	r3, #33	; 0x21
 8015958:	6003      	str	r3, [r0, #0]
 801595a:	e7bc      	b.n	80158d6 <powf+0xce>
 801595c:	f002 f88d 	bl	8017a7a <finitef>
 8015960:	4605      	mov	r5, r0
 8015962:	2800      	cmp	r0, #0
 8015964:	d173      	bne.n	8015a4e <powf+0x246>
 8015966:	eeb0 0a68 	vmov.f32	s0, s17
 801596a:	f002 f886 	bl	8017a7a <finitef>
 801596e:	2800      	cmp	r0, #0
 8015970:	d06d      	beq.n	8015a4e <powf+0x246>
 8015972:	eeb0 0a48 	vmov.f32	s0, s16
 8015976:	f002 f880 	bl	8017a7a <finitef>
 801597a:	2800      	cmp	r0, #0
 801597c:	d067      	beq.n	8015a4e <powf+0x246>
 801597e:	ee18 0a90 	vmov	r0, s17
 8015982:	f7ea fe01 	bl	8000588 <__aeabi_f2d>
 8015986:	4680      	mov	r8, r0
 8015988:	ee18 0a10 	vmov	r0, s16
 801598c:	4689      	mov	r9, r1
 801598e:	f7ea fdfb 	bl	8000588 <__aeabi_f2d>
 8015992:	eeb4 9a49 	vcmp.f32	s18, s18
 8015996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801599a:	f994 4000 	ldrsb.w	r4, [r4]
 801599e:	4b45      	ldr	r3, [pc, #276]	; (8015ab4 <powf+0x2ac>)
 80159a0:	d713      	bvc.n	80159ca <powf+0x1c2>
 80159a2:	2201      	movs	r2, #1
 80159a4:	e9cd 2300 	strd	r2, r3, [sp]
 80159a8:	9508      	str	r5, [sp, #32]
 80159aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80159ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80159b2:	2c00      	cmp	r4, #0
 80159b4:	d0c2      	beq.n	801593c <powf+0x134>
 80159b6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80159ba:	ee17 0a90 	vmov	r0, s15
 80159be:	f7ea fde3 	bl	8000588 <__aeabi_f2d>
 80159c2:	2c02      	cmp	r4, #2
 80159c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80159c8:	e7c2      	b.n	8015950 <powf+0x148>
 80159ca:	2203      	movs	r2, #3
 80159cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80159d0:	e9cd 2300 	strd	r2, r3, [sp]
 80159d4:	9508      	str	r5, [sp, #32]
 80159d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80159da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80159de:	ee28 8a27 	vmul.f32	s16, s16, s15
 80159e2:	b9fc      	cbnz	r4, 8015a24 <powf+0x21c>
 80159e4:	4b37      	ldr	r3, [pc, #220]	; (8015ac4 <powf+0x2bc>)
 80159e6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80159ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80159ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80159f6:	d553      	bpl.n	8015aa0 <powf+0x298>
 80159f8:	eeb0 0a48 	vmov.f32	s0, s16
 80159fc:	f002 f84e 	bl	8017a9c <rintf>
 8015a00:	eeb4 0a48 	vcmp.f32	s0, s16
 8015a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a08:	d004      	beq.n	8015a14 <powf+0x20c>
 8015a0a:	4b2f      	ldr	r3, [pc, #188]	; (8015ac8 <powf+0x2c0>)
 8015a0c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a14:	f996 3000 	ldrsb.w	r3, [r6]
 8015a18:	2b02      	cmp	r3, #2
 8015a1a:	d141      	bne.n	8015aa0 <powf+0x298>
 8015a1c:	f7fc ffc0 	bl	80129a0 <__errno>
 8015a20:	2322      	movs	r3, #34	; 0x22
 8015a22:	e799      	b.n	8015958 <powf+0x150>
 8015a24:	4b29      	ldr	r3, [pc, #164]	; (8015acc <powf+0x2c4>)
 8015a26:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a34:	d5ee      	bpl.n	8015a14 <powf+0x20c>
 8015a36:	eeb0 0a48 	vmov.f32	s0, s16
 8015a3a:	f002 f82f 	bl	8017a9c <rintf>
 8015a3e:	eeb4 0a48 	vcmp.f32	s0, s16
 8015a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a46:	d0e5      	beq.n	8015a14 <powf+0x20c>
 8015a48:	2200      	movs	r2, #0
 8015a4a:	4b1d      	ldr	r3, [pc, #116]	; (8015ac0 <powf+0x2b8>)
 8015a4c:	e7e0      	b.n	8015a10 <powf+0x208>
 8015a4e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a56:	f47f af4a 	bne.w	80158ee <powf+0xe6>
 8015a5a:	eeb0 0a68 	vmov.f32	s0, s17
 8015a5e:	f002 f80c 	bl	8017a7a <finitef>
 8015a62:	2800      	cmp	r0, #0
 8015a64:	f43f af43 	beq.w	80158ee <powf+0xe6>
 8015a68:	eeb0 0a48 	vmov.f32	s0, s16
 8015a6c:	f002 f805 	bl	8017a7a <finitef>
 8015a70:	2800      	cmp	r0, #0
 8015a72:	f43f af3c 	beq.w	80158ee <powf+0xe6>
 8015a76:	2304      	movs	r3, #4
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	4b0e      	ldr	r3, [pc, #56]	; (8015ab4 <powf+0x2ac>)
 8015a7c:	9301      	str	r3, [sp, #4]
 8015a7e:	ee18 0a90 	vmov	r0, s17
 8015a82:	2300      	movs	r3, #0
 8015a84:	9308      	str	r3, [sp, #32]
 8015a86:	f7ea fd7f 	bl	8000588 <__aeabi_f2d>
 8015a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a8e:	ee18 0a10 	vmov	r0, s16
 8015a92:	f7ea fd79 	bl	8000588 <__aeabi_f2d>
 8015a96:	2200      	movs	r2, #0
 8015a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	e7b7      	b.n	8015a10 <powf+0x208>
 8015aa0:	4668      	mov	r0, sp
 8015aa2:	f001 ff61 	bl	8017968 <matherr>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	f47f af15 	bne.w	80158d6 <powf+0xce>
 8015aac:	e7b6      	b.n	8015a1c <powf+0x214>
 8015aae:	bf00      	nop
 8015ab0:	20000604 	.word	0x20000604
 8015ab4:	08018639 	.word	0x08018639
 8015ab8:	3ff00000 	.word	0x3ff00000
 8015abc:	00000000 	.word	0x00000000
 8015ac0:	fff00000 	.word	0xfff00000
 8015ac4:	47efffff 	.word	0x47efffff
 8015ac8:	c7efffff 	.word	0xc7efffff
 8015acc:	7ff00000 	.word	0x7ff00000

08015ad0 <__ieee754_asin>:
 8015ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad4:	ec55 4b10 	vmov	r4, r5, d0
 8015ad8:	4bcb      	ldr	r3, [pc, #812]	; (8015e08 <__ieee754_asin+0x338>)
 8015ada:	b087      	sub	sp, #28
 8015adc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8015ae0:	429f      	cmp	r7, r3
 8015ae2:	9501      	str	r5, [sp, #4]
 8015ae4:	dd31      	ble.n	8015b4a <__ieee754_asin+0x7a>
 8015ae6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8015aea:	ee10 3a10 	vmov	r3, s0
 8015aee:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8015af2:	433b      	orrs	r3, r7
 8015af4:	d117      	bne.n	8015b26 <__ieee754_asin+0x56>
 8015af6:	a3aa      	add	r3, pc, #680	; (adr r3, 8015da0 <__ieee754_asin+0x2d0>)
 8015af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afc:	ee10 0a10 	vmov	r0, s0
 8015b00:	4629      	mov	r1, r5
 8015b02:	f7ea fd99 	bl	8000638 <__aeabi_dmul>
 8015b06:	a3a8      	add	r3, pc, #672	; (adr r3, 8015da8 <__ieee754_asin+0x2d8>)
 8015b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0c:	4606      	mov	r6, r0
 8015b0e:	460f      	mov	r7, r1
 8015b10:	4620      	mov	r0, r4
 8015b12:	4629      	mov	r1, r5
 8015b14:	f7ea fd90 	bl	8000638 <__aeabi_dmul>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	460b      	mov	r3, r1
 8015b1c:	4630      	mov	r0, r6
 8015b1e:	4639      	mov	r1, r7
 8015b20:	f7ea fbd4 	bl	80002cc <__adddf3>
 8015b24:	e00a      	b.n	8015b3c <__ieee754_asin+0x6c>
 8015b26:	ee10 2a10 	vmov	r2, s0
 8015b2a:	462b      	mov	r3, r5
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	4629      	mov	r1, r5
 8015b30:	f7ea fbca 	bl	80002c8 <__aeabi_dsub>
 8015b34:	4602      	mov	r2, r0
 8015b36:	460b      	mov	r3, r1
 8015b38:	f7ea fea8 	bl	800088c <__aeabi_ddiv>
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	460d      	mov	r5, r1
 8015b40:	ec45 4b10 	vmov	d0, r4, r5
 8015b44:	b007      	add	sp, #28
 8015b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b4a:	4bb0      	ldr	r3, [pc, #704]	; (8015e0c <__ieee754_asin+0x33c>)
 8015b4c:	429f      	cmp	r7, r3
 8015b4e:	dc11      	bgt.n	8015b74 <__ieee754_asin+0xa4>
 8015b50:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8015b54:	f280 80ae 	bge.w	8015cb4 <__ieee754_asin+0x1e4>
 8015b58:	a395      	add	r3, pc, #596	; (adr r3, 8015db0 <__ieee754_asin+0x2e0>)
 8015b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5e:	ee10 0a10 	vmov	r0, s0
 8015b62:	4629      	mov	r1, r5
 8015b64:	f7ea fbb2 	bl	80002cc <__adddf3>
 8015b68:	2200      	movs	r2, #0
 8015b6a:	4ba9      	ldr	r3, [pc, #676]	; (8015e10 <__ieee754_asin+0x340>)
 8015b6c:	f7ea fff4 	bl	8000b58 <__aeabi_dcmpgt>
 8015b70:	2800      	cmp	r0, #0
 8015b72:	d1e5      	bne.n	8015b40 <__ieee754_asin+0x70>
 8015b74:	ec45 4b10 	vmov	d0, r4, r5
 8015b78:	f001 fe66 	bl	8017848 <fabs>
 8015b7c:	2000      	movs	r0, #0
 8015b7e:	ec53 2b10 	vmov	r2, r3, d0
 8015b82:	49a3      	ldr	r1, [pc, #652]	; (8015e10 <__ieee754_asin+0x340>)
 8015b84:	f7ea fba0 	bl	80002c8 <__aeabi_dsub>
 8015b88:	2200      	movs	r2, #0
 8015b8a:	4ba2      	ldr	r3, [pc, #648]	; (8015e14 <__ieee754_asin+0x344>)
 8015b8c:	f7ea fd54 	bl	8000638 <__aeabi_dmul>
 8015b90:	a389      	add	r3, pc, #548	; (adr r3, 8015db8 <__ieee754_asin+0x2e8>)
 8015b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b96:	4604      	mov	r4, r0
 8015b98:	460d      	mov	r5, r1
 8015b9a:	f7ea fd4d 	bl	8000638 <__aeabi_dmul>
 8015b9e:	a388      	add	r3, pc, #544	; (adr r3, 8015dc0 <__ieee754_asin+0x2f0>)
 8015ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba4:	f7ea fb92 	bl	80002cc <__adddf3>
 8015ba8:	4622      	mov	r2, r4
 8015baa:	462b      	mov	r3, r5
 8015bac:	f7ea fd44 	bl	8000638 <__aeabi_dmul>
 8015bb0:	a385      	add	r3, pc, #532	; (adr r3, 8015dc8 <__ieee754_asin+0x2f8>)
 8015bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb6:	f7ea fb87 	bl	80002c8 <__aeabi_dsub>
 8015bba:	4622      	mov	r2, r4
 8015bbc:	462b      	mov	r3, r5
 8015bbe:	f7ea fd3b 	bl	8000638 <__aeabi_dmul>
 8015bc2:	a383      	add	r3, pc, #524	; (adr r3, 8015dd0 <__ieee754_asin+0x300>)
 8015bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc8:	f7ea fb80 	bl	80002cc <__adddf3>
 8015bcc:	4622      	mov	r2, r4
 8015bce:	462b      	mov	r3, r5
 8015bd0:	f7ea fd32 	bl	8000638 <__aeabi_dmul>
 8015bd4:	a380      	add	r3, pc, #512	; (adr r3, 8015dd8 <__ieee754_asin+0x308>)
 8015bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bda:	f7ea fb75 	bl	80002c8 <__aeabi_dsub>
 8015bde:	4622      	mov	r2, r4
 8015be0:	462b      	mov	r3, r5
 8015be2:	f7ea fd29 	bl	8000638 <__aeabi_dmul>
 8015be6:	a37e      	add	r3, pc, #504	; (adr r3, 8015de0 <__ieee754_asin+0x310>)
 8015be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bec:	f7ea fb6e 	bl	80002cc <__adddf3>
 8015bf0:	4622      	mov	r2, r4
 8015bf2:	462b      	mov	r3, r5
 8015bf4:	f7ea fd20 	bl	8000638 <__aeabi_dmul>
 8015bf8:	a37b      	add	r3, pc, #492	; (adr r3, 8015de8 <__ieee754_asin+0x318>)
 8015bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bfe:	4680      	mov	r8, r0
 8015c00:	4689      	mov	r9, r1
 8015c02:	4620      	mov	r0, r4
 8015c04:	4629      	mov	r1, r5
 8015c06:	f7ea fd17 	bl	8000638 <__aeabi_dmul>
 8015c0a:	a379      	add	r3, pc, #484	; (adr r3, 8015df0 <__ieee754_asin+0x320>)
 8015c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c10:	f7ea fb5a 	bl	80002c8 <__aeabi_dsub>
 8015c14:	4622      	mov	r2, r4
 8015c16:	462b      	mov	r3, r5
 8015c18:	f7ea fd0e 	bl	8000638 <__aeabi_dmul>
 8015c1c:	a376      	add	r3, pc, #472	; (adr r3, 8015df8 <__ieee754_asin+0x328>)
 8015c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c22:	f7ea fb53 	bl	80002cc <__adddf3>
 8015c26:	4622      	mov	r2, r4
 8015c28:	462b      	mov	r3, r5
 8015c2a:	f7ea fd05 	bl	8000638 <__aeabi_dmul>
 8015c2e:	a374      	add	r3, pc, #464	; (adr r3, 8015e00 <__ieee754_asin+0x330>)
 8015c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c34:	f7ea fb48 	bl	80002c8 <__aeabi_dsub>
 8015c38:	4622      	mov	r2, r4
 8015c3a:	462b      	mov	r3, r5
 8015c3c:	f7ea fcfc 	bl	8000638 <__aeabi_dmul>
 8015c40:	4b73      	ldr	r3, [pc, #460]	; (8015e10 <__ieee754_asin+0x340>)
 8015c42:	2200      	movs	r2, #0
 8015c44:	f7ea fb42 	bl	80002cc <__adddf3>
 8015c48:	ec45 4b10 	vmov	d0, r4, r5
 8015c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c50:	f000 fc20 	bl	8016494 <__ieee754_sqrt>
 8015c54:	4b70      	ldr	r3, [pc, #448]	; (8015e18 <__ieee754_asin+0x348>)
 8015c56:	429f      	cmp	r7, r3
 8015c58:	ec5b ab10 	vmov	sl, fp, d0
 8015c5c:	f340 80de 	ble.w	8015e1c <__ieee754_asin+0x34c>
 8015c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c64:	4640      	mov	r0, r8
 8015c66:	4649      	mov	r1, r9
 8015c68:	f7ea fe10 	bl	800088c <__aeabi_ddiv>
 8015c6c:	4652      	mov	r2, sl
 8015c6e:	465b      	mov	r3, fp
 8015c70:	f7ea fce2 	bl	8000638 <__aeabi_dmul>
 8015c74:	4652      	mov	r2, sl
 8015c76:	465b      	mov	r3, fp
 8015c78:	f7ea fb28 	bl	80002cc <__adddf3>
 8015c7c:	4602      	mov	r2, r0
 8015c7e:	460b      	mov	r3, r1
 8015c80:	f7ea fb24 	bl	80002cc <__adddf3>
 8015c84:	a348      	add	r3, pc, #288	; (adr r3, 8015da8 <__ieee754_asin+0x2d8>)
 8015c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8a:	f7ea fb1d 	bl	80002c8 <__aeabi_dsub>
 8015c8e:	4602      	mov	r2, r0
 8015c90:	460b      	mov	r3, r1
 8015c92:	a143      	add	r1, pc, #268	; (adr r1, 8015da0 <__ieee754_asin+0x2d0>)
 8015c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c98:	f7ea fb16 	bl	80002c8 <__aeabi_dsub>
 8015c9c:	9b01      	ldr	r3, [sp, #4]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	bfdc      	itt	le
 8015ca2:	4602      	movle	r2, r0
 8015ca4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8015ca8:	4604      	mov	r4, r0
 8015caa:	460d      	mov	r5, r1
 8015cac:	bfdc      	itt	le
 8015cae:	4614      	movle	r4, r2
 8015cb0:	461d      	movle	r5, r3
 8015cb2:	e745      	b.n	8015b40 <__ieee754_asin+0x70>
 8015cb4:	ee10 2a10 	vmov	r2, s0
 8015cb8:	ee10 0a10 	vmov	r0, s0
 8015cbc:	462b      	mov	r3, r5
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	f7ea fcba 	bl	8000638 <__aeabi_dmul>
 8015cc4:	a33c      	add	r3, pc, #240	; (adr r3, 8015db8 <__ieee754_asin+0x2e8>)
 8015cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cca:	4606      	mov	r6, r0
 8015ccc:	460f      	mov	r7, r1
 8015cce:	f7ea fcb3 	bl	8000638 <__aeabi_dmul>
 8015cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8015dc0 <__ieee754_asin+0x2f0>)
 8015cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd8:	f7ea faf8 	bl	80002cc <__adddf3>
 8015cdc:	4632      	mov	r2, r6
 8015cde:	463b      	mov	r3, r7
 8015ce0:	f7ea fcaa 	bl	8000638 <__aeabi_dmul>
 8015ce4:	a338      	add	r3, pc, #224	; (adr r3, 8015dc8 <__ieee754_asin+0x2f8>)
 8015ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cea:	f7ea faed 	bl	80002c8 <__aeabi_dsub>
 8015cee:	4632      	mov	r2, r6
 8015cf0:	463b      	mov	r3, r7
 8015cf2:	f7ea fca1 	bl	8000638 <__aeabi_dmul>
 8015cf6:	a336      	add	r3, pc, #216	; (adr r3, 8015dd0 <__ieee754_asin+0x300>)
 8015cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cfc:	f7ea fae6 	bl	80002cc <__adddf3>
 8015d00:	4632      	mov	r2, r6
 8015d02:	463b      	mov	r3, r7
 8015d04:	f7ea fc98 	bl	8000638 <__aeabi_dmul>
 8015d08:	a333      	add	r3, pc, #204	; (adr r3, 8015dd8 <__ieee754_asin+0x308>)
 8015d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d0e:	f7ea fadb 	bl	80002c8 <__aeabi_dsub>
 8015d12:	4632      	mov	r2, r6
 8015d14:	463b      	mov	r3, r7
 8015d16:	f7ea fc8f 	bl	8000638 <__aeabi_dmul>
 8015d1a:	a331      	add	r3, pc, #196	; (adr r3, 8015de0 <__ieee754_asin+0x310>)
 8015d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d20:	f7ea fad4 	bl	80002cc <__adddf3>
 8015d24:	4632      	mov	r2, r6
 8015d26:	463b      	mov	r3, r7
 8015d28:	f7ea fc86 	bl	8000638 <__aeabi_dmul>
 8015d2c:	a32e      	add	r3, pc, #184	; (adr r3, 8015de8 <__ieee754_asin+0x318>)
 8015d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d32:	4680      	mov	r8, r0
 8015d34:	4689      	mov	r9, r1
 8015d36:	4630      	mov	r0, r6
 8015d38:	4639      	mov	r1, r7
 8015d3a:	f7ea fc7d 	bl	8000638 <__aeabi_dmul>
 8015d3e:	a32c      	add	r3, pc, #176	; (adr r3, 8015df0 <__ieee754_asin+0x320>)
 8015d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d44:	f7ea fac0 	bl	80002c8 <__aeabi_dsub>
 8015d48:	4632      	mov	r2, r6
 8015d4a:	463b      	mov	r3, r7
 8015d4c:	f7ea fc74 	bl	8000638 <__aeabi_dmul>
 8015d50:	a329      	add	r3, pc, #164	; (adr r3, 8015df8 <__ieee754_asin+0x328>)
 8015d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d56:	f7ea fab9 	bl	80002cc <__adddf3>
 8015d5a:	4632      	mov	r2, r6
 8015d5c:	463b      	mov	r3, r7
 8015d5e:	f7ea fc6b 	bl	8000638 <__aeabi_dmul>
 8015d62:	a327      	add	r3, pc, #156	; (adr r3, 8015e00 <__ieee754_asin+0x330>)
 8015d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d68:	f7ea faae 	bl	80002c8 <__aeabi_dsub>
 8015d6c:	4632      	mov	r2, r6
 8015d6e:	463b      	mov	r3, r7
 8015d70:	f7ea fc62 	bl	8000638 <__aeabi_dmul>
 8015d74:	2200      	movs	r2, #0
 8015d76:	4b26      	ldr	r3, [pc, #152]	; (8015e10 <__ieee754_asin+0x340>)
 8015d78:	f7ea faa8 	bl	80002cc <__adddf3>
 8015d7c:	4602      	mov	r2, r0
 8015d7e:	460b      	mov	r3, r1
 8015d80:	4640      	mov	r0, r8
 8015d82:	4649      	mov	r1, r9
 8015d84:	f7ea fd82 	bl	800088c <__aeabi_ddiv>
 8015d88:	4622      	mov	r2, r4
 8015d8a:	462b      	mov	r3, r5
 8015d8c:	f7ea fc54 	bl	8000638 <__aeabi_dmul>
 8015d90:	4602      	mov	r2, r0
 8015d92:	460b      	mov	r3, r1
 8015d94:	4620      	mov	r0, r4
 8015d96:	4629      	mov	r1, r5
 8015d98:	e6c2      	b.n	8015b20 <__ieee754_asin+0x50>
 8015d9a:	bf00      	nop
 8015d9c:	f3af 8000 	nop.w
 8015da0:	54442d18 	.word	0x54442d18
 8015da4:	3ff921fb 	.word	0x3ff921fb
 8015da8:	33145c07 	.word	0x33145c07
 8015dac:	3c91a626 	.word	0x3c91a626
 8015db0:	8800759c 	.word	0x8800759c
 8015db4:	7e37e43c 	.word	0x7e37e43c
 8015db8:	0dfdf709 	.word	0x0dfdf709
 8015dbc:	3f023de1 	.word	0x3f023de1
 8015dc0:	7501b288 	.word	0x7501b288
 8015dc4:	3f49efe0 	.word	0x3f49efe0
 8015dc8:	b5688f3b 	.word	0xb5688f3b
 8015dcc:	3fa48228 	.word	0x3fa48228
 8015dd0:	0e884455 	.word	0x0e884455
 8015dd4:	3fc9c155 	.word	0x3fc9c155
 8015dd8:	03eb6f7d 	.word	0x03eb6f7d
 8015ddc:	3fd4d612 	.word	0x3fd4d612
 8015de0:	55555555 	.word	0x55555555
 8015de4:	3fc55555 	.word	0x3fc55555
 8015de8:	b12e9282 	.word	0xb12e9282
 8015dec:	3fb3b8c5 	.word	0x3fb3b8c5
 8015df0:	1b8d0159 	.word	0x1b8d0159
 8015df4:	3fe6066c 	.word	0x3fe6066c
 8015df8:	9c598ac8 	.word	0x9c598ac8
 8015dfc:	40002ae5 	.word	0x40002ae5
 8015e00:	1c8a2d4b 	.word	0x1c8a2d4b
 8015e04:	40033a27 	.word	0x40033a27
 8015e08:	3fefffff 	.word	0x3fefffff
 8015e0c:	3fdfffff 	.word	0x3fdfffff
 8015e10:	3ff00000 	.word	0x3ff00000
 8015e14:	3fe00000 	.word	0x3fe00000
 8015e18:	3fef3332 	.word	0x3fef3332
 8015e1c:	ee10 2a10 	vmov	r2, s0
 8015e20:	ee10 0a10 	vmov	r0, s0
 8015e24:	465b      	mov	r3, fp
 8015e26:	4659      	mov	r1, fp
 8015e28:	f7ea fa50 	bl	80002cc <__adddf3>
 8015e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e34:	4640      	mov	r0, r8
 8015e36:	4649      	mov	r1, r9
 8015e38:	f7ea fd28 	bl	800088c <__aeabi_ddiv>
 8015e3c:	4602      	mov	r2, r0
 8015e3e:	460b      	mov	r3, r1
 8015e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015e44:	f7ea fbf8 	bl	8000638 <__aeabi_dmul>
 8015e48:	2600      	movs	r6, #0
 8015e4a:	4680      	mov	r8, r0
 8015e4c:	4689      	mov	r9, r1
 8015e4e:	4632      	mov	r2, r6
 8015e50:	465b      	mov	r3, fp
 8015e52:	4630      	mov	r0, r6
 8015e54:	4659      	mov	r1, fp
 8015e56:	f7ea fbef 	bl	8000638 <__aeabi_dmul>
 8015e5a:	4602      	mov	r2, r0
 8015e5c:	460b      	mov	r3, r1
 8015e5e:	4620      	mov	r0, r4
 8015e60:	4629      	mov	r1, r5
 8015e62:	f7ea fa31 	bl	80002c8 <__aeabi_dsub>
 8015e66:	4632      	mov	r2, r6
 8015e68:	4604      	mov	r4, r0
 8015e6a:	460d      	mov	r5, r1
 8015e6c:	465b      	mov	r3, fp
 8015e6e:	4650      	mov	r0, sl
 8015e70:	4659      	mov	r1, fp
 8015e72:	f7ea fa2b 	bl	80002cc <__adddf3>
 8015e76:	4602      	mov	r2, r0
 8015e78:	460b      	mov	r3, r1
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	f7ea fd05 	bl	800088c <__aeabi_ddiv>
 8015e82:	4602      	mov	r2, r0
 8015e84:	460b      	mov	r3, r1
 8015e86:	f7ea fa21 	bl	80002cc <__adddf3>
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	460b      	mov	r3, r1
 8015e8e:	a114      	add	r1, pc, #80	; (adr r1, 8015ee0 <__ieee754_asin+0x410>)
 8015e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e94:	f7ea fa18 	bl	80002c8 <__aeabi_dsub>
 8015e98:	4602      	mov	r2, r0
 8015e9a:	460b      	mov	r3, r1
 8015e9c:	4640      	mov	r0, r8
 8015e9e:	4649      	mov	r1, r9
 8015ea0:	f7ea fa12 	bl	80002c8 <__aeabi_dsub>
 8015ea4:	465f      	mov	r7, fp
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	460d      	mov	r5, r1
 8015eaa:	4632      	mov	r2, r6
 8015eac:	465b      	mov	r3, fp
 8015eae:	4630      	mov	r0, r6
 8015eb0:	4639      	mov	r1, r7
 8015eb2:	f7ea fa0b 	bl	80002cc <__adddf3>
 8015eb6:	4602      	mov	r2, r0
 8015eb8:	460b      	mov	r3, r1
 8015eba:	a10b      	add	r1, pc, #44	; (adr r1, 8015ee8 <__ieee754_asin+0x418>)
 8015ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ec0:	f7ea fa02 	bl	80002c8 <__aeabi_dsub>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	460b      	mov	r3, r1
 8015ec8:	4620      	mov	r0, r4
 8015eca:	4629      	mov	r1, r5
 8015ecc:	f7ea f9fc 	bl	80002c8 <__aeabi_dsub>
 8015ed0:	4602      	mov	r2, r0
 8015ed2:	460b      	mov	r3, r1
 8015ed4:	a104      	add	r1, pc, #16	; (adr r1, 8015ee8 <__ieee754_asin+0x418>)
 8015ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015eda:	e6dd      	b.n	8015c98 <__ieee754_asin+0x1c8>
 8015edc:	f3af 8000 	nop.w
 8015ee0:	33145c07 	.word	0x33145c07
 8015ee4:	3c91a626 	.word	0x3c91a626
 8015ee8:	54442d18 	.word	0x54442d18
 8015eec:	3fe921fb 	.word	0x3fe921fb

08015ef0 <__ieee754_atan2>:
 8015ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ef4:	ec57 6b11 	vmov	r6, r7, d1
 8015ef8:	4273      	negs	r3, r6
 8015efa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015efe:	4333      	orrs	r3, r6
 8015f00:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80160a8 <__ieee754_atan2+0x1b8>
 8015f04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015f08:	4573      	cmp	r3, lr
 8015f0a:	ec51 0b10 	vmov	r0, r1, d0
 8015f0e:	ee11 8a10 	vmov	r8, s2
 8015f12:	d80a      	bhi.n	8015f2a <__ieee754_atan2+0x3a>
 8015f14:	4244      	negs	r4, r0
 8015f16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015f1a:	4304      	orrs	r4, r0
 8015f1c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015f20:	4574      	cmp	r4, lr
 8015f22:	468c      	mov	ip, r1
 8015f24:	ee10 9a10 	vmov	r9, s0
 8015f28:	d907      	bls.n	8015f3a <__ieee754_atan2+0x4a>
 8015f2a:	4632      	mov	r2, r6
 8015f2c:	463b      	mov	r3, r7
 8015f2e:	f7ea f9cd 	bl	80002cc <__adddf3>
 8015f32:	ec41 0b10 	vmov	d0, r0, r1
 8015f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f3a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015f3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015f42:	4334      	orrs	r4, r6
 8015f44:	d103      	bne.n	8015f4e <__ieee754_atan2+0x5e>
 8015f46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f4a:	f001 badd 	b.w	8017508 <atan>
 8015f4e:	17bc      	asrs	r4, r7, #30
 8015f50:	f004 0402 	and.w	r4, r4, #2
 8015f54:	ea53 0909 	orrs.w	r9, r3, r9
 8015f58:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015f5c:	d107      	bne.n	8015f6e <__ieee754_atan2+0x7e>
 8015f5e:	2c02      	cmp	r4, #2
 8015f60:	d073      	beq.n	801604a <__ieee754_atan2+0x15a>
 8015f62:	2c03      	cmp	r4, #3
 8015f64:	d1e5      	bne.n	8015f32 <__ieee754_atan2+0x42>
 8015f66:	a13e      	add	r1, pc, #248	; (adr r1, 8016060 <__ieee754_atan2+0x170>)
 8015f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f6c:	e7e1      	b.n	8015f32 <__ieee754_atan2+0x42>
 8015f6e:	ea52 0808 	orrs.w	r8, r2, r8
 8015f72:	d106      	bne.n	8015f82 <__ieee754_atan2+0x92>
 8015f74:	f1bc 0f00 	cmp.w	ip, #0
 8015f78:	da6b      	bge.n	8016052 <__ieee754_atan2+0x162>
 8015f7a:	a13b      	add	r1, pc, #236	; (adr r1, 8016068 <__ieee754_atan2+0x178>)
 8015f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f80:	e7d7      	b.n	8015f32 <__ieee754_atan2+0x42>
 8015f82:	4572      	cmp	r2, lr
 8015f84:	d120      	bne.n	8015fc8 <__ieee754_atan2+0xd8>
 8015f86:	4293      	cmp	r3, r2
 8015f88:	d111      	bne.n	8015fae <__ieee754_atan2+0xbe>
 8015f8a:	2c02      	cmp	r4, #2
 8015f8c:	d007      	beq.n	8015f9e <__ieee754_atan2+0xae>
 8015f8e:	2c03      	cmp	r4, #3
 8015f90:	d009      	beq.n	8015fa6 <__ieee754_atan2+0xb6>
 8015f92:	2c01      	cmp	r4, #1
 8015f94:	d155      	bne.n	8016042 <__ieee754_atan2+0x152>
 8015f96:	a136      	add	r1, pc, #216	; (adr r1, 8016070 <__ieee754_atan2+0x180>)
 8015f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f9c:	e7c9      	b.n	8015f32 <__ieee754_atan2+0x42>
 8015f9e:	a136      	add	r1, pc, #216	; (adr r1, 8016078 <__ieee754_atan2+0x188>)
 8015fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fa4:	e7c5      	b.n	8015f32 <__ieee754_atan2+0x42>
 8015fa6:	a136      	add	r1, pc, #216	; (adr r1, 8016080 <__ieee754_atan2+0x190>)
 8015fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fac:	e7c1      	b.n	8015f32 <__ieee754_atan2+0x42>
 8015fae:	2c02      	cmp	r4, #2
 8015fb0:	d04b      	beq.n	801604a <__ieee754_atan2+0x15a>
 8015fb2:	2c03      	cmp	r4, #3
 8015fb4:	d0d7      	beq.n	8015f66 <__ieee754_atan2+0x76>
 8015fb6:	2c01      	cmp	r4, #1
 8015fb8:	f04f 0000 	mov.w	r0, #0
 8015fbc:	d102      	bne.n	8015fc4 <__ieee754_atan2+0xd4>
 8015fbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015fc2:	e7b6      	b.n	8015f32 <__ieee754_atan2+0x42>
 8015fc4:	2100      	movs	r1, #0
 8015fc6:	e7b4      	b.n	8015f32 <__ieee754_atan2+0x42>
 8015fc8:	4573      	cmp	r3, lr
 8015fca:	d0d3      	beq.n	8015f74 <__ieee754_atan2+0x84>
 8015fcc:	1a9b      	subs	r3, r3, r2
 8015fce:	151b      	asrs	r3, r3, #20
 8015fd0:	2b3c      	cmp	r3, #60	; 0x3c
 8015fd2:	dc1e      	bgt.n	8016012 <__ieee754_atan2+0x122>
 8015fd4:	2f00      	cmp	r7, #0
 8015fd6:	da01      	bge.n	8015fdc <__ieee754_atan2+0xec>
 8015fd8:	333c      	adds	r3, #60	; 0x3c
 8015fda:	db1e      	blt.n	801601a <__ieee754_atan2+0x12a>
 8015fdc:	4632      	mov	r2, r6
 8015fde:	463b      	mov	r3, r7
 8015fe0:	f7ea fc54 	bl	800088c <__aeabi_ddiv>
 8015fe4:	ec41 0b10 	vmov	d0, r0, r1
 8015fe8:	f001 fc2e 	bl	8017848 <fabs>
 8015fec:	f001 fa8c 	bl	8017508 <atan>
 8015ff0:	ec51 0b10 	vmov	r0, r1, d0
 8015ff4:	2c01      	cmp	r4, #1
 8015ff6:	d013      	beq.n	8016020 <__ieee754_atan2+0x130>
 8015ff8:	2c02      	cmp	r4, #2
 8015ffa:	d015      	beq.n	8016028 <__ieee754_atan2+0x138>
 8015ffc:	2c00      	cmp	r4, #0
 8015ffe:	d098      	beq.n	8015f32 <__ieee754_atan2+0x42>
 8016000:	a321      	add	r3, pc, #132	; (adr r3, 8016088 <__ieee754_atan2+0x198>)
 8016002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016006:	f7ea f95f 	bl	80002c8 <__aeabi_dsub>
 801600a:	a321      	add	r3, pc, #132	; (adr r3, 8016090 <__ieee754_atan2+0x1a0>)
 801600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016010:	e014      	b.n	801603c <__ieee754_atan2+0x14c>
 8016012:	a121      	add	r1, pc, #132	; (adr r1, 8016098 <__ieee754_atan2+0x1a8>)
 8016014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016018:	e7ec      	b.n	8015ff4 <__ieee754_atan2+0x104>
 801601a:	2000      	movs	r0, #0
 801601c:	2100      	movs	r1, #0
 801601e:	e7e9      	b.n	8015ff4 <__ieee754_atan2+0x104>
 8016020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016024:	4619      	mov	r1, r3
 8016026:	e784      	b.n	8015f32 <__ieee754_atan2+0x42>
 8016028:	a317      	add	r3, pc, #92	; (adr r3, 8016088 <__ieee754_atan2+0x198>)
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	f7ea f94b 	bl	80002c8 <__aeabi_dsub>
 8016032:	4602      	mov	r2, r0
 8016034:	460b      	mov	r3, r1
 8016036:	a116      	add	r1, pc, #88	; (adr r1, 8016090 <__ieee754_atan2+0x1a0>)
 8016038:	e9d1 0100 	ldrd	r0, r1, [r1]
 801603c:	f7ea f944 	bl	80002c8 <__aeabi_dsub>
 8016040:	e777      	b.n	8015f32 <__ieee754_atan2+0x42>
 8016042:	a117      	add	r1, pc, #92	; (adr r1, 80160a0 <__ieee754_atan2+0x1b0>)
 8016044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016048:	e773      	b.n	8015f32 <__ieee754_atan2+0x42>
 801604a:	a111      	add	r1, pc, #68	; (adr r1, 8016090 <__ieee754_atan2+0x1a0>)
 801604c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016050:	e76f      	b.n	8015f32 <__ieee754_atan2+0x42>
 8016052:	a111      	add	r1, pc, #68	; (adr r1, 8016098 <__ieee754_atan2+0x1a8>)
 8016054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016058:	e76b      	b.n	8015f32 <__ieee754_atan2+0x42>
 801605a:	bf00      	nop
 801605c:	f3af 8000 	nop.w
 8016060:	54442d18 	.word	0x54442d18
 8016064:	c00921fb 	.word	0xc00921fb
 8016068:	54442d18 	.word	0x54442d18
 801606c:	bff921fb 	.word	0xbff921fb
 8016070:	54442d18 	.word	0x54442d18
 8016074:	bfe921fb 	.word	0xbfe921fb
 8016078:	7f3321d2 	.word	0x7f3321d2
 801607c:	4002d97c 	.word	0x4002d97c
 8016080:	7f3321d2 	.word	0x7f3321d2
 8016084:	c002d97c 	.word	0xc002d97c
 8016088:	33145c07 	.word	0x33145c07
 801608c:	3ca1a626 	.word	0x3ca1a626
 8016090:	54442d18 	.word	0x54442d18
 8016094:	400921fb 	.word	0x400921fb
 8016098:	54442d18 	.word	0x54442d18
 801609c:	3ff921fb 	.word	0x3ff921fb
 80160a0:	54442d18 	.word	0x54442d18
 80160a4:	3fe921fb 	.word	0x3fe921fb
 80160a8:	7ff00000 	.word	0x7ff00000
 80160ac:	00000000 	.word	0x00000000

080160b0 <__ieee754_rem_pio2>:
 80160b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b4:	ec57 6b10 	vmov	r6, r7, d0
 80160b8:	4bc3      	ldr	r3, [pc, #780]	; (80163c8 <__ieee754_rem_pio2+0x318>)
 80160ba:	b08d      	sub	sp, #52	; 0x34
 80160bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80160c0:	4598      	cmp	r8, r3
 80160c2:	4604      	mov	r4, r0
 80160c4:	9704      	str	r7, [sp, #16]
 80160c6:	dc07      	bgt.n	80160d8 <__ieee754_rem_pio2+0x28>
 80160c8:	2200      	movs	r2, #0
 80160ca:	2300      	movs	r3, #0
 80160cc:	ed84 0b00 	vstr	d0, [r4]
 80160d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80160d4:	2500      	movs	r5, #0
 80160d6:	e027      	b.n	8016128 <__ieee754_rem_pio2+0x78>
 80160d8:	4bbc      	ldr	r3, [pc, #752]	; (80163cc <__ieee754_rem_pio2+0x31c>)
 80160da:	4598      	cmp	r8, r3
 80160dc:	dc75      	bgt.n	80161ca <__ieee754_rem_pio2+0x11a>
 80160de:	9b04      	ldr	r3, [sp, #16]
 80160e0:	4dbb      	ldr	r5, [pc, #748]	; (80163d0 <__ieee754_rem_pio2+0x320>)
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	ee10 0a10 	vmov	r0, s0
 80160e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8016390 <__ieee754_rem_pio2+0x2e0>)
 80160ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ee:	4639      	mov	r1, r7
 80160f0:	dd36      	ble.n	8016160 <__ieee754_rem_pio2+0xb0>
 80160f2:	f7ea f8e9 	bl	80002c8 <__aeabi_dsub>
 80160f6:	45a8      	cmp	r8, r5
 80160f8:	4606      	mov	r6, r0
 80160fa:	460f      	mov	r7, r1
 80160fc:	d018      	beq.n	8016130 <__ieee754_rem_pio2+0x80>
 80160fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8016398 <__ieee754_rem_pio2+0x2e8>)
 8016100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016104:	f7ea f8e0 	bl	80002c8 <__aeabi_dsub>
 8016108:	4602      	mov	r2, r0
 801610a:	460b      	mov	r3, r1
 801610c:	e9c4 2300 	strd	r2, r3, [r4]
 8016110:	4630      	mov	r0, r6
 8016112:	4639      	mov	r1, r7
 8016114:	f7ea f8d8 	bl	80002c8 <__aeabi_dsub>
 8016118:	a39f      	add	r3, pc, #636	; (adr r3, 8016398 <__ieee754_rem_pio2+0x2e8>)
 801611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801611e:	f7ea f8d3 	bl	80002c8 <__aeabi_dsub>
 8016122:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016126:	2501      	movs	r5, #1
 8016128:	4628      	mov	r0, r5
 801612a:	b00d      	add	sp, #52	; 0x34
 801612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016130:	a39b      	add	r3, pc, #620	; (adr r3, 80163a0 <__ieee754_rem_pio2+0x2f0>)
 8016132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016136:	f7ea f8c7 	bl	80002c8 <__aeabi_dsub>
 801613a:	a39b      	add	r3, pc, #620	; (adr r3, 80163a8 <__ieee754_rem_pio2+0x2f8>)
 801613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016140:	4606      	mov	r6, r0
 8016142:	460f      	mov	r7, r1
 8016144:	f7ea f8c0 	bl	80002c8 <__aeabi_dsub>
 8016148:	4602      	mov	r2, r0
 801614a:	460b      	mov	r3, r1
 801614c:	e9c4 2300 	strd	r2, r3, [r4]
 8016150:	4630      	mov	r0, r6
 8016152:	4639      	mov	r1, r7
 8016154:	f7ea f8b8 	bl	80002c8 <__aeabi_dsub>
 8016158:	a393      	add	r3, pc, #588	; (adr r3, 80163a8 <__ieee754_rem_pio2+0x2f8>)
 801615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801615e:	e7de      	b.n	801611e <__ieee754_rem_pio2+0x6e>
 8016160:	f7ea f8b4 	bl	80002cc <__adddf3>
 8016164:	45a8      	cmp	r8, r5
 8016166:	4606      	mov	r6, r0
 8016168:	460f      	mov	r7, r1
 801616a:	d016      	beq.n	801619a <__ieee754_rem_pio2+0xea>
 801616c:	a38a      	add	r3, pc, #552	; (adr r3, 8016398 <__ieee754_rem_pio2+0x2e8>)
 801616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016172:	f7ea f8ab 	bl	80002cc <__adddf3>
 8016176:	4602      	mov	r2, r0
 8016178:	460b      	mov	r3, r1
 801617a:	e9c4 2300 	strd	r2, r3, [r4]
 801617e:	4630      	mov	r0, r6
 8016180:	4639      	mov	r1, r7
 8016182:	f7ea f8a1 	bl	80002c8 <__aeabi_dsub>
 8016186:	a384      	add	r3, pc, #528	; (adr r3, 8016398 <__ieee754_rem_pio2+0x2e8>)
 8016188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618c:	f7ea f89e 	bl	80002cc <__adddf3>
 8016190:	f04f 35ff 	mov.w	r5, #4294967295
 8016194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016198:	e7c6      	b.n	8016128 <__ieee754_rem_pio2+0x78>
 801619a:	a381      	add	r3, pc, #516	; (adr r3, 80163a0 <__ieee754_rem_pio2+0x2f0>)
 801619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a0:	f7ea f894 	bl	80002cc <__adddf3>
 80161a4:	a380      	add	r3, pc, #512	; (adr r3, 80163a8 <__ieee754_rem_pio2+0x2f8>)
 80161a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161aa:	4606      	mov	r6, r0
 80161ac:	460f      	mov	r7, r1
 80161ae:	f7ea f88d 	bl	80002cc <__adddf3>
 80161b2:	4602      	mov	r2, r0
 80161b4:	460b      	mov	r3, r1
 80161b6:	e9c4 2300 	strd	r2, r3, [r4]
 80161ba:	4630      	mov	r0, r6
 80161bc:	4639      	mov	r1, r7
 80161be:	f7ea f883 	bl	80002c8 <__aeabi_dsub>
 80161c2:	a379      	add	r3, pc, #484	; (adr r3, 80163a8 <__ieee754_rem_pio2+0x2f8>)
 80161c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c8:	e7e0      	b.n	801618c <__ieee754_rem_pio2+0xdc>
 80161ca:	4b82      	ldr	r3, [pc, #520]	; (80163d4 <__ieee754_rem_pio2+0x324>)
 80161cc:	4598      	cmp	r8, r3
 80161ce:	f300 80d0 	bgt.w	8016372 <__ieee754_rem_pio2+0x2c2>
 80161d2:	f001 fb39 	bl	8017848 <fabs>
 80161d6:	ec57 6b10 	vmov	r6, r7, d0
 80161da:	ee10 0a10 	vmov	r0, s0
 80161de:	a374      	add	r3, pc, #464	; (adr r3, 80163b0 <__ieee754_rem_pio2+0x300>)
 80161e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e4:	4639      	mov	r1, r7
 80161e6:	f7ea fa27 	bl	8000638 <__aeabi_dmul>
 80161ea:	2200      	movs	r2, #0
 80161ec:	4b7a      	ldr	r3, [pc, #488]	; (80163d8 <__ieee754_rem_pio2+0x328>)
 80161ee:	f7ea f86d 	bl	80002cc <__adddf3>
 80161f2:	f7ea fcd1 	bl	8000b98 <__aeabi_d2iz>
 80161f6:	4605      	mov	r5, r0
 80161f8:	f7ea f9b4 	bl	8000564 <__aeabi_i2d>
 80161fc:	a364      	add	r3, pc, #400	; (adr r3, 8016390 <__ieee754_rem_pio2+0x2e0>)
 80161fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016206:	f7ea fa17 	bl	8000638 <__aeabi_dmul>
 801620a:	4602      	mov	r2, r0
 801620c:	460b      	mov	r3, r1
 801620e:	4630      	mov	r0, r6
 8016210:	4639      	mov	r1, r7
 8016212:	f7ea f859 	bl	80002c8 <__aeabi_dsub>
 8016216:	a360      	add	r3, pc, #384	; (adr r3, 8016398 <__ieee754_rem_pio2+0x2e8>)
 8016218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801621c:	4682      	mov	sl, r0
 801621e:	468b      	mov	fp, r1
 8016220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016224:	f7ea fa08 	bl	8000638 <__aeabi_dmul>
 8016228:	2d1f      	cmp	r5, #31
 801622a:	4606      	mov	r6, r0
 801622c:	460f      	mov	r7, r1
 801622e:	dc0c      	bgt.n	801624a <__ieee754_rem_pio2+0x19a>
 8016230:	1e6a      	subs	r2, r5, #1
 8016232:	4b6a      	ldr	r3, [pc, #424]	; (80163dc <__ieee754_rem_pio2+0x32c>)
 8016234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016238:	4543      	cmp	r3, r8
 801623a:	d006      	beq.n	801624a <__ieee754_rem_pio2+0x19a>
 801623c:	4632      	mov	r2, r6
 801623e:	463b      	mov	r3, r7
 8016240:	4650      	mov	r0, sl
 8016242:	4659      	mov	r1, fp
 8016244:	f7ea f840 	bl	80002c8 <__aeabi_dsub>
 8016248:	e00e      	b.n	8016268 <__ieee754_rem_pio2+0x1b8>
 801624a:	4632      	mov	r2, r6
 801624c:	463b      	mov	r3, r7
 801624e:	4650      	mov	r0, sl
 8016250:	4659      	mov	r1, fp
 8016252:	f7ea f839 	bl	80002c8 <__aeabi_dsub>
 8016256:	ea4f 5328 	mov.w	r3, r8, asr #20
 801625a:	9305      	str	r3, [sp, #20]
 801625c:	9a05      	ldr	r2, [sp, #20]
 801625e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016262:	1ad3      	subs	r3, r2, r3
 8016264:	2b10      	cmp	r3, #16
 8016266:	dc02      	bgt.n	801626e <__ieee754_rem_pio2+0x1be>
 8016268:	e9c4 0100 	strd	r0, r1, [r4]
 801626c:	e039      	b.n	80162e2 <__ieee754_rem_pio2+0x232>
 801626e:	a34c      	add	r3, pc, #304	; (adr r3, 80163a0 <__ieee754_rem_pio2+0x2f0>)
 8016270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016278:	f7ea f9de 	bl	8000638 <__aeabi_dmul>
 801627c:	4606      	mov	r6, r0
 801627e:	460f      	mov	r7, r1
 8016280:	4602      	mov	r2, r0
 8016282:	460b      	mov	r3, r1
 8016284:	4650      	mov	r0, sl
 8016286:	4659      	mov	r1, fp
 8016288:	f7ea f81e 	bl	80002c8 <__aeabi_dsub>
 801628c:	4602      	mov	r2, r0
 801628e:	460b      	mov	r3, r1
 8016290:	4680      	mov	r8, r0
 8016292:	4689      	mov	r9, r1
 8016294:	4650      	mov	r0, sl
 8016296:	4659      	mov	r1, fp
 8016298:	f7ea f816 	bl	80002c8 <__aeabi_dsub>
 801629c:	4632      	mov	r2, r6
 801629e:	463b      	mov	r3, r7
 80162a0:	f7ea f812 	bl	80002c8 <__aeabi_dsub>
 80162a4:	a340      	add	r3, pc, #256	; (adr r3, 80163a8 <__ieee754_rem_pio2+0x2f8>)
 80162a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162aa:	4606      	mov	r6, r0
 80162ac:	460f      	mov	r7, r1
 80162ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162b2:	f7ea f9c1 	bl	8000638 <__aeabi_dmul>
 80162b6:	4632      	mov	r2, r6
 80162b8:	463b      	mov	r3, r7
 80162ba:	f7ea f805 	bl	80002c8 <__aeabi_dsub>
 80162be:	4602      	mov	r2, r0
 80162c0:	460b      	mov	r3, r1
 80162c2:	4606      	mov	r6, r0
 80162c4:	460f      	mov	r7, r1
 80162c6:	4640      	mov	r0, r8
 80162c8:	4649      	mov	r1, r9
 80162ca:	f7e9 fffd 	bl	80002c8 <__aeabi_dsub>
 80162ce:	9a05      	ldr	r2, [sp, #20]
 80162d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	2b31      	cmp	r3, #49	; 0x31
 80162d8:	dc20      	bgt.n	801631c <__ieee754_rem_pio2+0x26c>
 80162da:	e9c4 0100 	strd	r0, r1, [r4]
 80162de:	46c2      	mov	sl, r8
 80162e0:	46cb      	mov	fp, r9
 80162e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80162e6:	4650      	mov	r0, sl
 80162e8:	4642      	mov	r2, r8
 80162ea:	464b      	mov	r3, r9
 80162ec:	4659      	mov	r1, fp
 80162ee:	f7e9 ffeb 	bl	80002c8 <__aeabi_dsub>
 80162f2:	463b      	mov	r3, r7
 80162f4:	4632      	mov	r2, r6
 80162f6:	f7e9 ffe7 	bl	80002c8 <__aeabi_dsub>
 80162fa:	9b04      	ldr	r3, [sp, #16]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016302:	f6bf af11 	bge.w	8016128 <__ieee754_rem_pio2+0x78>
 8016306:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801630a:	6063      	str	r3, [r4, #4]
 801630c:	f8c4 8000 	str.w	r8, [r4]
 8016310:	60a0      	str	r0, [r4, #8]
 8016312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016316:	60e3      	str	r3, [r4, #12]
 8016318:	426d      	negs	r5, r5
 801631a:	e705      	b.n	8016128 <__ieee754_rem_pio2+0x78>
 801631c:	a326      	add	r3, pc, #152	; (adr r3, 80163b8 <__ieee754_rem_pio2+0x308>)
 801631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016326:	f7ea f987 	bl	8000638 <__aeabi_dmul>
 801632a:	4606      	mov	r6, r0
 801632c:	460f      	mov	r7, r1
 801632e:	4602      	mov	r2, r0
 8016330:	460b      	mov	r3, r1
 8016332:	4640      	mov	r0, r8
 8016334:	4649      	mov	r1, r9
 8016336:	f7e9 ffc7 	bl	80002c8 <__aeabi_dsub>
 801633a:	4602      	mov	r2, r0
 801633c:	460b      	mov	r3, r1
 801633e:	4682      	mov	sl, r0
 8016340:	468b      	mov	fp, r1
 8016342:	4640      	mov	r0, r8
 8016344:	4649      	mov	r1, r9
 8016346:	f7e9 ffbf 	bl	80002c8 <__aeabi_dsub>
 801634a:	4632      	mov	r2, r6
 801634c:	463b      	mov	r3, r7
 801634e:	f7e9 ffbb 	bl	80002c8 <__aeabi_dsub>
 8016352:	a31b      	add	r3, pc, #108	; (adr r3, 80163c0 <__ieee754_rem_pio2+0x310>)
 8016354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016358:	4606      	mov	r6, r0
 801635a:	460f      	mov	r7, r1
 801635c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016360:	f7ea f96a 	bl	8000638 <__aeabi_dmul>
 8016364:	4632      	mov	r2, r6
 8016366:	463b      	mov	r3, r7
 8016368:	f7e9 ffae 	bl	80002c8 <__aeabi_dsub>
 801636c:	4606      	mov	r6, r0
 801636e:	460f      	mov	r7, r1
 8016370:	e764      	b.n	801623c <__ieee754_rem_pio2+0x18c>
 8016372:	4b1b      	ldr	r3, [pc, #108]	; (80163e0 <__ieee754_rem_pio2+0x330>)
 8016374:	4598      	cmp	r8, r3
 8016376:	dd35      	ble.n	80163e4 <__ieee754_rem_pio2+0x334>
 8016378:	ee10 2a10 	vmov	r2, s0
 801637c:	463b      	mov	r3, r7
 801637e:	4630      	mov	r0, r6
 8016380:	4639      	mov	r1, r7
 8016382:	f7e9 ffa1 	bl	80002c8 <__aeabi_dsub>
 8016386:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801638a:	e9c4 0100 	strd	r0, r1, [r4]
 801638e:	e6a1      	b.n	80160d4 <__ieee754_rem_pio2+0x24>
 8016390:	54400000 	.word	0x54400000
 8016394:	3ff921fb 	.word	0x3ff921fb
 8016398:	1a626331 	.word	0x1a626331
 801639c:	3dd0b461 	.word	0x3dd0b461
 80163a0:	1a600000 	.word	0x1a600000
 80163a4:	3dd0b461 	.word	0x3dd0b461
 80163a8:	2e037073 	.word	0x2e037073
 80163ac:	3ba3198a 	.word	0x3ba3198a
 80163b0:	6dc9c883 	.word	0x6dc9c883
 80163b4:	3fe45f30 	.word	0x3fe45f30
 80163b8:	2e000000 	.word	0x2e000000
 80163bc:	3ba3198a 	.word	0x3ba3198a
 80163c0:	252049c1 	.word	0x252049c1
 80163c4:	397b839a 	.word	0x397b839a
 80163c8:	3fe921fb 	.word	0x3fe921fb
 80163cc:	4002d97b 	.word	0x4002d97b
 80163d0:	3ff921fb 	.word	0x3ff921fb
 80163d4:	413921fb 	.word	0x413921fb
 80163d8:	3fe00000 	.word	0x3fe00000
 80163dc:	08018640 	.word	0x08018640
 80163e0:	7fefffff 	.word	0x7fefffff
 80163e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80163e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80163ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80163f0:	4630      	mov	r0, r6
 80163f2:	460f      	mov	r7, r1
 80163f4:	f7ea fbd0 	bl	8000b98 <__aeabi_d2iz>
 80163f8:	f7ea f8b4 	bl	8000564 <__aeabi_i2d>
 80163fc:	4602      	mov	r2, r0
 80163fe:	460b      	mov	r3, r1
 8016400:	4630      	mov	r0, r6
 8016402:	4639      	mov	r1, r7
 8016404:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016408:	f7e9 ff5e 	bl	80002c8 <__aeabi_dsub>
 801640c:	2200      	movs	r2, #0
 801640e:	4b1f      	ldr	r3, [pc, #124]	; (801648c <__ieee754_rem_pio2+0x3dc>)
 8016410:	f7ea f912 	bl	8000638 <__aeabi_dmul>
 8016414:	460f      	mov	r7, r1
 8016416:	4606      	mov	r6, r0
 8016418:	f7ea fbbe 	bl	8000b98 <__aeabi_d2iz>
 801641c:	f7ea f8a2 	bl	8000564 <__aeabi_i2d>
 8016420:	4602      	mov	r2, r0
 8016422:	460b      	mov	r3, r1
 8016424:	4630      	mov	r0, r6
 8016426:	4639      	mov	r1, r7
 8016428:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801642c:	f7e9 ff4c 	bl	80002c8 <__aeabi_dsub>
 8016430:	2200      	movs	r2, #0
 8016432:	4b16      	ldr	r3, [pc, #88]	; (801648c <__ieee754_rem_pio2+0x3dc>)
 8016434:	f7ea f900 	bl	8000638 <__aeabi_dmul>
 8016438:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801643c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8016440:	f04f 0803 	mov.w	r8, #3
 8016444:	2600      	movs	r6, #0
 8016446:	2700      	movs	r7, #0
 8016448:	4632      	mov	r2, r6
 801644a:	463b      	mov	r3, r7
 801644c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016450:	f108 3aff 	add.w	sl, r8, #4294967295
 8016454:	f7ea fb58 	bl	8000b08 <__aeabi_dcmpeq>
 8016458:	b9b0      	cbnz	r0, 8016488 <__ieee754_rem_pio2+0x3d8>
 801645a:	4b0d      	ldr	r3, [pc, #52]	; (8016490 <__ieee754_rem_pio2+0x3e0>)
 801645c:	9301      	str	r3, [sp, #4]
 801645e:	2302      	movs	r3, #2
 8016460:	9300      	str	r3, [sp, #0]
 8016462:	462a      	mov	r2, r5
 8016464:	4643      	mov	r3, r8
 8016466:	4621      	mov	r1, r4
 8016468:	a806      	add	r0, sp, #24
 801646a:	f000 fc51 	bl	8016d10 <__kernel_rem_pio2>
 801646e:	9b04      	ldr	r3, [sp, #16]
 8016470:	2b00      	cmp	r3, #0
 8016472:	4605      	mov	r5, r0
 8016474:	f6bf ae58 	bge.w	8016128 <__ieee754_rem_pio2+0x78>
 8016478:	6863      	ldr	r3, [r4, #4]
 801647a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801647e:	6063      	str	r3, [r4, #4]
 8016480:	68e3      	ldr	r3, [r4, #12]
 8016482:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016486:	e746      	b.n	8016316 <__ieee754_rem_pio2+0x266>
 8016488:	46d0      	mov	r8, sl
 801648a:	e7dd      	b.n	8016448 <__ieee754_rem_pio2+0x398>
 801648c:	41700000 	.word	0x41700000
 8016490:	080186c0 	.word	0x080186c0

08016494 <__ieee754_sqrt>:
 8016494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016498:	4955      	ldr	r1, [pc, #340]	; (80165f0 <__ieee754_sqrt+0x15c>)
 801649a:	ec55 4b10 	vmov	r4, r5, d0
 801649e:	43a9      	bics	r1, r5
 80164a0:	462b      	mov	r3, r5
 80164a2:	462a      	mov	r2, r5
 80164a4:	d112      	bne.n	80164cc <__ieee754_sqrt+0x38>
 80164a6:	ee10 2a10 	vmov	r2, s0
 80164aa:	ee10 0a10 	vmov	r0, s0
 80164ae:	4629      	mov	r1, r5
 80164b0:	f7ea f8c2 	bl	8000638 <__aeabi_dmul>
 80164b4:	4602      	mov	r2, r0
 80164b6:	460b      	mov	r3, r1
 80164b8:	4620      	mov	r0, r4
 80164ba:	4629      	mov	r1, r5
 80164bc:	f7e9 ff06 	bl	80002cc <__adddf3>
 80164c0:	4604      	mov	r4, r0
 80164c2:	460d      	mov	r5, r1
 80164c4:	ec45 4b10 	vmov	d0, r4, r5
 80164c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164cc:	2d00      	cmp	r5, #0
 80164ce:	ee10 0a10 	vmov	r0, s0
 80164d2:	4621      	mov	r1, r4
 80164d4:	dc0f      	bgt.n	80164f6 <__ieee754_sqrt+0x62>
 80164d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80164da:	4330      	orrs	r0, r6
 80164dc:	d0f2      	beq.n	80164c4 <__ieee754_sqrt+0x30>
 80164de:	b155      	cbz	r5, 80164f6 <__ieee754_sqrt+0x62>
 80164e0:	ee10 2a10 	vmov	r2, s0
 80164e4:	4620      	mov	r0, r4
 80164e6:	4629      	mov	r1, r5
 80164e8:	f7e9 feee 	bl	80002c8 <__aeabi_dsub>
 80164ec:	4602      	mov	r2, r0
 80164ee:	460b      	mov	r3, r1
 80164f0:	f7ea f9cc 	bl	800088c <__aeabi_ddiv>
 80164f4:	e7e4      	b.n	80164c0 <__ieee754_sqrt+0x2c>
 80164f6:	151b      	asrs	r3, r3, #20
 80164f8:	d073      	beq.n	80165e2 <__ieee754_sqrt+0x14e>
 80164fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80164fe:	07dd      	lsls	r5, r3, #31
 8016500:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016504:	bf48      	it	mi
 8016506:	0fc8      	lsrmi	r0, r1, #31
 8016508:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801650c:	bf44      	itt	mi
 801650e:	0049      	lslmi	r1, r1, #1
 8016510:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016514:	2500      	movs	r5, #0
 8016516:	1058      	asrs	r0, r3, #1
 8016518:	0fcb      	lsrs	r3, r1, #31
 801651a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801651e:	0049      	lsls	r1, r1, #1
 8016520:	2316      	movs	r3, #22
 8016522:	462c      	mov	r4, r5
 8016524:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016528:	19a7      	adds	r7, r4, r6
 801652a:	4297      	cmp	r7, r2
 801652c:	bfde      	ittt	le
 801652e:	19bc      	addle	r4, r7, r6
 8016530:	1bd2      	suble	r2, r2, r7
 8016532:	19ad      	addle	r5, r5, r6
 8016534:	0fcf      	lsrs	r7, r1, #31
 8016536:	3b01      	subs	r3, #1
 8016538:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801653c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016540:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016544:	d1f0      	bne.n	8016528 <__ieee754_sqrt+0x94>
 8016546:	f04f 0c20 	mov.w	ip, #32
 801654a:	469e      	mov	lr, r3
 801654c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016550:	42a2      	cmp	r2, r4
 8016552:	eb06 070e 	add.w	r7, r6, lr
 8016556:	dc02      	bgt.n	801655e <__ieee754_sqrt+0xca>
 8016558:	d112      	bne.n	8016580 <__ieee754_sqrt+0xec>
 801655a:	428f      	cmp	r7, r1
 801655c:	d810      	bhi.n	8016580 <__ieee754_sqrt+0xec>
 801655e:	2f00      	cmp	r7, #0
 8016560:	eb07 0e06 	add.w	lr, r7, r6
 8016564:	da42      	bge.n	80165ec <__ieee754_sqrt+0x158>
 8016566:	f1be 0f00 	cmp.w	lr, #0
 801656a:	db3f      	blt.n	80165ec <__ieee754_sqrt+0x158>
 801656c:	f104 0801 	add.w	r8, r4, #1
 8016570:	1b12      	subs	r2, r2, r4
 8016572:	428f      	cmp	r7, r1
 8016574:	bf88      	it	hi
 8016576:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801657a:	1bc9      	subs	r1, r1, r7
 801657c:	4433      	add	r3, r6
 801657e:	4644      	mov	r4, r8
 8016580:	0052      	lsls	r2, r2, #1
 8016582:	f1bc 0c01 	subs.w	ip, ip, #1
 8016586:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801658a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801658e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016592:	d1dd      	bne.n	8016550 <__ieee754_sqrt+0xbc>
 8016594:	430a      	orrs	r2, r1
 8016596:	d006      	beq.n	80165a6 <__ieee754_sqrt+0x112>
 8016598:	1c5c      	adds	r4, r3, #1
 801659a:	bf13      	iteet	ne
 801659c:	3301      	addne	r3, #1
 801659e:	3501      	addeq	r5, #1
 80165a0:	4663      	moveq	r3, ip
 80165a2:	f023 0301 	bicne.w	r3, r3, #1
 80165a6:	106a      	asrs	r2, r5, #1
 80165a8:	085b      	lsrs	r3, r3, #1
 80165aa:	07e9      	lsls	r1, r5, #31
 80165ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80165b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80165b4:	bf48      	it	mi
 80165b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80165ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80165be:	461c      	mov	r4, r3
 80165c0:	e780      	b.n	80164c4 <__ieee754_sqrt+0x30>
 80165c2:	0aca      	lsrs	r2, r1, #11
 80165c4:	3815      	subs	r0, #21
 80165c6:	0549      	lsls	r1, r1, #21
 80165c8:	2a00      	cmp	r2, #0
 80165ca:	d0fa      	beq.n	80165c2 <__ieee754_sqrt+0x12e>
 80165cc:	02d6      	lsls	r6, r2, #11
 80165ce:	d50a      	bpl.n	80165e6 <__ieee754_sqrt+0x152>
 80165d0:	f1c3 0420 	rsb	r4, r3, #32
 80165d4:	fa21 f404 	lsr.w	r4, r1, r4
 80165d8:	1e5d      	subs	r5, r3, #1
 80165da:	4099      	lsls	r1, r3
 80165dc:	4322      	orrs	r2, r4
 80165de:	1b43      	subs	r3, r0, r5
 80165e0:	e78b      	b.n	80164fa <__ieee754_sqrt+0x66>
 80165e2:	4618      	mov	r0, r3
 80165e4:	e7f0      	b.n	80165c8 <__ieee754_sqrt+0x134>
 80165e6:	0052      	lsls	r2, r2, #1
 80165e8:	3301      	adds	r3, #1
 80165ea:	e7ef      	b.n	80165cc <__ieee754_sqrt+0x138>
 80165ec:	46a0      	mov	r8, r4
 80165ee:	e7bf      	b.n	8016570 <__ieee754_sqrt+0xdc>
 80165f0:	7ff00000 	.word	0x7ff00000

080165f4 <__ieee754_powf>:
 80165f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f8:	ee10 5a90 	vmov	r5, s1
 80165fc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8016600:	ed2d 8b02 	vpush	{d8}
 8016604:	eeb0 8a40 	vmov.f32	s16, s0
 8016608:	eef0 8a60 	vmov.f32	s17, s1
 801660c:	f000 8293 	beq.w	8016b36 <__ieee754_powf+0x542>
 8016610:	ee10 8a10 	vmov	r8, s0
 8016614:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8016618:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801661c:	dc06      	bgt.n	801662c <__ieee754_powf+0x38>
 801661e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016622:	dd0a      	ble.n	801663a <__ieee754_powf+0x46>
 8016624:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016628:	f000 8285 	beq.w	8016b36 <__ieee754_powf+0x542>
 801662c:	ecbd 8b02 	vpop	{d8}
 8016630:	48d9      	ldr	r0, [pc, #868]	; (8016998 <__ieee754_powf+0x3a4>)
 8016632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016636:	f001 ba2b 	b.w	8017a90 <nanf>
 801663a:	f1b8 0f00 	cmp.w	r8, #0
 801663e:	da1d      	bge.n	801667c <__ieee754_powf+0x88>
 8016640:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8016644:	da2c      	bge.n	80166a0 <__ieee754_powf+0xac>
 8016646:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801664a:	db30      	blt.n	80166ae <__ieee754_powf+0xba>
 801664c:	15fb      	asrs	r3, r7, #23
 801664e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016652:	fa47 f603 	asr.w	r6, r7, r3
 8016656:	fa06 f303 	lsl.w	r3, r6, r3
 801665a:	42bb      	cmp	r3, r7
 801665c:	d127      	bne.n	80166ae <__ieee754_powf+0xba>
 801665e:	f006 0601 	and.w	r6, r6, #1
 8016662:	f1c6 0602 	rsb	r6, r6, #2
 8016666:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801666a:	d122      	bne.n	80166b2 <__ieee754_powf+0xbe>
 801666c:	2d00      	cmp	r5, #0
 801666e:	f280 8268 	bge.w	8016b42 <__ieee754_powf+0x54e>
 8016672:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016676:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801667a:	e00d      	b.n	8016698 <__ieee754_powf+0xa4>
 801667c:	2600      	movs	r6, #0
 801667e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016682:	d1f0      	bne.n	8016666 <__ieee754_powf+0x72>
 8016684:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016688:	f000 8255 	beq.w	8016b36 <__ieee754_powf+0x542>
 801668c:	dd0a      	ble.n	80166a4 <__ieee754_powf+0xb0>
 801668e:	2d00      	cmp	r5, #0
 8016690:	f280 8254 	bge.w	8016b3c <__ieee754_powf+0x548>
 8016694:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801699c <__ieee754_powf+0x3a8>
 8016698:	ecbd 8b02 	vpop	{d8}
 801669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a0:	2602      	movs	r6, #2
 80166a2:	e7ec      	b.n	801667e <__ieee754_powf+0x8a>
 80166a4:	2d00      	cmp	r5, #0
 80166a6:	daf5      	bge.n	8016694 <__ieee754_powf+0xa0>
 80166a8:	eeb1 0a68 	vneg.f32	s0, s17
 80166ac:	e7f4      	b.n	8016698 <__ieee754_powf+0xa4>
 80166ae:	2600      	movs	r6, #0
 80166b0:	e7d9      	b.n	8016666 <__ieee754_powf+0x72>
 80166b2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80166b6:	d102      	bne.n	80166be <__ieee754_powf+0xca>
 80166b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80166bc:	e7ec      	b.n	8016698 <__ieee754_powf+0xa4>
 80166be:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80166c2:	eeb0 0a48 	vmov.f32	s0, s16
 80166c6:	d108      	bne.n	80166da <__ieee754_powf+0xe6>
 80166c8:	f1b8 0f00 	cmp.w	r8, #0
 80166cc:	db05      	blt.n	80166da <__ieee754_powf+0xe6>
 80166ce:	ecbd 8b02 	vpop	{d8}
 80166d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166d6:	f000 ba4d 	b.w	8016b74 <__ieee754_sqrtf>
 80166da:	f001 f9c7 	bl	8017a6c <fabsf>
 80166de:	b124      	cbz	r4, 80166ea <__ieee754_powf+0xf6>
 80166e0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80166e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80166e8:	d117      	bne.n	801671a <__ieee754_powf+0x126>
 80166ea:	2d00      	cmp	r5, #0
 80166ec:	bfbc      	itt	lt
 80166ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80166f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80166f6:	f1b8 0f00 	cmp.w	r8, #0
 80166fa:	dacd      	bge.n	8016698 <__ieee754_powf+0xa4>
 80166fc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8016700:	ea54 0306 	orrs.w	r3, r4, r6
 8016704:	d104      	bne.n	8016710 <__ieee754_powf+0x11c>
 8016706:	ee70 7a40 	vsub.f32	s15, s0, s0
 801670a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801670e:	e7c3      	b.n	8016698 <__ieee754_powf+0xa4>
 8016710:	2e01      	cmp	r6, #1
 8016712:	d1c1      	bne.n	8016698 <__ieee754_powf+0xa4>
 8016714:	eeb1 0a40 	vneg.f32	s0, s0
 8016718:	e7be      	b.n	8016698 <__ieee754_powf+0xa4>
 801671a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801671e:	3801      	subs	r0, #1
 8016720:	ea56 0300 	orrs.w	r3, r6, r0
 8016724:	d104      	bne.n	8016730 <__ieee754_powf+0x13c>
 8016726:	ee38 8a48 	vsub.f32	s16, s16, s16
 801672a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801672e:	e7b3      	b.n	8016698 <__ieee754_powf+0xa4>
 8016730:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8016734:	dd6d      	ble.n	8016812 <__ieee754_powf+0x21e>
 8016736:	4b9a      	ldr	r3, [pc, #616]	; (80169a0 <__ieee754_powf+0x3ac>)
 8016738:	429c      	cmp	r4, r3
 801673a:	dc06      	bgt.n	801674a <__ieee754_powf+0x156>
 801673c:	2d00      	cmp	r5, #0
 801673e:	daa9      	bge.n	8016694 <__ieee754_powf+0xa0>
 8016740:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80169a4 <__ieee754_powf+0x3b0>
 8016744:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016748:	e7a6      	b.n	8016698 <__ieee754_powf+0xa4>
 801674a:	4b97      	ldr	r3, [pc, #604]	; (80169a8 <__ieee754_powf+0x3b4>)
 801674c:	429c      	cmp	r4, r3
 801674e:	dd02      	ble.n	8016756 <__ieee754_powf+0x162>
 8016750:	2d00      	cmp	r5, #0
 8016752:	dcf5      	bgt.n	8016740 <__ieee754_powf+0x14c>
 8016754:	e79e      	b.n	8016694 <__ieee754_powf+0xa0>
 8016756:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801675a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801675e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80169ac <__ieee754_powf+0x3b8>
 8016762:	eef1 6a40 	vneg.f32	s13, s0
 8016766:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801676a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801676e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016772:	eee7 7a40 	vfms.f32	s15, s14, s0
 8016776:	ee60 0a00 	vmul.f32	s1, s0, s0
 801677a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80169b0 <__ieee754_powf+0x3bc>
 801677e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8016782:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80169b4 <__ieee754_powf+0x3c0>
 8016786:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801678a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801678e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80169b8 <__ieee754_powf+0x3c4>
 8016792:	eeb0 6a67 	vmov.f32	s12, s15
 8016796:	eea0 6a07 	vfma.f32	s12, s0, s14
 801679a:	ee16 3a10 	vmov	r3, s12
 801679e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80167a2:	f023 030f 	bic.w	r3, r3, #15
 80167a6:	ee00 3a90 	vmov	s1, r3
 80167aa:	eee6 0a87 	vfma.f32	s1, s13, s14
 80167ae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80167b2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80167b6:	f025 050f 	bic.w	r5, r5, #15
 80167ba:	ee07 5a10 	vmov	s14, r5
 80167be:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80167c2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80167c6:	ee07 3a90 	vmov	s15, r3
 80167ca:	eee7 0a27 	vfma.f32	s1, s14, s15
 80167ce:	3e01      	subs	r6, #1
 80167d0:	ea56 0200 	orrs.w	r2, r6, r0
 80167d4:	ee07 5a10 	vmov	s14, r5
 80167d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80167e0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80167e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80167e8:	ee17 4a10 	vmov	r4, s14
 80167ec:	bf08      	it	eq
 80167ee:	eeb0 8a40 	vmoveq.f32	s16, s0
 80167f2:	2c00      	cmp	r4, #0
 80167f4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80167f8:	f340 8184 	ble.w	8016b04 <__ieee754_powf+0x510>
 80167fc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8016800:	f340 80fc 	ble.w	80169fc <__ieee754_powf+0x408>
 8016804:	eddf 7a67 	vldr	s15, [pc, #412]	; 80169a4 <__ieee754_powf+0x3b0>
 8016808:	ee28 0a27 	vmul.f32	s0, s16, s15
 801680c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016810:	e742      	b.n	8016698 <__ieee754_powf+0xa4>
 8016812:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8016816:	bfbf      	itttt	lt
 8016818:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80169bc <__ieee754_powf+0x3c8>
 801681c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016820:	f06f 0217 	mvnlt.w	r2, #23
 8016824:	ee17 4a90 	vmovlt	r4, s15
 8016828:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801682c:	bfa8      	it	ge
 801682e:	2200      	movge	r2, #0
 8016830:	3b7f      	subs	r3, #127	; 0x7f
 8016832:	4413      	add	r3, r2
 8016834:	4a62      	ldr	r2, [pc, #392]	; (80169c0 <__ieee754_powf+0x3cc>)
 8016836:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801683a:	4294      	cmp	r4, r2
 801683c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8016840:	dd06      	ble.n	8016850 <__ieee754_powf+0x25c>
 8016842:	4a60      	ldr	r2, [pc, #384]	; (80169c4 <__ieee754_powf+0x3d0>)
 8016844:	4294      	cmp	r4, r2
 8016846:	f340 80a5 	ble.w	8016994 <__ieee754_powf+0x3a0>
 801684a:	3301      	adds	r3, #1
 801684c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8016850:	2400      	movs	r4, #0
 8016852:	4a5d      	ldr	r2, [pc, #372]	; (80169c8 <__ieee754_powf+0x3d4>)
 8016854:	00a7      	lsls	r7, r4, #2
 8016856:	443a      	add	r2, r7
 8016858:	ee07 1a90 	vmov	s15, r1
 801685c:	ed92 7a00 	vldr	s14, [r2]
 8016860:	4a5a      	ldr	r2, [pc, #360]	; (80169cc <__ieee754_powf+0x3d8>)
 8016862:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016866:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801686a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801686e:	1049      	asrs	r1, r1, #1
 8016870:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016874:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016878:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801687c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8016880:	ee06 1a10 	vmov	s12, r1
 8016884:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8016888:	ee14 ca90 	vmov	ip, s9
 801688c:	ea02 0c0c 	and.w	ip, r2, ip
 8016890:	ee05 ca10 	vmov	s10, ip
 8016894:	eeb1 4a45 	vneg.f32	s8, s10
 8016898:	eee4 5a06 	vfma.f32	s11, s8, s12
 801689c:	ee36 6a47 	vsub.f32	s12, s12, s14
 80168a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80169d0 <__ieee754_powf+0x3dc>
 80168a4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80168a8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80168ac:	eee4 5a06 	vfma.f32	s11, s8, s12
 80168b0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80168b4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80168b8:	eddf 5a46 	vldr	s11, [pc, #280]	; 80169d4 <__ieee754_powf+0x3e0>
 80168bc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80168c0:	eddf 5a45 	vldr	s11, [pc, #276]	; 80169d8 <__ieee754_powf+0x3e4>
 80168c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80168c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80169ac <__ieee754_powf+0x3b8>
 80168cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80168d0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80169dc <__ieee754_powf+0x3e8>
 80168d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80168d8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80169e0 <__ieee754_powf+0x3ec>
 80168dc:	ee75 6a24 	vadd.f32	s13, s10, s9
 80168e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80168e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80168e8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80168ec:	eef0 7a65 	vmov.f32	s15, s11
 80168f0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80168f4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80168f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80168fc:	ee17 1a90 	vmov	r1, s15
 8016900:	4011      	ands	r1, r2
 8016902:	ee07 1a90 	vmov	s15, r1
 8016906:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801690a:	eddf 5a36 	vldr	s11, [pc, #216]	; 80169e4 <__ieee754_powf+0x3f0>
 801690e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8016912:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016916:	ee27 7a24 	vmul.f32	s14, s14, s9
 801691a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801691e:	eeb0 6a47 	vmov.f32	s12, s14
 8016922:	eea5 6a27 	vfma.f32	s12, s10, s15
 8016926:	ee16 1a10 	vmov	r1, s12
 801692a:	4011      	ands	r1, r2
 801692c:	ee06 1a90 	vmov	s13, r1
 8016930:	eee4 6a27 	vfma.f32	s13, s8, s15
 8016934:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80169e8 <__ieee754_powf+0x3f4>
 8016938:	ee37 7a66 	vsub.f32	s14, s14, s13
 801693c:	ee06 1a10 	vmov	s12, r1
 8016940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016944:	eddf 7a29 	vldr	s15, [pc, #164]	; 80169ec <__ieee754_powf+0x3f8>
 8016948:	4929      	ldr	r1, [pc, #164]	; (80169f0 <__ieee754_powf+0x3fc>)
 801694a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801694e:	4439      	add	r1, r7
 8016950:	edd1 7a00 	vldr	s15, [r1]
 8016954:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016958:	ee07 3a90 	vmov	s15, r3
 801695c:	eef0 0a47 	vmov.f32	s1, s14
 8016960:	4b24      	ldr	r3, [pc, #144]	; (80169f4 <__ieee754_powf+0x400>)
 8016962:	eee6 0a25 	vfma.f32	s1, s12, s11
 8016966:	443b      	add	r3, r7
 8016968:	ed93 5a00 	vldr	s10, [r3]
 801696c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016970:	ee70 0a85 	vadd.f32	s1, s1, s10
 8016974:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8016978:	ee17 3a90 	vmov	r3, s15
 801697c:	4013      	ands	r3, r2
 801697e:	ee07 3a90 	vmov	s15, r3
 8016982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016986:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801698a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801698e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016992:	e70e      	b.n	80167b2 <__ieee754_powf+0x1be>
 8016994:	2401      	movs	r4, #1
 8016996:	e75c      	b.n	8016852 <__ieee754_powf+0x25e>
 8016998:	0801836b 	.word	0x0801836b
 801699c:	00000000 	.word	0x00000000
 80169a0:	3f7ffff7 	.word	0x3f7ffff7
 80169a4:	7149f2ca 	.word	0x7149f2ca
 80169a8:	3f800007 	.word	0x3f800007
 80169ac:	3eaaaaab 	.word	0x3eaaaaab
 80169b0:	36eca570 	.word	0x36eca570
 80169b4:	3fb8aa3b 	.word	0x3fb8aa3b
 80169b8:	3fb8aa00 	.word	0x3fb8aa00
 80169bc:	4b800000 	.word	0x4b800000
 80169c0:	001cc471 	.word	0x001cc471
 80169c4:	005db3d6 	.word	0x005db3d6
 80169c8:	080187c8 	.word	0x080187c8
 80169cc:	fffff000 	.word	0xfffff000
 80169d0:	3e6c3255 	.word	0x3e6c3255
 80169d4:	3e53f142 	.word	0x3e53f142
 80169d8:	3e8ba305 	.word	0x3e8ba305
 80169dc:	3edb6db7 	.word	0x3edb6db7
 80169e0:	3f19999a 	.word	0x3f19999a
 80169e4:	3f763800 	.word	0x3f763800
 80169e8:	3f76384f 	.word	0x3f76384f
 80169ec:	369dc3a0 	.word	0x369dc3a0
 80169f0:	080187d8 	.word	0x080187d8
 80169f4:	080187d0 	.word	0x080187d0
 80169f8:	3338aa3c 	.word	0x3338aa3c
 80169fc:	f040 8092 	bne.w	8016b24 <__ieee754_powf+0x530>
 8016a00:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80169f8 <__ieee754_powf+0x404>
 8016a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016a08:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8016a0c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a14:	f73f aef6 	bgt.w	8016804 <__ieee754_powf+0x210>
 8016a18:	15db      	asrs	r3, r3, #23
 8016a1a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8016a1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016a22:	4103      	asrs	r3, r0
 8016a24:	4423      	add	r3, r4
 8016a26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016a2a:	4947      	ldr	r1, [pc, #284]	; (8016b48 <__ieee754_powf+0x554>)
 8016a2c:	3a7f      	subs	r2, #127	; 0x7f
 8016a2e:	4111      	asrs	r1, r2
 8016a30:	ea23 0101 	bic.w	r1, r3, r1
 8016a34:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8016a38:	ee07 1a10 	vmov	s14, r1
 8016a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8016a40:	f1c2 0217 	rsb	r2, r2, #23
 8016a44:	4110      	asrs	r0, r2
 8016a46:	2c00      	cmp	r4, #0
 8016a48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a4c:	bfb8      	it	lt
 8016a4e:	4240      	neglt	r0, r0
 8016a50:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016a54:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016b4c <__ieee754_powf+0x558>
 8016a58:	ee17 3a10 	vmov	r3, s14
 8016a5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016a60:	f023 030f 	bic.w	r3, r3, #15
 8016a64:	ee07 3a10 	vmov	s14, r3
 8016a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a6c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016a70:	eddf 7a37 	vldr	s15, [pc, #220]	; 8016b50 <__ieee754_powf+0x55c>
 8016a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a78:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8016a7c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8016b54 <__ieee754_powf+0x560>
 8016a80:	eeb0 0a67 	vmov.f32	s0, s15
 8016a84:	eea7 0a26 	vfma.f32	s0, s14, s13
 8016a88:	eeb0 6a40 	vmov.f32	s12, s0
 8016a8c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016a90:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016a94:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016a98:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8016b58 <__ieee754_powf+0x564>
 8016a9c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8016b5c <__ieee754_powf+0x568>
 8016aa0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016aa4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8016b60 <__ieee754_powf+0x56c>
 8016aa8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016aac:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8016b64 <__ieee754_powf+0x570>
 8016ab0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016ab4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8016b68 <__ieee754_powf+0x574>
 8016ab8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016abc:	eeb0 6a40 	vmov.f32	s12, s0
 8016ac0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8016ac4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016ac8:	eeb0 7a46 	vmov.f32	s14, s12
 8016acc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016ad0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8016ad4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8016ad8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ae0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016ae4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016ae8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016aec:	ee10 3a10 	vmov	r3, s0
 8016af0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8016af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016af8:	da1a      	bge.n	8016b30 <__ieee754_powf+0x53c>
 8016afa:	f001 f829 	bl	8017b50 <scalbnf>
 8016afe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016b02:	e5c9      	b.n	8016698 <__ieee754_powf+0xa4>
 8016b04:	4a19      	ldr	r2, [pc, #100]	; (8016b6c <__ieee754_powf+0x578>)
 8016b06:	4293      	cmp	r3, r2
 8016b08:	dd02      	ble.n	8016b10 <__ieee754_powf+0x51c>
 8016b0a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016b70 <__ieee754_powf+0x57c>
 8016b0e:	e67b      	b.n	8016808 <__ieee754_powf+0x214>
 8016b10:	d108      	bne.n	8016b24 <__ieee754_powf+0x530>
 8016b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016b16:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8016b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b1e:	f6ff af7b 	blt.w	8016a18 <__ieee754_powf+0x424>
 8016b22:	e7f2      	b.n	8016b0a <__ieee754_powf+0x516>
 8016b24:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8016b28:	f73f af76 	bgt.w	8016a18 <__ieee754_powf+0x424>
 8016b2c:	2000      	movs	r0, #0
 8016b2e:	e78f      	b.n	8016a50 <__ieee754_powf+0x45c>
 8016b30:	ee00 3a10 	vmov	s0, r3
 8016b34:	e7e3      	b.n	8016afe <__ieee754_powf+0x50a>
 8016b36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016b3a:	e5ad      	b.n	8016698 <__ieee754_powf+0xa4>
 8016b3c:	eeb0 0a68 	vmov.f32	s0, s17
 8016b40:	e5aa      	b.n	8016698 <__ieee754_powf+0xa4>
 8016b42:	eeb0 0a48 	vmov.f32	s0, s16
 8016b46:	e5a7      	b.n	8016698 <__ieee754_powf+0xa4>
 8016b48:	007fffff 	.word	0x007fffff
 8016b4c:	3f317218 	.word	0x3f317218
 8016b50:	35bfbe8c 	.word	0x35bfbe8c
 8016b54:	3f317200 	.word	0x3f317200
 8016b58:	3331bb4c 	.word	0x3331bb4c
 8016b5c:	b5ddea0e 	.word	0xb5ddea0e
 8016b60:	388ab355 	.word	0x388ab355
 8016b64:	bb360b61 	.word	0xbb360b61
 8016b68:	3e2aaaab 	.word	0x3e2aaaab
 8016b6c:	43160000 	.word	0x43160000
 8016b70:	0da24260 	.word	0x0da24260

08016b74 <__ieee754_sqrtf>:
 8016b74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016b78:	4770      	bx	lr
 8016b7a:	0000      	movs	r0, r0
 8016b7c:	0000      	movs	r0, r0
	...

08016b80 <__kernel_cos>:
 8016b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b84:	ec59 8b10 	vmov	r8, r9, d0
 8016b88:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8016b8c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8016b90:	ed2d 8b02 	vpush	{d8}
 8016b94:	eeb0 8a41 	vmov.f32	s16, s2
 8016b98:	eef0 8a61 	vmov.f32	s17, s3
 8016b9c:	da07      	bge.n	8016bae <__kernel_cos+0x2e>
 8016b9e:	ee10 0a10 	vmov	r0, s0
 8016ba2:	4649      	mov	r1, r9
 8016ba4:	f7e9 fff8 	bl	8000b98 <__aeabi_d2iz>
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	f000 8089 	beq.w	8016cc0 <__kernel_cos+0x140>
 8016bae:	4642      	mov	r2, r8
 8016bb0:	464b      	mov	r3, r9
 8016bb2:	4640      	mov	r0, r8
 8016bb4:	4649      	mov	r1, r9
 8016bb6:	f7e9 fd3f 	bl	8000638 <__aeabi_dmul>
 8016bba:	2200      	movs	r2, #0
 8016bbc:	4b4e      	ldr	r3, [pc, #312]	; (8016cf8 <__kernel_cos+0x178>)
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	460d      	mov	r5, r1
 8016bc2:	f7e9 fd39 	bl	8000638 <__aeabi_dmul>
 8016bc6:	a340      	add	r3, pc, #256	; (adr r3, 8016cc8 <__kernel_cos+0x148>)
 8016bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bcc:	4682      	mov	sl, r0
 8016bce:	468b      	mov	fp, r1
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	4629      	mov	r1, r5
 8016bd4:	f7e9 fd30 	bl	8000638 <__aeabi_dmul>
 8016bd8:	a33d      	add	r3, pc, #244	; (adr r3, 8016cd0 <__kernel_cos+0x150>)
 8016bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bde:	f7e9 fb75 	bl	80002cc <__adddf3>
 8016be2:	4622      	mov	r2, r4
 8016be4:	462b      	mov	r3, r5
 8016be6:	f7e9 fd27 	bl	8000638 <__aeabi_dmul>
 8016bea:	a33b      	add	r3, pc, #236	; (adr r3, 8016cd8 <__kernel_cos+0x158>)
 8016bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf0:	f7e9 fb6a 	bl	80002c8 <__aeabi_dsub>
 8016bf4:	4622      	mov	r2, r4
 8016bf6:	462b      	mov	r3, r5
 8016bf8:	f7e9 fd1e 	bl	8000638 <__aeabi_dmul>
 8016bfc:	a338      	add	r3, pc, #224	; (adr r3, 8016ce0 <__kernel_cos+0x160>)
 8016bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c02:	f7e9 fb63 	bl	80002cc <__adddf3>
 8016c06:	4622      	mov	r2, r4
 8016c08:	462b      	mov	r3, r5
 8016c0a:	f7e9 fd15 	bl	8000638 <__aeabi_dmul>
 8016c0e:	a336      	add	r3, pc, #216	; (adr r3, 8016ce8 <__kernel_cos+0x168>)
 8016c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c14:	f7e9 fb58 	bl	80002c8 <__aeabi_dsub>
 8016c18:	4622      	mov	r2, r4
 8016c1a:	462b      	mov	r3, r5
 8016c1c:	f7e9 fd0c 	bl	8000638 <__aeabi_dmul>
 8016c20:	a333      	add	r3, pc, #204	; (adr r3, 8016cf0 <__kernel_cos+0x170>)
 8016c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c26:	f7e9 fb51 	bl	80002cc <__adddf3>
 8016c2a:	4622      	mov	r2, r4
 8016c2c:	462b      	mov	r3, r5
 8016c2e:	f7e9 fd03 	bl	8000638 <__aeabi_dmul>
 8016c32:	4622      	mov	r2, r4
 8016c34:	462b      	mov	r3, r5
 8016c36:	f7e9 fcff 	bl	8000638 <__aeabi_dmul>
 8016c3a:	ec53 2b18 	vmov	r2, r3, d8
 8016c3e:	4604      	mov	r4, r0
 8016c40:	460d      	mov	r5, r1
 8016c42:	4640      	mov	r0, r8
 8016c44:	4649      	mov	r1, r9
 8016c46:	f7e9 fcf7 	bl	8000638 <__aeabi_dmul>
 8016c4a:	460b      	mov	r3, r1
 8016c4c:	4602      	mov	r2, r0
 8016c4e:	4629      	mov	r1, r5
 8016c50:	4620      	mov	r0, r4
 8016c52:	f7e9 fb39 	bl	80002c8 <__aeabi_dsub>
 8016c56:	4b29      	ldr	r3, [pc, #164]	; (8016cfc <__kernel_cos+0x17c>)
 8016c58:	429e      	cmp	r6, r3
 8016c5a:	4680      	mov	r8, r0
 8016c5c:	4689      	mov	r9, r1
 8016c5e:	dc11      	bgt.n	8016c84 <__kernel_cos+0x104>
 8016c60:	4602      	mov	r2, r0
 8016c62:	460b      	mov	r3, r1
 8016c64:	4650      	mov	r0, sl
 8016c66:	4659      	mov	r1, fp
 8016c68:	f7e9 fb2e 	bl	80002c8 <__aeabi_dsub>
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	4924      	ldr	r1, [pc, #144]	; (8016d00 <__kernel_cos+0x180>)
 8016c70:	4602      	mov	r2, r0
 8016c72:	2000      	movs	r0, #0
 8016c74:	f7e9 fb28 	bl	80002c8 <__aeabi_dsub>
 8016c78:	ecbd 8b02 	vpop	{d8}
 8016c7c:	ec41 0b10 	vmov	d0, r0, r1
 8016c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c84:	4b1f      	ldr	r3, [pc, #124]	; (8016d04 <__kernel_cos+0x184>)
 8016c86:	491e      	ldr	r1, [pc, #120]	; (8016d00 <__kernel_cos+0x180>)
 8016c88:	429e      	cmp	r6, r3
 8016c8a:	bfcc      	ite	gt
 8016c8c:	4d1e      	ldrgt	r5, [pc, #120]	; (8016d08 <__kernel_cos+0x188>)
 8016c8e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8016c92:	2400      	movs	r4, #0
 8016c94:	4622      	mov	r2, r4
 8016c96:	462b      	mov	r3, r5
 8016c98:	2000      	movs	r0, #0
 8016c9a:	f7e9 fb15 	bl	80002c8 <__aeabi_dsub>
 8016c9e:	4622      	mov	r2, r4
 8016ca0:	4606      	mov	r6, r0
 8016ca2:	460f      	mov	r7, r1
 8016ca4:	462b      	mov	r3, r5
 8016ca6:	4650      	mov	r0, sl
 8016ca8:	4659      	mov	r1, fp
 8016caa:	f7e9 fb0d 	bl	80002c8 <__aeabi_dsub>
 8016cae:	4642      	mov	r2, r8
 8016cb0:	464b      	mov	r3, r9
 8016cb2:	f7e9 fb09 	bl	80002c8 <__aeabi_dsub>
 8016cb6:	4602      	mov	r2, r0
 8016cb8:	460b      	mov	r3, r1
 8016cba:	4630      	mov	r0, r6
 8016cbc:	4639      	mov	r1, r7
 8016cbe:	e7d9      	b.n	8016c74 <__kernel_cos+0xf4>
 8016cc0:	2000      	movs	r0, #0
 8016cc2:	490f      	ldr	r1, [pc, #60]	; (8016d00 <__kernel_cos+0x180>)
 8016cc4:	e7d8      	b.n	8016c78 <__kernel_cos+0xf8>
 8016cc6:	bf00      	nop
 8016cc8:	be8838d4 	.word	0xbe8838d4
 8016ccc:	bda8fae9 	.word	0xbda8fae9
 8016cd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8016cd4:	3e21ee9e 	.word	0x3e21ee9e
 8016cd8:	809c52ad 	.word	0x809c52ad
 8016cdc:	3e927e4f 	.word	0x3e927e4f
 8016ce0:	19cb1590 	.word	0x19cb1590
 8016ce4:	3efa01a0 	.word	0x3efa01a0
 8016ce8:	16c15177 	.word	0x16c15177
 8016cec:	3f56c16c 	.word	0x3f56c16c
 8016cf0:	5555554c 	.word	0x5555554c
 8016cf4:	3fa55555 	.word	0x3fa55555
 8016cf8:	3fe00000 	.word	0x3fe00000
 8016cfc:	3fd33332 	.word	0x3fd33332
 8016d00:	3ff00000 	.word	0x3ff00000
 8016d04:	3fe90000 	.word	0x3fe90000
 8016d08:	3fd20000 	.word	0x3fd20000
 8016d0c:	00000000 	.word	0x00000000

08016d10 <__kernel_rem_pio2>:
 8016d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d14:	ed2d 8b02 	vpush	{d8}
 8016d18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8016d1c:	1ed4      	subs	r4, r2, #3
 8016d1e:	9308      	str	r3, [sp, #32]
 8016d20:	9101      	str	r1, [sp, #4]
 8016d22:	4bc5      	ldr	r3, [pc, #788]	; (8017038 <__kernel_rem_pio2+0x328>)
 8016d24:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8016d26:	9009      	str	r0, [sp, #36]	; 0x24
 8016d28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d2c:	9304      	str	r3, [sp, #16]
 8016d2e:	9b08      	ldr	r3, [sp, #32]
 8016d30:	3b01      	subs	r3, #1
 8016d32:	9307      	str	r3, [sp, #28]
 8016d34:	2318      	movs	r3, #24
 8016d36:	fb94 f4f3 	sdiv	r4, r4, r3
 8016d3a:	f06f 0317 	mvn.w	r3, #23
 8016d3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016d42:	fb04 3303 	mla	r3, r4, r3, r3
 8016d46:	eb03 0a02 	add.w	sl, r3, r2
 8016d4a:	9b04      	ldr	r3, [sp, #16]
 8016d4c:	9a07      	ldr	r2, [sp, #28]
 8016d4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8017028 <__kernel_rem_pio2+0x318>
 8016d52:	eb03 0802 	add.w	r8, r3, r2
 8016d56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016d58:	1aa7      	subs	r7, r4, r2
 8016d5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016d5e:	ae22      	add	r6, sp, #136	; 0x88
 8016d60:	2500      	movs	r5, #0
 8016d62:	4545      	cmp	r5, r8
 8016d64:	dd13      	ble.n	8016d8e <__kernel_rem_pio2+0x7e>
 8016d66:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8017028 <__kernel_rem_pio2+0x318>
 8016d6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8016d6e:	2600      	movs	r6, #0
 8016d70:	9b04      	ldr	r3, [sp, #16]
 8016d72:	429e      	cmp	r6, r3
 8016d74:	dc32      	bgt.n	8016ddc <__kernel_rem_pio2+0xcc>
 8016d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d78:	9302      	str	r3, [sp, #8]
 8016d7a:	9b08      	ldr	r3, [sp, #32]
 8016d7c:	199d      	adds	r5, r3, r6
 8016d7e:	ab22      	add	r3, sp, #136	; 0x88
 8016d80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016d84:	9306      	str	r3, [sp, #24]
 8016d86:	ec59 8b18 	vmov	r8, r9, d8
 8016d8a:	2700      	movs	r7, #0
 8016d8c:	e01f      	b.n	8016dce <__kernel_rem_pio2+0xbe>
 8016d8e:	42ef      	cmn	r7, r5
 8016d90:	d407      	bmi.n	8016da2 <__kernel_rem_pio2+0x92>
 8016d92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016d96:	f7e9 fbe5 	bl	8000564 <__aeabi_i2d>
 8016d9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016d9e:	3501      	adds	r5, #1
 8016da0:	e7df      	b.n	8016d62 <__kernel_rem_pio2+0x52>
 8016da2:	ec51 0b18 	vmov	r0, r1, d8
 8016da6:	e7f8      	b.n	8016d9a <__kernel_rem_pio2+0x8a>
 8016da8:	9906      	ldr	r1, [sp, #24]
 8016daa:	9d02      	ldr	r5, [sp, #8]
 8016dac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8016db0:	9106      	str	r1, [sp, #24]
 8016db2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8016db6:	9502      	str	r5, [sp, #8]
 8016db8:	f7e9 fc3e 	bl	8000638 <__aeabi_dmul>
 8016dbc:	4602      	mov	r2, r0
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	4640      	mov	r0, r8
 8016dc2:	4649      	mov	r1, r9
 8016dc4:	f7e9 fa82 	bl	80002cc <__adddf3>
 8016dc8:	3701      	adds	r7, #1
 8016dca:	4680      	mov	r8, r0
 8016dcc:	4689      	mov	r9, r1
 8016dce:	9b07      	ldr	r3, [sp, #28]
 8016dd0:	429f      	cmp	r7, r3
 8016dd2:	dde9      	ble.n	8016da8 <__kernel_rem_pio2+0x98>
 8016dd4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8016dd8:	3601      	adds	r6, #1
 8016dda:	e7c9      	b.n	8016d70 <__kernel_rem_pio2+0x60>
 8016ddc:	9b04      	ldr	r3, [sp, #16]
 8016dde:	aa0e      	add	r2, sp, #56	; 0x38
 8016de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016de4:	930c      	str	r3, [sp, #48]	; 0x30
 8016de6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016de8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016dec:	9c04      	ldr	r4, [sp, #16]
 8016dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8016df0:	ab9a      	add	r3, sp, #616	; 0x268
 8016df2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8016df6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016dfe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8016e02:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016e06:	ab9a      	add	r3, sp, #616	; 0x268
 8016e08:	445b      	add	r3, fp
 8016e0a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8016e0e:	2500      	movs	r5, #0
 8016e10:	1b63      	subs	r3, r4, r5
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	dc78      	bgt.n	8016f08 <__kernel_rem_pio2+0x1f8>
 8016e16:	4650      	mov	r0, sl
 8016e18:	ec49 8b10 	vmov	d0, r8, r9
 8016e1c:	f000 fdb0 	bl	8017980 <scalbn>
 8016e20:	ec57 6b10 	vmov	r6, r7, d0
 8016e24:	2200      	movs	r2, #0
 8016e26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016e2a:	ee10 0a10 	vmov	r0, s0
 8016e2e:	4639      	mov	r1, r7
 8016e30:	f7e9 fc02 	bl	8000638 <__aeabi_dmul>
 8016e34:	ec41 0b10 	vmov	d0, r0, r1
 8016e38:	f000 fd12 	bl	8017860 <floor>
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	ec51 0b10 	vmov	r0, r1, d0
 8016e42:	4b7e      	ldr	r3, [pc, #504]	; (801703c <__kernel_rem_pio2+0x32c>)
 8016e44:	f7e9 fbf8 	bl	8000638 <__aeabi_dmul>
 8016e48:	4602      	mov	r2, r0
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	4639      	mov	r1, r7
 8016e50:	f7e9 fa3a 	bl	80002c8 <__aeabi_dsub>
 8016e54:	460f      	mov	r7, r1
 8016e56:	4606      	mov	r6, r0
 8016e58:	f7e9 fe9e 	bl	8000b98 <__aeabi_d2iz>
 8016e5c:	9006      	str	r0, [sp, #24]
 8016e5e:	f7e9 fb81 	bl	8000564 <__aeabi_i2d>
 8016e62:	4602      	mov	r2, r0
 8016e64:	460b      	mov	r3, r1
 8016e66:	4630      	mov	r0, r6
 8016e68:	4639      	mov	r1, r7
 8016e6a:	f7e9 fa2d 	bl	80002c8 <__aeabi_dsub>
 8016e6e:	f1ba 0f00 	cmp.w	sl, #0
 8016e72:	4606      	mov	r6, r0
 8016e74:	460f      	mov	r7, r1
 8016e76:	dd6c      	ble.n	8016f52 <__kernel_rem_pio2+0x242>
 8016e78:	1e62      	subs	r2, r4, #1
 8016e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8016e7c:	f1ca 0118 	rsb	r1, sl, #24
 8016e80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016e84:	9d06      	ldr	r5, [sp, #24]
 8016e86:	fa40 f301 	asr.w	r3, r0, r1
 8016e8a:	441d      	add	r5, r3
 8016e8c:	408b      	lsls	r3, r1
 8016e8e:	1ac0      	subs	r0, r0, r3
 8016e90:	ab0e      	add	r3, sp, #56	; 0x38
 8016e92:	9506      	str	r5, [sp, #24]
 8016e94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016e98:	f1ca 0317 	rsb	r3, sl, #23
 8016e9c:	fa40 f303 	asr.w	r3, r0, r3
 8016ea0:	9302      	str	r3, [sp, #8]
 8016ea2:	9b02      	ldr	r3, [sp, #8]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	dd62      	ble.n	8016f6e <__kernel_rem_pio2+0x25e>
 8016ea8:	9b06      	ldr	r3, [sp, #24]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	3301      	adds	r3, #1
 8016eae:	9306      	str	r3, [sp, #24]
 8016eb0:	4615      	mov	r5, r2
 8016eb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016eb6:	4294      	cmp	r4, r2
 8016eb8:	f300 8095 	bgt.w	8016fe6 <__kernel_rem_pio2+0x2d6>
 8016ebc:	f1ba 0f00 	cmp.w	sl, #0
 8016ec0:	dd07      	ble.n	8016ed2 <__kernel_rem_pio2+0x1c2>
 8016ec2:	f1ba 0f01 	cmp.w	sl, #1
 8016ec6:	f000 80a2 	beq.w	801700e <__kernel_rem_pio2+0x2fe>
 8016eca:	f1ba 0f02 	cmp.w	sl, #2
 8016ece:	f000 80c1 	beq.w	8017054 <__kernel_rem_pio2+0x344>
 8016ed2:	9b02      	ldr	r3, [sp, #8]
 8016ed4:	2b02      	cmp	r3, #2
 8016ed6:	d14a      	bne.n	8016f6e <__kernel_rem_pio2+0x25e>
 8016ed8:	4632      	mov	r2, r6
 8016eda:	463b      	mov	r3, r7
 8016edc:	2000      	movs	r0, #0
 8016ede:	4958      	ldr	r1, [pc, #352]	; (8017040 <__kernel_rem_pio2+0x330>)
 8016ee0:	f7e9 f9f2 	bl	80002c8 <__aeabi_dsub>
 8016ee4:	4606      	mov	r6, r0
 8016ee6:	460f      	mov	r7, r1
 8016ee8:	2d00      	cmp	r5, #0
 8016eea:	d040      	beq.n	8016f6e <__kernel_rem_pio2+0x25e>
 8016eec:	4650      	mov	r0, sl
 8016eee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8017030 <__kernel_rem_pio2+0x320>
 8016ef2:	f000 fd45 	bl	8017980 <scalbn>
 8016ef6:	4630      	mov	r0, r6
 8016ef8:	4639      	mov	r1, r7
 8016efa:	ec53 2b10 	vmov	r2, r3, d0
 8016efe:	f7e9 f9e3 	bl	80002c8 <__aeabi_dsub>
 8016f02:	4606      	mov	r6, r0
 8016f04:	460f      	mov	r7, r1
 8016f06:	e032      	b.n	8016f6e <__kernel_rem_pio2+0x25e>
 8016f08:	2200      	movs	r2, #0
 8016f0a:	4b4e      	ldr	r3, [pc, #312]	; (8017044 <__kernel_rem_pio2+0x334>)
 8016f0c:	4640      	mov	r0, r8
 8016f0e:	4649      	mov	r1, r9
 8016f10:	f7e9 fb92 	bl	8000638 <__aeabi_dmul>
 8016f14:	f7e9 fe40 	bl	8000b98 <__aeabi_d2iz>
 8016f18:	f7e9 fb24 	bl	8000564 <__aeabi_i2d>
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	4b4a      	ldr	r3, [pc, #296]	; (8017048 <__kernel_rem_pio2+0x338>)
 8016f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f24:	f7e9 fb88 	bl	8000638 <__aeabi_dmul>
 8016f28:	4602      	mov	r2, r0
 8016f2a:	460b      	mov	r3, r1
 8016f2c:	4640      	mov	r0, r8
 8016f2e:	4649      	mov	r1, r9
 8016f30:	f7e9 f9ca 	bl	80002c8 <__aeabi_dsub>
 8016f34:	f7e9 fe30 	bl	8000b98 <__aeabi_d2iz>
 8016f38:	ab0e      	add	r3, sp, #56	; 0x38
 8016f3a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8016f3e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8016f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f46:	f7e9 f9c1 	bl	80002cc <__adddf3>
 8016f4a:	3501      	adds	r5, #1
 8016f4c:	4680      	mov	r8, r0
 8016f4e:	4689      	mov	r9, r1
 8016f50:	e75e      	b.n	8016e10 <__kernel_rem_pio2+0x100>
 8016f52:	d105      	bne.n	8016f60 <__kernel_rem_pio2+0x250>
 8016f54:	1e63      	subs	r3, r4, #1
 8016f56:	aa0e      	add	r2, sp, #56	; 0x38
 8016f58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016f5c:	15c3      	asrs	r3, r0, #23
 8016f5e:	e79f      	b.n	8016ea0 <__kernel_rem_pio2+0x190>
 8016f60:	2200      	movs	r2, #0
 8016f62:	4b3a      	ldr	r3, [pc, #232]	; (801704c <__kernel_rem_pio2+0x33c>)
 8016f64:	f7e9 fdee 	bl	8000b44 <__aeabi_dcmpge>
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	d139      	bne.n	8016fe0 <__kernel_rem_pio2+0x2d0>
 8016f6c:	9002      	str	r0, [sp, #8]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	2300      	movs	r3, #0
 8016f72:	4630      	mov	r0, r6
 8016f74:	4639      	mov	r1, r7
 8016f76:	f7e9 fdc7 	bl	8000b08 <__aeabi_dcmpeq>
 8016f7a:	2800      	cmp	r0, #0
 8016f7c:	f000 80c7 	beq.w	801710e <__kernel_rem_pio2+0x3fe>
 8016f80:	1e65      	subs	r5, r4, #1
 8016f82:	462b      	mov	r3, r5
 8016f84:	2200      	movs	r2, #0
 8016f86:	9904      	ldr	r1, [sp, #16]
 8016f88:	428b      	cmp	r3, r1
 8016f8a:	da6a      	bge.n	8017062 <__kernel_rem_pio2+0x352>
 8016f8c:	2a00      	cmp	r2, #0
 8016f8e:	f000 8088 	beq.w	80170a2 <__kernel_rem_pio2+0x392>
 8016f92:	ab0e      	add	r3, sp, #56	; 0x38
 8016f94:	f1aa 0a18 	sub.w	sl, sl, #24
 8016f98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f000 80b4 	beq.w	801710a <__kernel_rem_pio2+0x3fa>
 8016fa2:	4650      	mov	r0, sl
 8016fa4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8017030 <__kernel_rem_pio2+0x320>
 8016fa8:	f000 fcea 	bl	8017980 <scalbn>
 8016fac:	00ec      	lsls	r4, r5, #3
 8016fae:	ab72      	add	r3, sp, #456	; 0x1c8
 8016fb0:	191e      	adds	r6, r3, r4
 8016fb2:	ec59 8b10 	vmov	r8, r9, d0
 8016fb6:	f106 0a08 	add.w	sl, r6, #8
 8016fba:	462f      	mov	r7, r5
 8016fbc:	2f00      	cmp	r7, #0
 8016fbe:	f280 80df 	bge.w	8017180 <__kernel_rem_pio2+0x470>
 8016fc2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8017028 <__kernel_rem_pio2+0x318>
 8016fc6:	f04f 0a00 	mov.w	sl, #0
 8016fca:	eba5 030a 	sub.w	r3, r5, sl
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	f2c0 810a 	blt.w	80171e8 <__kernel_rem_pio2+0x4d8>
 8016fd4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8017050 <__kernel_rem_pio2+0x340>
 8016fd8:	ec59 8b18 	vmov	r8, r9, d8
 8016fdc:	2700      	movs	r7, #0
 8016fde:	e0f5      	b.n	80171cc <__kernel_rem_pio2+0x4bc>
 8016fe0:	2302      	movs	r3, #2
 8016fe2:	9302      	str	r3, [sp, #8]
 8016fe4:	e760      	b.n	8016ea8 <__kernel_rem_pio2+0x198>
 8016fe6:	ab0e      	add	r3, sp, #56	; 0x38
 8016fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fec:	b94d      	cbnz	r5, 8017002 <__kernel_rem_pio2+0x2f2>
 8016fee:	b12b      	cbz	r3, 8016ffc <__kernel_rem_pio2+0x2ec>
 8016ff0:	a80e      	add	r0, sp, #56	; 0x38
 8016ff2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016ff6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016ffa:	2301      	movs	r3, #1
 8016ffc:	3201      	adds	r2, #1
 8016ffe:	461d      	mov	r5, r3
 8017000:	e759      	b.n	8016eb6 <__kernel_rem_pio2+0x1a6>
 8017002:	a80e      	add	r0, sp, #56	; 0x38
 8017004:	1acb      	subs	r3, r1, r3
 8017006:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801700a:	462b      	mov	r3, r5
 801700c:	e7f6      	b.n	8016ffc <__kernel_rem_pio2+0x2ec>
 801700e:	1e62      	subs	r2, r4, #1
 8017010:	ab0e      	add	r3, sp, #56	; 0x38
 8017012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017016:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801701a:	a90e      	add	r1, sp, #56	; 0x38
 801701c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017020:	e757      	b.n	8016ed2 <__kernel_rem_pio2+0x1c2>
 8017022:	bf00      	nop
 8017024:	f3af 8000 	nop.w
	...
 8017034:	3ff00000 	.word	0x3ff00000
 8017038:	08018820 	.word	0x08018820
 801703c:	40200000 	.word	0x40200000
 8017040:	3ff00000 	.word	0x3ff00000
 8017044:	3e700000 	.word	0x3e700000
 8017048:	41700000 	.word	0x41700000
 801704c:	3fe00000 	.word	0x3fe00000
 8017050:	080187e0 	.word	0x080187e0
 8017054:	1e62      	subs	r2, r4, #1
 8017056:	ab0e      	add	r3, sp, #56	; 0x38
 8017058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801705c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017060:	e7db      	b.n	801701a <__kernel_rem_pio2+0x30a>
 8017062:	a90e      	add	r1, sp, #56	; 0x38
 8017064:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017068:	3b01      	subs	r3, #1
 801706a:	430a      	orrs	r2, r1
 801706c:	e78b      	b.n	8016f86 <__kernel_rem_pio2+0x276>
 801706e:	3301      	adds	r3, #1
 8017070:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017074:	2900      	cmp	r1, #0
 8017076:	d0fa      	beq.n	801706e <__kernel_rem_pio2+0x35e>
 8017078:	9a08      	ldr	r2, [sp, #32]
 801707a:	4422      	add	r2, r4
 801707c:	00d2      	lsls	r2, r2, #3
 801707e:	a922      	add	r1, sp, #136	; 0x88
 8017080:	18e3      	adds	r3, r4, r3
 8017082:	9206      	str	r2, [sp, #24]
 8017084:	440a      	add	r2, r1
 8017086:	9302      	str	r3, [sp, #8]
 8017088:	f10b 0108 	add.w	r1, fp, #8
 801708c:	f102 0308 	add.w	r3, r2, #8
 8017090:	1c66      	adds	r6, r4, #1
 8017092:	910a      	str	r1, [sp, #40]	; 0x28
 8017094:	2500      	movs	r5, #0
 8017096:	930d      	str	r3, [sp, #52]	; 0x34
 8017098:	9b02      	ldr	r3, [sp, #8]
 801709a:	42b3      	cmp	r3, r6
 801709c:	da04      	bge.n	80170a8 <__kernel_rem_pio2+0x398>
 801709e:	461c      	mov	r4, r3
 80170a0:	e6a6      	b.n	8016df0 <__kernel_rem_pio2+0xe0>
 80170a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80170a4:	2301      	movs	r3, #1
 80170a6:	e7e3      	b.n	8017070 <__kernel_rem_pio2+0x360>
 80170a8:	9b06      	ldr	r3, [sp, #24]
 80170aa:	18ef      	adds	r7, r5, r3
 80170ac:	ab22      	add	r3, sp, #136	; 0x88
 80170ae:	441f      	add	r7, r3
 80170b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80170b6:	f7e9 fa55 	bl	8000564 <__aeabi_i2d>
 80170ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170bc:	461c      	mov	r4, r3
 80170be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170c0:	e9c7 0100 	strd	r0, r1, [r7]
 80170c4:	eb03 0b05 	add.w	fp, r3, r5
 80170c8:	2700      	movs	r7, #0
 80170ca:	f04f 0800 	mov.w	r8, #0
 80170ce:	f04f 0900 	mov.w	r9, #0
 80170d2:	9b07      	ldr	r3, [sp, #28]
 80170d4:	429f      	cmp	r7, r3
 80170d6:	dd08      	ble.n	80170ea <__kernel_rem_pio2+0x3da>
 80170d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170da:	aa72      	add	r2, sp, #456	; 0x1c8
 80170dc:	18eb      	adds	r3, r5, r3
 80170de:	4413      	add	r3, r2
 80170e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80170e4:	3601      	adds	r6, #1
 80170e6:	3508      	adds	r5, #8
 80170e8:	e7d6      	b.n	8017098 <__kernel_rem_pio2+0x388>
 80170ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80170ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80170f2:	f7e9 faa1 	bl	8000638 <__aeabi_dmul>
 80170f6:	4602      	mov	r2, r0
 80170f8:	460b      	mov	r3, r1
 80170fa:	4640      	mov	r0, r8
 80170fc:	4649      	mov	r1, r9
 80170fe:	f7e9 f8e5 	bl	80002cc <__adddf3>
 8017102:	3701      	adds	r7, #1
 8017104:	4680      	mov	r8, r0
 8017106:	4689      	mov	r9, r1
 8017108:	e7e3      	b.n	80170d2 <__kernel_rem_pio2+0x3c2>
 801710a:	3d01      	subs	r5, #1
 801710c:	e741      	b.n	8016f92 <__kernel_rem_pio2+0x282>
 801710e:	f1ca 0000 	rsb	r0, sl, #0
 8017112:	ec47 6b10 	vmov	d0, r6, r7
 8017116:	f000 fc33 	bl	8017980 <scalbn>
 801711a:	ec57 6b10 	vmov	r6, r7, d0
 801711e:	2200      	movs	r2, #0
 8017120:	4b99      	ldr	r3, [pc, #612]	; (8017388 <__kernel_rem_pio2+0x678>)
 8017122:	ee10 0a10 	vmov	r0, s0
 8017126:	4639      	mov	r1, r7
 8017128:	f7e9 fd0c 	bl	8000b44 <__aeabi_dcmpge>
 801712c:	b1f8      	cbz	r0, 801716e <__kernel_rem_pio2+0x45e>
 801712e:	2200      	movs	r2, #0
 8017130:	4b96      	ldr	r3, [pc, #600]	; (801738c <__kernel_rem_pio2+0x67c>)
 8017132:	4630      	mov	r0, r6
 8017134:	4639      	mov	r1, r7
 8017136:	f7e9 fa7f 	bl	8000638 <__aeabi_dmul>
 801713a:	f7e9 fd2d 	bl	8000b98 <__aeabi_d2iz>
 801713e:	4680      	mov	r8, r0
 8017140:	f7e9 fa10 	bl	8000564 <__aeabi_i2d>
 8017144:	2200      	movs	r2, #0
 8017146:	4b90      	ldr	r3, [pc, #576]	; (8017388 <__kernel_rem_pio2+0x678>)
 8017148:	f7e9 fa76 	bl	8000638 <__aeabi_dmul>
 801714c:	460b      	mov	r3, r1
 801714e:	4602      	mov	r2, r0
 8017150:	4639      	mov	r1, r7
 8017152:	4630      	mov	r0, r6
 8017154:	f7e9 f8b8 	bl	80002c8 <__aeabi_dsub>
 8017158:	f7e9 fd1e 	bl	8000b98 <__aeabi_d2iz>
 801715c:	1c65      	adds	r5, r4, #1
 801715e:	ab0e      	add	r3, sp, #56	; 0x38
 8017160:	f10a 0a18 	add.w	sl, sl, #24
 8017164:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017168:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801716c:	e719      	b.n	8016fa2 <__kernel_rem_pio2+0x292>
 801716e:	4630      	mov	r0, r6
 8017170:	4639      	mov	r1, r7
 8017172:	f7e9 fd11 	bl	8000b98 <__aeabi_d2iz>
 8017176:	ab0e      	add	r3, sp, #56	; 0x38
 8017178:	4625      	mov	r5, r4
 801717a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801717e:	e710      	b.n	8016fa2 <__kernel_rem_pio2+0x292>
 8017180:	ab0e      	add	r3, sp, #56	; 0x38
 8017182:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8017186:	f7e9 f9ed 	bl	8000564 <__aeabi_i2d>
 801718a:	4642      	mov	r2, r8
 801718c:	464b      	mov	r3, r9
 801718e:	f7e9 fa53 	bl	8000638 <__aeabi_dmul>
 8017192:	2200      	movs	r2, #0
 8017194:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8017198:	4b7c      	ldr	r3, [pc, #496]	; (801738c <__kernel_rem_pio2+0x67c>)
 801719a:	4640      	mov	r0, r8
 801719c:	4649      	mov	r1, r9
 801719e:	f7e9 fa4b 	bl	8000638 <__aeabi_dmul>
 80171a2:	3f01      	subs	r7, #1
 80171a4:	4680      	mov	r8, r0
 80171a6:	4689      	mov	r9, r1
 80171a8:	e708      	b.n	8016fbc <__kernel_rem_pio2+0x2ac>
 80171aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80171ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80171b6:	f7e9 fa3f 	bl	8000638 <__aeabi_dmul>
 80171ba:	4602      	mov	r2, r0
 80171bc:	460b      	mov	r3, r1
 80171be:	4640      	mov	r0, r8
 80171c0:	4649      	mov	r1, r9
 80171c2:	f7e9 f883 	bl	80002cc <__adddf3>
 80171c6:	3701      	adds	r7, #1
 80171c8:	4680      	mov	r8, r0
 80171ca:	4689      	mov	r9, r1
 80171cc:	9b04      	ldr	r3, [sp, #16]
 80171ce:	429f      	cmp	r7, r3
 80171d0:	dc01      	bgt.n	80171d6 <__kernel_rem_pio2+0x4c6>
 80171d2:	45ba      	cmp	sl, r7
 80171d4:	dae9      	bge.n	80171aa <__kernel_rem_pio2+0x49a>
 80171d6:	ab4a      	add	r3, sp, #296	; 0x128
 80171d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80171dc:	e9c3 8900 	strd	r8, r9, [r3]
 80171e0:	f10a 0a01 	add.w	sl, sl, #1
 80171e4:	3e08      	subs	r6, #8
 80171e6:	e6f0      	b.n	8016fca <__kernel_rem_pio2+0x2ba>
 80171e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80171ea:	2b03      	cmp	r3, #3
 80171ec:	d85b      	bhi.n	80172a6 <__kernel_rem_pio2+0x596>
 80171ee:	e8df f003 	tbb	[pc, r3]
 80171f2:	264a      	.short	0x264a
 80171f4:	0226      	.short	0x0226
 80171f6:	ab9a      	add	r3, sp, #616	; 0x268
 80171f8:	441c      	add	r4, r3
 80171fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80171fe:	46a2      	mov	sl, r4
 8017200:	46ab      	mov	fp, r5
 8017202:	f1bb 0f00 	cmp.w	fp, #0
 8017206:	dc6c      	bgt.n	80172e2 <__kernel_rem_pio2+0x5d2>
 8017208:	46a2      	mov	sl, r4
 801720a:	46ab      	mov	fp, r5
 801720c:	f1bb 0f01 	cmp.w	fp, #1
 8017210:	f300 8086 	bgt.w	8017320 <__kernel_rem_pio2+0x610>
 8017214:	2000      	movs	r0, #0
 8017216:	2100      	movs	r1, #0
 8017218:	2d01      	cmp	r5, #1
 801721a:	f300 80a0 	bgt.w	801735e <__kernel_rem_pio2+0x64e>
 801721e:	9b02      	ldr	r3, [sp, #8]
 8017220:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8017224:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8017228:	2b00      	cmp	r3, #0
 801722a:	f040 809e 	bne.w	801736a <__kernel_rem_pio2+0x65a>
 801722e:	9b01      	ldr	r3, [sp, #4]
 8017230:	e9c3 7800 	strd	r7, r8, [r3]
 8017234:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017238:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801723c:	e033      	b.n	80172a6 <__kernel_rem_pio2+0x596>
 801723e:	3408      	adds	r4, #8
 8017240:	ab4a      	add	r3, sp, #296	; 0x128
 8017242:	441c      	add	r4, r3
 8017244:	462e      	mov	r6, r5
 8017246:	2000      	movs	r0, #0
 8017248:	2100      	movs	r1, #0
 801724a:	2e00      	cmp	r6, #0
 801724c:	da3a      	bge.n	80172c4 <__kernel_rem_pio2+0x5b4>
 801724e:	9b02      	ldr	r3, [sp, #8]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d03d      	beq.n	80172d0 <__kernel_rem_pio2+0x5c0>
 8017254:	4602      	mov	r2, r0
 8017256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801725a:	9c01      	ldr	r4, [sp, #4]
 801725c:	e9c4 2300 	strd	r2, r3, [r4]
 8017260:	4602      	mov	r2, r0
 8017262:	460b      	mov	r3, r1
 8017264:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8017268:	f7e9 f82e 	bl	80002c8 <__aeabi_dsub>
 801726c:	ae4c      	add	r6, sp, #304	; 0x130
 801726e:	2401      	movs	r4, #1
 8017270:	42a5      	cmp	r5, r4
 8017272:	da30      	bge.n	80172d6 <__kernel_rem_pio2+0x5c6>
 8017274:	9b02      	ldr	r3, [sp, #8]
 8017276:	b113      	cbz	r3, 801727e <__kernel_rem_pio2+0x56e>
 8017278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801727c:	4619      	mov	r1, r3
 801727e:	9b01      	ldr	r3, [sp, #4]
 8017280:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017284:	e00f      	b.n	80172a6 <__kernel_rem_pio2+0x596>
 8017286:	ab9a      	add	r3, sp, #616	; 0x268
 8017288:	441c      	add	r4, r3
 801728a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801728e:	2000      	movs	r0, #0
 8017290:	2100      	movs	r1, #0
 8017292:	2d00      	cmp	r5, #0
 8017294:	da10      	bge.n	80172b8 <__kernel_rem_pio2+0x5a8>
 8017296:	9b02      	ldr	r3, [sp, #8]
 8017298:	b113      	cbz	r3, 80172a0 <__kernel_rem_pio2+0x590>
 801729a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801729e:	4619      	mov	r1, r3
 80172a0:	9b01      	ldr	r3, [sp, #4]
 80172a2:	e9c3 0100 	strd	r0, r1, [r3]
 80172a6:	9b06      	ldr	r3, [sp, #24]
 80172a8:	f003 0007 	and.w	r0, r3, #7
 80172ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80172b0:	ecbd 8b02 	vpop	{d8}
 80172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80172bc:	f7e9 f806 	bl	80002cc <__adddf3>
 80172c0:	3d01      	subs	r5, #1
 80172c2:	e7e6      	b.n	8017292 <__kernel_rem_pio2+0x582>
 80172c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80172c8:	f7e9 f800 	bl	80002cc <__adddf3>
 80172cc:	3e01      	subs	r6, #1
 80172ce:	e7bc      	b.n	801724a <__kernel_rem_pio2+0x53a>
 80172d0:	4602      	mov	r2, r0
 80172d2:	460b      	mov	r3, r1
 80172d4:	e7c1      	b.n	801725a <__kernel_rem_pio2+0x54a>
 80172d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80172da:	f7e8 fff7 	bl	80002cc <__adddf3>
 80172de:	3401      	adds	r4, #1
 80172e0:	e7c6      	b.n	8017270 <__kernel_rem_pio2+0x560>
 80172e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80172e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80172ea:	4640      	mov	r0, r8
 80172ec:	ec53 2b17 	vmov	r2, r3, d7
 80172f0:	4649      	mov	r1, r9
 80172f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80172f6:	f7e8 ffe9 	bl	80002cc <__adddf3>
 80172fa:	4602      	mov	r2, r0
 80172fc:	460b      	mov	r3, r1
 80172fe:	4606      	mov	r6, r0
 8017300:	460f      	mov	r7, r1
 8017302:	4640      	mov	r0, r8
 8017304:	4649      	mov	r1, r9
 8017306:	f7e8 ffdf 	bl	80002c8 <__aeabi_dsub>
 801730a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801730e:	f7e8 ffdd 	bl	80002cc <__adddf3>
 8017312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017316:	e9ca 0100 	strd	r0, r1, [sl]
 801731a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801731e:	e770      	b.n	8017202 <__kernel_rem_pio2+0x4f2>
 8017320:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8017324:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017328:	4630      	mov	r0, r6
 801732a:	ec53 2b17 	vmov	r2, r3, d7
 801732e:	4639      	mov	r1, r7
 8017330:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017334:	f7e8 ffca 	bl	80002cc <__adddf3>
 8017338:	4602      	mov	r2, r0
 801733a:	460b      	mov	r3, r1
 801733c:	4680      	mov	r8, r0
 801733e:	4689      	mov	r9, r1
 8017340:	4630      	mov	r0, r6
 8017342:	4639      	mov	r1, r7
 8017344:	f7e8 ffc0 	bl	80002c8 <__aeabi_dsub>
 8017348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801734c:	f7e8 ffbe 	bl	80002cc <__adddf3>
 8017350:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017354:	e9ca 0100 	strd	r0, r1, [sl]
 8017358:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801735c:	e756      	b.n	801720c <__kernel_rem_pio2+0x4fc>
 801735e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017362:	f7e8 ffb3 	bl	80002cc <__adddf3>
 8017366:	3d01      	subs	r5, #1
 8017368:	e756      	b.n	8017218 <__kernel_rem_pio2+0x508>
 801736a:	9b01      	ldr	r3, [sp, #4]
 801736c:	9a01      	ldr	r2, [sp, #4]
 801736e:	601f      	str	r7, [r3, #0]
 8017370:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8017374:	605c      	str	r4, [r3, #4]
 8017376:	609d      	str	r5, [r3, #8]
 8017378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801737c:	60d3      	str	r3, [r2, #12]
 801737e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017382:	6110      	str	r0, [r2, #16]
 8017384:	6153      	str	r3, [r2, #20]
 8017386:	e78e      	b.n	80172a6 <__kernel_rem_pio2+0x596>
 8017388:	41700000 	.word	0x41700000
 801738c:	3e700000 	.word	0x3e700000

08017390 <__kernel_sin>:
 8017390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017394:	ec55 4b10 	vmov	r4, r5, d0
 8017398:	b085      	sub	sp, #20
 801739a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801739e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80173a2:	ed8d 1b00 	vstr	d1, [sp]
 80173a6:	9002      	str	r0, [sp, #8]
 80173a8:	da06      	bge.n	80173b8 <__kernel_sin+0x28>
 80173aa:	ee10 0a10 	vmov	r0, s0
 80173ae:	4629      	mov	r1, r5
 80173b0:	f7e9 fbf2 	bl	8000b98 <__aeabi_d2iz>
 80173b4:	2800      	cmp	r0, #0
 80173b6:	d051      	beq.n	801745c <__kernel_sin+0xcc>
 80173b8:	4622      	mov	r2, r4
 80173ba:	462b      	mov	r3, r5
 80173bc:	4620      	mov	r0, r4
 80173be:	4629      	mov	r1, r5
 80173c0:	f7e9 f93a 	bl	8000638 <__aeabi_dmul>
 80173c4:	4682      	mov	sl, r0
 80173c6:	468b      	mov	fp, r1
 80173c8:	4602      	mov	r2, r0
 80173ca:	460b      	mov	r3, r1
 80173cc:	4620      	mov	r0, r4
 80173ce:	4629      	mov	r1, r5
 80173d0:	f7e9 f932 	bl	8000638 <__aeabi_dmul>
 80173d4:	a341      	add	r3, pc, #260	; (adr r3, 80174dc <__kernel_sin+0x14c>)
 80173d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173da:	4680      	mov	r8, r0
 80173dc:	4689      	mov	r9, r1
 80173de:	4650      	mov	r0, sl
 80173e0:	4659      	mov	r1, fp
 80173e2:	f7e9 f929 	bl	8000638 <__aeabi_dmul>
 80173e6:	a33f      	add	r3, pc, #252	; (adr r3, 80174e4 <__kernel_sin+0x154>)
 80173e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ec:	f7e8 ff6c 	bl	80002c8 <__aeabi_dsub>
 80173f0:	4652      	mov	r2, sl
 80173f2:	465b      	mov	r3, fp
 80173f4:	f7e9 f920 	bl	8000638 <__aeabi_dmul>
 80173f8:	a33c      	add	r3, pc, #240	; (adr r3, 80174ec <__kernel_sin+0x15c>)
 80173fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173fe:	f7e8 ff65 	bl	80002cc <__adddf3>
 8017402:	4652      	mov	r2, sl
 8017404:	465b      	mov	r3, fp
 8017406:	f7e9 f917 	bl	8000638 <__aeabi_dmul>
 801740a:	a33a      	add	r3, pc, #232	; (adr r3, 80174f4 <__kernel_sin+0x164>)
 801740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017410:	f7e8 ff5a 	bl	80002c8 <__aeabi_dsub>
 8017414:	4652      	mov	r2, sl
 8017416:	465b      	mov	r3, fp
 8017418:	f7e9 f90e 	bl	8000638 <__aeabi_dmul>
 801741c:	a337      	add	r3, pc, #220	; (adr r3, 80174fc <__kernel_sin+0x16c>)
 801741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017422:	f7e8 ff53 	bl	80002cc <__adddf3>
 8017426:	9b02      	ldr	r3, [sp, #8]
 8017428:	4606      	mov	r6, r0
 801742a:	460f      	mov	r7, r1
 801742c:	b9db      	cbnz	r3, 8017466 <__kernel_sin+0xd6>
 801742e:	4602      	mov	r2, r0
 8017430:	460b      	mov	r3, r1
 8017432:	4650      	mov	r0, sl
 8017434:	4659      	mov	r1, fp
 8017436:	f7e9 f8ff 	bl	8000638 <__aeabi_dmul>
 801743a:	a325      	add	r3, pc, #148	; (adr r3, 80174d0 <__kernel_sin+0x140>)
 801743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017440:	f7e8 ff42 	bl	80002c8 <__aeabi_dsub>
 8017444:	4642      	mov	r2, r8
 8017446:	464b      	mov	r3, r9
 8017448:	f7e9 f8f6 	bl	8000638 <__aeabi_dmul>
 801744c:	4602      	mov	r2, r0
 801744e:	460b      	mov	r3, r1
 8017450:	4620      	mov	r0, r4
 8017452:	4629      	mov	r1, r5
 8017454:	f7e8 ff3a 	bl	80002cc <__adddf3>
 8017458:	4604      	mov	r4, r0
 801745a:	460d      	mov	r5, r1
 801745c:	ec45 4b10 	vmov	d0, r4, r5
 8017460:	b005      	add	sp, #20
 8017462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017466:	2200      	movs	r2, #0
 8017468:	4b1b      	ldr	r3, [pc, #108]	; (80174d8 <__kernel_sin+0x148>)
 801746a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801746e:	f7e9 f8e3 	bl	8000638 <__aeabi_dmul>
 8017472:	4632      	mov	r2, r6
 8017474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017478:	463b      	mov	r3, r7
 801747a:	4640      	mov	r0, r8
 801747c:	4649      	mov	r1, r9
 801747e:	f7e9 f8db 	bl	8000638 <__aeabi_dmul>
 8017482:	4602      	mov	r2, r0
 8017484:	460b      	mov	r3, r1
 8017486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801748a:	f7e8 ff1d 	bl	80002c8 <__aeabi_dsub>
 801748e:	4652      	mov	r2, sl
 8017490:	465b      	mov	r3, fp
 8017492:	f7e9 f8d1 	bl	8000638 <__aeabi_dmul>
 8017496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801749a:	f7e8 ff15 	bl	80002c8 <__aeabi_dsub>
 801749e:	a30c      	add	r3, pc, #48	; (adr r3, 80174d0 <__kernel_sin+0x140>)
 80174a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a4:	4606      	mov	r6, r0
 80174a6:	460f      	mov	r7, r1
 80174a8:	4640      	mov	r0, r8
 80174aa:	4649      	mov	r1, r9
 80174ac:	f7e9 f8c4 	bl	8000638 <__aeabi_dmul>
 80174b0:	4602      	mov	r2, r0
 80174b2:	460b      	mov	r3, r1
 80174b4:	4630      	mov	r0, r6
 80174b6:	4639      	mov	r1, r7
 80174b8:	f7e8 ff08 	bl	80002cc <__adddf3>
 80174bc:	4602      	mov	r2, r0
 80174be:	460b      	mov	r3, r1
 80174c0:	4620      	mov	r0, r4
 80174c2:	4629      	mov	r1, r5
 80174c4:	f7e8 ff00 	bl	80002c8 <__aeabi_dsub>
 80174c8:	e7c6      	b.n	8017458 <__kernel_sin+0xc8>
 80174ca:	bf00      	nop
 80174cc:	f3af 8000 	nop.w
 80174d0:	55555549 	.word	0x55555549
 80174d4:	3fc55555 	.word	0x3fc55555
 80174d8:	3fe00000 	.word	0x3fe00000
 80174dc:	5acfd57c 	.word	0x5acfd57c
 80174e0:	3de5d93a 	.word	0x3de5d93a
 80174e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80174e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80174ec:	57b1fe7d 	.word	0x57b1fe7d
 80174f0:	3ec71de3 	.word	0x3ec71de3
 80174f4:	19c161d5 	.word	0x19c161d5
 80174f8:	3f2a01a0 	.word	0x3f2a01a0
 80174fc:	1110f8a6 	.word	0x1110f8a6
 8017500:	3f811111 	.word	0x3f811111
 8017504:	00000000 	.word	0x00000000

08017508 <atan>:
 8017508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801750c:	ec55 4b10 	vmov	r4, r5, d0
 8017510:	4bc3      	ldr	r3, [pc, #780]	; (8017820 <atan+0x318>)
 8017512:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017516:	429e      	cmp	r6, r3
 8017518:	46ab      	mov	fp, r5
 801751a:	dd18      	ble.n	801754e <atan+0x46>
 801751c:	4bc1      	ldr	r3, [pc, #772]	; (8017824 <atan+0x31c>)
 801751e:	429e      	cmp	r6, r3
 8017520:	dc01      	bgt.n	8017526 <atan+0x1e>
 8017522:	d109      	bne.n	8017538 <atan+0x30>
 8017524:	b144      	cbz	r4, 8017538 <atan+0x30>
 8017526:	4622      	mov	r2, r4
 8017528:	462b      	mov	r3, r5
 801752a:	4620      	mov	r0, r4
 801752c:	4629      	mov	r1, r5
 801752e:	f7e8 fecd 	bl	80002cc <__adddf3>
 8017532:	4604      	mov	r4, r0
 8017534:	460d      	mov	r5, r1
 8017536:	e006      	b.n	8017546 <atan+0x3e>
 8017538:	f1bb 0f00 	cmp.w	fp, #0
 801753c:	f340 8131 	ble.w	80177a2 <atan+0x29a>
 8017540:	a59b      	add	r5, pc, #620	; (adr r5, 80177b0 <atan+0x2a8>)
 8017542:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017546:	ec45 4b10 	vmov	d0, r4, r5
 801754a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801754e:	4bb6      	ldr	r3, [pc, #728]	; (8017828 <atan+0x320>)
 8017550:	429e      	cmp	r6, r3
 8017552:	dc14      	bgt.n	801757e <atan+0x76>
 8017554:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017558:	429e      	cmp	r6, r3
 801755a:	dc0d      	bgt.n	8017578 <atan+0x70>
 801755c:	a396      	add	r3, pc, #600	; (adr r3, 80177b8 <atan+0x2b0>)
 801755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017562:	ee10 0a10 	vmov	r0, s0
 8017566:	4629      	mov	r1, r5
 8017568:	f7e8 feb0 	bl	80002cc <__adddf3>
 801756c:	2200      	movs	r2, #0
 801756e:	4baf      	ldr	r3, [pc, #700]	; (801782c <atan+0x324>)
 8017570:	f7e9 faf2 	bl	8000b58 <__aeabi_dcmpgt>
 8017574:	2800      	cmp	r0, #0
 8017576:	d1e6      	bne.n	8017546 <atan+0x3e>
 8017578:	f04f 3aff 	mov.w	sl, #4294967295
 801757c:	e02b      	b.n	80175d6 <atan+0xce>
 801757e:	f000 f963 	bl	8017848 <fabs>
 8017582:	4bab      	ldr	r3, [pc, #684]	; (8017830 <atan+0x328>)
 8017584:	429e      	cmp	r6, r3
 8017586:	ec55 4b10 	vmov	r4, r5, d0
 801758a:	f300 80bf 	bgt.w	801770c <atan+0x204>
 801758e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8017592:	429e      	cmp	r6, r3
 8017594:	f300 80a0 	bgt.w	80176d8 <atan+0x1d0>
 8017598:	ee10 2a10 	vmov	r2, s0
 801759c:	ee10 0a10 	vmov	r0, s0
 80175a0:	462b      	mov	r3, r5
 80175a2:	4629      	mov	r1, r5
 80175a4:	f7e8 fe92 	bl	80002cc <__adddf3>
 80175a8:	2200      	movs	r2, #0
 80175aa:	4ba0      	ldr	r3, [pc, #640]	; (801782c <atan+0x324>)
 80175ac:	f7e8 fe8c 	bl	80002c8 <__aeabi_dsub>
 80175b0:	2200      	movs	r2, #0
 80175b2:	4606      	mov	r6, r0
 80175b4:	460f      	mov	r7, r1
 80175b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80175ba:	4620      	mov	r0, r4
 80175bc:	4629      	mov	r1, r5
 80175be:	f7e8 fe85 	bl	80002cc <__adddf3>
 80175c2:	4602      	mov	r2, r0
 80175c4:	460b      	mov	r3, r1
 80175c6:	4630      	mov	r0, r6
 80175c8:	4639      	mov	r1, r7
 80175ca:	f7e9 f95f 	bl	800088c <__aeabi_ddiv>
 80175ce:	f04f 0a00 	mov.w	sl, #0
 80175d2:	4604      	mov	r4, r0
 80175d4:	460d      	mov	r5, r1
 80175d6:	4622      	mov	r2, r4
 80175d8:	462b      	mov	r3, r5
 80175da:	4620      	mov	r0, r4
 80175dc:	4629      	mov	r1, r5
 80175de:	f7e9 f82b 	bl	8000638 <__aeabi_dmul>
 80175e2:	4602      	mov	r2, r0
 80175e4:	460b      	mov	r3, r1
 80175e6:	4680      	mov	r8, r0
 80175e8:	4689      	mov	r9, r1
 80175ea:	f7e9 f825 	bl	8000638 <__aeabi_dmul>
 80175ee:	a374      	add	r3, pc, #464	; (adr r3, 80177c0 <atan+0x2b8>)
 80175f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f4:	4606      	mov	r6, r0
 80175f6:	460f      	mov	r7, r1
 80175f8:	f7e9 f81e 	bl	8000638 <__aeabi_dmul>
 80175fc:	a372      	add	r3, pc, #456	; (adr r3, 80177c8 <atan+0x2c0>)
 80175fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017602:	f7e8 fe63 	bl	80002cc <__adddf3>
 8017606:	4632      	mov	r2, r6
 8017608:	463b      	mov	r3, r7
 801760a:	f7e9 f815 	bl	8000638 <__aeabi_dmul>
 801760e:	a370      	add	r3, pc, #448	; (adr r3, 80177d0 <atan+0x2c8>)
 8017610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017614:	f7e8 fe5a 	bl	80002cc <__adddf3>
 8017618:	4632      	mov	r2, r6
 801761a:	463b      	mov	r3, r7
 801761c:	f7e9 f80c 	bl	8000638 <__aeabi_dmul>
 8017620:	a36d      	add	r3, pc, #436	; (adr r3, 80177d8 <atan+0x2d0>)
 8017622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017626:	f7e8 fe51 	bl	80002cc <__adddf3>
 801762a:	4632      	mov	r2, r6
 801762c:	463b      	mov	r3, r7
 801762e:	f7e9 f803 	bl	8000638 <__aeabi_dmul>
 8017632:	a36b      	add	r3, pc, #428	; (adr r3, 80177e0 <atan+0x2d8>)
 8017634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017638:	f7e8 fe48 	bl	80002cc <__adddf3>
 801763c:	4632      	mov	r2, r6
 801763e:	463b      	mov	r3, r7
 8017640:	f7e8 fffa 	bl	8000638 <__aeabi_dmul>
 8017644:	a368      	add	r3, pc, #416	; (adr r3, 80177e8 <atan+0x2e0>)
 8017646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764a:	f7e8 fe3f 	bl	80002cc <__adddf3>
 801764e:	4642      	mov	r2, r8
 8017650:	464b      	mov	r3, r9
 8017652:	f7e8 fff1 	bl	8000638 <__aeabi_dmul>
 8017656:	a366      	add	r3, pc, #408	; (adr r3, 80177f0 <atan+0x2e8>)
 8017658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801765c:	4680      	mov	r8, r0
 801765e:	4689      	mov	r9, r1
 8017660:	4630      	mov	r0, r6
 8017662:	4639      	mov	r1, r7
 8017664:	f7e8 ffe8 	bl	8000638 <__aeabi_dmul>
 8017668:	a363      	add	r3, pc, #396	; (adr r3, 80177f8 <atan+0x2f0>)
 801766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801766e:	f7e8 fe2b 	bl	80002c8 <__aeabi_dsub>
 8017672:	4632      	mov	r2, r6
 8017674:	463b      	mov	r3, r7
 8017676:	f7e8 ffdf 	bl	8000638 <__aeabi_dmul>
 801767a:	a361      	add	r3, pc, #388	; (adr r3, 8017800 <atan+0x2f8>)
 801767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017680:	f7e8 fe22 	bl	80002c8 <__aeabi_dsub>
 8017684:	4632      	mov	r2, r6
 8017686:	463b      	mov	r3, r7
 8017688:	f7e8 ffd6 	bl	8000638 <__aeabi_dmul>
 801768c:	a35e      	add	r3, pc, #376	; (adr r3, 8017808 <atan+0x300>)
 801768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017692:	f7e8 fe19 	bl	80002c8 <__aeabi_dsub>
 8017696:	4632      	mov	r2, r6
 8017698:	463b      	mov	r3, r7
 801769a:	f7e8 ffcd 	bl	8000638 <__aeabi_dmul>
 801769e:	a35c      	add	r3, pc, #368	; (adr r3, 8017810 <atan+0x308>)
 80176a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a4:	f7e8 fe10 	bl	80002c8 <__aeabi_dsub>
 80176a8:	4632      	mov	r2, r6
 80176aa:	463b      	mov	r3, r7
 80176ac:	f7e8 ffc4 	bl	8000638 <__aeabi_dmul>
 80176b0:	4602      	mov	r2, r0
 80176b2:	460b      	mov	r3, r1
 80176b4:	4640      	mov	r0, r8
 80176b6:	4649      	mov	r1, r9
 80176b8:	f7e8 fe08 	bl	80002cc <__adddf3>
 80176bc:	4622      	mov	r2, r4
 80176be:	462b      	mov	r3, r5
 80176c0:	f7e8 ffba 	bl	8000638 <__aeabi_dmul>
 80176c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80176c8:	4602      	mov	r2, r0
 80176ca:	460b      	mov	r3, r1
 80176cc:	d14b      	bne.n	8017766 <atan+0x25e>
 80176ce:	4620      	mov	r0, r4
 80176d0:	4629      	mov	r1, r5
 80176d2:	f7e8 fdf9 	bl	80002c8 <__aeabi_dsub>
 80176d6:	e72c      	b.n	8017532 <atan+0x2a>
 80176d8:	ee10 0a10 	vmov	r0, s0
 80176dc:	2200      	movs	r2, #0
 80176de:	4b53      	ldr	r3, [pc, #332]	; (801782c <atan+0x324>)
 80176e0:	4629      	mov	r1, r5
 80176e2:	f7e8 fdf1 	bl	80002c8 <__aeabi_dsub>
 80176e6:	2200      	movs	r2, #0
 80176e8:	4606      	mov	r6, r0
 80176ea:	460f      	mov	r7, r1
 80176ec:	4b4f      	ldr	r3, [pc, #316]	; (801782c <atan+0x324>)
 80176ee:	4620      	mov	r0, r4
 80176f0:	4629      	mov	r1, r5
 80176f2:	f7e8 fdeb 	bl	80002cc <__adddf3>
 80176f6:	4602      	mov	r2, r0
 80176f8:	460b      	mov	r3, r1
 80176fa:	4630      	mov	r0, r6
 80176fc:	4639      	mov	r1, r7
 80176fe:	f7e9 f8c5 	bl	800088c <__aeabi_ddiv>
 8017702:	f04f 0a01 	mov.w	sl, #1
 8017706:	4604      	mov	r4, r0
 8017708:	460d      	mov	r5, r1
 801770a:	e764      	b.n	80175d6 <atan+0xce>
 801770c:	4b49      	ldr	r3, [pc, #292]	; (8017834 <atan+0x32c>)
 801770e:	429e      	cmp	r6, r3
 8017710:	dc1d      	bgt.n	801774e <atan+0x246>
 8017712:	ee10 0a10 	vmov	r0, s0
 8017716:	2200      	movs	r2, #0
 8017718:	4b47      	ldr	r3, [pc, #284]	; (8017838 <atan+0x330>)
 801771a:	4629      	mov	r1, r5
 801771c:	f7e8 fdd4 	bl	80002c8 <__aeabi_dsub>
 8017720:	2200      	movs	r2, #0
 8017722:	4606      	mov	r6, r0
 8017724:	460f      	mov	r7, r1
 8017726:	4b44      	ldr	r3, [pc, #272]	; (8017838 <atan+0x330>)
 8017728:	4620      	mov	r0, r4
 801772a:	4629      	mov	r1, r5
 801772c:	f7e8 ff84 	bl	8000638 <__aeabi_dmul>
 8017730:	2200      	movs	r2, #0
 8017732:	4b3e      	ldr	r3, [pc, #248]	; (801782c <atan+0x324>)
 8017734:	f7e8 fdca 	bl	80002cc <__adddf3>
 8017738:	4602      	mov	r2, r0
 801773a:	460b      	mov	r3, r1
 801773c:	4630      	mov	r0, r6
 801773e:	4639      	mov	r1, r7
 8017740:	f7e9 f8a4 	bl	800088c <__aeabi_ddiv>
 8017744:	f04f 0a02 	mov.w	sl, #2
 8017748:	4604      	mov	r4, r0
 801774a:	460d      	mov	r5, r1
 801774c:	e743      	b.n	80175d6 <atan+0xce>
 801774e:	462b      	mov	r3, r5
 8017750:	ee10 2a10 	vmov	r2, s0
 8017754:	2000      	movs	r0, #0
 8017756:	4939      	ldr	r1, [pc, #228]	; (801783c <atan+0x334>)
 8017758:	f7e9 f898 	bl	800088c <__aeabi_ddiv>
 801775c:	f04f 0a03 	mov.w	sl, #3
 8017760:	4604      	mov	r4, r0
 8017762:	460d      	mov	r5, r1
 8017764:	e737      	b.n	80175d6 <atan+0xce>
 8017766:	4b36      	ldr	r3, [pc, #216]	; (8017840 <atan+0x338>)
 8017768:	4e36      	ldr	r6, [pc, #216]	; (8017844 <atan+0x33c>)
 801776a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801776e:	4456      	add	r6, sl
 8017770:	449a      	add	sl, r3
 8017772:	e9da 2300 	ldrd	r2, r3, [sl]
 8017776:	f7e8 fda7 	bl	80002c8 <__aeabi_dsub>
 801777a:	4622      	mov	r2, r4
 801777c:	462b      	mov	r3, r5
 801777e:	f7e8 fda3 	bl	80002c8 <__aeabi_dsub>
 8017782:	4602      	mov	r2, r0
 8017784:	460b      	mov	r3, r1
 8017786:	e9d6 0100 	ldrd	r0, r1, [r6]
 801778a:	f7e8 fd9d 	bl	80002c8 <__aeabi_dsub>
 801778e:	f1bb 0f00 	cmp.w	fp, #0
 8017792:	4604      	mov	r4, r0
 8017794:	460d      	mov	r5, r1
 8017796:	f6bf aed6 	bge.w	8017546 <atan+0x3e>
 801779a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801779e:	461d      	mov	r5, r3
 80177a0:	e6d1      	b.n	8017546 <atan+0x3e>
 80177a2:	a51d      	add	r5, pc, #116	; (adr r5, 8017818 <atan+0x310>)
 80177a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80177a8:	e6cd      	b.n	8017546 <atan+0x3e>
 80177aa:	bf00      	nop
 80177ac:	f3af 8000 	nop.w
 80177b0:	54442d18 	.word	0x54442d18
 80177b4:	3ff921fb 	.word	0x3ff921fb
 80177b8:	8800759c 	.word	0x8800759c
 80177bc:	7e37e43c 	.word	0x7e37e43c
 80177c0:	e322da11 	.word	0xe322da11
 80177c4:	3f90ad3a 	.word	0x3f90ad3a
 80177c8:	24760deb 	.word	0x24760deb
 80177cc:	3fa97b4b 	.word	0x3fa97b4b
 80177d0:	a0d03d51 	.word	0xa0d03d51
 80177d4:	3fb10d66 	.word	0x3fb10d66
 80177d8:	c54c206e 	.word	0xc54c206e
 80177dc:	3fb745cd 	.word	0x3fb745cd
 80177e0:	920083ff 	.word	0x920083ff
 80177e4:	3fc24924 	.word	0x3fc24924
 80177e8:	5555550d 	.word	0x5555550d
 80177ec:	3fd55555 	.word	0x3fd55555
 80177f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80177f4:	bfa2b444 	.word	0xbfa2b444
 80177f8:	52defd9a 	.word	0x52defd9a
 80177fc:	3fadde2d 	.word	0x3fadde2d
 8017800:	af749a6d 	.word	0xaf749a6d
 8017804:	3fb3b0f2 	.word	0x3fb3b0f2
 8017808:	fe231671 	.word	0xfe231671
 801780c:	3fbc71c6 	.word	0x3fbc71c6
 8017810:	9998ebc4 	.word	0x9998ebc4
 8017814:	3fc99999 	.word	0x3fc99999
 8017818:	54442d18 	.word	0x54442d18
 801781c:	bff921fb 	.word	0xbff921fb
 8017820:	440fffff 	.word	0x440fffff
 8017824:	7ff00000 	.word	0x7ff00000
 8017828:	3fdbffff 	.word	0x3fdbffff
 801782c:	3ff00000 	.word	0x3ff00000
 8017830:	3ff2ffff 	.word	0x3ff2ffff
 8017834:	40037fff 	.word	0x40037fff
 8017838:	3ff80000 	.word	0x3ff80000
 801783c:	bff00000 	.word	0xbff00000
 8017840:	08018850 	.word	0x08018850
 8017844:	08018830 	.word	0x08018830

08017848 <fabs>:
 8017848:	ec51 0b10 	vmov	r0, r1, d0
 801784c:	ee10 2a10 	vmov	r2, s0
 8017850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017854:	ec43 2b10 	vmov	d0, r2, r3
 8017858:	4770      	bx	lr
 801785a:	0000      	movs	r0, r0
 801785c:	0000      	movs	r0, r0
	...

08017860 <floor>:
 8017860:	ec51 0b10 	vmov	r0, r1, d0
 8017864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017868:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801786c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017870:	2e13      	cmp	r6, #19
 8017872:	460c      	mov	r4, r1
 8017874:	ee10 5a10 	vmov	r5, s0
 8017878:	4680      	mov	r8, r0
 801787a:	dc34      	bgt.n	80178e6 <floor+0x86>
 801787c:	2e00      	cmp	r6, #0
 801787e:	da16      	bge.n	80178ae <floor+0x4e>
 8017880:	a335      	add	r3, pc, #212	; (adr r3, 8017958 <floor+0xf8>)
 8017882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017886:	f7e8 fd21 	bl	80002cc <__adddf3>
 801788a:	2200      	movs	r2, #0
 801788c:	2300      	movs	r3, #0
 801788e:	f7e9 f963 	bl	8000b58 <__aeabi_dcmpgt>
 8017892:	b148      	cbz	r0, 80178a8 <floor+0x48>
 8017894:	2c00      	cmp	r4, #0
 8017896:	da59      	bge.n	801794c <floor+0xec>
 8017898:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801789c:	4a30      	ldr	r2, [pc, #192]	; (8017960 <floor+0x100>)
 801789e:	432b      	orrs	r3, r5
 80178a0:	2500      	movs	r5, #0
 80178a2:	42ab      	cmp	r3, r5
 80178a4:	bf18      	it	ne
 80178a6:	4614      	movne	r4, r2
 80178a8:	4621      	mov	r1, r4
 80178aa:	4628      	mov	r0, r5
 80178ac:	e025      	b.n	80178fa <floor+0x9a>
 80178ae:	4f2d      	ldr	r7, [pc, #180]	; (8017964 <floor+0x104>)
 80178b0:	4137      	asrs	r7, r6
 80178b2:	ea01 0307 	and.w	r3, r1, r7
 80178b6:	4303      	orrs	r3, r0
 80178b8:	d01f      	beq.n	80178fa <floor+0x9a>
 80178ba:	a327      	add	r3, pc, #156	; (adr r3, 8017958 <floor+0xf8>)
 80178bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c0:	f7e8 fd04 	bl	80002cc <__adddf3>
 80178c4:	2200      	movs	r2, #0
 80178c6:	2300      	movs	r3, #0
 80178c8:	f7e9 f946 	bl	8000b58 <__aeabi_dcmpgt>
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d0eb      	beq.n	80178a8 <floor+0x48>
 80178d0:	2c00      	cmp	r4, #0
 80178d2:	bfbe      	ittt	lt
 80178d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80178d8:	fa43 f606 	asrlt.w	r6, r3, r6
 80178dc:	19a4      	addlt	r4, r4, r6
 80178de:	ea24 0407 	bic.w	r4, r4, r7
 80178e2:	2500      	movs	r5, #0
 80178e4:	e7e0      	b.n	80178a8 <floor+0x48>
 80178e6:	2e33      	cmp	r6, #51	; 0x33
 80178e8:	dd0b      	ble.n	8017902 <floor+0xa2>
 80178ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80178ee:	d104      	bne.n	80178fa <floor+0x9a>
 80178f0:	ee10 2a10 	vmov	r2, s0
 80178f4:	460b      	mov	r3, r1
 80178f6:	f7e8 fce9 	bl	80002cc <__adddf3>
 80178fa:	ec41 0b10 	vmov	d0, r0, r1
 80178fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017902:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8017906:	f04f 33ff 	mov.w	r3, #4294967295
 801790a:	fa23 f707 	lsr.w	r7, r3, r7
 801790e:	4207      	tst	r7, r0
 8017910:	d0f3      	beq.n	80178fa <floor+0x9a>
 8017912:	a311      	add	r3, pc, #68	; (adr r3, 8017958 <floor+0xf8>)
 8017914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017918:	f7e8 fcd8 	bl	80002cc <__adddf3>
 801791c:	2200      	movs	r2, #0
 801791e:	2300      	movs	r3, #0
 8017920:	f7e9 f91a 	bl	8000b58 <__aeabi_dcmpgt>
 8017924:	2800      	cmp	r0, #0
 8017926:	d0bf      	beq.n	80178a8 <floor+0x48>
 8017928:	2c00      	cmp	r4, #0
 801792a:	da02      	bge.n	8017932 <floor+0xd2>
 801792c:	2e14      	cmp	r6, #20
 801792e:	d103      	bne.n	8017938 <floor+0xd8>
 8017930:	3401      	adds	r4, #1
 8017932:	ea25 0507 	bic.w	r5, r5, r7
 8017936:	e7b7      	b.n	80178a8 <floor+0x48>
 8017938:	2301      	movs	r3, #1
 801793a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801793e:	fa03 f606 	lsl.w	r6, r3, r6
 8017942:	4435      	add	r5, r6
 8017944:	4545      	cmp	r5, r8
 8017946:	bf38      	it	cc
 8017948:	18e4      	addcc	r4, r4, r3
 801794a:	e7f2      	b.n	8017932 <floor+0xd2>
 801794c:	2500      	movs	r5, #0
 801794e:	462c      	mov	r4, r5
 8017950:	e7aa      	b.n	80178a8 <floor+0x48>
 8017952:	bf00      	nop
 8017954:	f3af 8000 	nop.w
 8017958:	8800759c 	.word	0x8800759c
 801795c:	7e37e43c 	.word	0x7e37e43c
 8017960:	bff00000 	.word	0xbff00000
 8017964:	000fffff 	.word	0x000fffff

08017968 <matherr>:
 8017968:	2000      	movs	r0, #0
 801796a:	4770      	bx	lr
 801796c:	0000      	movs	r0, r0
	...

08017970 <nan>:
 8017970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017978 <nan+0x8>
 8017974:	4770      	bx	lr
 8017976:	bf00      	nop
 8017978:	00000000 	.word	0x00000000
 801797c:	7ff80000 	.word	0x7ff80000

08017980 <scalbn>:
 8017980:	b570      	push	{r4, r5, r6, lr}
 8017982:	ec55 4b10 	vmov	r4, r5, d0
 8017986:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801798a:	4606      	mov	r6, r0
 801798c:	462b      	mov	r3, r5
 801798e:	b9aa      	cbnz	r2, 80179bc <scalbn+0x3c>
 8017990:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017994:	4323      	orrs	r3, r4
 8017996:	d03b      	beq.n	8017a10 <scalbn+0x90>
 8017998:	4b31      	ldr	r3, [pc, #196]	; (8017a60 <scalbn+0xe0>)
 801799a:	4629      	mov	r1, r5
 801799c:	2200      	movs	r2, #0
 801799e:	ee10 0a10 	vmov	r0, s0
 80179a2:	f7e8 fe49 	bl	8000638 <__aeabi_dmul>
 80179a6:	4b2f      	ldr	r3, [pc, #188]	; (8017a64 <scalbn+0xe4>)
 80179a8:	429e      	cmp	r6, r3
 80179aa:	4604      	mov	r4, r0
 80179ac:	460d      	mov	r5, r1
 80179ae:	da12      	bge.n	80179d6 <scalbn+0x56>
 80179b0:	a327      	add	r3, pc, #156	; (adr r3, 8017a50 <scalbn+0xd0>)
 80179b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179b6:	f7e8 fe3f 	bl	8000638 <__aeabi_dmul>
 80179ba:	e009      	b.n	80179d0 <scalbn+0x50>
 80179bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80179c0:	428a      	cmp	r2, r1
 80179c2:	d10c      	bne.n	80179de <scalbn+0x5e>
 80179c4:	ee10 2a10 	vmov	r2, s0
 80179c8:	4620      	mov	r0, r4
 80179ca:	4629      	mov	r1, r5
 80179cc:	f7e8 fc7e 	bl	80002cc <__adddf3>
 80179d0:	4604      	mov	r4, r0
 80179d2:	460d      	mov	r5, r1
 80179d4:	e01c      	b.n	8017a10 <scalbn+0x90>
 80179d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80179da:	460b      	mov	r3, r1
 80179dc:	3a36      	subs	r2, #54	; 0x36
 80179de:	4432      	add	r2, r6
 80179e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80179e4:	428a      	cmp	r2, r1
 80179e6:	dd0b      	ble.n	8017a00 <scalbn+0x80>
 80179e8:	ec45 4b11 	vmov	d1, r4, r5
 80179ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017a58 <scalbn+0xd8>
 80179f0:	f7fb fe7a 	bl	80136e8 <copysign>
 80179f4:	a318      	add	r3, pc, #96	; (adr r3, 8017a58 <scalbn+0xd8>)
 80179f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179fa:	ec51 0b10 	vmov	r0, r1, d0
 80179fe:	e7da      	b.n	80179b6 <scalbn+0x36>
 8017a00:	2a00      	cmp	r2, #0
 8017a02:	dd08      	ble.n	8017a16 <scalbn+0x96>
 8017a04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017a08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017a0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017a10:	ec45 4b10 	vmov	d0, r4, r5
 8017a14:	bd70      	pop	{r4, r5, r6, pc}
 8017a16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017a1a:	da0d      	bge.n	8017a38 <scalbn+0xb8>
 8017a1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017a20:	429e      	cmp	r6, r3
 8017a22:	ec45 4b11 	vmov	d1, r4, r5
 8017a26:	dce1      	bgt.n	80179ec <scalbn+0x6c>
 8017a28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017a50 <scalbn+0xd0>
 8017a2c:	f7fb fe5c 	bl	80136e8 <copysign>
 8017a30:	a307      	add	r3, pc, #28	; (adr r3, 8017a50 <scalbn+0xd0>)
 8017a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a36:	e7e0      	b.n	80179fa <scalbn+0x7a>
 8017a38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017a3c:	3236      	adds	r2, #54	; 0x36
 8017a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017a42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017a46:	4620      	mov	r0, r4
 8017a48:	4629      	mov	r1, r5
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	4b06      	ldr	r3, [pc, #24]	; (8017a68 <scalbn+0xe8>)
 8017a4e:	e7b2      	b.n	80179b6 <scalbn+0x36>
 8017a50:	c2f8f359 	.word	0xc2f8f359
 8017a54:	01a56e1f 	.word	0x01a56e1f
 8017a58:	8800759c 	.word	0x8800759c
 8017a5c:	7e37e43c 	.word	0x7e37e43c
 8017a60:	43500000 	.word	0x43500000
 8017a64:	ffff3cb0 	.word	0xffff3cb0
 8017a68:	3c900000 	.word	0x3c900000

08017a6c <fabsf>:
 8017a6c:	ee10 3a10 	vmov	r3, s0
 8017a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a74:	ee00 3a10 	vmov	s0, r3
 8017a78:	4770      	bx	lr

08017a7a <finitef>:
 8017a7a:	ee10 3a10 	vmov	r3, s0
 8017a7e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8017a82:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017a86:	bfac      	ite	ge
 8017a88:	2000      	movge	r0, #0
 8017a8a:	2001      	movlt	r0, #1
 8017a8c:	4770      	bx	lr
	...

08017a90 <nanf>:
 8017a90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017a98 <nanf+0x8>
 8017a94:	4770      	bx	lr
 8017a96:	bf00      	nop
 8017a98:	7fc00000 	.word	0x7fc00000

08017a9c <rintf>:
 8017a9c:	b513      	push	{r0, r1, r4, lr}
 8017a9e:	ee10 1a10 	vmov	r1, s0
 8017aa2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017aa6:	0ddc      	lsrs	r4, r3, #23
 8017aa8:	3c7f      	subs	r4, #127	; 0x7f
 8017aaa:	2c16      	cmp	r4, #22
 8017aac:	dc46      	bgt.n	8017b3c <rintf+0xa0>
 8017aae:	b32b      	cbz	r3, 8017afc <rintf+0x60>
 8017ab0:	2c00      	cmp	r4, #0
 8017ab2:	ee10 2a10 	vmov	r2, s0
 8017ab6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8017aba:	da21      	bge.n	8017b00 <rintf+0x64>
 8017abc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8017ac0:	425b      	negs	r3, r3
 8017ac2:	4a21      	ldr	r2, [pc, #132]	; (8017b48 <rintf+0xac>)
 8017ac4:	0a5b      	lsrs	r3, r3, #9
 8017ac6:	0d09      	lsrs	r1, r1, #20
 8017ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017acc:	0509      	lsls	r1, r1, #20
 8017ace:	430b      	orrs	r3, r1
 8017ad0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017ad4:	ee07 3a90 	vmov	s15, r3
 8017ad8:	edd2 6a00 	vldr	s13, [r2]
 8017adc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8017ae0:	ed8d 7a01 	vstr	s14, [sp, #4]
 8017ae4:	eddd 7a01 	vldr	s15, [sp, #4]
 8017ae8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017aec:	ee17 3a90 	vmov	r3, s15
 8017af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017af4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8017af8:	ee00 3a10 	vmov	s0, r3
 8017afc:	b002      	add	sp, #8
 8017afe:	bd10      	pop	{r4, pc}
 8017b00:	4b12      	ldr	r3, [pc, #72]	; (8017b4c <rintf+0xb0>)
 8017b02:	4123      	asrs	r3, r4
 8017b04:	4219      	tst	r1, r3
 8017b06:	d0f9      	beq.n	8017afc <rintf+0x60>
 8017b08:	085b      	lsrs	r3, r3, #1
 8017b0a:	4219      	tst	r1, r3
 8017b0c:	d006      	beq.n	8017b1c <rintf+0x80>
 8017b0e:	ea21 0203 	bic.w	r2, r1, r3
 8017b12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017b16:	fa43 f404 	asr.w	r4, r3, r4
 8017b1a:	4322      	orrs	r2, r4
 8017b1c:	4b0a      	ldr	r3, [pc, #40]	; (8017b48 <rintf+0xac>)
 8017b1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017b22:	ed90 7a00 	vldr	s14, [r0]
 8017b26:	ee07 2a90 	vmov	s15, r2
 8017b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b2e:	edcd 7a01 	vstr	s15, [sp, #4]
 8017b32:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017b36:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017b3a:	e7df      	b.n	8017afc <rintf+0x60>
 8017b3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017b40:	d3dc      	bcc.n	8017afc <rintf+0x60>
 8017b42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017b46:	e7d9      	b.n	8017afc <rintf+0x60>
 8017b48:	08018870 	.word	0x08018870
 8017b4c:	007fffff 	.word	0x007fffff

08017b50 <scalbnf>:
 8017b50:	b508      	push	{r3, lr}
 8017b52:	ee10 2a10 	vmov	r2, s0
 8017b56:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8017b5a:	ed2d 8b02 	vpush	{d8}
 8017b5e:	eef0 0a40 	vmov.f32	s1, s0
 8017b62:	d004      	beq.n	8017b6e <scalbnf+0x1e>
 8017b64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017b68:	d306      	bcc.n	8017b78 <scalbnf+0x28>
 8017b6a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8017b6e:	ecbd 8b02 	vpop	{d8}
 8017b72:	eeb0 0a60 	vmov.f32	s0, s1
 8017b76:	bd08      	pop	{r3, pc}
 8017b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017b7c:	d21c      	bcs.n	8017bb8 <scalbnf+0x68>
 8017b7e:	4b1f      	ldr	r3, [pc, #124]	; (8017bfc <scalbnf+0xac>)
 8017b80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017c00 <scalbnf+0xb0>
 8017b84:	4298      	cmp	r0, r3
 8017b86:	ee60 0a27 	vmul.f32	s1, s0, s15
 8017b8a:	db10      	blt.n	8017bae <scalbnf+0x5e>
 8017b8c:	ee10 2a90 	vmov	r2, s1
 8017b90:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8017b94:	3b19      	subs	r3, #25
 8017b96:	4403      	add	r3, r0
 8017b98:	2bfe      	cmp	r3, #254	; 0xfe
 8017b9a:	dd0f      	ble.n	8017bbc <scalbnf+0x6c>
 8017b9c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8017c04 <scalbnf+0xb4>
 8017ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8017ba4:	f000 f834 	bl	8017c10 <copysignf>
 8017ba8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8017bac:	e7df      	b.n	8017b6e <scalbnf+0x1e>
 8017bae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017c08 <scalbnf+0xb8>
 8017bb2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017bb6:	e7da      	b.n	8017b6e <scalbnf+0x1e>
 8017bb8:	0ddb      	lsrs	r3, r3, #23
 8017bba:	e7ec      	b.n	8017b96 <scalbnf+0x46>
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	dd06      	ble.n	8017bce <scalbnf+0x7e>
 8017bc0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017bc4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017bc8:	ee00 3a90 	vmov	s1, r3
 8017bcc:	e7cf      	b.n	8017b6e <scalbnf+0x1e>
 8017bce:	f113 0f16 	cmn.w	r3, #22
 8017bd2:	da06      	bge.n	8017be2 <scalbnf+0x92>
 8017bd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017bd8:	4298      	cmp	r0, r3
 8017bda:	dcdf      	bgt.n	8017b9c <scalbnf+0x4c>
 8017bdc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8017c08 <scalbnf+0xb8>
 8017be0:	e7de      	b.n	8017ba0 <scalbnf+0x50>
 8017be2:	3319      	adds	r3, #25
 8017be4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017be8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017bec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017c0c <scalbnf+0xbc>
 8017bf0:	ee07 3a10 	vmov	s14, r3
 8017bf4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8017bf8:	e7b9      	b.n	8017b6e <scalbnf+0x1e>
 8017bfa:	bf00      	nop
 8017bfc:	ffff3cb0 	.word	0xffff3cb0
 8017c00:	4c000000 	.word	0x4c000000
 8017c04:	7149f2ca 	.word	0x7149f2ca
 8017c08:	0da24260 	.word	0x0da24260
 8017c0c:	33000000 	.word	0x33000000

08017c10 <copysignf>:
 8017c10:	ee10 3a10 	vmov	r3, s0
 8017c14:	ee10 2a90 	vmov	r2, s1
 8017c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017c20:	4313      	orrs	r3, r2
 8017c22:	ee00 3a10 	vmov	s0, r3
 8017c26:	4770      	bx	lr

08017c28 <_init>:
 8017c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c2a:	bf00      	nop
 8017c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c2e:	bc08      	pop	{r3}
 8017c30:	469e      	mov	lr, r3
 8017c32:	4770      	bx	lr

08017c34 <_fini>:
 8017c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c36:	bf00      	nop
 8017c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c3a:	bc08      	pop	{r3}
 8017c3c:	469e      	mov	lr, r3
 8017c3e:	4770      	bx	lr
