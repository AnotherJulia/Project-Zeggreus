
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  08017180  08017180  00027180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017da8  08017da8  00030604  2**0
                  CONTENTS
  4 .ARM          00000008  08017da8  08017da8  00027da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017db0  08017db0  00030604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017db0  08017db0  00027db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017db4  08017db4  00027db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000604  20000000  08017db8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fac  20000604  080183bc  00030604  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200065b0  080183bc  000365b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030604  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bad  00000000  00000000  00030634  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006651  00000000  00000000  000611e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002268  00000000  00000000  00067838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fb0  00000000  00000000  00069aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ad68  00000000  00000000  0006ba50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020de0  00000000  00000000  000967b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6aaa  00000000  00000000  000b7598  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019e042  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a488  00000000  00000000  0019e0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000604 	.word	0x20000604
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017164 	.word	0x08017164

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000608 	.word	0x20000608
 800020c:	08017164 	.word	0x08017164

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f005 f996 	bl	8006320 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f008 fe87 	bl	8009d1a <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f009 f81c 	bl	800a05e <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f005 f972 	bl	8006320 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f005 f953 	bl	8006320 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f008 fc0a 	bl	80098a0 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f008 ffdc 	bl	800a05e <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f005 f932 	bl	8006320 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f004 fa90 	bl	8005630 <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f004 fa88 	bl	8005630 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f004 fa80 	bl	8005630 <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	665a      	str	r2, [r3, #100]	; 0x64

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	669a      	str	r2, [r3, #104]	; 0x68



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f004 fa72 	bl	8005630 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f004 fa6a 	bl	8005630 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f004 fa62 	bl	8005630 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f004 fa5a 	bl	8005630 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f004 fa52 	bl	8005630 <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f004 fa4f 	bl	8005630 <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40

080011bc <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	731a      	strb	r2, [r3, #12]
 80011d2:	23a2      	movs	r3, #162	; 0xa2
 80011d4:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f005 f89d 	bl	8006320 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	f008 fd8e 	bl	8009d1a <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800120e:	bf00      	nop
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f008 ff22 	bl	800a05e <HAL_SPI_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d1f7      	bne.n	8001210 <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f005 f878 	bl	8006320 <HAL_GPIO_WritePin>

    if (status == 1) {
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b01      	cmp	r3, #1
 8001236:	d13b      	bne.n	80012b0 <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	835a      	strh	r2, [r3, #26]
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	839a      	strh	r2, [r3, #28]
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	83da      	strh	r2, [r3, #30]

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 800126e:	7c3b      	ldrb	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

        // convert units
        LSM_Convert(imu);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f808 	bl	80012c0 <LSM_Convert>

    }

    return status;
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	a367      	add	r3, pc, #412	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc73 	bl	8000c28 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	659a      	str	r2, [r3, #88]	; 0x58
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a35e      	add	r3, pc, #376	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fc60 	bl	8000c28 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	a354      	add	r3, pc, #336	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f95b 	bl	8000638 <__aeabi_dmul>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc4d 	bl	8000c28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	661a      	str	r2, [r3, #96]	; 0x60

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a08 	vstr	s15, [r3, #32]
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a32a      	add	r3, pc, #168	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbf5 	bl	8000c28 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89d 	bl	8000588 <__aeabi_f2d>
 800144e:	a31c      	add	r3, pc, #112	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8f0 	bl	8000638 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LSM_Convert+0x208>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4603      	mov	r3, r0
 800146c:	460c      	mov	r4, r1
 800146e:	4618      	mov	r0, r3
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff fbd9 	bl	8000c28 <__aeabi_d2f>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	a30e      	add	r3, pc, #56	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LSM_Convert+0x208>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fbbd 	bl	8000c28 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	54442eea 	.word	0x54442eea
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	40668000 	.word	0x40668000
 80014cc:	3a92a305 	.word	0x3a92a305
 80014d0:	40239d01 	.word	0x40239d01

080014d4 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af04      	add	r7, sp, #16
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c

    uint8_t txBuf[2] = {0x00, 0x00};
 8001508:	2300      	movs	r3, #0
 800150a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800150e:	2300      	movs	r3, #0
 8001510:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	b299      	uxth	r1, r3
 800151e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	220d      	movs	r2, #13
 8001532:	f005 f941 	bl	80067b8 <HAL_I2C_Mem_Read>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001548:	4413      	add	r3, r2
 800154a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 800154e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001552:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001556:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800155a:	2b10      	cmp	r3, #16
 800155c:	d001      	beq.n	8001562 <SPL06_Init+0x8e>

        return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e139      	b.n	80017d6 <SPL06_Init+0x302>

    }
    HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f004 f864 	bl	8005630 <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	b299      	uxth	r1, r3
 8001578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	2313      	movs	r3, #19
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	2210      	movs	r2, #16
 800158c:	f005 f914 	bl	80067b8 <HAL_I2C_Mem_Read>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf0c      	ite	eq
 8001596:	2301      	moveq	r3, #1
 8001598:	2300      	movne	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015a2:	4413      	add	r3, r2
 80015a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7c7b      	ldrb	r3, [r7, #17]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <SPL06_Init+0x10c>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015d4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80015d8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80015dc:	b21b      	sxth	r3, r3
 80015de:	e002      	b.n	80015e6 <SPL06_Init+0x112>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 80015ea:	7c7b      	ldrb	r3, [r7, #17]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7cbb      	ldrb	r3, [r7, #18]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001608:	b29b      	uxth	r3, r3
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <SPL06_Init+0x150>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001618:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800161c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001620:	b21b      	sxth	r3, r3
 8001622:	e002      	b.n	800162a <SPL06_Init+0x156>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 800162e:	7cfb      	ldrb	r3, [r7, #19]
 8001630:	031a      	lsls	r2, r3, #12
 8001632:	7d3b      	ldrb	r3, [r7, #20]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4313      	orrs	r3, r2
 8001638:	7d7a      	ldrb	r2, [r7, #21]
 800163a:	0912      	lsrs	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4313      	orrs	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <SPL06_Init+0x18c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800165a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800165e:	e001      	b.n	8001664 <SPL06_Init+0x190>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 8001668:	7d7b      	ldrb	r3, [r7, #21]
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001670:	7dbb      	ldrb	r3, [r7, #22]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4313      	orrs	r3, r2
 8001676:	7dfa      	ldrb	r2, [r7, #23]
 8001678:	4313      	orrs	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <SPL06_Init+0x1c6>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001694:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001698:	e001      	b.n	800169e <SPL06_Init+0x1ca>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80016a2:	7e3b      	ldrb	r3, [r7, #24]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	7e7b      	ldrb	r3, [r7, #25]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80016b4:	7ebb      	ldrb	r3, [r7, #26]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	7efb      	ldrb	r3, [r7, #27]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80016c6:	7f3b      	ldrb	r3, [r7, #28]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7f7b      	ldrb	r3, [r7, #29]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80016d8:	7fbb      	ldrb	r3, [r7, #30]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 80016ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001700:	2019      	movs	r0, #25
 8001702:	f003 ff95 	bl	8005630 <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0x33;
 8001706:	2333      	movs	r3, #51	; 0x33
 8001708:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	791b      	ldrb	r3, [r3, #4]
 8001714:	b299      	uxth	r1, r3
 8001716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2301      	movs	r3, #1
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	2206      	movs	r2, #6
 800172a:	f004 ff4b 	bl	80065c4 <HAL_I2C_Mem_Write>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	b2da      	uxtb	r2, r3
 800173c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001740:	4413      	add	r3, r2
 8001742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f003 ff72 	bl	8005630 <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 800174c:	23b3      	movs	r3, #179	; 0xb3
 800174e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	b299      	uxth	r1, r3
 800175c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	2207      	movs	r2, #7
 8001770:	f004 ff28 	bl	80065c4 <HAL_I2C_Mem_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001786:	4413      	add	r3, r2
 8001788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f003 ff4f 	bl	8005630 <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 8001792:	23ff      	movs	r3, #255	; 0xff
 8001794:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	2301      	movs	r3, #1
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	2208      	movs	r2, #8
 80017b6:	f004 ff05 	bl	80065c4 <HAL_I2C_Mem_Write>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017cc:	4413      	add	r3, r2
 80017ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80017d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3740      	adds	r7, #64	; 0x40
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <SPL06_Read>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (POLLING)
 *
 */
void SPL06_Read(SPL06 *bar) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	6078      	str	r0, [r7, #4]

    uint8_t txBuf[7];
    txBuf[0] = 0x00 | 0x80;
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	743b      	strb	r3, [r7, #16]

    uint8_t rxBuf[6];

    //HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x80, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500);
    HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x00, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, 500);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	b299      	uxth	r1, r3
 80017f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	2306      	movs	r3, #6
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	2200      	movs	r2, #0
 800180a:	f004 ffd5 	bl	80067b8 <HAL_I2C_Mem_Read>

    /* Convert raw to uncalibrated pressure and temperature */
    int32_t pres = ((uint32_t) rxBuf[0] << 16) | ((uint32_t) rxBuf[1] << 8) | ((uint32_t) rxBuf[2]);
 800180e:	7a3b      	ldrb	r3, [r7, #8]
 8001810:	041a      	lsls	r2, r3, #16
 8001812:	7a7b      	ldrb	r3, [r7, #9]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	4313      	orrs	r3, r2
 8001818:	7aba      	ldrb	r2, [r7, #10]
 800181a:	4313      	orrs	r3, r2
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
            pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <SPL06_Read+0x50>
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800182e:	e000      	b.n	8001832 <SPL06_Read+0x52>
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t temp = ((uint32_t) rxBuf[3] << 16) | ((uint32_t) rxBuf[4] << 8) | ((uint32_t) rxBuf[5]);
 8001834:	7afb      	ldrb	r3, [r7, #11]
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	4313      	orrs	r3, r2
 800183e:	7b7a      	ldrb	r2, [r7, #13]
 8001840:	4313      	orrs	r3, r2
 8001842:	623b      	str	r3, [r7, #32]
            temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <SPL06_Read+0x76>
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001854:	e000      	b.n	8001858 <SPL06_Read+0x78>
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	623b      	str	r3, [r7, #32]

    /* Apply calibration */
    float tempRaw = (float) temp / 7864320.0f;
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001970 <SPL06_Read+0x190>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	edc7 7a07 	vstr	s15, [r7, #28]
    bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001882:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001894:	edd7 7a07 	vldr	s15, [r7, #28]
 8001898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    float presRaw   = (float) pres / 7864320.0f;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001970 <SPL06_Read+0x190>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc7 7a06 	vstr	s15, [r7, #24]
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80018f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001900:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001904:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001908:	edd7 7a06 	vldr	s15, [r7, #24]
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
                    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800193e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001942:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001946:	ee36 6a27 	vadd.f32	s12, s12, s15
 800194a:	edd7 7a06 	vldr	s15, [r7, #24]
 800194e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001952:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001956:	edd7 7a07 	vldr	s15, [r7, #28]
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	4af00000 	.word	0x4af00000

08001974 <servo_init>:
#include "servo.h"

void servo_init(Servo *servo, TIM_HandleTypeDef *tim, volatile uint32_t *timerval) {
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    servo->timer = tim;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	605a      	str	r2, [r3, #4]
    servo->timerval = timerval;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <servo_writeangle>:


void servo_writeangle(Servo *servo, uint8_t angle) {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
    // value between 0 and 180
    uint32_t newtimerval = 1000 + (angle * 1000 / 180);
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <servo_writeangle+0x40>)
 80019b0:	fb82 1203 	smull	r1, r2, r2, r3
 80019b4:	441a      	add	r2, r3
 80019b6:	11d2      	asrs	r2, r2, #7
 80019b8:	17db      	asrs	r3, r3, #31
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80019c0:	60fb      	str	r3, [r7, #12]
    *servo->timerval = newtimerval;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	b60b60b7 	.word	0xb60b60b7

080019dc <servo_disable>:

void servo_writemicros(Servo *servo, uint32_t pulse) {
    *servo->timerval = pulse;
}

void servo_disable(Servo *servo) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    *servo->timerval = 0;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	4613      	mov	r3, r2
 8001a04:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6858      	ldr	r0, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	891b      	ldrh	r3, [r3, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	f004 fc85 	bl	8006320 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	f007 ff3c 	bl	80098a0 <HAL_SPI_Transmit>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6858      	ldr	r0, [r3, #4]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	891b      	ldrh	r3, [r3, #8]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f004 fc6f 	bl	8006320 <HAL_GPIO_WritePin>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af02      	add	r7, sp, #8
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6858      	ldr	r0, [r3, #4]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	891b      	ldrh	r3, [r3, #8]
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	f004 fc5c 	bl	8006320 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4613      	mov	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	f008 f94d 	bl	8009d1a <HAL_SPI_TransmitReceive>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6858      	ldr	r0, [r3, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	f004 fc43 	bl	8006320 <HAL_GPIO_WritePin>
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2140      	movs	r1, #64	; 0x40
 8001ac8:	4825      	ldr	r0, [pc, #148]	; (8001b60 <sxInit+0xbc>)
 8001aca:	f004 fc29 	bl	8006320 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f003 fdae 	bl	8005630 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	4821      	ldr	r0, [pc, #132]	; (8001b60 <sxInit+0xbc>)
 8001ada:	f004 fc21 	bl	8006320 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f003 fda6 	bl	8005630 <HAL_Delay>

    SetStandbyRC(radio);
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f850 	bl	8001b8a <SetStandbyRC>
    HAL_Delay(3);
 8001aea:	2003      	movs	r0, #3
 8001aec:	f003 fda0 	bl	8005630 <HAL_Delay>
    setPacketLora(radio);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f875 	bl	8001be0 <setPacketLora>
    HAL_Delay(2);
 8001af6:	2002      	movs	r0, #2
 8001af8:	f003 fd9a 	bl	8005630 <HAL_Delay>
    SetRfFrequency2(radio);
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f859 	bl	8001bb4 <SetRfFrequency2>
    HAL_Delay(2);
 8001b02:	2002      	movs	r0, #2
 8001b04:	f003 fd94 	bl	8005630 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f897 	bl	8001c40 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f003 fd8c 	bl	8005630 <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2218      	movs	r2, #24
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f8a8 	bl	8001c74 <SetModulationParams>
    HAL_Delay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f003 fd83 	bl	8005630 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001b2a:	2232      	movs	r2, #50	; 0x32
 8001b2c:	f640 1125 	movw	r1, #2341	; 0x925
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fa1f 	bl	8001f74 <WriteRegisterByte>

    HAL_Delay(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f003 fd7a 	bl	8005630 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001b3c:	2340      	movs	r3, #64	; 0x40
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2320      	movs	r3, #32
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2320      	movs	r3, #32
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	210c      	movs	r1, #12
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f8b3 	bl	8001cb6 <SetPacketParamsLora>
    HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f003 fd6d 	bl	8005630 <HAL_Delay>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400

08001b64 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	821a      	strh	r2, [r3, #16]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	723b      	strb	r3, [r7, #8]
 8001b96:	2300      	movs	r3, #0
 8001b98:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001b9a:	f107 020c 	add.w	r2, r7, #12
 8001b9e:	f107 0108 	add.w	r1, r7, #8
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff50 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <SetRfFrequency2+0x28>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	f107 0108 	add.w	r1, r7, #8
 8001bca:	2304      	movs	r3, #4
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff3c 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08017184 	.word	0x08017184

08001be0 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <setPacketLora+0x28>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	f107 0108 	add.w	r1, r7, #8
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff26 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	08017188 	.word	0x08017188

08001c0c <SetTxParams>:
    WriteRegisterBytes(radio, 0x916, rangingAddress, 4);


}

void SetTxParams(sx1280_custom *radio, uint8_t power, uint8_t rampTime) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
 8001c1c:	238e      	movs	r3, #142	; 0x8e
 8001c1e:	723b      	strb	r3, [r7, #8]
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	727b      	strb	r3, [r7, #9]
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	72bb      	strb	r3, [r7, #10]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
 8001c28:	f107 020c 	add.w	r2, r7, #12
 8001c2c:	f107 0108 	add.w	r1, r7, #8
 8001c30:	2303      	movs	r3, #3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff09 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001c50:	238f      	movs	r3, #143	; 0x8f
 8001c52:	723b      	strb	r3, [r7, #8]
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	727b      	strb	r3, [r7, #9]
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001c5c:	f107 020c 	add.w	r2, r7, #12
 8001c60:	f107 0108 	add.w	r1, r7, #8
 8001c64:	2303      	movs	r3, #3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff feef 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	70fb      	strb	r3, [r7, #3]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70bb      	strb	r3, [r7, #2]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001c8e:	238b      	movs	r3, #139	; 0x8b
 8001c90:	723b      	strb	r3, [r7, #8]
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	727b      	strb	r3, [r7, #9]
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	72bb      	strb	r3, [r7, #10]
 8001c9a:	787b      	ldrb	r3, [r7, #1]
 8001c9c:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	f107 0108 	add.w	r1, r7, #8
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fece 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	4608      	mov	r0, r1
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	70fb      	strb	r3, [r7, #3]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70bb      	strb	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001cd0:	238c      	movs	r3, #140	; 0x8c
 8001cd2:	723b      	strb	r3, [r7, #8]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	727b      	strb	r3, [r7, #9]
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	72bb      	strb	r3, [r7, #10]
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	72fb      	strb	r3, [r7, #11]
 8001ce0:	7e3b      	ldrb	r3, [r7, #24]
 8001ce2:	733b      	strb	r3, [r7, #12]
 8001ce4:	7f3b      	ldrb	r3, [r7, #28]
 8001ce6:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2206      	movs	r2, #6
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fe81 	bl	80019f8 <sxSpiTransmit>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <WriteBuffer>:

void WriteBuffer(sx1280_custom *radio, uint8_t offset, uint8_t *data, uint8_t size) {
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	72fb      	strb	r3, [r7, #11]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1A, offset };
 8001d12:	231a      	movs	r3, #26
 8001d14:	753b      	strb	r3, [r7, #20]
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	757b      	strb	r3, [r7, #21]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6858      	ldr	r0, [r3, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	891b      	ldrh	r3, [r3, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	f004 fafb 	bl	8006320 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	f107 0114 	add.w	r1, r7, #20
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	2202      	movs	r2, #2
 8001d38:	f007 fdb2 	bl	80098a0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	f007 fda9 	bl	80098a0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6858      	ldr	r0, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	891b      	ldrh	r3, [r3, #8]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f004 fae1 	bl	8006320 <HAL_GPIO_WritePin>

}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ReadBuffer>:

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	72fb      	strb	r3, [r7, #11]
 8001d74:	4613      	mov	r3, r2
 8001d76:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001d78:	231b      	movs	r3, #27
 8001d7a:	753b      	strb	r3, [r7, #20]
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	757b      	strb	r3, [r7, #21]
 8001d80:	2300      	movs	r3, #0
 8001d82:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6858      	ldr	r0, [r3, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	891b      	ldrh	r3, [r3, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f004 fac6 	bl	8006320 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	f107 0114 	add.w	r1, r7, #20
 8001d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da0:	2203      	movs	r2, #3
 8001da2:	f007 fd7d 	bl	80098a0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	7abb      	ldrb	r3, [r7, #10]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f007 fea8 	bl	8009b08 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6858      	ldr	r0, [r3, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	891b      	ldrh	r3, [r3, #8]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f004 faac 	bl	8006320 <HAL_GPIO_WritePin>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	460b      	mov	r3, r1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001dea:	238d      	movs	r3, #141	; 0x8d
 8001dec:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001df8:	897b      	ldrh	r3, [r7, #10]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001e08:	893b      	ldrh	r3, [r7, #8]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001e1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001e28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2209      	movs	r2, #9
 8001e34:	4619      	mov	r1, r3
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fdde 	bl	80019f8 <sxSpiTransmit>
}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001e50:	2397      	movs	r3, #151	; 0x97
 8001e52:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2203      	movs	r2, #3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fdc3 	bl	80019f8 <sxSpiTransmit>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <SetTx>:

void SetTx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	70fb      	strb	r3, [r7, #3]
 8001e86:	4613      	mov	r3, r2
 8001e88:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X83;
 8001e8a:	2383      	movs	r3, #131	; 0x83
 8001e8c:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001e92:	883b      	ldrh	r3, [r7, #0]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001e9c:	883b      	ldrh	r3, [r7, #0]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fda4 	bl	80019f8 <sxSpiTransmit>
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SetRx>:

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 8001ec8:	2382      	movs	r3, #130	; 0x82
 8001eca:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001ed0:	883b      	ldrh	r3, [r7, #0]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001eda:	883b      	ldrh	r3, [r7, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fd85 	bl	80019f8 <sxSpiTransmit>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8001efe:	231d      	movs	r3, #29
 8001f00:	723b      	strb	r3, [r7, #8]
 8001f02:	2300      	movs	r3, #0
 8001f04:	727b      	strb	r3, [r7, #9]
 8001f06:	2300      	movs	r3, #0
 8001f08:	72bb      	strb	r3, [r7, #10]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001f0e:	f107 020c 	add.w	r2, r7, #12
 8001f12:	f107 0108 	add.w	r1, r7, #8
 8001f16:	2304      	movs	r3, #4
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fd96 	bl	8001a4a <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8001f1e:	7bba      	ldrb	r2, [r7, #14]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	b25a      	sxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3e:	eeb1 7a67 	vneg.f32	s14, s15
 8001f42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    radio->snr = ((float) radio->rawSnr)/4;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 8001f84:	2318      	movs	r3, #24
 8001f86:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fd27 	bl	80019f8 <sxSpiTransmit>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	0000      	movs	r0, r0
 8001fb4:	0000      	movs	r0, r0
	...

08001fb8 <encode_TLM>:
#include "main.h"
#include "telemetry.h"
#include "math.h"


void encode_TLM(TLM_decoded *dec, TLM_encoded *enc) {
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
    enc->packet_state_bits = (dec->packet_type & (1<<0)) | ((0b00011111 & dec->flight_state) << 1) | ((1 & dec->is_playing_music) << 6) | ((1&dec->is_data_logging) <<7);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	b25a      	sxtb	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b25a      	sxtb	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	789b      	ldrb	r3, [r3, #2]
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	701a      	strb	r2, [r3, #0]

    enc->pin_states_servo = (dec->pin_states & 0b00111111) | ((dec->servo_state & 0b00000011) << 6);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	b25b      	sxtb	r3, r3
 800200a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200e:	b25a      	sxtb	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	795b      	ldrb	r3, [r3, #5]
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b25b      	sxtb	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	705a      	strb	r2, [r3, #1]

    enc->systick[0] = 0xff & (dec->systick >> 16);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	b2da      	uxtb	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	709a      	strb	r2, [r3, #2]
    enc->systick[1] = 0xff & (dec->systick >> 8);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	b2da      	uxtb	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	70da      	strb	r2, [r3, #3]
    enc->systick[2] = 0xff & dec->systick;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	711a      	strb	r2, [r3, #4]

    uint16_t vbat_10mV = (uint16_t) round(dec->vbat * 100); // 0.01 V/lsb
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	edd3 7a03 	vldr	s15, [r3, #12]
 800204a:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 80023b0 <encode_TLM+0x3f8>
 800204e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002052:	ee17 0a90 	vmov	r0, s15
 8002056:	f7fe fa97 	bl	8000588 <__aeabi_f2d>
 800205a:	4603      	mov	r3, r0
 800205c:	460c      	mov	r4, r1
 800205e:	ec44 3b10 	vmov	d0, r3, r4
 8002062:	f012 fb21 	bl	80146a8 <round>
 8002066:	ec54 3b10 	vmov	r3, r4, d0
 800206a:	4618      	mov	r0, r3
 800206c:	4621      	mov	r1, r4
 800206e:	f7fe fdbb 	bl	8000be8 <__aeabi_d2uiz>
 8002072:	4603      	mov	r3, r0
 8002074:	817b      	strh	r3, [r7, #10]

    enc->vbat_MSB = (uint8_t) ((vbat_10mV >> 2) & 0xFF);
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	b29b      	uxth	r3, r3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	715a      	strb	r2, [r3, #5]
    enc->padding_vbat_LSB = (uint8_t) (vbat_10mV & 0b00000011);
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	b2da      	uxtb	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	719a      	strb	r2, [r3, #6]

    enc->orientation_quat[0] = (int8_t) round(dec->orientation_quat[0]*127);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	edd3 7a04 	vldr	s15, [r3, #16]
 8002096:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80023b4 <encode_TLM+0x3fc>
 800209a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209e:	ee17 0a90 	vmov	r0, s15
 80020a2:	f7fe fa71 	bl	8000588 <__aeabi_f2d>
 80020a6:	4603      	mov	r3, r0
 80020a8:	460c      	mov	r4, r1
 80020aa:	ec44 3b10 	vmov	d0, r3, r4
 80020ae:	f012 fafb 	bl	80146a8 <round>
 80020b2:	ec54 3b10 	vmov	r3, r4, d0
 80020b6:	4618      	mov	r0, r3
 80020b8:	4621      	mov	r1, r4
 80020ba:	f7fe fd6d 	bl	8000b98 <__aeabi_d2iz>
 80020be:	4603      	mov	r3, r0
 80020c0:	b25a      	sxtb	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	71da      	strb	r2, [r3, #7]
    enc->orientation_quat[1] = (int8_t) round(dec->orientation_quat[1]*127);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80020cc:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 80023b4 <encode_TLM+0x3fc>
 80020d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d4:	ee17 0a90 	vmov	r0, s15
 80020d8:	f7fe fa56 	bl	8000588 <__aeabi_f2d>
 80020dc:	4603      	mov	r3, r0
 80020de:	460c      	mov	r4, r1
 80020e0:	ec44 3b10 	vmov	d0, r3, r4
 80020e4:	f012 fae0 	bl	80146a8 <round>
 80020e8:	ec54 3b10 	vmov	r3, r4, d0
 80020ec:	4618      	mov	r0, r3
 80020ee:	4621      	mov	r1, r4
 80020f0:	f7fe fd52 	bl	8000b98 <__aeabi_d2iz>
 80020f4:	4603      	mov	r3, r0
 80020f6:	b25a      	sxtb	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	721a      	strb	r2, [r3, #8]
    enc->orientation_quat[2] = (int8_t) round(dec->orientation_quat[2]*127);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002102:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80023b4 <encode_TLM+0x3fc>
 8002106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210a:	ee17 0a90 	vmov	r0, s15
 800210e:	f7fe fa3b 	bl	8000588 <__aeabi_f2d>
 8002112:	4603      	mov	r3, r0
 8002114:	460c      	mov	r4, r1
 8002116:	ec44 3b10 	vmov	d0, r3, r4
 800211a:	f012 fac5 	bl	80146a8 <round>
 800211e:	ec54 3b10 	vmov	r3, r4, d0
 8002122:	4618      	mov	r0, r3
 8002124:	4621      	mov	r1, r4
 8002126:	f7fe fd37 	bl	8000b98 <__aeabi_d2iz>
 800212a:	4603      	mov	r3, r0
 800212c:	b25a      	sxtb	r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	725a      	strb	r2, [r3, #9]
    enc->orientation_quat[3] = (int8_t) round(dec->orientation_quat[3]*127);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edd3 7a07 	vldr	s15, [r3, #28]
 8002138:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80023b4 <encode_TLM+0x3fc>
 800213c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002140:	ee17 0a90 	vmov	r0, s15
 8002144:	f7fe fa20 	bl	8000588 <__aeabi_f2d>
 8002148:	4603      	mov	r3, r0
 800214a:	460c      	mov	r4, r1
 800214c:	ec44 3b10 	vmov	d0, r3, r4
 8002150:	f012 faaa 	bl	80146a8 <round>
 8002154:	ec54 3b10 	vmov	r3, r4, d0
 8002158:	4618      	mov	r0, r3
 800215a:	4621      	mov	r1, r4
 800215c:	f7fe fd1c 	bl	8000b98 <__aeabi_d2iz>
 8002160:	4603      	mov	r3, r0
 8002162:	b25a      	sxtb	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	729a      	strb	r2, [r3, #10]

    for (int i = 0; i < 3; i++) {
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e01e      	b.n	80021ac <encode_TLM+0x1f4>
        enc->acc[i] = dec->acc[i];
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	3210      	adds	r2, #16
 8002174:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3304      	adds	r3, #4
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	460a      	mov	r2, r1
 8002184:	f8a3 2003 	strh.w	r2, [r3, #3]
        enc->gyro[i] = dec->gyro[i];
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3310      	adds	r3, #16
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3308      	adds	r3, #8
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	460a      	mov	r2, r1
 80021a2:	f8a3 2001 	strh.w	r2, [r3, #1]
    for (int i = 0; i < 3; i++) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3301      	adds	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	dddd      	ble.n	800216e <encode_TLM+0x1b6>
    }

    enc->baro = (uint16_t) round(dec->baro - 50000); // 50000 Pa as zero point. Max ISA height: 5.5 km, max pressure: 115536 Pa
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80021b8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80023b8 <encode_TLM+0x400>
 80021bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021c0:	ee17 0a90 	vmov	r0, s15
 80021c4:	f7fe f9e0 	bl	8000588 <__aeabi_f2d>
 80021c8:	4603      	mov	r3, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	ec44 3b10 	vmov	d0, r3, r4
 80021d0:	f012 fa6a 	bl	80146a8 <round>
 80021d4:	ec54 3b10 	vmov	r3, r4, d0
 80021d8:	4618      	mov	r0, r3
 80021da:	4621      	mov	r1, r4
 80021dc:	f7fe fd04 	bl	8000be8 <__aeabi_d2uiz>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f8a3 2017 	strh.w	r2, [r3, #23]

    enc->temp = (uint8_t) round(dec->temp * 4);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80021f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80021f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f8:	ee17 0a90 	vmov	r0, s15
 80021fc:	f7fe f9c4 	bl	8000588 <__aeabi_f2d>
 8002200:	4603      	mov	r3, r0
 8002202:	460c      	mov	r4, r1
 8002204:	ec44 3b10 	vmov	d0, r3, r4
 8002208:	f012 fa4e 	bl	80146a8 <round>
 800220c:	ec54 3b10 	vmov	r3, r4, d0
 8002210:	4618      	mov	r0, r3
 8002212:	4621      	mov	r1, r4
 8002214:	f7fe fce8 	bl	8000be8 <__aeabi_d2uiz>
 8002218:	4603      	mov	r3, r0
 800221a:	b2da      	uxtb	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	765a      	strb	r2, [r3, #25]

    enc->altitude = (uint16_t) round((dec->altitude+48) * 16); // 0.0625m/LSB, -48 m as reference and max 2000 m.
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002226:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80023bc <encode_TLM+0x404>
 800222a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800222e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f9a5 	bl	8000588 <__aeabi_f2d>
 800223e:	4603      	mov	r3, r0
 8002240:	460c      	mov	r4, r1
 8002242:	ec44 3b10 	vmov	d0, r3, r4
 8002246:	f012 fa2f 	bl	80146a8 <round>
 800224a:	ec54 3b10 	vmov	r3, r4, d0
 800224e:	4618      	mov	r0, r3
 8002250:	4621      	mov	r1, r4
 8002252:	f7fe fcc9 	bl	8000be8 <__aeabi_d2uiz>
 8002256:	4603      	mov	r3, r0
 8002258:	b29a      	uxth	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	835a      	strh	r2, [r3, #26]

    enc->vertical_velocity = (uint8_t) MIN(MAX(round(dec->vertical_velocity + 80),0),255); // 0-255 maps to -80-175 m/s.
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002264:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80023c0 <encode_TLM+0x408>
 8002268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800226c:	ee17 0a90 	vmov	r0, s15
 8002270:	f7fe f98a 	bl	8000588 <__aeabi_f2d>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	ec44 3b10 	vmov	d0, r3, r4
 800227c:	f012 fa14 	bl	80146a8 <round>
 8002280:	ec51 0b10 	vmov	r0, r1, d0
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f7fe fc64 	bl	8000b58 <__aeabi_dcmpgt>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <encode_TLM+0x320>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800229c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80023c0 <encode_TLM+0x408>
 80022a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022a4:	ee17 0a90 	vmov	r0, s15
 80022a8:	f7fe f96e 	bl	8000588 <__aeabi_f2d>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	ec44 3b10 	vmov	d0, r3, r4
 80022b4:	f012 f9f8 	bl	80146a8 <round>
 80022b8:	ec51 0b10 	vmov	r0, r1, d0
 80022bc:	2301      	movs	r3, #1
 80022be:	461c      	mov	r4, r3
 80022c0:	a339      	add	r3, pc, #228	; (adr r3, 80023a8 <encode_TLM+0x3f0>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe fc29 	bl	8000b1c <__aeabi_dcmplt>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <encode_TLM+0x31c>
 80022d0:	2300      	movs	r3, #0
 80022d2:	461c      	mov	r4, r3
 80022d4:	b2e3      	uxtb	r3, r4
 80022d6:	e000      	b.n	80022da <encode_TLM+0x322>
 80022d8:	2301      	movs	r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d037      	beq.n	800234e <encode_TLM+0x396>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80023c0 <encode_TLM+0x408>
 80022e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ec:	ee17 0a90 	vmov	r0, s15
 80022f0:	f7fe f94a 	bl	8000588 <__aeabi_f2d>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	ec44 3b10 	vmov	d0, r3, r4
 80022fc:	f012 f9d4 	bl	80146a8 <round>
 8002300:	ec51 0b10 	vmov	r0, r1, d0
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	f7fe fc24 	bl	8000b58 <__aeabi_dcmpgt>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <encode_TLM+0x392>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800231c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80023c0 <encode_TLM+0x408>
 8002320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002324:	ee17 0a90 	vmov	r0, s15
 8002328:	f7fe f92e 	bl	8000588 <__aeabi_f2d>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
 8002330:	ec44 3b10 	vmov	d0, r3, r4
 8002334:	f012 f9b8 	bl	80146a8 <round>
 8002338:	ec54 3b10 	vmov	r3, r4, d0
 800233c:	4618      	mov	r0, r3
 800233e:	4621      	mov	r1, r4
 8002340:	f7fe fc52 	bl	8000be8 <__aeabi_d2uiz>
 8002344:	4603      	mov	r3, r0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	e002      	b.n	8002350 <encode_TLM+0x398>
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <encode_TLM+0x398>
 800234e:	23ff      	movs	r3, #255	; 0xff
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	7713      	strb	r3, [r2, #28]

    if (dec->packet_type == 1) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d11c      	bne.n	8002396 <encode_TLM+0x3de>
        enc->debug_ranging = (uint16_t) round(dec->ranging * 4);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002362:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236a:	ee17 0a90 	vmov	r0, s15
 800236e:	f7fe f90b 	bl	8000588 <__aeabi_f2d>
 8002372:	4603      	mov	r3, r0
 8002374:	460c      	mov	r4, r1
 8002376:	ec44 3b10 	vmov	d0, r3, r4
 800237a:	f012 f995 	bl	80146a8 <round>
 800237e:	ec54 3b10 	vmov	r3, r4, d0
 8002382:	4618      	mov	r0, r3
 8002384:	4621      	mov	r1, r4
 8002386:	f7fe fc2f 	bl	8000be8 <__aeabi_d2uiz>
 800238a:	4603      	mov	r3, r0
 800238c:	b29a      	uxth	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f8a3 201d 	strh.w	r2, [r3, #29]
    }
    else {
        enc->debug_ranging = dec->debug;
    }
}
 8002394:	e004      	b.n	80023a0 <encode_TLM+0x3e8>
        enc->debug_ranging = dec->debug;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f8a3 201d 	strh.w	r2, [r3, #29]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	00000000 	.word	0x00000000
 80023ac:	406fe000 	.word	0x406fe000
 80023b0:	42c80000 	.word	0x42c80000
 80023b4:	42fe0000 	.word	0x42fe0000
 80023b8:	47435000 	.word	0x47435000
 80023bc:	42400000 	.word	0x42400000
 80023c0:	42a00000 	.word	0x42a00000

080023c4 <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80023ce:	edc7 0a04 	vstr	s1, [r7, #16]
 80023d2:	ed87 1a03 	vstr	s2, [r7, #12]
 80023d6:	edc7 1a02 	vstr	s3, [r7, #8]
 80023da:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <Quaternion_set+0x2a>
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <Quaternion_set+0x4c>)
 80023e4:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <Quaternion_set+0x50>)
 80023e6:	211b      	movs	r1, #27
 80023e8:	480b      	ldr	r0, [pc, #44]	; (8002418 <Quaternion_set+0x54>)
 80023ea:	f00f fb53 	bl	8011a94 <__assert_func>
    output->w = w;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	60da      	str	r2, [r3, #12]
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	08017194 	.word	0x08017194
 8002414:	080177a8 	.word	0x080177a8
 8002418:	080171a4 	.word	0x080171a4

0800241c <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <Quaternion_setIdentity+0x1a>
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <Quaternion_setIdentity+0x38>)
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <Quaternion_setIdentity+0x3c>)
 800242e:	2124      	movs	r1, #36	; 0x24
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <Quaternion_setIdentity+0x40>)
 8002432:	f00f fb2f 	bl	8011a94 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	eddf 1a09 	vldr	s3, [pc, #36]	; 8002460 <Quaternion_setIdentity+0x44>
 800243c:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8002460 <Quaternion_setIdentity+0x44>
 8002440:	eddf 0a07 	vldr	s1, [pc, #28]	; 8002460 <Quaternion_setIdentity+0x44>
 8002444:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002448:	f7ff ffbc 	bl	80023c4 <Quaternion_set>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	080171c0 	.word	0x080171c0
 8002458:	080177b8 	.word	0x080177b8
 800245c:	080171a4 	.word	0x080171a4
 8002460:	00000000 	.word	0x00000000

08002464 <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ed93 7a01 	vldr	s14, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	ed93 6a03 	vldr	s12, [r3, #12]
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	eef0 1a46 	vmov.f32	s3, s12
 800248c:	eeb0 1a66 	vmov.f32	s2, s13
 8002490:	eef0 0a47 	vmov.f32	s1, s14
 8002494:	eeb0 0a67 	vmov.f32	s0, s15
 8002498:	f7ff ff94 	bl	80023c4 <Quaternion_set>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	0000      	movs	r0, r0
	...

080024a8 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <Quaternion_toEulerZYX+0x1c>
 80024b8:	4b87      	ldr	r3, [pc, #540]	; (80026d8 <Quaternion_toEulerZYX+0x230>)
 80024ba:	4a88      	ldr	r2, [pc, #544]	; (80026dc <Quaternion_toEulerZYX+0x234>)
 80024bc:	2185      	movs	r1, #133	; 0x85
 80024be:	4888      	ldr	r0, [pc, #544]	; (80026e0 <Quaternion_toEulerZYX+0x238>)
 80024c0:	f00f fae8 	bl	8011a94 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	ed93 7a00 	vldr	s14, [r3]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80024d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80024e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ec:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	edd3 6a02 	vldr	s13, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	edd3 7a02 	vldr	s15, [r3, #8]
 800250c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	ee17 0a90 	vmov	r0, s15
 8002518:	f7fe f836 	bl	8000588 <__aeabi_f2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	f7fd fed4 	bl	80002cc <__adddf3>
 8002524:	4603      	mov	r3, r0
 8002526:	460c      	mov	r4, r1
 8002528:	461a      	mov	r2, r3
 800252a:	4623      	mov	r3, r4
 800252c:	f04f 0000 	mov.w	r0, #0
 8002530:	496c      	ldr	r1, [pc, #432]	; (80026e4 <Quaternion_toEulerZYX+0x23c>)
 8002532:	f7fd fec9 	bl	80002c8 <__aeabi_dsub>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	4618      	mov	r0, r3
 800253c:	4621      	mov	r1, r4
 800253e:	f7fe fb73 	bl	8000c28 <__aeabi_d2f>
 8002542:	4603      	mov	r3, r0
 8002544:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 8002546:	69f8      	ldr	r0, [r7, #28]
 8002548:	f7fe f81e 	bl	8000588 <__aeabi_f2d>
 800254c:	4604      	mov	r4, r0
 800254e:	460d      	mov	r5, r1
 8002550:	69b8      	ldr	r0, [r7, #24]
 8002552:	f7fe f819 	bl	8000588 <__aeabi_f2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	ec43 2b11 	vmov	d1, r2, r3
 800255e:	ec45 4b10 	vmov	d0, r4, r5
 8002562:	f012 f98d 	bl	8014880 <atan2>
 8002566:	ec54 3b10 	vmov	r3, r4, d0
 800256a:	4618      	mov	r0, r3
 800256c:	4621      	mov	r1, r4
 800256e:	f7fe fb5b 	bl	8000c28 <__aeabi_d2f>
 8002572:	4602      	mov	r2, r0
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	ed93 7a00 	vldr	s14, [r3]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	edd3 7a02 	vldr	s15, [r3, #8]
 8002584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	edd3 6a03 	vldr	s13, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	edd3 7a01 	vldr	s15, [r3, #4]
 8002594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025a0:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 80025a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025a8:	eef0 7ae7 	vabs.f32	s15, s15
 80025ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	db15      	blt.n	80025e6 <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7fd ffe4 	bl	8000588 <__aeabi_f2d>
 80025c0:	4603      	mov	r3, r0
 80025c2:	460c      	mov	r4, r1
 80025c4:	ec44 3b11 	vmov	d1, r3, r4
 80025c8:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80026d0 <Quaternion_toEulerZYX+0x228>
 80025cc:	f010 f924 	bl	8012818 <copysign>
 80025d0:	ec52 1b10 	vmov	r1, r2, d0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1d1c      	adds	r4, r3, #4
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	f7fe fb24 	bl	8000c28 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	6023      	str	r3, [r4, #0]
 80025e4:	e012      	b.n	800260c <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7fd ffce 	bl	8000588 <__aeabi_f2d>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	ec44 3b10 	vmov	d0, r3, r4
 80025f4:	f012 f8ec 	bl	80147d0 <asin>
 80025f8:	ec52 1b10 	vmov	r1, r2, d0
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	1d1c      	adds	r4, r3, #4
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	f7fe fb10 	bl	8000c28 <__aeabi_d2f>
 8002608:	4603      	mov	r3, r0
 800260a:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	ed93 7a00 	vldr	s14, [r3]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	edd3 7a03 	vldr	s15, [r3, #12]
 8002618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	edd3 7a02 	vldr	s15, [r3, #8]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002634:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	ed93 7a02 	vldr	s14, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	edd3 7a02 	vldr	s15, [r3, #8]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	edd3 6a03 	vldr	s13, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	edd3 7a03 	vldr	s15, [r3, #12]
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	ee17 0a90 	vmov	r0, s15
 8002660:	f7fd ff92 	bl	8000588 <__aeabi_f2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	f7fd fe30 	bl	80002cc <__adddf3>
 800266c:	4603      	mov	r3, r0
 800266e:	460c      	mov	r4, r1
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	491a      	ldr	r1, [pc, #104]	; (80026e4 <Quaternion_toEulerZYX+0x23c>)
 800267a:	f7fd fe25 	bl	80002c8 <__aeabi_dsub>
 800267e:	4603      	mov	r3, r0
 8002680:	460c      	mov	r4, r1
 8002682:	4618      	mov	r0, r3
 8002684:	4621      	mov	r1, r4
 8002686:	f7fe facf 	bl	8000c28 <__aeabi_d2f>
 800268a:	4603      	mov	r3, r0
 800268c:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 800268e:	6938      	ldr	r0, [r7, #16]
 8002690:	f7fd ff7a 	bl	8000588 <__aeabi_f2d>
 8002694:	4604      	mov	r4, r0
 8002696:	460d      	mov	r5, r1
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7fd ff75 	bl	8000588 <__aeabi_f2d>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	ec43 2b11 	vmov	d1, r2, r3
 80026a6:	ec45 4b10 	vmov	d0, r4, r5
 80026aa:	f012 f8e9 	bl	8014880 <atan2>
 80026ae:	ec52 1b10 	vmov	r1, r2, d0
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f103 0408 	add.w	r4, r3, #8
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	f7fe fab4 	bl	8000c28 <__aeabi_d2f>
 80026c0:	4603      	mov	r3, r0
 80026c2:	6023      	str	r3, [r4, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bdb0      	pop	{r4, r5, r7, pc}
 80026cc:	f3af 8000 	nop.w
 80026d0:	54442d18 	.word	0x54442d18
 80026d4:	3ff921fb 	.word	0x3ff921fb
 80026d8:	08017194 	.word	0x08017194
 80026dc:	080177d0 	.word	0x080177d0
 80026e0:	080171a4 	.word	0x080171a4
 80026e4:	3ff00000 	.word	0x3ff00000

080026e8 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <Quaternion_conjugate+0x1c>
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <Quaternion_conjugate+0x5c>)
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <Quaternion_conjugate+0x60>)
 80026fc:	21b7      	movs	r1, #183	; 0xb7
 80026fe:	4813      	ldr	r0, [pc, #76]	; (800274c <Quaternion_conjugate+0x64>)
 8002700:	f00f f9c8 	bl	8011a94 <__assert_func>
    output->w = q->w;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002712:	eef1 7a67 	vneg.f32	s15, s15
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002722:	eef1 7a67 	vneg.f32	s15, s15
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002732:	eef1 7a67 	vneg.f32	s15, s15
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08017194 	.word	0x08017194
 8002748:	080177e8 	.word	0x080177e8
 800274c:	080171a4 	.word	0x080171a4

08002750 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <Quaternion_multiply+0x1e>
 8002762:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <Quaternion_multiply+0x174>)
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <Quaternion_multiply+0x178>)
 8002766:	21d2      	movs	r1, #210	; 0xd2
 8002768:	4858      	ldr	r0, [pc, #352]	; (80028cc <Quaternion_multiply+0x17c>)
 800276a:	f00f f993 	bl	8011a94 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	ed93 7a00 	vldr	s14, [r3]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	edd3 6a01 	vldr	s13, [r3, #4]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	edd3 7a01 	vldr	s15, [r3, #4]
 800278a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edd3 6a02 	vldr	s13, [r3, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	edd3 7a02 	vldr	s15, [r3, #8]
 800279e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ba:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80027da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280a:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	ed93 7a00 	vldr	s14, [r3]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	edd3 7a02 	vldr	s15, [r3, #8]
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	edd3 6a01 	vldr	s13, [r3, #4]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	edd3 7a03 	vldr	s15, [r3, #12]
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	edd3 6a02 	vldr	s13, [r3, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	edd3 6a03 	vldr	s13, [r3, #12]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285a:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	ed93 7a00 	vldr	s14, [r3]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	edd3 7a03 	vldr	s15, [r3, #12]
 800286a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	edd3 6a01 	vldr	s13, [r3, #4]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	edd3 7a02 	vldr	s15, [r3, #8]
 800287a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	edd3 6a02 	vldr	s13, [r3, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	edd3 7a01 	vldr	s15, [r3, #4]
 800288e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	edd3 6a03 	vldr	s13, [r3, #12]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028aa:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	461c      	mov	r4, r3
 80028b2:	f107 0310 	add.w	r3, r7, #16
 80028b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80028bc:	bf00      	nop
 80028be:	3724      	adds	r7, #36	; 0x24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	08017194 	.word	0x08017194
 80028c8:	08017800 	.word	0x08017800
 80028cc:	080171a4 	.word	0x080171a4

080028d0 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b092      	sub	sp, #72	; 0x48
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <Quaternion_rotate+0x1e>
 80028e2:	4bbc      	ldr	r3, [pc, #752]	; (8002bd4 <Quaternion_rotate+0x304>)
 80028e4:	4abc      	ldr	r2, [pc, #752]	; (8002bd8 <Quaternion_rotate+0x308>)
 80028e6:	21e6      	movs	r1, #230	; 0xe6
 80028e8:	48bc      	ldr	r0, [pc, #752]	; (8002bdc <Quaternion_rotate+0x30c>)
 80028ea:	f00f f8d3 	bl	8011a94 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	ed93 7a00 	vldr	s14, [r3]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	ed93 7a01 	vldr	s14, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	edd3 7a01 	vldr	s15, [r3, #4]
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	ed93 7a02 	vldr	s14, [r3, #8]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	edd3 7a03 	vldr	s15, [r3, #12]
 8002936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	edd3 7a01 	vldr	s15, [r3, #4]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	ed93 7a00 	vldr	s14, [r3]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	edd3 7a02 	vldr	s15, [r3, #8]
 800295e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002962:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	ed93 7a00 	vldr	s14, [r3]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002976:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	edd3 7a02 	vldr	s15, [r3, #8]
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	ed93 7a01 	vldr	s14, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	edd3 7a03 	vldr	s15, [r3, #12]
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	ed93 7a00 	vldr	s14, [r3]
 80029bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	3308      	adds	r3, #8
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3304      	adds	r3, #4
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	edd3 6a00 	vldr	s13, [r3]
 80029fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002a02:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002a06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a0a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	3304      	adds	r3, #4
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3308      	adds	r3, #8
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a32:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	edd3 6a00 	vldr	s13, [r3]
 8002a3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002a44:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	edd3 6a00 	vldr	s13, [r3]
 8002a4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a56:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002a5a:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002a5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a62:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3304      	adds	r3, #4
 8002a74:	edd3 6a00 	vldr	s13, [r3]
 8002a78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a84:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a88:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3308      	adds	r3, #8
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a98:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002a9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002aa0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002aae:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	edd3 6a00 	vldr	s13, [r3]
 8002aba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	edd3 6a00 	vldr	s13, [r3]
 8002ace:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002ada:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ade:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002aee:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3304      	adds	r3, #4
 8002af6:	edd3 6a00 	vldr	s13, [r3]
 8002afa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b02:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002b06:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002b0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b0e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b20:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	3304      	adds	r3, #4
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3308      	adds	r3, #8
 8002b38:	edd3 6a00 	vldr	s13, [r3]
 8002b3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b44:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002b48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b4c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3308      	adds	r3, #8
 8002b62:	edd3 6a00 	vldr	s13, [r3]
 8002b66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b76:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b86:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	edd3 6a00 	vldr	s13, [r3]
 8002b92:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	edd3 6a00 	vldr	s13, [r3]
 8002ba6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bae:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002bb2:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	3748      	adds	r7, #72	; 0x48
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	08017194 	.word	0x08017194
 8002bd8:	08017814 	.word	0x08017814
 8002bdc:	080171a4 	.word	0x080171a4

08002be0 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bec:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	ed93 7a00 	vldr	s14, [r3]
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c04:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	ed93 7a00 	vldr	s14, [r3]
 8002c10:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c20:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3308      	adds	r3, #8
 8002c28:	ed93 7a00 	vldr	s14, [r3]
 8002c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3c:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8002c40:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002c50:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS) {
 8002c70:	69b8      	ldr	r0, [r7, #24]
 8002c72:	f7fd fc89 	bl	8000588 <__aeabi_f2d>
 8002c76:	a336      	add	r3, pc, #216	; (adr r3, 8002d50 <Quaternion_fromRate+0x170>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f7fd ff6c 	bl	8000b58 <__aeabi_dcmpgt>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d05c      	beq.n	8002d40 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 8002c86:	69b8      	ldr	r0, [r7, #24]
 8002c88:	f7fd fc7e 	bl	8000588 <__aeabi_f2d>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	ec44 3b10 	vmov	d0, r3, r4
 8002c94:	f011 ff66 	bl	8014b64 <sqrt>
 8002c98:	ec54 3b10 	vmov	r3, r4, d0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	f7fd ffc2 	bl	8000c28 <__aeabi_d2f>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 8002ca8:	69b8      	ldr	r0, [r7, #24]
 8002caa:	f7fd fc6d 	bl	8000588 <__aeabi_f2d>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	ec44 3b10 	vmov	d0, r3, r4
 8002cb6:	f011 fd43 	bl	8014740 <sin>
 8002cba:	ec56 5b10 	vmov	r5, r6, d0
 8002cbe:	69b8      	ldr	r0, [r7, #24]
 8002cc0:	f7fd fc62 	bl	8000588 <__aeabi_f2d>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	4628      	mov	r0, r5
 8002cce:	4631      	mov	r1, r6
 8002cd0:	f7fd fddc 	bl	800088c <__aeabi_ddiv>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	4621      	mov	r1, r4
 8002cdc:	f7fd ffa4 	bl	8000c28 <__aeabi_d2f>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 8002ce4:	69b8      	ldr	r0, [r7, #24]
 8002ce6:	f7fd fc4f 	bl	8000588 <__aeabi_f2d>
 8002cea:	4603      	mov	r3, r0
 8002cec:	460c      	mov	r4, r1
 8002cee:	ec44 3b10 	vmov	d0, r3, r4
 8002cf2:	f011 fc95 	bl	8014620 <cos>
 8002cf6:	ec54 3b10 	vmov	r3, r4, d0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	f7fd ff93 	bl	8000c28 <__aeabi_d2f>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8002d08:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8002d1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8002d2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8002d3e:	e002      	b.n	8002d46 <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff fb6b 	bl	800241c <Quaternion_setIdentity>
}
 8002d46:	bf00      	nop
 8002d48:	372c      	adds	r7, #44	; 0x2c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e2308c3a 	.word	0xe2308c3a
 8002d54:	3e45798e 	.word	0x3e45798e

08002d58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <vApplicationGetIdleTaskMemory+0x30>)
 8002d6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000620 	.word	0x20000620
 8002d88:	20000674 	.word	0x20000674
 8002d8c:	00000000 	.word	0x00000000

08002d90 <get_battery_voltage>:
void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB);
void jingleBell();
void rick();
void ksp();

float get_battery_voltage() {
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002d96:	4816      	ldr	r0, [pc, #88]	; (8002df0 <get_battery_voltage+0x60>)
 8002d98:	f002 fcb0 	bl	80056fc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002d9c:	2164      	movs	r1, #100	; 0x64
 8002d9e:	4814      	ldr	r0, [pc, #80]	; (8002df0 <get_battery_voltage+0x60>)
 8002da0:	f002 fd72 	bl	8005888 <HAL_ADC_PollForConversion>
    float voltage = ((float) HAL_ADC_GetValue(&hadc1)) * VBAT_CALIBRATION;
 8002da4:	4812      	ldr	r0, [pc, #72]	; (8002df0 <get_battery_voltage+0x60>)
 8002da6:	f002 fdf3 	bl	8005990 <HAL_ADC_GetValue>
 8002daa:	ee07 0a90 	vmov	s15, r0
 8002dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db2:	ee17 0a90 	vmov	r0, s15
 8002db6:	f7fd fbe7 	bl	8000588 <__aeabi_f2d>
 8002dba:	a30b      	add	r3, pc, #44	; (adr r3, 8002de8 <get_battery_voltage+0x58>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fc3a 	bl	8000638 <__aeabi_dmul>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	4621      	mov	r1, r4
 8002dcc:	f7fd ff2c 	bl	8000c28 <__aeabi_d2f>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	607b      	str	r3, [r7, #4]
    return voltage;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	ee07 3a90 	vmov	s15, r3
}
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}
 8002de4:	f3af 8000 	nop.w
 8002de8:	f34eff30 	.word	0xf34eff30
 8002dec:	3f72b5b7 	.word	0x3f72b5b7
 8002df0:	2000472c 	.word	0x2000472c

08002df4 <is_armed>:

uint8_t is_armed() {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(RBF_GPIO_Port, RBF_Pin);// High corresponds to disconected = armed
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4803      	ldr	r0, [pc, #12]	; (8002e08 <is_armed+0x14>)
 8002dfc:	f003 fa78 	bl	80062f0 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40020000 	.word	0x40020000

08002e0c <is_armed_debounce>:

uint8_t is_armed_debounce() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	e00c      	b.n	8002e32 <is_armed_debounce+0x26>
        if (!is_armed()) {
 8002e18:	f7ff ffec 	bl	8002df4 <is_armed>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <is_armed_debounce+0x1a>
            return 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e009      	b.n	8002e3a <is_armed_debounce+0x2e>
        }
        osDelay(1);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f00b fec0 	bl	800ebac <osDelay>
    for (int i = 0; i < 20; i++) {
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b13      	cmp	r3, #19
 8002e36:	ddef      	ble.n	8002e18 <is_armed_debounce+0xc>
    }
    return 1;
 8002e38:	2301      	movs	r3, #1
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <is_soft_enabled>:

uint8_t is_soft_enabled() {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ARM_GPIO_Port, ARM_Pin);
 8002e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <is_soft_enabled+0x14>)
 8002e4e:	f003 fa4f 	bl	80062f0 <HAL_GPIO_ReadPin>
 8002e52:	4603      	mov	r3, r0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40020400 	.word	0x40020400

08002e5c <is_breakwire_connected>:

uint8_t is_breakwire_connected() {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
    return !HAL_GPIO_ReadPin(BREAKWIRE_GPIO_Port, BREAKWIRE_Pin);
 8002e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e64:	4805      	ldr	r0, [pc, #20]	; (8002e7c <is_breakwire_connected+0x20>)
 8002e66:	f003 fa43 	bl	80062f0 <HAL_GPIO_ReadPin>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40020400 	.word	0x40020400

08002e80 <is_breakwire_broken_debounce>:

uint8_t is_breakwire_broken_debounce() {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	e00c      	b.n	8002ea6 <is_breakwire_broken_debounce+0x26>
        if (is_breakwire_connected()) {
 8002e8c:	f7ff ffe6 	bl	8002e5c <is_breakwire_connected>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <is_breakwire_broken_debounce+0x1a>
            return 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e009      	b.n	8002eae <is_breakwire_broken_debounce+0x2e>
        }
        osDelay(1);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f00b fe86 	bl	800ebac <osDelay>
    for (int i = 0; i < 20; i++) {
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b13      	cmp	r3, #19
 8002eaa:	ddef      	ble.n	8002e8c <is_breakwire_broken_debounce+0xc>
    }
    return 1;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <buzzer_beep>:

void buzzer_beep(uint8_t delayval) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
    buzzer_setting = REPEAT_BEEP;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <buzzer_beep+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
    buzzer_delay = delayval * 20;
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <buzzer_beep+0x50>)
 8002ed8:	801a      	strh	r2, [r3, #0]

    if (osMessageAvailableSpace(BuzzerQueueHandle)) {
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <buzzer_beep+0x54>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f00b ff56 	bl	800ed90 <osMessageAvailableSpace>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <buzzer_beep+0x42>
        osMessagePut(BuzzerQueueHandle, buzzer_delay, 100);
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <buzzer_beep+0x54>)
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <buzzer_beep+0x50>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	2264      	movs	r2, #100	; 0x64
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f00b fe97 	bl	800ec28 <osMessagePut>
    }
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000001 	.word	0x20000001
 8002f08:	20000002 	.word	0x20000002
 8002f0c:	20004774 	.word	0x20004774

08002f10 <buzzer_clear_queue>:

void buzzer_clear_queue() {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
    xQueueReset(BuzzerQueueHandle);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <buzzer_clear_queue+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f00b fff8 	bl	800ef10 <xQueueGenericReset>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20004774 	.word	0x20004774

08002f28 <pulse_recording_button>:

void pulse_recording_button() {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_SET);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2120      	movs	r1, #32
 8002f30:	4806      	ldr	r0, [pc, #24]	; (8002f4c <pulse_recording_button+0x24>)
 8002f32:	f003 f9f5 	bl	8006320 <HAL_GPIO_WritePin>
    osDelay(300);
 8002f36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f3a:	f00b fe37 	bl	800ebac <osDelay>
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_RESET);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2120      	movs	r1, #32
 8002f42:	4802      	ldr	r0, [pc, #8]	; (8002f4c <pulse_recording_button+0x24>)
 8002f44:	f003 f9ec 	bl	8006320 <HAL_GPIO_WritePin>
}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40020800 	.word	0x40020800

08002f50 <enable_recording>:

void enable_recording() {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
    if (!is_camera_recording) {
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <enable_recording+0x1c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <enable_recording+0x16>
        pulse_recording_button();
 8002f5c:	f7ff ffe4 	bl	8002f28 <pulse_recording_button>
        is_camera_recording = 1;
 8002f60:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <enable_recording+0x1c>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
    }
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000878 	.word	0x20000878

08002f70 <enable_camera>:
        pulse_recording_button();
        is_camera_recording = 0;
    }
}

void enable_camera() {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_SET);
 8002f74:	2201      	movs	r2, #1
 8002f76:	2104      	movs	r1, #4
 8002f78:	4803      	ldr	r0, [pc, #12]	; (8002f88 <enable_camera+0x18>)
 8002f7a:	f003 f9d1 	bl	8006320 <HAL_GPIO_WritePin>
    is_camera_recording = 0;
 8002f7e:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <enable_camera+0x1c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	20000878 	.word	0x20000878

08002f90 <disable_camera>:

void disable_camera() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
    if (is_camera_recording) {
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <disable_camera+0x2c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <disable_camera+0x1e>
        pulse_recording_button();
 8002f9c:	f7ff ffc4 	bl	8002f28 <pulse_recording_button>
        osDelay(1000);
 8002fa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fa4:	f00b fe02 	bl	800ebac <osDelay>
        is_camera_recording = 0;
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <disable_camera+0x2c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <disable_camera+0x30>)
 8002fb4:	f003 f9b4 	bl	8006320 <HAL_GPIO_WritePin>
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000878 	.word	0x20000878
 8002fc0:	40020000 	.word	0x40020000

08002fc4 <restart_camera_with_recording>:

void restart_camera_with_recording() {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    disable_camera();
 8002fc8:	f7ff ffe2 	bl	8002f90 <disable_camera>
    osDelay(300);
 8002fcc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fd0:	f00b fdec 	bl	800ebac <osDelay>
    enable_camera();
 8002fd4:	f7ff ffcc 	bl	8002f70 <enable_camera>
    osDelay(10000);
 8002fd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8002fdc:	f00b fde6 	bl	800ebac <osDelay>
    enable_recording();
 8002fe0:	f7ff ffb6 	bl	8002f50 <enable_recording>
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <set_status_led>:

void set_status_led(uint8_t status_state) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
    // TODO
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <is_vote_asserted>:

uint8_t is_vote_asserted() {
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
    // Todo
    return 0;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <loraOrientation>:
        }

    }
}

void loraOrientation(uint8_t isTx) {
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8003018:	af0c      	add	r7, sp, #48	; 0x30
 800301a:	4602      	mov	r2, r0
 800301c:	f107 0317 	add.w	r3, r7, #23
 8003020:	701a      	strb	r2, [r3, #0]

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8003022:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8003026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302a:	4ae1      	ldr	r2, [pc, #900]	; (80033b0 <loraOrientation+0x3a0>)
 800302c:	49e1      	ldr	r1, [pc, #900]	; (80033b4 <loraOrientation+0x3a4>)
 800302e:	f7fe fd39 	bl	8001aa4 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8003032:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003036:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800303a:	49df      	ldr	r1, [pc, #892]	; (80033b8 <loraOrientation+0x3a8>)
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fd91 	bl	8001b64 <sxSetDio1Pin>

    float data[4];

    char printBuffer[128];

    if (isTx) {
 8003042:	f107 0317 	add.w	r3, r7, #23
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8121 	beq.w	8003290 <loraOrientation+0x280>
        //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
        SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 800304e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003052:	22e0      	movs	r2, #224	; 0xe0
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fdd8 	bl	8001c0c <SetTxParams>
        HAL_Delay(3);
 800305c:	2003      	movs	r0, #3
 800305e:	f002 fae7 	bl	8005630 <HAL_Delay>

        lsm6dso imu;
        uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 8003062:	f107 001c 	add.w	r0, r7, #28
 8003066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306a:	4ad4      	ldr	r2, [pc, #848]	; (80033bc <loraOrientation+0x3ac>)
 800306c:	49d4      	ldr	r1, [pc, #848]	; (80033c0 <loraOrientation+0x3b0>)
 800306e:	f7fe f82b 	bl	80010c8 <LSM_init>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
        SPI2_NSS_Pin);

        Orientation ori;
        orientation_init(&ori);
 8003078:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fd70 	bl	8004b62 <orientation_init>
        uint32_t counter = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

        data[0] = ori.orientationQuat.w;
 8003088:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        data[1] = ori.orientationQuat.v[0];
 8003092:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        data[2] = ori.orientationQuat.v[1];
 800309c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        data[3] = ori.orientationQuat.v[2];
 80030a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

        WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 80030b0:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80030b4:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 80030b8:	2310      	movs	r3, #16
 80030ba:	2100      	movs	r1, #0
 80030bc:	f7fe fe1f 	bl	8001cfe <WriteBuffer>
        HAL_Delay(1);
 80030c0:	2001      	movs	r0, #1
 80030c2:	f002 fab5 	bl	8005630 <HAL_Delay>

        SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 80030c6:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	2201      	movs	r2, #1
 80030d2:	2101      	movs	r1, #1
 80030d4:	f7fe fe7c 	bl	8001dd0 <SetDioIrqParams>

        HAL_Delay(3);
 80030d8:	2003      	movs	r0, #3
 80030da:	f002 faa9 	bl	8005630 <HAL_Delay>

        uint32_t lasttime = HAL_GetTick();
 80030de:	f002 fa9b 	bl	8005618 <HAL_GetTick>
 80030e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        uint32_t nowtime = HAL_GetTick();
 80030e6:	f002 fa97 	bl	8005618 <HAL_GetTick>
 80030ea:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
        float dt = 0;
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        changeLed(100, 100, 100);
 80030f6:	2264      	movs	r2, #100	; 0x64
 80030f8:	2164      	movs	r1, #100	; 0x64
 80030fa:	2064      	movs	r0, #100	; 0x64
 80030fc:	f000 ffd8 	bl	80040b0 <changeLed>

        while (1) {

            LSM_pollsensors(&imu);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe f859 	bl	80011bc <LSM_pollsensors>
            changeLed(0, 0, 100);
 800310a:	2264      	movs	r2, #100	; 0x64
 800310c:	2100      	movs	r1, #0
 800310e:	2000      	movs	r0, #0
 8003110:	f000 ffce 	bl	80040b0 <changeLed>
            nowtime = HAL_GetTick();
 8003114:	f002 fa80 	bl	8005618 <HAL_GetTick>
 8003118:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
            dt = (nowtime - lasttime) / 1000.0;
 800311c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8003120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fa0c 	bl	8000544 <__aeabi_ui2d>
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	4ba4      	ldr	r3, [pc, #656]	; (80033c4 <loraOrientation+0x3b4>)
 8003132:	f7fd fbab 	bl	800088c <__aeabi_ddiv>
 8003136:	4603      	mov	r3, r0
 8003138:	460c      	mov	r4, r1
 800313a:	4618      	mov	r0, r3
 800313c:	4621      	mov	r1, r4
 800313e:	f7fd fd73 	bl	8000c28 <__aeabi_d2f>
 8003142:	4603      	mov	r3, r0
 8003144:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            lasttime = nowtime;
 8003148:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800314c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            orientation_setGyro(&ori, imu.gyroRPS);
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003158:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fd2d 	bl	8004bbe <orientation_setGyro>
            orientation_setAcc(&ori, imu.accMPS);
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800316c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f001 fd3a 	bl	8004bec <orientation_setAcc>
            orientation_update(&ori, dt);
 8003178:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800317c:	ed97 0a7b 	vldr	s0, [r7, #492]	; 0x1ec
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fd4d 	bl	8004c20 <orientation_update>

            counter++;
 8003186:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800318a:	3301      	adds	r3, #1
 800318c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

            if (counter % 20 == 0) {
 8003190:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8003194:	4b8c      	ldr	r3, [pc, #560]	; (80033c8 <loraOrientation+0x3b8>)
 8003196:	fba3 2301 	umull	r2, r3, r3, r1
 800319a:	091a      	lsrs	r2, r3, #4
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	1aca      	subs	r2, r1, r3
 80031a6:	2a00      	cmp	r2, #0
 80031a8:	d16e      	bne.n	8003288 <loraOrientation+0x278>
                data[0] = ori.orientationQuat.w;
 80031aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
                data[1] = ori.orientationQuat.v[0];
 80031b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
                data[2] = ori.orientationQuat.v[1];
 80031be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                data[3] = ori.orientationQuat.v[2];
 80031c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 80031d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f9d6 	bl	8000588 <__aeabi_f2d>
 80031dc:	4682      	mov	sl, r0
 80031de:	468b      	mov	fp, r1
                        data[1], data[2], data[3]);
 80031e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd f9cf 	bl	8000588 <__aeabi_f2d>
 80031ea:	4604      	mov	r4, r0
 80031ec:	460d      	mov	r5, r1
                        data[1], data[2], data[3]);
 80031ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9c8 	bl	8000588 <__aeabi_f2d>
 80031f8:	4680      	mov	r8, r0
 80031fa:	4689      	mov	r9, r1
                        data[1], data[2], data[3]);
 80031fc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9c1 	bl	8000588 <__aeabi_f2d>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 800320e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003212:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003216:	e9cd 4500 	strd	r4, r5, [sp]
 800321a:	4652      	mov	r2, sl
 800321c:	465b      	mov	r3, fp
 800321e:	496b      	ldr	r1, [pc, #428]	; (80033cc <loraOrientation+0x3bc>)
 8003220:	f00f fb4e 	bl	80128c0 <siprintf>
                //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
                CDC_Transmit_FS((uint8_t*) printBuffer,
                        MIN(strlen(printBuffer), 128));
 8003224:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003228:	4618      	mov	r0, r3
 800322a:	f7fc fff1 	bl	8000210 <strlen>
 800322e:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 8003230:	2b7f      	cmp	r3, #127	; 0x7f
 8003232:	d807      	bhi.n	8003244 <loraOrientation+0x234>
                        MIN(strlen(printBuffer), 128));
 8003234:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003238:	4618      	mov	r0, r3
 800323a:	f7fc ffe9 	bl	8000210 <strlen>
 800323e:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 8003240:	b29b      	uxth	r3, r3
 8003242:	e000      	b.n	8003246 <loraOrientation+0x236>
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f00d ff7f 	bl	8011150 <CDC_Transmit_FS>

                WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 8003252:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8003256:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 800325a:	2310      	movs	r3, #16
 800325c:	2100      	movs	r1, #0
 800325e:	f7fe fd4e 	bl	8001cfe <WriteBuffer>
                HAL_Delay(1);
 8003262:	2001      	movs	r0, #1
 8003264:	f002 f9e4 	bl	8005630 <HAL_Delay>
                ClrIrqStatus(&radio, 1); // clear txdone irq
 8003268:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800326c:	2101      	movs	r1, #1
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fde8 	bl	8001e44 <ClrIrqStatus>
                HAL_Delay(1);
 8003274:	2001      	movs	r0, #1
 8003276:	f002 f9db 	bl	8005630 <HAL_Delay>
                SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 800327a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800327e:	2232      	movs	r2, #50	; 0x32
 8003280:	2102      	movs	r1, #2
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fdf9 	bl	8001e7a <SetTx>
            }

            HAL_Delay(1);
 8003288:	2001      	movs	r0, #1
 800328a:	f002 f9d1 	bl	8005630 <HAL_Delay>
            LSM_pollsensors(&imu);
 800328e:	e737      	b.n	8003100 <loraOrientation+0xf0>

        }
    } else {
        // rx mode
        SetDioIrqParams(&radio, 1 << 1, 1 << 1, 0, 0); //rxdone on gpio1
 8003290:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2300      	movs	r3, #0
 800329a:	2202      	movs	r2, #2
 800329c:	2102      	movs	r1, #2
 800329e:	f7fe fd97 	bl	8001dd0 <SetDioIrqParams>
        HAL_Delay(1);
 80032a2:	2001      	movs	r0, #1
 80032a4:	f002 f9c4 	bl	8005630 <HAL_Delay>

        uint8_t rxStartBufferPointer = 1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

        changeLed(0, 100, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2164      	movs	r1, #100	; 0x64
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 fefc 	bl	80040b0 <changeLed>
        while (1) {

            //SetRx(0x00, 0xffff); // continous rx
            SetRx(&radio, 0x00, 0); // No timeout
 80032b8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fdf9 	bl	8001eb8 <SetRx>
            //SetRx(0x02, 200); // 200 ms timeout
            HAL_Delay(1);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f002 f9b2 	bl	8005630 <HAL_Delay>
            // wait for reception:
            while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 80032cc:	bf00      	nop
 80032ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032d2:	4839      	ldr	r0, [pc, #228]	; (80033b8 <loraOrientation+0x3a8>)
 80032d4:	f003 f80c 	bl	80062f0 <HAL_GPIO_ReadPin>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f7      	beq.n	80032ce <loraOrientation+0x2be>
            }

            GetPacketStatusLora(&radio);
 80032de:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fe07 	bl	8001ef6 <GetPacketStatusLora>
            ClrIrqStatus(&radio, 1 << 1); // clear rxdone Irq
 80032e8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fda8 	bl	8001e44 <ClrIrqStatus>
            HAL_Delay(1);
 80032f4:	2001      	movs	r0, #1
 80032f6:	f002 f99b 	bl	8005630 <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(data),
 80032fa:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80032fe:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8003302:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8003306:	2210      	movs	r2, #16
 8003308:	f7fe fd2d 	bl	8001d66 <ReadBuffer>
                    (uint8_t*) data);
            snprintf(printBuffer, 128,
                    "Quaternion: %f, %f, %f, %f, RSSI: %f, SNR: %f\r\n",
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 800330c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
            snprintf(printBuffer, 128,
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f939 	bl	8000588 <__aeabi_f2d>
 8003316:	4604      	mov	r4, r0
 8003318:	460d      	mov	r5, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 800331a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
            snprintf(printBuffer, 128,
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f932 	bl	8000588 <__aeabi_f2d>
 8003324:	4680      	mov	r8, r0
 8003326:	4689      	mov	r9, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003328:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
            snprintf(printBuffer, 128,
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd f92b 	bl	8000588 <__aeabi_f2d>
 8003332:	4682      	mov	sl, r0
 8003334:	468b      	mov	fp, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003336:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
            snprintf(printBuffer, 128,
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f924 	bl	8000588 <__aeabi_f2d>
 8003340:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003344:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
            snprintf(printBuffer, 128,
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f91d 	bl	8000588 <__aeabi_f2d>
 800334e:	e9c7 0100 	strd	r0, r1, [r7]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 8003352:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
            snprintf(printBuffer, 128,
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f916 	bl	8000588 <__aeabi_f2d>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8003364:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003368:	ed97 7b00 	vldr	d7, [r7]
 800336c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003370:	ed97 7b02 	vldr	d7, [r7, #8]
 8003374:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003378:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800337c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003380:	e9cd 4500 	strd	r4, r5, [sp]
 8003384:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <loraOrientation+0x3c0>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	f00f fa66 	bl	8012858 <sniprintf>
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 800338c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003390:	4618      	mov	r0, r3
 8003392:	f7fc ff3d 	bl	8000210 <strlen>
 8003396:	4603      	mov	r3, r0
 8003398:	b29a      	uxth	r2, r3
 800339a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f00d fed5 	bl	8011150 <CDC_Transmit_FS>
            HAL_Delay(1);
 80033a6:	2001      	movs	r0, #1
 80033a8:	f002 f942 	bl	8005630 <HAL_Delay>
            SetRx(&radio, 0x00, 0); // No timeout
 80033ac:	e784      	b.n	80032b8 <loraOrientation+0x2a8>
 80033ae:	bf00      	nop
 80033b0:	40020000 	.word	0x40020000
 80033b4:	200046d4 	.word	0x200046d4
 80033b8:	40020800 	.word	0x40020800
 80033bc:	40020400 	.word	0x40020400
 80033c0:	20004638 	.word	0x20004638
 80033c4:	408f4000 	.word	0x408f4000
 80033c8:	cccccccd 	.word	0xcccccccd
 80033cc:	080171e8 	.word	0x080171e8
 80033d0:	08017208 	.word	0x08017208

080033d4 <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 80033d8:	2214      	movs	r2, #20
 80033da:	2122      	movs	r1, #34	; 0x22
 80033dc:	2064      	movs	r0, #100	; 0x64
 80033de:	f000 fe67 	bl	80040b0 <changeLed>

    changeLed(255, 0, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	20ff      	movs	r0, #255	; 0xff
 80033e8:	f000 fe62 	bl	80040b0 <changeLed>
    playtone(1046, 100, 10);
 80033ec:	220a      	movs	r2, #10
 80033ee:	2164      	movs	r1, #100	; 0x64
 80033f0:	f240 4016 	movw	r0, #1046	; 0x416
 80033f4:	f000 fd64 	bl	8003ec0 <playtone>
    HAL_Delay(100);
 80033f8:	2064      	movs	r0, #100	; 0x64
 80033fa:	f002 f919 	bl	8005630 <HAL_Delay>
    changeLed(0, 255, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	21ff      	movs	r1, #255	; 0xff
 8003402:	2000      	movs	r0, #0
 8003404:	f000 fe54 	bl	80040b0 <changeLed>
    playtone(1319, 100, 10);
 8003408:	220a      	movs	r2, #10
 800340a:	2164      	movs	r1, #100	; 0x64
 800340c:	f240 5027 	movw	r0, #1319	; 0x527
 8003410:	f000 fd56 	bl	8003ec0 <playtone>
    return;
 8003414:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 8003416:	bd80      	pop	{r7, pc}

08003418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8003420:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003422:	f002 f8c3 	bl	80055ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003426:	f000 f99f 	bl	8003768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800342a:	f000 fc59 	bl	8003ce0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800342e:	f000 fbbd 	bl	8003bac <MX_TIM3_Init>
  MX_SPI2_Init();
 8003432:	f000 faeb 	bl	8003a0c <MX_SPI2_Init>
  MX_SPI3_Init();
 8003436:	f000 fb1f 	bl	8003a78 <MX_SPI3_Init>
  MX_TIM2_Init();
 800343a:	f000 fb53 	bl	8003ae4 <MX_TIM2_Init>
  MX_SPI1_Init();
 800343e:	f000 faaf 	bl	80039a0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003442:	f009 f951 	bl	800c6e8 <MX_FATFS_Init>
  MX_I2C3_Init();
 8003446:	f000 fa7d 	bl	8003944 <MX_I2C3_Init>
  MX_ADC1_Init();
 800344a:	f000 fa29 	bl	80038a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800344e:	210c      	movs	r1, #12
 8003450:	48b3      	ldr	r0, [pc, #716]	; (8003720 <main+0x308>)
 8003452:	f006 ff9d 	bl	800a390 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003456:	2104      	movs	r1, #4
 8003458:	48b1      	ldr	r0, [pc, #708]	; (8003720 <main+0x308>)
 800345a:	f006 ff99 	bl	800a390 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800345e:	2108      	movs	r1, #8
 8003460:	48af      	ldr	r0, [pc, #700]	; (8003720 <main+0x308>)
 8003462:	f006 ff95 	bl	800a390 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003466:	2100      	movs	r1, #0
 8003468:	48ad      	ldr	r0, [pc, #692]	; (8003720 <main+0x308>)
 800346a:	f006 ff91 	bl	800a390 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800346e:	210c      	movs	r1, #12
 8003470:	48ac      	ldr	r0, [pc, #688]	; (8003724 <main+0x30c>)
 8003472:	f006 ff8d 	bl	800a390 <HAL_TIM_PWM_Start>

    startupMusic();
 8003476:	f7ff ffad 	bl	80033d4 <startupMusic>
    //while (1) {rick();}

    changeLed(90, 0, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	2100      	movs	r1, #0
 800347e:	205a      	movs	r0, #90	; 0x5a
 8003480:	f000 fe16 	bl	80040b0 <changeLed>

    htim3.Instance->CCR2 = 0;
 8003484:	4ba6      	ldr	r3, [pc, #664]	; (8003720 <main+0x308>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2200      	movs	r2, #0
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800348c:	4ba4      	ldr	r3, [pc, #656]	; (8003720 <main+0x308>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	22ff      	movs	r2, #255	; 0xff
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8003494:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003498:	f002 f8ca 	bl	8005630 <HAL_Delay>

    //BWtest();
    uint8_t is_tx = 1;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
    //loraTesting(is_tx);
    // setting to go into ground station mode
    if (!is_tx) {
 80034a2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <main+0x9c>
        loraOrientation(is_tx);
 80034aa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fdae 	bl	8003010 <loraOrientation>
    }
    //servoToggleTest();

    // LSM6dso setup
    lsm6dso imu;
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 80034b4:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 80034b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034bc:	4a9a      	ldr	r2, [pc, #616]	; (8003728 <main+0x310>)
 80034be:	499b      	ldr	r1, [pc, #620]	; (800372c <main+0x314>)
 80034c0:	f7fd fe02 	bl	80010c8 <LSM_init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
    SPI2_NSS_Pin);

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 80034ca:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80034ce:	2277      	movs	r2, #119	; 0x77
 80034d0:	4997      	ldr	r1, [pc, #604]	; (8003730 <main+0x318>)
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fffe 	bl	80014d4 <SPL06_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d

    if (barostatus != 5) {
 80034de:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d010      	beq.n	8003508 <main+0xf0>
        while (1) {

            HAL_Delay(100);
 80034e6:	2064      	movs	r0, #100	; 0x64
 80034e8:	f002 f8a2 	bl	8005630 <HAL_Delay>
            changeLed(100, 0, 0);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2100      	movs	r1, #0
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f000 fddd 	bl	80040b0 <changeLed>
            HAL_Delay(100);
 80034f6:	2064      	movs	r0, #100	; 0x64
 80034f8:	f002 f89a 	bl	8005630 <HAL_Delay>
            changeLed(0, 0, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2100      	movs	r1, #0
 8003500:	2000      	movs	r0, #0
 8003502:	f000 fdd5 	bl	80040b0 <changeLed>
            HAL_Delay(100);
 8003506:	e7ee      	b.n	80034e6 <main+0xce>
        }
    }

    //SDTesting();

    float yrot = 0;
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    uint32_t lasttime = HAL_GetTick();
 8003510:	f002 f882 	bl	8005618 <HAL_GetTick>
 8003514:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
    uint32_t nowtime = HAL_GetTick();
 8003518:	f002 f87e 	bl	8005618 <HAL_GetTick>
 800351c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
    float dt = 0;
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    uint16_t rawadc;

    Orientation ori;
    orientation_init(&ori);
 8003528:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fb18 	bl	8004b62 <orientation_init>
    uint32_t counter = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of BuzzerQueue */
  osMessageQDef(BuzzerQueue, 6, uint16_t);
 8003538:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800353c:	4a7d      	ldr	r2, [pc, #500]	; (8003734 <main+0x31c>)
 800353e:	461c      	mov	r4, r3
 8003540:	4613      	mov	r3, r2
 8003542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BuzzerQueueHandle = osMessageCreate(osMessageQ(BuzzerQueue), NULL);
 8003548:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f00b fb40 	bl	800ebd4 <osMessageCreate>
 8003554:	4602      	mov	r2, r0
 8003556:	4b78      	ldr	r3, [pc, #480]	; (8003738 <main+0x320>)
 8003558:	601a      	str	r2, [r3, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLedTask, osPriorityBelowNormal, 0, 128);
 800355a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800355e:	4a77      	ldr	r2, [pc, #476]	; (800373c <main+0x324>)
 8003560:	461c      	mov	r4, r3
 8003562:	4615      	mov	r5, r2
 8003564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800356c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8003570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f00b facc 	bl	800eb14 <osThreadCreate>
 800357c:	4602      	mov	r2, r0
 800357e:	4b70      	ldr	r3, [pc, #448]	; (8003740 <main+0x328>)
 8003580:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8003582:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003586:	4a6f      	ldr	r2, [pc, #444]	; (8003744 <main+0x32c>)
 8003588:	461c      	mov	r4, r3
 800358a:	4615      	mov	r5, r2
 800358c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8003598:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f00b fab8 	bl	800eb14 <osThreadCreate>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b68      	ldr	r3, [pc, #416]	; (8003748 <main+0x330>)
 80035a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of stateMachineTas */
  osThreadDef(stateMachineTas, startStateMachine, osPriorityHigh, 0, 256);
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	4a67      	ldr	r2, [pc, #412]	; (800374c <main+0x334>)
 80035b0:	461c      	mov	r4, r3
 80035b2:	4615      	mov	r5, r2
 80035b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stateMachineTasHandle = osThreadCreate(osThread(stateMachineTas), NULL);
 80035c0:	f107 031c 	add.w	r3, r7, #28
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f00b faa4 	bl	800eb14 <osThreadCreate>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b60      	ldr	r3, [pc, #384]	; (8003750 <main+0x338>)
 80035d0:	601a      	str	r2, [r3, #0]

  /* definition and creation of telemTask */
  osThreadDef(telemTask, StartTelemTask, osPriorityNormal, 0, 256);
 80035d2:	463b      	mov	r3, r7
 80035d4:	4a5f      	ldr	r2, [pc, #380]	; (8003754 <main+0x33c>)
 80035d6:	461c      	mov	r4, r3
 80035d8:	4615      	mov	r5, r2
 80035da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemTaskHandle = osThreadCreate(osThread(telemTask), NULL);
 80035e6:	463b      	mov	r3, r7
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f00b fa92 	bl	800eb14 <osThreadCreate>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b59      	ldr	r3, [pc, #356]	; (8003758 <main+0x340>)
 80035f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80035f6:	f00b fa76 	bl	800eae6 <osKernelStart>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //SPL06_Read(&baro);
        LSM_pollsensors(&imu);
 80035fa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fddc 	bl	80011bc <LSM_pollsensors>
        //sprintf(printBuffer, "gx: %f, gy: %f, gz: %f\r\n", imu.gyroRPS[0], imu.gyroRPS[1], imu.gyroRPS[2]);
        //sprintf(printBuffer, "y:%f,o:%f,g:%f,V:%d\r\n", yrot, imu.gyroDPSOffset[1],
        //        imu.gyroDPS[1], rawadc);
        //sprintf(printBuffer, "T:%f\r\n", (float) (25 + (((rawadc - 943) * 3.3 / 4096.0)) / 0.0025));

        changeLed(0, 0, 100);
 8003604:	2264      	movs	r2, #100	; 0x64
 8003606:	2100      	movs	r1, #0
 8003608:	2000      	movs	r0, #0
 800360a:	f000 fd51 	bl	80040b0 <changeLed>
        nowtime = HAL_GetTick();
 800360e:	f002 f803 	bl	8005618 <HAL_GetTick>
 8003612:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
        dt = (nowtime - lasttime) / 1000.0;
 8003616:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800361a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff8f 	bl	8000544 <__aeabi_ui2d>
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	4b4c      	ldr	r3, [pc, #304]	; (800375c <main+0x344>)
 800362c:	f7fd f92e 	bl	800088c <__aeabi_ddiv>
 8003630:	4603      	mov	r3, r0
 8003632:	460c      	mov	r4, r1
 8003634:	4618      	mov	r0, r3
 8003636:	4621      	mov	r1, r4
 8003638:	f7fd faf6 	bl	8000c28 <__aeabi_d2f>
 800363c:	4603      	mov	r3, r0
 800363e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        lasttime = nowtime;
 8003642:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003646:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

        orientation_setGyro(&ori, imu.gyroRPS);
 800364a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800364e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003652:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f001 fab0 	bl	8004bbe <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 800365e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8003662:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003666:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fabd 	bl	8004bec <orientation_setAcc>
        orientation_update(&ori, dt);
 8003672:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003676:	ed97 0a90 	vldr	s0, [r7, #576]	; 0x240
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fad0 	bl	8004c20 <orientation_update>

        //sprintf(printBuffer, "z:%f,y:%f,x:%f\r\n", ori.eulerZYX[0], ori.eulerZYX[1], ori.eulerZYX[2]);
        if (counter % 30 == 0) {
 8003680:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <main+0x348>)
 8003686:	fba3 2301 	umull	r2, r3, r3, r1
 800368a:	091a      	lsrs	r2, r3, #4
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	1aca      	subs	r2, r1, r3
 8003696:	2a00      	cmp	r2, #0
 8003698:	d139      	bne.n	800370e <main+0x2f6>
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 800369a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800369e:	681b      	ldr	r3, [r3, #0]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fc ff71 	bl	8000588 <__aeabi_f2d>
 80036a6:	4682      	mov	sl, r0
 80036a8:	468b      	mov	fp, r1
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 80036aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036ae:	685b      	ldr	r3, [r3, #4]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc ff69 	bl	8000588 <__aeabi_f2d>
 80036b6:	4604      	mov	r4, r0
 80036b8:	460d      	mov	r5, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 80036ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036be:	689b      	ldr	r3, [r3, #8]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc ff61 	bl	8000588 <__aeabi_f2d>
 80036c6:	4680      	mov	r8, r0
 80036c8:	4689      	mov	r9, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 80036ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036ce:	68db      	ldr	r3, [r3, #12]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fc ff59 	bl	8000588 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 80036de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036e2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80036e6:	e9cd 4500 	strd	r4, r5, [sp]
 80036ea:	4652      	mov	r2, sl
 80036ec:	465b      	mov	r3, fp
 80036ee:	491d      	ldr	r1, [pc, #116]	; (8003764 <main+0x34c>)
 80036f0:	f00f f8e6 	bl	80128c0 <siprintf>
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.horQuat.w,ori.horQuat.v[0],ori.horQuat.v[1],ori.horQuat.v[2]);
            //sprintf(printBuffer, "Counter: %d\r\n",counter);
            //sprintf(printBuffer, "gx: %d, gy: %d, gz: %d\r\n", imu.rawGyro[0], imu.rawGyro[1], imu.rawGyro[2]);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 80036f4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc fd89 	bl	8000210 <strlen>
 80036fe:	4603      	mov	r3, r0
 8003700:	b29a      	uxth	r2, r3
 8003702:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f00d fd21 	bl	8011150 <CDC_Transmit_FS>
        }
        counter++;
 800370e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8003712:	3301      	adds	r3, #1
 8003714:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

        HAL_Delay(1);
 8003718:	2001      	movs	r0, #1
 800371a:	f001 ff89 	bl	8005630 <HAL_Delay>
        LSM_pollsensors(&imu);
 800371e:	e76c      	b.n	80035fa <main+0x1e2>
 8003720:	20004694 	.word	0x20004694
 8003724:	200047d4 	.word	0x200047d4
 8003728:	40020400 	.word	0x40020400
 800372c:	20004638 	.word	0x20004638
 8003730:	200045e4 	.word	0x200045e4
 8003734:	0801741c 	.word	0x0801741c
 8003738:	20004774 	.word	0x20004774
 800373c:	08017434 	.word	0x08017434
 8003740:	20004690 	.word	0x20004690
 8003744:	0801745c 	.word	0x0801745c
 8003748:	20004814 	.word	0x20004814
 800374c:	08017488 	.word	0x08017488
 8003750:	20004778 	.word	0x20004778
 8003754:	080174b0 	.word	0x080174b0
 8003758:	20004818 	.word	0x20004818
 800375c:	408f4000 	.word	0x408f4000
 8003760:	88888889 	.word	0x88888889
 8003764:	080171e8 	.word	0x080171e8

08003768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0ac      	sub	sp, #176	; 0xb0
 800376c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800376e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003772:	2234      	movs	r2, #52	; 0x34
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f00e fa01 	bl	8011b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800377c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	225c      	movs	r2, #92	; 0x5c
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f00e f9f2 	bl	8011b7e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <SystemClock_Config+0x130>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a3d      	ldr	r2, [pc, #244]	; (8003898 <SystemClock_Config+0x130>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <SystemClock_Config+0x130>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	4b38      	ldr	r3, [pc, #224]	; (800389c <SystemClock_Config+0x134>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a37      	ldr	r2, [pc, #220]	; (800389c <SystemClock_Config+0x134>)
 80037c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <SystemClock_Config+0x134>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037de:	2302      	movs	r3, #2
 80037e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037ec:	2304      	movs	r3, #4
 80037ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80037f2:	23b4      	movs	r3, #180	; 0xb4
 80037f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037f8:	2302      	movs	r3, #2
 80037fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80037fe:	2308      	movs	r3, #8
 8003800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003804:	2302      	movs	r3, #2
 8003806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800380a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800380e:	4618      	mov	r0, r3
 8003810:	f005 fd88 	bl	8009324 <HAL_RCC_OscConfig>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800381a:	f001 f8eb 	bl	80049f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800381e:	f004 ff1b 	bl	8008658 <HAL_PWREx_EnableOverDrive>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003828:	f001 f8e4 	bl	80049f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800382c:	230f      	movs	r3, #15
 800382e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003830:	2302      	movs	r3, #2
 8003832:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003834:	2300      	movs	r3, #0
 8003836:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003838:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800383c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800383e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003842:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003844:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003848:	2105      	movs	r1, #5
 800384a:	4618      	mov	r0, r3
 800384c:	f004 ff54 	bl	80086f8 <HAL_RCC_ClockConfig>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003856:	f001 f8cd 	bl	80049f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800385a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800385e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8003860:	2304      	movs	r3, #4
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8003864:	2360      	movs	r3, #96	; 0x60
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003868:	2302      	movs	r3, #2
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800386c:	2304      	movs	r3, #4
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003870:	2301      	movs	r3, #1
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8003874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003878:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	4618      	mov	r0, r3
 8003880:	f005 f886 	bl	8008990 <HAL_RCCEx_PeriphCLKConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <SystemClock_Config+0x126>
  {
    Error_Handler();
 800388a:	f001 f8b3 	bl	80049f4 <Error_Handler>
  }
}
 800388e:	bf00      	nop
 8003890:	37b0      	adds	r7, #176	; 0xb0
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40007000 	.word	0x40007000

080038a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038a6:	463b      	mov	r3, r7
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <MX_ADC1_Init+0x98>)
 80038b4:	4a21      	ldr	r2, [pc, #132]	; (800393c <MX_ADC1_Init+0x9c>)
 80038b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <MX_ADC1_Init+0x98>)
 80038ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <MX_ADC1_Init+0x98>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <MX_ADC1_Init+0x98>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <MX_ADC1_Init+0x98>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <MX_ADC1_Init+0x98>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <MX_ADC1_Init+0x98>)
 80038dc:	2200      	movs	r2, #0
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <MX_ADC1_Init+0x98>)
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <MX_ADC1_Init+0xa0>)
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <MX_ADC1_Init+0x98>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <MX_ADC1_Init+0x98>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <MX_ADC1_Init+0x98>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <MX_ADC1_Init+0x98>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <MX_ADC1_Init+0x98>)
 8003902:	f001 feb7 	bl	8005674 <HAL_ADC_Init>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800390c:	f001 f872 	bl	80049f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003910:	230c      	movs	r3, #12
 8003912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003914:	2301      	movs	r3, #1
 8003916:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800391c:	463b      	mov	r3, r7
 800391e:	4619      	mov	r1, r3
 8003920:	4805      	ldr	r0, [pc, #20]	; (8003938 <MX_ADC1_Init+0x98>)
 8003922:	f002 f843 	bl	80059ac <HAL_ADC_ConfigChannel>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800392c:	f001 f862 	bl	80049f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000472c 	.word	0x2000472c
 800393c:	40012000 	.word	0x40012000
 8003940:	0f000001 	.word	0x0f000001

08003944 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <MX_I2C3_Init+0x50>)
 800394a:	4a13      	ldr	r2, [pc, #76]	; (8003998 <MX_I2C3_Init+0x54>)
 800394c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <MX_I2C3_Init+0x50>)
 8003950:	4a12      	ldr	r2, [pc, #72]	; (800399c <MX_I2C3_Init+0x58>)
 8003952:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <MX_I2C3_Init+0x50>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <MX_I2C3_Init+0x50>)
 800395c:	2200      	movs	r2, #0
 800395e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <MX_I2C3_Init+0x50>)
 8003962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003966:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <MX_I2C3_Init+0x50>)
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <MX_I2C3_Init+0x50>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <MX_I2C3_Init+0x50>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <MX_I2C3_Init+0x50>)
 800397c:	2200      	movs	r2, #0
 800397e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003980:	4804      	ldr	r0, [pc, #16]	; (8003994 <MX_I2C3_Init+0x50>)
 8003982:	f002 fce7 	bl	8006354 <HAL_I2C_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800398c:	f001 f832 	bl	80049f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200045e4 	.word	0x200045e4
 8003998:	40005c00 	.word	0x40005c00
 800399c:	000186a0 	.word	0x000186a0

080039a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039a6:	4a18      	ldr	r2, [pc, #96]	; (8003a08 <MX_SPI1_Init+0x68>)
 80039a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039d4:	2238      	movs	r2, #56	; 0x38
 80039d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039ec:	220a      	movs	r2, #10
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <MX_SPI1_Init+0x64>)
 80039f2:	f005 fef1 	bl	80097d8 <HAL_SPI_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039fc:	f000 fffa 	bl	80049f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	2000477c 	.word	0x2000477c
 8003a08:	40013000 	.word	0x40013000

08003a0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a10:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <MX_SPI2_Init+0x68>)
 8003a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a36:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a40:	2210      	movs	r2, #16
 8003a42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a58:	220a      	movs	r2, #10
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a5c:	4804      	ldr	r0, [pc, #16]	; (8003a70 <MX_SPI2_Init+0x64>)
 8003a5e:	f005 febb 	bl	80097d8 <HAL_SPI_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a68:	f000 ffc4 	bl	80049f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20004638 	.word	0x20004638
 8003a74:	40003800 	.word	0x40003800

08003a78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <MX_SPI3_Init+0x64>)
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <MX_SPI3_Init+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <MX_SPI3_Init+0x64>)
 8003a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <MX_SPI3_Init+0x64>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <MX_SPI3_Init+0x64>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <MX_SPI3_Init+0x64>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <MX_SPI3_Init+0x64>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <MX_SPI3_Init+0x64>)
 8003aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <MX_SPI3_Init+0x64>)
 8003aac:	2210      	movs	r2, #16
 8003aae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <MX_SPI3_Init+0x64>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <MX_SPI3_Init+0x64>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <MX_SPI3_Init+0x64>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <MX_SPI3_Init+0x64>)
 8003ac4:	220a      	movs	r2, #10
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003ac8:	4804      	ldr	r0, [pc, #16]	; (8003adc <MX_SPI3_Init+0x64>)
 8003aca:	f005 fe85 	bl	80097d8 <HAL_SPI_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003ad4:	f000 ff8e 	bl	80049f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200046d4 	.word	0x200046d4
 8003ae0:	40003c00 	.word	0x40003c00

08003ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aea:	f107 0320 	add.w	r3, r7, #32
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	615a      	str	r2, [r3, #20]
 8003b04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b06:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b10:	2259      	movs	r2, #89	; 0x59
 8003b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b22:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b2e:	481e      	ldr	r0, [pc, #120]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b30:	f006 fc03 	bl	800a33a <HAL_TIM_PWM_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003b3a:	f000 ff5b 	bl	80049f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b46:	f107 0320 	add.w	r3, r7, #32
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4816      	ldr	r0, [pc, #88]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b4e:	f007 fa1b 	bl	800af88 <HAL_TIMEx_MasterConfigSynchronization>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003b58:	f000 ff4c 	bl	80049f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b5c:	2360      	movs	r3, #96	; 0x60
 8003b5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	2204      	movs	r2, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b74:	f006 fd52 	bl	800a61c <HAL_TIM_PWM_ConfigChannel>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003b7e:	f000 ff39 	bl	80049f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	220c      	movs	r2, #12
 8003b86:	4619      	mov	r1, r3
 8003b88:	4807      	ldr	r0, [pc, #28]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b8a:	f006 fd47 	bl	800a61c <HAL_TIM_PWM_ConfigChannel>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003b94:	f000 ff2e 	bl	80049f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003b98:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <MX_TIM2_Init+0xc4>)
 8003b9a:	f001 fafd 	bl	8005198 <HAL_TIM_MspPostInit>

}
 8003b9e:	bf00      	nop
 8003ba0:	3728      	adds	r7, #40	; 0x28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200047d4 	.word	0x200047d4

08003bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08e      	sub	sp, #56	; 0x38
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc0:	f107 0320 	add.w	r3, r7, #32
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
 8003bd8:	615a      	str	r2, [r3, #20]
 8003bda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bdc:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003bde:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <MX_TIM3_Init+0x130>)
 8003be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003be4:	2259      	movs	r2, #89	; 0x59
 8003be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be8:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003bf0:	22ff      	movs	r2, #255	; 0xff
 8003bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bfa:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c00:	4835      	ldr	r0, [pc, #212]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003c02:	f006 fb4b 	bl	800a29c <HAL_TIM_Base_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003c0c:	f000 fef2 	bl	80049f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	482e      	ldr	r0, [pc, #184]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003c1e:	f006 fdc3 	bl	800a7a8 <HAL_TIM_ConfigClockSource>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003c28:	f000 fee4 	bl	80049f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c2c:	482a      	ldr	r0, [pc, #168]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003c2e:	f006 fb84 	bl	800a33a <HAL_TIM_PWM_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003c38:	f000 fedc 	bl	80049f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c44:	f107 0320 	add.w	r3, r7, #32
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4823      	ldr	r0, [pc, #140]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003c4c:	f007 f99c 	bl	800af88 <HAL_TIMEx_MasterConfigSynchronization>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003c56:	f000 fecd 	bl	80049f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c5a:	2360      	movs	r3, #96	; 0x60
 8003c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003c62:	2302      	movs	r3, #2
 8003c64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4819      	ldr	r0, [pc, #100]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003c72:	f006 fcd3 	bl	800a61c <HAL_TIM_PWM_ConfigChannel>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003c7c:	f000 feba 	bl	80049f4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2204      	movs	r2, #4
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4813      	ldr	r0, [pc, #76]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003c8c:	f006 fcc6 	bl	800a61c <HAL_TIM_PWM_ConfigChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003c96:	f000 fead 	bl	80049f4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	480c      	ldr	r0, [pc, #48]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003ca6:	f006 fcb9 	bl	800a61c <HAL_TIM_PWM_ConfigChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003cb0:	f000 fea0 	bl	80049f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	220c      	movs	r2, #12
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4807      	ldr	r0, [pc, #28]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003cbc:	f006 fcae 	bl	800a61c <HAL_TIM_PWM_ConfigChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003cc6:	f000 fe95 	bl	80049f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003cca:	4803      	ldr	r0, [pc, #12]	; (8003cd8 <MX_TIM3_Init+0x12c>)
 8003ccc:	f001 fa64 	bl	8005198 <HAL_TIM_MspPostInit>

}
 8003cd0:	bf00      	nop
 8003cd2:	3738      	adds	r7, #56	; 0x38
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20004694 	.word	0x20004694
 8003cdc:	40000400 	.word	0x40000400

08003ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	4b6b      	ldr	r3, [pc, #428]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a6a      	ldr	r2, [pc, #424]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	4b64      	ldr	r3, [pc, #400]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	4a63      	ldr	r2, [pc, #396]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	6313      	str	r3, [r2, #48]	; 0x30
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	4b5d      	ldr	r3, [pc, #372]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a5c      	ldr	r2, [pc, #368]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a55      	ldr	r2, [pc, #340]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4a4e      	ldr	r2, [pc, #312]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	6313      	str	r3, [r2, #48]	; 0x30
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <MX_GPIO_Init+0x1c8>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_POWER_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8003d82:	2200      	movs	r2, #0
 8003d84:	f248 0104 	movw	r1, #32772	; 0x8004
 8003d88:	4848      	ldr	r0, [pc, #288]	; (8003eac <MX_GPIO_Init+0x1cc>)
 8003d8a:	f002 fac9 	bl	8006320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_NSS_Pin|VTX_BTN1_Pin, GPIO_PIN_RESET);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2130      	movs	r1, #48	; 0x30
 8003d92:	4847      	ldr	r0, [pc, #284]	; (8003eb0 <MX_GPIO_Init+0x1d0>)
 8003d94:	f002 fac4 	bl	8006320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d9e:	4845      	ldr	r0, [pc, #276]	; (8003eb4 <MX_GPIO_Init+0x1d4>)
 8003da0:	f002 fabe 	bl	8006320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8003da4:	2201      	movs	r2, #1
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	4842      	ldr	r0, [pc, #264]	; (8003eb4 <MX_GPIO_Init+0x1d4>)
 8003daa:	f002 fab9 	bl	8006320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RBF_Pin */
  GPIO_InitStruct.Pin = RBF_Pin;
 8003dae:	2301      	movs	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RBF_GPIO_Port, &GPIO_InitStruct);
 8003dba:	f107 0314 	add.w	r3, r7, #20
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	483a      	ldr	r0, [pc, #232]	; (8003eac <MX_GPIO_Init+0x1cc>)
 8003dc2:	f002 f903 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_POWER_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = CAM_POWER_Pin|LORA_NSS_Pin;
 8003dc6:	f248 0304 	movw	r3, #32772	; 0x8004
 8003dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4833      	ldr	r0, [pc, #204]	; (8003eac <MX_GPIO_Init+0x1cc>)
 8003de0:	f002 f8f4 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003de4:	2310      	movs	r3, #16
 8003de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003de8:	2301      	movs	r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df0:	2300      	movs	r3, #0
 8003df2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	4619      	mov	r1, r3
 8003dfa:	482d      	ldr	r0, [pc, #180]	; (8003eb0 <MX_GPIO_Init+0x1d0>)
 8003dfc:	f002 f8e6 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : VTX_BTN1_Pin */
  GPIO_InitStruct.Pin = VTX_BTN1_Pin;
 8003e00:	2320      	movs	r3, #32
 8003e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VTX_BTN1_GPIO_Port, &GPIO_InitStruct);
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	4619      	mov	r1, r3
 8003e16:	4826      	ldr	r0, [pc, #152]	; (8003eb0 <MX_GPIO_Init+0x1d0>)
 8003e18:	f002 f8d8 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 8003e1c:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	4619      	mov	r1, r3
 8003e34:	481f      	ldr	r0, [pc, #124]	; (8003eb4 <MX_GPIO_Init+0x1d4>)
 8003e36:	f002 f8c9 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 8003e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4818      	ldr	r0, [pc, #96]	; (8003eb0 <MX_GPIO_Init+0x1d0>)
 8003e50:	f002 f8bc 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8003e54:	2304      	movs	r3, #4
 8003e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4619      	mov	r1, r3
 8003e66:	4814      	ldr	r0, [pc, #80]	; (8003eb8 <MX_GPIO_Init+0x1d8>)
 8003e68:	f002 f8b0 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	480d      	ldr	r0, [pc, #52]	; (8003eb4 <MX_GPIO_Init+0x1d4>)
 8003e80:	f002 f8a4 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : BREAKWIRE_Pin ARM_Pin */
  GPIO_InitStruct.Pin = BREAKWIRE_Pin|ARM_Pin;
 8003e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e92:	f107 0314 	add.w	r3, r7, #20
 8003e96:	4619      	mov	r1, r3
 8003e98:	4806      	ldr	r0, [pc, #24]	; (8003eb4 <MX_GPIO_Init+0x1d4>)
 8003e9a:	f002 f897 	bl	8005fcc <HAL_GPIO_Init>

}
 8003e9e:	bf00      	nop
 8003ea0:	3728      	adds	r7, #40	; 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	40020800 	.word	0x40020800
 8003eb4:	40020400 	.word	0x40020400
 8003eb8:	40020c00 	.word	0x40020c00
 8003ebc:	00000000 	.word	0x00000000

08003ec0 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	80bb      	strh	r3, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <playtone+0xf0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8003eda:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <playtone+0xf0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <playtone+0xf0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fb39 	bl	8000564 <__aeabi_i2d>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4623      	mov	r3, r4
 8003efa:	a12b      	add	r1, pc, #172	; (adr r1, 8003fa8 <playtone+0xe8>)
 8003efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f00:	f7fc fcc4 	bl	800088c <__aeabi_ddiv>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	f7fc fe6c 	bl	8000be8 <__aeabi_d2uiz>
 8003f10:	4603      	mov	r3, r0
 8003f12:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8003f14:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <playtone+0xf0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <playtone+0xf0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	fb02 f203 	mul.w	r2, r2, r3
 8003f2c:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <playtone+0xf0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4920      	ldr	r1, [pc, #128]	; (8003fb4 <playtone+0xf4>)
 8003f32:	fba1 1202 	umull	r1, r2, r1, r2
 8003f36:	0992      	lsrs	r2, r2, #6
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8003f3a:	8afb      	ldrh	r3, [r7, #22]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	fb02 f203 	mul.w	r2, r2, r3
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <playtone+0xf0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	0a12      	lsrs	r2, r2, #8
 8003f48:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8003f4a:	8abb      	ldrh	r3, [r7, #20]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	fb02 f203 	mul.w	r2, r2, r3
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <playtone+0xf0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0a12      	lsrs	r2, r2, #8
 8003f58:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8003f5a:	8a7b      	ldrh	r3, [r7, #18]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	fb02 f203 	mul.w	r2, r2, r3
 8003f62:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <playtone+0xf0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	0a12      	lsrs	r2, r2, #8
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 8003f6a:	88bb      	ldrh	r3, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fb5f 	bl	8005630 <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <playtone+0xf0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <playtone+0xf0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <playtone+0xf0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	8afa      	ldrh	r2, [r7, #22]
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <playtone+0xf0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	8aba      	ldrh	r2, [r7, #20]
 8003f90:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <playtone+0xf0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	8a7a      	ldrh	r2, [r7, #18]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	f3af 8000 	nop.w
 8003fa8:	00000000 	.word	0x00000000
 8003fac:	412e8480 	.word	0x412e8480
 8003fb0:	20004694 	.word	0x20004694
 8003fb4:	51eb851f 	.word	0x51eb851f

08003fb8 <playtoneRTOS>:

void playtoneRTOS(uint16_t freq, uint16_t ms, uint8_t vol) {
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	80fb      	strh	r3, [r7, #6]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	80bb      	strh	r3, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <playtoneRTOS+0xf0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8003fd2:	4b35      	ldr	r3, [pc, #212]	; (80040a8 <playtoneRTOS+0xf0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8003fda:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <playtoneRTOS+0xf0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fabd 	bl	8000564 <__aeabi_i2d>
 8003fea:	4603      	mov	r3, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	a12b      	add	r1, pc, #172	; (adr r1, 80040a0 <playtoneRTOS+0xe8>)
 8003ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ff8:	f7fc fc48 	bl	800088c <__aeabi_ddiv>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	4618      	mov	r0, r3
 8004002:	4621      	mov	r1, r4
 8004004:	f7fc fdf0 	bl	8000be8 <__aeabi_d2uiz>
 8004008:	4603      	mov	r3, r0
 800400a:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 800400c:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <playtoneRTOS+0xf0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2200      	movs	r2, #0
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8004014:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <playtoneRTOS+0xf0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	fb02 f203 	mul.w	r2, r2, r3
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <playtoneRTOS+0xf0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4920      	ldr	r1, [pc, #128]	; (80040ac <playtoneRTOS+0xf4>)
 800402a:	fba1 1202 	umull	r1, r2, r1, r2
 800402e:	0992      	lsrs	r2, r2, #6
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8004032:	8afb      	ldrh	r3, [r7, #22]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	fb02 f203 	mul.w	r2, r2, r3
 800403a:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <playtoneRTOS+0xf0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0a12      	lsrs	r2, r2, #8
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8004042:	8abb      	ldrh	r3, [r7, #20]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	fb02 f203 	mul.w	r2, r2, r3
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <playtoneRTOS+0xf0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	0a12      	lsrs	r2, r2, #8
 8004050:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8004052:	8a7b      	ldrh	r3, [r7, #18]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	fb02 f203 	mul.w	r2, r2, r3
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <playtoneRTOS+0xf0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	0a12      	lsrs	r2, r2, #8
 8004060:	641a      	str	r2, [r3, #64]	; 0x40

    osDelay(ms);
 8004062:	88bb      	ldrh	r3, [r7, #4]
 8004064:	4618      	mov	r0, r3
 8004066:	f00a fda1 	bl	800ebac <osDelay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <playtoneRTOS+0xf0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <playtoneRTOS+0xf0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <playtoneRTOS+0xf0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	8afa      	ldrh	r2, [r7, #22]
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <playtoneRTOS+0xf0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	8aba      	ldrh	r2, [r7, #20]
 8004088:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <playtoneRTOS+0xf0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	8a7a      	ldrh	r2, [r7, #18]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	bd90      	pop	{r4, r7, pc}
 800409a:	bf00      	nop
 800409c:	f3af 8000 	nop.w
 80040a0:	00000000 	.word	0x00000000
 80040a4:	412e8480 	.word	0x412e8480
 80040a8:	20004694 	.word	0x20004694
 80040ac:	51eb851f 	.word	0x51eb851f

080040b0 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
 80040ba:	460b      	mov	r3, r1
 80040bc:	71bb      	strb	r3, [r7, #6]
 80040be:	4613      	mov	r3, r2
 80040c0:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <changeLed+0x38>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	79fa      	ldrb	r2, [r7, #7]
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <changeLed+0x38>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	79ba      	ldrb	r2, [r7, #6]
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <changeLed+0x38>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	797a      	ldrb	r2, [r7, #5]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40

}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20004694 	.word	0x20004694

080040ec <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80040f4:	f00c ff5a 	bl	8010fac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        //changeLed(0, 100, 0);
        osDelay(1000);
 80040f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040fc:	f00a fd56 	bl	800ebac <osDelay>
        //changeLed(0, 0, 100);
        osDelay(1000);
 8004100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004104:	f00a fd52 	bl	800ebac <osDelay>
        osDelay(1000);
 8004108:	e7f6      	b.n	80040f8 <StartLedTask+0xc>
	...

0800410c <StartMusicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08e      	sub	sp, #56	; 0x38
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
    /* Infinite loop */

    uint16_t vol = 13; // 10
 8004114:	230d      	movs	r3, #13
 8004116:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t beatlength = 50; // determines tempo
 8004118:	2332      	movs	r3, #50	; 0x32
 800411a:	847b      	strh	r3, [r7, #34]	; 0x22
    float beatseparationconstant = 0.3;
 800411c:	4b79      	ldr	r3, [pc, #484]	; (8004304 <StartMusicTask+0x1f8>)
 800411e:	61fb      	str	r3, [r7, #28]

    int a = 4; // part index
 8004120:	2304      	movs	r3, #4
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
    int b = 0; // song index
 8004124:	2300      	movs	r3, #0
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
    int c; // lyric index

    osEvent messagebox;
    uint16_t sounddelay;

    int ksp_playhead = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
    int ksp_total = 20;
 800412c:	2314      	movs	r3, #20
 800412e:	61bb      	str	r3, [r7, #24]

    for (;;) {
        if (is_soft_enabled()) {
 8004130:	f7fe fe88 	bl	8002e44 <is_soft_enabled>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01c      	beq.n	8004174 <StartMusicTask+0x68>
            messagebox = osMessageGet(BuzzerQueueHandle, 1000);
 800413a:	4b73      	ldr	r3, [pc, #460]	; (8004308 <StartMusicTask+0x1fc>)
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004146:	4618      	mov	r0, r3
 8004148:	f00a fdae 	bl	800eca8 <osMessageGet>
            if (messagebox.status && messagebox.value.v) {
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ee      	beq.n	8004130 <StartMusicTask+0x24>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0eb      	beq.n	8004130 <StartMusicTask+0x24>
                sounddelay = messagebox.value.v;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	82fb      	strh	r3, [r7, #22]
                playtoneRTOS(OPTIMAL_BUZZER_FREQ, sounddelay,
 800415c:	8afb      	ldrh	r3, [r7, #22]
 800415e:	2246      	movs	r2, #70	; 0x46
 8004160:	4619      	mov	r1, r3
 8004162:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004166:	f7ff ff27 	bl	8003fb8 <playtoneRTOS>
                        OPTIMAL_BUZZER_DUTY);
                osDelay(sounddelay);
 800416a:	8afb      	ldrh	r3, [r7, #22]
 800416c:	4618      	mov	r0, r3
 800416e:	f00a fd1d 	bl	800ebac <osDelay>
 8004172:	e7dd      	b.n	8004130 <StartMusicTask+0x24>
            }


        }
        else if (buzzer_setting == RICK){
 8004174:	4b65      	ldr	r3, [pc, #404]	; (800430c <StartMusicTask+0x200>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	f040 80a5 	bne.w	80042c8 <StartMusicTask+0x1bc>
            uint16_t notelength;
            if (a == 1 || a == 2) {
 800417e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004180:	2b01      	cmp	r3, #1
 8004182:	d002      	beq.n	800418a <StartMusicTask+0x7e>
 8004184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004186:	2b02      	cmp	r3, #2
 8004188:	d125      	bne.n	80041d6 <StartMusicTask+0xca>
                // intro
                notelength = beatlength * song1_intro_rhythmn[b];
 800418a:	4a61      	ldr	r2, [pc, #388]	; (8004310 <StartMusicTask+0x204>)
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004192:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004194:	fb12 f303 	smulbb	r3, r2, r3
 8004198:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_intro_melody[b] > 0) {
 800419a:	4a5e      	ldr	r2, [pc, #376]	; (8004314 <StartMusicTask+0x208>)
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <StartMusicTask+0xae>
                    playtoneRTOS(song1_intro_melody[b], notelength, vol);
 80041a6:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <StartMusicTask+0x208>)
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff feff 	bl	8003fb8 <playtoneRTOS>
                }
                b++;
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	3301      	adds	r3, #1
 80041be:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d966      	bls.n	8004294 <StartMusicTask+0x188>
                    a++;
 80041c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c8:	3301      	adds	r3, #1
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 80041d4:	e05e      	b.n	8004294 <StartMusicTask+0x188>
                }
            } else if (a == 3 || a == 5) {
 80041d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d002      	beq.n	80041e2 <StartMusicTask+0xd6>
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d12a      	bne.n	8004238 <StartMusicTask+0x12c>
                // verse
                notelength = beatlength * 2 * song1_verse1_rhythmn[b];
 80041e2:	4a4d      	ldr	r2, [pc, #308]	; (8004318 <StartMusicTask+0x20c>)
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80041ec:	fb12 f303 	smulbb	r3, r2, r3
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_verse1_melody[b] > 0) {
 80041f6:	4a49      	ldr	r2, [pc, #292]	; (800431c <StartMusicTask+0x210>)
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00c      	beq.n	800421c <StartMusicTask+0x110>
                    playtoneRTOS(song1_verse1_melody[b], notelength, vol);
 8004202:	4a46      	ldr	r2, [pc, #280]	; (800431c <StartMusicTask+0x210>)
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800420a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fed1 	bl	8003fb8 <playtoneRTOS>
                    c++;
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	3301      	adds	r3, #1
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	3301      	adds	r3, #1
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	2b3e      	cmp	r3, #62	; 0x3e
 8004226:	d935      	bls.n	8004294 <StartMusicTask+0x188>
                    a++;
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	3301      	adds	r3, #1
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 8004236:	e02d      	b.n	8004294 <StartMusicTask+0x188>
                }
            } else if (a == 4 || a == 6) {
 8004238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423a:	2b04      	cmp	r3, #4
 800423c:	d002      	beq.n	8004244 <StartMusicTask+0x138>
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	2b06      	cmp	r3, #6
 8004242:	d127      	bne.n	8004294 <StartMusicTask+0x188>
                // chorus
                notelength = beatlength * song1_chorus_rhythmn[b];
 8004244:	4a36      	ldr	r2, [pc, #216]	; (8004320 <StartMusicTask+0x214>)
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800424e:	fb12 f303 	smulbb	r3, r2, r3
 8004252:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_chorus_melody[b] > 0) {
 8004254:	4a33      	ldr	r2, [pc, #204]	; (8004324 <StartMusicTask+0x218>)
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <StartMusicTask+0x16e>
                    playtoneRTOS(song1_chorus_melody[b], notelength, vol);
 8004260:	4a30      	ldr	r2, [pc, #192]	; (8004324 <StartMusicTask+0x218>)
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004268:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fea2 	bl	8003fb8 <playtoneRTOS>
                    c++;
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	3301      	adds	r3, #1
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	3301      	adds	r3, #1
 800427e:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_chorus_melody) / sizeof(uint16_t)) {
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	2b3a      	cmp	r3, #58	; 0x3a
 8004284:	d906      	bls.n	8004294 <StartMusicTask+0x188>
                    a++;
 8004286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004288:	3301      	adds	r3, #1
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            osDelay(notelength);
 8004294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004296:	4618      	mov	r0, r3
 8004298:	f00a fc88 	bl	800ebac <osDelay>
            //noTone(piezo);

            osDelay(notelength * beatseparationconstant);
 800429c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80042aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b2:	ee17 0a90 	vmov	r0, s15
 80042b6:	f00a fc79 	bl	800ebac <osDelay>
            if (a == 7) { // loop back around to beginning of song
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	2b07      	cmp	r3, #7
 80042be:	f47f af37 	bne.w	8004130 <StartMusicTask+0x24>
                a = 1;
 80042c2:	2301      	movs	r3, #1
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
 80042c6:	e733      	b.n	8004130 <StartMusicTask+0x24>
            }
        }
        else if (buzzer_setting == KSP_MAIN) {
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <StartMusicTask+0x200>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	f47f af2f 	bne.w	8004130 <StartMusicTask+0x24>
            playtoneRTOS(ksp_tunes[ksp_playhead], ksp_delays[ksp_playhead], vol);
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <StartMusicTask+0x21c>)
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80042da:	4a14      	ldr	r2, [pc, #80]	; (800432c <StartMusicTask+0x220>)
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	f7ff fe66 	bl	8003fb8 <playtoneRTOS>
            ksp_playhead = (ksp_playhead + 1) % ksp_total;
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	3301      	adds	r3, #1
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	fb93 f2f2 	sdiv	r2, r3, r2
 80042f6:	69b9      	ldr	r1, [r7, #24]
 80042f8:	fb01 f202 	mul.w	r2, r1, r2
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
        if (is_soft_enabled()) {
 8004300:	e716      	b.n	8004130 <StartMusicTask+0x24>
 8004302:	bf00      	nop
 8004304:	3e99999a 	.word	0x3e99999a
 8004308:	20004774 	.word	0x20004774
 800430c:	20000001 	.word	0x20000001
 8004310:	20000020 	.word	0x20000020
 8004314:	20000004 	.word	0x20000004
 8004318:	200000bc 	.word	0x200000bc
 800431c:	2000003c 	.word	0x2000003c
 8004320:	200001b4 	.word	0x200001b4
 8004324:	2000013c 	.word	0x2000013c
 8004328:	2000022c 	.word	0x2000022c
 800432c:	20000254 	.word	0x20000254

08004330 <startStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStateMachine */
void startStateMachine(void const * argument)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStateMachine */

    uint32_t launchTime = osKernelSysTick();
 8004338:	f00a fbdc 	bl	800eaf4 <osKernelSysTick>
 800433c:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t currentTime = osKernelSysTick();
 800433e:	f00a fbd9 	bl	800eaf4 <osKernelSysTick>
 8004342:	6238      	str	r0, [r7, #32]
    uint32_t timeSinceLaunch = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
    Servo deployServo;
    servo_init(&deployServo, &htim2, &htim2.Instance->CCR4);
 8004348:	4bb3      	ldr	r3, [pc, #716]	; (8004618 <startStateMachine+0x2e8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004350:	f107 0308 	add.w	r3, r7, #8
 8004354:	49b0      	ldr	r1, [pc, #704]	; (8004618 <startStateMachine+0x2e8>)
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd fb0c 	bl	8001974 <servo_init>
    servo_disable(&deployServo);
 800435c:	f107 0308 	add.w	r3, r7, #8
 8004360:	4618      	mov	r0, r3
 8004362:	f7fd fb3b 	bl	80019dc <servo_disable>

    /* Infinite loop */
    for (;;) {

        currentTime = osKernelSysTick();
 8004366:	f00a fbc5 	bl	800eaf4 <osKernelSysTick>
 800436a:	6238      	str	r0, [r7, #32]
        timeSinceLaunch = currentTime - launchTime;
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	61fb      	str	r3, [r7, #28]

        if (is_soft_enabled()) {
 8004374:	f7fe fd66 	bl	8002e44 <is_soft_enabled>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8124 	beq.w	80045c8 <startStateMachine+0x298>
            switch (flight_state) {
 8004380:	4ba6      	ldr	r3, [pc, #664]	; (800461c <startStateMachine+0x2ec>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b07      	cmp	r3, #7
 8004386:	f200 813d 	bhi.w	8004604 <startStateMachine+0x2d4>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <startStateMachine+0x60>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043b1 	.word	0x080043b1
 8004394:	080043fd 	.word	0x080043fd
 8004398:	0800446f 	.word	0x0800446f
 800439c:	080044b1 	.word	0x080044b1
 80043a0:	080044ff 	.word	0x080044ff
 80043a4:	0800453d 	.word	0x0800453d
 80043a8:	080045a1 	.word	0x080045a1
 80043ac:	080045c1 	.word	0x080045c1
            case FLIGHT_ERROR:
                // be annoying TODO
                buzzer_beep(BEEP_LONG);
 80043b0:	2032      	movs	r0, #50	; 0x32
 80043b2:	f7fe fd81 	bl	8002eb8 <buzzer_beep>

                // exit the state once we're no longer armed,
                // if battery voltage is in good state
                // and if there's a squib connected if one is necessary
                changeLed(0, 0, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7ff fe78 	bl	80040b0 <changeLed>
                if (!is_armed() && get_battery_voltage() > BATTERY_EMPTY_LIMIT) {
 80043c0:	f7fe fd18 	bl	8002df4 <is_armed>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8111 	bne.w	80045ee <startStateMachine+0x2be>
 80043cc:	f7fe fce0 	bl	8002d90 <get_battery_voltage>
 80043d0:	eeb0 7a40 	vmov.f32	s14, s0
 80043d4:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80043d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	dc00      	bgt.n	80043e4 <startStateMachine+0xb4>
                    buzzer_beep(BEEP_SHORT);
                    buzzer_beep(BEEP_SHORT);
                    //set_status_led(ON);
                    flight_state = IDLE;
                }
                break;
 80043e2:	e104      	b.n	80045ee <startStateMachine+0x2be>
                    buzzer_clear_queue();
 80043e4:	f7fe fd94 	bl	8002f10 <buzzer_clear_queue>
                    buzzer_beep(BEEP_SHORT);
 80043e8:	200c      	movs	r0, #12
 80043ea:	f7fe fd65 	bl	8002eb8 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80043ee:	200c      	movs	r0, #12
 80043f0:	f7fe fd62 	bl	8002eb8 <buzzer_beep>
                    flight_state = IDLE;
 80043f4:	4b89      	ldr	r3, [pc, #548]	; (800461c <startStateMachine+0x2ec>)
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]
                break;
 80043fa:	e0f8      	b.n	80045ee <startStateMachine+0x2be>

            case SYSTEMS_CHECK:
                // this state is the entry state, it performs startup checking of some peripherals
                changeLed(100, 0, 0);
 80043fc:	2200      	movs	r2, #0
 80043fe:	2100      	movs	r1, #0
 8004400:	2064      	movs	r0, #100	; 0x64
 8004402:	f7ff fe55 	bl	80040b0 <changeLed>
                // close the servo if necessary
                servo_writeangle(&deployServo, SERVO_CLOSED_POSITION);
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd fac3 	bl	8001998 <servo_writeangle>

                float vbat = get_battery_voltage();
 8004412:	f7fe fcbd 	bl	8002d90 <get_battery_voltage>
 8004416:	ed87 0a06 	vstr	s0, [r7, #24]

                // enable power to camera/video transmitter
                if (vbat > 7.4) {
 800441a:	69b8      	ldr	r0, [r7, #24]
 800441c:	f7fc f8b4 	bl	8000588 <__aeabi_f2d>
 8004420:	a37b      	add	r3, pc, #492	; (adr r3, 8004610 <startStateMachine+0x2e0>)
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f7fc fb97 	bl	8000b58 <__aeabi_dcmpgt>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <startStateMachine+0x106>
                    restart_camera_with_recording();
 8004430:	f7fe fdc8 	bl	8002fc4 <restart_camera_with_recording>
 8004434:	e001      	b.n	800443a <startStateMachine+0x10a>
                } else {
                    disable_camera();
 8004436:	f7fe fdab 	bl	8002f90 <disable_camera>
                }

                // check if the battery is empty
                if (vbat <= BATTERY_EMPTY_LIMIT) {
 800443a:	edd7 7a06 	vldr	s15, [r7, #24]
 800443e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	d803      	bhi.n	8004454 <startStateMachine+0x124>
                    flight_state = FLIGHT_ERROR;
 800444c:	4b73      	ldr	r3, [pc, #460]	; (800461c <startStateMachine+0x2ec>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
                    break;
 8004452:	e0d7      	b.n	8004604 <startStateMachine+0x2d4>
                }

                // if everything's okay, go into idle
                buzzer_beep(BEEP_SHORT);
 8004454:	200c      	movs	r0, #12
 8004456:	f7fe fd2f 	bl	8002eb8 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 800445a:	200c      	movs	r0, #12
 800445c:	f7fe fd2c 	bl	8002eb8 <buzzer_beep>
                set_status_led(1);
 8004460:	2001      	movs	r0, #1
 8004462:	f7fe fdc1 	bl	8002fe8 <set_status_led>
                flight_state = IDLE;
 8004466:	4b6d      	ldr	r3, [pc, #436]	; (800461c <startStateMachine+0x2ec>)
 8004468:	2202      	movs	r2, #2
 800446a:	701a      	strb	r2, [r3, #0]
                break;
 800446c:	e0ca      	b.n	8004604 <startStateMachine+0x2d4>

            case IDLE:
                changeLed(0, 100, 0);
 800446e:	2200      	movs	r2, #0
 8004470:	2164      	movs	r1, #100	; 0x64
 8004472:	2000      	movs	r0, #0
 8004474:	f7ff fe1c 	bl	80040b0 <changeLed>
                if (is_armed()) {
 8004478:	f7fe fcbc 	bl	8002df4 <is_armed>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <startStateMachine+0x15a>
                    flight_state = FLIGHT_ERROR;
 8004482:	4b66      	ldr	r3, [pc, #408]	; (800461c <startStateMachine+0x2ec>)
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
                    break;
 8004488:	e0bc      	b.n	8004604 <startStateMachine+0x2d4>
                }

                if (is_breakwire_connected()) {
 800448a:	f7fe fce7 	bl	8002e5c <is_breakwire_connected>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80ae 	beq.w	80045f2 <startStateMachine+0x2c2>
                    buzzer_beep(BEEP_SHORT);
 8004496:	200c      	movs	r0, #12
 8004498:	f7fe fd0e 	bl	8002eb8 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 800449c:	200c      	movs	r0, #12
 800449e:	f7fe fd0b 	bl	8002eb8 <buzzer_beep>
                    set_status_led(0);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7fe fda0 	bl	8002fe8 <set_status_led>
                    flight_state = PREPARATION;
 80044a8:	4b5c      	ldr	r3, [pc, #368]	; (800461c <startStateMachine+0x2ec>)
 80044aa:	2203      	movs	r2, #3
 80044ac:	701a      	strb	r2, [r3, #0]
                    break;
 80044ae:	e0a9      	b.n	8004604 <startStateMachine+0x2d4>
                }
                break;

            case PREPARATION:
                changeLed(0, 0, 100);
 80044b0:	2264      	movs	r2, #100	; 0x64
 80044b2:	2100      	movs	r1, #0
 80044b4:	2000      	movs	r0, #0
 80044b6:	f7ff fdfb 	bl	80040b0 <changeLed>
                if (is_breakwire_broken_debounce()) {
 80044ba:	f7fe fce1 	bl	8002e80 <is_breakwire_broken_debounce>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <startStateMachine+0x1a8>
                    buzzer_beep(BEEP_LONG);
 80044c4:	2032      	movs	r0, #50	; 0x32
 80044c6:	f7fe fcf7 	bl	8002eb8 <buzzer_beep>
                    set_status_led(1);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fe fd8c 	bl	8002fe8 <set_status_led>
                    flight_state = IDLE;
 80044d0:	4b52      	ldr	r3, [pc, #328]	; (800461c <startStateMachine+0x2ec>)
 80044d2:	2202      	movs	r2, #2
 80044d4:	701a      	strb	r2, [r3, #0]
                    break;
 80044d6:	e095      	b.n	8004604 <startStateMachine+0x2d4>
                }

                // check arming switch with debouncing
                if (is_armed_debounce()) {
 80044d8:	f7fe fc98 	bl	8002e0c <is_armed_debounce>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8089 	beq.w	80045f6 <startStateMachine+0x2c6>
                    buzzer_beep(BEEP_SHORT);
 80044e4:	200c      	movs	r0, #12
 80044e6:	f7fe fce7 	bl	8002eb8 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80044ea:	200c      	movs	r0, #12
 80044ec:	f7fe fce4 	bl	8002eb8 <buzzer_beep>
                    set_status_led(1);
 80044f0:	2001      	movs	r0, #1
 80044f2:	f7fe fd79 	bl	8002fe8 <set_status_led>
                    flight_state = ARMED;
 80044f6:	4b49      	ldr	r3, [pc, #292]	; (800461c <startStateMachine+0x2ec>)
 80044f8:	2204      	movs	r2, #4
 80044fa:	701a      	strb	r2, [r3, #0]
                }
                break;
 80044fc:	e07b      	b.n	80045f6 <startStateMachine+0x2c6>

            case ARMED:
                changeLed(100, 100, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2164      	movs	r1, #100	; 0x64
 8004502:	2064      	movs	r0, #100	; 0x64
 8004504:	f7ff fdd4 	bl	80040b0 <changeLed>
                if (!is_armed()) {
 8004508:	f7fe fc74 	bl	8002df4 <is_armed>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <startStateMachine+0x1f6>
                    buzzer_beep(BEEP_LONG);
 8004512:	2032      	movs	r0, #50	; 0x32
 8004514:	f7fe fcd0 	bl	8002eb8 <buzzer_beep>
                    set_status_led(0);
 8004518:	2000      	movs	r0, #0
 800451a:	f7fe fd65 	bl	8002fe8 <set_status_led>
                    flight_state = PREPARATION;
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <startStateMachine+0x2ec>)
 8004520:	2203      	movs	r2, #3
 8004522:	701a      	strb	r2, [r3, #0]
                    break;
 8004524:	e06e      	b.n	8004604 <startStateMachine+0x2d4>
                }

                if (is_breakwire_broken_debounce()) {
 8004526:	f7fe fcab 	bl	8002e80 <is_breakwire_broken_debounce>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d064      	beq.n	80045fa <startStateMachine+0x2ca>
                    //reset_timer();

                    launchTime = currentTime;
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	627b      	str	r3, [r7, #36]	; 0x24

                    //set_launch_asserted(ON);
                    flight_state = LAUNCHED;
 8004534:	4b39      	ldr	r3, [pc, #228]	; (800461c <startStateMachine+0x2ec>)
 8004536:	2205      	movs	r2, #5
 8004538:	701a      	strb	r2, [r3, #0]
                    break;
 800453a:	e063      	b.n	8004604 <startStateMachine+0x2d4>
                }
                break;

            case LAUNCHED:
                changeLed(100, 100, 100);
 800453c:	2264      	movs	r2, #100	; 0x64
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	2064      	movs	r0, #100	; 0x64
 8004542:	f7ff fdb5 	bl	80040b0 <changeLed>
                buzzer_beep(BEEP_SHORT);
 8004546:	200c      	movs	r0, #12
 8004548:	f7fe fcb6 	bl	8002eb8 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 800454c:	200c      	movs	r0, #12
 800454e:	f7fe fcb3 	bl	8002eb8 <buzzer_beep>

                if (timeSinceLaunch >= MAX_DEPLOY_TIME
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f243 62af 	movw	r2, #13999	; 0x36af
 8004558:	4293      	cmp	r3, r2
 800455a:	d809      	bhi.n	8004570 <startStateMachine+0x240>
                        || (timeSinceLaunch >= MIN_DEPLOY_TIME
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004562:	4293      	cmp	r3, r2
 8004564:	d94b      	bls.n	80045fe <startStateMachine+0x2ce>
                                && is_vote_asserted())) {
 8004566:	f7fe fd4a 	bl	8002ffe <is_vote_asserted>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d046      	beq.n	80045fe <startStateMachine+0x2ce>

                    if (is_armed()) {
 8004570:	f7fe fc40 	bl	8002df4 <is_armed>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <startStateMachine+0x268>
                        servo_writeangle(&deployServo, SERVO_DEPLOY_POSITION);
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	21b4      	movs	r1, #180	; 0xb4
 8004580:	4618      	mov	r0, r3
 8004582:	f7fd fa09 	bl	8001998 <servo_writeangle>

                        last_logged_deploy_time = timeSinceLaunch;
 8004586:	4a26      	ldr	r2, [pc, #152]	; (8004620 <startStateMachine+0x2f0>)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	6013      	str	r3, [r2, #0]
                        buzzer_clear_queue();
 800458c:	f7fe fcc0 	bl	8002f10 <buzzer_clear_queue>
                        flight_state = DEPLOYED;
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <startStateMachine+0x2ec>)
 8004592:	2206      	movs	r2, #6
 8004594:	701a      	strb	r2, [r3, #0]
                        break;
 8004596:	e035      	b.n	8004604 <startStateMachine+0x2d4>
                    } else { // go back to systems check if rearmed
                        flight_state = SYSTEMS_CHECK;
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <startStateMachine+0x2ec>)
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
                        break;
 800459e:	e031      	b.n	8004604 <startStateMachine+0x2d4>
                    }
                }
                break;

            case DEPLOYED:
                changeLed(100, 0, 100);
 80045a0:	2264      	movs	r2, #100	; 0x64
 80045a2:	2100      	movs	r1, #0
 80045a4:	2064      	movs	r0, #100	; 0x64
 80045a6:	f7ff fd83 	bl	80040b0 <changeLed>
                buzzer_beep(BEEP_LONG);
 80045aa:	2032      	movs	r0, #50	; 0x32
 80045ac:	f7fe fc84 	bl	8002eb8 <buzzer_beep>

                if (timeSinceLaunch > 240000) {
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <startStateMachine+0x2f4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d924      	bls.n	8004602 <startStateMachine+0x2d2>
                    flight_state = LANDED;
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <startStateMachine+0x2ec>)
 80045ba:	2207      	movs	r2, #7
 80045bc:	701a      	strb	r2, [r3, #0]
                }

                break;
 80045be:	e020      	b.n	8004602 <startStateMachine+0x2d2>

            case LANDED:
                disable_camera();
 80045c0:	f7fe fce6 	bl	8002f90 <disable_camera>
                break;
 80045c4:	bf00      	nop
 80045c6:	e01d      	b.n	8004604 <startStateMachine+0x2d4>
            }
        } else {
            // when "soft on/off switch" is off. Play some music and disable everything
            changeLed(100, 0, 0);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2100      	movs	r1, #0
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	f7ff fd6f 	bl	80040b0 <changeLed>
            buzzer_setting = KSP_MAIN;
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <startStateMachine+0x2f8>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
            flight_state = SYSTEMS_CHECK;
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <startStateMachine+0x2ec>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
            servo_disable(&deployServo);
 80045de:	f107 0308 	add.w	r3, r7, #8
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd f9fa 	bl	80019dc <servo_disable>
            disable_camera();
 80045e8:	f7fe fcd2 	bl	8002f90 <disable_camera>
 80045ec:	e00a      	b.n	8004604 <startStateMachine+0x2d4>
                break;
 80045ee:	bf00      	nop
 80045f0:	e008      	b.n	8004604 <startStateMachine+0x2d4>
                break;
 80045f2:	bf00      	nop
 80045f4:	e006      	b.n	8004604 <startStateMachine+0x2d4>
                break;
 80045f6:	bf00      	nop
 80045f8:	e004      	b.n	8004604 <startStateMachine+0x2d4>
                break;
 80045fa:	bf00      	nop
 80045fc:	e002      	b.n	8004604 <startStateMachine+0x2d4>
                break;
 80045fe:	bf00      	nop
 8004600:	e000      	b.n	8004604 <startStateMachine+0x2d4>
                break;
 8004602:	bf00      	nop
        }
        osDelay(1);
 8004604:	2001      	movs	r0, #1
 8004606:	f00a fad1 	bl	800ebac <osDelay>
        currentTime = osKernelSysTick();
 800460a:	e6ac      	b.n	8004366 <startStateMachine+0x36>
 800460c:	f3af 8000 	nop.w
 8004610:	9999999a 	.word	0x9999999a
 8004614:	401d9999 	.word	0x401d9999
 8004618:	200047d4 	.word	0x200047d4
 800461c:	20000000 	.word	0x20000000
 8004620:	20000874 	.word	0x20000874
 8004624:	0003a980 	.word	0x0003a980
 8004628:	20000001 	.word	0x20000001
 800462c:	00000000 	.word	0x00000000

08004630 <StartTelemTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemTask */
void StartTelemTask(void const * argument)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b0ff      	sub	sp, #508	; 0x1fc
 8004634:	af02      	add	r7, sp, #8
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemTask */
    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 800463a:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 800463e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004642:	4ad1      	ldr	r2, [pc, #836]	; (8004988 <StartTelemTask+0x358>)
 8004644:	49d1      	ldr	r1, [pc, #836]	; (800498c <StartTelemTask+0x35c>)
 8004646:	f7fd fa2d 	bl	8001aa4 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 800464a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800464e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004652:	49cf      	ldr	r1, [pc, #828]	; (8004990 <StartTelemTask+0x360>)
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd fa85 	bl	8001b64 <sxSetDio1Pin>

    //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
    SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 800465a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800465e:	22e0      	movs	r2, #224	; 0xe0
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fad2 	bl	8001c0c <SetTxParams>
    osDelay(3);
 8004668:	2003      	movs	r0, #3
 800466a:	f00a fa9f 	bl	800ebac <osDelay>

    lsm6dso imu;
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,SPI2_NSS_Pin);
 800466e:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8004672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004676:	4ac7      	ldr	r2, [pc, #796]	; (8004994 <StartTelemTask+0x364>)
 8004678:	49c7      	ldr	r1, [pc, #796]	; (8004998 <StartTelemTask+0x368>)
 800467a:	f7fc fd25 	bl	80010c8 <LSM_init>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 8004684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004688:	2277      	movs	r2, #119	; 0x77
 800468a:	49c4      	ldr	r1, [pc, #784]	; (800499c <StartTelemTask+0x36c>)
 800468c:	4618      	mov	r0, r3
 800468e:	f7fc ff21 	bl	80014d4 <SPL06_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6

    Orientation ori;
    orientation_init(&ori);
 8004698:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fa60 	bl	8004b62 <orientation_init>
    uint32_t counter = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    TLM_dec.packet_type = 1;
 80046a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]
    TLM_dec.flight_state = 4;
 80046b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046b4:	2204      	movs	r2, #4
 80046b6:	705a      	strb	r2, [r3, #1]
    TLM_dec.is_playing_music = 0;
 80046b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046bc:	2200      	movs	r2, #0
 80046be:	709a      	strb	r2, [r3, #2]
    TLM_dec.is_data_logging = 0;
 80046c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c4:	2200      	movs	r2, #0
 80046c6:	70da      	strb	r2, [r3, #3]
    TLM_dec.pin_states = 0b00011011;
 80046c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046cc:	221b      	movs	r2, #27
 80046ce:	711a      	strb	r2, [r3, #4]
    TLM_dec.servo_state = 3;
 80046d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046d4:	2203      	movs	r2, #3
 80046d6:	715a      	strb	r2, [r3, #5]
    TLM_dec.vbat = 7.283;
 80046d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046dc:	4ab0      	ldr	r2, [pc, #704]	; (80049a0 <StartTelemTask+0x370>)
 80046de:	60da      	str	r2, [r3, #12]
    TLM_dec.systick = 1232432;
 80046e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046e4:	4aaf      	ldr	r2, [pc, #700]	; (80049a4 <StartTelemTask+0x374>)
 80046e6:	609a      	str	r2, [r3, #8]
    TLM_dec.orientation_quat[0] = 0.143123;
 80046e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ec:	4aae      	ldr	r2, [pc, #696]	; (80049a8 <StartTelemTask+0x378>)
 80046ee:	611a      	str	r2, [r3, #16]
    TLM_dec.acc[2] = 1337;
 80046f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046f4:	f240 5239 	movw	r2, #1337	; 0x539
 80046f8:	849a      	strh	r2, [r3, #36]	; 0x24
    TLM_dec.gyro[2] = -21;
 80046fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
    TLM_dec.baro = 90001.623;
 8004704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004708:	4aa8      	ldr	r2, [pc, #672]	; (80049ac <StartTelemTask+0x37c>)
 800470a:	62da      	str	r2, [r3, #44]	; 0x2c
    TLM_dec.temp = 63.4;
 800470c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004710:	4aa7      	ldr	r2, [pc, #668]	; (80049b0 <StartTelemTask+0x380>)
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
    TLM_dec.vertical_velocity = 180;
 8004714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004718:	4aa6      	ldr	r2, [pc, #664]	; (80049b4 <StartTelemTask+0x384>)
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
    TLM_dec.altitude = 1321;
 800471c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004720:	4aa5      	ldr	r2, [pc, #660]	; (80049b8 <StartTelemTask+0x388>)
 8004722:	635a      	str	r2, [r3, #52]	; 0x34
    TLM_dec.debug = 1337;
 8004724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004728:	f240 5239 	movw	r2, #1337	; 0x539
 800472c:	879a      	strh	r2, [r3, #60]	; 0x3c
    TLM_dec.ranging = 15212;
 800472e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004732:	4aa2      	ldr	r2, [pc, #648]	; (80049bc <StartTelemTask+0x38c>)
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

    encode_TLM(&TLM_dec, &TLM_enc);
 8004736:	f107 0208 	add.w	r2, r7, #8
 800473a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800473e:	4611      	mov	r1, r2
 8004740:	4618      	mov	r0, r3
 8004742:	f7fd fc39 	bl	8001fb8 <encode_TLM>

    WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 8004746:	f107 0208 	add.w	r2, r7, #8
 800474a:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 800474e:	231f      	movs	r3, #31
 8004750:	2100      	movs	r1, #0
 8004752:	f7fd fad4 	bl	8001cfe <WriteBuffer>
    osDelay(1);
 8004756:	2001      	movs	r0, #1
 8004758:	f00a fa28 	bl	800ebac <osDelay>

    SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 800475c:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	2201      	movs	r2, #1
 8004768:	2101      	movs	r1, #1
 800476a:	f7fd fb31 	bl	8001dd0 <SetDioIrqParams>

    osDelay(3);
 800476e:	2003      	movs	r0, #3
 8004770:	f00a fa1c 	bl	800ebac <osDelay>

    uint32_t lasttime = HAL_GetTick();
 8004774:	f000 ff50 	bl	8005618 <HAL_GetTick>
 8004778:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
    uint32_t nowtime = HAL_GetTick();
 800477c:	f000 ff4c 	bl	8005618 <HAL_GetTick>
 8004780:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
    float dt = 0;
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    //changeLed(100, 100, 100);
    /* Infinite loop */
    for (;;) {

        LSM_pollsensors(&imu);
 800478c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc fd13 	bl	80011bc <LSM_pollsensors>
        //changeLed(0, 0, 100);
        nowtime = HAL_GetTick();
 8004796:	f000 ff3f 	bl	8005618 <HAL_GetTick>
 800479a:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
        dt = (nowtime - lasttime) / 1000.0;
 800479e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80047a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fb fecb 	bl	8000544 <__aeabi_ui2d>
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	4b83      	ldr	r3, [pc, #524]	; (80049c0 <StartTelemTask+0x390>)
 80047b4:	f7fc f86a 	bl	800088c <__aeabi_ddiv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	4618      	mov	r0, r3
 80047be:	4621      	mov	r1, r4
 80047c0:	f7fc fa32 	bl	8000c28 <__aeabi_d2f>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        lasttime = nowtime;
 80047ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80047ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        orientation_setGyro(&ori, imu.gyroRPS);
 80047d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047d6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80047da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f9ec 	bl	8004bbe <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 80047e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047ea:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80047ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 f9f9 	bl	8004bec <orientation_setAcc>
        orientation_update(&ori, dt);
 80047fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047fe:	ed97 0a77 	vldr	s0, [r7, #476]	; 0x1dc
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fa0c 	bl	8004c20 <orientation_update>

        counter++;
 8004808:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800480c:	3301      	adds	r3, #1
 800480e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

        if (counter % 20 == 0) {
 8004812:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8004816:	4b6b      	ldr	r3, [pc, #428]	; (80049c4 <StartTelemTask+0x394>)
 8004818:	fba3 2301 	umull	r2, r3, r3, r1
 800481c:	091a      	lsrs	r2, r3, #4
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	1aca      	subs	r2, r1, r3
 8004828:	2a00      	cmp	r2, #0
 800482a:	f040 809f 	bne.w	800496c <StartTelemTask+0x33c>

            TLM_dec.vbat = get_battery_voltage();
 800482e:	f7fe faaf 	bl	8002d90 <get_battery_voltage>
 8004832:	eef0 7a40 	vmov.f32	s15, s0
 8004836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800483a:	edc3 7a03 	vstr	s15, [r3, #12]
            TLM_dec.systick = osKernelSysTick();
 800483e:	f00a f959 	bl	800eaf4 <osKernelSysTick>
 8004842:	4602      	mov	r2, r0
 8004844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004848:	609a      	str	r2, [r3, #8]
            TLM_dec.acc[0] = imu.rawAcc[0];
 800484a:	f9b7 217c 	ldrsh.w	r2, [r7, #380]	; 0x17c
 800484e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004852:	841a      	strh	r2, [r3, #32]
            TLM_dec.acc[1] = imu.rawAcc[1];
 8004854:	f9b7 217e 	ldrsh.w	r2, [r7, #382]	; 0x17e
 8004858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800485c:	845a      	strh	r2, [r3, #34]	; 0x22
            TLM_dec.acc[2] = imu.rawAcc[2];
 800485e:	f9b7 2180 	ldrsh.w	r2, [r7, #384]	; 0x180
 8004862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004866:	849a      	strh	r2, [r3, #36]	; 0x24
            TLM_dec.gyro[0] = imu.rawGyro[0];
 8004868:	f9b7 2152 	ldrsh.w	r2, [r7, #338]	; 0x152
 800486c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004870:	84da      	strh	r2, [r3, #38]	; 0x26
            TLM_dec.gyro[1] = imu.rawGyro[1];
 8004872:	f9b7 2154 	ldrsh.w	r2, [r7, #340]	; 0x154
 8004876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800487a:	851a      	strh	r2, [r3, #40]	; 0x28
            TLM_dec.gyro[2] = imu.rawGyro[2];
 800487c:	f9b7 2156 	ldrsh.w	r2, [r7, #342]	; 0x156
 8004880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a
            TLM_dec.orientation_quat[0] = ori.orientationQuat.w;
 8004886:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004890:	611a      	str	r2, [r3, #16]
            TLM_dec.orientation_quat[1] = ori.orientationQuat.v[0];
 8004892:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800489c:	615a      	str	r2, [r3, #20]
            TLM_dec.orientation_quat[2] = ori.orientationQuat.v[1];
 800489e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048a8:	619a      	str	r2, [r3, #24]
            TLM_dec.orientation_quat[3] = ori.orientationQuat.v[2];
 80048aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048b4:	61da      	str	r2, [r3, #28]
            SPL06_Read(&baro);
 80048b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc ff90 	bl	80017e0 <SPL06_Read>
            TLM_dec.baro = baro.pressure_Pa;
 80048c0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80048c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c
            TLM_dec.altitude = 44330 * (1 - pow(baro.pressure_Pa/101325, 0.190295));
 80048ca:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 80048ce:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80049c8 <StartTelemTask+0x398>
 80048d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048d6:	ee16 0a90 	vmov	r0, s13
 80048da:	f7fb fe55 	bl	8000588 <__aeabi_f2d>
 80048de:	4603      	mov	r3, r0
 80048e0:	460c      	mov	r4, r1
 80048e2:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8004978 <StartTelemTask+0x348>
 80048e6:	ec44 3b10 	vmov	d0, r3, r4
 80048ea:	f00f ffcb 	bl	8014884 <pow>
 80048ee:	ec54 3b10 	vmov	r3, r4, d0
 80048f2:	461a      	mov	r2, r3
 80048f4:	4623      	mov	r3, r4
 80048f6:	f04f 0000 	mov.w	r0, #0
 80048fa:	4934      	ldr	r1, [pc, #208]	; (80049cc <StartTelemTask+0x39c>)
 80048fc:	f7fb fce4 	bl	80002c8 <__aeabi_dsub>
 8004900:	4603      	mov	r3, r0
 8004902:	460c      	mov	r4, r1
 8004904:	4618      	mov	r0, r3
 8004906:	4621      	mov	r1, r4
 8004908:	a31d      	add	r3, pc, #116	; (adr r3, 8004980 <StartTelemTask+0x350>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fb fe93 	bl	8000638 <__aeabi_dmul>
 8004912:	4603      	mov	r3, r0
 8004914:	460c      	mov	r4, r1
 8004916:	4618      	mov	r0, r3
 8004918:	4621      	mov	r1, r4
 800491a:	f7fc f985 	bl	8000c28 <__aeabi_d2f>
 800491e:	4602      	mov	r2, r0
 8004920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004924:	635a      	str	r2, [r3, #52]	; 0x34
            //        data[1], data[2], data[3]);
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
            //CDC_Transmit_FS((uint8_t*) printBuffer,
            //        MIN(strlen(printBuffer), 128));

            encode_TLM(&TLM_dec, &TLM_enc);
 8004926:	f107 0208 	add.w	r2, r7, #8
 800492a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800492e:	4611      	mov	r1, r2
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd fb41 	bl	8001fb8 <encode_TLM>
            WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 8004936:	f107 0208 	add.w	r2, r7, #8
 800493a:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 800493e:	231f      	movs	r3, #31
 8004940:	2100      	movs	r1, #0
 8004942:	f7fd f9dc 	bl	8001cfe <WriteBuffer>
            //WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
            osDelay(1);
 8004946:	2001      	movs	r0, #1
 8004948:	f00a f930 	bl	800ebac <osDelay>
            ClrIrqStatus(&radio, 1); // clear txdone irq
 800494c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fa76 	bl	8001e44 <ClrIrqStatus>
            osDelay(1);
 8004958:	2001      	movs	r0, #1
 800495a:	f00a f927 	bl	800ebac <osDelay>
            SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 800495e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004962:	2232      	movs	r2, #50	; 0x32
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f7fd fa87 	bl	8001e7a <SetTx>
        }

        osDelay(1);
 800496c:	2001      	movs	r0, #1
 800496e:	f00a f91d 	bl	800ebac <osDelay>
        LSM_pollsensors(&imu);
 8004972:	e70b      	b.n	800478c <StartTelemTask+0x15c>
 8004974:	f3af 8000 	nop.w
 8004978:	28cbd124 	.word	0x28cbd124
 800497c:	3fc85b96 	.word	0x3fc85b96
 8004980:	00000000 	.word	0x00000000
 8004984:	40e5a540 	.word	0x40e5a540
 8004988:	40020000 	.word	0x40020000
 800498c:	200046d4 	.word	0x200046d4
 8004990:	40020800 	.word	0x40020800
 8004994:	40020400 	.word	0x40020400
 8004998:	20004638 	.word	0x20004638
 800499c:	200045e4 	.word	0x200045e4
 80049a0:	40e90e56 	.word	0x40e90e56
 80049a4:	0012ce30 	.word	0x0012ce30
 80049a8:	3e128ed6 	.word	0x3e128ed6
 80049ac:	47afc8d0 	.word	0x47afc8d0
 80049b0:	427d999a 	.word	0x427d999a
 80049b4:	43340000 	.word	0x43340000
 80049b8:	44a52000 	.word	0x44a52000
 80049bc:	466db000 	.word	0x466db000
 80049c0:	408f4000 	.word	0x408f4000
 80049c4:	cccccccd 	.word	0xcccccccd
 80049c8:	47c5e680 	.word	0x47c5e680
 80049cc:	3ff00000 	.word	0x3ff00000

080049d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80049e2:	f000 fe05 	bl	80055f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000

080049f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80049fa:	e7fe      	b.n	80049fa <Error_Handler+0x6>

080049fc <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	ed93 7a00 	vldr	s14, [r3]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	3308      	adds	r3, #8
 8004a14:	edd3 7a00 	vldr	s15, [r3]
 8004a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	edd3 6a00 	vldr	s13, [r3]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3304      	adds	r3, #4
 8004a28:	edd3 7a00 	vldr	s15, [r3]
 8004a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	ed93 7a00 	vldr	s14, [r3]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	edd3 7a00 	vldr	s15, [r3]
 8004a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	edd3 6a00 	vldr	s13, [r3]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	3308      	adds	r3, #8
 8004a56:	edd3 7a00 	vldr	s15, [r3]
 8004a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3304      	adds	r3, #4
 8004a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a66:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	ed93 7a00 	vldr	s14, [r3]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3304      	adds	r3, #4
 8004a74:	edd3 7a00 	vldr	s15, [r3]
 8004a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	edd3 6a00 	vldr	s13, [r3]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	edd3 7a00 	vldr	s15, [r3]
 8004a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3308      	adds	r3, #8
 8004a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a96:	edc3 7a00 	vstr	s15, [r3]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	ed93 7a00 	vldr	s14, [r3]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3304      	adds	r3, #4
 8004acc:	ed93 7a00 	vldr	s14, [r3]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	edd3 7a00 	vldr	s15, [r3]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae0:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	ed93 7a00 	vldr	s14, [r3]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	3308      	adds	r3, #8
 8004af0:	edd3 7a00 	vldr	s15, [r3]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3308      	adds	r3, #8
 8004af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004afc:	edc3 7a00 	vstr	s15, [r3]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	ed93 7a00 	vldr	s14, [r3]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	edd3 7a00 	vldr	s15, [r3]
 8004b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	edd3 6a00 	vldr	s13, [r3]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	edd3 7a00 	vldr	s15, [r3]
 8004b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	edd3 6a00 	vldr	s13, [r3]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3308      	adds	r3, #8
 8004b48:	edd3 7a00 	vldr	s15, [r3]
 8004b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b50:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004b54:	eeb0 0a67 	vmov.f32	s0, s15
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <orientation_init>:

void orientation_init(Orientation *ori) {
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fd fc55 	bl	800241c <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3370      	adds	r3, #112	; 0x70
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fc50 	bl	800241c <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3360      	adds	r3, #96	; 0x60
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd fc4b 	bl	800241c <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004b9c:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[0];
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[1];
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[2];
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[0];
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[1];
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[2];
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	0000      	movs	r0, r0
 8004c1c:	0000      	movs	r0, r0
	...

08004c20 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt) {
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b08f      	sub	sp, #60	; 0x3c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	ed87 0a00 	vstr	s0, [r7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3348      	adds	r3, #72	; 0x48
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f7fd fe49 	bl	80028d0 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3354      	adds	r3, #84	; 0x54
 8004c48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7ff fed5 	bl	80049fc <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3310      	adds	r3, #16
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7fd fd44 	bl	80026e8 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3310      	adds	r3, #16
 8004c64:	f107 021c 	add.w	r2, r7, #28
 8004c68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fd fe2f 	bl	80028d0 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fb fc87 	bl	8000588 <__aeabi_f2d>
 8004c7a:	a347      	add	r3, pc, #284	; (adr r3, 8004d98 <orientation_update+0x178>)
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f7fb fcda 	bl	8000638 <__aeabi_dmul>
 8004c84:	4603      	mov	r3, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	f7fb ffcc 	bl	8000c28 <__aeabi_d2f>
 8004c90:	4603      	mov	r3, r0
 8004c92:	61fb      	str	r3, [r7, #28]
    correctionBody[1] = correctionBody[1] * 0.1;
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb fc76 	bl	8000588 <__aeabi_f2d>
 8004c9c:	a33e      	add	r3, pc, #248	; (adr r3, 8004d98 <orientation_update+0x178>)
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f7fb fcc9 	bl	8000638 <__aeabi_dmul>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4618      	mov	r0, r3
 8004cac:	4621      	mov	r1, r4
 8004cae:	f7fb ffbb 	bl	8000c28 <__aeabi_d2f>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	623b      	str	r3, [r7, #32]
    correctionBody[2] = correctionBody[2] * 0.1;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fc65 	bl	8000588 <__aeabi_f2d>
 8004cbe:	a336      	add	r3, pc, #216	; (adr r3, 8004d98 <orientation_update+0x178>)
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f7fb fcb8 	bl	8000638 <__aeabi_dmul>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	4621      	mov	r1, r4
 8004cd0:	f7fb ffaa 	bl	8000c28 <__aeabi_d2f>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	333c      	adds	r3, #60	; 0x3c
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff15 	bl	8004b0c <vector_lenSquared>
 8004ce2:	ee10 3a10 	vmov	r3, s0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fb fc4e 	bl	8000588 <__aeabi_f2d>
 8004cec:	a32c      	add	r3, pc, #176	; (adr r3, 8004da0 <orientation_update+0x180>)
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f7fb fdcb 	bl	800088c <__aeabi_ddiv>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	f7fb ff93 	bl	8000c28 <__aeabi_d2f>
 8004d02:	4603      	mov	r3, r0
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
    if (GsSquared > 0.81 && GsSquared < 1.21) {
 8004d06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d08:	f7fb fc3e 	bl	8000588 <__aeabi_f2d>
 8004d0c:	a326      	add	r3, pc, #152	; (adr r3, 8004da8 <orientation_update+0x188>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb ff21 	bl	8000b58 <__aeabi_dcmpgt>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d015      	beq.n	8004d48 <orientation_update+0x128>
 8004d1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d1e:	f7fb fc33 	bl	8000588 <__aeabi_f2d>
 8004d22:	a323      	add	r3, pc, #140	; (adr r3, 8004db0 <orientation_update+0x190>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fef8 	bl	8000b1c <__aeabi_dcmplt>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <orientation_update+0x128>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d3e:	f107 031c 	add.w	r3, r7, #28
 8004d42:	4619      	mov	r1, r3
 8004d44:	f7ff feaf 	bl	8004aa6 <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3320      	adds	r3, #32
 8004d52:	4619      	mov	r1, r3
 8004d54:	ed97 0a00 	vldr	s0, [r7]
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7fd ff41 	bl	8002be0 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3320      	adds	r3, #32
 8004d64:	f107 020c 	add.w	r2, r7, #12
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fd fcf1 	bl	8002750 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd fb74 	bl	8002464 <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3380      	adds	r3, #128	; 0x80
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f7fd fb8f 	bl	80024a8 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 8004d8a:	bf00      	nop
 8004d8c:	373c      	adds	r7, #60	; 0x3c
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}
 8004d92:	bf00      	nop
 8004d94:	f3af 8000 	nop.w
 8004d98:	9999999a 	.word	0x9999999a
 8004d9c:	3fb99999 	.word	0x3fb99999
 8004da0:	9339d914 	.word	0x9339d914
 8004da4:	40580ae7 	.word	0x40580ae7
 8004da8:	1eb851ec 	.word	0x1eb851ec
 8004dac:	3fe9eb85 	.word	0x3fe9eb85
 8004db0:	f5c28f5c 	.word	0xf5c28f5c
 8004db4:	3ff35c28 	.word	0x3ff35c28

08004db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_MspInit+0x54>)
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <HAL_MspInit+0x54>)
 8004dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <HAL_MspInit+0x54>)
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	2300      	movs	r3, #0
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_MspInit+0x54>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <HAL_MspInit+0x54>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dea:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <HAL_MspInit+0x54>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004df6:	2200      	movs	r2, #0
 8004df8:	210f      	movs	r1, #15
 8004dfa:	f06f 0001 	mvn.w	r0, #1
 8004dfe:	f001 f8bb 	bl	8005f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800

08004e10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_ADC_MspInit+0x7c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d127      	bne.n	8004e82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <HAL_ADC_MspInit+0x80>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_ADC_MspInit+0x80>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e40:	6453      	str	r3, [r2, #68]	; 0x44
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_ADC_MspInit+0x80>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <HAL_ADC_MspInit+0x80>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_ADC_MspInit+0x80>)
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_ADC_MspInit+0x80>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8004e6a:	2304      	movs	r3, #4
 8004e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8004e76:	f107 0314 	add.w	r3, r7, #20
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4805      	ldr	r0, [pc, #20]	; (8004e94 <HAL_ADC_MspInit+0x84>)
 8004e7e:	f001 f8a5 	bl	8005fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e82:	bf00      	nop
 8004e84:	3728      	adds	r7, #40	; 0x28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40012000 	.word	0x40012000
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40020800 	.word	0x40020800

08004e98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea0:	f107 0314 	add.w	r3, r7, #20
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <HAL_I2C_MspInit+0xc4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d14b      	bne.n	8004f52 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a27      	ldr	r2, [pc, #156]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004ec4:	f043 0304 	orr.w	r3, r3, #4
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	4a20      	ldr	r2, [pc, #128]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ef8:	2312      	movs	r3, #18
 8004efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004efc:	2301      	movs	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f00:	2303      	movs	r3, #3
 8004f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004f04:	2304      	movs	r3, #4
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4815      	ldr	r0, [pc, #84]	; (8004f64 <HAL_I2C_MspInit+0xcc>)
 8004f10:	f001 f85c 	bl	8005fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f1a:	2312      	movs	r3, #18
 8004f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f22:	2303      	movs	r3, #3
 8004f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004f26:	2304      	movs	r3, #4
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	4619      	mov	r1, r3
 8004f30:	480d      	ldr	r0, [pc, #52]	; (8004f68 <HAL_I2C_MspInit+0xd0>)
 8004f32:	f001 f84b 	bl	8005fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_I2C_MspInit+0xc8>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004f52:	bf00      	nop
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40005c00 	.word	0x40005c00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	40020800 	.word	0x40020800
 8004f68:	40020000 	.word	0x40020000

08004f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	; 0x38
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a5b      	ldr	r2, [pc, #364]	; (80050f8 <HAL_SPI_MspInit+0x18c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d12c      	bne.n	8004fe8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	4b5a      	ldr	r3, [pc, #360]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	4a59      	ldr	r2, [pc, #356]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9e:	4b57      	ldr	r3, [pc, #348]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	4b53      	ldr	r3, [pc, #332]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	4a52      	ldr	r2, [pc, #328]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fba:	4b50      	ldr	r3, [pc, #320]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004fc6:	23e0      	movs	r3, #224	; 0xe0
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fd6:	2305      	movs	r3, #5
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4847      	ldr	r0, [pc, #284]	; (8005100 <HAL_SPI_MspInit+0x194>)
 8004fe2:	f000 fff3 	bl	8005fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004fe6:	e082      	b.n	80050ee <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a45      	ldr	r2, [pc, #276]	; (8005104 <HAL_SPI_MspInit+0x198>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d12d      	bne.n	800504e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	4b41      	ldr	r3, [pc, #260]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	4a40      	ldr	r2, [pc, #256]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8004ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005000:	6413      	str	r3, [r2, #64]	; 0x40
 8005002:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	4b3a      	ldr	r3, [pc, #232]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	4a39      	ldr	r2, [pc, #228]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
 800501e:	4b37      	ldr	r3, [pc, #220]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800502a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005030:	2302      	movs	r3, #2
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	2300      	movs	r3, #0
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005038:	2303      	movs	r3, #3
 800503a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800503c:	2305      	movs	r3, #5
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005044:	4619      	mov	r1, r3
 8005046:	4830      	ldr	r0, [pc, #192]	; (8005108 <HAL_SPI_MspInit+0x19c>)
 8005048:	f000 ffc0 	bl	8005fcc <HAL_GPIO_Init>
}
 800504c:	e04f      	b.n	80050ee <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2e      	ldr	r2, [pc, #184]	; (800510c <HAL_SPI_MspInit+0x1a0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d14a      	bne.n	80050ee <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_SPI_MspInit+0x190>)
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	4a26      	ldr	r2, [pc, #152]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8005062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005066:	6413      	str	r3, [r2, #64]	; 0x40
 8005068:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HAL_SPI_MspInit+0x190>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_SPI_MspInit+0x190>)
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HAL_SPI_MspInit+0x190>)
 800507e:	f043 0304 	orr.w	r3, r3, #4
 8005082:	6313      	str	r3, [r2, #48]	; 0x30
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005090:	2300      	movs	r3, #0
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_SPI_MspInit+0x190>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_SPI_MspInit+0x190>)
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	6313      	str	r3, [r2, #48]	; 0x30
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <HAL_SPI_MspInit+0x190>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80050ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b2:	2302      	movs	r3, #2
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ba:	2303      	movs	r3, #3
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80050be:	2306      	movs	r3, #6
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c6:	4619      	mov	r1, r3
 80050c8:	4811      	ldr	r0, [pc, #68]	; (8005110 <HAL_SPI_MspInit+0x1a4>)
 80050ca:	f000 ff7f 	bl	8005fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80050ce:	2320      	movs	r3, #32
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	2302      	movs	r3, #2
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050da:	2303      	movs	r3, #3
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80050de:	2306      	movs	r3, #6
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e6:	4619      	mov	r1, r3
 80050e8:	4807      	ldr	r0, [pc, #28]	; (8005108 <HAL_SPI_MspInit+0x19c>)
 80050ea:	f000 ff6f 	bl	8005fcc <HAL_GPIO_Init>
}
 80050ee:	bf00      	nop
 80050f0:	3738      	adds	r7, #56	; 0x38
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40013000 	.word	0x40013000
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020000 	.word	0x40020000
 8005104:	40003800 	.word	0x40003800
 8005108:	40020400 	.word	0x40020400
 800510c:	40003c00 	.word	0x40003c00
 8005110:	40020800 	.word	0x40020800

08005114 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d10d      	bne.n	8005142 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_TIM_PWM_MspInit+0x3c>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <HAL_TIM_PWM_MspInit+0x3c>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_TIM_PWM_MspInit+0x3c>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <HAL_TIM_Base_MspInit+0x3c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10d      	bne.n	8005182 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <HAL_TIM_Base_MspInit+0x40>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <HAL_TIM_Base_MspInit+0x40>)
 8005170:	f043 0302 	orr.w	r3, r3, #2
 8005174:	6413      	str	r3, [r2, #64]	; 0x40
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <HAL_TIM_Base_MspInit+0x40>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40000400 	.word	0x40000400
 8005194:	40023800 	.word	0x40023800

08005198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d11e      	bne.n	80051f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	4b31      	ldr	r3, [pc, #196]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	4a30      	ldr	r2, [pc, #192]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ca:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80051d6:	230a      	movs	r3, #10
 80051d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051da:	2302      	movs	r3, #2
 80051dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051e6:	2301      	movs	r3, #1
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ea:	f107 0314 	add.w	r3, r7, #20
 80051ee:	4619      	mov	r1, r3
 80051f0:	4825      	ldr	r0, [pc, #148]	; (8005288 <HAL_TIM_MspPostInit+0xf0>)
 80051f2:	f000 feeb 	bl	8005fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80051f6:	e041      	b.n	800527c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a23      	ldr	r2, [pc, #140]	; (800528c <HAL_TIM_MspPostInit+0xf4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d13c      	bne.n	800527c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	6313      	str	r3, [r2, #48]	; 0x30
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	4a17      	ldr	r2, [pc, #92]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 8005228:	f043 0304 	orr.w	r3, r3, #4
 800522c:	6313      	str	r3, [r2, #48]	; 0x30
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_TIM_MspPostInit+0xec>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800523a:	2302      	movs	r3, #2
 800523c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523e:	2302      	movs	r3, #2
 8005240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005246:	2300      	movs	r3, #0
 8005248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800524a:	2302      	movs	r3, #2
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800524e:	f107 0314 	add.w	r3, r7, #20
 8005252:	4619      	mov	r1, r3
 8005254:	480e      	ldr	r0, [pc, #56]	; (8005290 <HAL_TIM_MspPostInit+0xf8>)
 8005256:	f000 feb9 	bl	8005fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800525a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800525e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005260:	2302      	movs	r3, #2
 8005262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005268:	2300      	movs	r3, #0
 800526a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800526c:	2302      	movs	r3, #2
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	4619      	mov	r1, r3
 8005276:	4807      	ldr	r0, [pc, #28]	; (8005294 <HAL_TIM_MspPostInit+0xfc>)
 8005278:	f000 fea8 	bl	8005fcc <HAL_GPIO_Init>
}
 800527c:	bf00      	nop
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40023800 	.word	0x40023800
 8005288:	40020000 	.word	0x40020000
 800528c:	40000400 	.word	0x40000400
 8005290:	40020400 	.word	0x40020400
 8005294:	40020800 	.word	0x40020800

08005298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80052a8:	2200      	movs	r2, #0
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	2019      	movs	r0, #25
 80052ae:	f000 fe63 	bl	8005f78 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80052b2:	2019      	movs	r0, #25
 80052b4:	f000 fe7c 	bl	8005fb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	4b1f      	ldr	r3, [pc, #124]	; (800533c <HAL_InitTick+0xa4>)
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_InitTick+0xa4>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	6453      	str	r3, [r2, #68]	; 0x44
 80052c8:	4b1c      	ldr	r3, [pc, #112]	; (800533c <HAL_InitTick+0xa4>)
 80052ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052d4:	f107 0210 	add.w	r2, r7, #16
 80052d8:	f107 0314 	add.w	r3, r7, #20
 80052dc:	4611      	mov	r1, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	f003 fb24 	bl	800892c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80052e4:	f003 fb0e 	bl	8008904 <HAL_RCC_GetPCLK2Freq>
 80052e8:	4603      	mov	r3, r0
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_InitTick+0xa8>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	0c9b      	lsrs	r3, r3, #18
 80052f8:	3b01      	subs	r3, #1
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <HAL_InitTick+0xac>)
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <HAL_InitTick+0xb0>)
 8005300:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <HAL_InitTick+0xac>)
 8005304:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005308:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800530a:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <HAL_InitTick+0xac>)
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_InitTick+0xac>)
 8005312:	2200      	movs	r2, #0
 8005314:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_InitTick+0xac>)
 8005318:	2200      	movs	r2, #0
 800531a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800531c:	4809      	ldr	r0, [pc, #36]	; (8005344 <HAL_InitTick+0xac>)
 800531e:	f004 ffbd 	bl	800a29c <HAL_TIM_Base_Init>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005328:	4806      	ldr	r0, [pc, #24]	; (8005344 <HAL_InitTick+0xac>)
 800532a:	f004 ffe2 	bl	800a2f2 <HAL_TIM_Base_Start_IT>
 800532e:	4603      	mov	r3, r0
 8005330:	e000      	b.n	8005334 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
}
 8005334:	4618      	mov	r0, r3
 8005336:	3730      	adds	r7, #48	; 0x30
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	431bde83 	.word	0x431bde83
 8005344:	2000481c 	.word	0x2000481c
 8005348:	40010000 	.word	0x40010000

0800534c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005350:	e7fe      	b.n	8005350 <NMI_Handler+0x4>

08005352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005356:	e7fe      	b.n	8005356 <HardFault_Handler+0x4>

08005358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800535c:	e7fe      	b.n	800535c <MemManage_Handler+0x4>

0800535e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800535e:	b480      	push	{r7}
 8005360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005362:	e7fe      	b.n	8005362 <BusFault_Handler+0x4>

08005364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005368:	e7fe      	b.n	8005368 <UsageFault_Handler+0x4>

0800536a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800536a:	b480      	push	{r7}
 800536c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800537c:	4802      	ldr	r0, [pc, #8]	; (8005388 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800537e:	f005 f845 	bl	800a40c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	2000481c 	.word	0x2000481c

0800538c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005390:	4802      	ldr	r0, [pc, #8]	; (800539c <OTG_FS_IRQHandler+0x10>)
 8005392:	f002 f8e9 	bl	8007568 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	200061a4 	.word	0x200061a4

080053a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
	return 1;
 80053a4:	2301      	movs	r3, #1
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <_kill>:

int _kill(int pid, int sig)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80053ba:	f00c fb89 	bl	8011ad0 <__errno>
 80053be:	4602      	mov	r2, r0
 80053c0:	2316      	movs	r3, #22
 80053c2:	6013      	str	r3, [r2, #0]
	return -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_exit>:

void _exit (int status)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80053d8:	f04f 31ff 	mov.w	r1, #4294967295
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ffe7 	bl	80053b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80053e2:	e7fe      	b.n	80053e2 <_exit+0x12>

080053e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e00a      	b.n	800540c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053f6:	f3af 8000 	nop.w
 80053fa:	4601      	mov	r1, r0
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	60ba      	str	r2, [r7, #8]
 8005402:	b2ca      	uxtb	r2, r1
 8005404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	dbf0      	blt.n	80053f6 <_read+0x12>
	}

return len;
 8005414:	687b      	ldr	r3, [r7, #4]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e009      	b.n	8005444 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	60ba      	str	r2, [r7, #8]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	3301      	adds	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	dbf1      	blt.n	8005430 <_write+0x12>
	}
	return len;
 800544c:	687b      	ldr	r3, [r7, #4]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <_close>:

int _close(int file)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
	return -1;
 800545e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800547e:	605a      	str	r2, [r3, #4]
	return 0;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <_isatty>:

int _isatty(int file)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
	return 1;
 8005496:	2301      	movs	r3, #1
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
	return 0;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054c8:	4a14      	ldr	r2, [pc, #80]	; (800551c <_sbrk+0x5c>)
 80054ca:	4b15      	ldr	r3, [pc, #84]	; (8005520 <_sbrk+0x60>)
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <_sbrk+0x64>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <_sbrk+0x64>)
 80054de:	4a12      	ldr	r2, [pc, #72]	; (8005528 <_sbrk+0x68>)
 80054e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <_sbrk+0x64>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4413      	add	r3, r2
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d207      	bcs.n	8005500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054f0:	f00c faee 	bl	8011ad0 <__errno>
 80054f4:	4602      	mov	r2, r0
 80054f6:	230c      	movs	r3, #12
 80054f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295
 80054fe:	e009      	b.n	8005514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <_sbrk+0x64>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <_sbrk+0x64>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	4a05      	ldr	r2, [pc, #20]	; (8005524 <_sbrk+0x64>)
 8005510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005512:	68fb      	ldr	r3, [r7, #12]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20020000 	.word	0x20020000
 8005520:	00000400 	.word	0x00000400
 8005524:	2000087c 	.word	0x2000087c
 8005528:	200065b0 	.word	0x200065b0

0800552c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005530:	4b08      	ldr	r3, [pc, #32]	; (8005554 <SystemInit+0x28>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <SystemInit+0x28>)
 8005538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800553c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <SystemInit+0x28>)
 8005542:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005546:	609a      	str	r2, [r3, #8]
#endif
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005590 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800555c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800555e:	e003      	b.n	8005568 <LoopCopyDataInit>

08005560 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005562:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005564:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005566:	3104      	adds	r1, #4

08005568 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005568:	480b      	ldr	r0, [pc, #44]	; (8005598 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800556c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800556e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005570:	d3f6      	bcc.n	8005560 <CopyDataInit>
  ldr  r2, =_sbss
 8005572:	4a0b      	ldr	r2, [pc, #44]	; (80055a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005574:	e002      	b.n	800557c <LoopFillZerobss>

08005576 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005576:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005578:	f842 3b04 	str.w	r3, [r2], #4

0800557c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800557e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005580:	d3f9      	bcc.n	8005576 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005582:	f7ff ffd3 	bl	800552c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005586:	f00c fabb 	bl	8011b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800558a:	f7fd ff45 	bl	8003418 <main>
  bx  lr    
 800558e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005590:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005594:	08017db8 	.word	0x08017db8
  ldr  r0, =_sdata
 8005598:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800559c:	20000604 	.word	0x20000604
  ldr  r2, =_sbss
 80055a0:	20000604 	.word	0x20000604
  ldr  r3, = _ebss
 80055a4:	200065b0 	.word	0x200065b0

080055a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055a8:	e7fe      	b.n	80055a8 <ADC_IRQHandler>
	...

080055ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <HAL_Init+0x40>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <HAL_Init+0x40>)
 80055b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_Init+0x40>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <HAL_Init+0x40>)
 80055c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055c8:	4b08      	ldr	r3, [pc, #32]	; (80055ec <HAL_Init+0x40>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a07      	ldr	r2, [pc, #28]	; (80055ec <HAL_Init+0x40>)
 80055ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055d4:	2003      	movs	r0, #3
 80055d6:	f000 fcc4 	bl	8005f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055da:	2000      	movs	r0, #0
 80055dc:	f7ff fe5c 	bl	8005298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055e0:	f7ff fbea 	bl	8004db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40023c00 	.word	0x40023c00

080055f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_IncTick+0x20>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_IncTick+0x24>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	4a04      	ldr	r2, [pc, #16]	; (8005614 <HAL_IncTick+0x24>)
 8005602:	6013      	str	r3, [r2, #0]
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000284 	.word	0x20000284
 8005614:	2000485c 	.word	0x2000485c

08005618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return uwTick;
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <HAL_GetTick+0x14>)
 800561e:	681b      	ldr	r3, [r3, #0]
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	2000485c 	.word	0x2000485c

08005630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005638:	f7ff ffee 	bl	8005618 <HAL_GetTick>
 800563c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d005      	beq.n	8005656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_Delay+0x40>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005656:	bf00      	nop
 8005658:	f7ff ffde 	bl	8005618 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d8f7      	bhi.n	8005658 <HAL_Delay+0x28>
  {
  }
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000284 	.word	0x20000284

08005674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e033      	b.n	80056f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fbbc 	bl	8004e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d118      	bne.n	80056e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056ba:	f023 0302 	bic.w	r3, r3, #2
 80056be:	f043 0202 	orr.w	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 faa2 	bl	8005c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	f043 0201 	orr.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
 80056e2:	e001      	b.n	80056e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_ADC_Start+0x1a>
 8005712:	2302      	movs	r3, #2
 8005714:	e0a5      	b.n	8005862 <HAL_ADC_Start+0x166>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d018      	beq.n	800575e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800573c:	4b4c      	ldr	r3, [pc, #304]	; (8005870 <HAL_ADC_Start+0x174>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a4c      	ldr	r2, [pc, #304]	; (8005874 <HAL_ADC_Start+0x178>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	0c9a      	lsrs	r2, r3, #18
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005750:	e002      	b.n	8005758 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3b01      	subs	r3, #1
 8005756:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f9      	bne.n	8005752 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d179      	bne.n	8005860 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005796:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	d106      	bne.n	80057ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	f023 0206 	bic.w	r2, r3, #6
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	645a      	str	r2, [r3, #68]	; 0x44
 80057b8:	e002      	b.n	80057c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057c8:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_ADC_Start+0x17c>)
 80057ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80057d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d12a      	bne.n	8005838 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a25      	ldr	r2, [pc, #148]	; (800587c <HAL_ADC_Start+0x180>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d015      	beq.n	8005818 <HAL_ADC_Start+0x11c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a23      	ldr	r2, [pc, #140]	; (8005880 <HAL_ADC_Start+0x184>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d105      	bne.n	8005802 <HAL_ADC_Start+0x106>
 80057f6:	4b20      	ldr	r3, [pc, #128]	; (8005878 <HAL_ADC_Start+0x17c>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_ADC_Start+0x188>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d129      	bne.n	8005860 <HAL_ADC_Start+0x164>
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_ADC_Start+0x17c>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2b0f      	cmp	r3, #15
 8005816:	d823      	bhi.n	8005860 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11c      	bne.n	8005860 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005834:	609a      	str	r2, [r3, #8]
 8005836:	e013      	b.n	8005860 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a0f      	ldr	r2, [pc, #60]	; (800587c <HAL_ADC_Start+0x180>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10e      	bne.n	8005860 <HAL_ADC_Start+0x164>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800585e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	2000027c 	.word	0x2000027c
 8005874:	431bde83 	.word	0x431bde83
 8005878:	40012300 	.word	0x40012300
 800587c:	40012000 	.word	0x40012000
 8005880:	40012100 	.word	0x40012100
 8005884:	40012200 	.word	0x40012200

08005888 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a4:	d113      	bne.n	80058ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b4:	d10b      	bne.n	80058ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e05c      	b.n	8005988 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80058ce:	f7ff fea3 	bl	8005618 <HAL_GetTick>
 80058d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058d4:	e01a      	b.n	800590c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d016      	beq.n	800590c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_ADC_PollForConversion+0x6c>
 80058e4:	f7ff fe98 	bl	8005618 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d20b      	bcs.n	800590c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	f043 0204 	orr.w	r2, r3, #4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e03d      	b.n	8005988 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d1dd      	bne.n	80058d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0212 	mvn.w	r2, #18
 8005922:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d123      	bne.n	8005986 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005942:	2b00      	cmp	r3, #0
 8005944:	d11f      	bne.n	8005986 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005950:	2b00      	cmp	r3, #0
 8005952:	d006      	beq.n	8005962 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800595e:	2b00      	cmp	r3, #0
 8005960:	d111      	bne.n	8005986 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f043 0201 	orr.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x1c>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e113      	b.n	8005bf0 <HAL_ADC_ConfigChannel+0x244>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b09      	cmp	r3, #9
 80059d6:	d925      	bls.n	8005a24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	4613      	mov	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	3b1e      	subs	r3, #30
 80059ee:	2207      	movs	r2, #7
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	43da      	mvns	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	400a      	ands	r2, r1
 80059fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68d9      	ldr	r1, [r3, #12]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	4618      	mov	r0, r3
 8005a10:	4603      	mov	r3, r0
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4403      	add	r3, r0
 8005a16:	3b1e      	subs	r3, #30
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e022      	b.n	8005a6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6919      	ldr	r1, [r3, #16]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	4613      	mov	r3, r2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4413      	add	r3, r2
 8005a38:	2207      	movs	r2, #7
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43da      	mvns	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	400a      	ands	r2, r1
 8005a46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6919      	ldr	r1, [r3, #16]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4618      	mov	r0, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4403      	add	r3, r0
 8005a60:	409a      	lsls	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d824      	bhi.n	8005abc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	3b05      	subs	r3, #5
 8005a84:	221f      	movs	r2, #31
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43da      	mvns	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	400a      	ands	r2, r1
 8005a92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	3b05      	subs	r3, #5
 8005aae:	fa00 f203 	lsl.w	r2, r0, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8005aba:	e04c      	b.n	8005b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	d824      	bhi.n	8005b0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3b23      	subs	r3, #35	; 0x23
 8005ad6:	221f      	movs	r2, #31
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	43da      	mvns	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	400a      	ands	r2, r1
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4618      	mov	r0, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	3b23      	subs	r3, #35	; 0x23
 8005b00:	fa00 f203 	lsl.w	r2, r0, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b0c:	e023      	b.n	8005b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3b41      	subs	r3, #65	; 0x41
 8005b20:	221f      	movs	r2, #31
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43da      	mvns	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	400a      	ands	r2, r1
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	3b41      	subs	r3, #65	; 0x41
 8005b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b56:	4b29      	ldr	r3, [pc, #164]	; (8005bfc <HAL_ADC_ConfigChannel+0x250>)
 8005b58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <HAL_ADC_ConfigChannel+0x254>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10f      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x1d8>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b12      	cmp	r3, #18
 8005b6a:	d10b      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <HAL_ADC_ConfigChannel+0x254>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d12b      	bne.n	8005be6 <HAL_ADC_ConfigChannel+0x23a>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <HAL_ADC_ConfigChannel+0x258>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <HAL_ADC_ConfigChannel+0x1f4>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b11      	cmp	r3, #17
 8005b9e:	d122      	bne.n	8005be6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a11      	ldr	r2, [pc, #68]	; (8005c04 <HAL_ADC_ConfigChannel+0x258>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d111      	bne.n	8005be6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <HAL_ADC_ConfigChannel+0x25c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a11      	ldr	r2, [pc, #68]	; (8005c0c <HAL_ADC_ConfigChannel+0x260>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	0c9a      	lsrs	r2, r3, #18
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005bd8:	e002      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f9      	bne.n	8005bda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	40012300 	.word	0x40012300
 8005c00:	40012000 	.word	0x40012000
 8005c04:	10000012 	.word	0x10000012
 8005c08:	2000027c 	.word	0x2000027c
 8005c0c:	431bde83 	.word	0x431bde83

08005c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c18:	4b79      	ldr	r3, [pc, #484]	; (8005e00 <ADC_Init+0x1f0>)
 8005c1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	021a      	lsls	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6899      	ldr	r1, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	4a58      	ldr	r2, [pc, #352]	; (8005e04 <ADC_Init+0x1f4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d022      	beq.n	8005cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6899      	ldr	r1, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	e00f      	b.n	8005d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0202 	bic.w	r2, r2, #2
 8005d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6899      	ldr	r1, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	7e1b      	ldrb	r3, [r3, #24]
 8005d28:	005a      	lsls	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01b      	beq.n	8005d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	3b01      	subs	r3, #1
 8005d68:	035a      	lsls	r2, r3, #13
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	e007      	b.n	8005d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	051a      	lsls	r2, r3, #20
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6899      	ldr	r1, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dc6:	025a      	lsls	r2, r3, #9
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6899      	ldr	r1, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	029a      	lsls	r2, r3, #10
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	609a      	str	r2, [r3, #8]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40012300 	.word	0x40012300
 8005e04:	0f000001 	.word	0x0f000001

08005e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <__NVIC_SetPriorityGrouping+0x44>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e24:	4013      	ands	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e3a:	4a04      	ldr	r2, [pc, #16]	; (8005e4c <__NVIC_SetPriorityGrouping+0x44>)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	60d3      	str	r3, [r2, #12]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	e000ed00 	.word	0xe000ed00

08005e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e54:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <__NVIC_GetPriorityGrouping+0x18>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	f003 0307 	and.w	r3, r3, #7
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	e000ed00 	.word	0xe000ed00

08005e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	db0b      	blt.n	8005e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	f003 021f 	and.w	r2, r3, #31
 8005e84:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <__NVIC_EnableIRQ+0x38>)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	e000e100 	.word	0xe000e100

08005ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	db0a      	blt.n	8005ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	490c      	ldr	r1, [pc, #48]	; (8005ef4 <__NVIC_SetPriority+0x4c>)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	0112      	lsls	r2, r2, #4
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	440b      	add	r3, r1
 8005ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ed0:	e00a      	b.n	8005ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	4908      	ldr	r1, [pc, #32]	; (8005ef8 <__NVIC_SetPriority+0x50>)
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	3b04      	subs	r3, #4
 8005ee0:	0112      	lsls	r2, r2, #4
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	761a      	strb	r2, [r3, #24]
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	e000e100 	.word	0xe000e100
 8005ef8:	e000ed00 	.word	0xe000ed00

08005efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f1c3 0307 	rsb	r3, r3, #7
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	bf28      	it	cs
 8005f1a:	2304      	movcs	r3, #4
 8005f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3304      	adds	r3, #4
 8005f22:	2b06      	cmp	r3, #6
 8005f24:	d902      	bls.n	8005f2c <NVIC_EncodePriority+0x30>
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	3b03      	subs	r3, #3
 8005f2a:	e000      	b.n	8005f2e <NVIC_EncodePriority+0x32>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f30:	f04f 32ff 	mov.w	r2, #4294967295
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43da      	mvns	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	401a      	ands	r2, r3
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f44:	f04f 31ff 	mov.w	r1, #4294967295
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4e:	43d9      	mvns	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f54:	4313      	orrs	r3, r2
         );
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3724      	adds	r7, #36	; 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff ff4c 	bl	8005e08 <__NVIC_SetPriorityGrouping>
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f8a:	f7ff ff61 	bl	8005e50 <__NVIC_GetPriorityGrouping>
 8005f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	6978      	ldr	r0, [r7, #20]
 8005f96:	f7ff ffb1 	bl	8005efc <NVIC_EncodePriority>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff ff80 	bl	8005ea8 <__NVIC_SetPriority>
}
 8005fa8:	bf00      	nop
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff ff54 	bl	8005e6c <__NVIC_EnableIRQ>
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	e165      	b.n	80062b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fe8:	2201      	movs	r2, #1
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	429a      	cmp	r2, r3
 8006002:	f040 8154 	bne.w	80062ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d00b      	beq.n	8006026 <HAL_GPIO_Init+0x5a>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d007      	beq.n	8006026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800601a:	2b11      	cmp	r3, #17
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b12      	cmp	r3, #18
 8006024:	d130      	bne.n	8006088 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	2203      	movs	r2, #3
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4313      	orrs	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800605c:	2201      	movs	r2, #1
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4013      	ands	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	f003 0201 	and.w	r2, r3, #1
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4313      	orrs	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	2203      	movs	r2, #3
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d003      	beq.n	80060c8 <HAL_GPIO_Init+0xfc>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b12      	cmp	r3, #18
 80060c6:	d123      	bne.n	8006110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	08da      	lsrs	r2, r3, #3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3208      	adds	r2, #8
 80060d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	220f      	movs	r2, #15
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	08da      	lsrs	r2, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3208      	adds	r2, #8
 800610a:	69b9      	ldr	r1, [r7, #24]
 800610c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2203      	movs	r2, #3
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 0203 	and.w	r2, r3, #3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80ae 	beq.w	80062ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	4b5c      	ldr	r3, [pc, #368]	; (80062c8 <HAL_GPIO_Init+0x2fc>)
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	4a5b      	ldr	r2, [pc, #364]	; (80062c8 <HAL_GPIO_Init+0x2fc>)
 800615c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006160:	6453      	str	r3, [r2, #68]	; 0x44
 8006162:	4b59      	ldr	r3, [pc, #356]	; (80062c8 <HAL_GPIO_Init+0x2fc>)
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800616e:	4a57      	ldr	r2, [pc, #348]	; (80062cc <HAL_GPIO_Init+0x300>)
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	3302      	adds	r3, #2
 8006176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	220f      	movs	r2, #15
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4013      	ands	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a4e      	ldr	r2, [pc, #312]	; (80062d0 <HAL_GPIO_Init+0x304>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d025      	beq.n	80061e6 <HAL_GPIO_Init+0x21a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a4d      	ldr	r2, [pc, #308]	; (80062d4 <HAL_GPIO_Init+0x308>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01f      	beq.n	80061e2 <HAL_GPIO_Init+0x216>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a4c      	ldr	r2, [pc, #304]	; (80062d8 <HAL_GPIO_Init+0x30c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d019      	beq.n	80061de <HAL_GPIO_Init+0x212>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a4b      	ldr	r2, [pc, #300]	; (80062dc <HAL_GPIO_Init+0x310>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_GPIO_Init+0x20e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a4a      	ldr	r2, [pc, #296]	; (80062e0 <HAL_GPIO_Init+0x314>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00d      	beq.n	80061d6 <HAL_GPIO_Init+0x20a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a49      	ldr	r2, [pc, #292]	; (80062e4 <HAL_GPIO_Init+0x318>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <HAL_GPIO_Init+0x206>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a48      	ldr	r2, [pc, #288]	; (80062e8 <HAL_GPIO_Init+0x31c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_GPIO_Init+0x202>
 80061ca:	2306      	movs	r3, #6
 80061cc:	e00c      	b.n	80061e8 <HAL_GPIO_Init+0x21c>
 80061ce:	2307      	movs	r3, #7
 80061d0:	e00a      	b.n	80061e8 <HAL_GPIO_Init+0x21c>
 80061d2:	2305      	movs	r3, #5
 80061d4:	e008      	b.n	80061e8 <HAL_GPIO_Init+0x21c>
 80061d6:	2304      	movs	r3, #4
 80061d8:	e006      	b.n	80061e8 <HAL_GPIO_Init+0x21c>
 80061da:	2303      	movs	r3, #3
 80061dc:	e004      	b.n	80061e8 <HAL_GPIO_Init+0x21c>
 80061de:	2302      	movs	r3, #2
 80061e0:	e002      	b.n	80061e8 <HAL_GPIO_Init+0x21c>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <HAL_GPIO_Init+0x21c>
 80061e6:	2300      	movs	r3, #0
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	f002 0203 	and.w	r2, r2, #3
 80061ee:	0092      	lsls	r2, r2, #2
 80061f0:	4093      	lsls	r3, r2
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061f8:	4934      	ldr	r1, [pc, #208]	; (80062cc <HAL_GPIO_Init+0x300>)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	089b      	lsrs	r3, r3, #2
 80061fe:	3302      	adds	r3, #2
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006206:	4b39      	ldr	r3, [pc, #228]	; (80062ec <HAL_GPIO_Init+0x320>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	43db      	mvns	r3, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4013      	ands	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800622a:	4a30      	ldr	r2, [pc, #192]	; (80062ec <HAL_GPIO_Init+0x320>)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006230:	4b2e      	ldr	r3, [pc, #184]	; (80062ec <HAL_GPIO_Init+0x320>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006254:	4a25      	ldr	r2, [pc, #148]	; (80062ec <HAL_GPIO_Init+0x320>)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800625a:	4b24      	ldr	r3, [pc, #144]	; (80062ec <HAL_GPIO_Init+0x320>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	43db      	mvns	r3, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	4013      	ands	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800627e:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <HAL_GPIO_Init+0x320>)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <HAL_GPIO_Init+0x320>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	43db      	mvns	r3, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062a8:	4a10      	ldr	r2, [pc, #64]	; (80062ec <HAL_GPIO_Init+0x320>)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	3301      	adds	r3, #1
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b0f      	cmp	r3, #15
 80062b8:	f67f ae96 	bls.w	8005fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062bc:	bf00      	nop
 80062be:	3724      	adds	r7, #36	; 0x24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40013800 	.word	0x40013800
 80062d0:	40020000 	.word	0x40020000
 80062d4:	40020400 	.word	0x40020400
 80062d8:	40020800 	.word	0x40020800
 80062dc:	40020c00 	.word	0x40020c00
 80062e0:	40021000 	.word	0x40021000
 80062e4:	40021400 	.word	0x40021400
 80062e8:	40021800 	.word	0x40021800
 80062ec:	40013c00 	.word	0x40013c00

080062f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	887b      	ldrh	r3, [r7, #2]
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	e001      	b.n	8006312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]
 800632c:	4613      	mov	r3, r2
 800632e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006330:	787b      	ldrb	r3, [r7, #1]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006336:	887a      	ldrh	r2, [r7, #2]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800633c:	e003      	b.n	8006346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800633e:	887b      	ldrh	r3, [r7, #2]
 8006340:	041a      	lsls	r2, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	619a      	str	r2, [r3, #24]
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e11f      	b.n	80065a6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fe fd8c 	bl	8004e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063b8:	f002 fa90 	bl	80088dc <HAL_RCC_GetPCLK1Freq>
 80063bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4a7b      	ldr	r2, [pc, #492]	; (80065b0 <HAL_I2C_Init+0x25c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d807      	bhi.n	80063d8 <HAL_I2C_Init+0x84>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4a7a      	ldr	r2, [pc, #488]	; (80065b4 <HAL_I2C_Init+0x260>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	bf94      	ite	ls
 80063d0:	2301      	movls	r3, #1
 80063d2:	2300      	movhi	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e006      	b.n	80063e6 <HAL_I2C_Init+0x92>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a77      	ldr	r2, [pc, #476]	; (80065b8 <HAL_I2C_Init+0x264>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	bf94      	ite	ls
 80063e0:	2301      	movls	r3, #1
 80063e2:	2300      	movhi	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e0db      	b.n	80065a6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a72      	ldr	r2, [pc, #456]	; (80065bc <HAL_I2C_Init+0x268>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0c9b      	lsrs	r3, r3, #18
 80063f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4a64      	ldr	r2, [pc, #400]	; (80065b0 <HAL_I2C_Init+0x25c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d802      	bhi.n	8006428 <HAL_I2C_Init+0xd4>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	3301      	adds	r3, #1
 8006426:	e009      	b.n	800643c <HAL_I2C_Init+0xe8>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	4a63      	ldr	r2, [pc, #396]	; (80065c0 <HAL_I2C_Init+0x26c>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	099b      	lsrs	r3, r3, #6
 800643a:	3301      	adds	r3, #1
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	430b      	orrs	r3, r1
 8006442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800644e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4956      	ldr	r1, [pc, #344]	; (80065b0 <HAL_I2C_Init+0x25c>)
 8006458:	428b      	cmp	r3, r1
 800645a:	d80d      	bhi.n	8006478 <HAL_I2C_Init+0x124>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1e59      	subs	r1, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	fbb1 f3f3 	udiv	r3, r1, r3
 800646a:	3301      	adds	r3, #1
 800646c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006470:	2b04      	cmp	r3, #4
 8006472:	bf38      	it	cc
 8006474:	2304      	movcc	r3, #4
 8006476:	e04f      	b.n	8006518 <HAL_I2C_Init+0x1c4>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d111      	bne.n	80064a4 <HAL_I2C_Init+0x150>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1e58      	subs	r0, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6859      	ldr	r1, [r3, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	440b      	add	r3, r1
 800648e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006492:	3301      	adds	r3, #1
 8006494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e012      	b.n	80064ca <HAL_I2C_Init+0x176>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	1e58      	subs	r0, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6859      	ldr	r1, [r3, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	0099      	lsls	r1, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <HAL_I2C_Init+0x17e>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e022      	b.n	8006518 <HAL_I2C_Init+0x1c4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10e      	bne.n	80064f8 <HAL_I2C_Init+0x1a4>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1e58      	subs	r0, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	440b      	add	r3, r1
 80064e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ec:	3301      	adds	r3, #1
 80064ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f6:	e00f      	b.n	8006518 <HAL_I2C_Init+0x1c4>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	1e58      	subs	r0, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6859      	ldr	r1, [r3, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	0099      	lsls	r1, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	fbb0 f3f3 	udiv	r3, r0, r3
 800650e:	3301      	adds	r3, #1
 8006510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	6809      	ldr	r1, [r1, #0]
 800651c:	4313      	orrs	r3, r2
 800651e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69da      	ldr	r2, [r3, #28]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006546:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6911      	ldr	r1, [r2, #16]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	68d2      	ldr	r2, [r2, #12]
 8006552:	4311      	orrs	r1, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	430b      	orrs	r3, r1
 800655a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695a      	ldr	r2, [r3, #20]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	000186a0 	.word	0x000186a0
 80065b4:	001e847f 	.word	0x001e847f
 80065b8:	003d08ff 	.word	0x003d08ff
 80065bc:	431bde83 	.word	0x431bde83
 80065c0:	10624dd3 	.word	0x10624dd3

080065c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	817b      	strh	r3, [r7, #10]
 80065d6:	460b      	mov	r3, r1
 80065d8:	813b      	strh	r3, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065de:	f7ff f81b 	bl	8005618 <HAL_GetTick>
 80065e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	f040 80d9 	bne.w	80067a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	2319      	movs	r3, #25
 80065f8:	2201      	movs	r2, #1
 80065fa:	496d      	ldr	r1, [pc, #436]	; (80067b0 <HAL_I2C_Mem_Write+0x1ec>)
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fc7f 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006608:	2302      	movs	r3, #2
 800660a:	e0cc      	b.n	80067a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_I2C_Mem_Write+0x56>
 8006616:	2302      	movs	r3, #2
 8006618:	e0c5      	b.n	80067a6 <HAL_I2C_Mem_Write+0x1e2>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d007      	beq.n	8006640 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800664e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2221      	movs	r2, #33	; 0x21
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2240      	movs	r2, #64	; 0x40
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a4d      	ldr	r2, [pc, #308]	; (80067b4 <HAL_I2C_Mem_Write+0x1f0>)
 8006680:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006682:	88f8      	ldrh	r0, [r7, #6]
 8006684:	893a      	ldrh	r2, [r7, #8]
 8006686:	8979      	ldrh	r1, [r7, #10]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	4603      	mov	r3, r0
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fab6 	bl	8006c04 <I2C_RequestMemoryWrite>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d052      	beq.n	8006744 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e081      	b.n	80067a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fd00 	bl	80070ac <I2C_WaitOnTXEFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d107      	bne.n	80066ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e06b      	b.n	80067a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d11b      	bne.n	8006744 <HAL_I2C_Mem_Write+0x180>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	d017      	beq.n	8006744 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1aa      	bne.n	80066a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fcec 	bl	800712e <I2C_WaitOnBTFFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00d      	beq.n	8006778 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	2b04      	cmp	r3, #4
 8006762:	d107      	bne.n	8006774 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006772:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e016      	b.n	80067a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e000      	b.n	80067a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	00100002 	.word	0x00100002
 80067b4:	ffff0000 	.word	0xffff0000

080067b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08c      	sub	sp, #48	; 0x30
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	4608      	mov	r0, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	817b      	strh	r3, [r7, #10]
 80067ca:	460b      	mov	r3, r1
 80067cc:	813b      	strh	r3, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067d2:	f7fe ff21 	bl	8005618 <HAL_GetTick>
 80067d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	f040 8208 	bne.w	8006bf6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	2319      	movs	r3, #25
 80067ec:	2201      	movs	r2, #1
 80067ee:	497b      	ldr	r1, [pc, #492]	; (80069dc <HAL_I2C_Mem_Read+0x224>)
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fb85 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
 80067fe:	e1fb      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_I2C_Mem_Read+0x56>
 800680a:	2302      	movs	r3, #2
 800680c:	e1f4      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b01      	cmp	r3, #1
 8006822:	d007      	beq.n	8006834 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006842:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2222      	movs	r2, #34	; 0x22
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2240      	movs	r2, #64	; 0x40
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006864:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a5b      	ldr	r2, [pc, #364]	; (80069e0 <HAL_I2C_Mem_Read+0x228>)
 8006874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006876:	88f8      	ldrh	r0, [r7, #6]
 8006878:	893a      	ldrh	r2, [r7, #8]
 800687a:	8979      	ldrh	r1, [r7, #10]
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4603      	mov	r3, r0
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fa52 	bl	8006d30 <I2C_RequestMemoryRead>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e1b0      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d113      	bne.n	80068c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689e:	2300      	movs	r3, #0
 80068a0:	623b      	str	r3, [r7, #32]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	623b      	str	r3, [r7, #32]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e184      	b.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d11b      	bne.n	8006906 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	e164      	b.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690a:	2b02      	cmp	r3, #2
 800690c:	d11b      	bne.n	8006946 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800691c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800692c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	e144      	b.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800695c:	e138      	b.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006962:	2b03      	cmp	r3, #3
 8006964:	f200 80f1 	bhi.w	8006b4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696c:	2b01      	cmp	r3, #1
 800696e:	d123      	bne.n	80069b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fc1b 	bl	80071b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e139      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069b6:	e10b      	b.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d14e      	bne.n	8006a5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	2200      	movs	r2, #0
 80069c8:	4906      	ldr	r1, [pc, #24]	; (80069e4 <HAL_I2C_Mem_Read+0x22c>)
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fa98 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d008      	beq.n	80069e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e10e      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
 80069da:	bf00      	nop
 80069dc:	00100002 	.word	0x00100002
 80069e0:	ffff0000 	.word	0xffff0000
 80069e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a5c:	e0b8      	b.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	2200      	movs	r2, #0
 8006a66:	4966      	ldr	r1, [pc, #408]	; (8006c00 <HAL_I2C_Mem_Read+0x448>)
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fa49 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0bf      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	494f      	ldr	r1, [pc, #316]	; (8006c00 <HAL_I2C_Mem_Read+0x448>)
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fa1b 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e091      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b48:	e042      	b.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fb2e 	bl	80071b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e04c      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d118      	bne.n	8006bd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f aec2 	bne.w	800695e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e000      	b.n	8006bf8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006bf6:	2302      	movs	r3, #2
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3728      	adds	r7, #40	; 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	00010004 	.word	0x00010004

08006c04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	817b      	strh	r3, [r7, #10]
 8006c16:	460b      	mov	r3, r1
 8006c18:	813b      	strh	r3, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 f960 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00d      	beq.n	8006c62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c54:	d103      	bne.n	8006c5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e05f      	b.n	8006d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c62:	897b      	ldrh	r3, [r7, #10]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	6a3a      	ldr	r2, [r7, #32]
 8006c76:	492d      	ldr	r1, [pc, #180]	; (8006d2c <I2C_RequestMemoryWrite+0x128>)
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f998 	bl	8006fae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e04c      	b.n	8006d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca0:	6a39      	ldr	r1, [r7, #32]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fa02 	bl	80070ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d107      	bne.n	8006cc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e02b      	b.n	8006d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d105      	bne.n	8006cdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd0:	893b      	ldrh	r3, [r7, #8]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	611a      	str	r2, [r3, #16]
 8006cda:	e021      	b.n	8006d20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cdc:	893b      	ldrh	r3, [r7, #8]
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cec:	6a39      	ldr	r1, [r7, #32]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f9dc 	bl	80070ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00d      	beq.n	8006d16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d107      	bne.n	8006d12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e005      	b.n	8006d22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d16:	893b      	ldrh	r3, [r7, #8]
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	00010002 	.word	0x00010002

08006d30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	817b      	strh	r3, [r7, #10]
 8006d42:	460b      	mov	r3, r1
 8006d44:	813b      	strh	r3, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f8c2 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00d      	beq.n	8006d9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d90:	d103      	bne.n	8006d9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0aa      	b.n	8006ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	6a3a      	ldr	r2, [r7, #32]
 8006db2:	4952      	ldr	r1, [pc, #328]	; (8006efc <I2C_RequestMemoryRead+0x1cc>)
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f8fa 	bl	8006fae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e097      	b.n	8006ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ddc:	6a39      	ldr	r1, [r7, #32]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f964 	bl	80070ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d107      	bne.n	8006e02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e076      	b.n	8006ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e0c:	893b      	ldrh	r3, [r7, #8]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	611a      	str	r2, [r3, #16]
 8006e16:	e021      	b.n	8006e5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e18:	893b      	ldrh	r3, [r7, #8]
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e28:	6a39      	ldr	r1, [r7, #32]
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 f93e 	bl	80070ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00d      	beq.n	8006e52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d107      	bne.n	8006e4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e050      	b.n	8006ef4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e52:	893b      	ldrh	r3, [r7, #8]
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5e:	6a39      	ldr	r1, [r7, #32]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f923 	bl	80070ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00d      	beq.n	8006e88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d107      	bne.n	8006e84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e035      	b.n	8006ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f82b 	bl	8006f00 <I2C_WaitOnFlagUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebe:	d103      	bne.n	8006ec8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e013      	b.n	8006ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ecc:	897b      	ldrh	r3, [r7, #10]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	6a3a      	ldr	r2, [r7, #32]
 8006ee0:	4906      	ldr	r1, [pc, #24]	; (8006efc <I2C_RequestMemoryRead+0x1cc>)
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f863 	bl	8006fae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	00010002 	.word	0x00010002

08006f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f10:	e025      	b.n	8006f5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d021      	beq.n	8006f5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fe fb7d 	bl	8005618 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d116      	bne.n	8006f5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f043 0220 	orr.w	r2, r3, #32
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e023      	b.n	8006fa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	0c1b      	lsrs	r3, r3, #16
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d10d      	bne.n	8006f84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	43da      	mvns	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4013      	ands	r3, r2
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	e00c      	b.n	8006f9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	43da      	mvns	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf0c      	ite	eq
 8006f96:	2301      	moveq	r3, #1
 8006f98:	2300      	movne	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d0b6      	beq.n	8006f12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fbc:	e051      	b.n	8007062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fcc:	d123      	bne.n	8007016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fe6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f043 0204 	orr.w	r2, r3, #4
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e046      	b.n	80070a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d021      	beq.n	8007062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fe fafb 	bl	8005618 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d116      	bne.n	8007062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f043 0220 	orr.w	r2, r3, #32
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e020      	b.n	80070a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	0c1b      	lsrs	r3, r3, #16
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10c      	bne.n	8007086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	43da      	mvns	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4013      	ands	r3, r2
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	bf14      	ite	ne
 800707e:	2301      	movne	r3, #1
 8007080:	2300      	moveq	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	e00b      	b.n	800709e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	43da      	mvns	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4013      	ands	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf14      	ite	ne
 8007098:	2301      	movne	r3, #1
 800709a:	2300      	moveq	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d18d      	bne.n	8006fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070b8:	e02d      	b.n	8007116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f8ce 	bl	800725c <I2C_IsAcknowledgeFailed>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e02d      	b.n	8007126 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d0:	d021      	beq.n	8007116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d2:	f7fe faa1 	bl	8005618 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d302      	bcc.n	80070e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d116      	bne.n	8007116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	f043 0220 	orr.w	r2, r3, #32
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e007      	b.n	8007126 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007120:	2b80      	cmp	r3, #128	; 0x80
 8007122:	d1ca      	bne.n	80070ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800713a:	e02d      	b.n	8007198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f88d 	bl	800725c <I2C_IsAcknowledgeFailed>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e02d      	b.n	80071a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d021      	beq.n	8007198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007154:	f7fe fa60 	bl	8005618 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	d302      	bcc.n	800716a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d116      	bne.n	8007198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e007      	b.n	80071a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d1ca      	bne.n	800713c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071bc:	e042      	b.n	8007244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d119      	bne.n	8007200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0210 	mvn.w	r2, #16
 80071d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e029      	b.n	8007254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007200:	f7fe fa0a 	bl	8005618 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	d302      	bcc.n	8007216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d116      	bne.n	8007244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	f043 0220 	orr.w	r2, r3, #32
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e007      	b.n	8007254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d1b5      	bne.n	80071be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800726e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007272:	d11b      	bne.n	80072ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800727c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	f043 0204 	orr.w	r2, r3, #4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072bc:	b08f      	sub	sp, #60	; 0x3c
 80072be:	af0a      	add	r7, sp, #40	; 0x28
 80072c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e116      	b.n	80074fa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f00a f88a 	bl	8011400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2203      	movs	r2, #3
 80072f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4618      	mov	r0, r3
 800730c:	f003 ffe1 	bl	800b2d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	603b      	str	r3, [r7, #0]
 8007316:	687e      	ldr	r6, [r7, #4]
 8007318:	466d      	mov	r5, sp
 800731a:	f106 0410 	add.w	r4, r6, #16
 800731e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007326:	e894 0003 	ldmia.w	r4, {r0, r1}
 800732a:	e885 0003 	stmia.w	r5, {r0, r1}
 800732e:	1d33      	adds	r3, r6, #4
 8007330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007332:	6838      	ldr	r0, [r7, #0]
 8007334:	f003 feb8 	bl	800b0a8 <USB_CoreInit>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e0d7      	b.n	80074fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2100      	movs	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f003 ffcf 	bl	800b2f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
 800735a:	e04a      	b.n	80073f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800735c:	7bfa      	ldrb	r2, [r7, #15]
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	333d      	adds	r3, #61	; 0x3d
 800736c:	2201      	movs	r2, #1
 800736e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	333c      	adds	r3, #60	; 0x3c
 8007380:	7bfa      	ldrb	r2, [r7, #15]
 8007382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	b298      	uxth	r0, r3
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	4613      	mov	r3, r2
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	1a9b      	subs	r3, r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	440b      	add	r3, r1
 8007396:	3342      	adds	r3, #66	; 0x42
 8007398:	4602      	mov	r2, r0
 800739a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	333f      	adds	r3, #63	; 0x3f
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	3344      	adds	r3, #68	; 0x44
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80073c4:	7bfa      	ldrb	r2, [r7, #15]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	3348      	adds	r3, #72	; 0x48
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073d8:	7bfa      	ldrb	r2, [r7, #15]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	3350      	adds	r3, #80	; 0x50
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	3301      	adds	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
 80073f2:	7bfa      	ldrb	r2, [r7, #15]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d3af      	bcc.n	800735c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
 8007400:	e044      	b.n	800748c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007414:	2200      	movs	r2, #0
 8007416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007418:	7bfa      	ldrb	r2, [r7, #15]
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800742a:	7bfa      	ldrb	r2, [r7, #15]
 800742c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800742e:	7bfa      	ldrb	r2, [r7, #15]
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007444:	7bfa      	ldrb	r2, [r7, #15]
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800745a:	7bfa      	ldrb	r2, [r7, #15]
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	440b      	add	r3, r1
 8007468:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007470:	7bfa      	ldrb	r2, [r7, #15]
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	3301      	adds	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
 800748c:	7bfa      	ldrb	r2, [r7, #15]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d3b5      	bcc.n	8007402 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	687e      	ldr	r6, [r7, #4]
 800749e:	466d      	mov	r5, sp
 80074a0:	f106 0410 	add.w	r4, r6, #16
 80074a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80074b4:	1d33      	adds	r3, r6, #4
 80074b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074b8:	6838      	ldr	r0, [r7, #0]
 80074ba:	f003 ff45 	bl	800b348 <USB_DevInit>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e014      	b.n	80074fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d102      	bne.n	80074ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 f891 	bl	8008610 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f004 ff80 	bl	800c3f8 <USB_DevDisconnect>

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007502 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <HAL_PCD_Start+0x1c>
 800751a:	2302      	movs	r3, #2
 800751c:	e020      	b.n	8007560 <HAL_PCD_Start+0x5e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	2b01      	cmp	r3, #1
 800752c:	d109      	bne.n	8007542 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007532:	2b01      	cmp	r3, #1
 8007534:	d005      	beq.n	8007542 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f003 feb2 	bl	800b2b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f004 ff30 	bl	800c3b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007568:	b590      	push	{r4, r7, lr}
 800756a:	b08d      	sub	sp, #52	; 0x34
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f004 ffee 	bl	800c560 <USB_GetMode>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 83ca 	bne.w	8007d20 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f004 ff52 	bl	800c43a <USB_ReadInterrupts>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 83c0 	beq.w	8007d1e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f004 ff49 	bl	800c43a <USB_ReadInterrupts>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d107      	bne.n	80075c2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695a      	ldr	r2, [r3, #20]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f002 0202 	and.w	r2, r2, #2
 80075c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f004 ff37 	bl	800c43a <USB_ReadInterrupts>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b10      	cmp	r3, #16
 80075d4:	d161      	bne.n	800769a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0210 	bic.w	r2, r2, #16
 80075e4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f003 020f 	and.w	r2, r3, #15
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	3304      	adds	r3, #4
 8007604:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	0c5b      	lsrs	r3, r3, #17
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	2b02      	cmp	r3, #2
 8007610:	d124      	bne.n	800765c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007618:	4013      	ands	r3, r2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d035      	beq.n	800768a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	091b      	lsrs	r3, r3, #4
 8007626:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6a38      	ldr	r0, [r7, #32]
 8007632:	f004 fd9d 	bl	800c170 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	091b      	lsrs	r3, r3, #4
 800763e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007642:	441a      	add	r2, r3
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	699a      	ldr	r2, [r3, #24]
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	091b      	lsrs	r3, r3, #4
 8007650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007654:	441a      	add	r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	619a      	str	r2, [r3, #24]
 800765a:	e016      	b.n	800768a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	0c5b      	lsrs	r3, r3, #17
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	2b06      	cmp	r3, #6
 8007666:	d110      	bne.n	800768a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800766e:	2208      	movs	r2, #8
 8007670:	4619      	mov	r1, r3
 8007672:	6a38      	ldr	r0, [r7, #32]
 8007674:	f004 fd7c 	bl	800c170 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	091b      	lsrs	r3, r3, #4
 8007680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007684:	441a      	add	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0210 	orr.w	r2, r2, #16
 8007698:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f004 fecb 	bl	800c43a <USB_ReadInterrupts>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076ae:	d16e      	bne.n	800778e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f004 fed1 	bl	800c460 <USB_ReadDevAllOutEpInterrupt>
 80076be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80076c0:	e062      	b.n	8007788 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d057      	beq.n	800777c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	4611      	mov	r1, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f004 fef6 	bl	800c4c8 <USB_ReadDevOutEPInterrupt>
 80076dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00c      	beq.n	8007702 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	461a      	mov	r2, r3
 80076f6:	2301      	movs	r3, #1
 80076f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80076fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fddd 	bl	80082bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00c      	beq.n	8007726 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007718:	461a      	mov	r2, r3
 800771a:	2308      	movs	r3, #8
 800771c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800771e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fed7 	bl	80084d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	461a      	mov	r2, r3
 800773e:	2310      	movs	r3, #16
 8007740:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d008      	beq.n	800775e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007758:	461a      	mov	r2, r3
 800775a:	2320      	movs	r3, #32
 800775c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d009      	beq.n	800777c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007774:	461a      	mov	r2, r3
 8007776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800777a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	3301      	adds	r3, #1
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	d199      	bne.n	80076c2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f004 fe51 	bl	800c43a <USB_ReadInterrupts>
 8007798:	4603      	mov	r3, r0
 800779a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800779e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077a2:	f040 80c0 	bne.w	8007926 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f004 fe72 	bl	800c494 <USB_ReadDevAllInEpInterrupt>
 80077b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80077b6:	e0b2      	b.n	800791e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80a7 	beq.w	8007912 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f004 fe98 	bl	800c504 <USB_ReadDevInEPInterrupt>
 80077d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d057      	beq.n	8007890 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	2201      	movs	r2, #1
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	43db      	mvns	r3, r3
 80077fa:	69f9      	ldr	r1, [r7, #28]
 80077fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007800:	4013      	ands	r3, r2
 8007802:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	461a      	mov	r2, r3
 8007812:	2301      	movs	r3, #1
 8007814:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d132      	bne.n	8007884 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	3348      	adds	r3, #72	; 0x48
 800782e:	6819      	ldr	r1, [r3, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007834:	4613      	mov	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4403      	add	r3, r0
 800783e:	3344      	adds	r3, #68	; 0x44
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4419      	add	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007848:	4613      	mov	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4403      	add	r3, r0
 8007852:	3348      	adds	r3, #72	; 0x48
 8007854:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	d113      	bne.n	8007884 <HAL_PCD_IRQHandler+0x31c>
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007860:	4613      	mov	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	3350      	adds	r3, #80	; 0x50
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d108      	bne.n	8007884 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800787c:	461a      	mov	r2, r3
 800787e:	2101      	movs	r1, #1
 8007880:	f004 fea0 	bl	800c5c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	b2db      	uxtb	r3, r3
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f009 fe39 	bl	8011502 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	461a      	mov	r2, r3
 80078a8:	2308      	movs	r3, #8
 80078aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c2:	461a      	mov	r2, r3
 80078c4:	2310      	movs	r3, #16
 80078c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078de:	461a      	mov	r2, r3
 80078e0:	2340      	movs	r3, #64	; 0x40
 80078e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d008      	beq.n	8007900 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fa:	461a      	mov	r2, r3
 80078fc:	2302      	movs	r3, #2
 80078fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800790a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc48 	bl	80081a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	3301      	adds	r3, #1
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	2b00      	cmp	r3, #0
 8007922:	f47f af49 	bne.w	80077b8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f004 fd85 	bl	800c43a <USB_ReadInterrupts>
 8007930:	4603      	mov	r3, r0
 8007932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800793a:	d122      	bne.n	8007982 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007956:	2b01      	cmp	r3, #1
 8007958:	d108      	bne.n	800796c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007962:	2100      	movs	r1, #0
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f00a f81b 	bl	80119a0 <HAL_PCDEx_LPM_Callback>
 800796a:	e002      	b.n	8007972 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f009 fe3f 	bl	80115f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695a      	ldr	r2, [r3, #20]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f004 fd57 	bl	800c43a <USB_ReadInterrupts>
 800798c:	4603      	mov	r3, r0
 800798e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007996:	d112      	bne.n	80079be <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d102      	bne.n	80079ae <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f009 fdfb 	bl	80115a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695a      	ldr	r2, [r3, #20]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80079bc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f004 fd39 	bl	800c43a <USB_ReadInterrupts>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d2:	d121      	bne.n	8007a18 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695a      	ldr	r2, [r3, #20]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80079e2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d111      	bne.n	8007a12 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fc:	089b      	lsrs	r3, r3, #2
 80079fe:	f003 020f 	and.w	r2, r3, #15
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a08:	2101      	movs	r1, #1
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f009 ffc8 	bl	80119a0 <HAL_PCDEx_LPM_Callback>
 8007a10:	e002      	b.n	8007a18 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f009 fdc6 	bl	80115a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f004 fd0c 	bl	800c43a <USB_ReadInterrupts>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	f040 80c7 	bne.w	8007bbe <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2110      	movs	r1, #16
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f003 fdda 	bl	800b604 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a50:	2300      	movs	r3, #0
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a54:	e056      	b.n	8007b04 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	461a      	mov	r2, r3
 8007a64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a88:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007aa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007abc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007adc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007afc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	3301      	adds	r3, #1
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d3a3      	bcc.n	8007a56 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007b20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d016      	beq.n	8007b58 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b3a:	f043 030b 	orr.w	r3, r3, #11
 8007b3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b50:	f043 030b 	orr.w	r3, r3, #11
 8007b54:	6453      	str	r3, [r2, #68]	; 0x44
 8007b56:	e015      	b.n	8007b84 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007b6a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007b6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b7e:	f043 030b 	orr.w	r3, r3, #11
 8007b82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f004 fd0b 	bl	800c5c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695a      	ldr	r2, [r3, #20]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f004 fc39 	bl	800c43a <USB_ReadInterrupts>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd2:	d124      	bne.n	8007c1e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f004 fccf 	bl	800c57c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f003 fd6f 	bl	800b6c6 <USB_GetDevSpeed>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681c      	ldr	r4, [r3, #0]
 8007bf4:	f000 fe66 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 8007bf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	4620      	mov	r0, r4
 8007c04:	f003 fab2 	bl	800b16c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f009 fca2 	bl	8011552 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695a      	ldr	r2, [r3, #20]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f004 fc09 	bl	800c43a <USB_ReadInterrupts>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	d10a      	bne.n	8007c48 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f009 fc7f 	bl	8011536 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695a      	ldr	r2, [r3, #20]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f002 0208 	and.w	r2, r2, #8
 8007c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f004 fbf4 	bl	800c43a <USB_ReadInterrupts>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c5c:	d10f      	bne.n	8007c7e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f009 fce1 	bl	8011630 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f004 fbd9 	bl	800c43a <USB_ReadInterrupts>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c92:	d10f      	bne.n	8007cb4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f009 fcb4 	bl	801160c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f004 fbbe 	bl	800c43a <USB_ReadInterrupts>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc8:	d10a      	bne.n	8007ce0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f009 fcc2 	bl	8011654 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695a      	ldr	r2, [r3, #20]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f004 fba8 	bl	800c43a <USB_ReadInterrupts>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d115      	bne.n	8007d20 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f009 fcb2 	bl	8011670 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6859      	ldr	r1, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	e000      	b.n	8007d20 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007d1e:	bf00      	nop
    }
  }
}
 8007d20:	3734      	adds	r7, #52	; 0x34
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd90      	pop	{r4, r7, pc}

08007d26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_PCD_SetAddress+0x1a>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e013      	b.n	8007d68 <HAL_PCD_SetAddress+0x42>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	78fa      	ldrb	r2, [r7, #3]
 8007d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	4611      	mov	r1, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f004 fb06 	bl	800c36a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	70fb      	strb	r3, [r7, #3]
 8007d82:	460b      	mov	r3, r1
 8007d84:	803b      	strh	r3, [r7, #0]
 8007d86:	4613      	mov	r3, r2
 8007d88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da0f      	bge.n	8007db6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	f003 020f 	and.w	r2, r3, #15
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	3338      	adds	r3, #56	; 0x38
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	3304      	adds	r3, #4
 8007dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	705a      	strb	r2, [r3, #1]
 8007db4:	e00f      	b.n	8007dd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	f003 020f 	and.w	r2, r3, #15
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	1a9b      	subs	r3, r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	4413      	add	r3, r2
 8007dcc:	3304      	adds	r3, #4
 8007dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007de2:	883a      	ldrh	r2, [r7, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	78ba      	ldrb	r2, [r7, #2]
 8007dec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007e00:	78bb      	ldrb	r3, [r7, #2]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d102      	bne.n	8007e0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_PCD_EP_Open+0xaa>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e00e      	b.n	8007e38 <HAL_PCD_EP_Open+0xc8>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68f9      	ldr	r1, [r7, #12]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f003 fc71 	bl	800b710 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007e36:	7afb      	ldrb	r3, [r7, #11]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da0f      	bge.n	8007e74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	f003 020f 	and.w	r2, r3, #15
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	3338      	adds	r3, #56	; 0x38
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	4413      	add	r3, r2
 8007e68:	3304      	adds	r3, #4
 8007e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	705a      	strb	r2, [r3, #1]
 8007e72:	e00f      	b.n	8007e94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	f003 020f 	and.w	r2, r3, #15
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_PCD_EP_Close+0x6e>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e00e      	b.n	8007ecc <HAL_PCD_EP_Close+0x8c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f003 fcaf 	bl	800b820 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	f003 020f 	and.w	r2, r3, #15
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	3304      	adds	r3, #4
 8007efc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2200      	movs	r2, #0
 8007f14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f16:	7afb      	ldrb	r3, [r7, #11]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d102      	bne.n	8007f30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d109      	bne.n	8007f4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	6979      	ldr	r1, [r7, #20]
 8007f48:	f003 ff8a 	bl	800be60 <USB_EP0StartXfer>
 8007f4c:	e008      	b.n	8007f60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6979      	ldr	r1, [r7, #20]
 8007f5c:	f003 fd3c 	bl	800b9d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	f003 020f 	and.w	r2, r3, #15
 8007f7c:	6879      	ldr	r1, [r7, #4]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	1a9b      	subs	r3, r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	440b      	add	r3, r1
 8007f88:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007f8c:	681b      	ldr	r3, [r3, #0]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b086      	sub	sp, #24
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	3338      	adds	r3, #56	; 0x38
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fda:	7afb      	ldrb	r3, [r7, #11]
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d102      	bne.n	8007ff4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	6979      	ldr	r1, [r7, #20]
 800800c:	f003 ff28 	bl	800be60 <USB_EP0StartXfer>
 8008010:	e008      	b.n	8008024 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	f003 fcda 	bl	800b9d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	f003 020f 	and.w	r2, r3, #15
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d901      	bls.n	800804c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e050      	b.n	80080ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800804c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008050:	2b00      	cmp	r3, #0
 8008052:	da0f      	bge.n	8008074 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	f003 020f 	and.w	r2, r3, #15
 800805a:	4613      	mov	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	3338      	adds	r3, #56	; 0x38
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	4413      	add	r3, r2
 8008068:	3304      	adds	r3, #4
 800806a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	705a      	strb	r2, [r3, #1]
 8008072:	e00d      	b.n	8008090 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	4613      	mov	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	4413      	add	r3, r2
 8008086:	3304      	adds	r3, #4
 8008088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008096:	78fb      	ldrb	r3, [r7, #3]
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	b2da      	uxtb	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_PCD_EP_SetStall+0x82>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e01e      	b.n	80080ee <HAL_PCD_EP_SetStall+0xc0>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68f9      	ldr	r1, [r7, #12]
 80080be:	4618      	mov	r0, r3
 80080c0:	f004 f87f 	bl	800c1c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	b2d9      	uxtb	r1, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080de:	461a      	mov	r2, r3
 80080e0:	f004 fa70 	bl	800c5c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	f003 020f 	and.w	r2, r3, #15
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d901      	bls.n	8008114 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e042      	b.n	800819a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008118:	2b00      	cmp	r3, #0
 800811a:	da0f      	bge.n	800813c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	f003 020f 	and.w	r2, r3, #15
 8008122:	4613      	mov	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	3338      	adds	r3, #56	; 0x38
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4413      	add	r3, r2
 8008130:	3304      	adds	r3, #4
 8008132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	705a      	strb	r2, [r3, #1]
 800813a:	e00f      	b.n	800815c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	f003 020f 	and.w	r2, r3, #15
 8008142:	4613      	mov	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4413      	add	r3, r2
 8008152:	3304      	adds	r3, #4
 8008154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	b2da      	uxtb	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_PCD_EP_ClrStall+0x86>
 8008178:	2302      	movs	r3, #2
 800817a:	e00e      	b.n	800819a <HAL_PCD_EP_ClrStall+0xa4>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68f9      	ldr	r1, [r7, #12]
 800818a:	4618      	mov	r0, r3
 800818c:	f004 f887 	bl	800c29e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b08a      	sub	sp, #40	; 0x28
 80081a6:	af02      	add	r7, sp, #8
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4613      	mov	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	3338      	adds	r3, #56	; 0x38
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	3304      	adds	r3, #4
 80081c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699a      	ldr	r2, [r3, #24]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d901      	bls.n	80081da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e06c      	b.n	80082b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	695a      	ldr	r2, [r3, #20]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d902      	bls.n	80081f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	3303      	adds	r3, #3
 80081fa:	089b      	lsrs	r3, r3, #2
 80081fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081fe:	e02b      	b.n	8008258 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	695a      	ldr	r2, [r3, #20]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	429a      	cmp	r2, r3
 8008214:	d902      	bls.n	800821c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3303      	adds	r3, #3
 8008220:	089b      	lsrs	r3, r3, #2
 8008222:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	68d9      	ldr	r1, [r3, #12]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008234:	b2db      	uxtb	r3, r3
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4603      	mov	r3, r0
 800823a:	6978      	ldr	r0, [r7, #20]
 800823c:	f003 ff63 	bl	800c106 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	441a      	add	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	b29b      	uxth	r3, r3
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	429a      	cmp	r2, r3
 800826c:	d809      	bhi.n	8008282 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008276:	429a      	cmp	r2, r3
 8008278:	d203      	bcs.n	8008282 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1be      	bne.n	8008200 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	695a      	ldr	r2, [r3, #20]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	429a      	cmp	r2, r3
 800828c:	d811      	bhi.n	80082b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	f003 030f 	and.w	r3, r3, #15
 8008294:	2201      	movs	r2, #1
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	43db      	mvns	r3, r3
 80082a8:	6939      	ldr	r1, [r7, #16]
 80082aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ae:	4013      	ands	r3, r2
 80082b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	333c      	adds	r3, #60	; 0x3c
 80082d4:	3304      	adds	r3, #4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	f040 80a0 	bne.w	8008434 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d015      	beq.n	800832a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4a72      	ldr	r2, [pc, #456]	; (80084cc <PCD_EP_OutXfrComplete_int+0x210>)
 8008302:	4293      	cmp	r3, r2
 8008304:	f240 80dd 	bls.w	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 80d7 	beq.w	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	461a      	mov	r2, r3
 8008322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008326:	6093      	str	r3, [r2, #8]
 8008328:	e0cb      	b.n	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008340:	461a      	mov	r2, r3
 8008342:	2320      	movs	r3, #32
 8008344:	6093      	str	r3, [r2, #8]
 8008346:	e0bc      	b.n	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	f040 80b7 	bne.w	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a5d      	ldr	r2, [pc, #372]	; (80084cc <PCD_EP_OutXfrComplete_int+0x210>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d90f      	bls.n	800837c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008372:	461a      	mov	r2, r3
 8008374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008378:	6093      	str	r3, [r2, #8]
 800837a:	e0a2      	b.n	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800837c:	6879      	ldr	r1, [r7, #4]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	4613      	mov	r3, r2
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800838e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	0159      	lsls	r1, r3, #5
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	440b      	add	r3, r1
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80083a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	4613      	mov	r3, r2
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	1a9b      	subs	r3, r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4403      	add	r3, r0
 80083b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80083b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083ca:	6819      	ldr	r1, [r3, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4613      	mov	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4403      	add	r3, r0
 80083da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4419      	add	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	4613      	mov	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4403      	add	r3, r0
 80083f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d114      	bne.n	8008426 <PCD_EP_OutXfrComplete_int+0x16a>
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d108      	bne.n	8008426 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800841e:	461a      	mov	r2, r3
 8008420:	2101      	movs	r1, #1
 8008422:	f004 f8cf 	bl	800c5c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f009 f84d 	bl	80114cc <HAL_PCD_DataOutStageCallback>
 8008432:	e046      	b.n	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4a26      	ldr	r2, [pc, #152]	; (80084d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d124      	bne.n	8008486 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	461a      	mov	r2, r3
 8008454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008458:	6093      	str	r3, [r2, #8]
 800845a:	e032      	b.n	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d008      	beq.n	8008478 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008472:	461a      	mov	r2, r3
 8008474:	2320      	movs	r3, #32
 8008476:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f009 f824 	bl	80114cc <HAL_PCD_DataOutStageCallback>
 8008484:	e01d      	b.n	80084c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d114      	bne.n	80084b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4613      	mov	r3, r2
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	1a9b      	subs	r3, r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80084ae:	461a      	mov	r2, r3
 80084b0:	2100      	movs	r1, #0
 80084b2:	f004 f887 	bl	800c5c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f009 f805 	bl	80114cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	4f54300a 	.word	0x4f54300a
 80084d0:	4f54310a 	.word	0x4f54310a

080084d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	333c      	adds	r3, #60	; 0x3c
 80084ec:	3304      	adds	r3, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4a15      	ldr	r2, [pc, #84]	; (800855c <PCD_EP_OutSetupPacket_int+0x88>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d90e      	bls.n	8008528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008520:	461a      	mov	r2, r3
 8008522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f008 ffbd 	bl	80114a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4a0a      	ldr	r2, [pc, #40]	; (800855c <PCD_EP_OutSetupPacket_int+0x88>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d90c      	bls.n	8008550 <PCD_EP_OutSetupPacket_int+0x7c>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d108      	bne.n	8008550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008548:	461a      	mov	r2, r3
 800854a:	2101      	movs	r1, #1
 800854c:	f004 f83a 	bl	800c5c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	4f54300a 	.word	0x4f54300a

08008560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
 800856c:	4613      	mov	r3, r2
 800856e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d107      	bne.n	800858e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800857e:	883b      	ldrh	r3, [r7, #0]
 8008580:	0419      	lsls	r1, r3, #16
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	430a      	orrs	r2, r1
 800858a:	629a      	str	r2, [r3, #40]	; 0x28
 800858c:	e028      	b.n	80085e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4413      	add	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
 80085a0:	e00d      	b.n	80085be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	3340      	adds	r3, #64	; 0x40
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4413      	add	r3, r2
 80085b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	3301      	adds	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]
 80085be:	7bfa      	ldrb	r2, [r7, #15]
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d3ec      	bcc.n	80085a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80085c8:	883b      	ldrh	r3, [r7, #0]
 80085ca:	0418      	lsls	r0, r3, #16
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6819      	ldr	r1, [r3, #0]
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	4302      	orrs	r2, r0
 80085d8:	3340      	adds	r3, #64	; 0x40
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	887a      	ldrh	r2, [r7, #2]
 8008600:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008642:	f043 0303 	orr.w	r3, r3, #3
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008662:	2300      	movs	r3, #0
 8008664:	603b      	str	r3, [r7, #0]
 8008666:	4b20      	ldr	r3, [pc, #128]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	4a1f      	ldr	r2, [pc, #124]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800866c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008670:	6413      	str	r3, [r2, #64]	; 0x40
 8008672:	4b1d      	ldr	r3, [pc, #116]	; (80086e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800867e:	4b1b      	ldr	r3, [pc, #108]	; (80086ec <HAL_PWREx_EnableOverDrive+0x94>)
 8008680:	2201      	movs	r2, #1
 8008682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008684:	f7fc ffc8 	bl	8005618 <HAL_GetTick>
 8008688:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800868a:	e009      	b.n	80086a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800868c:	f7fc ffc4 	bl	8005618 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800869a:	d901      	bls.n	80086a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e01f      	b.n	80086e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80086a0:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ac:	d1ee      	bne.n	800868c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80086ae:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086b4:	f7fc ffb0 	bl	8005618 <HAL_GetTick>
 80086b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80086ba:	e009      	b.n	80086d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80086bc:	f7fc ffac 	bl	8005618 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086ca:	d901      	bls.n	80086d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e007      	b.n	80086e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086dc:	d1ee      	bne.n	80086bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40023800 	.word	0x40023800
 80086ec:	420e0040 	.word	0x420e0040
 80086f0:	40007000 	.word	0x40007000
 80086f4:	420e0044 	.word	0x420e0044

080086f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0cc      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800870c:	4b68      	ldr	r3, [pc, #416]	; (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d90c      	bls.n	8008734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800871a:	4b65      	ldr	r3, [pc, #404]	; (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008722:	4b63      	ldr	r3, [pc, #396]	; (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d001      	beq.n	8008734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e0b8      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d020      	beq.n	8008782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800874c:	4b59      	ldr	r3, [pc, #356]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	4a58      	ldr	r2, [pc, #352]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008764:	4b53      	ldr	r3, [pc, #332]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	4a52      	ldr	r2, [pc, #328]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800876a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800876e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008770:	4b50      	ldr	r3, [pc, #320]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	494d      	ldr	r1, [pc, #308]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800877e:	4313      	orrs	r3, r2
 8008780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d044      	beq.n	8008818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d107      	bne.n	80087a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008796:	4b47      	ldr	r3, [pc, #284]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d119      	bne.n	80087d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e07f      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d003      	beq.n	80087b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d107      	bne.n	80087c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b6:	4b3f      	ldr	r3, [pc, #252]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e06f      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c6:	4b3b      	ldr	r3, [pc, #236]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e067      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087d6:	4b37      	ldr	r3, [pc, #220]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f023 0203 	bic.w	r2, r3, #3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	4934      	ldr	r1, [pc, #208]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087e8:	f7fc ff16 	bl	8005618 <HAL_GetTick>
 80087ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ee:	e00a      	b.n	8008806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087f0:	f7fc ff12 	bl	8005618 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fe:	4293      	cmp	r3, r2
 8008800:	d901      	bls.n	8008806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e04f      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008806:	4b2b      	ldr	r3, [pc, #172]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 020c 	and.w	r2, r3, #12
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	429a      	cmp	r2, r3
 8008816:	d1eb      	bne.n	80087f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008818:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d20c      	bcs.n	8008840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008826:	4b22      	ldr	r3, [pc, #136]	; (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800882e:	4b20      	ldr	r3, [pc, #128]	; (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	429a      	cmp	r2, r3
 800883a:	d001      	beq.n	8008840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e032      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d008      	beq.n	800885e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800884c:	4b19      	ldr	r3, [pc, #100]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4916      	ldr	r1, [pc, #88]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800885a:	4313      	orrs	r3, r2
 800885c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800886a:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	490e      	ldr	r1, [pc, #56]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800887a:	4313      	orrs	r3, r2
 800887c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800887e:	f000 fbb1 	bl	8008fe4 <HAL_RCC_GetSysClockFreq>
 8008882:	4601      	mov	r1, r0
 8008884:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	091b      	lsrs	r3, r3, #4
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	4a0a      	ldr	r2, [pc, #40]	; (80088b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008890:	5cd3      	ldrb	r3, [r2, r3]
 8008892:	fa21 f303 	lsr.w	r3, r1, r3
 8008896:	4a09      	ldr	r2, [pc, #36]	; (80088bc <HAL_RCC_ClockConfig+0x1c4>)
 8008898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800889a:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <HAL_RCC_ClockConfig+0x1c8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fc fcfa 	bl	8005298 <HAL_InitTick>

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40023c00 	.word	0x40023c00
 80088b4:	40023800 	.word	0x40023800
 80088b8:	08017828 	.word	0x08017828
 80088bc:	2000027c 	.word	0x2000027c
 80088c0:	20000280 	.word	0x20000280

080088c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088c8:	4b03      	ldr	r3, [pc, #12]	; (80088d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80088ca:	681b      	ldr	r3, [r3, #0]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	2000027c 	.word	0x2000027c

080088dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088e0:	f7ff fff0 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 80088e4:	4601      	mov	r1, r0
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	0a9b      	lsrs	r3, r3, #10
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	4a03      	ldr	r2, [pc, #12]	; (8008900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088f2:	5cd3      	ldrb	r3, [r2, r3]
 80088f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40023800 	.word	0x40023800
 8008900:	08017838 	.word	0x08017838

08008904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008908:	f7ff ffdc 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 800890c:	4601      	mov	r1, r0
 800890e:	4b05      	ldr	r3, [pc, #20]	; (8008924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	0b5b      	lsrs	r3, r3, #13
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	4a03      	ldr	r2, [pc, #12]	; (8008928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800891a:	5cd3      	ldrb	r3, [r2, r3]
 800891c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008920:	4618      	mov	r0, r3
 8008922:	bd80      	pop	{r7, pc}
 8008924:	40023800 	.word	0x40023800
 8008928:	08017838 	.word	0x08017838

0800892c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	220f      	movs	r2, #15
 800893a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800893c:	4b12      	ldr	r3, [pc, #72]	; (8008988 <HAL_RCC_GetClockConfig+0x5c>)
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f003 0203 	and.w	r2, r3, #3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008948:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <HAL_RCC_GetClockConfig+0x5c>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <HAL_RCC_GetClockConfig+0x5c>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008960:	4b09      	ldr	r3, [pc, #36]	; (8008988 <HAL_RCC_GetClockConfig+0x5c>)
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	08db      	lsrs	r3, r3, #3
 8008966:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <HAL_RCC_GetClockConfig+0x60>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 020f 	and.w	r2, r3, #15
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	601a      	str	r2, [r3, #0]
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40023800 	.word	0x40023800
 800898c:	40023c00 	.word	0x40023c00

08008990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08c      	sub	sp, #48	; 0x30
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d010      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80089c8:	4b6f      	ldr	r3, [pc, #444]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	496c      	ldr	r1, [pc, #432]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80089e6:	2301      	movs	r3, #1
 80089e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d010      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80089f6:	4b64      	ldr	r3, [pc, #400]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a04:	4960      	ldr	r1, [pc, #384]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008a14:	2301      	movs	r3, #1
 8008a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d017      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a24:	4b58      	ldr	r3, [pc, #352]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	4955      	ldr	r1, [pc, #340]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a42:	d101      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008a44:	2301      	movs	r3, #1
 8008a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008a50:	2301      	movs	r3, #1
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d017      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a60:	4b49      	ldr	r3, [pc, #292]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6e:	4946      	ldr	r1, [pc, #280]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a7e:	d101      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008a80:	2301      	movs	r3, #1
 8008a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 808a 	beq.w	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60bb      	str	r3, [r7, #8]
 8008aa2:	4b39      	ldr	r3, [pc, #228]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	4a38      	ldr	r2, [pc, #224]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aac:	6413      	str	r3, [r2, #64]	; 0x40
 8008aae:	4b36      	ldr	r3, [pc, #216]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ab6:	60bb      	str	r3, [r7, #8]
 8008ab8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008aba:	4b34      	ldr	r3, [pc, #208]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a33      	ldr	r2, [pc, #204]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ac4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ac6:	f7fc fda7 	bl	8005618 <HAL_GetTick>
 8008aca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008acc:	e008      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008ace:	f7fc fda3 	bl	8005618 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e278      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ae0:	4b2a      	ldr	r3, [pc, #168]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0f0      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008aec:	4b26      	ldr	r3, [pc, #152]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d02f      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b04:	6a3a      	ldr	r2, [r7, #32]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d028      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b0a:	4b1f      	ldr	r3, [pc, #124]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b12:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b14:	4b1e      	ldr	r3, [pc, #120]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008b16:	2201      	movs	r2, #1
 8008b18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b1a:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b20:	4a19      	ldr	r2, [pc, #100]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b26:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d114      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b32:	f7fc fd71 	bl	8005618 <HAL_GetTick>
 8008b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b38:	e00a      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b3a:	f7fc fd6d 	bl	8005618 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d901      	bls.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e240      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0ee      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b68:	d114      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008b6a:	4b07      	ldr	r3, [pc, #28]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b7e:	4902      	ldr	r1, [pc, #8]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	608b      	str	r3, [r1, #8]
 8008b84:	e00c      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008b86:	bf00      	nop
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	40007000 	.word	0x40007000
 8008b90:	42470e40 	.word	0x42470e40
 8008b94:	4b4a      	ldr	r3, [pc, #296]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	4a49      	ldr	r2, [pc, #292]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008b9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008b9e:	6093      	str	r3, [r2, #8]
 8008ba0:	4b47      	ldr	r3, [pc, #284]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bac:	4944      	ldr	r1, [pc, #272]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0310 	and.w	r3, r3, #16
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008bc4:	4b3f      	ldr	r3, [pc, #252]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008bc6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008bd4:	4b3a      	ldr	r3, [pc, #232]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be2:	4937      	ldr	r1, [pc, #220]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bf6:	4b32      	ldr	r3, [pc, #200]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bfc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c04:	492e      	ldr	r1, [pc, #184]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d011      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008c18:	4b29      	ldr	r3, [pc, #164]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c1e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c26:	4926      	ldr	r1, [pc, #152]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c36:	d101      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008c48:	4b1d      	ldr	r3, [pc, #116]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c56:	491a      	ldr	r1, [pc, #104]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d011      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008c6a:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c78:	4911      	ldr	r1, [pc, #68]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c88:	d101      	bne.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d005      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c9c:	f040 80ff 	bne.w	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ca6:	f7fc fcb7 	bl	8005618 <HAL_GetTick>
 8008caa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cac:	e00e      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cae:	f7fc fcb3 	bl	8005618 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d907      	bls.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e188      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008cc0:	40023800 	.word	0x40023800
 8008cc4:	424711e0 	.word	0x424711e0
 8008cc8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ccc:	4b7e      	ldr	r3, [pc, #504]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1ea      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d009      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d028      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d124      	bne.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008d00:	4b71      	ldr	r3, [pc, #452]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d06:	0c1b      	lsrs	r3, r3, #16
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008d12:	4b6d      	ldr	r3, [pc, #436]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d18:	0e1b      	lsrs	r3, r3, #24
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	019b      	lsls	r3, r3, #6
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	3b01      	subs	r3, #1
 8008d32:	041b      	lsls	r3, r3, #16
 8008d34:	431a      	orrs	r2, r3
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	061b      	lsls	r3, r3, #24
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	071b      	lsls	r3, r3, #28
 8008d42:	4961      	ldr	r1, [pc, #388]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d5e:	d00a      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d035      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d74:	d130      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008d76:	4b54      	ldr	r3, [pc, #336]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d7c:	0c1b      	lsrs	r3, r3, #16
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	3301      	adds	r3, #1
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d88:	4b4f      	ldr	r3, [pc, #316]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d8e:	0f1b      	lsrs	r3, r3, #28
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	019b      	lsls	r3, r3, #6
 8008da0:	431a      	orrs	r2, r3
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	085b      	lsrs	r3, r3, #1
 8008da6:	3b01      	subs	r3, #1
 8008da8:	041b      	lsls	r3, r3, #16
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	061b      	lsls	r3, r3, #24
 8008db2:	431a      	orrs	r2, r3
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	071b      	lsls	r3, r3, #28
 8008db8:	4943      	ldr	r1, [pc, #268]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008dc0:	4b41      	ldr	r3, [pc, #260]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc6:	f023 021f 	bic.w	r2, r3, #31
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	493d      	ldr	r1, [pc, #244]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d029      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dec:	d124      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008dee:	4b36      	ldr	r3, [pc, #216]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008df4:	0c1b      	lsrs	r3, r3, #16
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	005b      	lsls	r3, r3, #1
 8008dfe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008e00:	4b31      	ldr	r3, [pc, #196]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	f003 0307 	and.w	r3, r3, #7
 8008e0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	019b      	lsls	r3, r3, #6
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	3b01      	subs	r3, #1
 8008e22:	041b      	lsls	r3, r3, #16
 8008e24:	431a      	orrs	r2, r3
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	061b      	lsls	r3, r3, #24
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	071b      	lsls	r3, r3, #28
 8008e30:	4925      	ldr	r1, [pc, #148]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d016      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	019b      	lsls	r3, r3, #6
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	085b      	lsrs	r3, r3, #1
 8008e56:	3b01      	subs	r3, #1
 8008e58:	041b      	lsls	r3, r3, #16
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	061b      	lsls	r3, r3, #24
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	071b      	lsls	r3, r3, #28
 8008e6a:	4917      	ldr	r1, [pc, #92]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008e72:	4b16      	ldr	r3, [pc, #88]	; (8008ecc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e78:	f7fc fbce 	bl	8005618 <HAL_GetTick>
 8008e7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e7e:	e008      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008e80:	f7fc fbca 	bl	8005618 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d901      	bls.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e09f      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0f0      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	f040 8095 	bne.w	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008eac:	f7fc fbb4 	bl	8005618 <HAL_GetTick>
 8008eb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008eb2:	e00f      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008eb4:	f7fc fbb0 	bl	8005618 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d908      	bls.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e085      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008ec6:	bf00      	nop
 8008ec8:	40023800 	.word	0x40023800
 8008ecc:	42470068 	.word	0x42470068
 8008ed0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ed4:	4b41      	ldr	r3, [pc, #260]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee0:	d0e8      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d02b      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d127      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008f0a:	4b34      	ldr	r3, [pc, #208]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f10:	0c1b      	lsrs	r3, r3, #16
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	3301      	adds	r3, #1
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699a      	ldr	r2, [r3, #24]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	019b      	lsls	r3, r3, #6
 8008f26:	431a      	orrs	r2, r3
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	041b      	lsls	r3, r3, #16
 8008f30:	431a      	orrs	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	061b      	lsls	r3, r3, #24
 8008f38:	4928      	ldr	r1, [pc, #160]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008f40:	4b26      	ldr	r3, [pc, #152]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	4922      	ldr	r1, [pc, #136]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01d      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f6e:	d118      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008f70:	4b1a      	ldr	r3, [pc, #104]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f76:	0e1b      	lsrs	r3, r3, #24
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	019b      	lsls	r3, r3, #6
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	085b      	lsrs	r3, r3, #1
 8008f90:	3b01      	subs	r3, #1
 8008f92:	041b      	lsls	r3, r3, #16
 8008f94:	431a      	orrs	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	061b      	lsls	r3, r3, #24
 8008f9a:	4910      	ldr	r1, [pc, #64]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fa8:	f7fc fb36 	bl	8005618 <HAL_GetTick>
 8008fac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008fae:	e008      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008fb0:	f7fc fb32 	bl	8005618 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e007      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008fc2:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fce:	d1ef      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3730      	adds	r7, #48	; 0x30
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	42470070 	.word	0x42470070

08008fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ffe:	4bc6      	ldr	r3, [pc, #792]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 030c 	and.w	r3, r3, #12
 8009006:	2b0c      	cmp	r3, #12
 8009008:	f200 817e 	bhi.w	8009308 <HAL_RCC_GetSysClockFreq+0x324>
 800900c:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <HAL_RCC_GetSysClockFreq+0x30>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	08009049 	.word	0x08009049
 8009018:	08009309 	.word	0x08009309
 800901c:	08009309 	.word	0x08009309
 8009020:	08009309 	.word	0x08009309
 8009024:	0800904f 	.word	0x0800904f
 8009028:	08009309 	.word	0x08009309
 800902c:	08009309 	.word	0x08009309
 8009030:	08009309 	.word	0x08009309
 8009034:	08009055 	.word	0x08009055
 8009038:	08009309 	.word	0x08009309
 800903c:	08009309 	.word	0x08009309
 8009040:	08009309 	.word	0x08009309
 8009044:	080091b1 	.word	0x080091b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009048:	4bb4      	ldr	r3, [pc, #720]	; (800931c <HAL_RCC_GetSysClockFreq+0x338>)
 800904a:	613b      	str	r3, [r7, #16]
       break;
 800904c:	e15f      	b.n	800930e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800904e:	4bb4      	ldr	r3, [pc, #720]	; (8009320 <HAL_RCC_GetSysClockFreq+0x33c>)
 8009050:	613b      	str	r3, [r7, #16]
      break;
 8009052:	e15c      	b.n	800930e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009054:	4bb0      	ldr	r3, [pc, #704]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800905c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800905e:	4bae      	ldr	r3, [pc, #696]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d04a      	beq.n	8009100 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800906a:	4bab      	ldr	r3, [pc, #684]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	099b      	lsrs	r3, r3, #6
 8009070:	f04f 0400 	mov.w	r4, #0
 8009074:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009078:	f04f 0200 	mov.w	r2, #0
 800907c:	ea03 0501 	and.w	r5, r3, r1
 8009080:	ea04 0602 	and.w	r6, r4, r2
 8009084:	4629      	mov	r1, r5
 8009086:	4632      	mov	r2, r6
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	f04f 0400 	mov.w	r4, #0
 8009090:	0154      	lsls	r4, r2, #5
 8009092:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009096:	014b      	lsls	r3, r1, #5
 8009098:	4619      	mov	r1, r3
 800909a:	4622      	mov	r2, r4
 800909c:	1b49      	subs	r1, r1, r5
 800909e:	eb62 0206 	sbc.w	r2, r2, r6
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	f04f 0400 	mov.w	r4, #0
 80090aa:	0194      	lsls	r4, r2, #6
 80090ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80090b0:	018b      	lsls	r3, r1, #6
 80090b2:	1a5b      	subs	r3, r3, r1
 80090b4:	eb64 0402 	sbc.w	r4, r4, r2
 80090b8:	f04f 0100 	mov.w	r1, #0
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	00e2      	lsls	r2, r4, #3
 80090c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80090c6:	00d9      	lsls	r1, r3, #3
 80090c8:	460b      	mov	r3, r1
 80090ca:	4614      	mov	r4, r2
 80090cc:	195b      	adds	r3, r3, r5
 80090ce:	eb44 0406 	adc.w	r4, r4, r6
 80090d2:	f04f 0100 	mov.w	r1, #0
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	0262      	lsls	r2, r4, #9
 80090dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80090e0:	0259      	lsls	r1, r3, #9
 80090e2:	460b      	mov	r3, r1
 80090e4:	4614      	mov	r4, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	4621      	mov	r1, r4
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f04f 0400 	mov.w	r4, #0
 80090f0:	461a      	mov	r2, r3
 80090f2:	4623      	mov	r3, r4
 80090f4:	f7f7 fde8 	bl	8000cc8 <__aeabi_uldivmod>
 80090f8:	4603      	mov	r3, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	e049      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009100:	4b85      	ldr	r3, [pc, #532]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	099b      	lsrs	r3, r3, #6
 8009106:	f04f 0400 	mov.w	r4, #0
 800910a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	ea03 0501 	and.w	r5, r3, r1
 8009116:	ea04 0602 	and.w	r6, r4, r2
 800911a:	4629      	mov	r1, r5
 800911c:	4632      	mov	r2, r6
 800911e:	f04f 0300 	mov.w	r3, #0
 8009122:	f04f 0400 	mov.w	r4, #0
 8009126:	0154      	lsls	r4, r2, #5
 8009128:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800912c:	014b      	lsls	r3, r1, #5
 800912e:	4619      	mov	r1, r3
 8009130:	4622      	mov	r2, r4
 8009132:	1b49      	subs	r1, r1, r5
 8009134:	eb62 0206 	sbc.w	r2, r2, r6
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	f04f 0400 	mov.w	r4, #0
 8009140:	0194      	lsls	r4, r2, #6
 8009142:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009146:	018b      	lsls	r3, r1, #6
 8009148:	1a5b      	subs	r3, r3, r1
 800914a:	eb64 0402 	sbc.w	r4, r4, r2
 800914e:	f04f 0100 	mov.w	r1, #0
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	00e2      	lsls	r2, r4, #3
 8009158:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800915c:	00d9      	lsls	r1, r3, #3
 800915e:	460b      	mov	r3, r1
 8009160:	4614      	mov	r4, r2
 8009162:	195b      	adds	r3, r3, r5
 8009164:	eb44 0406 	adc.w	r4, r4, r6
 8009168:	f04f 0100 	mov.w	r1, #0
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	02a2      	lsls	r2, r4, #10
 8009172:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009176:	0299      	lsls	r1, r3, #10
 8009178:	460b      	mov	r3, r1
 800917a:	4614      	mov	r4, r2
 800917c:	4618      	mov	r0, r3
 800917e:	4621      	mov	r1, r4
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f04f 0400 	mov.w	r4, #0
 8009186:	461a      	mov	r2, r3
 8009188:	4623      	mov	r3, r4
 800918a:	f7f7 fd9d 	bl	8000cc8 <__aeabi_uldivmod>
 800918e:	4603      	mov	r3, r0
 8009190:	460c      	mov	r4, r1
 8009192:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009194:	4b60      	ldr	r3, [pc, #384]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	0c1b      	lsrs	r3, r3, #16
 800919a:	f003 0303 	and.w	r3, r3, #3
 800919e:	3301      	adds	r3, #1
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ac:	613b      	str	r3, [r7, #16]
      break;
 80091ae:	e0ae      	b.n	800930e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091b0:	4b59      	ldr	r3, [pc, #356]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091ba:	4b57      	ldr	r3, [pc, #348]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d04a      	beq.n	800925c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091c6:	4b54      	ldr	r3, [pc, #336]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	099b      	lsrs	r3, r3, #6
 80091cc:	f04f 0400 	mov.w	r4, #0
 80091d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	ea03 0501 	and.w	r5, r3, r1
 80091dc:	ea04 0602 	and.w	r6, r4, r2
 80091e0:	4629      	mov	r1, r5
 80091e2:	4632      	mov	r2, r6
 80091e4:	f04f 0300 	mov.w	r3, #0
 80091e8:	f04f 0400 	mov.w	r4, #0
 80091ec:	0154      	lsls	r4, r2, #5
 80091ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80091f2:	014b      	lsls	r3, r1, #5
 80091f4:	4619      	mov	r1, r3
 80091f6:	4622      	mov	r2, r4
 80091f8:	1b49      	subs	r1, r1, r5
 80091fa:	eb62 0206 	sbc.w	r2, r2, r6
 80091fe:	f04f 0300 	mov.w	r3, #0
 8009202:	f04f 0400 	mov.w	r4, #0
 8009206:	0194      	lsls	r4, r2, #6
 8009208:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800920c:	018b      	lsls	r3, r1, #6
 800920e:	1a5b      	subs	r3, r3, r1
 8009210:	eb64 0402 	sbc.w	r4, r4, r2
 8009214:	f04f 0100 	mov.w	r1, #0
 8009218:	f04f 0200 	mov.w	r2, #0
 800921c:	00e2      	lsls	r2, r4, #3
 800921e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009222:	00d9      	lsls	r1, r3, #3
 8009224:	460b      	mov	r3, r1
 8009226:	4614      	mov	r4, r2
 8009228:	195b      	adds	r3, r3, r5
 800922a:	eb44 0406 	adc.w	r4, r4, r6
 800922e:	f04f 0100 	mov.w	r1, #0
 8009232:	f04f 0200 	mov.w	r2, #0
 8009236:	0262      	lsls	r2, r4, #9
 8009238:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800923c:	0259      	lsls	r1, r3, #9
 800923e:	460b      	mov	r3, r1
 8009240:	4614      	mov	r4, r2
 8009242:	4618      	mov	r0, r3
 8009244:	4621      	mov	r1, r4
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f04f 0400 	mov.w	r4, #0
 800924c:	461a      	mov	r2, r3
 800924e:	4623      	mov	r3, r4
 8009250:	f7f7 fd3a 	bl	8000cc8 <__aeabi_uldivmod>
 8009254:	4603      	mov	r3, r0
 8009256:	460c      	mov	r4, r1
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	e049      	b.n	80092f0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800925c:	4b2e      	ldr	r3, [pc, #184]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	099b      	lsrs	r3, r3, #6
 8009262:	f04f 0400 	mov.w	r4, #0
 8009266:	f240 11ff 	movw	r1, #511	; 0x1ff
 800926a:	f04f 0200 	mov.w	r2, #0
 800926e:	ea03 0501 	and.w	r5, r3, r1
 8009272:	ea04 0602 	and.w	r6, r4, r2
 8009276:	4629      	mov	r1, r5
 8009278:	4632      	mov	r2, r6
 800927a:	f04f 0300 	mov.w	r3, #0
 800927e:	f04f 0400 	mov.w	r4, #0
 8009282:	0154      	lsls	r4, r2, #5
 8009284:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009288:	014b      	lsls	r3, r1, #5
 800928a:	4619      	mov	r1, r3
 800928c:	4622      	mov	r2, r4
 800928e:	1b49      	subs	r1, r1, r5
 8009290:	eb62 0206 	sbc.w	r2, r2, r6
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	f04f 0400 	mov.w	r4, #0
 800929c:	0194      	lsls	r4, r2, #6
 800929e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80092a2:	018b      	lsls	r3, r1, #6
 80092a4:	1a5b      	subs	r3, r3, r1
 80092a6:	eb64 0402 	sbc.w	r4, r4, r2
 80092aa:	f04f 0100 	mov.w	r1, #0
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	00e2      	lsls	r2, r4, #3
 80092b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80092b8:	00d9      	lsls	r1, r3, #3
 80092ba:	460b      	mov	r3, r1
 80092bc:	4614      	mov	r4, r2
 80092be:	195b      	adds	r3, r3, r5
 80092c0:	eb44 0406 	adc.w	r4, r4, r6
 80092c4:	f04f 0100 	mov.w	r1, #0
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	02a2      	lsls	r2, r4, #10
 80092ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80092d2:	0299      	lsls	r1, r3, #10
 80092d4:	460b      	mov	r3, r1
 80092d6:	4614      	mov	r4, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	4621      	mov	r1, r4
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f04f 0400 	mov.w	r4, #0
 80092e2:	461a      	mov	r2, r3
 80092e4:	4623      	mov	r3, r4
 80092e6:	f7f7 fcef 	bl	8000cc8 <__aeabi_uldivmod>
 80092ea:	4603      	mov	r3, r0
 80092ec:	460c      	mov	r4, r1
 80092ee:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80092f0:	4b09      	ldr	r3, [pc, #36]	; (8009318 <HAL_RCC_GetSysClockFreq+0x334>)
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	0f1b      	lsrs	r3, r3, #28
 80092f6:	f003 0307 	and.w	r3, r3, #7
 80092fa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	fbb2 f3f3 	udiv	r3, r2, r3
 8009304:	613b      	str	r3, [r7, #16]
      break;
 8009306:	e002      	b.n	800930e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009308:	4b04      	ldr	r3, [pc, #16]	; (800931c <HAL_RCC_GetSysClockFreq+0x338>)
 800930a:	613b      	str	r3, [r7, #16]
      break;
 800930c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800930e:	693b      	ldr	r3, [r7, #16]
}
 8009310:	4618      	mov	r0, r3
 8009312:	371c      	adds	r7, #28
 8009314:	46bd      	mov	sp, r7
 8009316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009318:	40023800 	.word	0x40023800
 800931c:	00f42400 	.word	0x00f42400
 8009320:	007a1200 	.word	0x007a1200

08009324 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 8083 	beq.w	8009444 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800933e:	4b95      	ldr	r3, [pc, #596]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 030c 	and.w	r3, r3, #12
 8009346:	2b04      	cmp	r3, #4
 8009348:	d019      	beq.n	800937e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800934a:	4b92      	ldr	r3, [pc, #584]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009352:	2b08      	cmp	r3, #8
 8009354:	d106      	bne.n	8009364 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009356:	4b8f      	ldr	r3, [pc, #572]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800935e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009362:	d00c      	beq.n	800937e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009364:	4b8b      	ldr	r3, [pc, #556]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800936c:	2b0c      	cmp	r3, #12
 800936e:	d112      	bne.n	8009396 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009370:	4b88      	ldr	r3, [pc, #544]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800937c:	d10b      	bne.n	8009396 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800937e:	4b85      	ldr	r3, [pc, #532]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d05b      	beq.n	8009442 <HAL_RCC_OscConfig+0x11e>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d157      	bne.n	8009442 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e216      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939e:	d106      	bne.n	80093ae <HAL_RCC_OscConfig+0x8a>
 80093a0:	4b7c      	ldr	r3, [pc, #496]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a7b      	ldr	r2, [pc, #492]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	e01d      	b.n	80093ea <HAL_RCC_OscConfig+0xc6>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093b6:	d10c      	bne.n	80093d2 <HAL_RCC_OscConfig+0xae>
 80093b8:	4b76      	ldr	r3, [pc, #472]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a75      	ldr	r2, [pc, #468]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093c2:	6013      	str	r3, [r2, #0]
 80093c4:	4b73      	ldr	r3, [pc, #460]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a72      	ldr	r2, [pc, #456]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	e00b      	b.n	80093ea <HAL_RCC_OscConfig+0xc6>
 80093d2:	4b70      	ldr	r3, [pc, #448]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a6f      	ldr	r2, [pc, #444]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	4b6d      	ldr	r3, [pc, #436]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a6c      	ldr	r2, [pc, #432]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80093e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d013      	beq.n	800941a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f2:	f7fc f911 	bl	8005618 <HAL_GetTick>
 80093f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093f8:	e008      	b.n	800940c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093fa:	f7fc f90d 	bl	8005618 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	2b64      	cmp	r3, #100	; 0x64
 8009406:	d901      	bls.n	800940c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e1db      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800940c:	4b61      	ldr	r3, [pc, #388]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0f0      	beq.n	80093fa <HAL_RCC_OscConfig+0xd6>
 8009418:	e014      	b.n	8009444 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800941a:	f7fc f8fd 	bl	8005618 <HAL_GetTick>
 800941e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009420:	e008      	b.n	8009434 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009422:	f7fc f8f9 	bl	8005618 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b64      	cmp	r3, #100	; 0x64
 800942e:	d901      	bls.n	8009434 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e1c7      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009434:	4b57      	ldr	r3, [pc, #348]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1f0      	bne.n	8009422 <HAL_RCC_OscConfig+0xfe>
 8009440:	e000      	b.n	8009444 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009442:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d06f      	beq.n	8009530 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009450:	4b50      	ldr	r3, [pc, #320]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f003 030c 	and.w	r3, r3, #12
 8009458:	2b00      	cmp	r3, #0
 800945a:	d017      	beq.n	800948c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800945c:	4b4d      	ldr	r3, [pc, #308]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009464:	2b08      	cmp	r3, #8
 8009466:	d105      	bne.n	8009474 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009468:	4b4a      	ldr	r3, [pc, #296]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00b      	beq.n	800948c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009474:	4b47      	ldr	r3, [pc, #284]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800947c:	2b0c      	cmp	r3, #12
 800947e:	d11c      	bne.n	80094ba <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009480:	4b44      	ldr	r3, [pc, #272]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d116      	bne.n	80094ba <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800948c:	4b41      	ldr	r3, [pc, #260]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <HAL_RCC_OscConfig+0x180>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d001      	beq.n	80094a4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e18f      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094a4:	4b3b      	ldr	r3, [pc, #236]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	00db      	lsls	r3, r3, #3
 80094b2:	4938      	ldr	r1, [pc, #224]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094b8:	e03a      	b.n	8009530 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d020      	beq.n	8009504 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094c2:	4b35      	ldr	r3, [pc, #212]	; (8009598 <HAL_RCC_OscConfig+0x274>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c8:	f7fc f8a6 	bl	8005618 <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094ce:	e008      	b.n	80094e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094d0:	f7fc f8a2 	bl	8005618 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e170      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094e2:	4b2c      	ldr	r3, [pc, #176]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ee:	4b29      	ldr	r3, [pc, #164]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	4925      	ldr	r1, [pc, #148]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	600b      	str	r3, [r1, #0]
 8009502:	e015      	b.n	8009530 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009504:	4b24      	ldr	r3, [pc, #144]	; (8009598 <HAL_RCC_OscConfig+0x274>)
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950a:	f7fc f885 	bl	8005618 <HAL_GetTick>
 800950e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009510:	e008      	b.n	8009524 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009512:	f7fc f881 	bl	8005618 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d901      	bls.n	8009524 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e14f      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009524:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1f0      	bne.n	8009512 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0308 	and.w	r3, r3, #8
 8009538:	2b00      	cmp	r3, #0
 800953a:	d037      	beq.n	80095ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d016      	beq.n	8009572 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009544:	4b15      	ldr	r3, [pc, #84]	; (800959c <HAL_RCC_OscConfig+0x278>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800954a:	f7fc f865 	bl	8005618 <HAL_GetTick>
 800954e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009550:	e008      	b.n	8009564 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009552:	f7fc f861 	bl	8005618 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d901      	bls.n	8009564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e12f      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009564:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <HAL_RCC_OscConfig+0x270>)
 8009566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0f0      	beq.n	8009552 <HAL_RCC_OscConfig+0x22e>
 8009570:	e01c      	b.n	80095ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009572:	4b0a      	ldr	r3, [pc, #40]	; (800959c <HAL_RCC_OscConfig+0x278>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009578:	f7fc f84e 	bl	8005618 <HAL_GetTick>
 800957c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800957e:	e00f      	b.n	80095a0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009580:	f7fc f84a 	bl	8005618 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	2b02      	cmp	r3, #2
 800958c:	d908      	bls.n	80095a0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e118      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
 8009592:	bf00      	nop
 8009594:	40023800 	.word	0x40023800
 8009598:	42470000 	.word	0x42470000
 800959c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095a0:	4b8a      	ldr	r3, [pc, #552]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80095a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e9      	bne.n	8009580 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 8097 	beq.w	80096e8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095ba:	2300      	movs	r3, #0
 80095bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095be:	4b83      	ldr	r3, [pc, #524]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10f      	bne.n	80095ea <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	4b7f      	ldr	r3, [pc, #508]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	4a7e      	ldr	r2, [pc, #504]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80095d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d8:	6413      	str	r3, [r2, #64]	; 0x40
 80095da:	4b7c      	ldr	r3, [pc, #496]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80095e6:	2301      	movs	r3, #1
 80095e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095ea:	4b79      	ldr	r3, [pc, #484]	; (80097d0 <HAL_RCC_OscConfig+0x4ac>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d118      	bne.n	8009628 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095f6:	4b76      	ldr	r3, [pc, #472]	; (80097d0 <HAL_RCC_OscConfig+0x4ac>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a75      	ldr	r2, [pc, #468]	; (80097d0 <HAL_RCC_OscConfig+0x4ac>)
 80095fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009602:	f7fc f809 	bl	8005618 <HAL_GetTick>
 8009606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009608:	e008      	b.n	800961c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800960a:	f7fc f805 	bl	8005618 <HAL_GetTick>
 800960e:	4602      	mov	r2, r0
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	2b02      	cmp	r3, #2
 8009616:	d901      	bls.n	800961c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e0d3      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800961c:	4b6c      	ldr	r3, [pc, #432]	; (80097d0 <HAL_RCC_OscConfig+0x4ac>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d0f0      	beq.n	800960a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d106      	bne.n	800963e <HAL_RCC_OscConfig+0x31a>
 8009630:	4b66      	ldr	r3, [pc, #408]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009634:	4a65      	ldr	r2, [pc, #404]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	6713      	str	r3, [r2, #112]	; 0x70
 800963c:	e01c      	b.n	8009678 <HAL_RCC_OscConfig+0x354>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	2b05      	cmp	r3, #5
 8009644:	d10c      	bne.n	8009660 <HAL_RCC_OscConfig+0x33c>
 8009646:	4b61      	ldr	r3, [pc, #388]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964a:	4a60      	ldr	r2, [pc, #384]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 800964c:	f043 0304 	orr.w	r3, r3, #4
 8009650:	6713      	str	r3, [r2, #112]	; 0x70
 8009652:	4b5e      	ldr	r3, [pc, #376]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009656:	4a5d      	ldr	r2, [pc, #372]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	6713      	str	r3, [r2, #112]	; 0x70
 800965e:	e00b      	b.n	8009678 <HAL_RCC_OscConfig+0x354>
 8009660:	4b5a      	ldr	r3, [pc, #360]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009664:	4a59      	ldr	r2, [pc, #356]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009666:	f023 0301 	bic.w	r3, r3, #1
 800966a:	6713      	str	r3, [r2, #112]	; 0x70
 800966c:	4b57      	ldr	r3, [pc, #348]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 800966e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009670:	4a56      	ldr	r2, [pc, #344]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009672:	f023 0304 	bic.w	r3, r3, #4
 8009676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d015      	beq.n	80096ac <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009680:	f7fb ffca 	bl	8005618 <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009686:	e00a      	b.n	800969e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009688:	f7fb ffc6 	bl	8005618 <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	f241 3288 	movw	r2, #5000	; 0x1388
 8009696:	4293      	cmp	r3, r2
 8009698:	d901      	bls.n	800969e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e092      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800969e:	4b4b      	ldr	r3, [pc, #300]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80096a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0ee      	beq.n	8009688 <HAL_RCC_OscConfig+0x364>
 80096aa:	e014      	b.n	80096d6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ac:	f7fb ffb4 	bl	8005618 <HAL_GetTick>
 80096b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096b2:	e00a      	b.n	80096ca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096b4:	f7fb ffb0 	bl	8005618 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d901      	bls.n	80096ca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e07c      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096ca:	4b40      	ldr	r3, [pc, #256]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80096cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1ee      	bne.n	80096b4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d105      	bne.n	80096e8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096dc:	4b3b      	ldr	r3, [pc, #236]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	4a3a      	ldr	r2, [pc, #232]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80096e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d068      	beq.n	80097c2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096f0:	4b36      	ldr	r3, [pc, #216]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f003 030c 	and.w	r3, r3, #12
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d060      	beq.n	80097be <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d145      	bne.n	8009790 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009704:	4b33      	ldr	r3, [pc, #204]	; (80097d4 <HAL_RCC_OscConfig+0x4b0>)
 8009706:	2200      	movs	r2, #0
 8009708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800970a:	f7fb ff85 	bl	8005618 <HAL_GetTick>
 800970e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009710:	e008      	b.n	8009724 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009712:	f7fb ff81 	bl	8005618 <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d901      	bls.n	8009724 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e04f      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009724:	4b29      	ldr	r3, [pc, #164]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1f0      	bne.n	8009712 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	69da      	ldr	r2, [r3, #28]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	431a      	orrs	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	019b      	lsls	r3, r3, #6
 8009740:	431a      	orrs	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	085b      	lsrs	r3, r3, #1
 8009748:	3b01      	subs	r3, #1
 800974a:	041b      	lsls	r3, r3, #16
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	061b      	lsls	r3, r3, #24
 8009754:	431a      	orrs	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975a:	071b      	lsls	r3, r3, #28
 800975c:	491b      	ldr	r1, [pc, #108]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 800975e:	4313      	orrs	r3, r2
 8009760:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <HAL_RCC_OscConfig+0x4b0>)
 8009764:	2201      	movs	r2, #1
 8009766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009768:	f7fb ff56 	bl	8005618 <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009770:	f7fb ff52 	bl	8005618 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e020      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009782:	4b12      	ldr	r3, [pc, #72]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <HAL_RCC_OscConfig+0x44c>
 800978e:	e018      	b.n	80097c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009790:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <HAL_RCC_OscConfig+0x4b0>)
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009796:	f7fb ff3f 	bl	8005618 <HAL_GetTick>
 800979a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800979c:	e008      	b.n	80097b0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800979e:	f7fb ff3b 	bl	8005618 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d901      	bls.n	80097b0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e009      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097b0:	4b06      	ldr	r3, [pc, #24]	; (80097cc <HAL_RCC_OscConfig+0x4a8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f0      	bne.n	800979e <HAL_RCC_OscConfig+0x47a>
 80097bc:	e001      	b.n	80097c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	40023800 	.word	0x40023800
 80097d0:	40007000 	.word	0x40007000
 80097d4:	42470060 	.word	0x42470060

080097d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e056      	b.n	8009898 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d106      	bne.n	800980a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7fb fbb1 	bl	8004f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009820:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	431a      	orrs	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	ea42 0103 	orr.w	r1, r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	f003 0104 	and.w	r1, r3, #4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	69da      	ldr	r2, [r3, #28]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009886:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	4613      	mov	r3, r2
 80098ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_SPI_Transmit+0x22>
 80098be:	2302      	movs	r3, #2
 80098c0:	e11e      	b.n	8009b00 <HAL_SPI_Transmit+0x260>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ca:	f7fb fea5 	bl	8005618 <HAL_GetTick>
 80098ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d002      	beq.n	80098e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80098e0:	2302      	movs	r3, #2
 80098e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80098e4:	e103      	b.n	8009aee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <HAL_SPI_Transmit+0x52>
 80098ec:	88fb      	ldrh	r3, [r7, #6]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d102      	bne.n	80098f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80098f6:	e0fa      	b.n	8009aee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2203      	movs	r2, #3
 80098fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	88fa      	ldrh	r2, [r7, #6]
 8009916:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800993e:	d107      	bne.n	8009950 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800994e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995a:	2b40      	cmp	r3, #64	; 0x40
 800995c:	d007      	beq.n	800996e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800996c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009976:	d14b      	bne.n	8009a10 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <HAL_SPI_Transmit+0xe6>
 8009980:	8afb      	ldrh	r3, [r7, #22]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d13e      	bne.n	8009a04 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998a:	881a      	ldrh	r2, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009996:	1c9a      	adds	r2, r3, #2
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	3b01      	subs	r3, #1
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80099aa:	e02b      	b.n	8009a04 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d112      	bne.n	80099e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	881a      	ldrh	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ca:	1c9a      	adds	r2, r3, #2
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80099de:	e011      	b.n	8009a04 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099e0:	f7fb fe1a 	bl	8005618 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d803      	bhi.n	80099f8 <HAL_SPI_Transmit+0x158>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f6:	d102      	bne.n	80099fe <HAL_SPI_Transmit+0x15e>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009a02:	e074      	b.n	8009aee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1ce      	bne.n	80099ac <HAL_SPI_Transmit+0x10c>
 8009a0e:	e04c      	b.n	8009aaa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <HAL_SPI_Transmit+0x17e>
 8009a18:	8afb      	ldrh	r3, [r7, #22]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d140      	bne.n	8009aa0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	330c      	adds	r3, #12
 8009a28:	7812      	ldrb	r2, [r2, #0]
 8009a2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009a44:	e02c      	b.n	8009aa0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d113      	bne.n	8009a7c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	330c      	adds	r3, #12
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	86da      	strh	r2, [r3, #54]	; 0x36
 8009a7a:	e011      	b.n	8009aa0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a7c:	f7fb fdcc 	bl	8005618 <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d803      	bhi.n	8009a94 <HAL_SPI_Transmit+0x1f4>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d102      	bne.n	8009a9a <HAL_SPI_Transmit+0x1fa>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d102      	bne.n	8009aa0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009a9e:	e026      	b.n	8009aee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1cd      	bne.n	8009a46 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 fbb2 	bl	800a218 <SPI_EndRxTxTransaction>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2220      	movs	r2, #32
 8009abe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ac8:	2300      	movs	r3, #0
 8009aca:	613b      	str	r3, [r7, #16]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	77fb      	strb	r3, [r7, #31]
 8009aea:	e000      	b.n	8009aee <HAL_SPI_Transmit+0x24e>
  }

error:
 8009aec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3720      	adds	r7, #32
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b24:	d112      	bne.n	8009b4c <HAL_SPI_Receive+0x44>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10e      	bne.n	8009b4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2204      	movs	r2, #4
 8009b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009b36:	88fa      	ldrh	r2, [r7, #6]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 f8e9 	bl	8009d1a <HAL_SPI_TransmitReceive>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	e0e2      	b.n	8009d12 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d101      	bne.n	8009b5a <HAL_SPI_Receive+0x52>
 8009b56:	2302      	movs	r3, #2
 8009b58:	e0db      	b.n	8009d12 <HAL_SPI_Receive+0x20a>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b62:	f7fb fd59 	bl	8005618 <HAL_GetTick>
 8009b66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d002      	beq.n	8009b7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009b74:	2302      	movs	r3, #2
 8009b76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b78:	e0c2      	b.n	8009d00 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <HAL_SPI_Receive+0x7e>
 8009b80:	88fb      	ldrh	r3, [r7, #6]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d102      	bne.n	8009b8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b8a:	e0b9      	b.n	8009d00 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2204      	movs	r2, #4
 8009b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	88fa      	ldrh	r2, [r7, #6]
 8009ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	88fa      	ldrh	r2, [r7, #6]
 8009baa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd2:	d107      	bne.n	8009be4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009be2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bee:	2b40      	cmp	r3, #64	; 0x40
 8009bf0:	d007      	beq.n	8009c02 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d162      	bne.n	8009cd0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009c0a:	e02e      	b.n	8009c6a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d115      	bne.n	8009c46 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f103 020c 	add.w	r2, r3, #12
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c26:	7812      	ldrb	r2, [r2, #0]
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c44:	e011      	b.n	8009c6a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c46:	f7fb fce7 	bl	8005618 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d803      	bhi.n	8009c5e <HAL_SPI_Receive+0x156>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d102      	bne.n	8009c64 <HAL_SPI_Receive+0x15c>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009c68:	e04a      	b.n	8009d00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1cb      	bne.n	8009c0c <HAL_SPI_Receive+0x104>
 8009c74:	e031      	b.n	8009cda <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d113      	bne.n	8009cac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68da      	ldr	r2, [r3, #12]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c96:	1c9a      	adds	r2, r3, #2
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009caa:	e011      	b.n	8009cd0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cac:	f7fb fcb4 	bl	8005618 <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d803      	bhi.n	8009cc4 <HAL_SPI_Receive+0x1bc>
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc2:	d102      	bne.n	8009cca <HAL_SPI_Receive+0x1c2>
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d102      	bne.n	8009cd0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009cce:	e017      	b.n	8009d00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1cd      	bne.n	8009c76 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 fa35 	bl	800a14e <SPI_EndRxTransaction>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2220      	movs	r2, #32
 8009cee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]
 8009cfc:	e000      	b.n	8009d00 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b08c      	sub	sp, #48	; 0x30
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	607a      	str	r2, [r7, #4]
 8009d26:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_SPI_TransmitReceive+0x26>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e18a      	b.n	800a056 <HAL_SPI_TransmitReceive+0x33c>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d48:	f7fb fc66 	bl	8005618 <HAL_GetTick>
 8009d4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009d5e:	887b      	ldrh	r3, [r7, #2]
 8009d60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d00f      	beq.n	8009d8a <HAL_SPI_TransmitReceive+0x70>
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d70:	d107      	bne.n	8009d82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d103      	bne.n	8009d82 <HAL_SPI_TransmitReceive+0x68>
 8009d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d003      	beq.n	8009d8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009d82:	2302      	movs	r3, #2
 8009d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009d88:	e15b      	b.n	800a042 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <HAL_SPI_TransmitReceive+0x82>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <HAL_SPI_TransmitReceive+0x82>
 8009d96:	887b      	ldrh	r3, [r7, #2]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009da2:	e14e      	b.n	800a042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	d003      	beq.n	8009db8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2205      	movs	r2, #5
 8009db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	887a      	ldrh	r2, [r7, #2]
 8009dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	887a      	ldrh	r2, [r7, #2]
 8009dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	887a      	ldrh	r2, [r7, #2]
 8009dda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	887a      	ldrh	r2, [r7, #2]
 8009de0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	d007      	beq.n	8009e0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e14:	d178      	bne.n	8009f08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <HAL_SPI_TransmitReceive+0x10a>
 8009e1e:	8b7b      	ldrh	r3, [r7, #26]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d166      	bne.n	8009ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e28:	881a      	ldrh	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e34:	1c9a      	adds	r2, r3, #2
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	3b01      	subs	r3, #1
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e48:	e053      	b.n	8009ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d11b      	bne.n	8009e90 <HAL_SPI_TransmitReceive+0x176>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d016      	beq.n	8009e90 <HAL_SPI_TransmitReceive+0x176>
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d113      	bne.n	8009e90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6c:	881a      	ldrh	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e78:	1c9a      	adds	r2, r3, #2
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	3b01      	subs	r3, #1
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d119      	bne.n	8009ed2 <HAL_SPI_TransmitReceive+0x1b8>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d014      	beq.n	8009ed2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68da      	ldr	r2, [r3, #12]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb2:	b292      	uxth	r2, r2
 8009eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eba:	1c9a      	adds	r2, r3, #2
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ed2:	f7fb fba1 	bl	8005618 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d807      	bhi.n	8009ef2 <HAL_SPI_TransmitReceive+0x1d8>
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee8:	d003      	beq.n	8009ef2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ef0:	e0a7      	b.n	800a042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1a6      	bne.n	8009e4a <HAL_SPI_TransmitReceive+0x130>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1a1      	bne.n	8009e4a <HAL_SPI_TransmitReceive+0x130>
 8009f06:	e07c      	b.n	800a002 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <HAL_SPI_TransmitReceive+0x1fc>
 8009f10:	8b7b      	ldrh	r3, [r7, #26]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d16b      	bne.n	8009fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	330c      	adds	r3, #12
 8009f20:	7812      	ldrb	r2, [r2, #0]
 8009f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	3b01      	subs	r3, #1
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f3c:	e057      	b.n	8009fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f003 0302 	and.w	r3, r3, #2
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d11c      	bne.n	8009f86 <HAL_SPI_TransmitReceive+0x26c>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d017      	beq.n	8009f86 <HAL_SPI_TransmitReceive+0x26c>
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d114      	bne.n	8009f86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	330c      	adds	r3, #12
 8009f66:	7812      	ldrb	r2, [r2, #0]
 8009f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d119      	bne.n	8009fc8 <HAL_SPI_TransmitReceive+0x2ae>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d014      	beq.n	8009fc8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009fc8:	f7fb fb26 	bl	8005618 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d803      	bhi.n	8009fe0 <HAL_SPI_TransmitReceive+0x2c6>
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fde:	d102      	bne.n	8009fe6 <HAL_SPI_TransmitReceive+0x2cc>
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009fec:	e029      	b.n	800a042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1a2      	bne.n	8009f3e <HAL_SPI_TransmitReceive+0x224>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d19d      	bne.n	8009f3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 f906 	bl	800a218 <SPI_EndRxTxTransaction>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d006      	beq.n	800a020 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2220      	movs	r2, #32
 800a01c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a01e:	e010      	b.n	800a042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10b      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a028:	2300      	movs	r3, #0
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	617b      	str	r3, [r7, #20]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	e000      	b.n	800a042 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a040:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a056:	4618      	mov	r0, r3
 800a058:	3730      	adds	r7, #48	; 0x30
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a06c:	b2db      	uxtb	r3, r3
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	603b      	str	r3, [r7, #0]
 800a086:	4613      	mov	r3, r2
 800a088:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a08a:	e04c      	b.n	800a126 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a092:	d048      	beq.n	800a126 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a094:	f7fb fac0 	bl	8005618 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d902      	bls.n	800a0aa <SPI_WaitFlagStateUntilTimeout+0x30>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d13d      	bne.n	800a126 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0c2:	d111      	bne.n	800a0e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0cc:	d004      	beq.n	800a0d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0d6:	d107      	bne.n	800a0e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f0:	d10f      	bne.n	800a112 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e00f      	b.n	800a146 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689a      	ldr	r2, [r3, #8]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4013      	ands	r3, r2
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	429a      	cmp	r2, r3
 800a134:	bf0c      	ite	eq
 800a136:	2301      	moveq	r3, #1
 800a138:	2300      	movne	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	429a      	cmp	r2, r3
 800a142:	d1a3      	bne.n	800a08c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b086      	sub	sp, #24
 800a152:	af02      	add	r7, sp, #8
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a162:	d111      	bne.n	800a188 <SPI_EndRxTransaction+0x3a>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a16c:	d004      	beq.n	800a178 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a176:	d107      	bne.n	800a188 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a186:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a190:	d12a      	bne.n	800a1e8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a19a:	d012      	beq.n	800a1c2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2180      	movs	r1, #128	; 0x80
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff ff67 	bl	800a07a <SPI_WaitFlagStateUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d02d      	beq.n	800a20e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b6:	f043 0220 	orr.w	r2, r3, #32
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e026      	b.n	800a210 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff ff54 	bl	800a07a <SPI_WaitFlagStateUntilTimeout>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01a      	beq.n	800a20e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1dc:	f043 0220 	orr.w	r2, r3, #32
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e013      	b.n	800a210 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff ff41 	bl	800a07a <SPI_WaitFlagStateUntilTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a202:	f043 0220 	orr.w	r2, r3, #32
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e000      	b.n	800a210 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a224:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <SPI_EndRxTxTransaction+0x7c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a1b      	ldr	r2, [pc, #108]	; (800a298 <SPI_EndRxTxTransaction+0x80>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	0d5b      	lsrs	r3, r3, #21
 800a230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a234:	fb02 f303 	mul.w	r3, r2, r3
 800a238:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a242:	d112      	bne.n	800a26a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2200      	movs	r2, #0
 800a24c:	2180      	movs	r1, #128	; 0x80
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f7ff ff13 	bl	800a07a <SPI_WaitFlagStateUntilTimeout>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d016      	beq.n	800a288 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25e:	f043 0220 	orr.w	r2, r3, #32
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e00f      	b.n	800a28a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	3b01      	subs	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a280:	2b80      	cmp	r3, #128	; 0x80
 800a282:	d0f2      	beq.n	800a26a <SPI_EndRxTxTransaction+0x52>
 800a284:	e000      	b.n	800a288 <SPI_EndRxTxTransaction+0x70>
        break;
 800a286:	bf00      	nop
  }

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	2000027c 	.word	0x2000027c
 800a298:	165e9f81 	.word	0x165e9f81

0800a29c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e01d      	b.n	800a2ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d106      	bne.n	800a2c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7fa ff46 	bl	8005154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f000 fb44 	bl	800a968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b085      	sub	sp, #20
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68da      	ldr	r2, [r3, #12]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f042 0201 	orr.w	r2, r2, #1
 800a308:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b06      	cmp	r3, #6
 800a31a:	d007      	beq.n	800a32c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f042 0201 	orr.w	r2, r2, #1
 800a32a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3714      	adds	r7, #20
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e01d      	b.n	800a388 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	d106      	bne.n	800a366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7fa fed7 	bl	8005114 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2202      	movs	r2, #2
 800a36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3304      	adds	r3, #4
 800a376:	4619      	mov	r1, r3
 800a378:	4610      	mov	r0, r2
 800a37a:	f000 faf5 	bl	800a968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 fdca 	bl	800af3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a15      	ldr	r2, [pc, #84]	; (800a404 <HAL_TIM_PWM_Start+0x74>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d004      	beq.n	800a3bc <HAL_TIM_PWM_Start+0x2c>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a14      	ldr	r2, [pc, #80]	; (800a408 <HAL_TIM_PWM_Start+0x78>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d101      	bne.n	800a3c0 <HAL_TIM_PWM_Start+0x30>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e000      	b.n	800a3c2 <HAL_TIM_PWM_Start+0x32>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d007      	beq.n	800a3d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 0307 	and.w	r3, r3, #7
 800a3e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b06      	cmp	r3, #6
 800a3e6:	d007      	beq.n	800a3f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0201 	orr.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000
 800a408:	40010400 	.word	0x40010400

0800a40c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d122      	bne.n	800a468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f003 0302 	and.w	r3, r3, #2
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d11b      	bne.n	800a468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f06f 0202 	mvn.w	r2, #2
 800a438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fa6b 	bl	800a92a <HAL_TIM_IC_CaptureCallback>
 800a454:	e005      	b.n	800a462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fa5d 	bl	800a916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fa6e 	bl	800a93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b04      	cmp	r3, #4
 800a474:	d122      	bne.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b04      	cmp	r3, #4
 800a482:	d11b      	bne.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0204 	mvn.w	r2, #4
 800a48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa41 	bl	800a92a <HAL_TIM_IC_CaptureCallback>
 800a4a8:	e005      	b.n	800a4b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa33 	bl	800a916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fa44 	bl	800a93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f003 0308 	and.w	r3, r3, #8
 800a4c6:	2b08      	cmp	r3, #8
 800a4c8:	d122      	bne.n	800a510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d11b      	bne.n	800a510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f06f 0208 	mvn.w	r2, #8
 800a4e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fa17 	bl	800a92a <HAL_TIM_IC_CaptureCallback>
 800a4fc:	e005      	b.n	800a50a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fa09 	bl	800a916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa1a 	bl	800a93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	f003 0310 	and.w	r3, r3, #16
 800a51a:	2b10      	cmp	r3, #16
 800a51c:	d122      	bne.n	800a564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f003 0310 	and.w	r3, r3, #16
 800a528:	2b10      	cmp	r3, #16
 800a52a:	d11b      	bne.n	800a564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f06f 0210 	mvn.w	r2, #16
 800a534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2208      	movs	r2, #8
 800a53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f9ed 	bl	800a92a <HAL_TIM_IC_CaptureCallback>
 800a550:	e005      	b.n	800a55e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f9df 	bl	800a916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f9f0 	bl	800a93e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d10e      	bne.n	800a590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d107      	bne.n	800a590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f06f 0201 	mvn.w	r2, #1
 800a588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7fa fa20 	bl	80049d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a59a:	2b80      	cmp	r3, #128	; 0x80
 800a59c:	d10e      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a8:	2b80      	cmp	r3, #128	; 0x80
 800a5aa:	d107      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fd6c 	bl	800b094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c6:	2b40      	cmp	r3, #64	; 0x40
 800a5c8:	d10e      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	d107      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f9b5 	bl	800a952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b20      	cmp	r3, #32
 800a5f4:	d10e      	bne.n	800a614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	f003 0320 	and.w	r3, r3, #32
 800a600:	2b20      	cmp	r3, #32
 800a602:	d107      	bne.n	800a614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f06f 0220 	mvn.w	r2, #32
 800a60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fd36 	bl	800b080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a632:	2302      	movs	r3, #2
 800a634:	e0b4      	b.n	800a7a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2202      	movs	r2, #2
 800a642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b0c      	cmp	r3, #12
 800a64a:	f200 809f 	bhi.w	800a78c <HAL_TIM_PWM_ConfigChannel+0x170>
 800a64e:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a689 	.word	0x0800a689
 800a658:	0800a78d 	.word	0x0800a78d
 800a65c:	0800a78d 	.word	0x0800a78d
 800a660:	0800a78d 	.word	0x0800a78d
 800a664:	0800a6c9 	.word	0x0800a6c9
 800a668:	0800a78d 	.word	0x0800a78d
 800a66c:	0800a78d 	.word	0x0800a78d
 800a670:	0800a78d 	.word	0x0800a78d
 800a674:	0800a70b 	.word	0x0800a70b
 800a678:	0800a78d 	.word	0x0800a78d
 800a67c:	0800a78d 	.word	0x0800a78d
 800a680:	0800a78d 	.word	0x0800a78d
 800a684:	0800a74b 	.word	0x0800a74b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 fa0a 	bl	800aaa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	699a      	ldr	r2, [r3, #24]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f042 0208 	orr.w	r2, r2, #8
 800a6a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699a      	ldr	r2, [r3, #24]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f022 0204 	bic.w	r2, r2, #4
 800a6b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6999      	ldr	r1, [r3, #24]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	691a      	ldr	r2, [r3, #16]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	619a      	str	r2, [r3, #24]
      break;
 800a6c6:	e062      	b.n	800a78e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68b9      	ldr	r1, [r7, #8]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fa5a 	bl	800ab88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699a      	ldr	r2, [r3, #24]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6999      	ldr	r1, [r3, #24]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	021a      	lsls	r2, r3, #8
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	430a      	orrs	r2, r1
 800a706:	619a      	str	r2, [r3, #24]
      break;
 800a708:	e041      	b.n	800a78e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68b9      	ldr	r1, [r7, #8]
 800a710:	4618      	mov	r0, r3
 800a712:	f000 faaf 	bl	800ac74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	69da      	ldr	r2, [r3, #28]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f042 0208 	orr.w	r2, r2, #8
 800a724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f022 0204 	bic.w	r2, r2, #4
 800a734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69d9      	ldr	r1, [r3, #28]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	691a      	ldr	r2, [r3, #16]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	430a      	orrs	r2, r1
 800a746:	61da      	str	r2, [r3, #28]
      break;
 800a748:	e021      	b.n	800a78e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68b9      	ldr	r1, [r7, #8]
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fb03 	bl	800ad5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69da      	ldr	r2, [r3, #28]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69da      	ldr	r2, [r3, #28]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	69d9      	ldr	r1, [r3, #28]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	021a      	lsls	r2, r3, #8
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	61da      	str	r2, [r3, #28]
      break;
 800a78a:	e000      	b.n	800a78e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a78c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d101      	bne.n	800a7c0 <HAL_TIM_ConfigClockSource+0x18>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	e0a6      	b.n	800a90e <HAL_TIM_ConfigClockSource+0x166>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a7de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b40      	cmp	r3, #64	; 0x40
 800a7f6:	d067      	beq.n	800a8c8 <HAL_TIM_ConfigClockSource+0x120>
 800a7f8:	2b40      	cmp	r3, #64	; 0x40
 800a7fa:	d80b      	bhi.n	800a814 <HAL_TIM_ConfigClockSource+0x6c>
 800a7fc:	2b10      	cmp	r3, #16
 800a7fe:	d073      	beq.n	800a8e8 <HAL_TIM_ConfigClockSource+0x140>
 800a800:	2b10      	cmp	r3, #16
 800a802:	d802      	bhi.n	800a80a <HAL_TIM_ConfigClockSource+0x62>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d06f      	beq.n	800a8e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a808:	e078      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a80a:	2b20      	cmp	r3, #32
 800a80c:	d06c      	beq.n	800a8e8 <HAL_TIM_ConfigClockSource+0x140>
 800a80e:	2b30      	cmp	r3, #48	; 0x30
 800a810:	d06a      	beq.n	800a8e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a812:	e073      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a814:	2b70      	cmp	r3, #112	; 0x70
 800a816:	d00d      	beq.n	800a834 <HAL_TIM_ConfigClockSource+0x8c>
 800a818:	2b70      	cmp	r3, #112	; 0x70
 800a81a:	d804      	bhi.n	800a826 <HAL_TIM_ConfigClockSource+0x7e>
 800a81c:	2b50      	cmp	r3, #80	; 0x50
 800a81e:	d033      	beq.n	800a888 <HAL_TIM_ConfigClockSource+0xe0>
 800a820:	2b60      	cmp	r3, #96	; 0x60
 800a822:	d041      	beq.n	800a8a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a824:	e06a      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a82a:	d066      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x152>
 800a82c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a830:	d017      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a832:	e063      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	6899      	ldr	r1, [r3, #8]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f000 fb5a 	bl	800aefc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a856:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	609a      	str	r2, [r3, #8]
      break;
 800a860:	e04c      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	6899      	ldr	r1, [r3, #8]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	f000 fb43 	bl	800aefc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689a      	ldr	r2, [r3, #8]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a884:	609a      	str	r2, [r3, #8]
      break;
 800a886:	e039      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	6859      	ldr	r1, [r3, #4]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	461a      	mov	r2, r3
 800a896:	f000 fab7 	bl	800ae08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2150      	movs	r1, #80	; 0x50
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fb10 	bl	800aec6 <TIM_ITRx_SetConfig>
      break;
 800a8a6:	e029      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	6859      	ldr	r1, [r3, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	f000 fad6 	bl	800ae66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2160      	movs	r1, #96	; 0x60
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fb00 	bl	800aec6 <TIM_ITRx_SetConfig>
      break;
 800a8c6:	e019      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	6859      	ldr	r1, [r3, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	f000 fa97 	bl	800ae08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2140      	movs	r1, #64	; 0x40
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 faf0 	bl	800aec6 <TIM_ITRx_SetConfig>
      break;
 800a8e6:	e009      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	f000 fae7 	bl	800aec6 <TIM_ITRx_SetConfig>
      break;
 800a8f8:	e000      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a8fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b083      	sub	sp, #12
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a952:	b480      	push	{r7}
 800a954:	b083      	sub	sp, #12
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a95a:	bf00      	nop
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
	...

0800a968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a40      	ldr	r2, [pc, #256]	; (800aa7c <TIM_Base_SetConfig+0x114>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d013      	beq.n	800a9a8 <TIM_Base_SetConfig+0x40>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a986:	d00f      	beq.n	800a9a8 <TIM_Base_SetConfig+0x40>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a3d      	ldr	r2, [pc, #244]	; (800aa80 <TIM_Base_SetConfig+0x118>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d00b      	beq.n	800a9a8 <TIM_Base_SetConfig+0x40>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a3c      	ldr	r2, [pc, #240]	; (800aa84 <TIM_Base_SetConfig+0x11c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d007      	beq.n	800a9a8 <TIM_Base_SetConfig+0x40>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a3b      	ldr	r2, [pc, #236]	; (800aa88 <TIM_Base_SetConfig+0x120>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d003      	beq.n	800a9a8 <TIM_Base_SetConfig+0x40>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a3a      	ldr	r2, [pc, #232]	; (800aa8c <TIM_Base_SetConfig+0x124>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d108      	bne.n	800a9ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a2f      	ldr	r2, [pc, #188]	; (800aa7c <TIM_Base_SetConfig+0x114>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d02b      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c8:	d027      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a2c      	ldr	r2, [pc, #176]	; (800aa80 <TIM_Base_SetConfig+0x118>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d023      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a2b      	ldr	r2, [pc, #172]	; (800aa84 <TIM_Base_SetConfig+0x11c>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d01f      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a2a      	ldr	r2, [pc, #168]	; (800aa88 <TIM_Base_SetConfig+0x120>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d01b      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a29      	ldr	r2, [pc, #164]	; (800aa8c <TIM_Base_SetConfig+0x124>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d017      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a28      	ldr	r2, [pc, #160]	; (800aa90 <TIM_Base_SetConfig+0x128>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d013      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a27      	ldr	r2, [pc, #156]	; (800aa94 <TIM_Base_SetConfig+0x12c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00f      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a26      	ldr	r2, [pc, #152]	; (800aa98 <TIM_Base_SetConfig+0x130>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d00b      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a25      	ldr	r2, [pc, #148]	; (800aa9c <TIM_Base_SetConfig+0x134>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d007      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a24      	ldr	r2, [pc, #144]	; (800aaa0 <TIM_Base_SetConfig+0x138>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d003      	beq.n	800aa1a <TIM_Base_SetConfig+0xb2>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a23      	ldr	r2, [pc, #140]	; (800aaa4 <TIM_Base_SetConfig+0x13c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d108      	bne.n	800aa2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <TIM_Base_SetConfig+0x114>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <TIM_Base_SetConfig+0xf8>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a0c      	ldr	r2, [pc, #48]	; (800aa8c <TIM_Base_SetConfig+0x124>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d103      	bne.n	800aa68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	691a      	ldr	r2, [r3, #16]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	615a      	str	r2, [r3, #20]
}
 800aa6e:	bf00      	nop
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	40010000 	.word	0x40010000
 800aa80:	40000400 	.word	0x40000400
 800aa84:	40000800 	.word	0x40000800
 800aa88:	40000c00 	.word	0x40000c00
 800aa8c:	40010400 	.word	0x40010400
 800aa90:	40014000 	.word	0x40014000
 800aa94:	40014400 	.word	0x40014400
 800aa98:	40014800 	.word	0x40014800
 800aa9c:	40001800 	.word	0x40001800
 800aaa0:	40001c00 	.word	0x40001c00
 800aaa4:	40002000 	.word	0x40002000

0800aaa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	f023 0201 	bic.w	r2, r3, #1
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f023 0303 	bic.w	r3, r3, #3
 800aade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f023 0302 	bic.w	r3, r3, #2
 800aaf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a20      	ldr	r2, [pc, #128]	; (800ab80 <TIM_OC1_SetConfig+0xd8>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_OC1_SetConfig+0x64>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a1f      	ldr	r2, [pc, #124]	; (800ab84 <TIM_OC1_SetConfig+0xdc>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d10c      	bne.n	800ab26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	f023 0308 	bic.w	r3, r3, #8
 800ab12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f023 0304 	bic.w	r3, r3, #4
 800ab24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a15      	ldr	r2, [pc, #84]	; (800ab80 <TIM_OC1_SetConfig+0xd8>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d003      	beq.n	800ab36 <TIM_OC1_SetConfig+0x8e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a14      	ldr	r2, [pc, #80]	; (800ab84 <TIM_OC1_SetConfig+0xdc>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d111      	bne.n	800ab5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	693a      	ldr	r2, [r7, #16]
 800ab5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	621a      	str	r2, [r3, #32]
}
 800ab74:	bf00      	nop
 800ab76:	371c      	adds	r7, #28
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	40010000 	.word	0x40010000
 800ab84:	40010400 	.word	0x40010400

0800ab88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	f023 0210 	bic.w	r2, r3, #16
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	021b      	lsls	r3, r3, #8
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	4313      	orrs	r3, r2
 800abca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f023 0320 	bic.w	r3, r3, #32
 800abd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	4313      	orrs	r3, r2
 800abde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a22      	ldr	r2, [pc, #136]	; (800ac6c <TIM_OC2_SetConfig+0xe4>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d003      	beq.n	800abf0 <TIM_OC2_SetConfig+0x68>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a21      	ldr	r2, [pc, #132]	; (800ac70 <TIM_OC2_SetConfig+0xe8>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d10d      	bne.n	800ac0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	011b      	lsls	r3, r3, #4
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a17      	ldr	r2, [pc, #92]	; (800ac6c <TIM_OC2_SetConfig+0xe4>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d003      	beq.n	800ac1c <TIM_OC2_SetConfig+0x94>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a16      	ldr	r2, [pc, #88]	; (800ac70 <TIM_OC2_SetConfig+0xe8>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d113      	bne.n	800ac44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	621a      	str	r2, [r3, #32]
}
 800ac5e:	bf00      	nop
 800ac60:	371c      	adds	r7, #28
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	40010000 	.word	0x40010000
 800ac70:	40010400 	.word	0x40010400

0800ac74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f023 0303 	bic.w	r3, r3, #3
 800acaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a21      	ldr	r2, [pc, #132]	; (800ad54 <TIM_OC3_SetConfig+0xe0>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d003      	beq.n	800acda <TIM_OC3_SetConfig+0x66>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a20      	ldr	r2, [pc, #128]	; (800ad58 <TIM_OC3_SetConfig+0xe4>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d10d      	bne.n	800acf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ace0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	021b      	lsls	r3, r3, #8
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	4313      	orrs	r3, r2
 800acec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a16      	ldr	r2, [pc, #88]	; (800ad54 <TIM_OC3_SetConfig+0xe0>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d003      	beq.n	800ad06 <TIM_OC3_SetConfig+0x92>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a15      	ldr	r2, [pc, #84]	; (800ad58 <TIM_OC3_SetConfig+0xe4>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d113      	bne.n	800ad2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	011b      	lsls	r3, r3, #4
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	621a      	str	r2, [r3, #32]
}
 800ad48:	bf00      	nop
 800ad4a:	371c      	adds	r7, #28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	40010000 	.word	0x40010000
 800ad58:	40010400 	.word	0x40010400

0800ad5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	021b      	lsls	r3, r3, #8
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ada6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	031b      	lsls	r3, r3, #12
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a12      	ldr	r2, [pc, #72]	; (800ae00 <TIM_OC4_SetConfig+0xa4>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_OC4_SetConfig+0x68>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a11      	ldr	r2, [pc, #68]	; (800ae04 <TIM_OC4_SetConfig+0xa8>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d109      	bne.n	800add8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	019b      	lsls	r3, r3, #6
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	4313      	orrs	r3, r2
 800add6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	621a      	str	r2, [r3, #32]
}
 800adf2:	bf00      	nop
 800adf4:	371c      	adds	r7, #28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	40010000 	.word	0x40010000
 800ae04:	40010400 	.word	0x40010400

0800ae08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	f023 0201 	bic.w	r2, r3, #1
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	011b      	lsls	r3, r3, #4
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f023 030a 	bic.w	r3, r3, #10
 800ae44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	621a      	str	r2, [r3, #32]
}
 800ae5a:	bf00      	nop
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b087      	sub	sp, #28
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f023 0210 	bic.w	r2, r3, #16
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	031b      	lsls	r3, r3, #12
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	621a      	str	r2, [r3, #32]
}
 800aeba:	bf00      	nop
 800aebc:	371c      	adds	r7, #28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b085      	sub	sp, #20
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aedc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	f043 0307 	orr.w	r3, r3, #7
 800aee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	609a      	str	r2, [r3, #8]
}
 800aef0:	bf00      	nop
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	021a      	lsls	r2, r3, #8
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	431a      	orrs	r2, r3
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	4313      	orrs	r3, r2
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	4313      	orrs	r3, r2
 800af28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	609a      	str	r2, [r3, #8]
}
 800af30:	bf00      	nop
 800af32:	371c      	adds	r7, #28
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	f003 031f 	and.w	r3, r3, #31
 800af4e:	2201      	movs	r2, #1
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6a1a      	ldr	r2, [r3, #32]
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	43db      	mvns	r3, r3
 800af5e:	401a      	ands	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a1a      	ldr	r2, [r3, #32]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f003 031f 	and.w	r3, r3, #31
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	fa01 f303 	lsl.w	r3, r1, r3
 800af74:	431a      	orrs	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	621a      	str	r2, [r3, #32]
}
 800af7a:	bf00      	nop
 800af7c:	371c      	adds	r7, #28
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d101      	bne.n	800afa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af9c:	2302      	movs	r3, #2
 800af9e:	e05a      	b.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	4313      	orrs	r3, r2
 800afd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a21      	ldr	r2, [pc, #132]	; (800b064 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d022      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afec:	d01d      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a1d      	ldr	r2, [pc, #116]	; (800b068 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d018      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a1b      	ldr	r2, [pc, #108]	; (800b06c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d013      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a1a      	ldr	r2, [pc, #104]	; (800b070 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d00e      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a18      	ldr	r2, [pc, #96]	; (800b074 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d009      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a17      	ldr	r2, [pc, #92]	; (800b078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d004      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a15      	ldr	r2, [pc, #84]	; (800b07c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d10c      	bne.n	800b044 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	40010000 	.word	0x40010000
 800b068:	40000400 	.word	0x40000400
 800b06c:	40000800 	.word	0x40000800
 800b070:	40000c00 	.word	0x40000c00
 800b074:	40010400 	.word	0x40010400
 800b078:	40014000 	.word	0x40014000
 800b07c:	40001800 	.word	0x40001800

0800b080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	f107 001c 	add.w	r0, r7, #28
 800b0b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d122      	bne.n	800b106 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b0d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d105      	bne.n	800b0fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 fac0 	bl	800c680 <USB_CoreReset>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
 800b104:	e01a      	b.n	800b13c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fab4 	bl	800c680 <USB_CoreReset>
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d106      	bne.n	800b130 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b126:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	639a      	str	r2, [r3, #56]	; 0x38
 800b12e:	e005      	b.n	800b13c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b134:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d10b      	bne.n	800b15a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f043 0206 	orr.w	r2, r3, #6
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	f043 0220 	orr.w	r2, r3, #32
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b166:	b004      	add	sp, #16
 800b168:	4770      	bx	lr
	...

0800b16c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	4613      	mov	r3, r2
 800b178:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b17a:	79fb      	ldrb	r3, [r7, #7]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d165      	bne.n	800b24c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	4a41      	ldr	r2, [pc, #260]	; (800b288 <USB_SetTurnaroundTime+0x11c>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d906      	bls.n	800b196 <USB_SetTurnaroundTime+0x2a>
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	4a40      	ldr	r2, [pc, #256]	; (800b28c <USB_SetTurnaroundTime+0x120>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d802      	bhi.n	800b196 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b190:	230f      	movs	r3, #15
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e062      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	4a3c      	ldr	r2, [pc, #240]	; (800b28c <USB_SetTurnaroundTime+0x120>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d906      	bls.n	800b1ac <USB_SetTurnaroundTime+0x40>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	4a3b      	ldr	r2, [pc, #236]	; (800b290 <USB_SetTurnaroundTime+0x124>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d802      	bhi.n	800b1ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b1a6:	230e      	movs	r3, #14
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	e057      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	4a38      	ldr	r2, [pc, #224]	; (800b290 <USB_SetTurnaroundTime+0x124>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d906      	bls.n	800b1c2 <USB_SetTurnaroundTime+0x56>
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4a37      	ldr	r2, [pc, #220]	; (800b294 <USB_SetTurnaroundTime+0x128>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d802      	bhi.n	800b1c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b1bc:	230d      	movs	r3, #13
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e04c      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	4a33      	ldr	r2, [pc, #204]	; (800b294 <USB_SetTurnaroundTime+0x128>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d906      	bls.n	800b1d8 <USB_SetTurnaroundTime+0x6c>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	4a32      	ldr	r2, [pc, #200]	; (800b298 <USB_SetTurnaroundTime+0x12c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d802      	bhi.n	800b1d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b1d2:	230c      	movs	r3, #12
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	e041      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	4a2f      	ldr	r2, [pc, #188]	; (800b298 <USB_SetTurnaroundTime+0x12c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d906      	bls.n	800b1ee <USB_SetTurnaroundTime+0x82>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	4a2e      	ldr	r2, [pc, #184]	; (800b29c <USB_SetTurnaroundTime+0x130>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d802      	bhi.n	800b1ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b1e8:	230b      	movs	r3, #11
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	e036      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	4a2a      	ldr	r2, [pc, #168]	; (800b29c <USB_SetTurnaroundTime+0x130>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d906      	bls.n	800b204 <USB_SetTurnaroundTime+0x98>
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	4a29      	ldr	r2, [pc, #164]	; (800b2a0 <USB_SetTurnaroundTime+0x134>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d802      	bhi.n	800b204 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b1fe:	230a      	movs	r3, #10
 800b200:	617b      	str	r3, [r7, #20]
 800b202:	e02b      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	4a26      	ldr	r2, [pc, #152]	; (800b2a0 <USB_SetTurnaroundTime+0x134>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d906      	bls.n	800b21a <USB_SetTurnaroundTime+0xae>
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4a25      	ldr	r2, [pc, #148]	; (800b2a4 <USB_SetTurnaroundTime+0x138>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d802      	bhi.n	800b21a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b214:	2309      	movs	r3, #9
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	e020      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	4a21      	ldr	r2, [pc, #132]	; (800b2a4 <USB_SetTurnaroundTime+0x138>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d906      	bls.n	800b230 <USB_SetTurnaroundTime+0xc4>
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	4a20      	ldr	r2, [pc, #128]	; (800b2a8 <USB_SetTurnaroundTime+0x13c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d802      	bhi.n	800b230 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b22a:	2308      	movs	r3, #8
 800b22c:	617b      	str	r3, [r7, #20]
 800b22e:	e015      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	4a1d      	ldr	r2, [pc, #116]	; (800b2a8 <USB_SetTurnaroundTime+0x13c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d906      	bls.n	800b246 <USB_SetTurnaroundTime+0xda>
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	4a1c      	ldr	r2, [pc, #112]	; (800b2ac <USB_SetTurnaroundTime+0x140>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d802      	bhi.n	800b246 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b240:	2307      	movs	r3, #7
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e00a      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b246:	2306      	movs	r3, #6
 800b248:	617b      	str	r3, [r7, #20]
 800b24a:	e007      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d102      	bne.n	800b258 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b252:	2309      	movs	r3, #9
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e001      	b.n	800b25c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b258:	2309      	movs	r3, #9
 800b25a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68da      	ldr	r2, [r3, #12]
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	029b      	lsls	r3, r3, #10
 800b270:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b274:	431a      	orrs	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	00d8acbf 	.word	0x00d8acbf
 800b28c:	00e4e1bf 	.word	0x00e4e1bf
 800b290:	00f423ff 	.word	0x00f423ff
 800b294:	0106737f 	.word	0x0106737f
 800b298:	011a499f 	.word	0x011a499f
 800b29c:	01312cff 	.word	0x01312cff
 800b2a0:	014ca43f 	.word	0x014ca43f
 800b2a4:	016e35ff 	.word	0x016e35ff
 800b2a8:	01a6ab1f 	.word	0x01a6ab1f
 800b2ac:	01e847ff 	.word	0x01e847ff

0800b2b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f043 0201 	orr.w	r2, r3, #1
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b083      	sub	sp, #12
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f023 0201 	bic.w	r2, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b30c:	78fb      	ldrb	r3, [r7, #3]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d106      	bne.n	800b320 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	60da      	str	r2, [r3, #12]
 800b31e:	e00b      	b.n	800b338 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b320:	78fb      	ldrb	r3, [r7, #3]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	60da      	str	r2, [r3, #12]
 800b332:	e001      	b.n	800b338 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e003      	b.n	800b340 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b338:	2032      	movs	r0, #50	; 0x32
 800b33a:	f7fa f979 	bl	8005630 <HAL_Delay>

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b348:	b084      	sub	sp, #16
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b086      	sub	sp, #24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]
 800b366:	e009      	b.n	800b37c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3340      	adds	r3, #64	; 0x40
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	2200      	movs	r2, #0
 800b374:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3301      	adds	r3, #1
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	2b0e      	cmp	r3, #14
 800b380:	d9f2      	bls.n	800b368 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d11c      	bne.n	800b3c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b396:	f043 0302 	orr.w	r3, r3, #2
 800b39a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	e005      	b.n	800b3ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	680b      	ldr	r3, [r1, #0]
 800b3ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d10c      	bne.n	800b40e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d104      	bne.n	800b404 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f949 	bl	800b694 <USB_SetDevSpeed>
 800b402:	e008      	b.n	800b416 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b404:	2101      	movs	r1, #1
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f944 	bl	800b694 <USB_SetDevSpeed>
 800b40c:	e003      	b.n	800b416 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b40e:	2103      	movs	r1, #3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f93f 	bl	800b694 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b416:	2110      	movs	r1, #16
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 f8f3 	bl	800b604 <USB_FlushTxFifo>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d001      	beq.n	800b428 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f911 	bl	800b650 <USB_FlushRxFifo>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b43e:	461a      	mov	r2, r3
 800b440:	2300      	movs	r3, #0
 800b442:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	461a      	mov	r2, r3
 800b44c:	2300      	movs	r3, #0
 800b44e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b456:	461a      	mov	r2, r3
 800b458:	2300      	movs	r3, #0
 800b45a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b45c:	2300      	movs	r3, #0
 800b45e:	613b      	str	r3, [r7, #16]
 800b460:	e043      	b.n	800b4ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b478:	d118      	bne.n	800b4ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	015a      	lsls	r2, r3, #5
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	4413      	add	r3, r2
 800b488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48c:	461a      	mov	r2, r3
 800b48e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	e013      	b.n	800b4be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4a8:	6013      	str	r3, [r2, #0]
 800b4aa:	e008      	b.n	800b4be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	015a      	lsls	r2, r3, #5
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4dc:	461a      	mov	r2, r3
 800b4de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	613b      	str	r3, [r7, #16]
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d3b7      	bcc.n	800b462 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	613b      	str	r3, [r7, #16]
 800b4f6:	e043      	b.n	800b580 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b50a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b50e:	d118      	bne.n	800b542 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10a      	bne.n	800b52c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	015a      	lsls	r2, r3, #5
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	4413      	add	r3, r2
 800b51e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b522:	461a      	mov	r2, r3
 800b524:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	e013      	b.n	800b554 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	015a      	lsls	r2, r3, #5
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b538:	461a      	mov	r2, r3
 800b53a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	e008      	b.n	800b554 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	015a      	lsls	r2, r3, #5
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	4413      	add	r3, r2
 800b54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b54e:	461a      	mov	r2, r3
 800b550:	2300      	movs	r3, #0
 800b552:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b560:	461a      	mov	r2, r3
 800b562:	2300      	movs	r3, #0
 800b564:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b572:	461a      	mov	r2, r3
 800b574:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b578:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	3301      	adds	r3, #1
 800b57e:	613b      	str	r3, [r7, #16]
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	429a      	cmp	r2, r3
 800b586:	d3b7      	bcc.n	800b4f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b59a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b5a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d105      	bne.n	800b5bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	f043 0210 	orr.w	r2, r3, #16
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	699a      	ldr	r2, [r3, #24]
 800b5c0:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <USB_DevInit+0x2b8>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d005      	beq.n	800b5da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	f043 0208 	orr.w	r2, r3, #8
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d107      	bne.n	800b5f0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5e8:	f043 0304 	orr.w	r3, r3, #4
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5fc:	b004      	add	sp, #16
 800b5fe:	4770      	bx	lr
 800b600:	803c3800 	.word	0x803c3800

0800b604 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	019b      	lsls	r3, r3, #6
 800b616:	f043 0220 	orr.w	r2, r3, #32
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3301      	adds	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4a09      	ldr	r2, [pc, #36]	; (800b64c <USB_FlushTxFifo+0x48>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d901      	bls.n	800b630 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e006      	b.n	800b63e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	f003 0320 	and.w	r3, r3, #32
 800b638:	2b20      	cmp	r3, #32
 800b63a:	d0f0      	beq.n	800b61e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	00030d40 	.word	0x00030d40

0800b650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2210      	movs	r2, #16
 800b660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3301      	adds	r3, #1
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4a09      	ldr	r2, [pc, #36]	; (800b690 <USB_FlushRxFifo+0x40>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d901      	bls.n	800b674 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e006      	b.n	800b682 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f003 0310 	and.w	r3, r3, #16
 800b67c:	2b10      	cmp	r3, #16
 800b67e:	d0f0      	beq.n	800b662 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	00030d40 	.word	0x00030d40

0800b694 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	68f9      	ldr	r1, [r7, #12]
 800b6b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b087      	sub	sp, #28
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f003 0306 	and.w	r3, r3, #6
 800b6de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	75fb      	strb	r3, [r7, #23]
 800b6ea:	e00a      	b.n	800b702 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d002      	beq.n	800b6f8 <USB_GetDevSpeed+0x32>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b06      	cmp	r3, #6
 800b6f6:	d102      	bne.n	800b6fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	75fb      	strb	r3, [r7, #23]
 800b6fc:	e001      	b.n	800b702 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b6fe:	230f      	movs	r3, #15
 800b700:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b702:	7dfb      	ldrb	r3, [r7, #23]
}
 800b704:	4618      	mov	r0, r3
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	785b      	ldrb	r3, [r3, #1]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d13a      	bne.n	800b7a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b732:	69da      	ldr	r2, [r3, #28]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	f003 030f 	and.w	r3, r3, #15
 800b73c:	2101      	movs	r1, #1
 800b73e:	fa01 f303 	lsl.w	r3, r1, r3
 800b742:	b29b      	uxth	r3, r3
 800b744:	68f9      	ldr	r1, [r7, #12]
 800b746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b74a:	4313      	orrs	r3, r2
 800b74c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d155      	bne.n	800b810 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	78db      	ldrb	r3, [r3, #3]
 800b77e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b780:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	059b      	lsls	r3, r3, #22
 800b786:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b788:	4313      	orrs	r3, r2
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	0151      	lsls	r1, r2, #5
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	440a      	add	r2, r1
 800b792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b79a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	e036      	b.n	800b810 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a8:	69da      	ldr	r2, [r3, #28]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	f003 030f 	and.w	r3, r3, #15
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b8:	041b      	lsls	r3, r3, #16
 800b7ba:	68f9      	ldr	r1, [r7, #12]
 800b7bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	015a      	lsls	r2, r3, #5
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d11a      	bne.n	800b810 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	015a      	lsls	r2, r3, #5
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	78db      	ldrb	r3, [r3, #3]
 800b7f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	0151      	lsls	r1, r2, #5
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	440a      	add	r2, r1
 800b802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b80a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b80e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
	...

0800b820 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	785b      	ldrb	r3, [r3, #1]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d161      	bne.n	800b900 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	015a      	lsls	r2, r3, #5
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b84e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b852:	d11f      	bne.n	800b894 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	0151      	lsls	r1, r2, #5
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	440a      	add	r2, r1
 800b86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b86e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b872:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	015a      	lsls	r2, r3, #5
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	0151      	lsls	r1, r2, #5
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	440a      	add	r2, r1
 800b88a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b88e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b892:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b89a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	f003 030f 	and.w	r3, r3, #15
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	43db      	mvns	r3, r3
 800b8ae:	68f9      	ldr	r1, [r7, #12]
 800b8b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8be:	69da      	ldr	r2, [r3, #28]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	f003 030f 	and.w	r3, r3, #15
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	43db      	mvns	r3, r3
 800b8d2:	68f9      	ldr	r1, [r7, #12]
 800b8d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8d8:	4013      	ands	r3, r2
 800b8da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	0159      	lsls	r1, r3, #5
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	440b      	add	r3, r1
 800b8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	4b35      	ldr	r3, [pc, #212]	; (800b9d0 <USB_DeactivateEndpoint+0x1b0>)
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	600b      	str	r3, [r1, #0]
 800b8fe:	e060      	b.n	800b9c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4413      	add	r3, r2
 800b908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b916:	d11f      	bne.n	800b958 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	0151      	lsls	r1, r2, #5
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	440a      	add	r2, r1
 800b92e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b932:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b936:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	015a      	lsls	r2, r3, #5
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	4413      	add	r3, r2
 800b940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	0151      	lsls	r1, r2, #5
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	440a      	add	r2, r1
 800b94e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b952:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b956:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b95e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	f003 030f 	and.w	r3, r3, #15
 800b968:	2101      	movs	r1, #1
 800b96a:	fa01 f303 	lsl.w	r3, r1, r3
 800b96e:	041b      	lsls	r3, r3, #16
 800b970:	43db      	mvns	r3, r3
 800b972:	68f9      	ldr	r1, [r7, #12]
 800b974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b978:	4013      	ands	r3, r2
 800b97a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b982:	69da      	ldr	r2, [r3, #28]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	f003 030f 	and.w	r3, r3, #15
 800b98c:	2101      	movs	r1, #1
 800b98e:	fa01 f303 	lsl.w	r3, r1, r3
 800b992:	041b      	lsls	r3, r3, #16
 800b994:	43db      	mvns	r3, r3
 800b996:	68f9      	ldr	r1, [r7, #12]
 800b998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b99c:	4013      	ands	r3, r2
 800b99e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	0159      	lsls	r1, r3, #5
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	440b      	add	r3, r1
 800b9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <USB_DeactivateEndpoint+0x1b4>)
 800b9be:	4013      	ands	r3, r2
 800b9c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	ec337800 	.word	0xec337800
 800b9d4:	eff37800 	.word	0xeff37800

0800b9d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	; 0x28
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	785b      	ldrb	r3, [r3, #1]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	f040 815c 	bne.w	800bcb2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d132      	bne.n	800ba68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	69ba      	ldr	r2, [r7, #24]
 800ba12:	0151      	lsls	r1, r2, #5
 800ba14:	69fa      	ldr	r2, [r7, #28]
 800ba16:	440a      	add	r2, r1
 800ba18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	015a      	lsls	r2, r3, #5
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	0151      	lsls	r1, r2, #5
 800ba38:	69fa      	ldr	r2, [r7, #28]
 800ba3a:	440a      	add	r2, r1
 800ba3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	0151      	lsls	r1, r2, #5
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	440a      	add	r2, r1
 800ba5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba60:	0cdb      	lsrs	r3, r3, #19
 800ba62:	04db      	lsls	r3, r3, #19
 800ba64:	6113      	str	r3, [r2, #16]
 800ba66:	e074      	b.n	800bb52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	0151      	lsls	r1, r2, #5
 800ba7a:	69fa      	ldr	r2, [r7, #28]
 800ba7c:	440a      	add	r2, r1
 800ba7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba82:	0cdb      	lsrs	r3, r3, #19
 800ba84:	04db      	lsls	r3, r3, #19
 800ba86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	69ba      	ldr	r2, [r7, #24]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	69fa      	ldr	r2, [r7, #28]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800baa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800baaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab8:	691a      	ldr	r2, [r3, #16]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6959      	ldr	r1, [r3, #20]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	440b      	add	r3, r1
 800bac4:	1e59      	subs	r1, r3, #1
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	fbb1 f3f3 	udiv	r3, r1, r3
 800bace:	04d9      	lsls	r1, r3, #19
 800bad0:	4b9d      	ldr	r3, [pc, #628]	; (800bd48 <USB_EPStartXfer+0x370>)
 800bad2:	400b      	ands	r3, r1
 800bad4:	69b9      	ldr	r1, [r7, #24]
 800bad6:	0148      	lsls	r0, r1, #5
 800bad8:	69f9      	ldr	r1, [r7, #28]
 800bada:	4401      	add	r1, r0
 800badc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bae0:	4313      	orrs	r3, r2
 800bae2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	015a      	lsls	r2, r3, #5
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	4413      	add	r3, r2
 800baec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf0:	691a      	ldr	r2, [r3, #16]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bafa:	69b9      	ldr	r1, [r7, #24]
 800bafc:	0148      	lsls	r0, r1, #5
 800bafe:	69f9      	ldr	r1, [r7, #28]
 800bb00:	4401      	add	r1, r0
 800bb02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb06:	4313      	orrs	r3, r2
 800bb08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	78db      	ldrb	r3, [r3, #3]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d11f      	bne.n	800bb52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	015a      	lsls	r2, r3, #5
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	4413      	add	r3, r2
 800bb1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	0151      	lsls	r1, r2, #5
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	440a      	add	r2, r1
 800bb28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bb30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	015a      	lsls	r2, r3, #5
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	69ba      	ldr	r2, [r7, #24]
 800bb42:	0151      	lsls	r1, r2, #5
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	440a      	add	r2, r1
 800bb48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bb52:	79fb      	ldrb	r3, [r7, #7]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d14b      	bne.n	800bbf0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d009      	beq.n	800bb74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	015a      	lsls	r2, r3, #5
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	4413      	add	r3, r2
 800bb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	78db      	ldrb	r3, [r3, #3]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d128      	bne.n	800bbce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d110      	bne.n	800bbae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	69ba      	ldr	r2, [r7, #24]
 800bb9c:	0151      	lsls	r1, r2, #5
 800bb9e:	69fa      	ldr	r2, [r7, #28]
 800bba0:	440a      	add	r2, r1
 800bba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	e00f      	b.n	800bbce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	69ba      	ldr	r2, [r7, #24]
 800bbbe:	0151      	lsls	r1, r2, #5
 800bbc0:	69fa      	ldr	r2, [r7, #28]
 800bbc2:	440a      	add	r2, r1
 800bbc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbcc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	0151      	lsls	r1, r2, #5
 800bbe0:	69fa      	ldr	r2, [r7, #28]
 800bbe2:	440a      	add	r2, r1
 800bbe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbec:	6013      	str	r3, [r2, #0]
 800bbee:	e12f      	b.n	800be50 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	015a      	lsls	r2, r3, #5
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	0151      	lsls	r1, r2, #5
 800bc02:	69fa      	ldr	r2, [r7, #28]
 800bc04:	440a      	add	r2, r1
 800bc06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	78db      	ldrb	r3, [r3, #3]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d015      	beq.n	800bc44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 8117 	beq.w	800be50 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	f003 030f 	and.w	r3, r3, #15
 800bc32:	2101      	movs	r1, #1
 800bc34:	fa01 f303 	lsl.w	r3, r1, r3
 800bc38:	69f9      	ldr	r1, [r7, #28]
 800bc3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	634b      	str	r3, [r1, #52]	; 0x34
 800bc42:	e105      	b.n	800be50 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d110      	bne.n	800bc76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	69ba      	ldr	r2, [r7, #24]
 800bc64:	0151      	lsls	r1, r2, #5
 800bc66:	69fa      	ldr	r2, [r7, #28]
 800bc68:	440a      	add	r2, r1
 800bc6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	e00f      	b.n	800bc96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	015a      	lsls	r2, r3, #5
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	69ba      	ldr	r2, [r7, #24]
 800bc86:	0151      	lsls	r1, r2, #5
 800bc88:	69fa      	ldr	r2, [r7, #28]
 800bc8a:	440a      	add	r2, r1
 800bc8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	68d9      	ldr	r1, [r3, #12]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	781a      	ldrb	r2, [r3, #0]
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	b298      	uxth	r0, r3
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	4603      	mov	r3, r0
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 fa2b 	bl	800c106 <USB_WritePacket>
 800bcb0:	e0ce      	b.n	800be50 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	69ba      	ldr	r2, [r7, #24]
 800bcc2:	0151      	lsls	r1, r2, #5
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bccc:	0cdb      	lsrs	r3, r3, #19
 800bcce:	04db      	lsls	r3, r3, #19
 800bcd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	0151      	lsls	r1, r2, #5
 800bce4:	69fa      	ldr	r2, [r7, #28]
 800bce6:	440a      	add	r2, r1
 800bce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcf4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d126      	bne.n	800bd4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd14:	69b9      	ldr	r1, [r7, #24]
 800bd16:	0148      	lsls	r0, r1, #5
 800bd18:	69f9      	ldr	r1, [r7, #28]
 800bd1a:	4401      	add	r1, r0
 800bd1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd20:	4313      	orrs	r3, r2
 800bd22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	69ba      	ldr	r2, [r7, #24]
 800bd34:	0151      	lsls	r1, r2, #5
 800bd36:	69fa      	ldr	r2, [r7, #28]
 800bd38:	440a      	add	r2, r1
 800bd3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd42:	6113      	str	r3, [r2, #16]
 800bd44:	e036      	b.n	800bdb4 <USB_EPStartXfer+0x3dc>
 800bd46:	bf00      	nop
 800bd48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	695a      	ldr	r2, [r3, #20]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	4413      	add	r3, r2
 800bd56:	1e5a      	subs	r2, r3, #1
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd60:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	015a      	lsls	r2, r3, #5
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	4413      	add	r3, r2
 800bd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6e:	691a      	ldr	r2, [r3, #16]
 800bd70:	8afb      	ldrh	r3, [r7, #22]
 800bd72:	04d9      	lsls	r1, r3, #19
 800bd74:	4b39      	ldr	r3, [pc, #228]	; (800be5c <USB_EPStartXfer+0x484>)
 800bd76:	400b      	ands	r3, r1
 800bd78:	69b9      	ldr	r1, [r7, #24]
 800bd7a:	0148      	lsls	r0, r1, #5
 800bd7c:	69f9      	ldr	r1, [r7, #28]
 800bd7e:	4401      	add	r1, r0
 800bd80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd84:	4313      	orrs	r3, r2
 800bd86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	015a      	lsls	r2, r3, #5
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd94:	691a      	ldr	r2, [r3, #16]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	8af9      	ldrh	r1, [r7, #22]
 800bd9c:	fb01 f303 	mul.w	r3, r1, r3
 800bda0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bda4:	69b9      	ldr	r1, [r7, #24]
 800bda6:	0148      	lsls	r0, r1, #5
 800bda8:	69f9      	ldr	r1, [r7, #28]
 800bdaa:	4401      	add	r1, r0
 800bdac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d10d      	bne.n	800bdd6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	68d9      	ldr	r1, [r3, #12]
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	015a      	lsls	r2, r3, #5
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd2:	460a      	mov	r2, r1
 800bdd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	78db      	ldrb	r3, [r3, #3]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d128      	bne.n	800be30 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d110      	bne.n	800be10 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	015a      	lsls	r2, r3, #5
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	69ba      	ldr	r2, [r7, #24]
 800bdfe:	0151      	lsls	r1, r2, #5
 800be00:	69fa      	ldr	r2, [r7, #28]
 800be02:	440a      	add	r2, r1
 800be04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	e00f      	b.n	800be30 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	015a      	lsls	r2, r3, #5
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	4413      	add	r3, r2
 800be18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	0151      	lsls	r1, r2, #5
 800be22:	69fa      	ldr	r2, [r7, #28]
 800be24:	440a      	add	r2, r1
 800be26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	69ba      	ldr	r2, [r7, #24]
 800be40:	0151      	lsls	r1, r2, #5
 800be42:	69fa      	ldr	r2, [r7, #28]
 800be44:	440a      	add	r2, r1
 800be46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3720      	adds	r7, #32
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	1ff80000 	.word	0x1ff80000

0800be60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4613      	mov	r3, r2
 800be6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	785b      	ldrb	r3, [r3, #1]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	f040 80cd 	bne.w	800c01c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d132      	bne.n	800bef0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	015a      	lsls	r2, r3, #5
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	4413      	add	r3, r2
 800be92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	0151      	lsls	r1, r2, #5
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	440a      	add	r2, r1
 800bea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bea8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800beac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	015a      	lsls	r2, r3, #5
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	4413      	add	r3, r2
 800beb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	0151      	lsls	r1, r2, #5
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	440a      	add	r2, r1
 800bec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800becc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	015a      	lsls	r2, r3, #5
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	4413      	add	r3, r2
 800bed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	0151      	lsls	r1, r2, #5
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	440a      	add	r2, r1
 800bee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bee8:	0cdb      	lsrs	r3, r3, #19
 800beea:	04db      	lsls	r3, r3, #19
 800beec:	6113      	str	r3, [r2, #16]
 800beee:	e04e      	b.n	800bf8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	0151      	lsls	r1, r2, #5
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	440a      	add	r2, r1
 800bf06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf0a:	0cdb      	lsrs	r3, r3, #19
 800bf0c:	04db      	lsls	r3, r3, #19
 800bf0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	693a      	ldr	r2, [r7, #16]
 800bf20:	0151      	lsls	r1, r2, #5
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	440a      	add	r2, r1
 800bf26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	695a      	ldr	r2, [r3, #20]
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d903      	bls.n	800bf48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	689a      	ldr	r2, [r3, #8]
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	0151      	lsls	r1, r2, #5
 800bf5a:	697a      	ldr	r2, [r7, #20]
 800bf5c:	440a      	add	r2, r1
 800bf5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf74:	691a      	ldr	r2, [r3, #16]
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf7e:	6939      	ldr	r1, [r7, #16]
 800bf80:	0148      	lsls	r0, r1, #5
 800bf82:	6979      	ldr	r1, [r7, #20]
 800bf84:	4401      	add	r1, r0
 800bf86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d11e      	bne.n	800bfd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	015a      	lsls	r2, r3, #5
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	0151      	lsls	r1, r2, #5
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	440a      	add	r2, r1
 800bfc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	e092      	b.n	800c0f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	015a      	lsls	r2, r3, #5
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	4413      	add	r3, r2
 800bfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	0151      	lsls	r1, r2, #5
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	440a      	add	r2, r1
 800bfe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bff0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d07e      	beq.n	800c0f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	f003 030f 	and.w	r3, r3, #15
 800c00a:	2101      	movs	r1, #1
 800c00c:	fa01 f303 	lsl.w	r3, r1, r3
 800c010:	6979      	ldr	r1, [r7, #20]
 800c012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c016:	4313      	orrs	r3, r2
 800c018:	634b      	str	r3, [r1, #52]	; 0x34
 800c01a:	e06d      	b.n	800c0f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	0151      	lsls	r1, r2, #5
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	440a      	add	r2, r1
 800c032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c036:	0cdb      	lsrs	r3, r3, #19
 800c038:	04db      	lsls	r3, r3, #19
 800c03a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	4413      	add	r3, r2
 800c044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	0151      	lsls	r1, r2, #5
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	440a      	add	r2, r1
 800c052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c056:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c05a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c05e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d003      	beq.n	800c070 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	689a      	ldr	r2, [r3, #8]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	0151      	lsls	r1, r2, #5
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	440a      	add	r2, r1
 800c086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c08a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c08e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c09c:	691a      	ldr	r2, [r3, #16]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0a6:	6939      	ldr	r1, [r7, #16]
 800c0a8:	0148      	lsls	r0, r1, #5
 800c0aa:	6979      	ldr	r1, [r7, #20]
 800c0ac:	4401      	add	r1, r0
 800c0ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c0b6:	79fb      	ldrb	r3, [r7, #7]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d10d      	bne.n	800c0d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d009      	beq.n	800c0d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	68d9      	ldr	r1, [r3, #12]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	015a      	lsls	r2, r3, #5
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0d4:	460a      	mov	r2, r1
 800c0d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	0151      	lsls	r1, r2, #5
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	440a      	add	r2, r1
 800c0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c106:	b480      	push	{r7}
 800c108:	b089      	sub	sp, #36	; 0x24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	60f8      	str	r0, [r7, #12]
 800c10e:	60b9      	str	r1, [r7, #8]
 800c110:	4611      	mov	r1, r2
 800c112:	461a      	mov	r2, r3
 800c114:	460b      	mov	r3, r1
 800c116:	71fb      	strb	r3, [r7, #7]
 800c118:	4613      	mov	r3, r2
 800c11a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c124:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d11a      	bne.n	800c162 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c12c:	88bb      	ldrh	r3, [r7, #4]
 800c12e:	3303      	adds	r3, #3
 800c130:	089b      	lsrs	r3, r3, #2
 800c132:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c134:	2300      	movs	r3, #0
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	e00f      	b.n	800c15a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	031a      	lsls	r2, r3, #12
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	4413      	add	r3, r2
 800c142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c146:	461a      	mov	r2, r3
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	3304      	adds	r3, #4
 800c152:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	3301      	adds	r3, #1
 800c158:	61bb      	str	r3, [r7, #24]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d3eb      	bcc.n	800c13a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3724      	adds	r7, #36	; 0x24
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c170:	b480      	push	{r7}
 800c172:	b089      	sub	sp, #36	; 0x24
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c186:	88fb      	ldrh	r3, [r7, #6]
 800c188:	3303      	adds	r3, #3
 800c18a:	089b      	lsrs	r3, r3, #2
 800c18c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c18e:	2300      	movs	r3, #0
 800c190:	61bb      	str	r3, [r7, #24]
 800c192:	e00b      	b.n	800c1ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	61bb      	str	r3, [r7, #24]
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d3ef      	bcc.n	800c194 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c1b4:	69fb      	ldr	r3, [r7, #28]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3724      	adds	r7, #36	; 0x24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b085      	sub	sp, #20
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	785b      	ldrb	r3, [r3, #1]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d12c      	bne.n	800c238 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	db12      	blt.n	800c216 <USB_EPSetStall+0x54>
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00f      	beq.n	800c216 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	015a      	lsls	r2, r3, #5
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	0151      	lsls	r1, r2, #5
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	440a      	add	r2, r1
 800c20c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c214:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	015a      	lsls	r2, r3, #5
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4413      	add	r3, r2
 800c21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	0151      	lsls	r1, r2, #5
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	440a      	add	r2, r1
 800c22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	e02b      	b.n	800c290 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	db12      	blt.n	800c270 <USB_EPSetStall+0xae>
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00f      	beq.n	800c270 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4413      	add	r3, r2
 800c258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	0151      	lsls	r1, r2, #5
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	440a      	add	r2, r1
 800c266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c26a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c26e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	0151      	lsls	r1, r2, #5
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	440a      	add	r2, r1
 800c286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c28a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c28e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3714      	adds	r7, #20
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b085      	sub	sp, #20
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	785b      	ldrb	r3, [r3, #1]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d128      	bne.n	800c30c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	0151      	lsls	r1, r2, #5
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	440a      	add	r2, r1
 800c2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	78db      	ldrb	r3, [r3, #3]
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d003      	beq.n	800c2ea <USB_EPClearStall+0x4c>
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	78db      	ldrb	r3, [r3, #3]
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d138      	bne.n	800c35c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	0151      	lsls	r1, r2, #5
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	440a      	add	r2, r1
 800c300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c308:	6013      	str	r3, [r2, #0]
 800c30a:	e027      	b.n	800c35c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	0151      	lsls	r1, r2, #5
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	440a      	add	r2, r1
 800c322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c32a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	78db      	ldrb	r3, [r3, #3]
 800c330:	2b03      	cmp	r3, #3
 800c332:	d003      	beq.n	800c33c <USB_EPClearStall+0x9e>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	78db      	ldrb	r3, [r3, #3]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d10f      	bne.n	800c35c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	0151      	lsls	r1, r2, #5
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	440a      	add	r2, r1
 800c352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c35a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b085      	sub	sp, #20
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c388:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c38c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	78fb      	ldrb	r3, [r7, #3]
 800c398:	011b      	lsls	r3, r3, #4
 800c39a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c39e:	68f9      	ldr	r1, [r7, #12]
 800c3a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3d0:	f023 0303 	bic.w	r3, r3, #3
 800c3d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3e4:	f023 0302 	bic.w	r3, r3, #2
 800c3e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c412:	f023 0303 	bic.w	r3, r3, #3
 800c416:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c426:	f043 0302 	orr.w	r3, r3, #2
 800c42a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b085      	sub	sp, #20
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	4013      	ands	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c452:	68fb      	ldr	r3, [r7, #12]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	4013      	ands	r3, r2
 800c482:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	0c1b      	lsrs	r3, r3, #16
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	b29b      	uxth	r3, r3
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c4d8:	78fb      	ldrb	r3, [r7, #3]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c526:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c528:	78fb      	ldrb	r3, [r7, #3]
 800c52a:	f003 030f 	and.w	r3, r3, #15
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	fa22 f303 	lsr.w	r3, r2, r3
 800c534:	01db      	lsls	r3, r3, #7
 800c536:	b2db      	uxtb	r3, r3
 800c538:	693a      	ldr	r2, [r7, #16]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c53e:	78fb      	ldrb	r3, [r7, #3]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	4413      	add	r3, r2
 800c546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	4013      	ands	r3, r2
 800c550:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c552:	68bb      	ldr	r3, [r7, #8]
}
 800c554:	4618      	mov	r0, r3
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	f003 0301 	and.w	r3, r3, #1
}
 800c570:	4618      	mov	r0, r3
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c596:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c59a:	f023 0307 	bic.w	r3, r3, #7
 800c59e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
	...

0800c5c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	333c      	adds	r3, #60	; 0x3c
 800c5da:	3304      	adds	r3, #4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	4a26      	ldr	r2, [pc, #152]	; (800c67c <USB_EP0_OutStart+0xb8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d90a      	bls.n	800c5fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5f8:	d101      	bne.n	800c5fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e037      	b.n	800c66e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c604:	461a      	mov	r2, r3
 800c606:	2300      	movs	r3, #0
 800c608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c61c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c62c:	f043 0318 	orr.w	r3, r3, #24
 800c630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c640:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c644:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c646:	7afb      	ldrb	r3, [r7, #11]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d10f      	bne.n	800c66c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c652:	461a      	mov	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c666:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c66a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	371c      	adds	r7, #28
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	4f54300a 	.word	0x4f54300a

0800c680 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3301      	adds	r3, #1
 800c690:	60fb      	str	r3, [r7, #12]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4a13      	ldr	r2, [pc, #76]	; (800c6e4 <USB_CoreReset+0x64>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d901      	bls.n	800c69e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e01b      	b.n	800c6d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	daf2      	bge.n	800c68c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	f043 0201 	orr.w	r2, r3, #1
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	4a09      	ldr	r2, [pc, #36]	; (800c6e4 <USB_CoreReset+0x64>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d901      	bls.n	800c6c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e006      	b.n	800c6d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d0f0      	beq.n	800c6b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	00030d40 	.word	0x00030d40

0800c6e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c6ec:	4904      	ldr	r1, [pc, #16]	; (800c700 <MX_FATFS_Init+0x18>)
 800c6ee:	4805      	ldr	r0, [pc, #20]	; (800c704 <MX_FATFS_Init+0x1c>)
 800c6f0:	f002 f9c0 	bl	800ea74 <FATFS_LinkDriver>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	4b03      	ldr	r3, [pc, #12]	; (800c708 <MX_FATFS_Init+0x20>)
 800c6fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6fc:	bf00      	nop
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	20004860 	.word	0x20004860
 800c704:	20000288 	.word	0x20000288
 800c708:	20004864 	.word	0x20004864

0800c70c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 f9d7 	bl	800cacc <USER_SPI_initialize>
 800c71e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fab3 	bl	800cca0 <USER_SPI_status>
 800c73a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
 800c74e:	603b      	str	r3, [r7, #0]
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800c754:	7bf8      	ldrb	r0, [r7, #15]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	68b9      	ldr	r1, [r7, #8]
 800c75c:	f000 fab6 	bl	800cccc <USER_SPI_read>
 800c760:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	603b      	str	r3, [r7, #0]
 800c776:	4603      	mov	r3, r0
 800c778:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800c77a:	7bf8      	ldrb	r0, [r7, #15]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	68b9      	ldr	r1, [r7, #8]
 800c782:	f000 fb09 	bl	800cd98 <USER_SPI_write>
 800c786:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	603a      	str	r2, [r7, #0]
 800c79a:	71fb      	strb	r3, [r7, #7]
 800c79c:	460b      	mov	r3, r1
 800c79e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800c7a0:	79b9      	ldrb	r1, [r7, #6]
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fb72 	bl	800ce90 <USER_SPI_ioctl>
 800c7ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c7c0:	f7f8 ff2a 	bl	8005618 <HAL_GetTick>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	4b04      	ldr	r3, [pc, #16]	; (800c7d8 <SPI_Timer_On+0x20>)
 800c7c8:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800c7ca:	4a04      	ldr	r2, [pc, #16]	; (800c7dc <SPI_Timer_On+0x24>)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6013      	str	r3, [r2, #0]
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20004ccc 	.word	0x20004ccc
 800c7dc:	20004cd0 	.word	0x20004cd0

0800c7e0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c7e4:	f7f8 ff18 	bl	8005618 <HAL_GetTick>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	4b06      	ldr	r3, [pc, #24]	; (800c804 <SPI_Timer_Status+0x24>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	4b05      	ldr	r3, [pc, #20]	; (800c808 <SPI_Timer_Status+0x28>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	bf34      	ite	cc
 800c7f8:	2301      	movcc	r3, #1
 800c7fa:	2300      	movcs	r3, #0
 800c7fc:	b2db      	uxtb	r3, r3
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20004ccc 	.word	0x20004ccc
 800c808:	20004cd0 	.word	0x20004cd0

0800c80c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af02      	add	r7, sp, #8
 800c812:	4603      	mov	r3, r0
 800c814:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c816:	f107 020f 	add.w	r2, r7, #15
 800c81a:	1df9      	adds	r1, r7, #7
 800c81c:	2332      	movs	r3, #50	; 0x32
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	2301      	movs	r3, #1
 800c822:	4804      	ldr	r0, [pc, #16]	; (800c834 <xchg_spi+0x28>)
 800c824:	f7fd fa79 	bl	8009d1a <HAL_SPI_TransmitReceive>
    return rxDat;
 800c828:	7bfb      	ldrb	r3, [r7, #15]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	2000477c 	.word	0x2000477c

0800c838 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800c842:	2300      	movs	r3, #0
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e00a      	b.n	800c85e <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	18d4      	adds	r4, r2, r3
 800c84e:	20ff      	movs	r0, #255	; 0xff
 800c850:	f7ff ffdc 	bl	800c80c <xchg_spi>
 800c854:	4603      	mov	r3, r0
 800c856:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	3301      	adds	r3, #1
 800c85c:	60fb      	str	r3, [r7, #12]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d3f0      	bcc.n	800c848 <rcvr_spi_multi+0x10>
    }
}
 800c866:	bf00      	nop
 800c868:	3714      	adds	r7, #20
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd90      	pop	{r4, r7, pc}

0800c86e <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800c878:	2300      	movs	r3, #0
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	e009      	b.n	800c892 <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	4413      	add	r3, r2
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff ffc0 	bl	800c80c <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3301      	adds	r3, #1
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d3f1      	bcc.n	800c87e <xmit_spi_multi+0x10>
    }
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b086      	sub	sp, #24
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800c8aa:	f7f8 feb5 	bl	8005618 <HAL_GetTick>
 800c8ae:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800c8b4:	20ff      	movs	r0, #255	; 0xff
 800c8b6:	f7ff ffa9 	bl	800c80c <xchg_spi>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
 800c8c0:	2bff      	cmp	r3, #255	; 0xff
 800c8c2:	d007      	beq.n	800c8d4 <wait_ready+0x32>
 800c8c4:	f7f8 fea8 	bl	8005618 <HAL_GetTick>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d8ef      	bhi.n	800c8b4 <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
 800c8d6:	2bff      	cmp	r3, #255	; 0xff
 800c8d8:	bf0c      	ite	eq
 800c8da:	2301      	moveq	r3, #1
 800c8dc:	2300      	movne	r3, #0
 800c8de:	b2db      	uxtb	r3, r3
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	2110      	movs	r1, #16
 800c8f0:	4803      	ldr	r0, [pc, #12]	; (800c900 <despiselect+0x18>)
 800c8f2:	f7f9 fd15 	bl	8006320 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c8f6:	20ff      	movs	r0, #255	; 0xff
 800c8f8:	f7ff ff88 	bl	800c80c <xchg_spi>

}
 800c8fc:	bf00      	nop
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	40020800 	.word	0x40020800

0800c904 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800c904:	b580      	push	{r7, lr}
 800c906:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800c908:	2200      	movs	r2, #0
 800c90a:	2110      	movs	r1, #16
 800c90c:	4809      	ldr	r0, [pc, #36]	; (800c934 <spiselect+0x30>)
 800c90e:	f7f9 fd07 	bl	8006320 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800c912:	20ff      	movs	r0, #255	; 0xff
 800c914:	f7ff ff7a 	bl	800c80c <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800c918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c91c:	f7ff ffc1 	bl	800c8a2 <wait_ready>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <spiselect+0x26>
 800c926:	2301      	movs	r3, #1
 800c928:	e002      	b.n	800c930 <spiselect+0x2c>

    despiselect();
 800c92a:	f7ff ffdd 	bl	800c8e8 <despiselect>
    return 0;   /* Timeout */
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	bd80      	pop	{r7, pc}
 800c934:	40020800 	.word	0x40020800

0800c938 <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800c942:	20c8      	movs	r0, #200	; 0xc8
 800c944:	f7ff ff38 	bl	800c7b8 <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800c948:	20ff      	movs	r0, #255	; 0xff
 800c94a:	f7ff ff5f 	bl	800c80c <xchg_spi>
 800c94e:	4603      	mov	r3, r0
 800c950:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800c952:	7bfb      	ldrb	r3, [r7, #15]
 800c954:	2bff      	cmp	r3, #255	; 0xff
 800c956:	d104      	bne.n	800c962 <rcvr_datablock+0x2a>
 800c958:	f7ff ff42 	bl	800c7e0 <SPI_Timer_Status>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f2      	bne.n	800c948 <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	2bfe      	cmp	r3, #254	; 0xfe
 800c966:	d001      	beq.n	800c96c <rcvr_datablock+0x34>
 800c968:	2300      	movs	r3, #0
 800c96a:	e00a      	b.n	800c982 <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff ff62 	bl	800c838 <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800c974:	20ff      	movs	r0, #255	; 0xff
 800c976:	f7ff ff49 	bl	800c80c <xchg_spi>
 800c97a:	20ff      	movs	r0, #255	; 0xff
 800c97c:	f7ff ff46 	bl	800c80c <xchg_spi>

    return 1;                       /* Function succeeded */
 800c980:	2301      	movs	r3, #1
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	460b      	mov	r3, r1
 800c994:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800c996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c99a:	f7ff ff82 	bl	800c8a2 <wait_ready>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <xmit_datablock+0x1e>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	e01e      	b.n	800c9e6 <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800c9a8:	78fb      	ldrb	r3, [r7, #3]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7ff ff2e 	bl	800c80c <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800c9b0:	78fb      	ldrb	r3, [r7, #3]
 800c9b2:	2bfd      	cmp	r3, #253	; 0xfd
 800c9b4:	d016      	beq.n	800c9e4 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800c9b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff ff57 	bl	800c86e <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800c9c0:	20ff      	movs	r0, #255	; 0xff
 800c9c2:	f7ff ff23 	bl	800c80c <xchg_spi>
 800c9c6:	20ff      	movs	r0, #255	; 0xff
 800c9c8:	f7ff ff20 	bl	800c80c <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800c9cc:	20ff      	movs	r0, #255	; 0xff
 800c9ce:	f7ff ff1d 	bl	800c80c <xchg_spi>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800c9d6:	7bfb      	ldrb	r3, [r7, #15]
 800c9d8:	f003 031f 	and.w	r3, r3, #31
 800c9dc:	2b05      	cmp	r3, #5
 800c9de:	d001      	beq.n	800c9e4 <xmit_datablock+0x5a>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e000      	b.n	800c9e6 <xmit_datablock+0x5c>
    }
    return 1;
 800c9e4:	2301      	movs	r3, #1
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	6039      	str	r1, [r7, #0]
 800c9f8:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800c9fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	da0e      	bge.n	800ca20 <send_cmd+0x32>
        cmd &= 0x7F;
 800ca02:	79fb      	ldrb	r3, [r7, #7]
 800ca04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca08:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	2037      	movs	r0, #55	; 0x37
 800ca0e:	f7ff ffee 	bl	800c9ee <send_cmd>
 800ca12:	4603      	mov	r3, r0
 800ca14:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d901      	bls.n	800ca20 <send_cmd+0x32>
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	e051      	b.n	800cac4 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	2b0c      	cmp	r3, #12
 800ca24:	d008      	beq.n	800ca38 <send_cmd+0x4a>
        despiselect();
 800ca26:	f7ff ff5f 	bl	800c8e8 <despiselect>
        if (!spiselect()) return 0xFF;
 800ca2a:	f7ff ff6b 	bl	800c904 <spiselect>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <send_cmd+0x4a>
 800ca34:	23ff      	movs	r3, #255	; 0xff
 800ca36:	e045      	b.n	800cac4 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7ff fee3 	bl	800c80c <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	0e1b      	lsrs	r3, r3, #24
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7ff fedd 	bl	800c80c <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	0c1b      	lsrs	r3, r3, #16
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff fed7 	bl	800c80c <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	0a1b      	lsrs	r3, r3, #8
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7ff fed1 	bl	800c80c <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7ff fecc 	bl	800c80c <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800ca74:	2301      	movs	r3, #1
 800ca76:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <send_cmd+0x94>
 800ca7e:	2395      	movs	r3, #149	; 0x95
 800ca80:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d101      	bne.n	800ca8c <send_cmd+0x9e>
 800ca88:	2387      	movs	r3, #135	; 0x87
 800ca8a:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff febc 	bl	800c80c <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	2b0c      	cmp	r3, #12
 800ca98:	d102      	bne.n	800caa0 <send_cmd+0xb2>
 800ca9a:	20ff      	movs	r0, #255	; 0xff
 800ca9c:	f7ff feb6 	bl	800c80c <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800caa0:	230a      	movs	r3, #10
 800caa2:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800caa4:	20ff      	movs	r0, #255	; 0xff
 800caa6:	f7ff feb1 	bl	800c80c <xchg_spi>
 800caaa:	4603      	mov	r3, r0
 800caac:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800caae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	da05      	bge.n	800cac2 <send_cmd+0xd4>
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	3b01      	subs	r3, #1
 800caba:	73fb      	strb	r3, [r7, #15]
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1f0      	bne.n	800caa4 <send_cmd+0xb6>

    return res;                         /* Return received response */
 800cac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800cacc:	b590      	push	{r4, r7, lr}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <USER_SPI_initialize+0x14>
 800cadc:	2301      	movs	r3, #1
 800cade:	e0d4      	b.n	800cc8a <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800cae0:	4b6c      	ldr	r3, [pc, #432]	; (800cc94 <USER_SPI_initialize+0x1c8>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	f003 0302 	and.w	r3, r3, #2
 800caea:	2b00      	cmp	r3, #0
 800caec:	d003      	beq.n	800caf6 <USER_SPI_initialize+0x2a>
 800caee:	4b69      	ldr	r3, [pc, #420]	; (800cc94 <USER_SPI_initialize+0x1c8>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	e0c9      	b.n	800cc8a <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800caf6:	4b68      	ldr	r3, [pc, #416]	; (800cc98 <USER_SPI_initialize+0x1cc>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	4b66      	ldr	r3, [pc, #408]	; (800cc98 <USER_SPI_initialize+0x1cc>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800cb04:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800cb06:	230a      	movs	r3, #10
 800cb08:	73fb      	strb	r3, [r7, #15]
 800cb0a:	e005      	b.n	800cb18 <USER_SPI_initialize+0x4c>
 800cb0c:	20ff      	movs	r0, #255	; 0xff
 800cb0e:	f7ff fe7d 	bl	800c80c <xchg_spi>
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	73fb      	strb	r3, [r7, #15]
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f6      	bne.n	800cb0c <USER_SPI_initialize+0x40>

    ty = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800cb22:	2100      	movs	r1, #0
 800cb24:	2000      	movs	r0, #0
 800cb26:	f7ff ff62 	bl	800c9ee <send_cmd>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	f040 808b 	bne.w	800cc48 <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800cb32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cb36:	f7ff fe3f 	bl	800c7b8 <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800cb3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb3e:	2008      	movs	r0, #8
 800cb40:	f7ff ff55 	bl	800c9ee <send_cmd>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d151      	bne.n	800cbee <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
 800cb4e:	e00d      	b.n	800cb6c <USER_SPI_initialize+0xa0>
 800cb50:	7bfc      	ldrb	r4, [r7, #15]
 800cb52:	20ff      	movs	r0, #255	; 0xff
 800cb54:	f7ff fe5a 	bl	800c80c <xchg_spi>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f107 0310 	add.w	r3, r7, #16
 800cb60:	4423      	add	r3, r4
 800cb62:	f803 2c08 	strb.w	r2, [r3, #-8]
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	73fb      	strb	r3, [r7, #15]
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d9ee      	bls.n	800cb50 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800cb72:	7abb      	ldrb	r3, [r7, #10]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d167      	bne.n	800cc48 <USER_SPI_initialize+0x17c>
 800cb78:	7afb      	ldrb	r3, [r7, #11]
 800cb7a:	2baa      	cmp	r3, #170	; 0xaa
 800cb7c:	d164      	bne.n	800cc48 <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800cb7e:	bf00      	nop
 800cb80:	f7ff fe2e 	bl	800c7e0 <SPI_Timer_Status>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d007      	beq.n	800cb9a <USER_SPI_initialize+0xce>
 800cb8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cb8e:	20a9      	movs	r0, #169	; 0xa9
 800cb90:	f7ff ff2d 	bl	800c9ee <send_cmd>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1f2      	bne.n	800cb80 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800cb9a:	f7ff fe21 	bl	800c7e0 <SPI_Timer_Status>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d051      	beq.n	800cc48 <USER_SPI_initialize+0x17c>
 800cba4:	2100      	movs	r1, #0
 800cba6:	203a      	movs	r0, #58	; 0x3a
 800cba8:	f7ff ff21 	bl	800c9ee <send_cmd>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d14a      	bne.n	800cc48 <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73fb      	strb	r3, [r7, #15]
 800cbb6:	e00d      	b.n	800cbd4 <USER_SPI_initialize+0x108>
 800cbb8:	7bfc      	ldrb	r4, [r7, #15]
 800cbba:	20ff      	movs	r0, #255	; 0xff
 800cbbc:	f7ff fe26 	bl	800c80c <xchg_spi>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	f107 0310 	add.w	r3, r7, #16
 800cbc8:	4423      	add	r3, r4
 800cbca:	f803 2c08 	strb.w	r2, [r3, #-8]
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	73fb      	strb	r3, [r7, #15]
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d9ee      	bls.n	800cbb8 <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800cbda:	7a3b      	ldrb	r3, [r7, #8]
 800cbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <USER_SPI_initialize+0x11c>
 800cbe4:	230c      	movs	r3, #12
 800cbe6:	e000      	b.n	800cbea <USER_SPI_initialize+0x11e>
 800cbe8:	2304      	movs	r3, #4
 800cbea:	737b      	strb	r3, [r7, #13]
 800cbec:	e02c      	b.n	800cc48 <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800cbee:	2100      	movs	r1, #0
 800cbf0:	20a9      	movs	r0, #169	; 0xa9
 800cbf2:	f7ff fefc 	bl	800c9ee <send_cmd>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d804      	bhi.n	800cc06 <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	737b      	strb	r3, [r7, #13]
 800cc00:	23a9      	movs	r3, #169	; 0xa9
 800cc02:	73bb      	strb	r3, [r7, #14]
 800cc04:	e003      	b.n	800cc0e <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800cc06:	2301      	movs	r3, #1
 800cc08:	737b      	strb	r3, [r7, #13]
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800cc0e:	bf00      	nop
 800cc10:	f7ff fde6 	bl	800c7e0 <SPI_Timer_Status>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d007      	beq.n	800cc2a <USER_SPI_initialize+0x15e>
 800cc1a:	7bbb      	ldrb	r3, [r7, #14]
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7ff fee5 	bl	800c9ee <send_cmd>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1f2      	bne.n	800cc10 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800cc2a:	f7ff fdd9 	bl	800c7e0 <SPI_Timer_Status>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d007      	beq.n	800cc44 <USER_SPI_initialize+0x178>
 800cc34:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc38:	2010      	movs	r0, #16
 800cc3a:	f7ff fed8 	bl	800c9ee <send_cmd>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <USER_SPI_initialize+0x17c>
                ty = 0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800cc48:	4a14      	ldr	r2, [pc, #80]	; (800cc9c <USER_SPI_initialize+0x1d0>)
 800cc4a:	7b7b      	ldrb	r3, [r7, #13]
 800cc4c:	7013      	strb	r3, [r2, #0]
    despiselect();
 800cc4e:	f7ff fe4b 	bl	800c8e8 <despiselect>

    if (ty) {           /* OK */
 800cc52:	7b7b      	ldrb	r3, [r7, #13]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d012      	beq.n	800cc7e <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800cc58:	4b0f      	ldr	r3, [pc, #60]	; (800cc98 <USER_SPI_initialize+0x1cc>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cc62:	4b0d      	ldr	r3, [pc, #52]	; (800cc98 <USER_SPI_initialize+0x1cc>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f042 0220 	orr.w	r2, r2, #32
 800cc6a:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800cc6c:	4b09      	ldr	r3, [pc, #36]	; (800cc94 <USER_SPI_initialize+0x1c8>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	f023 0301 	bic.w	r3, r3, #1
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <USER_SPI_initialize+0x1c8>)
 800cc7a:	701a      	strb	r2, [r3, #0]
 800cc7c:	e002      	b.n	800cc84 <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <USER_SPI_initialize+0x1c8>)
 800cc80:	2201      	movs	r2, #1
 800cc82:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800cc84:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <USER_SPI_initialize+0x1c8>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	b2db      	uxtb	r3, r3
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd90      	pop	{r4, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	2000029c 	.word	0x2000029c
 800cc98:	2000477c 	.word	0x2000477c
 800cc9c:	20000880 	.word	0x20000880

0800cca0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <USER_SPI_status+0x14>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e002      	b.n	800ccba <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <USER_SPI_status+0x28>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	b2db      	uxtb	r3, r3
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	2000029c 	.word	0x2000029c

0800cccc <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
 800ccd6:	603b      	str	r3, [r7, #0]
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d102      	bne.n	800cce8 <USER_SPI_read+0x1c>
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <USER_SPI_read+0x20>
 800cce8:	2304      	movs	r3, #4
 800ccea:	e04d      	b.n	800cd88 <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800ccec:	4b28      	ldr	r3, [pc, #160]	; (800cd90 <USER_SPI_read+0xc4>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <USER_SPI_read+0x32>
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e044      	b.n	800cd88 <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800ccfe:	4b25      	ldr	r3, [pc, #148]	; (800cd94 <USER_SPI_read+0xc8>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	f003 0308 	and.w	r3, r3, #8
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <USER_SPI_read+0x44>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	025b      	lsls	r3, r3, #9
 800cd0e:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d111      	bne.n	800cd3a <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800cd16:	6879      	ldr	r1, [r7, #4]
 800cd18:	2011      	movs	r0, #17
 800cd1a:	f7ff fe68 	bl	800c9ee <send_cmd>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d129      	bne.n	800cd78 <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800cd24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd28:	68b8      	ldr	r0, [r7, #8]
 800cd2a:	f7ff fe05 	bl	800c938 <rcvr_datablock>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d021      	beq.n	800cd78 <USER_SPI_read+0xac>
            count = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	e01e      	b.n	800cd78 <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800cd3a:	6879      	ldr	r1, [r7, #4]
 800cd3c:	2012      	movs	r0, #18
 800cd3e:	f7ff fe56 	bl	800c9ee <send_cmd>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d117      	bne.n	800cd78 <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800cd48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd4c:	68b8      	ldr	r0, [r7, #8]
 800cd4e:	f7ff fdf3 	bl	800c938 <rcvr_datablock>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00a      	beq.n	800cd6e <USER_SPI_read+0xa2>
                buff += 512;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cd5e:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	3b01      	subs	r3, #1
 800cd64:	603b      	str	r3, [r7, #0]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1ed      	bne.n	800cd48 <USER_SPI_read+0x7c>
 800cd6c:	e000      	b.n	800cd70 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800cd6e:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800cd70:	2100      	movs	r1, #0
 800cd72:	200c      	movs	r0, #12
 800cd74:	f7ff fe3b 	bl	800c9ee <send_cmd>
        }
    }
    despiselect();
 800cd78:	f7ff fdb6 	bl	800c8e8 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	bf14      	ite	ne
 800cd82:	2301      	movne	r3, #1
 800cd84:	2300      	moveq	r3, #0
 800cd86:	b2db      	uxtb	r3, r3
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	2000029c 	.word	0x2000029c
 800cd94:	20000880 	.word	0x20000880

0800cd98 <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
 800cda2:	603b      	str	r3, [r7, #0]
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d102      	bne.n	800cdb4 <USER_SPI_write+0x1c>
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d101      	bne.n	800cdb8 <USER_SPI_write+0x20>
 800cdb4:	2304      	movs	r3, #4
 800cdb6:	e063      	b.n	800ce80 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800cdb8:	4b33      	ldr	r3, [pc, #204]	; (800ce88 <USER_SPI_write+0xf0>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <USER_SPI_write+0x32>
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	e05a      	b.n	800ce80 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800cdca:	4b2f      	ldr	r3, [pc, #188]	; (800ce88 <USER_SPI_write+0xf0>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	f003 0304 	and.w	r3, r3, #4
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <USER_SPI_write+0x44>
 800cdd8:	2302      	movs	r3, #2
 800cdda:	e051      	b.n	800ce80 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800cddc:	4b2b      	ldr	r3, [pc, #172]	; (800ce8c <USER_SPI_write+0xf4>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	f003 0308 	and.w	r3, r3, #8
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <USER_SPI_write+0x56>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	025b      	lsls	r3, r3, #9
 800cdec:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d110      	bne.n	800ce16 <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	2018      	movs	r0, #24
 800cdf8:	f7ff fdf9 	bl	800c9ee <send_cmd>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d136      	bne.n	800ce70 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800ce02:	21fe      	movs	r1, #254	; 0xfe
 800ce04:	68b8      	ldr	r0, [r7, #8]
 800ce06:	f7ff fdc0 	bl	800c98a <xmit_datablock>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d02f      	beq.n	800ce70 <USER_SPI_write+0xd8>
            count = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	603b      	str	r3, [r7, #0]
 800ce14:	e02c      	b.n	800ce70 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800ce16:	4b1d      	ldr	r3, [pc, #116]	; (800ce8c <USER_SPI_write+0xf4>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	f003 0306 	and.w	r3, r3, #6
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d003      	beq.n	800ce2a <USER_SPI_write+0x92>
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	2097      	movs	r0, #151	; 0x97
 800ce26:	f7ff fde2 	bl	800c9ee <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800ce2a:	6879      	ldr	r1, [r7, #4]
 800ce2c:	2019      	movs	r0, #25
 800ce2e:	f7ff fdde 	bl	800c9ee <send_cmd>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d11b      	bne.n	800ce70 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800ce38:	21fc      	movs	r1, #252	; 0xfc
 800ce3a:	68b8      	ldr	r0, [r7, #8]
 800ce3c:	f7ff fda5 	bl	800c98a <xmit_datablock>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <USER_SPI_write+0xc4>
                buff += 512;
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ce4c:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	603b      	str	r3, [r7, #0]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1ee      	bne.n	800ce38 <USER_SPI_write+0xa0>
 800ce5a:	e000      	b.n	800ce5e <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800ce5c:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800ce5e:	21fd      	movs	r1, #253	; 0xfd
 800ce60:	2000      	movs	r0, #0
 800ce62:	f7ff fd92 	bl	800c98a <xmit_datablock>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <USER_SPI_write+0xd8>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800ce70:	f7ff fd3a 	bl	800c8e8 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	bf14      	ite	ne
 800ce7a:	2301      	movne	r3, #1
 800ce7c:	2300      	moveq	r3, #0
 800ce7e:	b2db      	uxtb	r3, r3
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	2000029c 	.word	0x2000029c
 800ce8c:	20000880 	.word	0x20000880

0800ce90 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08c      	sub	sp, #48	; 0x30
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	603a      	str	r2, [r7, #0]
 800ce9a:	71fb      	strb	r3, [r7, #7]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d001      	beq.n	800ceaa <USER_SPI_ioctl+0x1a>
 800cea6:	2304      	movs	r3, #4
 800cea8:	e15a      	b.n	800d160 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800ceaa:	4baf      	ldr	r3, [pc, #700]	; (800d168 <USER_SPI_ioctl+0x2d8>)
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <USER_SPI_ioctl+0x2c>
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e151      	b.n	800d160 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800cec2:	79bb      	ldrb	r3, [r7, #6]
 800cec4:	2b04      	cmp	r3, #4
 800cec6:	f200 8136 	bhi.w	800d136 <USER_SPI_ioctl+0x2a6>
 800ceca:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <USER_SPI_ioctl+0x40>)
 800cecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced0:	0800cee5 	.word	0x0800cee5
 800ced4:	0800cef9 	.word	0x0800cef9
 800ced8:	0800d137 	.word	0x0800d137
 800cedc:	0800cfa5 	.word	0x0800cfa5
 800cee0:	0800d09b 	.word	0x0800d09b
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800cee4:	f7ff fd0e 	bl	800c904 <spiselect>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 8127 	beq.w	800d13e <USER_SPI_ioctl+0x2ae>
 800cef0:	2300      	movs	r3, #0
 800cef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800cef6:	e122      	b.n	800d13e <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800cef8:	2100      	movs	r1, #0
 800cefa:	2009      	movs	r0, #9
 800cefc:	f7ff fd77 	bl	800c9ee <send_cmd>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f040 811d 	bne.w	800d142 <USER_SPI_ioctl+0x2b2>
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	2110      	movs	r1, #16
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff fd12 	bl	800c938 <rcvr_datablock>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f000 8113 	beq.w	800d142 <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800cf1c:	7b3b      	ldrb	r3, [r7, #12]
 800cf1e:	099b      	lsrs	r3, r3, #6
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d111      	bne.n	800cf4a <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800cf26:	7d7b      	ldrb	r3, [r7, #21]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	7d3b      	ldrb	r3, [r7, #20]
 800cf2c:	021b      	lsls	r3, r3, #8
 800cf2e:	4413      	add	r3, r2
 800cf30:	461a      	mov	r2, r3
 800cf32:	7cfb      	ldrb	r3, [r7, #19]
 800cf34:	041b      	lsls	r3, r3, #16
 800cf36:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800cf3a:	4413      	add	r3, r2
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	029a      	lsls	r2, r3, #10
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	601a      	str	r2, [r3, #0]
 800cf48:	e028      	b.n	800cf9c <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800cf4a:	7c7b      	ldrb	r3, [r7, #17]
 800cf4c:	f003 030f 	and.w	r3, r3, #15
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	7dbb      	ldrb	r3, [r7, #22]
 800cf54:	09db      	lsrs	r3, r3, #7
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	4413      	add	r3, r2
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	7d7b      	ldrb	r3, [r7, #21]
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	f003 0306 	and.w	r3, r3, #6
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	4413      	add	r3, r2
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	3302      	adds	r3, #2
 800cf6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800cf72:	7d3b      	ldrb	r3, [r7, #20]
 800cf74:	099b      	lsrs	r3, r3, #6
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	7cfb      	ldrb	r3, [r7, #19]
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	441a      	add	r2, r3
 800cf80:	7cbb      	ldrb	r3, [r7, #18]
 800cf82:	029b      	lsls	r3, r3, #10
 800cf84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cf88:	4413      	add	r3, r2
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800cf8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cf92:	3b09      	subs	r3, #9
 800cf94:	69fa      	ldr	r2, [r7, #28]
 800cf96:	409a      	lsls	r2, r3
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800cfa2:	e0ce      	b.n	800d142 <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800cfa4:	4b71      	ldr	r3, [pc, #452]	; (800d16c <USER_SPI_ioctl+0x2dc>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d031      	beq.n	800d014 <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	208d      	movs	r0, #141	; 0x8d
 800cfb4:	f7ff fd1b 	bl	800c9ee <send_cmd>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f040 80c3 	bne.w	800d146 <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800cfc0:	20ff      	movs	r0, #255	; 0xff
 800cfc2:	f7ff fc23 	bl	800c80c <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800cfc6:	f107 030c 	add.w	r3, r7, #12
 800cfca:	2110      	movs	r1, #16
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff fcb3 	bl	800c938 <rcvr_datablock>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 80b6 	beq.w	800d146 <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800cfda:	2330      	movs	r3, #48	; 0x30
 800cfdc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cfe0:	e007      	b.n	800cff2 <USER_SPI_ioctl+0x162>
 800cfe2:	20ff      	movs	r0, #255	; 0xff
 800cfe4:	f7ff fc12 	bl	800c80c <xchg_spi>
 800cfe8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cfec:	3b01      	subs	r3, #1
 800cfee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cff2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f3      	bne.n	800cfe2 <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800cffa:	7dbb      	ldrb	r3, [r7, #22]
 800cffc:	091b      	lsrs	r3, r3, #4
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	461a      	mov	r2, r3
 800d002:	2310      	movs	r3, #16
 800d004:	fa03 f202 	lsl.w	r2, r3, r2
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800d012:	e098      	b.n	800d146 <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800d014:	2100      	movs	r1, #0
 800d016:	2009      	movs	r0, #9
 800d018:	f7ff fce9 	bl	800c9ee <send_cmd>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f040 8091 	bne.w	800d146 <USER_SPI_ioctl+0x2b6>
 800d024:	f107 030c 	add.w	r3, r7, #12
 800d028:	2110      	movs	r1, #16
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff fc84 	bl	800c938 <rcvr_datablock>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 8087 	beq.w	800d146 <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800d038:	4b4c      	ldr	r3, [pc, #304]	; (800d16c <USER_SPI_ioctl+0x2dc>)
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	f003 0302 	and.w	r3, r3, #2
 800d040:	2b00      	cmp	r3, #0
 800d042:	d012      	beq.n	800d06a <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800d044:	7dbb      	ldrb	r3, [r7, #22]
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d04c:	7dfa      	ldrb	r2, [r7, #23]
 800d04e:	09d2      	lsrs	r2, r2, #7
 800d050:	b2d2      	uxtb	r2, r2
 800d052:	4413      	add	r3, r2
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	7e7b      	ldrb	r3, [r7, #25]
 800d058:	099b      	lsrs	r3, r3, #6
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	3b01      	subs	r3, #1
 800d05e:	fa02 f303 	lsl.w	r3, r2, r3
 800d062:	461a      	mov	r2, r3
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	e013      	b.n	800d092 <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800d06a:	7dbb      	ldrb	r3, [r7, #22]
 800d06c:	109b      	asrs	r3, r3, #2
 800d06e:	b29b      	uxth	r3, r3
 800d070:	f003 031f 	and.w	r3, r3, #31
 800d074:	3301      	adds	r3, #1
 800d076:	7dfa      	ldrb	r2, [r7, #23]
 800d078:	00d2      	lsls	r2, r2, #3
 800d07a:	f002 0218 	and.w	r2, r2, #24
 800d07e:	7df9      	ldrb	r1, [r7, #23]
 800d080:	0949      	lsrs	r1, r1, #5
 800d082:	b2c9      	uxtb	r1, r1
 800d084:	440a      	add	r2, r1
 800d086:	3201      	adds	r2, #1
 800d088:	fb02 f303 	mul.w	r3, r2, r3
 800d08c:	461a      	mov	r2, r3
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800d098:	e055      	b.n	800d146 <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800d09a:	4b34      	ldr	r3, [pc, #208]	; (800d16c <USER_SPI_ioctl+0x2dc>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	f003 0306 	and.w	r3, r3, #6
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d051      	beq.n	800d14a <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800d0a6:	f107 020c 	add.w	r2, r7, #12
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	210b      	movs	r1, #11
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7ff feee 	bl	800ce90 <USER_SPI_ioctl>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d149      	bne.n	800d14e <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800d0ba:	7b3b      	ldrb	r3, [r7, #12]
 800d0bc:	099b      	lsrs	r3, r3, #6
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <USER_SPI_ioctl+0x23e>
 800d0c4:	7dbb      	ldrb	r3, [r7, #22]
 800d0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d041      	beq.n	800d152 <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	623b      	str	r3, [r7, #32]
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0d8:	6a3b      	ldr	r3, [r7, #32]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800d0de:	4b23      	ldr	r3, [pc, #140]	; (800d16c <USER_SPI_ioctl+0x2dc>)
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	f003 0308 	and.w	r3, r3, #8
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d105      	bne.n	800d0f6 <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	025b      	lsls	r3, r3, #9
 800d0ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f2:	025b      	lsls	r3, r3, #9
 800d0f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800d0f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0f8:	2020      	movs	r0, #32
 800d0fa:	f7ff fc78 	bl	800c9ee <send_cmd>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d128      	bne.n	800d156 <USER_SPI_ioctl+0x2c6>
 800d104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d106:	2021      	movs	r0, #33	; 0x21
 800d108:	f7ff fc71 	bl	800c9ee <send_cmd>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d121      	bne.n	800d156 <USER_SPI_ioctl+0x2c6>
 800d112:	2100      	movs	r1, #0
 800d114:	2026      	movs	r0, #38	; 0x26
 800d116:	f7ff fc6a 	bl	800c9ee <send_cmd>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11a      	bne.n	800d156 <USER_SPI_ioctl+0x2c6>
 800d120:	f247 5030 	movw	r0, #30000	; 0x7530
 800d124:	f7ff fbbd 	bl	800c8a2 <wait_ready>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d013      	beq.n	800d156 <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800d12e:	2300      	movs	r3, #0
 800d130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800d134:	e00f      	b.n	800d156 <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800d136:	2304      	movs	r3, #4
 800d138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d13c:	e00c      	b.n	800d158 <USER_SPI_ioctl+0x2c8>
        break;
 800d13e:	bf00      	nop
 800d140:	e00a      	b.n	800d158 <USER_SPI_ioctl+0x2c8>
        break;
 800d142:	bf00      	nop
 800d144:	e008      	b.n	800d158 <USER_SPI_ioctl+0x2c8>
        break;
 800d146:	bf00      	nop
 800d148:	e006      	b.n	800d158 <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800d14a:	bf00      	nop
 800d14c:	e004      	b.n	800d158 <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800d14e:	bf00      	nop
 800d150:	e002      	b.n	800d158 <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800d152:	bf00      	nop
 800d154:	e000      	b.n	800d158 <USER_SPI_ioctl+0x2c8>
        break;
 800d156:	bf00      	nop
    }

    despiselect();
 800d158:	f7ff fbc6 	bl	800c8e8 <despiselect>

    return res;
 800d15c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d160:	4618      	mov	r0, r3
 800d162:	3730      	adds	r7, #48	; 0x30
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	2000029c 	.word	0x2000029c
 800d16c:	20000880 	.word	0x20000880

0800d170 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d17c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d180:	f004 fce2 	bl	8011b48 <malloc>
 800d184:	4603      	mov	r3, r0
 800d186:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d105      	bne.n	800d19a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d196:	2302      	movs	r3, #2
 800d198:	e066      	b.n	800d268 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7c1b      	ldrb	r3, [r3, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d119      	bne.n	800d1de <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d1aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	2181      	movs	r1, #129	; 0x81
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f004 fad1 	bl	801175a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f004 fac7 	bl	801175a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2210      	movs	r2, #16
 800d1d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d1dc:	e016      	b.n	800d20c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d1de:	2340      	movs	r3, #64	; 0x40
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	2181      	movs	r1, #129	; 0x81
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f004 fab8 	bl	801175a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1f0:	2340      	movs	r3, #64	; 0x40
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f004 faaf 	bl	801175a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2210      	movs	r2, #16
 800d208:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d20c:	2308      	movs	r3, #8
 800d20e:	2203      	movs	r2, #3
 800d210:	2182      	movs	r1, #130	; 0x82
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f004 faa1 	bl	801175a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	7c1b      	ldrb	r3, [r3, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d109      	bne.n	800d256 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d24c:	2101      	movs	r1, #1
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f004 fb72 	bl	8011938 <USBD_LL_PrepareReceive>
 800d254:	e007      	b.n	800d266 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d25c:	2340      	movs	r3, #64	; 0x40
 800d25e:	2101      	movs	r1, #1
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f004 fb69 	bl	8011938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d280:	2181      	movs	r1, #129	; 0x81
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f004 fa8f 	bl	80117a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d28e:	2101      	movs	r1, #1
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f004 fa88 	bl	80117a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d29e:	2182      	movs	r1, #130	; 0x82
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f004 fa80 	bl	80117a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00e      	beq.n	800d2de <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f004 fc41 	bl	8011b58 <free>
    pdev->pClassData = NULL;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d2fe:	2300      	movs	r3, #0
 800d300:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d03a      	beq.n	800d388 <USBD_CDC_Setup+0xa0>
 800d312:	2b20      	cmp	r3, #32
 800d314:	f040 8097 	bne.w	800d446 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	88db      	ldrh	r3, [r3, #6]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d029      	beq.n	800d374 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	b25b      	sxtb	r3, r3
 800d326:	2b00      	cmp	r3, #0
 800d328:	da11      	bge.n	800d34e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800d336:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	88d2      	ldrh	r2, [r2, #6]
 800d33c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d33e:	6939      	ldr	r1, [r7, #16]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	88db      	ldrh	r3, [r3, #6]
 800d344:	461a      	mov	r2, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f001 fac7 	bl	800e8da <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800d34c:	e082      	b.n	800d454 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	785a      	ldrb	r2, [r3, #1]
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	88db      	ldrh	r3, [r3, #6]
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d364:	6939      	ldr	r1, [r7, #16]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	88db      	ldrh	r3, [r3, #6]
 800d36a:	461a      	mov	r2, r3
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 fae0 	bl	800e932 <USBD_CtlPrepareRx>
    break;
 800d372:	e06f      	b.n	800d454 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	683a      	ldr	r2, [r7, #0]
 800d37e:	7850      	ldrb	r0, [r2, #1]
 800d380:	2200      	movs	r2, #0
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	4798      	blx	r3
    break;
 800d386:	e065      	b.n	800d454 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	785b      	ldrb	r3, [r3, #1]
 800d38c:	2b0b      	cmp	r3, #11
 800d38e:	d84f      	bhi.n	800d430 <USBD_CDC_Setup+0x148>
 800d390:	a201      	add	r2, pc, #4	; (adr r2, 800d398 <USBD_CDC_Setup+0xb0>)
 800d392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d396:	bf00      	nop
 800d398:	0800d3c9 	.word	0x0800d3c9
 800d39c:	0800d43f 	.word	0x0800d43f
 800d3a0:	0800d431 	.word	0x0800d431
 800d3a4:	0800d431 	.word	0x0800d431
 800d3a8:	0800d431 	.word	0x0800d431
 800d3ac:	0800d431 	.word	0x0800d431
 800d3b0:	0800d431 	.word	0x0800d431
 800d3b4:	0800d431 	.word	0x0800d431
 800d3b8:	0800d431 	.word	0x0800d431
 800d3bc:	0800d431 	.word	0x0800d431
 800d3c0:	0800d3f1 	.word	0x0800d3f1
 800d3c4:	0800d419 	.word	0x0800d419
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d107      	bne.n	800d3e2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d3d2:	f107 030c 	add.w	r3, r7, #12
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f001 fa7d 	bl	800e8da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d3e0:	e030      	b.n	800d444 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d3e2:	6839      	ldr	r1, [r7, #0]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f001 fa07 	bl	800e7f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800d3ee:	e029      	b.n	800d444 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d107      	bne.n	800d40a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3fa:	f107 030f 	add.w	r3, r7, #15
 800d3fe:	2201      	movs	r2, #1
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f001 fa69 	bl	800e8da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d408:	e01c      	b.n	800d444 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f001 f9f3 	bl	800e7f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800d412:	2303      	movs	r3, #3
 800d414:	75fb      	strb	r3, [r7, #23]
      break;
 800d416:	e015      	b.n	800d444 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d41e:	2b03      	cmp	r3, #3
 800d420:	d00f      	beq.n	800d442 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f001 f9e7 	bl	800e7f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800d42a:	2303      	movs	r3, #3
 800d42c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d42e:	e008      	b.n	800d442 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f001 f9e0 	bl	800e7f8 <USBD_CtlError>
      ret = USBD_FAIL;
 800d438:	2303      	movs	r3, #3
 800d43a:	75fb      	strb	r3, [r7, #23]
      break;
 800d43c:	e002      	b.n	800d444 <USBD_CDC_Setup+0x15c>
      break;
 800d43e:	bf00      	nop
 800d440:	e008      	b.n	800d454 <USBD_CDC_Setup+0x16c>
      break;
 800d442:	bf00      	nop
    }
    break;
 800d444:	e006      	b.n	800d454 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800d446:	6839      	ldr	r1, [r7, #0]
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f001 f9d5 	bl	800e7f8 <USBD_CtlError>
    ret = USBD_FAIL;
 800d44e:	2303      	movs	r3, #3
 800d450:	75fb      	strb	r3, [r7, #23]
    break;
 800d452:	bf00      	nop
  }

  return (uint8_t)ret;
 800d454:	7dfb      	ldrb	r3, [r7, #23]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop

0800d460 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d101      	bne.n	800d482 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d47e:	2303      	movs	r3, #3
 800d480:	e049      	b.n	800d516 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d488:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d48a:	78fa      	ldrb	r2, [r7, #3]
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	4613      	mov	r3, r2
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	4413      	add	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	440b      	add	r3, r1
 800d498:	3318      	adds	r3, #24
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d029      	beq.n	800d4f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d4a0:	78fa      	ldrb	r2, [r7, #3]
 800d4a2:	6879      	ldr	r1, [r7, #4]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	440b      	add	r3, r1
 800d4ae:	3318      	adds	r3, #24
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	78f9      	ldrb	r1, [r7, #3]
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	1a5b      	subs	r3, r3, r1
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4403      	add	r3, r0
 800d4c0:	3344      	adds	r3, #68	; 0x44
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d4c8:	fb03 f301 	mul.w	r3, r3, r1
 800d4cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d110      	bne.n	800d4f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d4d2:	78fa      	ldrb	r2, [r7, #3]
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	4413      	add	r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	440b      	add	r3, r1
 800d4e0:	3318      	adds	r3, #24
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d4e6:	78f9      	ldrb	r1, [r7, #3]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f004 fa02 	bl	80118f6 <USBD_LL_Transmit>
 800d4f2:	e00f      	b.n	800d514 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	68ba      	ldr	r2, [r7, #8]
 800d506:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d510:	78fa      	ldrb	r2, [r7, #3]
 800d512:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	460b      	mov	r3, r1
 800d528:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d530:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d53c:	2303      	movs	r3, #3
 800d53e:	e015      	b.n	800d56c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f004 fa18 	bl	801197a <USBD_LL_GetRxDataSize>
 800d54a:	4602      	mov	r2, r0
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d566:	4611      	mov	r1, r2
 800d568:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d582:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d015      	beq.n	800d5ba <USBD_CDC_EP0_RxReady+0x46>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d594:	2bff      	cmp	r3, #255	; 0xff
 800d596:	d010      	beq.n	800d5ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d5a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5ae:	b292      	uxth	r2, r2
 800d5b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	22ff      	movs	r2, #255	; 0xff
 800d5b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2243      	movs	r2, #67	; 0x43
 800d5d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d5d2:	4b03      	ldr	r3, [pc, #12]	; (800d5e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	20000328 	.word	0x20000328

0800d5e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2243      	movs	r2, #67	; 0x43
 800d5f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d5f2:	4b03      	ldr	r3, [pc, #12]	; (800d600 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	200002e4 	.word	0x200002e4

0800d604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2243      	movs	r2, #67	; 0x43
 800d610:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d612:	4b03      	ldr	r3, [pc, #12]	; (800d620 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d614:	4618      	mov	r0, r3
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	2000036c 	.word	0x2000036c

0800d624 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	220a      	movs	r2, #10
 800d630:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d632:	4b03      	ldr	r3, [pc, #12]	; (800d640 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d634:	4618      	mov	r0, r3
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	200002a0 	.word	0x200002a0

0800d644 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d654:	2303      	movs	r3, #3
 800d656:	e004      	b.n	800d662 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	370c      	adds	r7, #12
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d66e:	b480      	push	{r7}
 800d670:	b087      	sub	sp, #28
 800d672:	af00      	add	r7, sp, #0
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	60b9      	str	r1, [r7, #8]
 800d678:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d680:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6b0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	683a      	ldr	r2, [r7, #0]
 800d6b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3714      	adds	r7, #20
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	e01a      	b.n	800d720 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d114      	bne.n	800d71e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d712:	2181      	movs	r1, #129	; 0x81
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f004 f8ee 	bl	80118f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d736:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d742:	2303      	movs	r3, #3
 800d744:	e016      	b.n	800d774 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	7c1b      	ldrb	r3, [r3, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d109      	bne.n	800d762 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d754:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d758:	2101      	movs	r1, #1
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f004 f8ec 	bl	8011938 <USBD_LL_PrepareReceive>
 800d760:	e007      	b.n	800d772 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d768:	2340      	movs	r3, #64	; 0x40
 800d76a:	2101      	movs	r1, #1
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f004 f8e3 	bl	8011938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	4613      	mov	r3, r2
 800d788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d790:	2303      	movs	r3, #3
 800d792:	e025      	b.n	800d7e0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d003      	beq.n	800d7a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d003      	beq.n	800d7b8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	79fa      	ldrb	r2, [r7, #7]
 800d7d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f003 ff59 	bl	801168c <USBD_LL_Init>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3718      	adds	r7, #24
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	e010      	b.n	800d822 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d810:	f107 020e 	add.w	r2, r7, #14
 800d814:	4610      	mov	r0, r2
 800d816:	4798      	blx	r3
 800d818:	4602      	mov	r2, r0
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f003 ff76 	bl	8011724 <USBD_LL_Start>
 800d838:	4603      	mov	r3, r0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d842:	b480      	push	{r7}
 800d844:	b083      	sub	sp, #12
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d864:	2303      	movs	r3, #3
 800d866:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d009      	beq.n	800d886 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	78fa      	ldrb	r2, [r7, #3]
 800d87c:	4611      	mov	r1, r2
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	4798      	blx	r3
 800d882:	4603      	mov	r3, r0
 800d884:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d886:	7bfb      	ldrb	r3, [r7, #15]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d007      	beq.n	800d8b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	78fa      	ldrb	r2, [r7, #3]
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	4798      	blx	r3
  }

  return USBD_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 ff56 	bl	800e784 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8f4:	f003 031f 	and.w	r3, r3, #31
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d00e      	beq.n	800d91a <USBD_LL_SetupStage+0x5a>
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d302      	bcc.n	800d906 <USBD_LL_SetupStage+0x46>
 800d900:	2b02      	cmp	r3, #2
 800d902:	d014      	beq.n	800d92e <USBD_LL_SetupStage+0x6e>
 800d904:	e01d      	b.n	800d942 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d90c:	4619      	mov	r1, r3
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fa18 	bl	800dd44 <USBD_StdDevReq>
 800d914:	4603      	mov	r3, r0
 800d916:	73fb      	strb	r3, [r7, #15]
      break;
 800d918:	e020      	b.n	800d95c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d920:	4619      	mov	r1, r3
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 fa7c 	bl	800de20 <USBD_StdItfReq>
 800d928:	4603      	mov	r3, r0
 800d92a:	73fb      	strb	r3, [r7, #15]
      break;
 800d92c:	e016      	b.n	800d95c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fab8 	bl	800deac <USBD_StdEPReq>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]
      break;
 800d940:	e00c      	b.n	800d95c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f003 ff47 	bl	80117e4 <USBD_LL_StallEP>
 800d956:	4603      	mov	r3, r0
 800d958:	73fb      	strb	r3, [r7, #15]
      break;
 800d95a:	bf00      	nop
  }

  return ret;
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b086      	sub	sp, #24
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	460b      	mov	r3, r1
 800d970:	607a      	str	r2, [r7, #4]
 800d972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d974:	7afb      	ldrb	r3, [r7, #11]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d137      	bne.n	800d9ea <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d980:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d14a      	bne.n	800da22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	689a      	ldr	r2, [r3, #8]
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	429a      	cmp	r2, r3
 800d996:	d913      	bls.n	800d9c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	689a      	ldr	r2, [r3, #8]
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	1ad2      	subs	r2, r2, r3
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	68da      	ldr	r2, [r3, #12]
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	bf28      	it	cs
 800d9b2:	4613      	movcs	r3, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	6879      	ldr	r1, [r7, #4]
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f000 ffd7 	bl	800e96c <USBD_CtlContinueRx>
 800d9be:	e030      	b.n	800da22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d9d2:	2b03      	cmp	r3, #3
 800d9d4:	d105      	bne.n	800d9e2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f000 ffd3 	bl	800e98e <USBD_CtlSendStatus>
 800d9e8:	e01b      	b.n	800da22 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f0:	699b      	ldr	r3, [r3, #24]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d013      	beq.n	800da1e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	d10e      	bne.n	800da1e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	7afa      	ldrb	r2, [r7, #11]
 800da0a:	4611      	mov	r1, r2
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	4798      	blx	r3
 800da10:	4603      	mov	r3, r0
 800da12:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800da14:	7dfb      	ldrb	r3, [r7, #23]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	e002      	b.n	800da24 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da1e:	2303      	movs	r3, #3
 800da20:	e000      	b.n	800da24 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3718      	adds	r7, #24
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	460b      	mov	r3, r1
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800da3a:	7afb      	ldrb	r3, [r7, #11]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d16a      	bne.n	800db16 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	3314      	adds	r3, #20
 800da44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d155      	bne.n	800dafc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	689a      	ldr	r2, [r3, #8]
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d914      	bls.n	800da86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	689a      	ldr	r2, [r3, #8]
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	1ad2      	subs	r2, r2, r3
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	461a      	mov	r2, r3
 800da70:	6879      	ldr	r1, [r7, #4]
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f000 ff4c 	bl	800e910 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da78:	2300      	movs	r3, #0
 800da7a:	2200      	movs	r2, #0
 800da7c:	2100      	movs	r1, #0
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f003 ff5a 	bl	8011938 <USBD_LL_PrepareReceive>
 800da84:	e03a      	b.n	800dafc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	68da      	ldr	r2, [r3, #12]
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d11c      	bne.n	800dacc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	685a      	ldr	r2, [r3, #4]
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d316      	bcc.n	800dacc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d20f      	bcs.n	800dacc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800daac:	2200      	movs	r2, #0
 800daae:	2100      	movs	r1, #0
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f000 ff2d 	bl	800e910 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dabe:	2300      	movs	r3, #0
 800dac0:	2200      	movs	r2, #0
 800dac2:	2100      	movs	r1, #0
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f003 ff37 	bl	8011938 <USBD_LL_PrepareReceive>
 800daca:	e017      	b.n	800dafc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00a      	beq.n	800daee <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dade:	2b03      	cmp	r3, #3
 800dae0:	d105      	bne.n	800daee <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800daee:	2180      	movs	r1, #128	; 0x80
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f003 fe77 	bl	80117e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f000 ff5c 	bl	800e9b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800db02:	2b01      	cmp	r3, #1
 800db04:	d123      	bne.n	800db4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f7ff fe9b 	bl	800d842 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db14:	e01b      	b.n	800db4e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db1c:	695b      	ldr	r3, [r3, #20]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d013      	beq.n	800db4a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800db28:	2b03      	cmp	r3, #3
 800db2a:	d10e      	bne.n	800db4a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db32:	695b      	ldr	r3, [r3, #20]
 800db34:	7afa      	ldrb	r2, [r7, #11]
 800db36:	4611      	mov	r1, r2
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	4798      	blx	r3
 800db3c:	4603      	mov	r3, r0
 800db3e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	e002      	b.n	800db50 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800db4a:	2303      	movs	r3, #3
 800db4c:	e000      	b.n	800db50 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3718      	adds	r7, #24
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db84:	2b00      	cmp	r3, #0
 800db86:	d009      	beq.n	800db9c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	6852      	ldr	r2, [r2, #4]
 800db94:	b2d2      	uxtb	r2, r2
 800db96:	4611      	mov	r1, r2
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db9c:	2340      	movs	r3, #64	; 0x40
 800db9e:	2200      	movs	r2, #0
 800dba0:	2100      	movs	r1, #0
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f003 fdd9 	bl	801175a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2240      	movs	r2, #64	; 0x40
 800dbb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbb8:	2340      	movs	r3, #64	; 0x40
 800dbba:	2200      	movs	r2, #0
 800dbbc:	2180      	movs	r1, #128	; 0x80
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f003 fdcb 	bl	801175a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2240      	movs	r2, #64	; 0x40
 800dbce:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	78fa      	ldrb	r2, [r7, #3]
 800dbea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	370c      	adds	r7, #12
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr

0800dbfa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b083      	sub	sp, #12
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2204      	movs	r2, #4
 800dc12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc32:	2b04      	cmp	r3, #4
 800dc34:	d105      	bne.n	800dc42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	d10b      	bne.n	800dc7a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d005      	beq.n	800dc7a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc7a:	2300      	movs	r3, #0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr

0800dc9e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dc9e:	b480      	push	{r7}
 800dca0:	b083      	sub	sp, #12
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	460b      	mov	r3, r1
 800dca8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d009      	beq.n	800dcfc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	6852      	ldr	r2, [r2, #4]
 800dcf4:	b2d2      	uxtb	r2, r2
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	4798      	blx	r3
  }

  return USBD_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dd06:	b480      	push	{r7}
 800dd08:	b087      	sub	sp, #28
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dd24:	8a3b      	ldrh	r3, [r7, #16]
 800dd26:	021b      	lsls	r3, r3, #8
 800dd28:	b21a      	sxth	r2, r3
 800dd2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	b21b      	sxth	r3, r3
 800dd32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dd34:	89fb      	ldrh	r3, [r7, #14]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
	...

0800dd44 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd5a:	2b20      	cmp	r3, #32
 800dd5c:	d004      	beq.n	800dd68 <USBD_StdDevReq+0x24>
 800dd5e:	2b40      	cmp	r3, #64	; 0x40
 800dd60:	d002      	beq.n	800dd68 <USBD_StdDevReq+0x24>
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00a      	beq.n	800dd7c <USBD_StdDevReq+0x38>
 800dd66:	e050      	b.n	800de0a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	4798      	blx	r3
 800dd76:	4603      	mov	r3, r0
 800dd78:	73fb      	strb	r3, [r7, #15]
    break;
 800dd7a:	e04b      	b.n	800de14 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	785b      	ldrb	r3, [r3, #1]
 800dd80:	2b09      	cmp	r3, #9
 800dd82:	d83c      	bhi.n	800ddfe <USBD_StdDevReq+0xba>
 800dd84:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <USBD_StdDevReq+0x48>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800dde1 	.word	0x0800dde1
 800dd90:	0800ddf5 	.word	0x0800ddf5
 800dd94:	0800ddff 	.word	0x0800ddff
 800dd98:	0800ddeb 	.word	0x0800ddeb
 800dd9c:	0800ddff 	.word	0x0800ddff
 800dda0:	0800ddbf 	.word	0x0800ddbf
 800dda4:	0800ddb5 	.word	0x0800ddb5
 800dda8:	0800ddff 	.word	0x0800ddff
 800ddac:	0800ddd7 	.word	0x0800ddd7
 800ddb0:	0800ddc9 	.word	0x0800ddc9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f9ce 	bl	800e158 <USBD_GetDescriptor>
      break;
 800ddbc:	e024      	b.n	800de08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ddbe:	6839      	ldr	r1, [r7, #0]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 fb5d 	bl	800e480 <USBD_SetAddress>
      break;
 800ddc6:	e01f      	b.n	800de08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fb9a 	bl	800e504 <USBD_SetConfig>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ddd4:	e018      	b.n	800de08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fc37 	bl	800e64c <USBD_GetConfig>
      break;
 800ddde:	e013      	b.n	800de08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fc66 	bl	800e6b4 <USBD_GetStatus>
      break;
 800dde8:	e00e      	b.n	800de08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ddea:	6839      	ldr	r1, [r7, #0]
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fc94 	bl	800e71a <USBD_SetFeature>
      break;
 800ddf2:	e009      	b.n	800de08 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ddf4:	6839      	ldr	r1, [r7, #0]
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fca3 	bl	800e742 <USBD_ClrFeature>
      break;
 800ddfc:	e004      	b.n	800de08 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fcf9 	bl	800e7f8 <USBD_CtlError>
      break;
 800de06:	bf00      	nop
    }
    break;
 800de08:	e004      	b.n	800de14 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fcf3 	bl	800e7f8 <USBD_CtlError>
    break;
 800de12:	bf00      	nop
  }

  return ret;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop

0800de20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de36:	2b20      	cmp	r3, #32
 800de38:	d003      	beq.n	800de42 <USBD_StdItfReq+0x22>
 800de3a:	2b40      	cmp	r3, #64	; 0x40
 800de3c:	d001      	beq.n	800de42 <USBD_StdItfReq+0x22>
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d12a      	bne.n	800de98 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de48:	3b01      	subs	r3, #1
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d81d      	bhi.n	800de8a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	889b      	ldrh	r3, [r3, #4]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b01      	cmp	r3, #1
 800de56:	d813      	bhi.n	800de80 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	4798      	blx	r3
 800de66:	4603      	mov	r3, r0
 800de68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	88db      	ldrh	r3, [r3, #6]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d110      	bne.n	800de94 <USBD_StdItfReq+0x74>
 800de72:	7bfb      	ldrb	r3, [r7, #15]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10d      	bne.n	800de94 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 fd88 	bl	800e98e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800de7e:	e009      	b.n	800de94 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800de80:	6839      	ldr	r1, [r7, #0]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fcb8 	bl	800e7f8 <USBD_CtlError>
      break;
 800de88:	e004      	b.n	800de94 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800de8a:	6839      	ldr	r1, [r7, #0]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 fcb3 	bl	800e7f8 <USBD_CtlError>
      break;
 800de92:	e000      	b.n	800de96 <USBD_StdItfReq+0x76>
      break;
 800de94:	bf00      	nop
    }
    break;
 800de96:	e004      	b.n	800dea2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fcac 	bl	800e7f8 <USBD_CtlError>
    break;
 800dea0:	bf00      	nop
  }

  return ret;
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	889b      	ldrh	r3, [r3, #4]
 800debe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dec8:	2b20      	cmp	r3, #32
 800deca:	d004      	beq.n	800ded6 <USBD_StdEPReq+0x2a>
 800decc:	2b40      	cmp	r3, #64	; 0x40
 800dece:	d002      	beq.n	800ded6 <USBD_StdEPReq+0x2a>
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00a      	beq.n	800deea <USBD_StdEPReq+0x3e>
 800ded4:	e135      	b.n	800e142 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	4798      	blx	r3
 800dee4:	4603      	mov	r3, r0
 800dee6:	73fb      	strb	r3, [r7, #15]
    break;
 800dee8:	e130      	b.n	800e14c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	785b      	ldrb	r3, [r3, #1]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d03e      	beq.n	800df70 <USBD_StdEPReq+0xc4>
 800def2:	2b03      	cmp	r3, #3
 800def4:	d002      	beq.n	800defc <USBD_StdEPReq+0x50>
 800def6:	2b00      	cmp	r3, #0
 800def8:	d077      	beq.n	800dfea <USBD_StdEPReq+0x13e>
 800defa:	e11c      	b.n	800e136 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df02:	2b02      	cmp	r3, #2
 800df04:	d002      	beq.n	800df0c <USBD_StdEPReq+0x60>
 800df06:	2b03      	cmp	r3, #3
 800df08:	d015      	beq.n	800df36 <USBD_StdEPReq+0x8a>
 800df0a:	e02b      	b.n	800df64 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00c      	beq.n	800df2c <USBD_StdEPReq+0x80>
 800df12:	7bbb      	ldrb	r3, [r7, #14]
 800df14:	2b80      	cmp	r3, #128	; 0x80
 800df16:	d009      	beq.n	800df2c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800df18:	7bbb      	ldrb	r3, [r7, #14]
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f003 fc61 	bl	80117e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800df22:	2180      	movs	r1, #128	; 0x80
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f003 fc5d 	bl	80117e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800df2a:	e020      	b.n	800df6e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fc62 	bl	800e7f8 <USBD_CtlError>
        break;
 800df34:	e01b      	b.n	800df6e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10e      	bne.n	800df5c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00b      	beq.n	800df5c <USBD_StdEPReq+0xb0>
 800df44:	7bbb      	ldrb	r3, [r7, #14]
 800df46:	2b80      	cmp	r3, #128	; 0x80
 800df48:	d008      	beq.n	800df5c <USBD_StdEPReq+0xb0>
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	88db      	ldrh	r3, [r3, #6]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d104      	bne.n	800df5c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800df52:	7bbb      	ldrb	r3, [r7, #14]
 800df54:	4619      	mov	r1, r3
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f003 fc44 	bl	80117e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fd16 	bl	800e98e <USBD_CtlSendStatus>

        break;
 800df62:	e004      	b.n	800df6e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 fc46 	bl	800e7f8 <USBD_CtlError>
        break;
 800df6c:	bf00      	nop
      }
      break;
 800df6e:	e0e7      	b.n	800e140 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df76:	2b02      	cmp	r3, #2
 800df78:	d002      	beq.n	800df80 <USBD_StdEPReq+0xd4>
 800df7a:	2b03      	cmp	r3, #3
 800df7c:	d015      	beq.n	800dfaa <USBD_StdEPReq+0xfe>
 800df7e:	e02d      	b.n	800dfdc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df80:	7bbb      	ldrb	r3, [r7, #14]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00c      	beq.n	800dfa0 <USBD_StdEPReq+0xf4>
 800df86:	7bbb      	ldrb	r3, [r7, #14]
 800df88:	2b80      	cmp	r3, #128	; 0x80
 800df8a:	d009      	beq.n	800dfa0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800df8c:	7bbb      	ldrb	r3, [r7, #14]
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f003 fc27 	bl	80117e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800df96:	2180      	movs	r1, #128	; 0x80
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f003 fc23 	bl	80117e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800df9e:	e023      	b.n	800dfe8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fc28 	bl	800e7f8 <USBD_CtlError>
        break;
 800dfa8:	e01e      	b.n	800dfe8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	885b      	ldrh	r3, [r3, #2]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d119      	bne.n	800dfe6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800dfb2:	7bbb      	ldrb	r3, [r7, #14]
 800dfb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f003 fc2e 	bl	8011822 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fce1 	bl	800e98e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	4798      	blx	r3
        }
        break;
 800dfda:	e004      	b.n	800dfe6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fc0a 	bl	800e7f8 <USBD_CtlError>
        break;
 800dfe4:	e000      	b.n	800dfe8 <USBD_StdEPReq+0x13c>
        break;
 800dfe6:	bf00      	nop
      }
      break;
 800dfe8:	e0aa      	b.n	800e140 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff0:	2b02      	cmp	r3, #2
 800dff2:	d002      	beq.n	800dffa <USBD_StdEPReq+0x14e>
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	d032      	beq.n	800e05e <USBD_StdEPReq+0x1b2>
 800dff8:	e097      	b.n	800e12a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dffa:	7bbb      	ldrb	r3, [r7, #14]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d007      	beq.n	800e010 <USBD_StdEPReq+0x164>
 800e000:	7bbb      	ldrb	r3, [r7, #14]
 800e002:	2b80      	cmp	r3, #128	; 0x80
 800e004:	d004      	beq.n	800e010 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fbf5 	bl	800e7f8 <USBD_CtlError>
          break;
 800e00e:	e091      	b.n	800e134 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e014:	2b00      	cmp	r3, #0
 800e016:	da0b      	bge.n	800e030 <USBD_StdEPReq+0x184>
 800e018:	7bbb      	ldrb	r3, [r7, #14]
 800e01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	3310      	adds	r3, #16
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	4413      	add	r3, r2
 800e02c:	3304      	adds	r3, #4
 800e02e:	e00b      	b.n	800e048 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e030:	7bbb      	ldrb	r3, [r7, #14]
 800e032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e036:	4613      	mov	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4413      	add	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	4413      	add	r3, r2
 800e046:	3304      	adds	r3, #4
 800e048:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2200      	movs	r2, #0
 800e04e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2202      	movs	r2, #2
 800e054:	4619      	mov	r1, r3
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fc3f 	bl	800e8da <USBD_CtlSendData>
        break;
 800e05c:	e06a      	b.n	800e134 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e05e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e062:	2b00      	cmp	r3, #0
 800e064:	da11      	bge.n	800e08a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e066:	7bbb      	ldrb	r3, [r7, #14]
 800e068:	f003 020f 	and.w	r2, r3, #15
 800e06c:	6879      	ldr	r1, [r7, #4]
 800e06e:	4613      	mov	r3, r2
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	4413      	add	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	440b      	add	r3, r1
 800e078:	3324      	adds	r3, #36	; 0x24
 800e07a:	881b      	ldrh	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d117      	bne.n	800e0b0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 fbb8 	bl	800e7f8 <USBD_CtlError>
            break;
 800e088:	e054      	b.n	800e134 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e08a:	7bbb      	ldrb	r3, [r7, #14]
 800e08c:	f003 020f 	and.w	r2, r3, #15
 800e090:	6879      	ldr	r1, [r7, #4]
 800e092:	4613      	mov	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	440b      	add	r3, r1
 800e09c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d104      	bne.n	800e0b0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fba5 	bl	800e7f8 <USBD_CtlError>
            break;
 800e0ae:	e041      	b.n	800e134 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	da0b      	bge.n	800e0d0 <USBD_StdEPReq+0x224>
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0be:	4613      	mov	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	3310      	adds	r3, #16
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	e00b      	b.n	800e0e8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e0d0:	7bbb      	ldrb	r3, [r7, #14]
 800e0d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0ea:	7bbb      	ldrb	r3, [r7, #14]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <USBD_StdEPReq+0x24a>
 800e0f0:	7bbb      	ldrb	r3, [r7, #14]
 800e0f2:	2b80      	cmp	r3, #128	; 0x80
 800e0f4:	d103      	bne.n	800e0fe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	e00e      	b.n	800e11c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0fe:	7bbb      	ldrb	r3, [r7, #14]
 800e100:	4619      	mov	r1, r3
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f003 fbac 	bl	8011860 <USBD_LL_IsStallEP>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d003      	beq.n	800e116 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	2201      	movs	r2, #1
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	e002      	b.n	800e11c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2200      	movs	r2, #0
 800e11a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2202      	movs	r2, #2
 800e120:	4619      	mov	r1, r3
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 fbd9 	bl	800e8da <USBD_CtlSendData>
          break;
 800e128:	e004      	b.n	800e134 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 fb63 	bl	800e7f8 <USBD_CtlError>
        break;
 800e132:	bf00      	nop
      }
      break;
 800e134:	e004      	b.n	800e140 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800e136:	6839      	ldr	r1, [r7, #0]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fb5d 	bl	800e7f8 <USBD_CtlError>
      break;
 800e13e:	bf00      	nop
    }
    break;
 800e140:	e004      	b.n	800e14c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800e142:	6839      	ldr	r1, [r7, #0]
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fb57 	bl	800e7f8 <USBD_CtlError>
    break;
 800e14a:	bf00      	nop
  }

  return ret;
 800e14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e162:	2300      	movs	r3, #0
 800e164:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e16a:	2300      	movs	r3, #0
 800e16c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	885b      	ldrh	r3, [r3, #2]
 800e172:	0a1b      	lsrs	r3, r3, #8
 800e174:	b29b      	uxth	r3, r3
 800e176:	3b01      	subs	r3, #1
 800e178:	2b0e      	cmp	r3, #14
 800e17a:	f200 8152 	bhi.w	800e422 <USBD_GetDescriptor+0x2ca>
 800e17e:	a201      	add	r2, pc, #4	; (adr r2, 800e184 <USBD_GetDescriptor+0x2c>)
 800e180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e184:	0800e1f5 	.word	0x0800e1f5
 800e188:	0800e20d 	.word	0x0800e20d
 800e18c:	0800e24d 	.word	0x0800e24d
 800e190:	0800e423 	.word	0x0800e423
 800e194:	0800e423 	.word	0x0800e423
 800e198:	0800e3c3 	.word	0x0800e3c3
 800e19c:	0800e3ef 	.word	0x0800e3ef
 800e1a0:	0800e423 	.word	0x0800e423
 800e1a4:	0800e423 	.word	0x0800e423
 800e1a8:	0800e423 	.word	0x0800e423
 800e1ac:	0800e423 	.word	0x0800e423
 800e1b0:	0800e423 	.word	0x0800e423
 800e1b4:	0800e423 	.word	0x0800e423
 800e1b8:	0800e423 	.word	0x0800e423
 800e1bc:	0800e1c1 	.word	0x0800e1c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c6:	69db      	ldr	r3, [r3, #28]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00b      	beq.n	800e1e4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1d2:	69db      	ldr	r3, [r3, #28]
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	7c12      	ldrb	r2, [r2, #16]
 800e1d8:	f107 0108 	add.w	r1, r7, #8
 800e1dc:	4610      	mov	r0, r2
 800e1de:	4798      	blx	r3
 800e1e0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e1e2:	e126      	b.n	800e432 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e1e4:	6839      	ldr	r1, [r7, #0]
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 fb06 	bl	800e7f8 <USBD_CtlError>
      err++;
 800e1ec:	7afb      	ldrb	r3, [r7, #11]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	72fb      	strb	r3, [r7, #11]
    break;
 800e1f2:	e11e      	b.n	800e432 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	7c12      	ldrb	r2, [r2, #16]
 800e200:	f107 0108 	add.w	r1, r7, #8
 800e204:	4610      	mov	r0, r2
 800e206:	4798      	blx	r3
 800e208:	60f8      	str	r0, [r7, #12]
    break;
 800e20a:	e112      	b.n	800e432 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	7c1b      	ldrb	r3, [r3, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10d      	bne.n	800e230 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e21c:	f107 0208 	add.w	r2, r7, #8
 800e220:	4610      	mov	r0, r2
 800e222:	4798      	blx	r3
 800e224:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3301      	adds	r3, #1
 800e22a:	2202      	movs	r2, #2
 800e22c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e22e:	e100      	b.n	800e432 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e238:	f107 0208 	add.w	r2, r7, #8
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3301      	adds	r3, #1
 800e246:	2202      	movs	r2, #2
 800e248:	701a      	strb	r2, [r3, #0]
    break;
 800e24a:	e0f2      	b.n	800e432 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	885b      	ldrh	r3, [r3, #2]
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b05      	cmp	r3, #5
 800e254:	f200 80ac 	bhi.w	800e3b0 <USBD_GetDescriptor+0x258>
 800e258:	a201      	add	r2, pc, #4	; (adr r2, 800e260 <USBD_GetDescriptor+0x108>)
 800e25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25e:	bf00      	nop
 800e260:	0800e279 	.word	0x0800e279
 800e264:	0800e2ad 	.word	0x0800e2ad
 800e268:	0800e2e1 	.word	0x0800e2e1
 800e26c:	0800e315 	.word	0x0800e315
 800e270:	0800e349 	.word	0x0800e349
 800e274:	0800e37d 	.word	0x0800e37d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	7c12      	ldrb	r2, [r2, #16]
 800e290:	f107 0108 	add.w	r1, r7, #8
 800e294:	4610      	mov	r0, r2
 800e296:	4798      	blx	r3
 800e298:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e29a:	e091      	b.n	800e3c0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 faaa 	bl	800e7f8 <USBD_CtlError>
        err++;
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	72fb      	strb	r3, [r7, #11]
      break;
 800e2aa:	e089      	b.n	800e3c0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00b      	beq.n	800e2d0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	7c12      	ldrb	r2, [r2, #16]
 800e2c4:	f107 0108 	add.w	r1, r7, #8
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	4798      	blx	r3
 800e2cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2ce:	e077      	b.n	800e3c0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fa90 	bl	800e7f8 <USBD_CtlError>
        err++;
 800e2d8:	7afb      	ldrb	r3, [r7, #11]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	72fb      	strb	r3, [r7, #11]
      break;
 800e2de:	e06f      	b.n	800e3c0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00b      	beq.n	800e304 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	7c12      	ldrb	r2, [r2, #16]
 800e2f8:	f107 0108 	add.w	r1, r7, #8
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	4798      	blx	r3
 800e300:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e302:	e05d      	b.n	800e3c0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fa76 	bl	800e7f8 <USBD_CtlError>
        err++;
 800e30c:	7afb      	ldrb	r3, [r7, #11]
 800e30e:	3301      	adds	r3, #1
 800e310:	72fb      	strb	r3, [r7, #11]
      break;
 800e312:	e055      	b.n	800e3c0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00b      	beq.n	800e338 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	7c12      	ldrb	r2, [r2, #16]
 800e32c:	f107 0108 	add.w	r1, r7, #8
 800e330:	4610      	mov	r0, r2
 800e332:	4798      	blx	r3
 800e334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e336:	e043      	b.n	800e3c0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fa5c 	bl	800e7f8 <USBD_CtlError>
        err++;
 800e340:	7afb      	ldrb	r3, [r7, #11]
 800e342:	3301      	adds	r3, #1
 800e344:	72fb      	strb	r3, [r7, #11]
      break;
 800e346:	e03b      	b.n	800e3c0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00b      	beq.n	800e36c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e35a:	695b      	ldr	r3, [r3, #20]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	7c12      	ldrb	r2, [r2, #16]
 800e360:	f107 0108 	add.w	r1, r7, #8
 800e364:	4610      	mov	r0, r2
 800e366:	4798      	blx	r3
 800e368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e36a:	e029      	b.n	800e3c0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e36c:	6839      	ldr	r1, [r7, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fa42 	bl	800e7f8 <USBD_CtlError>
        err++;
 800e374:	7afb      	ldrb	r3, [r7, #11]
 800e376:	3301      	adds	r3, #1
 800e378:	72fb      	strb	r3, [r7, #11]
      break;
 800e37a:	e021      	b.n	800e3c0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00b      	beq.n	800e3a0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	7c12      	ldrb	r2, [r2, #16]
 800e394:	f107 0108 	add.w	r1, r7, #8
 800e398:	4610      	mov	r0, r2
 800e39a:	4798      	blx	r3
 800e39c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e39e:	e00f      	b.n	800e3c0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fa28 	bl	800e7f8 <USBD_CtlError>
        err++;
 800e3a8:	7afb      	ldrb	r3, [r7, #11]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	72fb      	strb	r3, [r7, #11]
      break;
 800e3ae:	e007      	b.n	800e3c0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e3b0:	6839      	ldr	r1, [r7, #0]
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fa20 	bl	800e7f8 <USBD_CtlError>
      err++;
 800e3b8:	7afb      	ldrb	r3, [r7, #11]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e3be:	bf00      	nop
    }
    break;
 800e3c0:	e037      	b.n	800e432 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	7c1b      	ldrb	r3, [r3, #16]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d109      	bne.n	800e3de <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d2:	f107 0208 	add.w	r2, r7, #8
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	4798      	blx	r3
 800e3da:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e3dc:	e029      	b.n	800e432 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fa09 	bl	800e7f8 <USBD_CtlError>
      err++;
 800e3e6:	7afb      	ldrb	r3, [r7, #11]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	72fb      	strb	r3, [r7, #11]
    break;
 800e3ec:	e021      	b.n	800e432 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7c1b      	ldrb	r3, [r3, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10d      	bne.n	800e412 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fe:	f107 0208 	add.w	r2, r7, #8
 800e402:	4610      	mov	r0, r2
 800e404:	4798      	blx	r3
 800e406:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3301      	adds	r3, #1
 800e40c:	2207      	movs	r2, #7
 800e40e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e410:	e00f      	b.n	800e432 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e412:	6839      	ldr	r1, [r7, #0]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 f9ef 	bl	800e7f8 <USBD_CtlError>
      err++;
 800e41a:	7afb      	ldrb	r3, [r7, #11]
 800e41c:	3301      	adds	r3, #1
 800e41e:	72fb      	strb	r3, [r7, #11]
    break;
 800e420:	e007      	b.n	800e432 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 f9e7 	bl	800e7f8 <USBD_CtlError>
    err++;
 800e42a:	7afb      	ldrb	r3, [r7, #11]
 800e42c:	3301      	adds	r3, #1
 800e42e:	72fb      	strb	r3, [r7, #11]
    break;
 800e430:	bf00      	nop
  }

  if (err != 0U)
 800e432:	7afb      	ldrb	r3, [r7, #11]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d11e      	bne.n	800e476 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	88db      	ldrh	r3, [r3, #6]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d016      	beq.n	800e46e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800e440:	893b      	ldrh	r3, [r7, #8]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00e      	beq.n	800e464 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	88da      	ldrh	r2, [r3, #6]
 800e44a:	893b      	ldrh	r3, [r7, #8]
 800e44c:	4293      	cmp	r3, r2
 800e44e:	bf28      	it	cs
 800e450:	4613      	movcs	r3, r2
 800e452:	b29b      	uxth	r3, r3
 800e454:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e456:	893b      	ldrh	r3, [r7, #8]
 800e458:	461a      	mov	r2, r3
 800e45a:	68f9      	ldr	r1, [r7, #12]
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f000 fa3c 	bl	800e8da <USBD_CtlSendData>
 800e462:	e009      	b.n	800e478 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e464:	6839      	ldr	r1, [r7, #0]
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f9c6 	bl	800e7f8 <USBD_CtlError>
 800e46c:	e004      	b.n	800e478 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa8d 	bl	800e98e <USBD_CtlSendStatus>
 800e474:	e000      	b.n	800e478 <USBD_GetDescriptor+0x320>
    return;
 800e476:	bf00      	nop
    }
  }
}
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop

0800e480 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	889b      	ldrh	r3, [r3, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d130      	bne.n	800e4f4 <USBD_SetAddress+0x74>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	88db      	ldrh	r3, [r3, #6]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d12c      	bne.n	800e4f4 <USBD_SetAddress+0x74>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	885b      	ldrh	r3, [r3, #2]
 800e49e:	2b7f      	cmp	r3, #127	; 0x7f
 800e4a0:	d828      	bhi.n	800e4f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	885b      	ldrh	r3, [r3, #2]
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d104      	bne.n	800e4c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 f99c 	bl	800e7f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4c0:	e01c      	b.n	800e4fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7bfa      	ldrb	r2, [r7, #15]
 800e4c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4ca:	7bfb      	ldrb	r3, [r7, #15]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f003 f9f2 	bl	80118b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fa5a 	bl	800e98e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4da:	7bfb      	ldrb	r3, [r7, #15]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d004      	beq.n	800e4ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e8:	e008      	b.n	800e4fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4f2:	e003      	b.n	800e4fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f97e 	bl	800e7f8 <USBD_CtlError>
  }
}
 800e4fc:	bf00      	nop
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	885b      	ldrh	r3, [r3, #2]
 800e516:	b2da      	uxtb	r2, r3
 800e518:	4b4b      	ldr	r3, [pc, #300]	; (800e648 <USBD_SetConfig+0x144>)
 800e51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e51c:	4b4a      	ldr	r3, [pc, #296]	; (800e648 <USBD_SetConfig+0x144>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d905      	bls.n	800e530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f966 	bl	800e7f8 <USBD_CtlError>
    return USBD_FAIL;
 800e52c:	2303      	movs	r3, #3
 800e52e:	e087      	b.n	800e640 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e536:	2b02      	cmp	r3, #2
 800e538:	d002      	beq.n	800e540 <USBD_SetConfig+0x3c>
 800e53a:	2b03      	cmp	r3, #3
 800e53c:	d025      	beq.n	800e58a <USBD_SetConfig+0x86>
 800e53e:	e071      	b.n	800e624 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e540:	4b41      	ldr	r3, [pc, #260]	; (800e648 <USBD_SetConfig+0x144>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d01c      	beq.n	800e582 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e548:	4b3f      	ldr	r3, [pc, #252]	; (800e648 <USBD_SetConfig+0x144>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	461a      	mov	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e552:	4b3d      	ldr	r3, [pc, #244]	; (800e648 <USBD_SetConfig+0x144>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7ff f97d 	bl	800d858 <USBD_SetClassConfig>
 800e55e:	4603      	mov	r3, r0
 800e560:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e562:	7bfb      	ldrb	r3, [r7, #15]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d004      	beq.n	800e572 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f944 	bl	800e7f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e570:	e065      	b.n	800e63e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fa0b 	bl	800e98e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2203      	movs	r2, #3
 800e57c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e580:	e05d      	b.n	800e63e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fa03 	bl	800e98e <USBD_CtlSendStatus>
    break;
 800e588:	e059      	b.n	800e63e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e58a:	4b2f      	ldr	r3, [pc, #188]	; (800e648 <USBD_SetConfig+0x144>)
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d112      	bne.n	800e5b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2202      	movs	r2, #2
 800e596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800e59a:	4b2b      	ldr	r3, [pc, #172]	; (800e648 <USBD_SetConfig+0x144>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5a4:	4b28      	ldr	r3, [pc, #160]	; (800e648 <USBD_SetConfig+0x144>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7ff f970 	bl	800d890 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f9ec 	bl	800e98e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e5b6:	e042      	b.n	800e63e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e5b8:	4b23      	ldr	r3, [pc, #140]	; (800e648 <USBD_SetConfig+0x144>)
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	461a      	mov	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d02a      	beq.n	800e61c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff f95e 	bl	800d890 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e5d4:	4b1c      	ldr	r3, [pc, #112]	; (800e648 <USBD_SetConfig+0x144>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	461a      	mov	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5de:	4b1a      	ldr	r3, [pc, #104]	; (800e648 <USBD_SetConfig+0x144>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff f937 	bl	800d858 <USBD_SetClassConfig>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e5ee:	7bfb      	ldrb	r3, [r7, #15]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00f      	beq.n	800e614 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 f8fe 	bl	800e7f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	b2db      	uxtb	r3, r3
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff f943 	bl	800d890 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2202      	movs	r2, #2
 800e60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e612:	e014      	b.n	800e63e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 f9ba 	bl	800e98e <USBD_CtlSendStatus>
    break;
 800e61a:	e010      	b.n	800e63e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 f9b6 	bl	800e98e <USBD_CtlSendStatus>
    break;
 800e622:	e00c      	b.n	800e63e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f8e6 	bl	800e7f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e62c:	4b06      	ldr	r3, [pc, #24]	; (800e648 <USBD_SetConfig+0x144>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	4619      	mov	r1, r3
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f7ff f92c 	bl	800d890 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e638:	2303      	movs	r3, #3
 800e63a:	73fb      	strb	r3, [r7, #15]
    break;
 800e63c:	bf00      	nop
  }

  return ret;
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	20000881 	.word	0x20000881

0800e64c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	88db      	ldrh	r3, [r3, #6]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d004      	beq.n	800e668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e65e:	6839      	ldr	r1, [r7, #0]
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 f8c9 	bl	800e7f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e666:	e021      	b.n	800e6ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e66e:	2b01      	cmp	r3, #1
 800e670:	db17      	blt.n	800e6a2 <USBD_GetConfig+0x56>
 800e672:	2b02      	cmp	r3, #2
 800e674:	dd02      	ble.n	800e67c <USBD_GetConfig+0x30>
 800e676:	2b03      	cmp	r3, #3
 800e678:	d00b      	beq.n	800e692 <USBD_GetConfig+0x46>
 800e67a:	e012      	b.n	800e6a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2200      	movs	r2, #0
 800e680:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	3308      	adds	r3, #8
 800e686:	2201      	movs	r2, #1
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 f925 	bl	800e8da <USBD_CtlSendData>
      break;
 800e690:	e00c      	b.n	800e6ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3304      	adds	r3, #4
 800e696:	2201      	movs	r2, #1
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f91d 	bl	800e8da <USBD_CtlSendData>
      break;
 800e6a0:	e004      	b.n	800e6ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800e6a2:	6839      	ldr	r1, [r7, #0]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f8a7 	bl	800e7f8 <USBD_CtlError>
      break;
 800e6aa:	bf00      	nop
}
 800e6ac:	bf00      	nop
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	d81e      	bhi.n	800e708 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	88db      	ldrh	r3, [r3, #6]
 800e6ce:	2b02      	cmp	r3, #2
 800e6d0:	d004      	beq.n	800e6dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f88f 	bl	800e7f8 <USBD_CtlError>
      break;
 800e6da:	e01a      	b.n	800e712 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d005      	beq.n	800e6f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	f043 0202 	orr.w	r2, r3, #2
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	330c      	adds	r3, #12
 800e6fc:	2202      	movs	r2, #2
 800e6fe:	4619      	mov	r1, r3
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 f8ea 	bl	800e8da <USBD_CtlSendData>
    break;
 800e706:	e004      	b.n	800e712 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f874 	bl	800e7f8 <USBD_CtlError>
    break;
 800e710:	bf00      	nop
  }
}
 800e712:	bf00      	nop
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b082      	sub	sp, #8
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	885b      	ldrh	r3, [r3, #2]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d106      	bne.n	800e73a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 f92a 	bl	800e98e <USBD_CtlSendStatus>
  }
}
 800e73a:	bf00      	nop
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b082      	sub	sp, #8
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e752:	3b01      	subs	r3, #1
 800e754:	2b02      	cmp	r3, #2
 800e756:	d80b      	bhi.n	800e770 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	885b      	ldrh	r3, [r3, #2]
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d10c      	bne.n	800e77a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f910 	bl	800e98e <USBD_CtlSendStatus>
      }
      break;
 800e76e:	e004      	b.n	800e77a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e770:	6839      	ldr	r1, [r7, #0]
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f840 	bl	800e7f8 <USBD_CtlError>
      break;
 800e778:	e000      	b.n	800e77c <USBD_ClrFeature+0x3a>
      break;
 800e77a:	bf00      	nop
  }
}
 800e77c:	bf00      	nop
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	781a      	ldrb	r2, [r3, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	3301      	adds	r3, #1
 800e79e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	781a      	ldrb	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7ff faa9 	bl	800dd06 <SWAPBYTE>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f7ff fa9c 	bl	800dd06 <SWAPBYTE>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7ff fa8f 	bl	800dd06 <SWAPBYTE>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	80da      	strh	r2, [r3, #6]
}
 800e7f0:	bf00      	nop
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e802:	2180      	movs	r1, #128	; 0x80
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f002 ffed 	bl	80117e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e80a:	2100      	movs	r1, #0
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f002 ffe9 	bl	80117e4 <USBD_LL_StallEP>
}
 800e812:	bf00      	nop
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b086      	sub	sp, #24
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e826:	2300      	movs	r3, #0
 800e828:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d036      	beq.n	800e89e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e834:	6938      	ldr	r0, [r7, #16]
 800e836:	f000 f836 	bl	800e8a6 <USBD_GetLen>
 800e83a:	4603      	mov	r3, r0
 800e83c:	3301      	adds	r3, #1
 800e83e:	b29b      	uxth	r3, r3
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	b29a      	uxth	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e848:	7dfb      	ldrb	r3, [r7, #23]
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	4413      	add	r3, r2
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	7812      	ldrb	r2, [r2, #0]
 800e852:	701a      	strb	r2, [r3, #0]
  idx++;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	3301      	adds	r3, #1
 800e858:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	4413      	add	r3, r2
 800e860:	2203      	movs	r2, #3
 800e862:	701a      	strb	r2, [r3, #0]
  idx++;
 800e864:	7dfb      	ldrb	r3, [r7, #23]
 800e866:	3301      	adds	r3, #1
 800e868:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e86a:	e013      	b.n	800e894 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e86c:	7dfb      	ldrb	r3, [r7, #23]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	4413      	add	r3, r2
 800e872:	693a      	ldr	r2, [r7, #16]
 800e874:	7812      	ldrb	r2, [r2, #0]
 800e876:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	3301      	adds	r3, #1
 800e87c:	613b      	str	r3, [r7, #16]
    idx++;
 800e87e:	7dfb      	ldrb	r3, [r7, #23]
 800e880:	3301      	adds	r3, #1
 800e882:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e884:	7dfb      	ldrb	r3, [r7, #23]
 800e886:	68ba      	ldr	r2, [r7, #8]
 800e888:	4413      	add	r3, r2
 800e88a:	2200      	movs	r2, #0
 800e88c:	701a      	strb	r2, [r3, #0]
    idx++;
 800e88e:	7dfb      	ldrb	r3, [r7, #23]
 800e890:	3301      	adds	r3, #1
 800e892:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1e7      	bne.n	800e86c <USBD_GetString+0x52>
 800e89c:	e000      	b.n	800e8a0 <USBD_GetString+0x86>
    return;
 800e89e:	bf00      	nop
  }
}
 800e8a0:	3718      	adds	r7, #24
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b085      	sub	sp, #20
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e8b6:	e005      	b.n	800e8c4 <USBD_GetLen+0x1e>
  {
    len++;
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1f5      	bne.n	800e8b8 <USBD_GetLen+0x12>
  }

  return len;
 800e8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3714      	adds	r7, #20
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b084      	sub	sp, #16
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	60f8      	str	r0, [r7, #12]
 800e8e2:	60b9      	str	r1, [r7, #8]
 800e8e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	2100      	movs	r1, #0
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f002 fff8 	bl	80118f6 <USBD_LL_Transmit>

  return USBD_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	2100      	movs	r1, #0
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f002 ffe7 	bl	80118f6 <USBD_LL_Transmit>

  return USBD_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b084      	sub	sp, #16
 800e936:	af00      	add	r7, sp, #0
 800e938:	60f8      	str	r0, [r7, #12]
 800e93a:	60b9      	str	r1, [r7, #8]
 800e93c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2203      	movs	r2, #3
 800e942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	2100      	movs	r1, #0
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f002 ffeb 	bl	8011938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	2100      	movs	r1, #0
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f002 ffda 	bl	8011938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b082      	sub	sp, #8
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2204      	movs	r2, #4
 800e99a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e99e:	2300      	movs	r3, #0
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f002 ffa6 	bl	80118f6 <USBD_LL_Transmit>

  return USBD_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2205      	movs	r2, #5
 800e9c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f002 ffb4 	bl	8011938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
	...

0800e9dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b087      	sub	sp, #28
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e9f2:	4b1f      	ldr	r3, [pc, #124]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800e9f4:	7a5b      	ldrb	r3, [r3, #9]
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d131      	bne.n	800ea60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800e9fe:	7a5b      	ldrb	r3, [r3, #9]
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	461a      	mov	r2, r3
 800ea04:	4b1a      	ldr	r3, [pc, #104]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800ea06:	2100      	movs	r1, #0
 800ea08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea0a:	4b19      	ldr	r3, [pc, #100]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800ea0c:	7a5b      	ldrb	r3, [r3, #9]
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	4a17      	ldr	r2, [pc, #92]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	4413      	add	r3, r2
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ea1a:	4b15      	ldr	r3, [pc, #84]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800ea1c:	7a5b      	ldrb	r3, [r3, #9]
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	461a      	mov	r2, r3
 800ea22:	4b13      	ldr	r3, [pc, #76]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800ea24:	4413      	add	r3, r2
 800ea26:	79fa      	ldrb	r2, [r7, #7]
 800ea28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea2a:	4b11      	ldr	r3, [pc, #68]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800ea2c:	7a5b      	ldrb	r3, [r3, #9]
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	1c5a      	adds	r2, r3, #1
 800ea32:	b2d1      	uxtb	r1, r2
 800ea34:	4a0e      	ldr	r2, [pc, #56]	; (800ea70 <FATFS_LinkDriverEx+0x94>)
 800ea36:	7251      	strb	r1, [r2, #9]
 800ea38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea3a:	7dbb      	ldrb	r3, [r7, #22]
 800ea3c:	3330      	adds	r3, #48	; 0x30
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	3301      	adds	r3, #1
 800ea48:	223a      	movs	r2, #58	; 0x3a
 800ea4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	3302      	adds	r3, #2
 800ea50:	222f      	movs	r2, #47	; 0x2f
 800ea52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	3303      	adds	r3, #3
 800ea58:	2200      	movs	r2, #0
 800ea5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	371c      	adds	r7, #28
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	20000884 	.word	0x20000884

0800ea74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ea7e:	2200      	movs	r2, #0
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7ff ffaa 	bl	800e9dc <FATFS_LinkDriverEx>
 800ea88:	4603      	mov	r3, r0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ea92:	b480      	push	{r7}
 800ea94:	b085      	sub	sp, #20
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	4603      	mov	r3, r0
 800ea9a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800eaa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eaa4:	2b84      	cmp	r3, #132	; 0x84
 800eaa6:	d005      	beq.n	800eab4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800eaa8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	4413      	add	r3, r2
 800eab0:	3303      	adds	r3, #3
 800eab2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eab4:	68fb      	ldr	r3, [r7, #12]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3714      	adds	r7, #20
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800eac2:	b480      	push	{r7}
 800eac4:	b083      	sub	sp, #12
 800eac6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eac8:	f3ef 8305 	mrs	r3, IPSR
 800eacc:	607b      	str	r3, [r7, #4]
  return(result);
 800eace:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	bf14      	ite	ne
 800ead4:	2301      	movne	r3, #1
 800ead6:	2300      	moveq	r3, #0
 800ead8:	b2db      	uxtb	r3, r3
}
 800eada:	4618      	mov	r0, r3
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eaea:	f001 f927 	bl	800fd3c <vTaskStartScheduler>
  
  return osOK;
 800eaee:	2300      	movs	r3, #0
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800eaf8:	f7ff ffe3 	bl	800eac2 <inHandlerMode>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d003      	beq.n	800eb0a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800eb02:	f001 fa33 	bl	800ff6c <xTaskGetTickCountFromISR>
 800eb06:	4603      	mov	r3, r0
 800eb08:	e002      	b.n	800eb10 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800eb0a:	f001 fa1f 	bl	800ff4c <xTaskGetTickCount>
 800eb0e:	4603      	mov	r3, r0
  }
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb16:	b089      	sub	sp, #36	; 0x24
 800eb18:	af04      	add	r7, sp, #16
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	695b      	ldr	r3, [r3, #20]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d020      	beq.n	800eb68 <osThreadCreate+0x54>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d01c      	beq.n	800eb68 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	685c      	ldr	r4, [r3, #4]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681d      	ldr	r5, [r3, #0]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	691e      	ldr	r6, [r3, #16]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7ff ffa6 	bl	800ea92 <makeFreeRtosPriority>
 800eb46:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	695b      	ldr	r3, [r3, #20]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb50:	9202      	str	r2, [sp, #8]
 800eb52:	9301      	str	r3, [sp, #4]
 800eb54:	9100      	str	r1, [sp, #0]
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	4632      	mov	r2, r6
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f000 ff2a 	bl	800f9b6 <xTaskCreateStatic>
 800eb62:	4603      	mov	r3, r0
 800eb64:	60fb      	str	r3, [r7, #12]
 800eb66:	e01c      	b.n	800eba2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	685c      	ldr	r4, [r3, #4]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb74:	b29e      	uxth	r6, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7ff ff88 	bl	800ea92 <makeFreeRtosPriority>
 800eb82:	4602      	mov	r2, r0
 800eb84:	f107 030c 	add.w	r3, r7, #12
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	9200      	str	r2, [sp, #0]
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	4632      	mov	r2, r6
 800eb90:	4629      	mov	r1, r5
 800eb92:	4620      	mov	r0, r4
 800eb94:	f000 ff69 	bl	800fa6a <xTaskCreate>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d001      	beq.n	800eba2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	e000      	b.n	800eba4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eba2:	68fb      	ldr	r3, [r7, #12]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <osDelay+0x16>
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	e000      	b.n	800ebc4 <osDelay+0x18>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f001 f885 	bl	800fcd4 <vTaskDelay>
  
  return osOK;
 800ebca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ebd4:	b590      	push	{r4, r7, lr}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af02      	add	r7, sp, #8
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d012      	beq.n	800ec0c <osMessageCreate+0x38>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00e      	beq.n	800ec0c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6818      	ldr	r0, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6859      	ldr	r1, [r3, #4]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	689a      	ldr	r2, [r3, #8]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68dc      	ldr	r4, [r3, #12]
 800ebfe:	2300      	movs	r3, #0
 800ec00:	9300      	str	r3, [sp, #0]
 800ec02:	4623      	mov	r3, r4
 800ec04:	f000 f9ec 	bl	800efe0 <xQueueGenericCreateStatic>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	e008      	b.n	800ec1e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6818      	ldr	r0, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	4619      	mov	r1, r3
 800ec18:	f000 fa55 	bl	800f0c6 <xQueueGenericCreate>
 800ec1c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	370c      	adds	r7, #12
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd90      	pop	{r4, r7, pc}
	...

0800ec28 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ec34:	2300      	movs	r3, #0
 800ec36:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <osMessagePut+0x1e>
    ticks = 1;
 800ec42:	2301      	movs	r3, #1
 800ec44:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ec46:	f7ff ff3c 	bl	800eac2 <inHandlerMode>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d018      	beq.n	800ec82 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ec50:	f107 0210 	add.w	r2, r7, #16
 800ec54:	f107 0108 	add.w	r1, r7, #8
 800ec58:	2300      	movs	r3, #0
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f000 fb8c 	bl	800f378 <xQueueGenericSendFromISR>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d001      	beq.n	800ec6a <osMessagePut+0x42>
      return osErrorOS;
 800ec66:	23ff      	movs	r3, #255	; 0xff
 800ec68:	e018      	b.n	800ec9c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d014      	beq.n	800ec9a <osMessagePut+0x72>
 800ec70:	4b0c      	ldr	r3, [pc, #48]	; (800eca4 <osMessagePut+0x7c>)
 800ec72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec76:	601a      	str	r2, [r3, #0]
 800ec78:	f3bf 8f4f 	dsb	sy
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	e00b      	b.n	800ec9a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ec82:	f107 0108 	add.w	r1, r7, #8
 800ec86:	2300      	movs	r3, #0
 800ec88:	697a      	ldr	r2, [r7, #20]
 800ec8a:	68f8      	ldr	r0, [r7, #12]
 800ec8c:	f000 fa7a 	bl	800f184 <xQueueGenericSend>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d001      	beq.n	800ec9a <osMessagePut+0x72>
      return osErrorOS;
 800ec96:	23ff      	movs	r3, #255	; 0xff
 800ec98:	e000      	b.n	800ec9c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	e000ed04 	.word	0xe000ed04

0800eca8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800eca8:	b590      	push	{r4, r7, lr}
 800ecaa:	b08b      	sub	sp, #44	; 0x2c
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10a      	bne.n	800ecd8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ecc2:	2380      	movs	r3, #128	; 0x80
 800ecc4:	617b      	str	r3, [r7, #20]
    return event;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	461c      	mov	r4, r3
 800ecca:	f107 0314 	add.w	r3, r7, #20
 800ecce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ecd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ecd6:	e054      	b.n	800ed82 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece6:	d103      	bne.n	800ecf0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ece8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecec:	627b      	str	r3, [r7, #36]	; 0x24
 800ecee:	e009      	b.n	800ed04 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d006      	beq.n	800ed04 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d101      	bne.n	800ed04 <osMessageGet+0x5c>
      ticks = 1;
 800ed00:	2301      	movs	r3, #1
 800ed02:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ed04:	f7ff fedd 	bl	800eac2 <inHandlerMode>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d01c      	beq.n	800ed48 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ed0e:	f107 0220 	add.w	r2, r7, #32
 800ed12:	f107 0314 	add.w	r3, r7, #20
 800ed16:	3304      	adds	r3, #4
 800ed18:	4619      	mov	r1, r3
 800ed1a:	68b8      	ldr	r0, [r7, #8]
 800ed1c:	f000 fc9c 	bl	800f658 <xQueueReceiveFromISR>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d102      	bne.n	800ed2c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ed26:	2310      	movs	r3, #16
 800ed28:	617b      	str	r3, [r7, #20]
 800ed2a:	e001      	b.n	800ed30 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ed30:	6a3b      	ldr	r3, [r7, #32]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d01d      	beq.n	800ed72 <osMessageGet+0xca>
 800ed36:	4b15      	ldr	r3, [pc, #84]	; (800ed8c <osMessageGet+0xe4>)
 800ed38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed3c:	601a      	str	r2, [r3, #0]
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	e014      	b.n	800ed72 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ed48:	f107 0314 	add.w	r3, r7, #20
 800ed4c:	3304      	adds	r3, #4
 800ed4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed50:	4619      	mov	r1, r3
 800ed52:	68b8      	ldr	r0, [r7, #8]
 800ed54:	f000 fba4 	bl	800f4a0 <xQueueReceive>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d102      	bne.n	800ed64 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ed5e:	2310      	movs	r3, #16
 800ed60:	617b      	str	r3, [r7, #20]
 800ed62:	e006      	b.n	800ed72 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <osMessageGet+0xc6>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	e000      	b.n	800ed70 <osMessageGet+0xc8>
 800ed6e:	2340      	movs	r3, #64	; 0x40
 800ed70:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	461c      	mov	r4, r3
 800ed76:	f107 0314 	add.w	r3, r7, #20
 800ed7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	372c      	adds	r7, #44	; 0x2c
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd90      	pop	{r4, r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	e000ed04 	.word	0xe000ed04

0800ed90 <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fcda 	bl	800f752 <uxQueueSpacesAvailable>
 800ed9e:	4603      	mov	r3, r0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f103 0208 	add.w	r2, r3, #8
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f04f 32ff 	mov.w	r2, #4294967295
 800edc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f103 0208 	add.w	r2, r3, #8
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f103 0208 	add.w	r2, r3, #8
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eddc:	bf00      	nop
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr

0800ede8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800edf6:	bf00      	nop
 800edf8:	370c      	adds	r7, #12
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr

0800ee02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee02:	b480      	push	{r7}
 800ee04:	b085      	sub	sp, #20
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	689a      	ldr	r2, [r3, #8]
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	689b      	ldr	r3, [r3, #8]
 800ee24:	683a      	ldr	r2, [r7, #0]
 800ee26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	683a      	ldr	r2, [r7, #0]
 800ee2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]
}
 800ee3e:	bf00      	nop
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr

0800ee4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee4a:	b480      	push	{r7}
 800ee4c:	b085      	sub	sp, #20
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
 800ee52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee60:	d103      	bne.n	800ee6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	e00c      	b.n	800ee84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	3308      	adds	r3, #8
 800ee6e:	60fb      	str	r3, [r7, #12]
 800ee70:	e002      	b.n	800ee78 <vListInsert+0x2e>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d2f6      	bcs.n	800ee72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	685a      	ldr	r2, [r3, #4]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	68fa      	ldr	r2, [r7, #12]
 800ee98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	683a      	ldr	r2, [r7, #0]
 800ee9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	601a      	str	r2, [r3, #0]
}
 800eeb0:	bf00      	nop
 800eeb2:	3714      	adds	r7, #20
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	6892      	ldr	r2, [r2, #8]
 800eed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	6852      	ldr	r2, [r2, #4]
 800eedc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d103      	bne.n	800eef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	689a      	ldr	r2, [r3, #8]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	1e5a      	subs	r2, r3, #1
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d109      	bne.n	800ef38 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ef24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	60bb      	str	r3, [r7, #8]
 800ef36:	e7fe      	b.n	800ef36 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ef38:	f001 fd48 	bl	80109cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef44:	68f9      	ldr	r1, [r7, #12]
 800ef46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef48:	fb01 f303 	mul.w	r3, r1, r3
 800ef4c:	441a      	add	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2200      	movs	r2, #0
 800ef56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	68f9      	ldr	r1, [r7, #12]
 800ef6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef6e:	fb01 f303 	mul.w	r3, r1, r3
 800ef72:	441a      	add	r2, r3
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	22ff      	movs	r2, #255	; 0xff
 800ef7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	22ff      	movs	r2, #255	; 0xff
 800ef84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d114      	bne.n	800efb8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d01a      	beq.n	800efcc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3310      	adds	r3, #16
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f001 f92e 	bl	80101fc <xTaskRemoveFromEventList>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d012      	beq.n	800efcc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800efa6:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <xQueueGenericReset+0xcc>)
 800efa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	e009      	b.n	800efcc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	3310      	adds	r3, #16
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff fef3 	bl	800eda8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3324      	adds	r3, #36	; 0x24
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7ff feee 	bl	800eda8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800efcc:	f001 fd2c 	bl	8010a28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800efd0:	2301      	movs	r3, #1
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	e000ed04 	.word	0xe000ed04

0800efe0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b08e      	sub	sp, #56	; 0x38
 800efe4:	af02      	add	r7, sp, #8
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d109      	bne.n	800f008 <xQueueGenericCreateStatic+0x28>
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	62bb      	str	r3, [r7, #40]	; 0x28
 800f006:	e7fe      	b.n	800f006 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d109      	bne.n	800f022 <xQueueGenericCreateStatic+0x42>
 800f00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f012:	f383 8811 	msr	BASEPRI, r3
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	f3bf 8f4f 	dsb	sy
 800f01e:	627b      	str	r3, [r7, #36]	; 0x24
 800f020:	e7fe      	b.n	800f020 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d002      	beq.n	800f02e <xQueueGenericCreateStatic+0x4e>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <xQueueGenericCreateStatic+0x52>
 800f02e:	2301      	movs	r3, #1
 800f030:	e000      	b.n	800f034 <xQueueGenericCreateStatic+0x54>
 800f032:	2300      	movs	r3, #0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d109      	bne.n	800f04c <xQueueGenericCreateStatic+0x6c>
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	623b      	str	r3, [r7, #32]
 800f04a:	e7fe      	b.n	800f04a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d102      	bne.n	800f058 <xQueueGenericCreateStatic+0x78>
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d101      	bne.n	800f05c <xQueueGenericCreateStatic+0x7c>
 800f058:	2301      	movs	r3, #1
 800f05a:	e000      	b.n	800f05e <xQueueGenericCreateStatic+0x7e>
 800f05c:	2300      	movs	r3, #0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d109      	bne.n	800f076 <xQueueGenericCreateStatic+0x96>
 800f062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f066:	f383 8811 	msr	BASEPRI, r3
 800f06a:	f3bf 8f6f 	isb	sy
 800f06e:	f3bf 8f4f 	dsb	sy
 800f072:	61fb      	str	r3, [r7, #28]
 800f074:	e7fe      	b.n	800f074 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f076:	2348      	movs	r3, #72	; 0x48
 800f078:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2b48      	cmp	r3, #72	; 0x48
 800f07e:	d009      	beq.n	800f094 <xQueueGenericCreateStatic+0xb4>
 800f080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	61bb      	str	r3, [r7, #24]
 800f092:	e7fe      	b.n	800f092 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f094:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00d      	beq.n	800f0bc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f0a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	68b9      	ldr	r1, [r7, #8]
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f000 f844 	bl	800f144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3730      	adds	r7, #48	; 0x30
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b08a      	sub	sp, #40	; 0x28
 800f0ca:	af02      	add	r7, sp, #8
 800f0cc:	60f8      	str	r0, [r7, #12]
 800f0ce:	60b9      	str	r1, [r7, #8]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d109      	bne.n	800f0ee <xQueueGenericCreate+0x28>
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	613b      	str	r3, [r7, #16]
 800f0ec:	e7fe      	b.n	800f0ec <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d102      	bne.n	800f0fa <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	61fb      	str	r3, [r7, #28]
 800f0f8:	e004      	b.n	800f104 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	fb02 f303 	mul.w	r3, r2, r3
 800f102:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	3348      	adds	r3, #72	; 0x48
 800f108:	4618      	mov	r0, r3
 800f10a:	f001 fd79 	bl	8010c00 <pvPortMalloc>
 800f10e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d011      	beq.n	800f13a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	3348      	adds	r3, #72	; 0x48
 800f11e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	2200      	movs	r2, #0
 800f124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f128:	79fa      	ldrb	r2, [r7, #7]
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	4613      	mov	r3, r2
 800f130:	697a      	ldr	r2, [r7, #20]
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 f805 	bl	800f144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f13a:	69bb      	ldr	r3, [r7, #24]
	}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3720      	adds	r7, #32
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
 800f150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d103      	bne.n	800f160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	69ba      	ldr	r2, [r7, #24]
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	e002      	b.n	800f166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f172:	2101      	movs	r1, #1
 800f174:	69b8      	ldr	r0, [r7, #24]
 800f176:	f7ff fecb 	bl	800ef10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f17a:	bf00      	nop
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
	...

0800f184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b08e      	sub	sp, #56	; 0x38
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
 800f190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f192:	2300      	movs	r3, #0
 800f194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d109      	bne.n	800f1b4 <xQueueGenericSend+0x30>
 800f1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1b2:	e7fe      	b.n	800f1b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d103      	bne.n	800f1c2 <xQueueGenericSend+0x3e>
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d101      	bne.n	800f1c6 <xQueueGenericSend+0x42>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e000      	b.n	800f1c8 <xQueueGenericSend+0x44>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d109      	bne.n	800f1e0 <xQueueGenericSend+0x5c>
 800f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	627b      	str	r3, [r7, #36]	; 0x24
 800f1de:	e7fe      	b.n	800f1de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d103      	bne.n	800f1ee <xQueueGenericSend+0x6a>
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d101      	bne.n	800f1f2 <xQueueGenericSend+0x6e>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e000      	b.n	800f1f4 <xQueueGenericSend+0x70>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d109      	bne.n	800f20c <xQueueGenericSend+0x88>
 800f1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fc:	f383 8811 	msr	BASEPRI, r3
 800f200:	f3bf 8f6f 	isb	sy
 800f204:	f3bf 8f4f 	dsb	sy
 800f208:	623b      	str	r3, [r7, #32]
 800f20a:	e7fe      	b.n	800f20a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f20c:	f001 f9ac 	bl	8010568 <xTaskGetSchedulerState>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d102      	bne.n	800f21c <xQueueGenericSend+0x98>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d101      	bne.n	800f220 <xQueueGenericSend+0x9c>
 800f21c:	2301      	movs	r3, #1
 800f21e:	e000      	b.n	800f222 <xQueueGenericSend+0x9e>
 800f220:	2300      	movs	r3, #0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d109      	bne.n	800f23a <xQueueGenericSend+0xb6>
 800f226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22a:	f383 8811 	msr	BASEPRI, r3
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	61fb      	str	r3, [r7, #28]
 800f238:	e7fe      	b.n	800f238 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f23a:	f001 fbc7 	bl	80109cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f246:	429a      	cmp	r2, r3
 800f248:	d302      	bcc.n	800f250 <xQueueGenericSend+0xcc>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	2b02      	cmp	r3, #2
 800f24e:	d129      	bne.n	800f2a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f250:	683a      	ldr	r2, [r7, #0]
 800f252:	68b9      	ldr	r1, [r7, #8]
 800f254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f256:	f000 fa9e 	bl	800f796 <prvCopyDataToQueue>
 800f25a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f260:	2b00      	cmp	r3, #0
 800f262:	d010      	beq.n	800f286 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	3324      	adds	r3, #36	; 0x24
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 ffc7 	bl	80101fc <xTaskRemoveFromEventList>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d013      	beq.n	800f29c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f274:	4b3f      	ldr	r3, [pc, #252]	; (800f374 <xQueueGenericSend+0x1f0>)
 800f276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f27a:	601a      	str	r2, [r3, #0]
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	f3bf 8f6f 	isb	sy
 800f284:	e00a      	b.n	800f29c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d007      	beq.n	800f29c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f28c:	4b39      	ldr	r3, [pc, #228]	; (800f374 <xQueueGenericSend+0x1f0>)
 800f28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f29c:	f001 fbc4 	bl	8010a28 <vPortExitCritical>
				return pdPASS;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e063      	b.n	800f36c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d103      	bne.n	800f2b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f2aa:	f001 fbbd 	bl	8010a28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e05c      	b.n	800f36c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d106      	bne.n	800f2c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2b8:	f107 0314 	add.w	r3, r7, #20
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f000 ffff 	bl	80102c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f2c6:	f001 fbaf 	bl	8010a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2ca:	f000 fd95 	bl	800fdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2ce:	f001 fb7d 	bl	80109cc <vPortEnterCritical>
 800f2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2d8:	b25b      	sxtb	r3, r3
 800f2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2de:	d103      	bne.n	800f2e8 <xQueueGenericSend+0x164>
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2ee:	b25b      	sxtb	r3, r3
 800f2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f4:	d103      	bne.n	800f2fe <xQueueGenericSend+0x17a>
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2fe:	f001 fb93 	bl	8010a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f302:	1d3a      	adds	r2, r7, #4
 800f304:	f107 0314 	add.w	r3, r7, #20
 800f308:	4611      	mov	r1, r2
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 ffee 	bl	80102ec <xTaskCheckForTimeOut>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d124      	bne.n	800f360 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f318:	f000 fb35 	bl	800f986 <prvIsQueueFull>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d018      	beq.n	800f354 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	3310      	adds	r3, #16
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	4611      	mov	r1, r2
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 ff42 	bl	80101b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f332:	f000 fac0 	bl	800f8b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f336:	f000 fd6d 	bl	800fe14 <xTaskResumeAll>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f47f af7c 	bne.w	800f23a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f342:	4b0c      	ldr	r3, [pc, #48]	; (800f374 <xQueueGenericSend+0x1f0>)
 800f344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f348:	601a      	str	r2, [r3, #0]
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	e772      	b.n	800f23a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f356:	f000 faae 	bl	800f8b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f35a:	f000 fd5b 	bl	800fe14 <xTaskResumeAll>
 800f35e:	e76c      	b.n	800f23a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f362:	f000 faa8 	bl	800f8b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f366:	f000 fd55 	bl	800fe14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f36a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3738      	adds	r7, #56	; 0x38
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	e000ed04 	.word	0xe000ed04

0800f378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08e      	sub	sp, #56	; 0x38
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d109      	bne.n	800f3a4 <xQueueGenericSendFromISR+0x2c>
 800f390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f394:	f383 8811 	msr	BASEPRI, r3
 800f398:	f3bf 8f6f 	isb	sy
 800f39c:	f3bf 8f4f 	dsb	sy
 800f3a0:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a2:	e7fe      	b.n	800f3a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d103      	bne.n	800f3b2 <xQueueGenericSendFromISR+0x3a>
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <xQueueGenericSendFromISR+0x3e>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e000      	b.n	800f3b8 <xQueueGenericSendFromISR+0x40>
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d109      	bne.n	800f3d0 <xQueueGenericSendFromISR+0x58>
 800f3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c0:	f383 8811 	msr	BASEPRI, r3
 800f3c4:	f3bf 8f6f 	isb	sy
 800f3c8:	f3bf 8f4f 	dsb	sy
 800f3cc:	623b      	str	r3, [r7, #32]
 800f3ce:	e7fe      	b.n	800f3ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	2b02      	cmp	r3, #2
 800f3d4:	d103      	bne.n	800f3de <xQueueGenericSendFromISR+0x66>
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d101      	bne.n	800f3e2 <xQueueGenericSendFromISR+0x6a>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e000      	b.n	800f3e4 <xQueueGenericSendFromISR+0x6c>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d109      	bne.n	800f3fc <xQueueGenericSendFromISR+0x84>
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	61fb      	str	r3, [r7, #28]
 800f3fa:	e7fe      	b.n	800f3fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f3fc:	f001 fbc2 	bl	8010b84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f400:	f3ef 8211 	mrs	r2, BASEPRI
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	61ba      	str	r2, [r7, #24]
 800f416:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f418:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f41a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f424:	429a      	cmp	r2, r3
 800f426:	d302      	bcc.n	800f42e <xQueueGenericSendFromISR+0xb6>
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	2b02      	cmp	r3, #2
 800f42c:	d12c      	bne.n	800f488 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f43e:	f000 f9aa 	bl	800f796 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f442:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44a:	d112      	bne.n	800f472 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	2b00      	cmp	r3, #0
 800f452:	d016      	beq.n	800f482 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	3324      	adds	r3, #36	; 0x24
 800f458:	4618      	mov	r0, r3
 800f45a:	f000 fecf 	bl	80101fc <xTaskRemoveFromEventList>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00e      	beq.n	800f482 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00b      	beq.n	800f482 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2201      	movs	r2, #1
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	e007      	b.n	800f482 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f476:	3301      	adds	r3, #1
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	b25a      	sxtb	r2, r3
 800f47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f482:	2301      	movs	r3, #1
 800f484:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f486:	e001      	b.n	800f48c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f488:	2300      	movs	r3, #0
 800f48a:	637b      	str	r3, [r7, #52]	; 0x34
 800f48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3738      	adds	r7, #56	; 0x38
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b08c      	sub	sp, #48	; 0x30
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d109      	bne.n	800f4ce <xQueueReceive+0x2e>
	__asm volatile
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	623b      	str	r3, [r7, #32]
 800f4cc:	e7fe      	b.n	800f4cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d103      	bne.n	800f4dc <xQueueReceive+0x3c>
 800f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d101      	bne.n	800f4e0 <xQueueReceive+0x40>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e000      	b.n	800f4e2 <xQueueReceive+0x42>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d109      	bne.n	800f4fa <xQueueReceive+0x5a>
 800f4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	61fb      	str	r3, [r7, #28]
 800f4f8:	e7fe      	b.n	800f4f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f4fa:	f001 f835 	bl	8010568 <xTaskGetSchedulerState>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d102      	bne.n	800f50a <xQueueReceive+0x6a>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d101      	bne.n	800f50e <xQueueReceive+0x6e>
 800f50a:	2301      	movs	r3, #1
 800f50c:	e000      	b.n	800f510 <xQueueReceive+0x70>
 800f50e:	2300      	movs	r3, #0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d109      	bne.n	800f528 <xQueueReceive+0x88>
 800f514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f518:	f383 8811 	msr	BASEPRI, r3
 800f51c:	f3bf 8f6f 	isb	sy
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	61bb      	str	r3, [r7, #24]
 800f526:	e7fe      	b.n	800f526 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f528:	f001 fa50 	bl	80109cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f530:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f534:	2b00      	cmp	r3, #0
 800f536:	d01f      	beq.n	800f578 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f538:	68b9      	ldr	r1, [r7, #8]
 800f53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f53c:	f000 f995 	bl	800f86a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f542:	1e5a      	subs	r2, r3, #1
 800f544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f546:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54a:	691b      	ldr	r3, [r3, #16]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00f      	beq.n	800f570 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f552:	3310      	adds	r3, #16
 800f554:	4618      	mov	r0, r3
 800f556:	f000 fe51 	bl	80101fc <xTaskRemoveFromEventList>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d007      	beq.n	800f570 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f560:	4b3c      	ldr	r3, [pc, #240]	; (800f654 <xQueueReceive+0x1b4>)
 800f562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f570:	f001 fa5a 	bl	8010a28 <vPortExitCritical>
				return pdPASS;
 800f574:	2301      	movs	r3, #1
 800f576:	e069      	b.n	800f64c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d103      	bne.n	800f586 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f57e:	f001 fa53 	bl	8010a28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f582:	2300      	movs	r3, #0
 800f584:	e062      	b.n	800f64c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d106      	bne.n	800f59a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f58c:	f107 0310 	add.w	r3, r7, #16
 800f590:	4618      	mov	r0, r3
 800f592:	f000 fe95 	bl	80102c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f596:	2301      	movs	r3, #1
 800f598:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f59a:	f001 fa45 	bl	8010a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f59e:	f000 fc2b 	bl	800fdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f5a2:	f001 fa13 	bl	80109cc <vPortEnterCritical>
 800f5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5ac:	b25b      	sxtb	r3, r3
 800f5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b2:	d103      	bne.n	800f5bc <xQueueReceive+0x11c>
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5c2:	b25b      	sxtb	r3, r3
 800f5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c8:	d103      	bne.n	800f5d2 <xQueueReceive+0x132>
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5d2:	f001 fa29 	bl	8010a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5d6:	1d3a      	adds	r2, r7, #4
 800f5d8:	f107 0310 	add.w	r3, r7, #16
 800f5dc:	4611      	mov	r1, r2
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 fe84 	bl	80102ec <xTaskCheckForTimeOut>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d123      	bne.n	800f632 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5ec:	f000 f9b5 	bl	800f95a <prvIsQueueEmpty>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d017      	beq.n	800f626 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f8:	3324      	adds	r3, #36	; 0x24
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	4611      	mov	r1, r2
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 fdd8 	bl	80101b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f606:	f000 f956 	bl	800f8b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f60a:	f000 fc03 	bl	800fe14 <xTaskResumeAll>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d189      	bne.n	800f528 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f614:	4b0f      	ldr	r3, [pc, #60]	; (800f654 <xQueueReceive+0x1b4>)
 800f616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f61a:	601a      	str	r2, [r3, #0]
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	e780      	b.n	800f528 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f628:	f000 f945 	bl	800f8b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f62c:	f000 fbf2 	bl	800fe14 <xTaskResumeAll>
 800f630:	e77a      	b.n	800f528 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f634:	f000 f93f 	bl	800f8b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f638:	f000 fbec 	bl	800fe14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f63e:	f000 f98c 	bl	800f95a <prvIsQueueEmpty>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	f43f af6f 	beq.w	800f528 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f64a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3730      	adds	r7, #48	; 0x30
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	e000ed04 	.word	0xe000ed04

0800f658 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08e      	sub	sp, #56	; 0x38
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d109      	bne.n	800f682 <xQueueReceiveFromISR+0x2a>
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	623b      	str	r3, [r7, #32]
 800f680:	e7fe      	b.n	800f680 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <xQueueReceiveFromISR+0x38>
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d101      	bne.n	800f694 <xQueueReceiveFromISR+0x3c>
 800f690:	2301      	movs	r3, #1
 800f692:	e000      	b.n	800f696 <xQueueReceiveFromISR+0x3e>
 800f694:	2300      	movs	r3, #0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d109      	bne.n	800f6ae <xQueueReceiveFromISR+0x56>
 800f69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	61fb      	str	r3, [r7, #28]
 800f6ac:	e7fe      	b.n	800f6ac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6ae:	f001 fa69 	bl	8010b84 <vPortValidateInterruptPriority>
	__asm volatile
 800f6b2:	f3ef 8211 	mrs	r2, BASEPRI
 800f6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ba:	f383 8811 	msr	BASEPRI, r3
 800f6be:	f3bf 8f6f 	isb	sy
 800f6c2:	f3bf 8f4f 	dsb	sy
 800f6c6:	61ba      	str	r2, [r7, #24]
 800f6c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f6ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d02f      	beq.n	800f73a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f6e4:	68b9      	ldr	r1, [r7, #8]
 800f6e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6e8:	f000 f8bf 	bl	800f86a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	1e5a      	subs	r2, r3, #1
 800f6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f6f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6fc:	d112      	bne.n	800f724 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d016      	beq.n	800f734 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f708:	3310      	adds	r3, #16
 800f70a:	4618      	mov	r0, r3
 800f70c:	f000 fd76 	bl	80101fc <xTaskRemoveFromEventList>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00e      	beq.n	800f734 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00b      	beq.n	800f734 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	e007      	b.n	800f734 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f728:	3301      	adds	r3, #1
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	b25a      	sxtb	r2, r3
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f734:	2301      	movs	r3, #1
 800f736:	637b      	str	r3, [r7, #52]	; 0x34
 800f738:	e001      	b.n	800f73e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f73a:	2300      	movs	r3, #0
 800f73c:	637b      	str	r3, [r7, #52]	; 0x34
 800f73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f740:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3738      	adds	r7, #56	; 0x38
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b086      	sub	sp, #24
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d109      	bne.n	800f778 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800f764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f768:	f383 8811 	msr	BASEPRI, r3
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	60fb      	str	r3, [r7, #12]
 800f776:	e7fe      	b.n	800f776 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800f778:	f001 f928 	bl	80109cc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f788:	f001 f94e 	bl	8010a28 <vPortExitCritical>

	return uxReturn;
 800f78c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f78e:	4618      	mov	r0, r3
 800f790:	3718      	adds	r7, #24
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b086      	sub	sp, #24
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	60f8      	str	r0, [r7, #12]
 800f79e:	60b9      	str	r1, [r7, #8]
 800f7a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10d      	bne.n	800f7d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d14d      	bne.n	800f858 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f000 feef 	bl	80105a4 <xTaskPriorityDisinherit>
 800f7c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
 800f7ce:	e043      	b.n	800f858 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d119      	bne.n	800f80a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6858      	ldr	r0, [r3, #4]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7de:	461a      	mov	r2, r3
 800f7e0:	68b9      	ldr	r1, [r7, #8]
 800f7e2:	f002 f9c1 	bl	8011b68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	685a      	ldr	r2, [r3, #4]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ee:	441a      	add	r2, r3
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d32b      	bcc.n	800f858 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	605a      	str	r2, [r3, #4]
 800f808:	e026      	b.n	800f858 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	68d8      	ldr	r0, [r3, #12]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f812:	461a      	mov	r2, r3
 800f814:	68b9      	ldr	r1, [r7, #8]
 800f816:	f002 f9a7 	bl	8011b68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	68da      	ldr	r2, [r3, #12]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f822:	425b      	negs	r3, r3
 800f824:	441a      	add	r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	68da      	ldr	r2, [r3, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	429a      	cmp	r2, r3
 800f834:	d207      	bcs.n	800f846 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	689a      	ldr	r2, [r3, #8]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83e:	425b      	negs	r3, r3
 800f840:	441a      	add	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d105      	bne.n	800f858 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	3b01      	subs	r3, #1
 800f856:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	1c5a      	adds	r2, r3, #1
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f860:	697b      	ldr	r3, [r7, #20]
}
 800f862:	4618      	mov	r0, r3
 800f864:	3718      	adds	r7, #24
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d018      	beq.n	800f8ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	68da      	ldr	r2, [r3, #12]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f884:	441a      	add	r2, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	68da      	ldr	r2, [r3, #12]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	429a      	cmp	r2, r3
 800f894:	d303      	bcc.n	800f89e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	68d9      	ldr	r1, [r3, #12]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	6838      	ldr	r0, [r7, #0]
 800f8aa:	f002 f95d 	bl	8011b68 <memcpy>
	}
}
 800f8ae:	bf00      	nop
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b084      	sub	sp, #16
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f8be:	f001 f885 	bl	80109cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8ca:	e011      	b.n	800f8f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d012      	beq.n	800f8fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3324      	adds	r3, #36	; 0x24
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f000 fc8f 	bl	80101fc <xTaskRemoveFromEventList>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d001      	beq.n	800f8e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f8e4:	f000 fd62 	bl	80103ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f8e8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dce9      	bgt.n	800f8cc <prvUnlockQueue+0x16>
 800f8f8:	e000      	b.n	800f8fc <prvUnlockQueue+0x46>
					break;
 800f8fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	22ff      	movs	r2, #255	; 0xff
 800f900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f904:	f001 f890 	bl	8010a28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f908:	f001 f860 	bl	80109cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f912:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f914:	e011      	b.n	800f93a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	691b      	ldr	r3, [r3, #16]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d012      	beq.n	800f944 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	3310      	adds	r3, #16
 800f922:	4618      	mov	r0, r3
 800f924:	f000 fc6a 	bl	80101fc <xTaskRemoveFromEventList>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f92e:	f000 fd3d 	bl	80103ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f932:	7bbb      	ldrb	r3, [r7, #14]
 800f934:	3b01      	subs	r3, #1
 800f936:	b2db      	uxtb	r3, r3
 800f938:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f93a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	dce9      	bgt.n	800f916 <prvUnlockQueue+0x60>
 800f942:	e000      	b.n	800f946 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f944:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	22ff      	movs	r2, #255	; 0xff
 800f94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f94e:	f001 f86b 	bl	8010a28 <vPortExitCritical>
}
 800f952:	bf00      	nop
 800f954:	3710      	adds	r7, #16
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b084      	sub	sp, #16
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f962:	f001 f833 	bl	80109cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d102      	bne.n	800f974 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f96e:	2301      	movs	r3, #1
 800f970:	60fb      	str	r3, [r7, #12]
 800f972:	e001      	b.n	800f978 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f974:	2300      	movs	r3, #0
 800f976:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f978:	f001 f856 	bl	8010a28 <vPortExitCritical>

	return xReturn;
 800f97c:	68fb      	ldr	r3, [r7, #12]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f98e:	f001 f81d 	bl	80109cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d102      	bne.n	800f9a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	60fb      	str	r3, [r7, #12]
 800f9a2:	e001      	b.n	800f9a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f9a8:	f001 f83e 	bl	8010a28 <vPortExitCritical>

	return xReturn;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b08e      	sub	sp, #56	; 0x38
 800f9ba:	af04      	add	r7, sp, #16
 800f9bc:	60f8      	str	r0, [r7, #12]
 800f9be:	60b9      	str	r1, [r7, #8]
 800f9c0:	607a      	str	r2, [r7, #4]
 800f9c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d109      	bne.n	800f9de <xTaskCreateStatic+0x28>
 800f9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ce:	f383 8811 	msr	BASEPRI, r3
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	623b      	str	r3, [r7, #32]
 800f9dc:	e7fe      	b.n	800f9dc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d109      	bne.n	800f9f8 <xTaskCreateStatic+0x42>
 800f9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e8:	f383 8811 	msr	BASEPRI, r3
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	61fb      	str	r3, [r7, #28]
 800f9f6:	e7fe      	b.n	800f9f6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f9f8:	2354      	movs	r3, #84	; 0x54
 800f9fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	2b54      	cmp	r3, #84	; 0x54
 800fa00:	d009      	beq.n	800fa16 <xTaskCreateStatic+0x60>
 800fa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa06:	f383 8811 	msr	BASEPRI, r3
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	61bb      	str	r3, [r7, #24]
 800fa14:	e7fe      	b.n	800fa14 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d01e      	beq.n	800fa5c <xTaskCreateStatic+0xa6>
 800fa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d01b      	beq.n	800fa5c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	2202      	movs	r2, #2
 800fa32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa36:	2300      	movs	r3, #0
 800fa38:	9303      	str	r3, [sp, #12]
 800fa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3c:	9302      	str	r3, [sp, #8]
 800fa3e:	f107 0314 	add.w	r3, r7, #20
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	68b9      	ldr	r1, [r7, #8]
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f000 f850 	bl	800faf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa56:	f000 f8d3 	bl	800fc00 <prvAddNewTaskToReadyList>
 800fa5a:	e001      	b.n	800fa60 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa60:	697b      	ldr	r3, [r7, #20]
	}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3728      	adds	r7, #40	; 0x28
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b08c      	sub	sp, #48	; 0x30
 800fa6e:	af04      	add	r7, sp, #16
 800fa70:	60f8      	str	r0, [r7, #12]
 800fa72:	60b9      	str	r1, [r7, #8]
 800fa74:	603b      	str	r3, [r7, #0]
 800fa76:	4613      	mov	r3, r2
 800fa78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fa7a:	88fb      	ldrh	r3, [r7, #6]
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f001 f8be 	bl	8010c00 <pvPortMalloc>
 800fa84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d00e      	beq.n	800faaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fa8c:	2054      	movs	r0, #84	; 0x54
 800fa8e:	f001 f8b7 	bl	8010c00 <pvPortMalloc>
 800fa92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d003      	beq.n	800faa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	697a      	ldr	r2, [r7, #20]
 800fa9e:	631a      	str	r2, [r3, #48]	; 0x30
 800faa0:	e005      	b.n	800faae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800faa2:	6978      	ldr	r0, [r7, #20]
 800faa4:	f001 f96e 	bl	8010d84 <vPortFree>
 800faa8:	e001      	b.n	800faae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800faaa:	2300      	movs	r3, #0
 800faac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d017      	beq.n	800fae4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fabc:	88fa      	ldrh	r2, [r7, #6]
 800fabe:	2300      	movs	r3, #0
 800fac0:	9303      	str	r3, [sp, #12]
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	9302      	str	r3, [sp, #8]
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	9301      	str	r3, [sp, #4]
 800faca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800facc:	9300      	str	r3, [sp, #0]
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	68b9      	ldr	r1, [r7, #8]
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f000 f80e 	bl	800faf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fad8:	69f8      	ldr	r0, [r7, #28]
 800fada:	f000 f891 	bl	800fc00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fade:	2301      	movs	r3, #1
 800fae0:	61bb      	str	r3, [r7, #24]
 800fae2:	e002      	b.n	800faea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fae4:	f04f 33ff 	mov.w	r3, #4294967295
 800fae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800faea:	69bb      	ldr	r3, [r7, #24]
	}
 800faec:	4618      	mov	r0, r3
 800faee:	3720      	adds	r7, #32
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
 800fb00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	f023 0307 	bic.w	r3, r3, #7
 800fb1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	f003 0307 	and.w	r3, r3, #7
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d009      	beq.n	800fb3a <prvInitialiseNewTask+0x46>
 800fb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2a:	f383 8811 	msr	BASEPRI, r3
 800fb2e:	f3bf 8f6f 	isb	sy
 800fb32:	f3bf 8f4f 	dsb	sy
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e7fe      	b.n	800fb38 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d01f      	beq.n	800fb80 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb40:	2300      	movs	r3, #0
 800fb42:	61fb      	str	r3, [r7, #28]
 800fb44:	e012      	b.n	800fb6c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb46:	68ba      	ldr	r2, [r7, #8]
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	7819      	ldrb	r1, [r3, #0]
 800fb4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	4413      	add	r3, r2
 800fb54:	3334      	adds	r3, #52	; 0x34
 800fb56:	460a      	mov	r2, r1
 800fb58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	4413      	add	r3, r2
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d006      	beq.n	800fb74 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	61fb      	str	r3, [r7, #28]
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	2b0f      	cmp	r3, #15
 800fb70:	d9e9      	bls.n	800fb46 <prvInitialiseNewTask+0x52>
 800fb72:	e000      	b.n	800fb76 <prvInitialiseNewTask+0x82>
			{
				break;
 800fb74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fb7e:	e003      	b.n	800fb88 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8a:	2b06      	cmp	r3, #6
 800fb8c:	d901      	bls.n	800fb92 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fb8e:	2306      	movs	r3, #6
 800fb90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba0:	2200      	movs	r2, #0
 800fba2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba6:	3304      	adds	r3, #4
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7ff f91d 	bl	800ede8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb0:	3318      	adds	r3, #24
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff f918 	bl	800ede8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc0:	f1c3 0207 	rsb	r2, r3, #7
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbcc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fbdc:	683a      	ldr	r2, [r7, #0]
 800fbde:	68f9      	ldr	r1, [r7, #12]
 800fbe0:	69b8      	ldr	r0, [r7, #24]
 800fbe2:	f000 fdc9 	bl	8010778 <pxPortInitialiseStack>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d002      	beq.n	800fbf8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbf8:	bf00      	nop
 800fbfa:	3720      	adds	r7, #32
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc08:	f000 fee0 	bl	80109cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc0c:	4b2a      	ldr	r3, [pc, #168]	; (800fcb8 <prvAddNewTaskToReadyList+0xb8>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	3301      	adds	r3, #1
 800fc12:	4a29      	ldr	r2, [pc, #164]	; (800fcb8 <prvAddNewTaskToReadyList+0xb8>)
 800fc14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc16:	4b29      	ldr	r3, [pc, #164]	; (800fcbc <prvAddNewTaskToReadyList+0xbc>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d109      	bne.n	800fc32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc1e:	4a27      	ldr	r2, [pc, #156]	; (800fcbc <prvAddNewTaskToReadyList+0xbc>)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc24:	4b24      	ldr	r3, [pc, #144]	; (800fcb8 <prvAddNewTaskToReadyList+0xb8>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d110      	bne.n	800fc4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc2c:	f000 fbe2 	bl	80103f4 <prvInitialiseTaskLists>
 800fc30:	e00d      	b.n	800fc4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc32:	4b23      	ldr	r3, [pc, #140]	; (800fcc0 <prvAddNewTaskToReadyList+0xc0>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d109      	bne.n	800fc4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc3a:	4b20      	ldr	r3, [pc, #128]	; (800fcbc <prvAddNewTaskToReadyList+0xbc>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d802      	bhi.n	800fc4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc48:	4a1c      	ldr	r2, [pc, #112]	; (800fcbc <prvAddNewTaskToReadyList+0xbc>)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc4e:	4b1d      	ldr	r3, [pc, #116]	; (800fcc4 <prvAddNewTaskToReadyList+0xc4>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	3301      	adds	r3, #1
 800fc54:	4a1b      	ldr	r2, [pc, #108]	; (800fcc4 <prvAddNewTaskToReadyList+0xc4>)
 800fc56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	409a      	lsls	r2, r3
 800fc60:	4b19      	ldr	r3, [pc, #100]	; (800fcc8 <prvAddNewTaskToReadyList+0xc8>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	4a18      	ldr	r2, [pc, #96]	; (800fcc8 <prvAddNewTaskToReadyList+0xc8>)
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc6e:	4613      	mov	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	4a15      	ldr	r2, [pc, #84]	; (800fccc <prvAddNewTaskToReadyList+0xcc>)
 800fc78:	441a      	add	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	4619      	mov	r1, r3
 800fc80:	4610      	mov	r0, r2
 800fc82:	f7ff f8be 	bl	800ee02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fc86:	f000 fecf 	bl	8010a28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fc8a:	4b0d      	ldr	r3, [pc, #52]	; (800fcc0 <prvAddNewTaskToReadyList+0xc0>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d00e      	beq.n	800fcb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fc92:	4b0a      	ldr	r3, [pc, #40]	; (800fcbc <prvAddNewTaskToReadyList+0xbc>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d207      	bcs.n	800fcb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fca0:	4b0b      	ldr	r3, [pc, #44]	; (800fcd0 <prvAddNewTaskToReadyList+0xd0>)
 800fca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fca6:	601a      	str	r2, [r3, #0]
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	20000990 	.word	0x20000990
 800fcbc:	20000890 	.word	0x20000890
 800fcc0:	2000099c 	.word	0x2000099c
 800fcc4:	200009ac 	.word	0x200009ac
 800fcc8:	20000998 	.word	0x20000998
 800fccc:	20000894 	.word	0x20000894
 800fcd0:	e000ed04 	.word	0xe000ed04

0800fcd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d016      	beq.n	800fd14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fce6:	4b13      	ldr	r3, [pc, #76]	; (800fd34 <vTaskDelay+0x60>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d009      	beq.n	800fd02 <vTaskDelay+0x2e>
 800fcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	60bb      	str	r3, [r7, #8]
 800fd00:	e7fe      	b.n	800fd00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fd02:	f000 f879 	bl	800fdf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd06:	2100      	movs	r1, #0
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 fccf 	bl	80106ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd0e:	f000 f881 	bl	800fe14 <xTaskResumeAll>
 800fd12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d107      	bne.n	800fd2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fd1a:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <vTaskDelay+0x64>)
 800fd1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd2a:	bf00      	nop
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	200009b8 	.word	0x200009b8
 800fd38:	e000ed04 	.word	0xe000ed04

0800fd3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08a      	sub	sp, #40	; 0x28
 800fd40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd46:	2300      	movs	r3, #0
 800fd48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd4a:	463a      	mov	r2, r7
 800fd4c:	1d39      	adds	r1, r7, #4
 800fd4e:	f107 0308 	add.w	r3, r7, #8
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7f3 f800 	bl	8002d58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd58:	6839      	ldr	r1, [r7, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68ba      	ldr	r2, [r7, #8]
 800fd5e:	9202      	str	r2, [sp, #8]
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	2300      	movs	r3, #0
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	2300      	movs	r3, #0
 800fd68:	460a      	mov	r2, r1
 800fd6a:	491d      	ldr	r1, [pc, #116]	; (800fde0 <vTaskStartScheduler+0xa4>)
 800fd6c:	481d      	ldr	r0, [pc, #116]	; (800fde4 <vTaskStartScheduler+0xa8>)
 800fd6e:	f7ff fe22 	bl	800f9b6 <xTaskCreateStatic>
 800fd72:	4602      	mov	r2, r0
 800fd74:	4b1c      	ldr	r3, [pc, #112]	; (800fde8 <vTaskStartScheduler+0xac>)
 800fd76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd78:	4b1b      	ldr	r3, [pc, #108]	; (800fde8 <vTaskStartScheduler+0xac>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd80:	2301      	movs	r3, #1
 800fd82:	617b      	str	r3, [r7, #20]
 800fd84:	e001      	b.n	800fd8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fd86:	2300      	movs	r3, #0
 800fd88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d115      	bne.n	800fdbc <vTaskStartScheduler+0x80>
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fda2:	4b12      	ldr	r3, [pc, #72]	; (800fdec <vTaskStartScheduler+0xb0>)
 800fda4:	f04f 32ff 	mov.w	r2, #4294967295
 800fda8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fdaa:	4b11      	ldr	r3, [pc, #68]	; (800fdf0 <vTaskStartScheduler+0xb4>)
 800fdac:	2201      	movs	r2, #1
 800fdae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fdb0:	4b10      	ldr	r3, [pc, #64]	; (800fdf4 <vTaskStartScheduler+0xb8>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fdb6:	f000 fd6b 	bl	8010890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fdba:	e00d      	b.n	800fdd8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc2:	d109      	bne.n	800fdd8 <vTaskStartScheduler+0x9c>
 800fdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc8:	f383 8811 	msr	BASEPRI, r3
 800fdcc:	f3bf 8f6f 	isb	sy
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	60fb      	str	r3, [r7, #12]
 800fdd6:	e7fe      	b.n	800fdd6 <vTaskStartScheduler+0x9a>
}
 800fdd8:	bf00      	nop
 800fdda:	3718      	adds	r7, #24
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	08017758 	.word	0x08017758
 800fde4:	080103c5 	.word	0x080103c5
 800fde8:	200009b4 	.word	0x200009b4
 800fdec:	200009b0 	.word	0x200009b0
 800fdf0:	2000099c 	.word	0x2000099c
 800fdf4:	20000994 	.word	0x20000994

0800fdf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fdfc:	4b04      	ldr	r3, [pc, #16]	; (800fe10 <vTaskSuspendAll+0x18>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	3301      	adds	r3, #1
 800fe02:	4a03      	ldr	r2, [pc, #12]	; (800fe10 <vTaskSuspendAll+0x18>)
 800fe04:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fe06:	bf00      	nop
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr
 800fe10:	200009b8 	.word	0x200009b8

0800fe14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe22:	4b41      	ldr	r3, [pc, #260]	; (800ff28 <xTaskResumeAll+0x114>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d109      	bne.n	800fe3e <xTaskResumeAll+0x2a>
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	f383 8811 	msr	BASEPRI, r3
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	603b      	str	r3, [r7, #0]
 800fe3c:	e7fe      	b.n	800fe3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe3e:	f000 fdc5 	bl	80109cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe42:	4b39      	ldr	r3, [pc, #228]	; (800ff28 <xTaskResumeAll+0x114>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3b01      	subs	r3, #1
 800fe48:	4a37      	ldr	r2, [pc, #220]	; (800ff28 <xTaskResumeAll+0x114>)
 800fe4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe4c:	4b36      	ldr	r3, [pc, #216]	; (800ff28 <xTaskResumeAll+0x114>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d161      	bne.n	800ff18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe54:	4b35      	ldr	r3, [pc, #212]	; (800ff2c <xTaskResumeAll+0x118>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d05d      	beq.n	800ff18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe5c:	e02e      	b.n	800febc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe5e:	4b34      	ldr	r3, [pc, #208]	; (800ff30 <xTaskResumeAll+0x11c>)
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	3318      	adds	r3, #24
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff f826 	bl	800eebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	3304      	adds	r3, #4
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff f821 	bl	800eebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7e:	2201      	movs	r2, #1
 800fe80:	409a      	lsls	r2, r3
 800fe82:	4b2c      	ldr	r3, [pc, #176]	; (800ff34 <xTaskResumeAll+0x120>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	4a2a      	ldr	r2, [pc, #168]	; (800ff34 <xTaskResumeAll+0x120>)
 800fe8a:	6013      	str	r3, [r2, #0]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe90:	4613      	mov	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4413      	add	r3, r2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4a27      	ldr	r2, [pc, #156]	; (800ff38 <xTaskResumeAll+0x124>)
 800fe9a:	441a      	add	r2, r3
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	3304      	adds	r3, #4
 800fea0:	4619      	mov	r1, r3
 800fea2:	4610      	mov	r0, r2
 800fea4:	f7fe ffad 	bl	800ee02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feac:	4b23      	ldr	r3, [pc, #140]	; (800ff3c <xTaskResumeAll+0x128>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d302      	bcc.n	800febc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800feb6:	4b22      	ldr	r3, [pc, #136]	; (800ff40 <xTaskResumeAll+0x12c>)
 800feb8:	2201      	movs	r2, #1
 800feba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800febc:	4b1c      	ldr	r3, [pc, #112]	; (800ff30 <xTaskResumeAll+0x11c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d1cc      	bne.n	800fe5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d001      	beq.n	800fece <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800feca:	f000 fb2d 	bl	8010528 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fece:	4b1d      	ldr	r3, [pc, #116]	; (800ff44 <xTaskResumeAll+0x130>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d010      	beq.n	800fefc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800feda:	f000 f859 	bl	800ff90 <xTaskIncrementTick>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800fee4:	4b16      	ldr	r3, [pc, #88]	; (800ff40 <xTaskResumeAll+0x12c>)
 800fee6:	2201      	movs	r2, #1
 800fee8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	3b01      	subs	r3, #1
 800feee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d1f1      	bne.n	800feda <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800fef6:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <xTaskResumeAll+0x130>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fefc:	4b10      	ldr	r3, [pc, #64]	; (800ff40 <xTaskResumeAll+0x12c>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d009      	beq.n	800ff18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff04:	2301      	movs	r3, #1
 800ff06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff08:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <xTaskResumeAll+0x134>)
 800ff0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff0e:	601a      	str	r2, [r3, #0]
 800ff10:	f3bf 8f4f 	dsb	sy
 800ff14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff18:	f000 fd86 	bl	8010a28 <vPortExitCritical>

	return xAlreadyYielded;
 800ff1c:	68bb      	ldr	r3, [r7, #8]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	200009b8 	.word	0x200009b8
 800ff2c:	20000990 	.word	0x20000990
 800ff30:	20000950 	.word	0x20000950
 800ff34:	20000998 	.word	0x20000998
 800ff38:	20000894 	.word	0x20000894
 800ff3c:	20000890 	.word	0x20000890
 800ff40:	200009a4 	.word	0x200009a4
 800ff44:	200009a0 	.word	0x200009a0
 800ff48:	e000ed04 	.word	0xe000ed04

0800ff4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff52:	4b05      	ldr	r3, [pc, #20]	; (800ff68 <xTaskGetTickCount+0x1c>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff58:	687b      	ldr	r3, [r7, #4]
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	20000994 	.word	0x20000994

0800ff6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff72:	f000 fe07 	bl	8010b84 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ff76:	2300      	movs	r3, #0
 800ff78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ff7a:	4b04      	ldr	r3, [pc, #16]	; (800ff8c <xTaskGetTickCountFromISR+0x20>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff80:	683b      	ldr	r3, [r7, #0]
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000994 	.word	0x20000994

0800ff90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b086      	sub	sp, #24
 800ff94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ff96:	2300      	movs	r3, #0
 800ff98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff9a:	4b4e      	ldr	r3, [pc, #312]	; (80100d4 <xTaskIncrementTick+0x144>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	f040 8087 	bne.w	80100b2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ffa4:	4b4c      	ldr	r3, [pc, #304]	; (80100d8 <xTaskIncrementTick+0x148>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ffac:	4a4a      	ldr	r2, [pc, #296]	; (80100d8 <xTaskIncrementTick+0x148>)
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d11f      	bne.n	800fff8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ffb8:	4b48      	ldr	r3, [pc, #288]	; (80100dc <xTaskIncrementTick+0x14c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d009      	beq.n	800ffd6 <xTaskIncrementTick+0x46>
 800ffc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc6:	f383 8811 	msr	BASEPRI, r3
 800ffca:	f3bf 8f6f 	isb	sy
 800ffce:	f3bf 8f4f 	dsb	sy
 800ffd2:	603b      	str	r3, [r7, #0]
 800ffd4:	e7fe      	b.n	800ffd4 <xTaskIncrementTick+0x44>
 800ffd6:	4b41      	ldr	r3, [pc, #260]	; (80100dc <xTaskIncrementTick+0x14c>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	60fb      	str	r3, [r7, #12]
 800ffdc:	4b40      	ldr	r3, [pc, #256]	; (80100e0 <xTaskIncrementTick+0x150>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a3e      	ldr	r2, [pc, #248]	; (80100dc <xTaskIncrementTick+0x14c>)
 800ffe2:	6013      	str	r3, [r2, #0]
 800ffe4:	4a3e      	ldr	r2, [pc, #248]	; (80100e0 <xTaskIncrementTick+0x150>)
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6013      	str	r3, [r2, #0]
 800ffea:	4b3e      	ldr	r3, [pc, #248]	; (80100e4 <xTaskIncrementTick+0x154>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	3301      	adds	r3, #1
 800fff0:	4a3c      	ldr	r2, [pc, #240]	; (80100e4 <xTaskIncrementTick+0x154>)
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	f000 fa98 	bl	8010528 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fff8:	4b3b      	ldr	r3, [pc, #236]	; (80100e8 <xTaskIncrementTick+0x158>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	693a      	ldr	r2, [r7, #16]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d348      	bcc.n	8010094 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010002:	4b36      	ldr	r3, [pc, #216]	; (80100dc <xTaskIncrementTick+0x14c>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d104      	bne.n	8010016 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801000c:	4b36      	ldr	r3, [pc, #216]	; (80100e8 <xTaskIncrementTick+0x158>)
 801000e:	f04f 32ff 	mov.w	r2, #4294967295
 8010012:	601a      	str	r2, [r3, #0]
					break;
 8010014:	e03e      	b.n	8010094 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010016:	4b31      	ldr	r3, [pc, #196]	; (80100dc <xTaskIncrementTick+0x14c>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010026:	693a      	ldr	r2, [r7, #16]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	429a      	cmp	r2, r3
 801002c:	d203      	bcs.n	8010036 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801002e:	4a2e      	ldr	r2, [pc, #184]	; (80100e8 <xTaskIncrementTick+0x158>)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010034:	e02e      	b.n	8010094 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	3304      	adds	r3, #4
 801003a:	4618      	mov	r0, r3
 801003c:	f7fe ff3e 	bl	800eebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010044:	2b00      	cmp	r3, #0
 8010046:	d004      	beq.n	8010052 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	3318      	adds	r3, #24
 801004c:	4618      	mov	r0, r3
 801004e:	f7fe ff35 	bl	800eebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010056:	2201      	movs	r2, #1
 8010058:	409a      	lsls	r2, r3
 801005a:	4b24      	ldr	r3, [pc, #144]	; (80100ec <xTaskIncrementTick+0x15c>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4313      	orrs	r3, r2
 8010060:	4a22      	ldr	r2, [pc, #136]	; (80100ec <xTaskIncrementTick+0x15c>)
 8010062:	6013      	str	r3, [r2, #0]
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010068:	4613      	mov	r3, r2
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	4413      	add	r3, r2
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4a1f      	ldr	r2, [pc, #124]	; (80100f0 <xTaskIncrementTick+0x160>)
 8010072:	441a      	add	r2, r3
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	3304      	adds	r3, #4
 8010078:	4619      	mov	r1, r3
 801007a:	4610      	mov	r0, r2
 801007c:	f7fe fec1 	bl	800ee02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010084:	4b1b      	ldr	r3, [pc, #108]	; (80100f4 <xTaskIncrementTick+0x164>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801008a:	429a      	cmp	r2, r3
 801008c:	d3b9      	bcc.n	8010002 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801008e:	2301      	movs	r3, #1
 8010090:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010092:	e7b6      	b.n	8010002 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010094:	4b17      	ldr	r3, [pc, #92]	; (80100f4 <xTaskIncrementTick+0x164>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009a:	4915      	ldr	r1, [pc, #84]	; (80100f0 <xTaskIncrementTick+0x160>)
 801009c:	4613      	mov	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	440b      	add	r3, r1
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d907      	bls.n	80100bc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80100ac:	2301      	movs	r3, #1
 80100ae:	617b      	str	r3, [r7, #20]
 80100b0:	e004      	b.n	80100bc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80100b2:	4b11      	ldr	r3, [pc, #68]	; (80100f8 <xTaskIncrementTick+0x168>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	3301      	adds	r3, #1
 80100b8:	4a0f      	ldr	r2, [pc, #60]	; (80100f8 <xTaskIncrementTick+0x168>)
 80100ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80100bc:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <xTaskIncrementTick+0x16c>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80100c8:	697b      	ldr	r3, [r7, #20]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	200009b8 	.word	0x200009b8
 80100d8:	20000994 	.word	0x20000994
 80100dc:	20000948 	.word	0x20000948
 80100e0:	2000094c 	.word	0x2000094c
 80100e4:	200009a8 	.word	0x200009a8
 80100e8:	200009b0 	.word	0x200009b0
 80100ec:	20000998 	.word	0x20000998
 80100f0:	20000894 	.word	0x20000894
 80100f4:	20000890 	.word	0x20000890
 80100f8:	200009a0 	.word	0x200009a0
 80100fc:	200009a4 	.word	0x200009a4

08010100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010100:	b480      	push	{r7}
 8010102:	b087      	sub	sp, #28
 8010104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010106:	4b26      	ldr	r3, [pc, #152]	; (80101a0 <vTaskSwitchContext+0xa0>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d003      	beq.n	8010116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801010e:	4b25      	ldr	r3, [pc, #148]	; (80101a4 <vTaskSwitchContext+0xa4>)
 8010110:	2201      	movs	r2, #1
 8010112:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010114:	e03e      	b.n	8010194 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010116:	4b23      	ldr	r3, [pc, #140]	; (80101a4 <vTaskSwitchContext+0xa4>)
 8010118:	2200      	movs	r2, #0
 801011a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801011c:	4b22      	ldr	r3, [pc, #136]	; (80101a8 <vTaskSwitchContext+0xa8>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	fab3 f383 	clz	r3, r3
 8010128:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801012a:	7afb      	ldrb	r3, [r7, #11]
 801012c:	f1c3 031f 	rsb	r3, r3, #31
 8010130:	617b      	str	r3, [r7, #20]
 8010132:	491e      	ldr	r1, [pc, #120]	; (80101ac <vTaskSwitchContext+0xac>)
 8010134:	697a      	ldr	r2, [r7, #20]
 8010136:	4613      	mov	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	4413      	add	r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	440b      	add	r3, r1
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d109      	bne.n	801015a <vTaskSwitchContext+0x5a>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	607b      	str	r3, [r7, #4]
 8010158:	e7fe      	b.n	8010158 <vTaskSwitchContext+0x58>
 801015a:	697a      	ldr	r2, [r7, #20]
 801015c:	4613      	mov	r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	4413      	add	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	4a11      	ldr	r2, [pc, #68]	; (80101ac <vTaskSwitchContext+0xac>)
 8010166:	4413      	add	r3, r2
 8010168:	613b      	str	r3, [r7, #16]
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	685a      	ldr	r2, [r3, #4]
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	605a      	str	r2, [r3, #4]
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	685a      	ldr	r2, [r3, #4]
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	3308      	adds	r3, #8
 801017c:	429a      	cmp	r2, r3
 801017e:	d104      	bne.n	801018a <vTaskSwitchContext+0x8a>
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	685a      	ldr	r2, [r3, #4]
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	605a      	str	r2, [r3, #4]
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	4a07      	ldr	r2, [pc, #28]	; (80101b0 <vTaskSwitchContext+0xb0>)
 8010192:	6013      	str	r3, [r2, #0]
}
 8010194:	bf00      	nop
 8010196:	371c      	adds	r7, #28
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	200009b8 	.word	0x200009b8
 80101a4:	200009a4 	.word	0x200009a4
 80101a8:	20000998 	.word	0x20000998
 80101ac:	20000894 	.word	0x20000894
 80101b0:	20000890 	.word	0x20000890

080101b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d109      	bne.n	80101d8 <vTaskPlaceOnEventList+0x24>
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	60fb      	str	r3, [r7, #12]
 80101d6:	e7fe      	b.n	80101d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80101d8:	4b07      	ldr	r3, [pc, #28]	; (80101f8 <vTaskPlaceOnEventList+0x44>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	3318      	adds	r3, #24
 80101de:	4619      	mov	r1, r3
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f7fe fe32 	bl	800ee4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80101e6:	2101      	movs	r1, #1
 80101e8:	6838      	ldr	r0, [r7, #0]
 80101ea:	f000 fa5f 	bl	80106ac <prvAddCurrentTaskToDelayedList>
}
 80101ee:	bf00      	nop
 80101f0:	3710      	adds	r7, #16
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	20000890 	.word	0x20000890

080101fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d109      	bne.n	8010226 <xTaskRemoveFromEventList+0x2a>
 8010212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010216:	f383 8811 	msr	BASEPRI, r3
 801021a:	f3bf 8f6f 	isb	sy
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	e7fe      	b.n	8010224 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	3318      	adds	r3, #24
 801022a:	4618      	mov	r0, r3
 801022c:	f7fe fe46 	bl	800eebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010230:	4b1d      	ldr	r3, [pc, #116]	; (80102a8 <xTaskRemoveFromEventList+0xac>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d11c      	bne.n	8010272 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	3304      	adds	r3, #4
 801023c:	4618      	mov	r0, r3
 801023e:	f7fe fe3d 	bl	800eebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010246:	2201      	movs	r2, #1
 8010248:	409a      	lsls	r2, r3
 801024a:	4b18      	ldr	r3, [pc, #96]	; (80102ac <xTaskRemoveFromEventList+0xb0>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	4313      	orrs	r3, r2
 8010250:	4a16      	ldr	r2, [pc, #88]	; (80102ac <xTaskRemoveFromEventList+0xb0>)
 8010252:	6013      	str	r3, [r2, #0]
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010258:	4613      	mov	r3, r2
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	4413      	add	r3, r2
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	4a13      	ldr	r2, [pc, #76]	; (80102b0 <xTaskRemoveFromEventList+0xb4>)
 8010262:	441a      	add	r2, r3
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	3304      	adds	r3, #4
 8010268:	4619      	mov	r1, r3
 801026a:	4610      	mov	r0, r2
 801026c:	f7fe fdc9 	bl	800ee02 <vListInsertEnd>
 8010270:	e005      	b.n	801027e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	3318      	adds	r3, #24
 8010276:	4619      	mov	r1, r3
 8010278:	480e      	ldr	r0, [pc, #56]	; (80102b4 <xTaskRemoveFromEventList+0xb8>)
 801027a:	f7fe fdc2 	bl	800ee02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010282:	4b0d      	ldr	r3, [pc, #52]	; (80102b8 <xTaskRemoveFromEventList+0xbc>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010288:	429a      	cmp	r2, r3
 801028a:	d905      	bls.n	8010298 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801028c:	2301      	movs	r3, #1
 801028e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010290:	4b0a      	ldr	r3, [pc, #40]	; (80102bc <xTaskRemoveFromEventList+0xc0>)
 8010292:	2201      	movs	r2, #1
 8010294:	601a      	str	r2, [r3, #0]
 8010296:	e001      	b.n	801029c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8010298:	2300      	movs	r3, #0
 801029a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801029c:	697b      	ldr	r3, [r7, #20]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3718      	adds	r7, #24
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	200009b8 	.word	0x200009b8
 80102ac:	20000998 	.word	0x20000998
 80102b0:	20000894 	.word	0x20000894
 80102b4:	20000950 	.word	0x20000950
 80102b8:	20000890 	.word	0x20000890
 80102bc:	200009a4 	.word	0x200009a4

080102c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80102c8:	4b06      	ldr	r3, [pc, #24]	; (80102e4 <vTaskInternalSetTimeOutState+0x24>)
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80102d0:	4b05      	ldr	r3, [pc, #20]	; (80102e8 <vTaskInternalSetTimeOutState+0x28>)
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	605a      	str	r2, [r3, #4]
}
 80102d8:	bf00      	nop
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr
 80102e4:	200009a8 	.word	0x200009a8
 80102e8:	20000994 	.word	0x20000994

080102ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b088      	sub	sp, #32
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d109      	bne.n	8010310 <xTaskCheckForTimeOut+0x24>
 80102fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	613b      	str	r3, [r7, #16]
 801030e:	e7fe      	b.n	801030e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d109      	bne.n	801032a <xTaskCheckForTimeOut+0x3e>
 8010316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	60fb      	str	r3, [r7, #12]
 8010328:	e7fe      	b.n	8010328 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801032a:	f000 fb4f 	bl	80109cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801032e:	4b1d      	ldr	r3, [pc, #116]	; (80103a4 <xTaskCheckForTimeOut+0xb8>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	69ba      	ldr	r2, [r7, #24]
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010346:	d102      	bne.n	801034e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010348:	2300      	movs	r3, #0
 801034a:	61fb      	str	r3, [r7, #28]
 801034c:	e023      	b.n	8010396 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	4b15      	ldr	r3, [pc, #84]	; (80103a8 <xTaskCheckForTimeOut+0xbc>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	429a      	cmp	r2, r3
 8010358:	d007      	beq.n	801036a <xTaskCheckForTimeOut+0x7e>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	69ba      	ldr	r2, [r7, #24]
 8010360:	429a      	cmp	r2, r3
 8010362:	d302      	bcc.n	801036a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010364:	2301      	movs	r3, #1
 8010366:	61fb      	str	r3, [r7, #28]
 8010368:	e015      	b.n	8010396 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	697a      	ldr	r2, [r7, #20]
 8010370:	429a      	cmp	r2, r3
 8010372:	d20b      	bcs.n	801038c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	681a      	ldr	r2, [r3, #0]
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	1ad2      	subs	r2, r2, r3
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7ff ff9d 	bl	80102c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010386:	2300      	movs	r3, #0
 8010388:	61fb      	str	r3, [r7, #28]
 801038a:	e004      	b.n	8010396 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	2200      	movs	r2, #0
 8010390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010392:	2301      	movs	r3, #1
 8010394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010396:	f000 fb47 	bl	8010a28 <vPortExitCritical>

	return xReturn;
 801039a:	69fb      	ldr	r3, [r7, #28]
}
 801039c:	4618      	mov	r0, r3
 801039e:	3720      	adds	r7, #32
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	20000994 	.word	0x20000994
 80103a8:	200009a8 	.word	0x200009a8

080103ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80103ac:	b480      	push	{r7}
 80103ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80103b0:	4b03      	ldr	r3, [pc, #12]	; (80103c0 <vTaskMissedYield+0x14>)
 80103b2:	2201      	movs	r2, #1
 80103b4:	601a      	str	r2, [r3, #0]
}
 80103b6:	bf00      	nop
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr
 80103c0:	200009a4 	.word	0x200009a4

080103c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80103cc:	f000 f852 	bl	8010474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80103d0:	4b06      	ldr	r3, [pc, #24]	; (80103ec <prvIdleTask+0x28>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d9f9      	bls.n	80103cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80103d8:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <prvIdleTask+0x2c>)
 80103da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103de:	601a      	str	r2, [r3, #0]
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80103e8:	e7f0      	b.n	80103cc <prvIdleTask+0x8>
 80103ea:	bf00      	nop
 80103ec:	20000894 	.word	0x20000894
 80103f0:	e000ed04 	.word	0xe000ed04

080103f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103fa:	2300      	movs	r3, #0
 80103fc:	607b      	str	r3, [r7, #4]
 80103fe:	e00c      	b.n	801041a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	4613      	mov	r3, r2
 8010404:	009b      	lsls	r3, r3, #2
 8010406:	4413      	add	r3, r2
 8010408:	009b      	lsls	r3, r3, #2
 801040a:	4a12      	ldr	r2, [pc, #72]	; (8010454 <prvInitialiseTaskLists+0x60>)
 801040c:	4413      	add	r3, r2
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe fcca 	bl	800eda8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	3301      	adds	r3, #1
 8010418:	607b      	str	r3, [r7, #4]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2b06      	cmp	r3, #6
 801041e:	d9ef      	bls.n	8010400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010420:	480d      	ldr	r0, [pc, #52]	; (8010458 <prvInitialiseTaskLists+0x64>)
 8010422:	f7fe fcc1 	bl	800eda8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010426:	480d      	ldr	r0, [pc, #52]	; (801045c <prvInitialiseTaskLists+0x68>)
 8010428:	f7fe fcbe 	bl	800eda8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801042c:	480c      	ldr	r0, [pc, #48]	; (8010460 <prvInitialiseTaskLists+0x6c>)
 801042e:	f7fe fcbb 	bl	800eda8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010432:	480c      	ldr	r0, [pc, #48]	; (8010464 <prvInitialiseTaskLists+0x70>)
 8010434:	f7fe fcb8 	bl	800eda8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010438:	480b      	ldr	r0, [pc, #44]	; (8010468 <prvInitialiseTaskLists+0x74>)
 801043a:	f7fe fcb5 	bl	800eda8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801043e:	4b0b      	ldr	r3, [pc, #44]	; (801046c <prvInitialiseTaskLists+0x78>)
 8010440:	4a05      	ldr	r2, [pc, #20]	; (8010458 <prvInitialiseTaskLists+0x64>)
 8010442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010444:	4b0a      	ldr	r3, [pc, #40]	; (8010470 <prvInitialiseTaskLists+0x7c>)
 8010446:	4a05      	ldr	r2, [pc, #20]	; (801045c <prvInitialiseTaskLists+0x68>)
 8010448:	601a      	str	r2, [r3, #0]
}
 801044a:	bf00      	nop
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	20000894 	.word	0x20000894
 8010458:	20000920 	.word	0x20000920
 801045c:	20000934 	.word	0x20000934
 8010460:	20000950 	.word	0x20000950
 8010464:	20000964 	.word	0x20000964
 8010468:	2000097c 	.word	0x2000097c
 801046c:	20000948 	.word	0x20000948
 8010470:	2000094c 	.word	0x2000094c

08010474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801047a:	e019      	b.n	80104b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801047c:	f000 faa6 	bl	80109cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010480:	4b0f      	ldr	r3, [pc, #60]	; (80104c0 <prvCheckTasksWaitingTermination+0x4c>)
 8010482:	68db      	ldr	r3, [r3, #12]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	3304      	adds	r3, #4
 801048c:	4618      	mov	r0, r3
 801048e:	f7fe fd15 	bl	800eebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010492:	4b0c      	ldr	r3, [pc, #48]	; (80104c4 <prvCheckTasksWaitingTermination+0x50>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	3b01      	subs	r3, #1
 8010498:	4a0a      	ldr	r2, [pc, #40]	; (80104c4 <prvCheckTasksWaitingTermination+0x50>)
 801049a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801049c:	4b0a      	ldr	r3, [pc, #40]	; (80104c8 <prvCheckTasksWaitingTermination+0x54>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	3b01      	subs	r3, #1
 80104a2:	4a09      	ldr	r2, [pc, #36]	; (80104c8 <prvCheckTasksWaitingTermination+0x54>)
 80104a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80104a6:	f000 fabf 	bl	8010a28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 f80e 	bl	80104cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104b0:	4b05      	ldr	r3, [pc, #20]	; (80104c8 <prvCheckTasksWaitingTermination+0x54>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e1      	bne.n	801047c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80104b8:	bf00      	nop
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	20000964 	.word	0x20000964
 80104c4:	20000990 	.word	0x20000990
 80104c8:	20000978 	.word	0x20000978

080104cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d108      	bne.n	80104f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104e2:	4618      	mov	r0, r3
 80104e4:	f000 fc4e 	bl	8010d84 <vPortFree>
				vPortFree( pxTCB );
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 fc4b 	bl	8010d84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80104ee:	e017      	b.n	8010520 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d103      	bne.n	8010502 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 fc42 	bl	8010d84 <vPortFree>
	}
 8010500:	e00e      	b.n	8010520 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010508:	2b02      	cmp	r3, #2
 801050a:	d009      	beq.n	8010520 <prvDeleteTCB+0x54>
 801050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010510:	f383 8811 	msr	BASEPRI, r3
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	60fb      	str	r3, [r7, #12]
 801051e:	e7fe      	b.n	801051e <prvDeleteTCB+0x52>
	}
 8010520:	bf00      	nop
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801052e:	4b0c      	ldr	r3, [pc, #48]	; (8010560 <prvResetNextTaskUnblockTime+0x38>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d104      	bne.n	8010542 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010538:	4b0a      	ldr	r3, [pc, #40]	; (8010564 <prvResetNextTaskUnblockTime+0x3c>)
 801053a:	f04f 32ff 	mov.w	r2, #4294967295
 801053e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010540:	e008      	b.n	8010554 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010542:	4b07      	ldr	r3, [pc, #28]	; (8010560 <prvResetNextTaskUnblockTime+0x38>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	4a04      	ldr	r2, [pc, #16]	; (8010564 <prvResetNextTaskUnblockTime+0x3c>)
 8010552:	6013      	str	r3, [r2, #0]
}
 8010554:	bf00      	nop
 8010556:	370c      	adds	r7, #12
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr
 8010560:	20000948 	.word	0x20000948
 8010564:	200009b0 	.word	0x200009b0

08010568 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801056e:	4b0b      	ldr	r3, [pc, #44]	; (801059c <xTaskGetSchedulerState+0x34>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d102      	bne.n	801057c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010576:	2301      	movs	r3, #1
 8010578:	607b      	str	r3, [r7, #4]
 801057a:	e008      	b.n	801058e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801057c:	4b08      	ldr	r3, [pc, #32]	; (80105a0 <xTaskGetSchedulerState+0x38>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d102      	bne.n	801058a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010584:	2302      	movs	r3, #2
 8010586:	607b      	str	r3, [r7, #4]
 8010588:	e001      	b.n	801058e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801058a:	2300      	movs	r3, #0
 801058c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801058e:	687b      	ldr	r3, [r7, #4]
	}
 8010590:	4618      	mov	r0, r3
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr
 801059c:	2000099c 	.word	0x2000099c
 80105a0:	200009b8 	.word	0x200009b8

080105a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80105b0:	2300      	movs	r3, #0
 80105b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d06c      	beq.n	8010694 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80105ba:	4b39      	ldr	r3, [pc, #228]	; (80106a0 <xTaskPriorityDisinherit+0xfc>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d009      	beq.n	80105d8 <xTaskPriorityDisinherit+0x34>
 80105c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	60fb      	str	r3, [r7, #12]
 80105d6:	e7fe      	b.n	80105d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d109      	bne.n	80105f4 <xTaskPriorityDisinherit+0x50>
 80105e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	60bb      	str	r3, [r7, #8]
 80105f2:	e7fe      	b.n	80105f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105f8:	1e5a      	subs	r2, r3, #1
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010606:	429a      	cmp	r2, r3
 8010608:	d044      	beq.n	8010694 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801060e:	2b00      	cmp	r3, #0
 8010610:	d140      	bne.n	8010694 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	3304      	adds	r3, #4
 8010616:	4618      	mov	r0, r3
 8010618:	f7fe fc50 	bl	800eebc <uxListRemove>
 801061c:	4603      	mov	r3, r0
 801061e:	2b00      	cmp	r3, #0
 8010620:	d115      	bne.n	801064e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010626:	491f      	ldr	r1, [pc, #124]	; (80106a4 <xTaskPriorityDisinherit+0x100>)
 8010628:	4613      	mov	r3, r2
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4413      	add	r3, r2
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	440b      	add	r3, r1
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10a      	bne.n	801064e <xTaskPriorityDisinherit+0xaa>
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063c:	2201      	movs	r2, #1
 801063e:	fa02 f303 	lsl.w	r3, r2, r3
 8010642:	43da      	mvns	r2, r3
 8010644:	4b18      	ldr	r3, [pc, #96]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4013      	ands	r3, r2
 801064a:	4a17      	ldr	r2, [pc, #92]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 801064c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801065a:	f1c3 0207 	rsb	r2, r3, #7
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010666:	2201      	movs	r2, #1
 8010668:	409a      	lsls	r2, r3
 801066a:	4b0f      	ldr	r3, [pc, #60]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4313      	orrs	r3, r2
 8010670:	4a0d      	ldr	r2, [pc, #52]	; (80106a8 <xTaskPriorityDisinherit+0x104>)
 8010672:	6013      	str	r3, [r2, #0]
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010678:	4613      	mov	r3, r2
 801067a:	009b      	lsls	r3, r3, #2
 801067c:	4413      	add	r3, r2
 801067e:	009b      	lsls	r3, r3, #2
 8010680:	4a08      	ldr	r2, [pc, #32]	; (80106a4 <xTaskPriorityDisinherit+0x100>)
 8010682:	441a      	add	r2, r3
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	3304      	adds	r3, #4
 8010688:	4619      	mov	r1, r3
 801068a:	4610      	mov	r0, r2
 801068c:	f7fe fbb9 	bl	800ee02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010690:	2301      	movs	r3, #1
 8010692:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010694:	697b      	ldr	r3, [r7, #20]
	}
 8010696:	4618      	mov	r0, r3
 8010698:	3718      	adds	r7, #24
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	20000890 	.word	0x20000890
 80106a4:	20000894 	.word	0x20000894
 80106a8:	20000998 	.word	0x20000998

080106ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80106b6:	4b29      	ldr	r3, [pc, #164]	; (801075c <prvAddCurrentTaskToDelayedList+0xb0>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106bc:	4b28      	ldr	r3, [pc, #160]	; (8010760 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	3304      	adds	r3, #4
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fe fbfa 	bl	800eebc <uxListRemove>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d10b      	bne.n	80106e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80106ce:	4b24      	ldr	r3, [pc, #144]	; (8010760 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106d4:	2201      	movs	r2, #1
 80106d6:	fa02 f303 	lsl.w	r3, r2, r3
 80106da:	43da      	mvns	r2, r3
 80106dc:	4b21      	ldr	r3, [pc, #132]	; (8010764 <prvAddCurrentTaskToDelayedList+0xb8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4013      	ands	r3, r2
 80106e2:	4a20      	ldr	r2, [pc, #128]	; (8010764 <prvAddCurrentTaskToDelayedList+0xb8>)
 80106e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ec:	d10a      	bne.n	8010704 <prvAddCurrentTaskToDelayedList+0x58>
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d007      	beq.n	8010704 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106f4:	4b1a      	ldr	r3, [pc, #104]	; (8010760 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	3304      	adds	r3, #4
 80106fa:	4619      	mov	r1, r3
 80106fc:	481a      	ldr	r0, [pc, #104]	; (8010768 <prvAddCurrentTaskToDelayedList+0xbc>)
 80106fe:	f7fe fb80 	bl	800ee02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010702:	e026      	b.n	8010752 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010704:	68fa      	ldr	r2, [r7, #12]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4413      	add	r3, r2
 801070a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801070c:	4b14      	ldr	r3, [pc, #80]	; (8010760 <prvAddCurrentTaskToDelayedList+0xb4>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68ba      	ldr	r2, [r7, #8]
 8010712:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	429a      	cmp	r2, r3
 801071a:	d209      	bcs.n	8010730 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801071c:	4b13      	ldr	r3, [pc, #76]	; (801076c <prvAddCurrentTaskToDelayedList+0xc0>)
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	4b0f      	ldr	r3, [pc, #60]	; (8010760 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	3304      	adds	r3, #4
 8010726:	4619      	mov	r1, r3
 8010728:	4610      	mov	r0, r2
 801072a:	f7fe fb8e 	bl	800ee4a <vListInsert>
}
 801072e:	e010      	b.n	8010752 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010730:	4b0f      	ldr	r3, [pc, #60]	; (8010770 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010732:	681a      	ldr	r2, [r3, #0]
 8010734:	4b0a      	ldr	r3, [pc, #40]	; (8010760 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	3304      	adds	r3, #4
 801073a:	4619      	mov	r1, r3
 801073c:	4610      	mov	r0, r2
 801073e:	f7fe fb84 	bl	800ee4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010742:	4b0c      	ldr	r3, [pc, #48]	; (8010774 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68ba      	ldr	r2, [r7, #8]
 8010748:	429a      	cmp	r2, r3
 801074a:	d202      	bcs.n	8010752 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801074c:	4a09      	ldr	r2, [pc, #36]	; (8010774 <prvAddCurrentTaskToDelayedList+0xc8>)
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	6013      	str	r3, [r2, #0]
}
 8010752:	bf00      	nop
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	20000994 	.word	0x20000994
 8010760:	20000890 	.word	0x20000890
 8010764:	20000998 	.word	0x20000998
 8010768:	2000097c 	.word	0x2000097c
 801076c:	2000094c 	.word	0x2000094c
 8010770:	20000948 	.word	0x20000948
 8010774:	200009b0 	.word	0x200009b0

08010778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	3b04      	subs	r3, #4
 8010788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	3b04      	subs	r3, #4
 8010796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	f023 0201 	bic.w	r2, r3, #1
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3b04      	subs	r3, #4
 80107a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80107a8:	4a0c      	ldr	r2, [pc, #48]	; (80107dc <pxPortInitialiseStack+0x64>)
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	3b14      	subs	r3, #20
 80107b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	3b04      	subs	r3, #4
 80107be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f06f 0202 	mvn.w	r2, #2
 80107c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	3b20      	subs	r3, #32
 80107cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80107ce:	68fb      	ldr	r3, [r7, #12]
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3714      	adds	r7, #20
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr
 80107dc:	080107e1 	.word	0x080107e1

080107e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80107e6:	2300      	movs	r3, #0
 80107e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80107ea:	4b11      	ldr	r3, [pc, #68]	; (8010830 <prvTaskExitError+0x50>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f2:	d009      	beq.n	8010808 <prvTaskExitError+0x28>
 80107f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	60fb      	str	r3, [r7, #12]
 8010806:	e7fe      	b.n	8010806 <prvTaskExitError+0x26>
 8010808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080c:	f383 8811 	msr	BASEPRI, r3
 8010810:	f3bf 8f6f 	isb	sy
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801081a:	bf00      	nop
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d0fc      	beq.n	801081c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010822:	bf00      	nop
 8010824:	3714      	adds	r7, #20
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	200003b0 	.word	0x200003b0
	...

08010840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010840:	4b07      	ldr	r3, [pc, #28]	; (8010860 <pxCurrentTCBConst2>)
 8010842:	6819      	ldr	r1, [r3, #0]
 8010844:	6808      	ldr	r0, [r1, #0]
 8010846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084a:	f380 8809 	msr	PSP, r0
 801084e:	f3bf 8f6f 	isb	sy
 8010852:	f04f 0000 	mov.w	r0, #0
 8010856:	f380 8811 	msr	BASEPRI, r0
 801085a:	4770      	bx	lr
 801085c:	f3af 8000 	nop.w

08010860 <pxCurrentTCBConst2>:
 8010860:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010864:	bf00      	nop
 8010866:	bf00      	nop

08010868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010868:	4808      	ldr	r0, [pc, #32]	; (801088c <prvPortStartFirstTask+0x24>)
 801086a:	6800      	ldr	r0, [r0, #0]
 801086c:	6800      	ldr	r0, [r0, #0]
 801086e:	f380 8808 	msr	MSP, r0
 8010872:	f04f 0000 	mov.w	r0, #0
 8010876:	f380 8814 	msr	CONTROL, r0
 801087a:	b662      	cpsie	i
 801087c:	b661      	cpsie	f
 801087e:	f3bf 8f4f 	dsb	sy
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	df00      	svc	0
 8010888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801088a:	bf00      	nop
 801088c:	e000ed08 	.word	0xe000ed08

08010890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b086      	sub	sp, #24
 8010894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010896:	4b44      	ldr	r3, [pc, #272]	; (80109a8 <xPortStartScheduler+0x118>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a44      	ldr	r2, [pc, #272]	; (80109ac <xPortStartScheduler+0x11c>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d109      	bne.n	80108b4 <xPortStartScheduler+0x24>
 80108a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a4:	f383 8811 	msr	BASEPRI, r3
 80108a8:	f3bf 8f6f 	isb	sy
 80108ac:	f3bf 8f4f 	dsb	sy
 80108b0:	613b      	str	r3, [r7, #16]
 80108b2:	e7fe      	b.n	80108b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80108b4:	4b3c      	ldr	r3, [pc, #240]	; (80109a8 <xPortStartScheduler+0x118>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4a3d      	ldr	r2, [pc, #244]	; (80109b0 <xPortStartScheduler+0x120>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d109      	bne.n	80108d2 <xPortStartScheduler+0x42>
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	e7fe      	b.n	80108d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80108d2:	4b38      	ldr	r3, [pc, #224]	; (80109b4 <xPortStartScheduler+0x124>)
 80108d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	22ff      	movs	r2, #255	; 0xff
 80108e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80108ec:	78fb      	ldrb	r3, [r7, #3]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80108f4:	b2da      	uxtb	r2, r3
 80108f6:	4b30      	ldr	r3, [pc, #192]	; (80109b8 <xPortStartScheduler+0x128>)
 80108f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80108fa:	4b30      	ldr	r3, [pc, #192]	; (80109bc <xPortStartScheduler+0x12c>)
 80108fc:	2207      	movs	r2, #7
 80108fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010900:	e009      	b.n	8010916 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010902:	4b2e      	ldr	r3, [pc, #184]	; (80109bc <xPortStartScheduler+0x12c>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3b01      	subs	r3, #1
 8010908:	4a2c      	ldr	r2, [pc, #176]	; (80109bc <xPortStartScheduler+0x12c>)
 801090a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801090c:	78fb      	ldrb	r3, [r7, #3]
 801090e:	b2db      	uxtb	r3, r3
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	b2db      	uxtb	r3, r3
 8010914:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010916:	78fb      	ldrb	r3, [r7, #3]
 8010918:	b2db      	uxtb	r3, r3
 801091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801091e:	2b80      	cmp	r3, #128	; 0x80
 8010920:	d0ef      	beq.n	8010902 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010922:	4b26      	ldr	r3, [pc, #152]	; (80109bc <xPortStartScheduler+0x12c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f1c3 0307 	rsb	r3, r3, #7
 801092a:	2b04      	cmp	r3, #4
 801092c:	d009      	beq.n	8010942 <xPortStartScheduler+0xb2>
 801092e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010932:	f383 8811 	msr	BASEPRI, r3
 8010936:	f3bf 8f6f 	isb	sy
 801093a:	f3bf 8f4f 	dsb	sy
 801093e:	60bb      	str	r3, [r7, #8]
 8010940:	e7fe      	b.n	8010940 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010942:	4b1e      	ldr	r3, [pc, #120]	; (80109bc <xPortStartScheduler+0x12c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	021b      	lsls	r3, r3, #8
 8010948:	4a1c      	ldr	r2, [pc, #112]	; (80109bc <xPortStartScheduler+0x12c>)
 801094a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801094c:	4b1b      	ldr	r3, [pc, #108]	; (80109bc <xPortStartScheduler+0x12c>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010954:	4a19      	ldr	r2, [pc, #100]	; (80109bc <xPortStartScheduler+0x12c>)
 8010956:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	b2da      	uxtb	r2, r3
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010960:	4b17      	ldr	r3, [pc, #92]	; (80109c0 <xPortStartScheduler+0x130>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4a16      	ldr	r2, [pc, #88]	; (80109c0 <xPortStartScheduler+0x130>)
 8010966:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801096a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801096c:	4b14      	ldr	r3, [pc, #80]	; (80109c0 <xPortStartScheduler+0x130>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a13      	ldr	r2, [pc, #76]	; (80109c0 <xPortStartScheduler+0x130>)
 8010972:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010976:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010978:	f000 f8d6 	bl	8010b28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801097c:	4b11      	ldr	r3, [pc, #68]	; (80109c4 <xPortStartScheduler+0x134>)
 801097e:	2200      	movs	r2, #0
 8010980:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010982:	f000 f8f5 	bl	8010b70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010986:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <xPortStartScheduler+0x138>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4a0f      	ldr	r2, [pc, #60]	; (80109c8 <xPortStartScheduler+0x138>)
 801098c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010990:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010992:	f7ff ff69 	bl	8010868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010996:	f7ff fbb3 	bl	8010100 <vTaskSwitchContext>
	prvTaskExitError();
 801099a:	f7ff ff21 	bl	80107e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3718      	adds	r7, #24
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	e000ed00 	.word	0xe000ed00
 80109ac:	410fc271 	.word	0x410fc271
 80109b0:	410fc270 	.word	0x410fc270
 80109b4:	e000e400 	.word	0xe000e400
 80109b8:	200009bc 	.word	0x200009bc
 80109bc:	200009c0 	.word	0x200009c0
 80109c0:	e000ed20 	.word	0xe000ed20
 80109c4:	200003b0 	.word	0x200003b0
 80109c8:	e000ef34 	.word	0xe000ef34

080109cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d6:	f383 8811 	msr	BASEPRI, r3
 80109da:	f3bf 8f6f 	isb	sy
 80109de:	f3bf 8f4f 	dsb	sy
 80109e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80109e4:	4b0e      	ldr	r3, [pc, #56]	; (8010a20 <vPortEnterCritical+0x54>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3301      	adds	r3, #1
 80109ea:	4a0d      	ldr	r2, [pc, #52]	; (8010a20 <vPortEnterCritical+0x54>)
 80109ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80109ee:	4b0c      	ldr	r3, [pc, #48]	; (8010a20 <vPortEnterCritical+0x54>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d10e      	bne.n	8010a14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80109f6:	4b0b      	ldr	r3, [pc, #44]	; (8010a24 <vPortEnterCritical+0x58>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d009      	beq.n	8010a14 <vPortEnterCritical+0x48>
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	603b      	str	r3, [r7, #0]
 8010a12:	e7fe      	b.n	8010a12 <vPortEnterCritical+0x46>
	}
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr
 8010a20:	200003b0 	.word	0x200003b0
 8010a24:	e000ed04 	.word	0xe000ed04

08010a28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010a2e:	4b11      	ldr	r3, [pc, #68]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d109      	bne.n	8010a4a <vPortExitCritical+0x22>
 8010a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3a:	f383 8811 	msr	BASEPRI, r3
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f3bf 8f4f 	dsb	sy
 8010a46:	607b      	str	r3, [r7, #4]
 8010a48:	e7fe      	b.n	8010a48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8010a4a:	4b0a      	ldr	r3, [pc, #40]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	3b01      	subs	r3, #1
 8010a50:	4a08      	ldr	r2, [pc, #32]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010a54:	4b07      	ldr	r3, [pc, #28]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d104      	bne.n	8010a66 <vPortExitCritical+0x3e>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010a66:	bf00      	nop
 8010a68:	370c      	adds	r7, #12
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop
 8010a74:	200003b0 	.word	0x200003b0
	...

08010a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010a80:	f3ef 8009 	mrs	r0, PSP
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	4b15      	ldr	r3, [pc, #84]	; (8010ae0 <pxCurrentTCBConst>)
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	f01e 0f10 	tst.w	lr, #16
 8010a90:	bf08      	it	eq
 8010a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9a:	6010      	str	r0, [r2, #0]
 8010a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010aa4:	f380 8811 	msr	BASEPRI, r0
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f7ff fb26 	bl	8010100 <vTaskSwitchContext>
 8010ab4:	f04f 0000 	mov.w	r0, #0
 8010ab8:	f380 8811 	msr	BASEPRI, r0
 8010abc:	bc09      	pop	{r0, r3}
 8010abe:	6819      	ldr	r1, [r3, #0]
 8010ac0:	6808      	ldr	r0, [r1, #0]
 8010ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac6:	f01e 0f10 	tst.w	lr, #16
 8010aca:	bf08      	it	eq
 8010acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ad0:	f380 8809 	msr	PSP, r0
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	f3af 8000 	nop.w

08010ae0 <pxCurrentTCBConst>:
 8010ae0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ae4:	bf00      	nop
 8010ae6:	bf00      	nop

08010ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010b00:	f7ff fa46 	bl	800ff90 <xTaskIncrementTick>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d003      	beq.n	8010b12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b0a:	4b06      	ldr	r3, [pc, #24]	; (8010b24 <SysTick_Handler+0x3c>)
 8010b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b10:	601a      	str	r2, [r3, #0]
 8010b12:	2300      	movs	r3, #0
 8010b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010b1c:	bf00      	nop
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	e000ed04 	.word	0xe000ed04

08010b28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010b28:	b480      	push	{r7}
 8010b2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <vPortSetupTimerInterrupt+0x34>)
 8010b2e:	2200      	movs	r2, #0
 8010b30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010b32:	4b0b      	ldr	r3, [pc, #44]	; (8010b60 <vPortSetupTimerInterrupt+0x38>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010b38:	4b0a      	ldr	r3, [pc, #40]	; (8010b64 <vPortSetupTimerInterrupt+0x3c>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a0a      	ldr	r2, [pc, #40]	; (8010b68 <vPortSetupTimerInterrupt+0x40>)
 8010b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8010b42:	099b      	lsrs	r3, r3, #6
 8010b44:	4a09      	ldr	r2, [pc, #36]	; (8010b6c <vPortSetupTimerInterrupt+0x44>)
 8010b46:	3b01      	subs	r3, #1
 8010b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010b4a:	4b04      	ldr	r3, [pc, #16]	; (8010b5c <vPortSetupTimerInterrupt+0x34>)
 8010b4c:	2207      	movs	r2, #7
 8010b4e:	601a      	str	r2, [r3, #0]
}
 8010b50:	bf00      	nop
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	e000e010 	.word	0xe000e010
 8010b60:	e000e018 	.word	0xe000e018
 8010b64:	2000027c 	.word	0x2000027c
 8010b68:	10624dd3 	.word	0x10624dd3
 8010b6c:	e000e014 	.word	0xe000e014

08010b70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010b70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010b80 <vPortEnableVFP+0x10>
 8010b74:	6801      	ldr	r1, [r0, #0]
 8010b76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010b7a:	6001      	str	r1, [r0, #0]
 8010b7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010b7e:	bf00      	nop
 8010b80:	e000ed88 	.word	0xe000ed88

08010b84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010b8a:	f3ef 8305 	mrs	r3, IPSR
 8010b8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b0f      	cmp	r3, #15
 8010b94:	d913      	bls.n	8010bbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010b96:	4a16      	ldr	r2, [pc, #88]	; (8010bf0 <vPortValidateInterruptPriority+0x6c>)
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ba0:	4b14      	ldr	r3, [pc, #80]	; (8010bf4 <vPortValidateInterruptPriority+0x70>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	7afa      	ldrb	r2, [r7, #11]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d209      	bcs.n	8010bbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bae:	f383 8811 	msr	BASEPRI, r3
 8010bb2:	f3bf 8f6f 	isb	sy
 8010bb6:	f3bf 8f4f 	dsb	sy
 8010bba:	607b      	str	r3, [r7, #4]
 8010bbc:	e7fe      	b.n	8010bbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010bbe:	4b0e      	ldr	r3, [pc, #56]	; (8010bf8 <vPortValidateInterruptPriority+0x74>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010bc6:	4b0d      	ldr	r3, [pc, #52]	; (8010bfc <vPortValidateInterruptPriority+0x78>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d909      	bls.n	8010be2 <vPortValidateInterruptPriority+0x5e>
 8010bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd2:	f383 8811 	msr	BASEPRI, r3
 8010bd6:	f3bf 8f6f 	isb	sy
 8010bda:	f3bf 8f4f 	dsb	sy
 8010bde:	603b      	str	r3, [r7, #0]
 8010be0:	e7fe      	b.n	8010be0 <vPortValidateInterruptPriority+0x5c>
	}
 8010be2:	bf00      	nop
 8010be4:	3714      	adds	r7, #20
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	e000e3f0 	.word	0xe000e3f0
 8010bf4:	200009bc 	.word	0x200009bc
 8010bf8:	e000ed0c 	.word	0xe000ed0c
 8010bfc:	200009c0 	.word	0x200009c0

08010c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b08a      	sub	sp, #40	; 0x28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010c0c:	f7ff f8f4 	bl	800fdf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010c10:	4b57      	ldr	r3, [pc, #348]	; (8010d70 <pvPortMalloc+0x170>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d101      	bne.n	8010c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010c18:	f000 f90c 	bl	8010e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010c1c:	4b55      	ldr	r3, [pc, #340]	; (8010d74 <pvPortMalloc+0x174>)
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4013      	ands	r3, r2
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f040 808c 	bne.w	8010d42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d01c      	beq.n	8010c6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010c30:	2208      	movs	r2, #8
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4413      	add	r3, r2
 8010c36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f003 0307 	and.w	r3, r3, #7
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d013      	beq.n	8010c6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f023 0307 	bic.w	r3, r3, #7
 8010c48:	3308      	adds	r3, #8
 8010c4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f003 0307 	and.w	r3, r3, #7
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <pvPortMalloc+0x6a>
 8010c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5a:	f383 8811 	msr	BASEPRI, r3
 8010c5e:	f3bf 8f6f 	isb	sy
 8010c62:	f3bf 8f4f 	dsb	sy
 8010c66:	617b      	str	r3, [r7, #20]
 8010c68:	e7fe      	b.n	8010c68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d068      	beq.n	8010d42 <pvPortMalloc+0x142>
 8010c70:	4b41      	ldr	r3, [pc, #260]	; (8010d78 <pvPortMalloc+0x178>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d863      	bhi.n	8010d42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010c7a:	4b40      	ldr	r3, [pc, #256]	; (8010d7c <pvPortMalloc+0x17c>)
 8010c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010c7e:	4b3f      	ldr	r3, [pc, #252]	; (8010d7c <pvPortMalloc+0x17c>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c84:	e004      	b.n	8010c90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d903      	bls.n	8010ca2 <pvPortMalloc+0xa2>
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1f1      	bne.n	8010c86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ca2:	4b33      	ldr	r3, [pc, #204]	; (8010d70 <pvPortMalloc+0x170>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d04a      	beq.n	8010d42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010cac:	6a3b      	ldr	r3, [r7, #32]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2208      	movs	r2, #8
 8010cb2:	4413      	add	r3, r2
 8010cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	685a      	ldr	r2, [r3, #4]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	1ad2      	subs	r2, r2, r3
 8010cc6:	2308      	movs	r3, #8
 8010cc8:	005b      	lsls	r3, r3, #1
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d91e      	bls.n	8010d0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	f003 0307 	and.w	r3, r3, #7
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d009      	beq.n	8010cf4 <pvPortMalloc+0xf4>
 8010ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	613b      	str	r3, [r7, #16]
 8010cf2:	e7fe      	b.n	8010cf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	685a      	ldr	r2, [r3, #4]
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	1ad2      	subs	r2, r2, r3
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010d06:	69b8      	ldr	r0, [r7, #24]
 8010d08:	f000 f8f6 	bl	8010ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010d0c:	4b1a      	ldr	r3, [pc, #104]	; (8010d78 <pvPortMalloc+0x178>)
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	4a18      	ldr	r2, [pc, #96]	; (8010d78 <pvPortMalloc+0x178>)
 8010d18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010d1a:	4b17      	ldr	r3, [pc, #92]	; (8010d78 <pvPortMalloc+0x178>)
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	4b18      	ldr	r3, [pc, #96]	; (8010d80 <pvPortMalloc+0x180>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d203      	bcs.n	8010d2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010d26:	4b14      	ldr	r3, [pc, #80]	; (8010d78 <pvPortMalloc+0x178>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a15      	ldr	r2, [pc, #84]	; (8010d80 <pvPortMalloc+0x180>)
 8010d2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	4b10      	ldr	r3, [pc, #64]	; (8010d74 <pvPortMalloc+0x174>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	431a      	orrs	r2, r3
 8010d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	2200      	movs	r2, #0
 8010d40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010d42:	f7ff f867 	bl	800fe14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	f003 0307 	and.w	r3, r3, #7
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d009      	beq.n	8010d64 <pvPortMalloc+0x164>
 8010d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	60fb      	str	r3, [r7, #12]
 8010d62:	e7fe      	b.n	8010d62 <pvPortMalloc+0x162>
	return pvReturn;
 8010d64:	69fb      	ldr	r3, [r7, #28]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3728      	adds	r7, #40	; 0x28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	200045cc 	.word	0x200045cc
 8010d74:	200045d8 	.word	0x200045d8
 8010d78:	200045d0 	.word	0x200045d0
 8010d7c:	200045c4 	.word	0x200045c4
 8010d80:	200045d4 	.word	0x200045d4

08010d84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d046      	beq.n	8010e24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d96:	2308      	movs	r3, #8
 8010d98:	425b      	negs	r3, r3
 8010d9a:	697a      	ldr	r2, [r7, #20]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	685a      	ldr	r2, [r3, #4]
 8010da8:	4b20      	ldr	r3, [pc, #128]	; (8010e2c <vPortFree+0xa8>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4013      	ands	r3, r2
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d109      	bne.n	8010dc6 <vPortFree+0x42>
 8010db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db6:	f383 8811 	msr	BASEPRI, r3
 8010dba:	f3bf 8f6f 	isb	sy
 8010dbe:	f3bf 8f4f 	dsb	sy
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	e7fe      	b.n	8010dc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d009      	beq.n	8010de2 <vPortFree+0x5e>
 8010dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	60bb      	str	r3, [r7, #8]
 8010de0:	e7fe      	b.n	8010de0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	685a      	ldr	r2, [r3, #4]
 8010de6:	4b11      	ldr	r3, [pc, #68]	; (8010e2c <vPortFree+0xa8>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4013      	ands	r3, r2
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d019      	beq.n	8010e24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d115      	bne.n	8010e24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	685a      	ldr	r2, [r3, #4]
 8010dfc:	4b0b      	ldr	r3, [pc, #44]	; (8010e2c <vPortFree+0xa8>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	43db      	mvns	r3, r3
 8010e02:	401a      	ands	r2, r3
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010e08:	f7fe fff6 	bl	800fdf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	685a      	ldr	r2, [r3, #4]
 8010e10:	4b07      	ldr	r3, [pc, #28]	; (8010e30 <vPortFree+0xac>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4413      	add	r3, r2
 8010e16:	4a06      	ldr	r2, [pc, #24]	; (8010e30 <vPortFree+0xac>)
 8010e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010e1a:	6938      	ldr	r0, [r7, #16]
 8010e1c:	f000 f86c 	bl	8010ef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010e20:	f7fe fff8 	bl	800fe14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010e24:	bf00      	nop
 8010e26:	3718      	adds	r7, #24
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	200045d8 	.word	0x200045d8
 8010e30:	200045d0 	.word	0x200045d0

08010e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010e34:	b480      	push	{r7}
 8010e36:	b085      	sub	sp, #20
 8010e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010e40:	4b27      	ldr	r3, [pc, #156]	; (8010ee0 <prvHeapInit+0xac>)
 8010e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	f003 0307 	and.w	r3, r3, #7
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00c      	beq.n	8010e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	3307      	adds	r3, #7
 8010e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f023 0307 	bic.w	r3, r3, #7
 8010e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010e5c:	68ba      	ldr	r2, [r7, #8]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	4a1f      	ldr	r2, [pc, #124]	; (8010ee0 <prvHeapInit+0xac>)
 8010e64:	4413      	add	r3, r2
 8010e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010e6c:	4a1d      	ldr	r2, [pc, #116]	; (8010ee4 <prvHeapInit+0xb0>)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e72:	4b1c      	ldr	r3, [pc, #112]	; (8010ee4 <prvHeapInit+0xb0>)
 8010e74:	2200      	movs	r2, #0
 8010e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	68ba      	ldr	r2, [r7, #8]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e80:	2208      	movs	r2, #8
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	1a9b      	subs	r3, r3, r2
 8010e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f023 0307 	bic.w	r3, r3, #7
 8010e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	4a15      	ldr	r2, [pc, #84]	; (8010ee8 <prvHeapInit+0xb4>)
 8010e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e96:	4b14      	ldr	r3, [pc, #80]	; (8010ee8 <prvHeapInit+0xb4>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e9e:	4b12      	ldr	r3, [pc, #72]	; (8010ee8 <prvHeapInit+0xb4>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	1ad2      	subs	r2, r2, r3
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010eb4:	4b0c      	ldr	r3, [pc, #48]	; (8010ee8 <prvHeapInit+0xb4>)
 8010eb6:	681a      	ldr	r2, [r3, #0]
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	4a0a      	ldr	r2, [pc, #40]	; (8010eec <prvHeapInit+0xb8>)
 8010ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	4a09      	ldr	r2, [pc, #36]	; (8010ef0 <prvHeapInit+0xbc>)
 8010eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ecc:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <prvHeapInit+0xc0>)
 8010ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ed2:	601a      	str	r2, [r3, #0]
}
 8010ed4:	bf00      	nop
 8010ed6:	3714      	adds	r7, #20
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	200009c4 	.word	0x200009c4
 8010ee4:	200045c4 	.word	0x200045c4
 8010ee8:	200045cc 	.word	0x200045cc
 8010eec:	200045d4 	.word	0x200045d4
 8010ef0:	200045d0 	.word	0x200045d0
 8010ef4:	200045d8 	.word	0x200045d8

08010ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b085      	sub	sp, #20
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f00:	4b28      	ldr	r3, [pc, #160]	; (8010fa4 <prvInsertBlockIntoFreeList+0xac>)
 8010f02:	60fb      	str	r3, [r7, #12]
 8010f04:	e002      	b.n	8010f0c <prvInsertBlockIntoFreeList+0x14>
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	60fb      	str	r3, [r7, #12]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d8f7      	bhi.n	8010f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	4413      	add	r3, r2
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d108      	bne.n	8010f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	441a      	add	r2, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	441a      	add	r2, r3
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d118      	bne.n	8010f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	4b15      	ldr	r3, [pc, #84]	; (8010fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d00d      	beq.n	8010f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	685a      	ldr	r2, [r3, #4]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	441a      	add	r2, r3
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	e008      	b.n	8010f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f76:	4b0c      	ldr	r3, [pc, #48]	; (8010fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	601a      	str	r2, [r3, #0]
 8010f7e:	e003      	b.n	8010f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d002      	beq.n	8010f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f96:	bf00      	nop
 8010f98:	3714      	adds	r7, #20
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop
 8010fa4:	200045c4 	.word	0x200045c4
 8010fa8:	200045cc 	.word	0x200045cc

08010fac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	4912      	ldr	r1, [pc, #72]	; (8010ffc <MX_USB_DEVICE_Init+0x50>)
 8010fb4:	4812      	ldr	r0, [pc, #72]	; (8011000 <MX_USB_DEVICE_Init+0x54>)
 8010fb6:	f7fc fbe1 	bl	800d77c <USBD_Init>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d001      	beq.n	8010fc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010fc0:	f7f3 fd18 	bl	80049f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010fc4:	490f      	ldr	r1, [pc, #60]	; (8011004 <MX_USB_DEVICE_Init+0x58>)
 8010fc6:	480e      	ldr	r0, [pc, #56]	; (8011000 <MX_USB_DEVICE_Init+0x54>)
 8010fc8:	f7fc fc0e 	bl	800d7e8 <USBD_RegisterClass>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010fd2:	f7f3 fd0f 	bl	80049f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010fd6:	490c      	ldr	r1, [pc, #48]	; (8011008 <MX_USB_DEVICE_Init+0x5c>)
 8010fd8:	4809      	ldr	r0, [pc, #36]	; (8011000 <MX_USB_DEVICE_Init+0x54>)
 8010fda:	f7fc fb33 	bl	800d644 <USBD_CDC_RegisterInterface>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010fe4:	f7f3 fd06 	bl	80049f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010fe8:	4805      	ldr	r0, [pc, #20]	; (8011000 <MX_USB_DEVICE_Init+0x54>)
 8010fea:	f7fc fc1e 	bl	800d82a <USBD_Start>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d001      	beq.n	8010ff8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010ff4:	f7f3 fcfe 	bl	80049f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010ff8:	bf00      	nop
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	200003d0 	.word	0x200003d0
 8011000:	20004cd4 	.word	0x20004cd4
 8011004:	200002ac 	.word	0x200002ac
 8011008:	200003bc 	.word	0x200003bc

0801100c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011010:	2200      	movs	r2, #0
 8011012:	4905      	ldr	r1, [pc, #20]	; (8011028 <CDC_Init_FS+0x1c>)
 8011014:	4805      	ldr	r0, [pc, #20]	; (801102c <CDC_Init_FS+0x20>)
 8011016:	f7fc fb2a 	bl	800d66e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801101a:	4905      	ldr	r1, [pc, #20]	; (8011030 <CDC_Init_FS+0x24>)
 801101c:	4803      	ldr	r0, [pc, #12]	; (801102c <CDC_Init_FS+0x20>)
 801101e:	f7fc fb3f 	bl	800d6a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011022:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011024:	4618      	mov	r0, r3
 8011026:	bd80      	pop	{r7, pc}
 8011028:	200057a4 	.word	0x200057a4
 801102c:	20004cd4 	.word	0x20004cd4
 8011030:	20004fa4 	.word	0x20004fa4

08011034 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011034:	b480      	push	{r7}
 8011036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011038:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801103a:	4618      	mov	r0, r3
 801103c:	46bd      	mov	sp, r7
 801103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011042:	4770      	bx	lr

08011044 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011044:	b480      	push	{r7}
 8011046:	b083      	sub	sp, #12
 8011048:	af00      	add	r7, sp, #0
 801104a:	4603      	mov	r3, r0
 801104c:	6039      	str	r1, [r7, #0]
 801104e:	71fb      	strb	r3, [r7, #7]
 8011050:	4613      	mov	r3, r2
 8011052:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011054:	79fb      	ldrb	r3, [r7, #7]
 8011056:	2b23      	cmp	r3, #35	; 0x23
 8011058:	d85c      	bhi.n	8011114 <CDC_Control_FS+0xd0>
 801105a:	a201      	add	r2, pc, #4	; (adr r2, 8011060 <CDC_Control_FS+0x1c>)
 801105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011060:	08011115 	.word	0x08011115
 8011064:	08011115 	.word	0x08011115
 8011068:	08011115 	.word	0x08011115
 801106c:	08011115 	.word	0x08011115
 8011070:	08011115 	.word	0x08011115
 8011074:	08011115 	.word	0x08011115
 8011078:	08011115 	.word	0x08011115
 801107c:	08011115 	.word	0x08011115
 8011080:	08011115 	.word	0x08011115
 8011084:	08011115 	.word	0x08011115
 8011088:	08011115 	.word	0x08011115
 801108c:	08011115 	.word	0x08011115
 8011090:	08011115 	.word	0x08011115
 8011094:	08011115 	.word	0x08011115
 8011098:	08011115 	.word	0x08011115
 801109c:	08011115 	.word	0x08011115
 80110a0:	08011115 	.word	0x08011115
 80110a4:	08011115 	.word	0x08011115
 80110a8:	08011115 	.word	0x08011115
 80110ac:	08011115 	.word	0x08011115
 80110b0:	08011115 	.word	0x08011115
 80110b4:	08011115 	.word	0x08011115
 80110b8:	08011115 	.word	0x08011115
 80110bc:	08011115 	.word	0x08011115
 80110c0:	08011115 	.word	0x08011115
 80110c4:	08011115 	.word	0x08011115
 80110c8:	08011115 	.word	0x08011115
 80110cc:	08011115 	.word	0x08011115
 80110d0:	08011115 	.word	0x08011115
 80110d4:	08011115 	.word	0x08011115
 80110d8:	08011115 	.word	0x08011115
 80110dc:	08011115 	.word	0x08011115
 80110e0:	080110f1 	.word	0x080110f1
 80110e4:	08011103 	.word	0x08011103
 80110e8:	08011115 	.word	0x08011115
 80110ec:	08011115 	.word	0x08011115
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80110f0:	4b0c      	ldr	r3, [pc, #48]	; (8011124 <CDC_Control_FS+0xe0>)
 80110f2:	683a      	ldr	r2, [r7, #0]
 80110f4:	6810      	ldr	r0, [r2, #0]
 80110f6:	6018      	str	r0, [r3, #0]
 80110f8:	8891      	ldrh	r1, [r2, #4]
 80110fa:	7992      	ldrb	r2, [r2, #6]
 80110fc:	8099      	strh	r1, [r3, #4]
 80110fe:	719a      	strb	r2, [r3, #6]
    break;
 8011100:	e009      	b.n	8011116 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	4a07      	ldr	r2, [pc, #28]	; (8011124 <CDC_Control_FS+0xe0>)
 8011106:	6810      	ldr	r0, [r2, #0]
 8011108:	6018      	str	r0, [r3, #0]
 801110a:	8891      	ldrh	r1, [r2, #4]
 801110c:	7992      	ldrb	r2, [r2, #6]
 801110e:	8099      	strh	r1, [r3, #4]
 8011110:	719a      	strb	r2, [r3, #6]
    break;
 8011112:	e000      	b.n	8011116 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011114:	bf00      	nop
  }

  return (USBD_OK);
 8011116:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011118:	4618      	mov	r0, r3
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr
 8011124:	200003b4 	.word	0x200003b4

08011128 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011132:	6879      	ldr	r1, [r7, #4]
 8011134:	4805      	ldr	r0, [pc, #20]	; (801114c <CDC_Receive_FS+0x24>)
 8011136:	f7fc fab3 	bl	800d6a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801113a:	4804      	ldr	r0, [pc, #16]	; (801114c <CDC_Receive_FS+0x24>)
 801113c:	f7fc faf4 	bl	800d728 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011140:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011142:	4618      	mov	r0, r3
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	20004cd4 	.word	0x20004cd4

08011150 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	460b      	mov	r3, r1
 801115a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801115c:	2300      	movs	r3, #0
 801115e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011160:	4b0d      	ldr	r3, [pc, #52]	; (8011198 <CDC_Transmit_FS+0x48>)
 8011162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011166:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801116e:	2b00      	cmp	r3, #0
 8011170:	d001      	beq.n	8011176 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011172:	2301      	movs	r3, #1
 8011174:	e00b      	b.n	801118e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011176:	887b      	ldrh	r3, [r7, #2]
 8011178:	461a      	mov	r2, r3
 801117a:	6879      	ldr	r1, [r7, #4]
 801117c:	4806      	ldr	r0, [pc, #24]	; (8011198 <CDC_Transmit_FS+0x48>)
 801117e:	f7fc fa76 	bl	800d66e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011182:	4805      	ldr	r0, [pc, #20]	; (8011198 <CDC_Transmit_FS+0x48>)
 8011184:	f7fc faa0 	bl	800d6c8 <USBD_CDC_TransmitPacket>
 8011188:	4603      	mov	r3, r0
 801118a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801118c:	7bfb      	ldrb	r3, [r7, #15]
}
 801118e:	4618      	mov	r0, r3
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	20004cd4 	.word	0x20004cd4

0801119c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801119c:	b480      	push	{r7}
 801119e:	b087      	sub	sp, #28
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	60b9      	str	r1, [r7, #8]
 80111a6:	4613      	mov	r3, r2
 80111a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80111aa:	2300      	movs	r3, #0
 80111ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80111ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	371c      	adds	r7, #28
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr
	...

080111c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	4603      	mov	r3, r0
 80111c8:	6039      	str	r1, [r7, #0]
 80111ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	2212      	movs	r2, #18
 80111d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80111d2:	4b03      	ldr	r3, [pc, #12]	; (80111e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr
 80111e0:	200003f0 	.word	0x200003f0

080111e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	4603      	mov	r3, r0
 80111ec:	6039      	str	r1, [r7, #0]
 80111ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2204      	movs	r2, #4
 80111f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80111f6:	4b03      	ldr	r3, [pc, #12]	; (8011204 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	20000410 	.word	0x20000410

08011208 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	4603      	mov	r3, r0
 8011210:	6039      	str	r1, [r7, #0]
 8011212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011214:	79fb      	ldrb	r3, [r7, #7]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d105      	bne.n	8011226 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801121a:	683a      	ldr	r2, [r7, #0]
 801121c:	4907      	ldr	r1, [pc, #28]	; (801123c <USBD_FS_ProductStrDescriptor+0x34>)
 801121e:	4808      	ldr	r0, [pc, #32]	; (8011240 <USBD_FS_ProductStrDescriptor+0x38>)
 8011220:	f7fd fafb 	bl	800e81a <USBD_GetString>
 8011224:	e004      	b.n	8011230 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011226:	683a      	ldr	r2, [r7, #0]
 8011228:	4904      	ldr	r1, [pc, #16]	; (801123c <USBD_FS_ProductStrDescriptor+0x34>)
 801122a:	4805      	ldr	r0, [pc, #20]	; (8011240 <USBD_FS_ProductStrDescriptor+0x38>)
 801122c:	f7fd faf5 	bl	800e81a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011230:	4b02      	ldr	r3, [pc, #8]	; (801123c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011232:	4618      	mov	r0, r3
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	20005fa4 	.word	0x20005fa4
 8011240:	08017760 	.word	0x08017760

08011244 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	4603      	mov	r3, r0
 801124c:	6039      	str	r1, [r7, #0]
 801124e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011250:	683a      	ldr	r2, [r7, #0]
 8011252:	4904      	ldr	r1, [pc, #16]	; (8011264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011254:	4804      	ldr	r0, [pc, #16]	; (8011268 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011256:	f7fd fae0 	bl	800e81a <USBD_GetString>
  return USBD_StrDesc;
 801125a:	4b02      	ldr	r3, [pc, #8]	; (8011264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801125c:	4618      	mov	r0, r3
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	20005fa4 	.word	0x20005fa4
 8011268:	08017778 	.word	0x08017778

0801126c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	4603      	mov	r3, r0
 8011274:	6039      	str	r1, [r7, #0]
 8011276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	221a      	movs	r2, #26
 801127c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801127e:	f000 f855 	bl	801132c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011282:	4b02      	ldr	r3, [pc, #8]	; (801128c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	20000414 	.word	0x20000414

08011290 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	6039      	str	r1, [r7, #0]
 801129a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801129c:	79fb      	ldrb	r3, [r7, #7]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d105      	bne.n	80112ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80112a2:	683a      	ldr	r2, [r7, #0]
 80112a4:	4907      	ldr	r1, [pc, #28]	; (80112c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80112a6:	4808      	ldr	r0, [pc, #32]	; (80112c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80112a8:	f7fd fab7 	bl	800e81a <USBD_GetString>
 80112ac:	e004      	b.n	80112b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	4904      	ldr	r1, [pc, #16]	; (80112c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80112b2:	4805      	ldr	r0, [pc, #20]	; (80112c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80112b4:	f7fd fab1 	bl	800e81a <USBD_GetString>
  }
  return USBD_StrDesc;
 80112b8:	4b02      	ldr	r3, [pc, #8]	; (80112c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20005fa4 	.word	0x20005fa4
 80112c8:	0801778c 	.word	0x0801778c

080112cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	4603      	mov	r3, r0
 80112d4:	6039      	str	r1, [r7, #0]
 80112d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80112d8:	79fb      	ldrb	r3, [r7, #7]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d105      	bne.n	80112ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80112de:	683a      	ldr	r2, [r7, #0]
 80112e0:	4907      	ldr	r1, [pc, #28]	; (8011300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80112e2:	4808      	ldr	r0, [pc, #32]	; (8011304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80112e4:	f7fd fa99 	bl	800e81a <USBD_GetString>
 80112e8:	e004      	b.n	80112f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	4904      	ldr	r1, [pc, #16]	; (8011300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80112ee:	4805      	ldr	r0, [pc, #20]	; (8011304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80112f0:	f7fd fa93 	bl	800e81a <USBD_GetString>
  }
  return USBD_StrDesc;
 80112f4:	4b02      	ldr	r3, [pc, #8]	; (8011300 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3708      	adds	r7, #8
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	20005fa4 	.word	0x20005fa4
 8011304:	08017798 	.word	0x08017798

08011308 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	4603      	mov	r3, r0
 8011310:	6039      	str	r1, [r7, #0]
 8011312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	220c      	movs	r2, #12
 8011318:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801131a:	4b03      	ldr	r3, [pc, #12]	; (8011328 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801131c:	4618      	mov	r0, r3
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr
 8011328:	20000404 	.word	0x20000404

0801132c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011332:	4b0f      	ldr	r3, [pc, #60]	; (8011370 <Get_SerialNum+0x44>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011338:	4b0e      	ldr	r3, [pc, #56]	; (8011374 <Get_SerialNum+0x48>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801133e:	4b0e      	ldr	r3, [pc, #56]	; (8011378 <Get_SerialNum+0x4c>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4413      	add	r3, r2
 801134a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d009      	beq.n	8011366 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011352:	2208      	movs	r2, #8
 8011354:	4909      	ldr	r1, [pc, #36]	; (801137c <Get_SerialNum+0x50>)
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f000 f814 	bl	8011384 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801135c:	2204      	movs	r2, #4
 801135e:	4908      	ldr	r1, [pc, #32]	; (8011380 <Get_SerialNum+0x54>)
 8011360:	68b8      	ldr	r0, [r7, #8]
 8011362:	f000 f80f 	bl	8011384 <IntToUnicode>
  }
}
 8011366:	bf00      	nop
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	1fff7a10 	.word	0x1fff7a10
 8011374:	1fff7a14 	.word	0x1fff7a14
 8011378:	1fff7a18 	.word	0x1fff7a18
 801137c:	20000416 	.word	0x20000416
 8011380:	20000426 	.word	0x20000426

08011384 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011384:	b480      	push	{r7}
 8011386:	b087      	sub	sp, #28
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	4613      	mov	r3, r2
 8011390:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011396:	2300      	movs	r3, #0
 8011398:	75fb      	strb	r3, [r7, #23]
 801139a:	e027      	b.n	80113ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	0f1b      	lsrs	r3, r3, #28
 80113a0:	2b09      	cmp	r3, #9
 80113a2:	d80b      	bhi.n	80113bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	0f1b      	lsrs	r3, r3, #28
 80113a8:	b2da      	uxtb	r2, r3
 80113aa:	7dfb      	ldrb	r3, [r7, #23]
 80113ac:	005b      	lsls	r3, r3, #1
 80113ae:	4619      	mov	r1, r3
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	440b      	add	r3, r1
 80113b4:	3230      	adds	r2, #48	; 0x30
 80113b6:	b2d2      	uxtb	r2, r2
 80113b8:	701a      	strb	r2, [r3, #0]
 80113ba:	e00a      	b.n	80113d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	0f1b      	lsrs	r3, r3, #28
 80113c0:	b2da      	uxtb	r2, r3
 80113c2:	7dfb      	ldrb	r3, [r7, #23]
 80113c4:	005b      	lsls	r3, r3, #1
 80113c6:	4619      	mov	r1, r3
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	440b      	add	r3, r1
 80113cc:	3237      	adds	r2, #55	; 0x37
 80113ce:	b2d2      	uxtb	r2, r2
 80113d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	011b      	lsls	r3, r3, #4
 80113d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80113d8:	7dfb      	ldrb	r3, [r7, #23]
 80113da:	005b      	lsls	r3, r3, #1
 80113dc:	3301      	adds	r3, #1
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	4413      	add	r3, r2
 80113e2:	2200      	movs	r2, #0
 80113e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
 80113e8:	3301      	adds	r3, #1
 80113ea:	75fb      	strb	r3, [r7, #23]
 80113ec:	7dfa      	ldrb	r2, [r7, #23]
 80113ee:	79fb      	ldrb	r3, [r7, #7]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d3d3      	bcc.n	801139c <IntToUnicode+0x18>
  }
}
 80113f4:	bf00      	nop
 80113f6:	371c      	adds	r7, #28
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b08a      	sub	sp, #40	; 0x28
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011408:	f107 0314 	add.w	r3, r7, #20
 801140c:	2200      	movs	r2, #0
 801140e:	601a      	str	r2, [r3, #0]
 8011410:	605a      	str	r2, [r3, #4]
 8011412:	609a      	str	r2, [r3, #8]
 8011414:	60da      	str	r2, [r3, #12]
 8011416:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011420:	d13a      	bne.n	8011498 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011422:	2300      	movs	r3, #0
 8011424:	613b      	str	r3, [r7, #16]
 8011426:	4b1e      	ldr	r3, [pc, #120]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 8011428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801142a:	4a1d      	ldr	r2, [pc, #116]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 801142c:	f043 0301 	orr.w	r3, r3, #1
 8011430:	6313      	str	r3, [r2, #48]	; 0x30
 8011432:	4b1b      	ldr	r3, [pc, #108]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 8011434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011436:	f003 0301 	and.w	r3, r3, #1
 801143a:	613b      	str	r3, [r7, #16]
 801143c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801143e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011444:	2302      	movs	r3, #2
 8011446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011448:	2300      	movs	r3, #0
 801144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801144c:	2303      	movs	r3, #3
 801144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011450:	230a      	movs	r3, #10
 8011452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011454:	f107 0314 	add.w	r3, r7, #20
 8011458:	4619      	mov	r1, r3
 801145a:	4812      	ldr	r0, [pc, #72]	; (80114a4 <HAL_PCD_MspInit+0xa4>)
 801145c:	f7f4 fdb6 	bl	8005fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011460:	4b0f      	ldr	r3, [pc, #60]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 8011462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011464:	4a0e      	ldr	r2, [pc, #56]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 8011466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801146a:	6353      	str	r3, [r2, #52]	; 0x34
 801146c:	2300      	movs	r3, #0
 801146e:	60fb      	str	r3, [r7, #12]
 8011470:	4b0b      	ldr	r3, [pc, #44]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 8011472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011474:	4a0a      	ldr	r2, [pc, #40]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 8011476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801147a:	6453      	str	r3, [r2, #68]	; 0x44
 801147c:	4b08      	ldr	r3, [pc, #32]	; (80114a0 <HAL_PCD_MspInit+0xa0>)
 801147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011484:	60fb      	str	r3, [r7, #12]
 8011486:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011488:	2200      	movs	r2, #0
 801148a:	2105      	movs	r1, #5
 801148c:	2043      	movs	r0, #67	; 0x43
 801148e:	f7f4 fd73 	bl	8005f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011492:	2043      	movs	r0, #67	; 0x43
 8011494:	f7f4 fd8c 	bl	8005fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011498:	bf00      	nop
 801149a:	3728      	adds	r7, #40	; 0x28
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	40023800 	.word	0x40023800
 80114a4:	40020000 	.word	0x40020000

080114a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80114bc:	4619      	mov	r1, r3
 80114be:	4610      	mov	r0, r2
 80114c0:	f7fc f9fe 	bl	800d8c0 <USBD_LL_SetupStage>
}
 80114c4:	bf00      	nop
 80114c6:	3708      	adds	r7, #8
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	460b      	mov	r3, r1
 80114d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80114de:	78fa      	ldrb	r2, [r7, #3]
 80114e0:	6879      	ldr	r1, [r7, #4]
 80114e2:	4613      	mov	r3, r2
 80114e4:	00db      	lsls	r3, r3, #3
 80114e6:	1a9b      	subs	r3, r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	440b      	add	r3, r1
 80114ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	78fb      	ldrb	r3, [r7, #3]
 80114f4:	4619      	mov	r1, r3
 80114f6:	f7fc fa36 	bl	800d966 <USBD_LL_DataOutStage>
}
 80114fa:	bf00      	nop
 80114fc:	3708      	adds	r7, #8
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b082      	sub	sp, #8
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
 801150a:	460b      	mov	r3, r1
 801150c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011514:	78fa      	ldrb	r2, [r7, #3]
 8011516:	6879      	ldr	r1, [r7, #4]
 8011518:	4613      	mov	r3, r2
 801151a:	00db      	lsls	r3, r3, #3
 801151c:	1a9b      	subs	r3, r3, r2
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	440b      	add	r3, r1
 8011522:	3348      	adds	r3, #72	; 0x48
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	78fb      	ldrb	r3, [r7, #3]
 8011528:	4619      	mov	r1, r3
 801152a:	f7fc fa7f 	bl	800da2c <USBD_LL_DataInStage>
}
 801152e:	bf00      	nop
 8011530:	3708      	adds	r7, #8
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b082      	sub	sp, #8
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011544:	4618      	mov	r0, r3
 8011546:	f7fc fb83 	bl	800dc50 <USBD_LL_SOF>
}
 801154a:	bf00      	nop
 801154c:	3708      	adds	r7, #8
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}

08011552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011552:	b580      	push	{r7, lr}
 8011554:	b084      	sub	sp, #16
 8011556:	af00      	add	r7, sp, #0
 8011558:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801155a:	2301      	movs	r3, #1
 801155c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d102      	bne.n	801156c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011566:	2300      	movs	r3, #0
 8011568:	73fb      	strb	r3, [r7, #15]
 801156a:	e008      	b.n	801157e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	2b02      	cmp	r3, #2
 8011572:	d102      	bne.n	801157a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011574:	2301      	movs	r3, #1
 8011576:	73fb      	strb	r3, [r7, #15]
 8011578:	e001      	b.n	801157e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801157a:	f7f3 fa3b 	bl	80049f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011584:	7bfa      	ldrb	r2, [r7, #15]
 8011586:	4611      	mov	r1, r2
 8011588:	4618      	mov	r0, r3
 801158a:	f7fc fb26 	bl	800dbda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011594:	4618      	mov	r0, r3
 8011596:	f7fc fadf 	bl	800db58 <USBD_LL_Reset>
}
 801159a:	bf00      	nop
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
	...

080115a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fc fb21 	bl	800dbfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	6812      	ldr	r2, [r2, #0]
 80115c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80115ca:	f043 0301 	orr.w	r3, r3, #1
 80115ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6a1b      	ldr	r3, [r3, #32]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d005      	beq.n	80115e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80115d8:	4b04      	ldr	r3, [pc, #16]	; (80115ec <HAL_PCD_SuspendCallback+0x48>)
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	4a03      	ldr	r2, [pc, #12]	; (80115ec <HAL_PCD_SuspendCallback+0x48>)
 80115de:	f043 0306 	orr.w	r3, r3, #6
 80115e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80115e4:	bf00      	nop
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	e000ed00 	.word	0xe000ed00

080115f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fc fb10 	bl	800dc24 <USBD_LL_Resume>
}
 8011604:	bf00      	nop
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	460b      	mov	r3, r1
 8011616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801161e:	78fa      	ldrb	r2, [r7, #3]
 8011620:	4611      	mov	r1, r2
 8011622:	4618      	mov	r0, r3
 8011624:	f7fc fb3b 	bl	800dc9e <USBD_LL_IsoOUTIncomplete>
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	460b      	mov	r3, r1
 801163a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011642:	78fa      	ldrb	r2, [r7, #3]
 8011644:	4611      	mov	r1, r2
 8011646:	4618      	mov	r0, r3
 8011648:	f7fc fb1c 	bl	800dc84 <USBD_LL_IsoINIncomplete>
}
 801164c:	bf00      	nop
 801164e:	3708      	adds	r7, #8
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011662:	4618      	mov	r0, r3
 8011664:	f7fc fb28 	bl	800dcb8 <USBD_LL_DevConnected>
}
 8011668:	bf00      	nop
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801167e:	4618      	mov	r0, r3
 8011680:	f7fc fb25 	bl	800dcce <USBD_LL_DevDisconnected>
}
 8011684:	bf00      	nop
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}

0801168c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d13c      	bne.n	8011716 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801169c:	4a20      	ldr	r2, [pc, #128]	; (8011720 <USBD_LL_Init+0x94>)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	4a1e      	ldr	r2, [pc, #120]	; (8011720 <USBD_LL_Init+0x94>)
 80116a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80116ac:	4b1c      	ldr	r3, [pc, #112]	; (8011720 <USBD_LL_Init+0x94>)
 80116ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80116b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80116b4:	4b1a      	ldr	r3, [pc, #104]	; (8011720 <USBD_LL_Init+0x94>)
 80116b6:	2206      	movs	r2, #6
 80116b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80116ba:	4b19      	ldr	r3, [pc, #100]	; (8011720 <USBD_LL_Init+0x94>)
 80116bc:	2202      	movs	r2, #2
 80116be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80116c0:	4b17      	ldr	r3, [pc, #92]	; (8011720 <USBD_LL_Init+0x94>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80116c6:	4b16      	ldr	r3, [pc, #88]	; (8011720 <USBD_LL_Init+0x94>)
 80116c8:	2202      	movs	r2, #2
 80116ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80116cc:	4b14      	ldr	r3, [pc, #80]	; (8011720 <USBD_LL_Init+0x94>)
 80116ce:	2200      	movs	r2, #0
 80116d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80116d2:	4b13      	ldr	r3, [pc, #76]	; (8011720 <USBD_LL_Init+0x94>)
 80116d4:	2200      	movs	r2, #0
 80116d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80116d8:	4b11      	ldr	r3, [pc, #68]	; (8011720 <USBD_LL_Init+0x94>)
 80116da:	2200      	movs	r2, #0
 80116dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80116de:	4b10      	ldr	r3, [pc, #64]	; (8011720 <USBD_LL_Init+0x94>)
 80116e0:	2200      	movs	r2, #0
 80116e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80116e4:	4b0e      	ldr	r3, [pc, #56]	; (8011720 <USBD_LL_Init+0x94>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80116ea:	480d      	ldr	r0, [pc, #52]	; (8011720 <USBD_LL_Init+0x94>)
 80116ec:	f7f5 fde5 	bl	80072ba <HAL_PCD_Init>
 80116f0:	4603      	mov	r3, r0
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d001      	beq.n	80116fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80116f6:	f7f3 f97d 	bl	80049f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80116fa:	2180      	movs	r1, #128	; 0x80
 80116fc:	4808      	ldr	r0, [pc, #32]	; (8011720 <USBD_LL_Init+0x94>)
 80116fe:	f7f6 ff76 	bl	80085ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011702:	2240      	movs	r2, #64	; 0x40
 8011704:	2100      	movs	r1, #0
 8011706:	4806      	ldr	r0, [pc, #24]	; (8011720 <USBD_LL_Init+0x94>)
 8011708:	f7f6 ff2a 	bl	8008560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801170c:	2280      	movs	r2, #128	; 0x80
 801170e:	2101      	movs	r1, #1
 8011710:	4803      	ldr	r0, [pc, #12]	; (8011720 <USBD_LL_Init+0x94>)
 8011712:	f7f6 ff25 	bl	8008560 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011716:	2300      	movs	r3, #0
}
 8011718:	4618      	mov	r0, r3
 801171a:	3708      	adds	r7, #8
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	200061a4 	.word	0x200061a4

08011724 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801172c:	2300      	movs	r3, #0
 801172e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011730:	2300      	movs	r3, #0
 8011732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801173a:	4618      	mov	r0, r3
 801173c:	f7f5 fee1 	bl	8007502 <HAL_PCD_Start>
 8011740:	4603      	mov	r3, r0
 8011742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011744:	7bfb      	ldrb	r3, [r7, #15]
 8011746:	4618      	mov	r0, r3
 8011748:	f000 f978 	bl	8011a3c <USBD_Get_USB_Status>
 801174c:	4603      	mov	r3, r0
 801174e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011750:	7bbb      	ldrb	r3, [r7, #14]
}
 8011752:	4618      	mov	r0, r3
 8011754:	3710      	adds	r7, #16
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b084      	sub	sp, #16
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	4608      	mov	r0, r1
 8011764:	4611      	mov	r1, r2
 8011766:	461a      	mov	r2, r3
 8011768:	4603      	mov	r3, r0
 801176a:	70fb      	strb	r3, [r7, #3]
 801176c:	460b      	mov	r3, r1
 801176e:	70bb      	strb	r3, [r7, #2]
 8011770:	4613      	mov	r3, r2
 8011772:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011774:	2300      	movs	r3, #0
 8011776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011778:	2300      	movs	r3, #0
 801177a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011782:	78bb      	ldrb	r3, [r7, #2]
 8011784:	883a      	ldrh	r2, [r7, #0]
 8011786:	78f9      	ldrb	r1, [r7, #3]
 8011788:	f7f6 faf2 	bl	8007d70 <HAL_PCD_EP_Open>
 801178c:	4603      	mov	r3, r0
 801178e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011790:	7bfb      	ldrb	r3, [r7, #15]
 8011792:	4618      	mov	r0, r3
 8011794:	f000 f952 	bl	8011a3c <USBD_Get_USB_Status>
 8011798:	4603      	mov	r3, r0
 801179a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801179c:	7bbb      	ldrb	r3, [r7, #14]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b084      	sub	sp, #16
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
 80117ae:	460b      	mov	r3, r1
 80117b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117b6:	2300      	movs	r3, #0
 80117b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80117c0:	78fa      	ldrb	r2, [r7, #3]
 80117c2:	4611      	mov	r1, r2
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7f6 fb3b 	bl	8007e40 <HAL_PCD_EP_Close>
 80117ca:	4603      	mov	r3, r0
 80117cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ce:	7bfb      	ldrb	r3, [r7, #15]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f000 f933 	bl	8011a3c <USBD_Get_USB_Status>
 80117d6:	4603      	mov	r3, r0
 80117d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117da:	7bbb      	ldrb	r3, [r7, #14]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3710      	adds	r7, #16
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	460b      	mov	r3, r1
 80117ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117f0:	2300      	movs	r3, #0
 80117f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117f4:	2300      	movs	r3, #0
 80117f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80117fe:	78fa      	ldrb	r2, [r7, #3]
 8011800:	4611      	mov	r1, r2
 8011802:	4618      	mov	r0, r3
 8011804:	f7f6 fc13 	bl	800802e <HAL_PCD_EP_SetStall>
 8011808:	4603      	mov	r3, r0
 801180a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801180c:	7bfb      	ldrb	r3, [r7, #15]
 801180e:	4618      	mov	r0, r3
 8011810:	f000 f914 	bl	8011a3c <USBD_Get_USB_Status>
 8011814:	4603      	mov	r3, r0
 8011816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011818:	7bbb      	ldrb	r3, [r7, #14]
}
 801181a:	4618      	mov	r0, r3
 801181c:	3710      	adds	r7, #16
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}

08011822 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011822:	b580      	push	{r7, lr}
 8011824:	b084      	sub	sp, #16
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	460b      	mov	r3, r1
 801182c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801182e:	2300      	movs	r3, #0
 8011830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011832:	2300      	movs	r3, #0
 8011834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801183c:	78fa      	ldrb	r2, [r7, #3]
 801183e:	4611      	mov	r1, r2
 8011840:	4618      	mov	r0, r3
 8011842:	f7f6 fc58 	bl	80080f6 <HAL_PCD_EP_ClrStall>
 8011846:	4603      	mov	r3, r0
 8011848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801184a:	7bfb      	ldrb	r3, [r7, #15]
 801184c:	4618      	mov	r0, r3
 801184e:	f000 f8f5 	bl	8011a3c <USBD_Get_USB_Status>
 8011852:	4603      	mov	r3, r0
 8011854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011856:	7bbb      	ldrb	r3, [r7, #14]
}
 8011858:	4618      	mov	r0, r3
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011860:	b480      	push	{r7}
 8011862:	b085      	sub	sp, #20
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	460b      	mov	r3, r1
 801186a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011872:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011878:	2b00      	cmp	r3, #0
 801187a:	da0b      	bge.n	8011894 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801187c:	78fb      	ldrb	r3, [r7, #3]
 801187e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011882:	68f9      	ldr	r1, [r7, #12]
 8011884:	4613      	mov	r3, r2
 8011886:	00db      	lsls	r3, r3, #3
 8011888:	1a9b      	subs	r3, r3, r2
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	440b      	add	r3, r1
 801188e:	333e      	adds	r3, #62	; 0x3e
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	e00b      	b.n	80118ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011894:	78fb      	ldrb	r3, [r7, #3]
 8011896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801189a:	68f9      	ldr	r1, [r7, #12]
 801189c:	4613      	mov	r3, r2
 801189e:	00db      	lsls	r3, r3, #3
 80118a0:	1a9b      	subs	r3, r3, r2
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	440b      	add	r3, r1
 80118a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80118aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3714      	adds	r7, #20
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	460b      	mov	r3, r1
 80118c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118c4:	2300      	movs	r3, #0
 80118c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118c8:	2300      	movs	r3, #0
 80118ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80118d2:	78fa      	ldrb	r2, [r7, #3]
 80118d4:	4611      	mov	r1, r2
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7f6 fa25 	bl	8007d26 <HAL_PCD_SetAddress>
 80118dc:	4603      	mov	r3, r0
 80118de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f000 f8aa 	bl	8011a3c <USBD_Get_USB_Status>
 80118e8:	4603      	mov	r3, r0
 80118ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3710      	adds	r7, #16
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b086      	sub	sp, #24
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	60f8      	str	r0, [r7, #12]
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	603b      	str	r3, [r7, #0]
 8011902:	460b      	mov	r3, r1
 8011904:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011906:	2300      	movs	r3, #0
 8011908:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801190a:	2300      	movs	r3, #0
 801190c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011914:	7af9      	ldrb	r1, [r7, #11]
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	687a      	ldr	r2, [r7, #4]
 801191a:	f7f6 fb3e 	bl	8007f9a <HAL_PCD_EP_Transmit>
 801191e:	4603      	mov	r3, r0
 8011920:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011922:	7dfb      	ldrb	r3, [r7, #23]
 8011924:	4618      	mov	r0, r3
 8011926:	f000 f889 	bl	8011a3c <USBD_Get_USB_Status>
 801192a:	4603      	mov	r3, r0
 801192c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801192e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b086      	sub	sp, #24
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	607a      	str	r2, [r7, #4]
 8011942:	603b      	str	r3, [r7, #0]
 8011944:	460b      	mov	r3, r1
 8011946:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801194c:	2300      	movs	r3, #0
 801194e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011956:	7af9      	ldrb	r1, [r7, #11]
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	f7f6 faba 	bl	8007ed4 <HAL_PCD_EP_Receive>
 8011960:	4603      	mov	r3, r0
 8011962:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011964:	7dfb      	ldrb	r3, [r7, #23]
 8011966:	4618      	mov	r0, r3
 8011968:	f000 f868 	bl	8011a3c <USBD_Get_USB_Status>
 801196c:	4603      	mov	r3, r0
 801196e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011970:	7dbb      	ldrb	r3, [r7, #22]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3718      	adds	r7, #24
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801197a:	b580      	push	{r7, lr}
 801197c:	b082      	sub	sp, #8
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
 8011982:	460b      	mov	r3, r1
 8011984:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801198c:	78fa      	ldrb	r2, [r7, #3]
 801198e:	4611      	mov	r1, r2
 8011990:	4618      	mov	r0, r3
 8011992:	f7f6 faea 	bl	8007f6a <HAL_PCD_EP_GetRxCount>
 8011996:	4603      	mov	r3, r0
}
 8011998:	4618      	mov	r0, r3
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	460b      	mov	r3, r1
 80119aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80119ac:	78fb      	ldrb	r3, [r7, #3]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d002      	beq.n	80119b8 <HAL_PCDEx_LPM_Callback+0x18>
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d01f      	beq.n	80119f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80119b6:	e03b      	b.n	8011a30 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a1b      	ldr	r3, [r3, #32]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d007      	beq.n	80119d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80119c0:	f7f1 fed2 	bl	8003768 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119c4:	4b1c      	ldr	r3, [pc, #112]	; (8011a38 <HAL_PCDEx_LPM_Callback+0x98>)
 80119c6:	691b      	ldr	r3, [r3, #16]
 80119c8:	4a1b      	ldr	r2, [pc, #108]	; (8011a38 <HAL_PCDEx_LPM_Callback+0x98>)
 80119ca:	f023 0306 	bic.w	r3, r3, #6
 80119ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	6812      	ldr	r2, [r2, #0]
 80119de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80119e2:	f023 0301 	bic.w	r3, r3, #1
 80119e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7fc f918 	bl	800dc24 <USBD_LL_Resume>
    break;
 80119f4:	e01c      	b.n	8011a30 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	6812      	ldr	r2, [r2, #0]
 8011a04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a08:	f043 0301 	orr.w	r3, r3, #1
 8011a0c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fc f8f0 	bl	800dbfa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6a1b      	ldr	r3, [r3, #32]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d005      	beq.n	8011a2e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a22:	4b05      	ldr	r3, [pc, #20]	; (8011a38 <HAL_PCDEx_LPM_Callback+0x98>)
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	4a04      	ldr	r2, [pc, #16]	; (8011a38 <HAL_PCDEx_LPM_Callback+0x98>)
 8011a28:	f043 0306 	orr.w	r3, r3, #6
 8011a2c:	6113      	str	r3, [r2, #16]
    break;
 8011a2e:	bf00      	nop
}
 8011a30:	bf00      	nop
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	e000ed00 	.word	0xe000ed00

08011a3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b085      	sub	sp, #20
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	4603      	mov	r3, r0
 8011a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a46:	2300      	movs	r3, #0
 8011a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011a4a:	79fb      	ldrb	r3, [r7, #7]
 8011a4c:	2b03      	cmp	r3, #3
 8011a4e:	d817      	bhi.n	8011a80 <USBD_Get_USB_Status+0x44>
 8011a50:	a201      	add	r2, pc, #4	; (adr r2, 8011a58 <USBD_Get_USB_Status+0x1c>)
 8011a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a56:	bf00      	nop
 8011a58:	08011a69 	.word	0x08011a69
 8011a5c:	08011a6f 	.word	0x08011a6f
 8011a60:	08011a75 	.word	0x08011a75
 8011a64:	08011a7b 	.word	0x08011a7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a6c:	e00b      	b.n	8011a86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a6e:	2303      	movs	r3, #3
 8011a70:	73fb      	strb	r3, [r7, #15]
    break;
 8011a72:	e008      	b.n	8011a86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a74:	2301      	movs	r3, #1
 8011a76:	73fb      	strb	r3, [r7, #15]
    break;
 8011a78:	e005      	b.n	8011a86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8011a7e:	e002      	b.n	8011a86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011a80:	2303      	movs	r3, #3
 8011a82:	73fb      	strb	r3, [r7, #15]
    break;
 8011a84:	bf00      	nop
  }
  return usb_status;
 8011a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3714      	adds	r7, #20
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr

08011a94 <__assert_func>:
 8011a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a96:	461c      	mov	r4, r3
 8011a98:	4b09      	ldr	r3, [pc, #36]	; (8011ac0 <__assert_func+0x2c>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	68d8      	ldr	r0, [r3, #12]
 8011aa0:	b152      	cbz	r2, 8011ab8 <__assert_func+0x24>
 8011aa2:	4b08      	ldr	r3, [pc, #32]	; (8011ac4 <__assert_func+0x30>)
 8011aa4:	9100      	str	r1, [sp, #0]
 8011aa6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011aaa:	4907      	ldr	r1, [pc, #28]	; (8011ac8 <__assert_func+0x34>)
 8011aac:	462b      	mov	r3, r5
 8011aae:	4622      	mov	r2, r4
 8011ab0:	f000 f814 	bl	8011adc <fiprintf>
 8011ab4:	f001 f83a 	bl	8012b2c <abort>
 8011ab8:	4b04      	ldr	r3, [pc, #16]	; (8011acc <__assert_func+0x38>)
 8011aba:	461a      	mov	r2, r3
 8011abc:	e7f2      	b.n	8011aa4 <__assert_func+0x10>
 8011abe:	bf00      	nop
 8011ac0:	20000430 	.word	0x20000430
 8011ac4:	08017840 	.word	0x08017840
 8011ac8:	0801784d 	.word	0x0801784d
 8011acc:	0801787b 	.word	0x0801787b

08011ad0 <__errno>:
 8011ad0:	4b01      	ldr	r3, [pc, #4]	; (8011ad8 <__errno+0x8>)
 8011ad2:	6818      	ldr	r0, [r3, #0]
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	20000430 	.word	0x20000430

08011adc <fiprintf>:
 8011adc:	b40e      	push	{r1, r2, r3}
 8011ade:	b503      	push	{r0, r1, lr}
 8011ae0:	4601      	mov	r1, r0
 8011ae2:	ab03      	add	r3, sp, #12
 8011ae4:	4805      	ldr	r0, [pc, #20]	; (8011afc <fiprintf+0x20>)
 8011ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aea:	6800      	ldr	r0, [r0, #0]
 8011aec:	9301      	str	r3, [sp, #4]
 8011aee:	f000 f921 	bl	8011d34 <_vfiprintf_r>
 8011af2:	b002      	add	sp, #8
 8011af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011af8:	b003      	add	sp, #12
 8011afa:	4770      	bx	lr
 8011afc:	20000430 	.word	0x20000430

08011b00 <__libc_init_array>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	4e0d      	ldr	r6, [pc, #52]	; (8011b38 <__libc_init_array+0x38>)
 8011b04:	4c0d      	ldr	r4, [pc, #52]	; (8011b3c <__libc_init_array+0x3c>)
 8011b06:	1ba4      	subs	r4, r4, r6
 8011b08:	10a4      	asrs	r4, r4, #2
 8011b0a:	2500      	movs	r5, #0
 8011b0c:	42a5      	cmp	r5, r4
 8011b0e:	d109      	bne.n	8011b24 <__libc_init_array+0x24>
 8011b10:	4e0b      	ldr	r6, [pc, #44]	; (8011b40 <__libc_init_array+0x40>)
 8011b12:	4c0c      	ldr	r4, [pc, #48]	; (8011b44 <__libc_init_array+0x44>)
 8011b14:	f005 fb26 	bl	8017164 <_init>
 8011b18:	1ba4      	subs	r4, r4, r6
 8011b1a:	10a4      	asrs	r4, r4, #2
 8011b1c:	2500      	movs	r5, #0
 8011b1e:	42a5      	cmp	r5, r4
 8011b20:	d105      	bne.n	8011b2e <__libc_init_array+0x2e>
 8011b22:	bd70      	pop	{r4, r5, r6, pc}
 8011b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011b28:	4798      	blx	r3
 8011b2a:	3501      	adds	r5, #1
 8011b2c:	e7ee      	b.n	8011b0c <__libc_init_array+0xc>
 8011b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011b32:	4798      	blx	r3
 8011b34:	3501      	adds	r5, #1
 8011b36:	e7f2      	b.n	8011b1e <__libc_init_array+0x1e>
 8011b38:	08017db0 	.word	0x08017db0
 8011b3c:	08017db0 	.word	0x08017db0
 8011b40:	08017db0 	.word	0x08017db0
 8011b44:	08017db4 	.word	0x08017db4

08011b48 <malloc>:
 8011b48:	4b02      	ldr	r3, [pc, #8]	; (8011b54 <malloc+0xc>)
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	6818      	ldr	r0, [r3, #0]
 8011b4e:	f000 b86d 	b.w	8011c2c <_malloc_r>
 8011b52:	bf00      	nop
 8011b54:	20000430 	.word	0x20000430

08011b58 <free>:
 8011b58:	4b02      	ldr	r3, [pc, #8]	; (8011b64 <free+0xc>)
 8011b5a:	4601      	mov	r1, r0
 8011b5c:	6818      	ldr	r0, [r3, #0]
 8011b5e:	f000 b817 	b.w	8011b90 <_free_r>
 8011b62:	bf00      	nop
 8011b64:	20000430 	.word	0x20000430

08011b68 <memcpy>:
 8011b68:	b510      	push	{r4, lr}
 8011b6a:	1e43      	subs	r3, r0, #1
 8011b6c:	440a      	add	r2, r1
 8011b6e:	4291      	cmp	r1, r2
 8011b70:	d100      	bne.n	8011b74 <memcpy+0xc>
 8011b72:	bd10      	pop	{r4, pc}
 8011b74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b7c:	e7f7      	b.n	8011b6e <memcpy+0x6>

08011b7e <memset>:
 8011b7e:	4402      	add	r2, r0
 8011b80:	4603      	mov	r3, r0
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d100      	bne.n	8011b88 <memset+0xa>
 8011b86:	4770      	bx	lr
 8011b88:	f803 1b01 	strb.w	r1, [r3], #1
 8011b8c:	e7f9      	b.n	8011b82 <memset+0x4>
	...

08011b90 <_free_r>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	4605      	mov	r5, r0
 8011b94:	2900      	cmp	r1, #0
 8011b96:	d045      	beq.n	8011c24 <_free_r+0x94>
 8011b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b9c:	1f0c      	subs	r4, r1, #4
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	bfb8      	it	lt
 8011ba2:	18e4      	addlt	r4, r4, r3
 8011ba4:	f002 f837 	bl	8013c16 <__malloc_lock>
 8011ba8:	4a1f      	ldr	r2, [pc, #124]	; (8011c28 <_free_r+0x98>)
 8011baa:	6813      	ldr	r3, [r2, #0]
 8011bac:	4610      	mov	r0, r2
 8011bae:	b933      	cbnz	r3, 8011bbe <_free_r+0x2e>
 8011bb0:	6063      	str	r3, [r4, #4]
 8011bb2:	6014      	str	r4, [r2, #0]
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bba:	f002 b82d 	b.w	8013c18 <__malloc_unlock>
 8011bbe:	42a3      	cmp	r3, r4
 8011bc0:	d90c      	bls.n	8011bdc <_free_r+0x4c>
 8011bc2:	6821      	ldr	r1, [r4, #0]
 8011bc4:	1862      	adds	r2, r4, r1
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	bf04      	itt	eq
 8011bca:	681a      	ldreq	r2, [r3, #0]
 8011bcc:	685b      	ldreq	r3, [r3, #4]
 8011bce:	6063      	str	r3, [r4, #4]
 8011bd0:	bf04      	itt	eq
 8011bd2:	1852      	addeq	r2, r2, r1
 8011bd4:	6022      	streq	r2, [r4, #0]
 8011bd6:	6004      	str	r4, [r0, #0]
 8011bd8:	e7ec      	b.n	8011bb4 <_free_r+0x24>
 8011bda:	4613      	mov	r3, r2
 8011bdc:	685a      	ldr	r2, [r3, #4]
 8011bde:	b10a      	cbz	r2, 8011be4 <_free_r+0x54>
 8011be0:	42a2      	cmp	r2, r4
 8011be2:	d9fa      	bls.n	8011bda <_free_r+0x4a>
 8011be4:	6819      	ldr	r1, [r3, #0]
 8011be6:	1858      	adds	r0, r3, r1
 8011be8:	42a0      	cmp	r0, r4
 8011bea:	d10b      	bne.n	8011c04 <_free_r+0x74>
 8011bec:	6820      	ldr	r0, [r4, #0]
 8011bee:	4401      	add	r1, r0
 8011bf0:	1858      	adds	r0, r3, r1
 8011bf2:	4282      	cmp	r2, r0
 8011bf4:	6019      	str	r1, [r3, #0]
 8011bf6:	d1dd      	bne.n	8011bb4 <_free_r+0x24>
 8011bf8:	6810      	ldr	r0, [r2, #0]
 8011bfa:	6852      	ldr	r2, [r2, #4]
 8011bfc:	605a      	str	r2, [r3, #4]
 8011bfe:	4401      	add	r1, r0
 8011c00:	6019      	str	r1, [r3, #0]
 8011c02:	e7d7      	b.n	8011bb4 <_free_r+0x24>
 8011c04:	d902      	bls.n	8011c0c <_free_r+0x7c>
 8011c06:	230c      	movs	r3, #12
 8011c08:	602b      	str	r3, [r5, #0]
 8011c0a:	e7d3      	b.n	8011bb4 <_free_r+0x24>
 8011c0c:	6820      	ldr	r0, [r4, #0]
 8011c0e:	1821      	adds	r1, r4, r0
 8011c10:	428a      	cmp	r2, r1
 8011c12:	bf04      	itt	eq
 8011c14:	6811      	ldreq	r1, [r2, #0]
 8011c16:	6852      	ldreq	r2, [r2, #4]
 8011c18:	6062      	str	r2, [r4, #4]
 8011c1a:	bf04      	itt	eq
 8011c1c:	1809      	addeq	r1, r1, r0
 8011c1e:	6021      	streq	r1, [r4, #0]
 8011c20:	605c      	str	r4, [r3, #4]
 8011c22:	e7c7      	b.n	8011bb4 <_free_r+0x24>
 8011c24:	bd38      	pop	{r3, r4, r5, pc}
 8011c26:	bf00      	nop
 8011c28:	200045dc 	.word	0x200045dc

08011c2c <_malloc_r>:
 8011c2c:	b570      	push	{r4, r5, r6, lr}
 8011c2e:	1ccd      	adds	r5, r1, #3
 8011c30:	f025 0503 	bic.w	r5, r5, #3
 8011c34:	3508      	adds	r5, #8
 8011c36:	2d0c      	cmp	r5, #12
 8011c38:	bf38      	it	cc
 8011c3a:	250c      	movcc	r5, #12
 8011c3c:	2d00      	cmp	r5, #0
 8011c3e:	4606      	mov	r6, r0
 8011c40:	db01      	blt.n	8011c46 <_malloc_r+0x1a>
 8011c42:	42a9      	cmp	r1, r5
 8011c44:	d903      	bls.n	8011c4e <_malloc_r+0x22>
 8011c46:	230c      	movs	r3, #12
 8011c48:	6033      	str	r3, [r6, #0]
 8011c4a:	2000      	movs	r0, #0
 8011c4c:	bd70      	pop	{r4, r5, r6, pc}
 8011c4e:	f001 ffe2 	bl	8013c16 <__malloc_lock>
 8011c52:	4a21      	ldr	r2, [pc, #132]	; (8011cd8 <_malloc_r+0xac>)
 8011c54:	6814      	ldr	r4, [r2, #0]
 8011c56:	4621      	mov	r1, r4
 8011c58:	b991      	cbnz	r1, 8011c80 <_malloc_r+0x54>
 8011c5a:	4c20      	ldr	r4, [pc, #128]	; (8011cdc <_malloc_r+0xb0>)
 8011c5c:	6823      	ldr	r3, [r4, #0]
 8011c5e:	b91b      	cbnz	r3, 8011c68 <_malloc_r+0x3c>
 8011c60:	4630      	mov	r0, r6
 8011c62:	f000 fde9 	bl	8012838 <_sbrk_r>
 8011c66:	6020      	str	r0, [r4, #0]
 8011c68:	4629      	mov	r1, r5
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f000 fde4 	bl	8012838 <_sbrk_r>
 8011c70:	1c43      	adds	r3, r0, #1
 8011c72:	d124      	bne.n	8011cbe <_malloc_r+0x92>
 8011c74:	230c      	movs	r3, #12
 8011c76:	6033      	str	r3, [r6, #0]
 8011c78:	4630      	mov	r0, r6
 8011c7a:	f001 ffcd 	bl	8013c18 <__malloc_unlock>
 8011c7e:	e7e4      	b.n	8011c4a <_malloc_r+0x1e>
 8011c80:	680b      	ldr	r3, [r1, #0]
 8011c82:	1b5b      	subs	r3, r3, r5
 8011c84:	d418      	bmi.n	8011cb8 <_malloc_r+0x8c>
 8011c86:	2b0b      	cmp	r3, #11
 8011c88:	d90f      	bls.n	8011caa <_malloc_r+0x7e>
 8011c8a:	600b      	str	r3, [r1, #0]
 8011c8c:	50cd      	str	r5, [r1, r3]
 8011c8e:	18cc      	adds	r4, r1, r3
 8011c90:	4630      	mov	r0, r6
 8011c92:	f001 ffc1 	bl	8013c18 <__malloc_unlock>
 8011c96:	f104 000b 	add.w	r0, r4, #11
 8011c9a:	1d23      	adds	r3, r4, #4
 8011c9c:	f020 0007 	bic.w	r0, r0, #7
 8011ca0:	1ac3      	subs	r3, r0, r3
 8011ca2:	d0d3      	beq.n	8011c4c <_malloc_r+0x20>
 8011ca4:	425a      	negs	r2, r3
 8011ca6:	50e2      	str	r2, [r4, r3]
 8011ca8:	e7d0      	b.n	8011c4c <_malloc_r+0x20>
 8011caa:	428c      	cmp	r4, r1
 8011cac:	684b      	ldr	r3, [r1, #4]
 8011cae:	bf16      	itet	ne
 8011cb0:	6063      	strne	r3, [r4, #4]
 8011cb2:	6013      	streq	r3, [r2, #0]
 8011cb4:	460c      	movne	r4, r1
 8011cb6:	e7eb      	b.n	8011c90 <_malloc_r+0x64>
 8011cb8:	460c      	mov	r4, r1
 8011cba:	6849      	ldr	r1, [r1, #4]
 8011cbc:	e7cc      	b.n	8011c58 <_malloc_r+0x2c>
 8011cbe:	1cc4      	adds	r4, r0, #3
 8011cc0:	f024 0403 	bic.w	r4, r4, #3
 8011cc4:	42a0      	cmp	r0, r4
 8011cc6:	d005      	beq.n	8011cd4 <_malloc_r+0xa8>
 8011cc8:	1a21      	subs	r1, r4, r0
 8011cca:	4630      	mov	r0, r6
 8011ccc:	f000 fdb4 	bl	8012838 <_sbrk_r>
 8011cd0:	3001      	adds	r0, #1
 8011cd2:	d0cf      	beq.n	8011c74 <_malloc_r+0x48>
 8011cd4:	6025      	str	r5, [r4, #0]
 8011cd6:	e7db      	b.n	8011c90 <_malloc_r+0x64>
 8011cd8:	200045dc 	.word	0x200045dc
 8011cdc:	200045e0 	.word	0x200045e0

08011ce0 <__sfputc_r>:
 8011ce0:	6893      	ldr	r3, [r2, #8]
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	b410      	push	{r4}
 8011ce8:	6093      	str	r3, [r2, #8]
 8011cea:	da08      	bge.n	8011cfe <__sfputc_r+0x1e>
 8011cec:	6994      	ldr	r4, [r2, #24]
 8011cee:	42a3      	cmp	r3, r4
 8011cf0:	db01      	blt.n	8011cf6 <__sfputc_r+0x16>
 8011cf2:	290a      	cmp	r1, #10
 8011cf4:	d103      	bne.n	8011cfe <__sfputc_r+0x1e>
 8011cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cfa:	f000 be45 	b.w	8012988 <__swbuf_r>
 8011cfe:	6813      	ldr	r3, [r2, #0]
 8011d00:	1c58      	adds	r0, r3, #1
 8011d02:	6010      	str	r0, [r2, #0]
 8011d04:	7019      	strb	r1, [r3, #0]
 8011d06:	4608      	mov	r0, r1
 8011d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d0c:	4770      	bx	lr

08011d0e <__sfputs_r>:
 8011d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d10:	4606      	mov	r6, r0
 8011d12:	460f      	mov	r7, r1
 8011d14:	4614      	mov	r4, r2
 8011d16:	18d5      	adds	r5, r2, r3
 8011d18:	42ac      	cmp	r4, r5
 8011d1a:	d101      	bne.n	8011d20 <__sfputs_r+0x12>
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	e007      	b.n	8011d30 <__sfputs_r+0x22>
 8011d20:	463a      	mov	r2, r7
 8011d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d26:	4630      	mov	r0, r6
 8011d28:	f7ff ffda 	bl	8011ce0 <__sfputc_r>
 8011d2c:	1c43      	adds	r3, r0, #1
 8011d2e:	d1f3      	bne.n	8011d18 <__sfputs_r+0xa>
 8011d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d34 <_vfiprintf_r>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	460c      	mov	r4, r1
 8011d3a:	b09d      	sub	sp, #116	; 0x74
 8011d3c:	4617      	mov	r7, r2
 8011d3e:	461d      	mov	r5, r3
 8011d40:	4606      	mov	r6, r0
 8011d42:	b118      	cbz	r0, 8011d4c <_vfiprintf_r+0x18>
 8011d44:	6983      	ldr	r3, [r0, #24]
 8011d46:	b90b      	cbnz	r3, 8011d4c <_vfiprintf_r+0x18>
 8011d48:	f001 fe3e 	bl	80139c8 <__sinit>
 8011d4c:	4b7c      	ldr	r3, [pc, #496]	; (8011f40 <_vfiprintf_r+0x20c>)
 8011d4e:	429c      	cmp	r4, r3
 8011d50:	d158      	bne.n	8011e04 <_vfiprintf_r+0xd0>
 8011d52:	6874      	ldr	r4, [r6, #4]
 8011d54:	89a3      	ldrh	r3, [r4, #12]
 8011d56:	0718      	lsls	r0, r3, #28
 8011d58:	d55e      	bpl.n	8011e18 <_vfiprintf_r+0xe4>
 8011d5a:	6923      	ldr	r3, [r4, #16]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d05b      	beq.n	8011e18 <_vfiprintf_r+0xe4>
 8011d60:	2300      	movs	r3, #0
 8011d62:	9309      	str	r3, [sp, #36]	; 0x24
 8011d64:	2320      	movs	r3, #32
 8011d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d6a:	2330      	movs	r3, #48	; 0x30
 8011d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d70:	9503      	str	r5, [sp, #12]
 8011d72:	f04f 0b01 	mov.w	fp, #1
 8011d76:	46b8      	mov	r8, r7
 8011d78:	4645      	mov	r5, r8
 8011d7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011d7e:	b10b      	cbz	r3, 8011d84 <_vfiprintf_r+0x50>
 8011d80:	2b25      	cmp	r3, #37	; 0x25
 8011d82:	d154      	bne.n	8011e2e <_vfiprintf_r+0xfa>
 8011d84:	ebb8 0a07 	subs.w	sl, r8, r7
 8011d88:	d00b      	beq.n	8011da2 <_vfiprintf_r+0x6e>
 8011d8a:	4653      	mov	r3, sl
 8011d8c:	463a      	mov	r2, r7
 8011d8e:	4621      	mov	r1, r4
 8011d90:	4630      	mov	r0, r6
 8011d92:	f7ff ffbc 	bl	8011d0e <__sfputs_r>
 8011d96:	3001      	adds	r0, #1
 8011d98:	f000 80c2 	beq.w	8011f20 <_vfiprintf_r+0x1ec>
 8011d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d9e:	4453      	add	r3, sl
 8011da0:	9309      	str	r3, [sp, #36]	; 0x24
 8011da2:	f898 3000 	ldrb.w	r3, [r8]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	f000 80ba 	beq.w	8011f20 <_vfiprintf_r+0x1ec>
 8011dac:	2300      	movs	r3, #0
 8011dae:	f04f 32ff 	mov.w	r2, #4294967295
 8011db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011db6:	9304      	str	r3, [sp, #16]
 8011db8:	9307      	str	r3, [sp, #28]
 8011dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8011dc0:	46a8      	mov	r8, r5
 8011dc2:	2205      	movs	r2, #5
 8011dc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011dc8:	485e      	ldr	r0, [pc, #376]	; (8011f44 <_vfiprintf_r+0x210>)
 8011dca:	f7ee fa29 	bl	8000220 <memchr>
 8011dce:	9b04      	ldr	r3, [sp, #16]
 8011dd0:	bb78      	cbnz	r0, 8011e32 <_vfiprintf_r+0xfe>
 8011dd2:	06d9      	lsls	r1, r3, #27
 8011dd4:	bf44      	itt	mi
 8011dd6:	2220      	movmi	r2, #32
 8011dd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ddc:	071a      	lsls	r2, r3, #28
 8011dde:	bf44      	itt	mi
 8011de0:	222b      	movmi	r2, #43	; 0x2b
 8011de2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011de6:	782a      	ldrb	r2, [r5, #0]
 8011de8:	2a2a      	cmp	r2, #42	; 0x2a
 8011dea:	d02a      	beq.n	8011e42 <_vfiprintf_r+0x10e>
 8011dec:	9a07      	ldr	r2, [sp, #28]
 8011dee:	46a8      	mov	r8, r5
 8011df0:	2000      	movs	r0, #0
 8011df2:	250a      	movs	r5, #10
 8011df4:	4641      	mov	r1, r8
 8011df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dfa:	3b30      	subs	r3, #48	; 0x30
 8011dfc:	2b09      	cmp	r3, #9
 8011dfe:	d969      	bls.n	8011ed4 <_vfiprintf_r+0x1a0>
 8011e00:	b360      	cbz	r0, 8011e5c <_vfiprintf_r+0x128>
 8011e02:	e024      	b.n	8011e4e <_vfiprintf_r+0x11a>
 8011e04:	4b50      	ldr	r3, [pc, #320]	; (8011f48 <_vfiprintf_r+0x214>)
 8011e06:	429c      	cmp	r4, r3
 8011e08:	d101      	bne.n	8011e0e <_vfiprintf_r+0xda>
 8011e0a:	68b4      	ldr	r4, [r6, #8]
 8011e0c:	e7a2      	b.n	8011d54 <_vfiprintf_r+0x20>
 8011e0e:	4b4f      	ldr	r3, [pc, #316]	; (8011f4c <_vfiprintf_r+0x218>)
 8011e10:	429c      	cmp	r4, r3
 8011e12:	bf08      	it	eq
 8011e14:	68f4      	ldreq	r4, [r6, #12]
 8011e16:	e79d      	b.n	8011d54 <_vfiprintf_r+0x20>
 8011e18:	4621      	mov	r1, r4
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f000 fe18 	bl	8012a50 <__swsetup_r>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d09d      	beq.n	8011d60 <_vfiprintf_r+0x2c>
 8011e24:	f04f 30ff 	mov.w	r0, #4294967295
 8011e28:	b01d      	add	sp, #116	; 0x74
 8011e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2e:	46a8      	mov	r8, r5
 8011e30:	e7a2      	b.n	8011d78 <_vfiprintf_r+0x44>
 8011e32:	4a44      	ldr	r2, [pc, #272]	; (8011f44 <_vfiprintf_r+0x210>)
 8011e34:	1a80      	subs	r0, r0, r2
 8011e36:	fa0b f000 	lsl.w	r0, fp, r0
 8011e3a:	4318      	orrs	r0, r3
 8011e3c:	9004      	str	r0, [sp, #16]
 8011e3e:	4645      	mov	r5, r8
 8011e40:	e7be      	b.n	8011dc0 <_vfiprintf_r+0x8c>
 8011e42:	9a03      	ldr	r2, [sp, #12]
 8011e44:	1d11      	adds	r1, r2, #4
 8011e46:	6812      	ldr	r2, [r2, #0]
 8011e48:	9103      	str	r1, [sp, #12]
 8011e4a:	2a00      	cmp	r2, #0
 8011e4c:	db01      	blt.n	8011e52 <_vfiprintf_r+0x11e>
 8011e4e:	9207      	str	r2, [sp, #28]
 8011e50:	e004      	b.n	8011e5c <_vfiprintf_r+0x128>
 8011e52:	4252      	negs	r2, r2
 8011e54:	f043 0302 	orr.w	r3, r3, #2
 8011e58:	9207      	str	r2, [sp, #28]
 8011e5a:	9304      	str	r3, [sp, #16]
 8011e5c:	f898 3000 	ldrb.w	r3, [r8]
 8011e60:	2b2e      	cmp	r3, #46	; 0x2e
 8011e62:	d10e      	bne.n	8011e82 <_vfiprintf_r+0x14e>
 8011e64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011e68:	2b2a      	cmp	r3, #42	; 0x2a
 8011e6a:	d138      	bne.n	8011ede <_vfiprintf_r+0x1aa>
 8011e6c:	9b03      	ldr	r3, [sp, #12]
 8011e6e:	1d1a      	adds	r2, r3, #4
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	9203      	str	r2, [sp, #12]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	bfb8      	it	lt
 8011e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e7c:	f108 0802 	add.w	r8, r8, #2
 8011e80:	9305      	str	r3, [sp, #20]
 8011e82:	4d33      	ldr	r5, [pc, #204]	; (8011f50 <_vfiprintf_r+0x21c>)
 8011e84:	f898 1000 	ldrb.w	r1, [r8]
 8011e88:	2203      	movs	r2, #3
 8011e8a:	4628      	mov	r0, r5
 8011e8c:	f7ee f9c8 	bl	8000220 <memchr>
 8011e90:	b140      	cbz	r0, 8011ea4 <_vfiprintf_r+0x170>
 8011e92:	2340      	movs	r3, #64	; 0x40
 8011e94:	1b40      	subs	r0, r0, r5
 8011e96:	fa03 f000 	lsl.w	r0, r3, r0
 8011e9a:	9b04      	ldr	r3, [sp, #16]
 8011e9c:	4303      	orrs	r3, r0
 8011e9e:	f108 0801 	add.w	r8, r8, #1
 8011ea2:	9304      	str	r3, [sp, #16]
 8011ea4:	f898 1000 	ldrb.w	r1, [r8]
 8011ea8:	482a      	ldr	r0, [pc, #168]	; (8011f54 <_vfiprintf_r+0x220>)
 8011eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011eae:	2206      	movs	r2, #6
 8011eb0:	f108 0701 	add.w	r7, r8, #1
 8011eb4:	f7ee f9b4 	bl	8000220 <memchr>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d037      	beq.n	8011f2c <_vfiprintf_r+0x1f8>
 8011ebc:	4b26      	ldr	r3, [pc, #152]	; (8011f58 <_vfiprintf_r+0x224>)
 8011ebe:	bb1b      	cbnz	r3, 8011f08 <_vfiprintf_r+0x1d4>
 8011ec0:	9b03      	ldr	r3, [sp, #12]
 8011ec2:	3307      	adds	r3, #7
 8011ec4:	f023 0307 	bic.w	r3, r3, #7
 8011ec8:	3308      	adds	r3, #8
 8011eca:	9303      	str	r3, [sp, #12]
 8011ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ece:	444b      	add	r3, r9
 8011ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ed2:	e750      	b.n	8011d76 <_vfiprintf_r+0x42>
 8011ed4:	fb05 3202 	mla	r2, r5, r2, r3
 8011ed8:	2001      	movs	r0, #1
 8011eda:	4688      	mov	r8, r1
 8011edc:	e78a      	b.n	8011df4 <_vfiprintf_r+0xc0>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	f108 0801 	add.w	r8, r8, #1
 8011ee4:	9305      	str	r3, [sp, #20]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	250a      	movs	r5, #10
 8011eea:	4640      	mov	r0, r8
 8011eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ef0:	3a30      	subs	r2, #48	; 0x30
 8011ef2:	2a09      	cmp	r2, #9
 8011ef4:	d903      	bls.n	8011efe <_vfiprintf_r+0x1ca>
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d0c3      	beq.n	8011e82 <_vfiprintf_r+0x14e>
 8011efa:	9105      	str	r1, [sp, #20]
 8011efc:	e7c1      	b.n	8011e82 <_vfiprintf_r+0x14e>
 8011efe:	fb05 2101 	mla	r1, r5, r1, r2
 8011f02:	2301      	movs	r3, #1
 8011f04:	4680      	mov	r8, r0
 8011f06:	e7f0      	b.n	8011eea <_vfiprintf_r+0x1b6>
 8011f08:	ab03      	add	r3, sp, #12
 8011f0a:	9300      	str	r3, [sp, #0]
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	4b13      	ldr	r3, [pc, #76]	; (8011f5c <_vfiprintf_r+0x228>)
 8011f10:	a904      	add	r1, sp, #16
 8011f12:	4630      	mov	r0, r6
 8011f14:	f000 f8b8 	bl	8012088 <_printf_float>
 8011f18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011f1c:	4681      	mov	r9, r0
 8011f1e:	d1d5      	bne.n	8011ecc <_vfiprintf_r+0x198>
 8011f20:	89a3      	ldrh	r3, [r4, #12]
 8011f22:	065b      	lsls	r3, r3, #25
 8011f24:	f53f af7e 	bmi.w	8011e24 <_vfiprintf_r+0xf0>
 8011f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f2a:	e77d      	b.n	8011e28 <_vfiprintf_r+0xf4>
 8011f2c:	ab03      	add	r3, sp, #12
 8011f2e:	9300      	str	r3, [sp, #0]
 8011f30:	4622      	mov	r2, r4
 8011f32:	4b0a      	ldr	r3, [pc, #40]	; (8011f5c <_vfiprintf_r+0x228>)
 8011f34:	a904      	add	r1, sp, #16
 8011f36:	4630      	mov	r0, r6
 8011f38:	f000 fb5c 	bl	80125f4 <_printf_i>
 8011f3c:	e7ec      	b.n	8011f18 <_vfiprintf_r+0x1e4>
 8011f3e:	bf00      	nop
 8011f40:	080178f4 	.word	0x080178f4
 8011f44:	08017880 	.word	0x08017880
 8011f48:	08017914 	.word	0x08017914
 8011f4c:	080178d4 	.word	0x080178d4
 8011f50:	08017886 	.word	0x08017886
 8011f54:	0801788a 	.word	0x0801788a
 8011f58:	08012089 	.word	0x08012089
 8011f5c:	08011d0f 	.word	0x08011d0f

08011f60 <__cvt>:
 8011f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f64:	ec55 4b10 	vmov	r4, r5, d0
 8011f68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011f6a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f6e:	2d00      	cmp	r5, #0
 8011f70:	460e      	mov	r6, r1
 8011f72:	4691      	mov	r9, r2
 8011f74:	4619      	mov	r1, r3
 8011f76:	bfb8      	it	lt
 8011f78:	4622      	movlt	r2, r4
 8011f7a:	462b      	mov	r3, r5
 8011f7c:	f027 0720 	bic.w	r7, r7, #32
 8011f80:	bfbb      	ittet	lt
 8011f82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f86:	461d      	movlt	r5, r3
 8011f88:	2300      	movge	r3, #0
 8011f8a:	232d      	movlt	r3, #45	; 0x2d
 8011f8c:	bfb8      	it	lt
 8011f8e:	4614      	movlt	r4, r2
 8011f90:	2f46      	cmp	r7, #70	; 0x46
 8011f92:	700b      	strb	r3, [r1, #0]
 8011f94:	d004      	beq.n	8011fa0 <__cvt+0x40>
 8011f96:	2f45      	cmp	r7, #69	; 0x45
 8011f98:	d100      	bne.n	8011f9c <__cvt+0x3c>
 8011f9a:	3601      	adds	r6, #1
 8011f9c:	2102      	movs	r1, #2
 8011f9e:	e000      	b.n	8011fa2 <__cvt+0x42>
 8011fa0:	2103      	movs	r1, #3
 8011fa2:	ab03      	add	r3, sp, #12
 8011fa4:	9301      	str	r3, [sp, #4]
 8011fa6:	ab02      	add	r3, sp, #8
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	4632      	mov	r2, r6
 8011fac:	4653      	mov	r3, sl
 8011fae:	ec45 4b10 	vmov	d0, r4, r5
 8011fb2:	f000 fe61 	bl	8012c78 <_dtoa_r>
 8011fb6:	2f47      	cmp	r7, #71	; 0x47
 8011fb8:	4680      	mov	r8, r0
 8011fba:	d102      	bne.n	8011fc2 <__cvt+0x62>
 8011fbc:	f019 0f01 	tst.w	r9, #1
 8011fc0:	d026      	beq.n	8012010 <__cvt+0xb0>
 8011fc2:	2f46      	cmp	r7, #70	; 0x46
 8011fc4:	eb08 0906 	add.w	r9, r8, r6
 8011fc8:	d111      	bne.n	8011fee <__cvt+0x8e>
 8011fca:	f898 3000 	ldrb.w	r3, [r8]
 8011fce:	2b30      	cmp	r3, #48	; 0x30
 8011fd0:	d10a      	bne.n	8011fe8 <__cvt+0x88>
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	4629      	mov	r1, r5
 8011fda:	f7ee fd95 	bl	8000b08 <__aeabi_dcmpeq>
 8011fde:	b918      	cbnz	r0, 8011fe8 <__cvt+0x88>
 8011fe0:	f1c6 0601 	rsb	r6, r6, #1
 8011fe4:	f8ca 6000 	str.w	r6, [sl]
 8011fe8:	f8da 3000 	ldr.w	r3, [sl]
 8011fec:	4499      	add	r9, r3
 8011fee:	2200      	movs	r2, #0
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	4629      	mov	r1, r5
 8011ff6:	f7ee fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8011ffa:	b938      	cbnz	r0, 801200c <__cvt+0xac>
 8011ffc:	2230      	movs	r2, #48	; 0x30
 8011ffe:	9b03      	ldr	r3, [sp, #12]
 8012000:	454b      	cmp	r3, r9
 8012002:	d205      	bcs.n	8012010 <__cvt+0xb0>
 8012004:	1c59      	adds	r1, r3, #1
 8012006:	9103      	str	r1, [sp, #12]
 8012008:	701a      	strb	r2, [r3, #0]
 801200a:	e7f8      	b.n	8011ffe <__cvt+0x9e>
 801200c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012010:	9b03      	ldr	r3, [sp, #12]
 8012012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012014:	eba3 0308 	sub.w	r3, r3, r8
 8012018:	4640      	mov	r0, r8
 801201a:	6013      	str	r3, [r2, #0]
 801201c:	b004      	add	sp, #16
 801201e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012022 <__exponent>:
 8012022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012024:	2900      	cmp	r1, #0
 8012026:	4604      	mov	r4, r0
 8012028:	bfba      	itte	lt
 801202a:	4249      	neglt	r1, r1
 801202c:	232d      	movlt	r3, #45	; 0x2d
 801202e:	232b      	movge	r3, #43	; 0x2b
 8012030:	2909      	cmp	r1, #9
 8012032:	f804 2b02 	strb.w	r2, [r4], #2
 8012036:	7043      	strb	r3, [r0, #1]
 8012038:	dd20      	ble.n	801207c <__exponent+0x5a>
 801203a:	f10d 0307 	add.w	r3, sp, #7
 801203e:	461f      	mov	r7, r3
 8012040:	260a      	movs	r6, #10
 8012042:	fb91 f5f6 	sdiv	r5, r1, r6
 8012046:	fb06 1115 	mls	r1, r6, r5, r1
 801204a:	3130      	adds	r1, #48	; 0x30
 801204c:	2d09      	cmp	r5, #9
 801204e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012052:	f103 32ff 	add.w	r2, r3, #4294967295
 8012056:	4629      	mov	r1, r5
 8012058:	dc09      	bgt.n	801206e <__exponent+0x4c>
 801205a:	3130      	adds	r1, #48	; 0x30
 801205c:	3b02      	subs	r3, #2
 801205e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012062:	42bb      	cmp	r3, r7
 8012064:	4622      	mov	r2, r4
 8012066:	d304      	bcc.n	8012072 <__exponent+0x50>
 8012068:	1a10      	subs	r0, r2, r0
 801206a:	b003      	add	sp, #12
 801206c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801206e:	4613      	mov	r3, r2
 8012070:	e7e7      	b.n	8012042 <__exponent+0x20>
 8012072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012076:	f804 2b01 	strb.w	r2, [r4], #1
 801207a:	e7f2      	b.n	8012062 <__exponent+0x40>
 801207c:	2330      	movs	r3, #48	; 0x30
 801207e:	4419      	add	r1, r3
 8012080:	7083      	strb	r3, [r0, #2]
 8012082:	1d02      	adds	r2, r0, #4
 8012084:	70c1      	strb	r1, [r0, #3]
 8012086:	e7ef      	b.n	8012068 <__exponent+0x46>

08012088 <_printf_float>:
 8012088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208c:	b08d      	sub	sp, #52	; 0x34
 801208e:	460c      	mov	r4, r1
 8012090:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012094:	4616      	mov	r6, r2
 8012096:	461f      	mov	r7, r3
 8012098:	4605      	mov	r5, r0
 801209a:	f001 fd1f 	bl	8013adc <_localeconv_r>
 801209e:	6803      	ldr	r3, [r0, #0]
 80120a0:	9304      	str	r3, [sp, #16]
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7ee f8b4 	bl	8000210 <strlen>
 80120a8:	2300      	movs	r3, #0
 80120aa:	930a      	str	r3, [sp, #40]	; 0x28
 80120ac:	f8d8 3000 	ldr.w	r3, [r8]
 80120b0:	9005      	str	r0, [sp, #20]
 80120b2:	3307      	adds	r3, #7
 80120b4:	f023 0307 	bic.w	r3, r3, #7
 80120b8:	f103 0208 	add.w	r2, r3, #8
 80120bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80120c0:	f8d4 b000 	ldr.w	fp, [r4]
 80120c4:	f8c8 2000 	str.w	r2, [r8]
 80120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80120d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80120d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120d8:	9307      	str	r3, [sp, #28]
 80120da:	f8cd 8018 	str.w	r8, [sp, #24]
 80120de:	f04f 32ff 	mov.w	r2, #4294967295
 80120e2:	4ba7      	ldr	r3, [pc, #668]	; (8012380 <_printf_float+0x2f8>)
 80120e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120e8:	f7ee fd40 	bl	8000b6c <__aeabi_dcmpun>
 80120ec:	bb70      	cbnz	r0, 801214c <_printf_float+0xc4>
 80120ee:	f04f 32ff 	mov.w	r2, #4294967295
 80120f2:	4ba3      	ldr	r3, [pc, #652]	; (8012380 <_printf_float+0x2f8>)
 80120f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120f8:	f7ee fd1a 	bl	8000b30 <__aeabi_dcmple>
 80120fc:	bb30      	cbnz	r0, 801214c <_printf_float+0xc4>
 80120fe:	2200      	movs	r2, #0
 8012100:	2300      	movs	r3, #0
 8012102:	4640      	mov	r0, r8
 8012104:	4649      	mov	r1, r9
 8012106:	f7ee fd09 	bl	8000b1c <__aeabi_dcmplt>
 801210a:	b110      	cbz	r0, 8012112 <_printf_float+0x8a>
 801210c:	232d      	movs	r3, #45	; 0x2d
 801210e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012112:	4a9c      	ldr	r2, [pc, #624]	; (8012384 <_printf_float+0x2fc>)
 8012114:	4b9c      	ldr	r3, [pc, #624]	; (8012388 <_printf_float+0x300>)
 8012116:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801211a:	bf8c      	ite	hi
 801211c:	4690      	movhi	r8, r2
 801211e:	4698      	movls	r8, r3
 8012120:	2303      	movs	r3, #3
 8012122:	f02b 0204 	bic.w	r2, fp, #4
 8012126:	6123      	str	r3, [r4, #16]
 8012128:	6022      	str	r2, [r4, #0]
 801212a:	f04f 0900 	mov.w	r9, #0
 801212e:	9700      	str	r7, [sp, #0]
 8012130:	4633      	mov	r3, r6
 8012132:	aa0b      	add	r2, sp, #44	; 0x2c
 8012134:	4621      	mov	r1, r4
 8012136:	4628      	mov	r0, r5
 8012138:	f000 f9e6 	bl	8012508 <_printf_common>
 801213c:	3001      	adds	r0, #1
 801213e:	f040 808d 	bne.w	801225c <_printf_float+0x1d4>
 8012142:	f04f 30ff 	mov.w	r0, #4294967295
 8012146:	b00d      	add	sp, #52	; 0x34
 8012148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214c:	4642      	mov	r2, r8
 801214e:	464b      	mov	r3, r9
 8012150:	4640      	mov	r0, r8
 8012152:	4649      	mov	r1, r9
 8012154:	f7ee fd0a 	bl	8000b6c <__aeabi_dcmpun>
 8012158:	b110      	cbz	r0, 8012160 <_printf_float+0xd8>
 801215a:	4a8c      	ldr	r2, [pc, #560]	; (801238c <_printf_float+0x304>)
 801215c:	4b8c      	ldr	r3, [pc, #560]	; (8012390 <_printf_float+0x308>)
 801215e:	e7da      	b.n	8012116 <_printf_float+0x8e>
 8012160:	6861      	ldr	r1, [r4, #4]
 8012162:	1c4b      	adds	r3, r1, #1
 8012164:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012168:	a80a      	add	r0, sp, #40	; 0x28
 801216a:	d13e      	bne.n	80121ea <_printf_float+0x162>
 801216c:	2306      	movs	r3, #6
 801216e:	6063      	str	r3, [r4, #4]
 8012170:	2300      	movs	r3, #0
 8012172:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012176:	ab09      	add	r3, sp, #36	; 0x24
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	ec49 8b10 	vmov	d0, r8, r9
 801217e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012182:	6022      	str	r2, [r4, #0]
 8012184:	f8cd a004 	str.w	sl, [sp, #4]
 8012188:	6861      	ldr	r1, [r4, #4]
 801218a:	4628      	mov	r0, r5
 801218c:	f7ff fee8 	bl	8011f60 <__cvt>
 8012190:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012194:	2b47      	cmp	r3, #71	; 0x47
 8012196:	4680      	mov	r8, r0
 8012198:	d109      	bne.n	80121ae <_printf_float+0x126>
 801219a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801219c:	1cd8      	adds	r0, r3, #3
 801219e:	db02      	blt.n	80121a6 <_printf_float+0x11e>
 80121a0:	6862      	ldr	r2, [r4, #4]
 80121a2:	4293      	cmp	r3, r2
 80121a4:	dd47      	ble.n	8012236 <_printf_float+0x1ae>
 80121a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80121aa:	fa5f fa8a 	uxtb.w	sl, sl
 80121ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80121b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121b4:	d824      	bhi.n	8012200 <_printf_float+0x178>
 80121b6:	3901      	subs	r1, #1
 80121b8:	4652      	mov	r2, sl
 80121ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121be:	9109      	str	r1, [sp, #36]	; 0x24
 80121c0:	f7ff ff2f 	bl	8012022 <__exponent>
 80121c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121c6:	1813      	adds	r3, r2, r0
 80121c8:	2a01      	cmp	r2, #1
 80121ca:	4681      	mov	r9, r0
 80121cc:	6123      	str	r3, [r4, #16]
 80121ce:	dc02      	bgt.n	80121d6 <_printf_float+0x14e>
 80121d0:	6822      	ldr	r2, [r4, #0]
 80121d2:	07d1      	lsls	r1, r2, #31
 80121d4:	d501      	bpl.n	80121da <_printf_float+0x152>
 80121d6:	3301      	adds	r3, #1
 80121d8:	6123      	str	r3, [r4, #16]
 80121da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d0a5      	beq.n	801212e <_printf_float+0xa6>
 80121e2:	232d      	movs	r3, #45	; 0x2d
 80121e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121e8:	e7a1      	b.n	801212e <_printf_float+0xa6>
 80121ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80121ee:	f000 8177 	beq.w	80124e0 <_printf_float+0x458>
 80121f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80121f6:	d1bb      	bne.n	8012170 <_printf_float+0xe8>
 80121f8:	2900      	cmp	r1, #0
 80121fa:	d1b9      	bne.n	8012170 <_printf_float+0xe8>
 80121fc:	2301      	movs	r3, #1
 80121fe:	e7b6      	b.n	801216e <_printf_float+0xe6>
 8012200:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012204:	d119      	bne.n	801223a <_printf_float+0x1b2>
 8012206:	2900      	cmp	r1, #0
 8012208:	6863      	ldr	r3, [r4, #4]
 801220a:	dd0c      	ble.n	8012226 <_printf_float+0x19e>
 801220c:	6121      	str	r1, [r4, #16]
 801220e:	b913      	cbnz	r3, 8012216 <_printf_float+0x18e>
 8012210:	6822      	ldr	r2, [r4, #0]
 8012212:	07d2      	lsls	r2, r2, #31
 8012214:	d502      	bpl.n	801221c <_printf_float+0x194>
 8012216:	3301      	adds	r3, #1
 8012218:	440b      	add	r3, r1
 801221a:	6123      	str	r3, [r4, #16]
 801221c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801221e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012220:	f04f 0900 	mov.w	r9, #0
 8012224:	e7d9      	b.n	80121da <_printf_float+0x152>
 8012226:	b913      	cbnz	r3, 801222e <_printf_float+0x1a6>
 8012228:	6822      	ldr	r2, [r4, #0]
 801222a:	07d0      	lsls	r0, r2, #31
 801222c:	d501      	bpl.n	8012232 <_printf_float+0x1aa>
 801222e:	3302      	adds	r3, #2
 8012230:	e7f3      	b.n	801221a <_printf_float+0x192>
 8012232:	2301      	movs	r3, #1
 8012234:	e7f1      	b.n	801221a <_printf_float+0x192>
 8012236:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801223a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801223e:	4293      	cmp	r3, r2
 8012240:	db05      	blt.n	801224e <_printf_float+0x1c6>
 8012242:	6822      	ldr	r2, [r4, #0]
 8012244:	6123      	str	r3, [r4, #16]
 8012246:	07d1      	lsls	r1, r2, #31
 8012248:	d5e8      	bpl.n	801221c <_printf_float+0x194>
 801224a:	3301      	adds	r3, #1
 801224c:	e7e5      	b.n	801221a <_printf_float+0x192>
 801224e:	2b00      	cmp	r3, #0
 8012250:	bfd4      	ite	le
 8012252:	f1c3 0302 	rsble	r3, r3, #2
 8012256:	2301      	movgt	r3, #1
 8012258:	4413      	add	r3, r2
 801225a:	e7de      	b.n	801221a <_printf_float+0x192>
 801225c:	6823      	ldr	r3, [r4, #0]
 801225e:	055a      	lsls	r2, r3, #21
 8012260:	d407      	bmi.n	8012272 <_printf_float+0x1ea>
 8012262:	6923      	ldr	r3, [r4, #16]
 8012264:	4642      	mov	r2, r8
 8012266:	4631      	mov	r1, r6
 8012268:	4628      	mov	r0, r5
 801226a:	47b8      	blx	r7
 801226c:	3001      	adds	r0, #1
 801226e:	d12b      	bne.n	80122c8 <_printf_float+0x240>
 8012270:	e767      	b.n	8012142 <_printf_float+0xba>
 8012272:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012276:	f240 80dc 	bls.w	8012432 <_printf_float+0x3aa>
 801227a:	2200      	movs	r2, #0
 801227c:	2300      	movs	r3, #0
 801227e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012282:	f7ee fc41 	bl	8000b08 <__aeabi_dcmpeq>
 8012286:	2800      	cmp	r0, #0
 8012288:	d033      	beq.n	80122f2 <_printf_float+0x26a>
 801228a:	2301      	movs	r3, #1
 801228c:	4a41      	ldr	r2, [pc, #260]	; (8012394 <_printf_float+0x30c>)
 801228e:	4631      	mov	r1, r6
 8012290:	4628      	mov	r0, r5
 8012292:	47b8      	blx	r7
 8012294:	3001      	adds	r0, #1
 8012296:	f43f af54 	beq.w	8012142 <_printf_float+0xba>
 801229a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801229e:	429a      	cmp	r2, r3
 80122a0:	db02      	blt.n	80122a8 <_printf_float+0x220>
 80122a2:	6823      	ldr	r3, [r4, #0]
 80122a4:	07d8      	lsls	r0, r3, #31
 80122a6:	d50f      	bpl.n	80122c8 <_printf_float+0x240>
 80122a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122ac:	4631      	mov	r1, r6
 80122ae:	4628      	mov	r0, r5
 80122b0:	47b8      	blx	r7
 80122b2:	3001      	adds	r0, #1
 80122b4:	f43f af45 	beq.w	8012142 <_printf_float+0xba>
 80122b8:	f04f 0800 	mov.w	r8, #0
 80122bc:	f104 091a 	add.w	r9, r4, #26
 80122c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122c2:	3b01      	subs	r3, #1
 80122c4:	4543      	cmp	r3, r8
 80122c6:	dc09      	bgt.n	80122dc <_printf_float+0x254>
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	079b      	lsls	r3, r3, #30
 80122cc:	f100 8103 	bmi.w	80124d6 <_printf_float+0x44e>
 80122d0:	68e0      	ldr	r0, [r4, #12]
 80122d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122d4:	4298      	cmp	r0, r3
 80122d6:	bfb8      	it	lt
 80122d8:	4618      	movlt	r0, r3
 80122da:	e734      	b.n	8012146 <_printf_float+0xbe>
 80122dc:	2301      	movs	r3, #1
 80122de:	464a      	mov	r2, r9
 80122e0:	4631      	mov	r1, r6
 80122e2:	4628      	mov	r0, r5
 80122e4:	47b8      	blx	r7
 80122e6:	3001      	adds	r0, #1
 80122e8:	f43f af2b 	beq.w	8012142 <_printf_float+0xba>
 80122ec:	f108 0801 	add.w	r8, r8, #1
 80122f0:	e7e6      	b.n	80122c0 <_printf_float+0x238>
 80122f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	dc2b      	bgt.n	8012350 <_printf_float+0x2c8>
 80122f8:	2301      	movs	r3, #1
 80122fa:	4a26      	ldr	r2, [pc, #152]	; (8012394 <_printf_float+0x30c>)
 80122fc:	4631      	mov	r1, r6
 80122fe:	4628      	mov	r0, r5
 8012300:	47b8      	blx	r7
 8012302:	3001      	adds	r0, #1
 8012304:	f43f af1d 	beq.w	8012142 <_printf_float+0xba>
 8012308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801230a:	b923      	cbnz	r3, 8012316 <_printf_float+0x28e>
 801230c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801230e:	b913      	cbnz	r3, 8012316 <_printf_float+0x28e>
 8012310:	6823      	ldr	r3, [r4, #0]
 8012312:	07d9      	lsls	r1, r3, #31
 8012314:	d5d8      	bpl.n	80122c8 <_printf_float+0x240>
 8012316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801231a:	4631      	mov	r1, r6
 801231c:	4628      	mov	r0, r5
 801231e:	47b8      	blx	r7
 8012320:	3001      	adds	r0, #1
 8012322:	f43f af0e 	beq.w	8012142 <_printf_float+0xba>
 8012326:	f04f 0900 	mov.w	r9, #0
 801232a:	f104 0a1a 	add.w	sl, r4, #26
 801232e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012330:	425b      	negs	r3, r3
 8012332:	454b      	cmp	r3, r9
 8012334:	dc01      	bgt.n	801233a <_printf_float+0x2b2>
 8012336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012338:	e794      	b.n	8012264 <_printf_float+0x1dc>
 801233a:	2301      	movs	r3, #1
 801233c:	4652      	mov	r2, sl
 801233e:	4631      	mov	r1, r6
 8012340:	4628      	mov	r0, r5
 8012342:	47b8      	blx	r7
 8012344:	3001      	adds	r0, #1
 8012346:	f43f aefc 	beq.w	8012142 <_printf_float+0xba>
 801234a:	f109 0901 	add.w	r9, r9, #1
 801234e:	e7ee      	b.n	801232e <_printf_float+0x2a6>
 8012350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012354:	429a      	cmp	r2, r3
 8012356:	bfa8      	it	ge
 8012358:	461a      	movge	r2, r3
 801235a:	2a00      	cmp	r2, #0
 801235c:	4691      	mov	r9, r2
 801235e:	dd07      	ble.n	8012370 <_printf_float+0x2e8>
 8012360:	4613      	mov	r3, r2
 8012362:	4631      	mov	r1, r6
 8012364:	4642      	mov	r2, r8
 8012366:	4628      	mov	r0, r5
 8012368:	47b8      	blx	r7
 801236a:	3001      	adds	r0, #1
 801236c:	f43f aee9 	beq.w	8012142 <_printf_float+0xba>
 8012370:	f104 031a 	add.w	r3, r4, #26
 8012374:	f04f 0b00 	mov.w	fp, #0
 8012378:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801237c:	9306      	str	r3, [sp, #24]
 801237e:	e015      	b.n	80123ac <_printf_float+0x324>
 8012380:	7fefffff 	.word	0x7fefffff
 8012384:	08017895 	.word	0x08017895
 8012388:	08017891 	.word	0x08017891
 801238c:	0801789d 	.word	0x0801789d
 8012390:	08017899 	.word	0x08017899
 8012394:	080178a1 	.word	0x080178a1
 8012398:	2301      	movs	r3, #1
 801239a:	9a06      	ldr	r2, [sp, #24]
 801239c:	4631      	mov	r1, r6
 801239e:	4628      	mov	r0, r5
 80123a0:	47b8      	blx	r7
 80123a2:	3001      	adds	r0, #1
 80123a4:	f43f aecd 	beq.w	8012142 <_printf_float+0xba>
 80123a8:	f10b 0b01 	add.w	fp, fp, #1
 80123ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80123b0:	ebaa 0309 	sub.w	r3, sl, r9
 80123b4:	455b      	cmp	r3, fp
 80123b6:	dcef      	bgt.n	8012398 <_printf_float+0x310>
 80123b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123bc:	429a      	cmp	r2, r3
 80123be:	44d0      	add	r8, sl
 80123c0:	db15      	blt.n	80123ee <_printf_float+0x366>
 80123c2:	6823      	ldr	r3, [r4, #0]
 80123c4:	07da      	lsls	r2, r3, #31
 80123c6:	d412      	bmi.n	80123ee <_printf_float+0x366>
 80123c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123cc:	eba3 020a 	sub.w	r2, r3, sl
 80123d0:	eba3 0a01 	sub.w	sl, r3, r1
 80123d4:	4592      	cmp	sl, r2
 80123d6:	bfa8      	it	ge
 80123d8:	4692      	movge	sl, r2
 80123da:	f1ba 0f00 	cmp.w	sl, #0
 80123de:	dc0e      	bgt.n	80123fe <_printf_float+0x376>
 80123e0:	f04f 0800 	mov.w	r8, #0
 80123e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123e8:	f104 091a 	add.w	r9, r4, #26
 80123ec:	e019      	b.n	8012422 <_printf_float+0x39a>
 80123ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123f2:	4631      	mov	r1, r6
 80123f4:	4628      	mov	r0, r5
 80123f6:	47b8      	blx	r7
 80123f8:	3001      	adds	r0, #1
 80123fa:	d1e5      	bne.n	80123c8 <_printf_float+0x340>
 80123fc:	e6a1      	b.n	8012142 <_printf_float+0xba>
 80123fe:	4653      	mov	r3, sl
 8012400:	4642      	mov	r2, r8
 8012402:	4631      	mov	r1, r6
 8012404:	4628      	mov	r0, r5
 8012406:	47b8      	blx	r7
 8012408:	3001      	adds	r0, #1
 801240a:	d1e9      	bne.n	80123e0 <_printf_float+0x358>
 801240c:	e699      	b.n	8012142 <_printf_float+0xba>
 801240e:	2301      	movs	r3, #1
 8012410:	464a      	mov	r2, r9
 8012412:	4631      	mov	r1, r6
 8012414:	4628      	mov	r0, r5
 8012416:	47b8      	blx	r7
 8012418:	3001      	adds	r0, #1
 801241a:	f43f ae92 	beq.w	8012142 <_printf_float+0xba>
 801241e:	f108 0801 	add.w	r8, r8, #1
 8012422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012426:	1a9b      	subs	r3, r3, r2
 8012428:	eba3 030a 	sub.w	r3, r3, sl
 801242c:	4543      	cmp	r3, r8
 801242e:	dcee      	bgt.n	801240e <_printf_float+0x386>
 8012430:	e74a      	b.n	80122c8 <_printf_float+0x240>
 8012432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012434:	2a01      	cmp	r2, #1
 8012436:	dc01      	bgt.n	801243c <_printf_float+0x3b4>
 8012438:	07db      	lsls	r3, r3, #31
 801243a:	d53a      	bpl.n	80124b2 <_printf_float+0x42a>
 801243c:	2301      	movs	r3, #1
 801243e:	4642      	mov	r2, r8
 8012440:	4631      	mov	r1, r6
 8012442:	4628      	mov	r0, r5
 8012444:	47b8      	blx	r7
 8012446:	3001      	adds	r0, #1
 8012448:	f43f ae7b 	beq.w	8012142 <_printf_float+0xba>
 801244c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012450:	4631      	mov	r1, r6
 8012452:	4628      	mov	r0, r5
 8012454:	47b8      	blx	r7
 8012456:	3001      	adds	r0, #1
 8012458:	f108 0801 	add.w	r8, r8, #1
 801245c:	f43f ae71 	beq.w	8012142 <_printf_float+0xba>
 8012460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012462:	2200      	movs	r2, #0
 8012464:	f103 3aff 	add.w	sl, r3, #4294967295
 8012468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801246c:	2300      	movs	r3, #0
 801246e:	f7ee fb4b 	bl	8000b08 <__aeabi_dcmpeq>
 8012472:	b9c8      	cbnz	r0, 80124a8 <_printf_float+0x420>
 8012474:	4653      	mov	r3, sl
 8012476:	4642      	mov	r2, r8
 8012478:	4631      	mov	r1, r6
 801247a:	4628      	mov	r0, r5
 801247c:	47b8      	blx	r7
 801247e:	3001      	adds	r0, #1
 8012480:	d10e      	bne.n	80124a0 <_printf_float+0x418>
 8012482:	e65e      	b.n	8012142 <_printf_float+0xba>
 8012484:	2301      	movs	r3, #1
 8012486:	4652      	mov	r2, sl
 8012488:	4631      	mov	r1, r6
 801248a:	4628      	mov	r0, r5
 801248c:	47b8      	blx	r7
 801248e:	3001      	adds	r0, #1
 8012490:	f43f ae57 	beq.w	8012142 <_printf_float+0xba>
 8012494:	f108 0801 	add.w	r8, r8, #1
 8012498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801249a:	3b01      	subs	r3, #1
 801249c:	4543      	cmp	r3, r8
 801249e:	dcf1      	bgt.n	8012484 <_printf_float+0x3fc>
 80124a0:	464b      	mov	r3, r9
 80124a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80124a6:	e6de      	b.n	8012266 <_printf_float+0x1de>
 80124a8:	f04f 0800 	mov.w	r8, #0
 80124ac:	f104 0a1a 	add.w	sl, r4, #26
 80124b0:	e7f2      	b.n	8012498 <_printf_float+0x410>
 80124b2:	2301      	movs	r3, #1
 80124b4:	e7df      	b.n	8012476 <_printf_float+0x3ee>
 80124b6:	2301      	movs	r3, #1
 80124b8:	464a      	mov	r2, r9
 80124ba:	4631      	mov	r1, r6
 80124bc:	4628      	mov	r0, r5
 80124be:	47b8      	blx	r7
 80124c0:	3001      	adds	r0, #1
 80124c2:	f43f ae3e 	beq.w	8012142 <_printf_float+0xba>
 80124c6:	f108 0801 	add.w	r8, r8, #1
 80124ca:	68e3      	ldr	r3, [r4, #12]
 80124cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124ce:	1a9b      	subs	r3, r3, r2
 80124d0:	4543      	cmp	r3, r8
 80124d2:	dcf0      	bgt.n	80124b6 <_printf_float+0x42e>
 80124d4:	e6fc      	b.n	80122d0 <_printf_float+0x248>
 80124d6:	f04f 0800 	mov.w	r8, #0
 80124da:	f104 0919 	add.w	r9, r4, #25
 80124de:	e7f4      	b.n	80124ca <_printf_float+0x442>
 80124e0:	2900      	cmp	r1, #0
 80124e2:	f43f ae8b 	beq.w	80121fc <_printf_float+0x174>
 80124e6:	2300      	movs	r3, #0
 80124e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80124ec:	ab09      	add	r3, sp, #36	; 0x24
 80124ee:	9300      	str	r3, [sp, #0]
 80124f0:	ec49 8b10 	vmov	d0, r8, r9
 80124f4:	6022      	str	r2, [r4, #0]
 80124f6:	f8cd a004 	str.w	sl, [sp, #4]
 80124fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124fe:	4628      	mov	r0, r5
 8012500:	f7ff fd2e 	bl	8011f60 <__cvt>
 8012504:	4680      	mov	r8, r0
 8012506:	e648      	b.n	801219a <_printf_float+0x112>

08012508 <_printf_common>:
 8012508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801250c:	4691      	mov	r9, r2
 801250e:	461f      	mov	r7, r3
 8012510:	688a      	ldr	r2, [r1, #8]
 8012512:	690b      	ldr	r3, [r1, #16]
 8012514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012518:	4293      	cmp	r3, r2
 801251a:	bfb8      	it	lt
 801251c:	4613      	movlt	r3, r2
 801251e:	f8c9 3000 	str.w	r3, [r9]
 8012522:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012526:	4606      	mov	r6, r0
 8012528:	460c      	mov	r4, r1
 801252a:	b112      	cbz	r2, 8012532 <_printf_common+0x2a>
 801252c:	3301      	adds	r3, #1
 801252e:	f8c9 3000 	str.w	r3, [r9]
 8012532:	6823      	ldr	r3, [r4, #0]
 8012534:	0699      	lsls	r1, r3, #26
 8012536:	bf42      	ittt	mi
 8012538:	f8d9 3000 	ldrmi.w	r3, [r9]
 801253c:	3302      	addmi	r3, #2
 801253e:	f8c9 3000 	strmi.w	r3, [r9]
 8012542:	6825      	ldr	r5, [r4, #0]
 8012544:	f015 0506 	ands.w	r5, r5, #6
 8012548:	d107      	bne.n	801255a <_printf_common+0x52>
 801254a:	f104 0a19 	add.w	sl, r4, #25
 801254e:	68e3      	ldr	r3, [r4, #12]
 8012550:	f8d9 2000 	ldr.w	r2, [r9]
 8012554:	1a9b      	subs	r3, r3, r2
 8012556:	42ab      	cmp	r3, r5
 8012558:	dc28      	bgt.n	80125ac <_printf_common+0xa4>
 801255a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801255e:	6822      	ldr	r2, [r4, #0]
 8012560:	3300      	adds	r3, #0
 8012562:	bf18      	it	ne
 8012564:	2301      	movne	r3, #1
 8012566:	0692      	lsls	r2, r2, #26
 8012568:	d42d      	bmi.n	80125c6 <_printf_common+0xbe>
 801256a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801256e:	4639      	mov	r1, r7
 8012570:	4630      	mov	r0, r6
 8012572:	47c0      	blx	r8
 8012574:	3001      	adds	r0, #1
 8012576:	d020      	beq.n	80125ba <_printf_common+0xb2>
 8012578:	6823      	ldr	r3, [r4, #0]
 801257a:	68e5      	ldr	r5, [r4, #12]
 801257c:	f8d9 2000 	ldr.w	r2, [r9]
 8012580:	f003 0306 	and.w	r3, r3, #6
 8012584:	2b04      	cmp	r3, #4
 8012586:	bf08      	it	eq
 8012588:	1aad      	subeq	r5, r5, r2
 801258a:	68a3      	ldr	r3, [r4, #8]
 801258c:	6922      	ldr	r2, [r4, #16]
 801258e:	bf0c      	ite	eq
 8012590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012594:	2500      	movne	r5, #0
 8012596:	4293      	cmp	r3, r2
 8012598:	bfc4      	itt	gt
 801259a:	1a9b      	subgt	r3, r3, r2
 801259c:	18ed      	addgt	r5, r5, r3
 801259e:	f04f 0900 	mov.w	r9, #0
 80125a2:	341a      	adds	r4, #26
 80125a4:	454d      	cmp	r5, r9
 80125a6:	d11a      	bne.n	80125de <_printf_common+0xd6>
 80125a8:	2000      	movs	r0, #0
 80125aa:	e008      	b.n	80125be <_printf_common+0xb6>
 80125ac:	2301      	movs	r3, #1
 80125ae:	4652      	mov	r2, sl
 80125b0:	4639      	mov	r1, r7
 80125b2:	4630      	mov	r0, r6
 80125b4:	47c0      	blx	r8
 80125b6:	3001      	adds	r0, #1
 80125b8:	d103      	bne.n	80125c2 <_printf_common+0xba>
 80125ba:	f04f 30ff 	mov.w	r0, #4294967295
 80125be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c2:	3501      	adds	r5, #1
 80125c4:	e7c3      	b.n	801254e <_printf_common+0x46>
 80125c6:	18e1      	adds	r1, r4, r3
 80125c8:	1c5a      	adds	r2, r3, #1
 80125ca:	2030      	movs	r0, #48	; 0x30
 80125cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80125d0:	4422      	add	r2, r4
 80125d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125da:	3302      	adds	r3, #2
 80125dc:	e7c5      	b.n	801256a <_printf_common+0x62>
 80125de:	2301      	movs	r3, #1
 80125e0:	4622      	mov	r2, r4
 80125e2:	4639      	mov	r1, r7
 80125e4:	4630      	mov	r0, r6
 80125e6:	47c0      	blx	r8
 80125e8:	3001      	adds	r0, #1
 80125ea:	d0e6      	beq.n	80125ba <_printf_common+0xb2>
 80125ec:	f109 0901 	add.w	r9, r9, #1
 80125f0:	e7d8      	b.n	80125a4 <_printf_common+0x9c>
	...

080125f4 <_printf_i>:
 80125f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80125fc:	460c      	mov	r4, r1
 80125fe:	7e09      	ldrb	r1, [r1, #24]
 8012600:	b085      	sub	sp, #20
 8012602:	296e      	cmp	r1, #110	; 0x6e
 8012604:	4617      	mov	r7, r2
 8012606:	4606      	mov	r6, r0
 8012608:	4698      	mov	r8, r3
 801260a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801260c:	f000 80b3 	beq.w	8012776 <_printf_i+0x182>
 8012610:	d822      	bhi.n	8012658 <_printf_i+0x64>
 8012612:	2963      	cmp	r1, #99	; 0x63
 8012614:	d036      	beq.n	8012684 <_printf_i+0x90>
 8012616:	d80a      	bhi.n	801262e <_printf_i+0x3a>
 8012618:	2900      	cmp	r1, #0
 801261a:	f000 80b9 	beq.w	8012790 <_printf_i+0x19c>
 801261e:	2958      	cmp	r1, #88	; 0x58
 8012620:	f000 8083 	beq.w	801272a <_printf_i+0x136>
 8012624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012628:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801262c:	e032      	b.n	8012694 <_printf_i+0xa0>
 801262e:	2964      	cmp	r1, #100	; 0x64
 8012630:	d001      	beq.n	8012636 <_printf_i+0x42>
 8012632:	2969      	cmp	r1, #105	; 0x69
 8012634:	d1f6      	bne.n	8012624 <_printf_i+0x30>
 8012636:	6820      	ldr	r0, [r4, #0]
 8012638:	6813      	ldr	r3, [r2, #0]
 801263a:	0605      	lsls	r5, r0, #24
 801263c:	f103 0104 	add.w	r1, r3, #4
 8012640:	d52a      	bpl.n	8012698 <_printf_i+0xa4>
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	6011      	str	r1, [r2, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	da03      	bge.n	8012652 <_printf_i+0x5e>
 801264a:	222d      	movs	r2, #45	; 0x2d
 801264c:	425b      	negs	r3, r3
 801264e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012652:	486f      	ldr	r0, [pc, #444]	; (8012810 <_printf_i+0x21c>)
 8012654:	220a      	movs	r2, #10
 8012656:	e039      	b.n	80126cc <_printf_i+0xd8>
 8012658:	2973      	cmp	r1, #115	; 0x73
 801265a:	f000 809d 	beq.w	8012798 <_printf_i+0x1a4>
 801265e:	d808      	bhi.n	8012672 <_printf_i+0x7e>
 8012660:	296f      	cmp	r1, #111	; 0x6f
 8012662:	d020      	beq.n	80126a6 <_printf_i+0xb2>
 8012664:	2970      	cmp	r1, #112	; 0x70
 8012666:	d1dd      	bne.n	8012624 <_printf_i+0x30>
 8012668:	6823      	ldr	r3, [r4, #0]
 801266a:	f043 0320 	orr.w	r3, r3, #32
 801266e:	6023      	str	r3, [r4, #0]
 8012670:	e003      	b.n	801267a <_printf_i+0x86>
 8012672:	2975      	cmp	r1, #117	; 0x75
 8012674:	d017      	beq.n	80126a6 <_printf_i+0xb2>
 8012676:	2978      	cmp	r1, #120	; 0x78
 8012678:	d1d4      	bne.n	8012624 <_printf_i+0x30>
 801267a:	2378      	movs	r3, #120	; 0x78
 801267c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012680:	4864      	ldr	r0, [pc, #400]	; (8012814 <_printf_i+0x220>)
 8012682:	e055      	b.n	8012730 <_printf_i+0x13c>
 8012684:	6813      	ldr	r3, [r2, #0]
 8012686:	1d19      	adds	r1, r3, #4
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6011      	str	r1, [r2, #0]
 801268c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012694:	2301      	movs	r3, #1
 8012696:	e08c      	b.n	80127b2 <_printf_i+0x1be>
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	6011      	str	r1, [r2, #0]
 801269c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80126a0:	bf18      	it	ne
 80126a2:	b21b      	sxthne	r3, r3
 80126a4:	e7cf      	b.n	8012646 <_printf_i+0x52>
 80126a6:	6813      	ldr	r3, [r2, #0]
 80126a8:	6825      	ldr	r5, [r4, #0]
 80126aa:	1d18      	adds	r0, r3, #4
 80126ac:	6010      	str	r0, [r2, #0]
 80126ae:	0628      	lsls	r0, r5, #24
 80126b0:	d501      	bpl.n	80126b6 <_printf_i+0xc2>
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	e002      	b.n	80126bc <_printf_i+0xc8>
 80126b6:	0668      	lsls	r0, r5, #25
 80126b8:	d5fb      	bpl.n	80126b2 <_printf_i+0xbe>
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	4854      	ldr	r0, [pc, #336]	; (8012810 <_printf_i+0x21c>)
 80126be:	296f      	cmp	r1, #111	; 0x6f
 80126c0:	bf14      	ite	ne
 80126c2:	220a      	movne	r2, #10
 80126c4:	2208      	moveq	r2, #8
 80126c6:	2100      	movs	r1, #0
 80126c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126cc:	6865      	ldr	r5, [r4, #4]
 80126ce:	60a5      	str	r5, [r4, #8]
 80126d0:	2d00      	cmp	r5, #0
 80126d2:	f2c0 8095 	blt.w	8012800 <_printf_i+0x20c>
 80126d6:	6821      	ldr	r1, [r4, #0]
 80126d8:	f021 0104 	bic.w	r1, r1, #4
 80126dc:	6021      	str	r1, [r4, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d13d      	bne.n	801275e <_printf_i+0x16a>
 80126e2:	2d00      	cmp	r5, #0
 80126e4:	f040 808e 	bne.w	8012804 <_printf_i+0x210>
 80126e8:	4665      	mov	r5, ip
 80126ea:	2a08      	cmp	r2, #8
 80126ec:	d10b      	bne.n	8012706 <_printf_i+0x112>
 80126ee:	6823      	ldr	r3, [r4, #0]
 80126f0:	07db      	lsls	r3, r3, #31
 80126f2:	d508      	bpl.n	8012706 <_printf_i+0x112>
 80126f4:	6923      	ldr	r3, [r4, #16]
 80126f6:	6862      	ldr	r2, [r4, #4]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	bfde      	ittt	le
 80126fc:	2330      	movle	r3, #48	; 0x30
 80126fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012702:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012706:	ebac 0305 	sub.w	r3, ip, r5
 801270a:	6123      	str	r3, [r4, #16]
 801270c:	f8cd 8000 	str.w	r8, [sp]
 8012710:	463b      	mov	r3, r7
 8012712:	aa03      	add	r2, sp, #12
 8012714:	4621      	mov	r1, r4
 8012716:	4630      	mov	r0, r6
 8012718:	f7ff fef6 	bl	8012508 <_printf_common>
 801271c:	3001      	adds	r0, #1
 801271e:	d14d      	bne.n	80127bc <_printf_i+0x1c8>
 8012720:	f04f 30ff 	mov.w	r0, #4294967295
 8012724:	b005      	add	sp, #20
 8012726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801272a:	4839      	ldr	r0, [pc, #228]	; (8012810 <_printf_i+0x21c>)
 801272c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012730:	6813      	ldr	r3, [r2, #0]
 8012732:	6821      	ldr	r1, [r4, #0]
 8012734:	1d1d      	adds	r5, r3, #4
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	6015      	str	r5, [r2, #0]
 801273a:	060a      	lsls	r2, r1, #24
 801273c:	d50b      	bpl.n	8012756 <_printf_i+0x162>
 801273e:	07ca      	lsls	r2, r1, #31
 8012740:	bf44      	itt	mi
 8012742:	f041 0120 	orrmi.w	r1, r1, #32
 8012746:	6021      	strmi	r1, [r4, #0]
 8012748:	b91b      	cbnz	r3, 8012752 <_printf_i+0x15e>
 801274a:	6822      	ldr	r2, [r4, #0]
 801274c:	f022 0220 	bic.w	r2, r2, #32
 8012750:	6022      	str	r2, [r4, #0]
 8012752:	2210      	movs	r2, #16
 8012754:	e7b7      	b.n	80126c6 <_printf_i+0xd2>
 8012756:	064d      	lsls	r5, r1, #25
 8012758:	bf48      	it	mi
 801275a:	b29b      	uxthmi	r3, r3
 801275c:	e7ef      	b.n	801273e <_printf_i+0x14a>
 801275e:	4665      	mov	r5, ip
 8012760:	fbb3 f1f2 	udiv	r1, r3, r2
 8012764:	fb02 3311 	mls	r3, r2, r1, r3
 8012768:	5cc3      	ldrb	r3, [r0, r3]
 801276a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801276e:	460b      	mov	r3, r1
 8012770:	2900      	cmp	r1, #0
 8012772:	d1f5      	bne.n	8012760 <_printf_i+0x16c>
 8012774:	e7b9      	b.n	80126ea <_printf_i+0xf6>
 8012776:	6813      	ldr	r3, [r2, #0]
 8012778:	6825      	ldr	r5, [r4, #0]
 801277a:	6961      	ldr	r1, [r4, #20]
 801277c:	1d18      	adds	r0, r3, #4
 801277e:	6010      	str	r0, [r2, #0]
 8012780:	0628      	lsls	r0, r5, #24
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	d501      	bpl.n	801278a <_printf_i+0x196>
 8012786:	6019      	str	r1, [r3, #0]
 8012788:	e002      	b.n	8012790 <_printf_i+0x19c>
 801278a:	066a      	lsls	r2, r5, #25
 801278c:	d5fb      	bpl.n	8012786 <_printf_i+0x192>
 801278e:	8019      	strh	r1, [r3, #0]
 8012790:	2300      	movs	r3, #0
 8012792:	6123      	str	r3, [r4, #16]
 8012794:	4665      	mov	r5, ip
 8012796:	e7b9      	b.n	801270c <_printf_i+0x118>
 8012798:	6813      	ldr	r3, [r2, #0]
 801279a:	1d19      	adds	r1, r3, #4
 801279c:	6011      	str	r1, [r2, #0]
 801279e:	681d      	ldr	r5, [r3, #0]
 80127a0:	6862      	ldr	r2, [r4, #4]
 80127a2:	2100      	movs	r1, #0
 80127a4:	4628      	mov	r0, r5
 80127a6:	f7ed fd3b 	bl	8000220 <memchr>
 80127aa:	b108      	cbz	r0, 80127b0 <_printf_i+0x1bc>
 80127ac:	1b40      	subs	r0, r0, r5
 80127ae:	6060      	str	r0, [r4, #4]
 80127b0:	6863      	ldr	r3, [r4, #4]
 80127b2:	6123      	str	r3, [r4, #16]
 80127b4:	2300      	movs	r3, #0
 80127b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127ba:	e7a7      	b.n	801270c <_printf_i+0x118>
 80127bc:	6923      	ldr	r3, [r4, #16]
 80127be:	462a      	mov	r2, r5
 80127c0:	4639      	mov	r1, r7
 80127c2:	4630      	mov	r0, r6
 80127c4:	47c0      	blx	r8
 80127c6:	3001      	adds	r0, #1
 80127c8:	d0aa      	beq.n	8012720 <_printf_i+0x12c>
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	079b      	lsls	r3, r3, #30
 80127ce:	d413      	bmi.n	80127f8 <_printf_i+0x204>
 80127d0:	68e0      	ldr	r0, [r4, #12]
 80127d2:	9b03      	ldr	r3, [sp, #12]
 80127d4:	4298      	cmp	r0, r3
 80127d6:	bfb8      	it	lt
 80127d8:	4618      	movlt	r0, r3
 80127da:	e7a3      	b.n	8012724 <_printf_i+0x130>
 80127dc:	2301      	movs	r3, #1
 80127de:	464a      	mov	r2, r9
 80127e0:	4639      	mov	r1, r7
 80127e2:	4630      	mov	r0, r6
 80127e4:	47c0      	blx	r8
 80127e6:	3001      	adds	r0, #1
 80127e8:	d09a      	beq.n	8012720 <_printf_i+0x12c>
 80127ea:	3501      	adds	r5, #1
 80127ec:	68e3      	ldr	r3, [r4, #12]
 80127ee:	9a03      	ldr	r2, [sp, #12]
 80127f0:	1a9b      	subs	r3, r3, r2
 80127f2:	42ab      	cmp	r3, r5
 80127f4:	dcf2      	bgt.n	80127dc <_printf_i+0x1e8>
 80127f6:	e7eb      	b.n	80127d0 <_printf_i+0x1dc>
 80127f8:	2500      	movs	r5, #0
 80127fa:	f104 0919 	add.w	r9, r4, #25
 80127fe:	e7f5      	b.n	80127ec <_printf_i+0x1f8>
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1ac      	bne.n	801275e <_printf_i+0x16a>
 8012804:	7803      	ldrb	r3, [r0, #0]
 8012806:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801280a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801280e:	e76c      	b.n	80126ea <_printf_i+0xf6>
 8012810:	080178a3 	.word	0x080178a3
 8012814:	080178b4 	.word	0x080178b4

08012818 <copysign>:
 8012818:	ec51 0b10 	vmov	r0, r1, d0
 801281c:	ee11 0a90 	vmov	r0, s3
 8012820:	ee10 2a10 	vmov	r2, s0
 8012824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012828:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801282c:	ea41 0300 	orr.w	r3, r1, r0
 8012830:	ec43 2b10 	vmov	d0, r2, r3
 8012834:	4770      	bx	lr
	...

08012838 <_sbrk_r>:
 8012838:	b538      	push	{r3, r4, r5, lr}
 801283a:	4c06      	ldr	r4, [pc, #24]	; (8012854 <_sbrk_r+0x1c>)
 801283c:	2300      	movs	r3, #0
 801283e:	4605      	mov	r5, r0
 8012840:	4608      	mov	r0, r1
 8012842:	6023      	str	r3, [r4, #0]
 8012844:	f7f2 fe3c 	bl	80054c0 <_sbrk>
 8012848:	1c43      	adds	r3, r0, #1
 801284a:	d102      	bne.n	8012852 <_sbrk_r+0x1a>
 801284c:	6823      	ldr	r3, [r4, #0]
 801284e:	b103      	cbz	r3, 8012852 <_sbrk_r+0x1a>
 8012850:	602b      	str	r3, [r5, #0]
 8012852:	bd38      	pop	{r3, r4, r5, pc}
 8012854:	200065ac 	.word	0x200065ac

08012858 <sniprintf>:
 8012858:	b40c      	push	{r2, r3}
 801285a:	b530      	push	{r4, r5, lr}
 801285c:	4b17      	ldr	r3, [pc, #92]	; (80128bc <sniprintf+0x64>)
 801285e:	1e0c      	subs	r4, r1, #0
 8012860:	b09d      	sub	sp, #116	; 0x74
 8012862:	681d      	ldr	r5, [r3, #0]
 8012864:	da08      	bge.n	8012878 <sniprintf+0x20>
 8012866:	238b      	movs	r3, #139	; 0x8b
 8012868:	602b      	str	r3, [r5, #0]
 801286a:	f04f 30ff 	mov.w	r0, #4294967295
 801286e:	b01d      	add	sp, #116	; 0x74
 8012870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012874:	b002      	add	sp, #8
 8012876:	4770      	bx	lr
 8012878:	f44f 7302 	mov.w	r3, #520	; 0x208
 801287c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012880:	bf14      	ite	ne
 8012882:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012886:	4623      	moveq	r3, r4
 8012888:	9304      	str	r3, [sp, #16]
 801288a:	9307      	str	r3, [sp, #28]
 801288c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012890:	9002      	str	r0, [sp, #8]
 8012892:	9006      	str	r0, [sp, #24]
 8012894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801289a:	ab21      	add	r3, sp, #132	; 0x84
 801289c:	a902      	add	r1, sp, #8
 801289e:	4628      	mov	r0, r5
 80128a0:	9301      	str	r3, [sp, #4]
 80128a2:	f001 fd23 	bl	80142ec <_svfiprintf_r>
 80128a6:	1c43      	adds	r3, r0, #1
 80128a8:	bfbc      	itt	lt
 80128aa:	238b      	movlt	r3, #139	; 0x8b
 80128ac:	602b      	strlt	r3, [r5, #0]
 80128ae:	2c00      	cmp	r4, #0
 80128b0:	d0dd      	beq.n	801286e <sniprintf+0x16>
 80128b2:	9b02      	ldr	r3, [sp, #8]
 80128b4:	2200      	movs	r2, #0
 80128b6:	701a      	strb	r2, [r3, #0]
 80128b8:	e7d9      	b.n	801286e <sniprintf+0x16>
 80128ba:	bf00      	nop
 80128bc:	20000430 	.word	0x20000430

080128c0 <siprintf>:
 80128c0:	b40e      	push	{r1, r2, r3}
 80128c2:	b500      	push	{lr}
 80128c4:	b09c      	sub	sp, #112	; 0x70
 80128c6:	ab1d      	add	r3, sp, #116	; 0x74
 80128c8:	9002      	str	r0, [sp, #8]
 80128ca:	9006      	str	r0, [sp, #24]
 80128cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128d0:	4809      	ldr	r0, [pc, #36]	; (80128f8 <siprintf+0x38>)
 80128d2:	9107      	str	r1, [sp, #28]
 80128d4:	9104      	str	r1, [sp, #16]
 80128d6:	4909      	ldr	r1, [pc, #36]	; (80128fc <siprintf+0x3c>)
 80128d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80128dc:	9105      	str	r1, [sp, #20]
 80128de:	6800      	ldr	r0, [r0, #0]
 80128e0:	9301      	str	r3, [sp, #4]
 80128e2:	a902      	add	r1, sp, #8
 80128e4:	f001 fd02 	bl	80142ec <_svfiprintf_r>
 80128e8:	9b02      	ldr	r3, [sp, #8]
 80128ea:	2200      	movs	r2, #0
 80128ec:	701a      	strb	r2, [r3, #0]
 80128ee:	b01c      	add	sp, #112	; 0x70
 80128f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80128f4:	b003      	add	sp, #12
 80128f6:	4770      	bx	lr
 80128f8:	20000430 	.word	0x20000430
 80128fc:	ffff0208 	.word	0xffff0208

08012900 <__sread>:
 8012900:	b510      	push	{r4, lr}
 8012902:	460c      	mov	r4, r1
 8012904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012908:	f001 fde8 	bl	80144dc <_read_r>
 801290c:	2800      	cmp	r0, #0
 801290e:	bfab      	itete	ge
 8012910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012912:	89a3      	ldrhlt	r3, [r4, #12]
 8012914:	181b      	addge	r3, r3, r0
 8012916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801291a:	bfac      	ite	ge
 801291c:	6563      	strge	r3, [r4, #84]	; 0x54
 801291e:	81a3      	strhlt	r3, [r4, #12]
 8012920:	bd10      	pop	{r4, pc}

08012922 <__swrite>:
 8012922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012926:	461f      	mov	r7, r3
 8012928:	898b      	ldrh	r3, [r1, #12]
 801292a:	05db      	lsls	r3, r3, #23
 801292c:	4605      	mov	r5, r0
 801292e:	460c      	mov	r4, r1
 8012930:	4616      	mov	r6, r2
 8012932:	d505      	bpl.n	8012940 <__swrite+0x1e>
 8012934:	2302      	movs	r3, #2
 8012936:	2200      	movs	r2, #0
 8012938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801293c:	f001 f8dc 	bl	8013af8 <_lseek_r>
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801294a:	81a3      	strh	r3, [r4, #12]
 801294c:	4632      	mov	r2, r6
 801294e:	463b      	mov	r3, r7
 8012950:	4628      	mov	r0, r5
 8012952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012956:	f000 b869 	b.w	8012a2c <_write_r>

0801295a <__sseek>:
 801295a:	b510      	push	{r4, lr}
 801295c:	460c      	mov	r4, r1
 801295e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012962:	f001 f8c9 	bl	8013af8 <_lseek_r>
 8012966:	1c43      	adds	r3, r0, #1
 8012968:	89a3      	ldrh	r3, [r4, #12]
 801296a:	bf15      	itete	ne
 801296c:	6560      	strne	r0, [r4, #84]	; 0x54
 801296e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012976:	81a3      	strheq	r3, [r4, #12]
 8012978:	bf18      	it	ne
 801297a:	81a3      	strhne	r3, [r4, #12]
 801297c:	bd10      	pop	{r4, pc}

0801297e <__sclose>:
 801297e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012982:	f000 b8db 	b.w	8012b3c <_close_r>
	...

08012988 <__swbuf_r>:
 8012988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801298a:	460e      	mov	r6, r1
 801298c:	4614      	mov	r4, r2
 801298e:	4605      	mov	r5, r0
 8012990:	b118      	cbz	r0, 801299a <__swbuf_r+0x12>
 8012992:	6983      	ldr	r3, [r0, #24]
 8012994:	b90b      	cbnz	r3, 801299a <__swbuf_r+0x12>
 8012996:	f001 f817 	bl	80139c8 <__sinit>
 801299a:	4b21      	ldr	r3, [pc, #132]	; (8012a20 <__swbuf_r+0x98>)
 801299c:	429c      	cmp	r4, r3
 801299e:	d12a      	bne.n	80129f6 <__swbuf_r+0x6e>
 80129a0:	686c      	ldr	r4, [r5, #4]
 80129a2:	69a3      	ldr	r3, [r4, #24]
 80129a4:	60a3      	str	r3, [r4, #8]
 80129a6:	89a3      	ldrh	r3, [r4, #12]
 80129a8:	071a      	lsls	r2, r3, #28
 80129aa:	d52e      	bpl.n	8012a0a <__swbuf_r+0x82>
 80129ac:	6923      	ldr	r3, [r4, #16]
 80129ae:	b363      	cbz	r3, 8012a0a <__swbuf_r+0x82>
 80129b0:	6923      	ldr	r3, [r4, #16]
 80129b2:	6820      	ldr	r0, [r4, #0]
 80129b4:	1ac0      	subs	r0, r0, r3
 80129b6:	6963      	ldr	r3, [r4, #20]
 80129b8:	b2f6      	uxtb	r6, r6
 80129ba:	4283      	cmp	r3, r0
 80129bc:	4637      	mov	r7, r6
 80129be:	dc04      	bgt.n	80129ca <__swbuf_r+0x42>
 80129c0:	4621      	mov	r1, r4
 80129c2:	4628      	mov	r0, r5
 80129c4:	f000 ff96 	bl	80138f4 <_fflush_r>
 80129c8:	bb28      	cbnz	r0, 8012a16 <__swbuf_r+0x8e>
 80129ca:	68a3      	ldr	r3, [r4, #8]
 80129cc:	3b01      	subs	r3, #1
 80129ce:	60a3      	str	r3, [r4, #8]
 80129d0:	6823      	ldr	r3, [r4, #0]
 80129d2:	1c5a      	adds	r2, r3, #1
 80129d4:	6022      	str	r2, [r4, #0]
 80129d6:	701e      	strb	r6, [r3, #0]
 80129d8:	6963      	ldr	r3, [r4, #20]
 80129da:	3001      	adds	r0, #1
 80129dc:	4283      	cmp	r3, r0
 80129de:	d004      	beq.n	80129ea <__swbuf_r+0x62>
 80129e0:	89a3      	ldrh	r3, [r4, #12]
 80129e2:	07db      	lsls	r3, r3, #31
 80129e4:	d519      	bpl.n	8012a1a <__swbuf_r+0x92>
 80129e6:	2e0a      	cmp	r6, #10
 80129e8:	d117      	bne.n	8012a1a <__swbuf_r+0x92>
 80129ea:	4621      	mov	r1, r4
 80129ec:	4628      	mov	r0, r5
 80129ee:	f000 ff81 	bl	80138f4 <_fflush_r>
 80129f2:	b190      	cbz	r0, 8012a1a <__swbuf_r+0x92>
 80129f4:	e00f      	b.n	8012a16 <__swbuf_r+0x8e>
 80129f6:	4b0b      	ldr	r3, [pc, #44]	; (8012a24 <__swbuf_r+0x9c>)
 80129f8:	429c      	cmp	r4, r3
 80129fa:	d101      	bne.n	8012a00 <__swbuf_r+0x78>
 80129fc:	68ac      	ldr	r4, [r5, #8]
 80129fe:	e7d0      	b.n	80129a2 <__swbuf_r+0x1a>
 8012a00:	4b09      	ldr	r3, [pc, #36]	; (8012a28 <__swbuf_r+0xa0>)
 8012a02:	429c      	cmp	r4, r3
 8012a04:	bf08      	it	eq
 8012a06:	68ec      	ldreq	r4, [r5, #12]
 8012a08:	e7cb      	b.n	80129a2 <__swbuf_r+0x1a>
 8012a0a:	4621      	mov	r1, r4
 8012a0c:	4628      	mov	r0, r5
 8012a0e:	f000 f81f 	bl	8012a50 <__swsetup_r>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	d0cc      	beq.n	80129b0 <__swbuf_r+0x28>
 8012a16:	f04f 37ff 	mov.w	r7, #4294967295
 8012a1a:	4638      	mov	r0, r7
 8012a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	080178f4 	.word	0x080178f4
 8012a24:	08017914 	.word	0x08017914
 8012a28:	080178d4 	.word	0x080178d4

08012a2c <_write_r>:
 8012a2c:	b538      	push	{r3, r4, r5, lr}
 8012a2e:	4c07      	ldr	r4, [pc, #28]	; (8012a4c <_write_r+0x20>)
 8012a30:	4605      	mov	r5, r0
 8012a32:	4608      	mov	r0, r1
 8012a34:	4611      	mov	r1, r2
 8012a36:	2200      	movs	r2, #0
 8012a38:	6022      	str	r2, [r4, #0]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	f7f2 fcef 	bl	800541e <_write>
 8012a40:	1c43      	adds	r3, r0, #1
 8012a42:	d102      	bne.n	8012a4a <_write_r+0x1e>
 8012a44:	6823      	ldr	r3, [r4, #0]
 8012a46:	b103      	cbz	r3, 8012a4a <_write_r+0x1e>
 8012a48:	602b      	str	r3, [r5, #0]
 8012a4a:	bd38      	pop	{r3, r4, r5, pc}
 8012a4c:	200065ac 	.word	0x200065ac

08012a50 <__swsetup_r>:
 8012a50:	4b32      	ldr	r3, [pc, #200]	; (8012b1c <__swsetup_r+0xcc>)
 8012a52:	b570      	push	{r4, r5, r6, lr}
 8012a54:	681d      	ldr	r5, [r3, #0]
 8012a56:	4606      	mov	r6, r0
 8012a58:	460c      	mov	r4, r1
 8012a5a:	b125      	cbz	r5, 8012a66 <__swsetup_r+0x16>
 8012a5c:	69ab      	ldr	r3, [r5, #24]
 8012a5e:	b913      	cbnz	r3, 8012a66 <__swsetup_r+0x16>
 8012a60:	4628      	mov	r0, r5
 8012a62:	f000 ffb1 	bl	80139c8 <__sinit>
 8012a66:	4b2e      	ldr	r3, [pc, #184]	; (8012b20 <__swsetup_r+0xd0>)
 8012a68:	429c      	cmp	r4, r3
 8012a6a:	d10f      	bne.n	8012a8c <__swsetup_r+0x3c>
 8012a6c:	686c      	ldr	r4, [r5, #4]
 8012a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	0715      	lsls	r5, r2, #28
 8012a76:	d42c      	bmi.n	8012ad2 <__swsetup_r+0x82>
 8012a78:	06d0      	lsls	r0, r2, #27
 8012a7a:	d411      	bmi.n	8012aa0 <__swsetup_r+0x50>
 8012a7c:	2209      	movs	r2, #9
 8012a7e:	6032      	str	r2, [r6, #0]
 8012a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a84:	81a3      	strh	r3, [r4, #12]
 8012a86:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8a:	e03e      	b.n	8012b0a <__swsetup_r+0xba>
 8012a8c:	4b25      	ldr	r3, [pc, #148]	; (8012b24 <__swsetup_r+0xd4>)
 8012a8e:	429c      	cmp	r4, r3
 8012a90:	d101      	bne.n	8012a96 <__swsetup_r+0x46>
 8012a92:	68ac      	ldr	r4, [r5, #8]
 8012a94:	e7eb      	b.n	8012a6e <__swsetup_r+0x1e>
 8012a96:	4b24      	ldr	r3, [pc, #144]	; (8012b28 <__swsetup_r+0xd8>)
 8012a98:	429c      	cmp	r4, r3
 8012a9a:	bf08      	it	eq
 8012a9c:	68ec      	ldreq	r4, [r5, #12]
 8012a9e:	e7e6      	b.n	8012a6e <__swsetup_r+0x1e>
 8012aa0:	0751      	lsls	r1, r2, #29
 8012aa2:	d512      	bpl.n	8012aca <__swsetup_r+0x7a>
 8012aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012aa6:	b141      	cbz	r1, 8012aba <__swsetup_r+0x6a>
 8012aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012aac:	4299      	cmp	r1, r3
 8012aae:	d002      	beq.n	8012ab6 <__swsetup_r+0x66>
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f7ff f86d 	bl	8011b90 <_free_r>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8012aba:	89a3      	ldrh	r3, [r4, #12]
 8012abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ac0:	81a3      	strh	r3, [r4, #12]
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	6063      	str	r3, [r4, #4]
 8012ac6:	6923      	ldr	r3, [r4, #16]
 8012ac8:	6023      	str	r3, [r4, #0]
 8012aca:	89a3      	ldrh	r3, [r4, #12]
 8012acc:	f043 0308 	orr.w	r3, r3, #8
 8012ad0:	81a3      	strh	r3, [r4, #12]
 8012ad2:	6923      	ldr	r3, [r4, #16]
 8012ad4:	b94b      	cbnz	r3, 8012aea <__swsetup_r+0x9a>
 8012ad6:	89a3      	ldrh	r3, [r4, #12]
 8012ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ae0:	d003      	beq.n	8012aea <__swsetup_r+0x9a>
 8012ae2:	4621      	mov	r1, r4
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	f001 f83d 	bl	8013b64 <__smakebuf_r>
 8012aea:	89a2      	ldrh	r2, [r4, #12]
 8012aec:	f012 0301 	ands.w	r3, r2, #1
 8012af0:	d00c      	beq.n	8012b0c <__swsetup_r+0xbc>
 8012af2:	2300      	movs	r3, #0
 8012af4:	60a3      	str	r3, [r4, #8]
 8012af6:	6963      	ldr	r3, [r4, #20]
 8012af8:	425b      	negs	r3, r3
 8012afa:	61a3      	str	r3, [r4, #24]
 8012afc:	6923      	ldr	r3, [r4, #16]
 8012afe:	b953      	cbnz	r3, 8012b16 <__swsetup_r+0xc6>
 8012b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012b08:	d1ba      	bne.n	8012a80 <__swsetup_r+0x30>
 8012b0a:	bd70      	pop	{r4, r5, r6, pc}
 8012b0c:	0792      	lsls	r2, r2, #30
 8012b0e:	bf58      	it	pl
 8012b10:	6963      	ldrpl	r3, [r4, #20]
 8012b12:	60a3      	str	r3, [r4, #8]
 8012b14:	e7f2      	b.n	8012afc <__swsetup_r+0xac>
 8012b16:	2000      	movs	r0, #0
 8012b18:	e7f7      	b.n	8012b0a <__swsetup_r+0xba>
 8012b1a:	bf00      	nop
 8012b1c:	20000430 	.word	0x20000430
 8012b20:	080178f4 	.word	0x080178f4
 8012b24:	08017914 	.word	0x08017914
 8012b28:	080178d4 	.word	0x080178d4

08012b2c <abort>:
 8012b2c:	b508      	push	{r3, lr}
 8012b2e:	2006      	movs	r0, #6
 8012b30:	f001 fd0e 	bl	8014550 <raise>
 8012b34:	2001      	movs	r0, #1
 8012b36:	f7f2 fc4b 	bl	80053d0 <_exit>
	...

08012b3c <_close_r>:
 8012b3c:	b538      	push	{r3, r4, r5, lr}
 8012b3e:	4c06      	ldr	r4, [pc, #24]	; (8012b58 <_close_r+0x1c>)
 8012b40:	2300      	movs	r3, #0
 8012b42:	4605      	mov	r5, r0
 8012b44:	4608      	mov	r0, r1
 8012b46:	6023      	str	r3, [r4, #0]
 8012b48:	f7f2 fc85 	bl	8005456 <_close>
 8012b4c:	1c43      	adds	r3, r0, #1
 8012b4e:	d102      	bne.n	8012b56 <_close_r+0x1a>
 8012b50:	6823      	ldr	r3, [r4, #0]
 8012b52:	b103      	cbz	r3, 8012b56 <_close_r+0x1a>
 8012b54:	602b      	str	r3, [r5, #0]
 8012b56:	bd38      	pop	{r3, r4, r5, pc}
 8012b58:	200065ac 	.word	0x200065ac

08012b5c <quorem>:
 8012b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b60:	6903      	ldr	r3, [r0, #16]
 8012b62:	690c      	ldr	r4, [r1, #16]
 8012b64:	42a3      	cmp	r3, r4
 8012b66:	4680      	mov	r8, r0
 8012b68:	f2c0 8082 	blt.w	8012c70 <quorem+0x114>
 8012b6c:	3c01      	subs	r4, #1
 8012b6e:	f101 0714 	add.w	r7, r1, #20
 8012b72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012b76:	f100 0614 	add.w	r6, r0, #20
 8012b7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012b7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012b82:	eb06 030c 	add.w	r3, r6, ip
 8012b86:	3501      	adds	r5, #1
 8012b88:	eb07 090c 	add.w	r9, r7, ip
 8012b8c:	9301      	str	r3, [sp, #4]
 8012b8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012b92:	b395      	cbz	r5, 8012bfa <quorem+0x9e>
 8012b94:	f04f 0a00 	mov.w	sl, #0
 8012b98:	4638      	mov	r0, r7
 8012b9a:	46b6      	mov	lr, r6
 8012b9c:	46d3      	mov	fp, sl
 8012b9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ba2:	b293      	uxth	r3, r2
 8012ba4:	fb05 a303 	mla	r3, r5, r3, sl
 8012ba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	ebab 0303 	sub.w	r3, fp, r3
 8012bb2:	0c12      	lsrs	r2, r2, #16
 8012bb4:	f8de b000 	ldr.w	fp, [lr]
 8012bb8:	fb05 a202 	mla	r2, r5, r2, sl
 8012bbc:	fa13 f38b 	uxtah	r3, r3, fp
 8012bc0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012bc4:	fa1f fb82 	uxth.w	fp, r2
 8012bc8:	f8de 2000 	ldr.w	r2, [lr]
 8012bcc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012bda:	4581      	cmp	r9, r0
 8012bdc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012be0:	f84e 3b04 	str.w	r3, [lr], #4
 8012be4:	d2db      	bcs.n	8012b9e <quorem+0x42>
 8012be6:	f856 300c 	ldr.w	r3, [r6, ip]
 8012bea:	b933      	cbnz	r3, 8012bfa <quorem+0x9e>
 8012bec:	9b01      	ldr	r3, [sp, #4]
 8012bee:	3b04      	subs	r3, #4
 8012bf0:	429e      	cmp	r6, r3
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	d330      	bcc.n	8012c58 <quorem+0xfc>
 8012bf6:	f8c8 4010 	str.w	r4, [r8, #16]
 8012bfa:	4640      	mov	r0, r8
 8012bfc:	f001 fa22 	bl	8014044 <__mcmp>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	db25      	blt.n	8012c50 <quorem+0xf4>
 8012c04:	3501      	adds	r5, #1
 8012c06:	4630      	mov	r0, r6
 8012c08:	f04f 0c00 	mov.w	ip, #0
 8012c0c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012c10:	f8d0 e000 	ldr.w	lr, [r0]
 8012c14:	b293      	uxth	r3, r2
 8012c16:	ebac 0303 	sub.w	r3, ip, r3
 8012c1a:	0c12      	lsrs	r2, r2, #16
 8012c1c:	fa13 f38e 	uxtah	r3, r3, lr
 8012c20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c2e:	45b9      	cmp	r9, r7
 8012c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012c34:	f840 3b04 	str.w	r3, [r0], #4
 8012c38:	d2e8      	bcs.n	8012c0c <quorem+0xb0>
 8012c3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012c3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012c42:	b92a      	cbnz	r2, 8012c50 <quorem+0xf4>
 8012c44:	3b04      	subs	r3, #4
 8012c46:	429e      	cmp	r6, r3
 8012c48:	461a      	mov	r2, r3
 8012c4a:	d30b      	bcc.n	8012c64 <quorem+0x108>
 8012c4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012c50:	4628      	mov	r0, r5
 8012c52:	b003      	add	sp, #12
 8012c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c58:	6812      	ldr	r2, [r2, #0]
 8012c5a:	3b04      	subs	r3, #4
 8012c5c:	2a00      	cmp	r2, #0
 8012c5e:	d1ca      	bne.n	8012bf6 <quorem+0x9a>
 8012c60:	3c01      	subs	r4, #1
 8012c62:	e7c5      	b.n	8012bf0 <quorem+0x94>
 8012c64:	6812      	ldr	r2, [r2, #0]
 8012c66:	3b04      	subs	r3, #4
 8012c68:	2a00      	cmp	r2, #0
 8012c6a:	d1ef      	bne.n	8012c4c <quorem+0xf0>
 8012c6c:	3c01      	subs	r4, #1
 8012c6e:	e7ea      	b.n	8012c46 <quorem+0xea>
 8012c70:	2000      	movs	r0, #0
 8012c72:	e7ee      	b.n	8012c52 <quorem+0xf6>
 8012c74:	0000      	movs	r0, r0
	...

08012c78 <_dtoa_r>:
 8012c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c7c:	ec57 6b10 	vmov	r6, r7, d0
 8012c80:	b097      	sub	sp, #92	; 0x5c
 8012c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012c84:	9106      	str	r1, [sp, #24]
 8012c86:	4604      	mov	r4, r0
 8012c88:	920b      	str	r2, [sp, #44]	; 0x2c
 8012c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8012c8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012c90:	e9cd 6700 	strd	r6, r7, [sp]
 8012c94:	b93d      	cbnz	r5, 8012ca6 <_dtoa_r+0x2e>
 8012c96:	2010      	movs	r0, #16
 8012c98:	f7fe ff56 	bl	8011b48 <malloc>
 8012c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8012c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012ca2:	6005      	str	r5, [r0, #0]
 8012ca4:	60c5      	str	r5, [r0, #12]
 8012ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ca8:	6819      	ldr	r1, [r3, #0]
 8012caa:	b151      	cbz	r1, 8012cc2 <_dtoa_r+0x4a>
 8012cac:	685a      	ldr	r2, [r3, #4]
 8012cae:	604a      	str	r2, [r1, #4]
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	4093      	lsls	r3, r2
 8012cb4:	608b      	str	r3, [r1, #8]
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f000 ffe3 	bl	8013c82 <_Bfree>
 8012cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	601a      	str	r2, [r3, #0]
 8012cc2:	1e3b      	subs	r3, r7, #0
 8012cc4:	bfbb      	ittet	lt
 8012cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012cca:	9301      	strlt	r3, [sp, #4]
 8012ccc:	2300      	movge	r3, #0
 8012cce:	2201      	movlt	r2, #1
 8012cd0:	bfac      	ite	ge
 8012cd2:	f8c8 3000 	strge.w	r3, [r8]
 8012cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8012cda:	4baf      	ldr	r3, [pc, #700]	; (8012f98 <_dtoa_r+0x320>)
 8012cdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012ce0:	ea33 0308 	bics.w	r3, r3, r8
 8012ce4:	d114      	bne.n	8012d10 <_dtoa_r+0x98>
 8012ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8012cec:	6013      	str	r3, [r2, #0]
 8012cee:	9b00      	ldr	r3, [sp, #0]
 8012cf0:	b923      	cbnz	r3, 8012cfc <_dtoa_r+0x84>
 8012cf2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f000 8542 	beq.w	8013780 <_dtoa_r+0xb08>
 8012cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012fac <_dtoa_r+0x334>
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 8544 	beq.w	8013790 <_dtoa_r+0xb18>
 8012d08:	f10b 0303 	add.w	r3, fp, #3
 8012d0c:	f000 bd3e 	b.w	801378c <_dtoa_r+0xb14>
 8012d10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012d14:	2200      	movs	r2, #0
 8012d16:	2300      	movs	r3, #0
 8012d18:	4630      	mov	r0, r6
 8012d1a:	4639      	mov	r1, r7
 8012d1c:	f7ed fef4 	bl	8000b08 <__aeabi_dcmpeq>
 8012d20:	4681      	mov	r9, r0
 8012d22:	b168      	cbz	r0, 8012d40 <_dtoa_r+0xc8>
 8012d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d26:	2301      	movs	r3, #1
 8012d28:	6013      	str	r3, [r2, #0]
 8012d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	f000 8524 	beq.w	801377a <_dtoa_r+0xb02>
 8012d32:	4b9a      	ldr	r3, [pc, #616]	; (8012f9c <_dtoa_r+0x324>)
 8012d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012d36:	f103 3bff 	add.w	fp, r3, #4294967295
 8012d3a:	6013      	str	r3, [r2, #0]
 8012d3c:	f000 bd28 	b.w	8013790 <_dtoa_r+0xb18>
 8012d40:	aa14      	add	r2, sp, #80	; 0x50
 8012d42:	a915      	add	r1, sp, #84	; 0x54
 8012d44:	ec47 6b10 	vmov	d0, r6, r7
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f001 f9f2 	bl	8014132 <__d2b>
 8012d4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012d52:	9004      	str	r0, [sp, #16]
 8012d54:	2d00      	cmp	r5, #0
 8012d56:	d07c      	beq.n	8012e52 <_dtoa_r+0x1da>
 8012d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012d60:	46b2      	mov	sl, r6
 8012d62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012d6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012d6e:	2200      	movs	r2, #0
 8012d70:	4b8b      	ldr	r3, [pc, #556]	; (8012fa0 <_dtoa_r+0x328>)
 8012d72:	4650      	mov	r0, sl
 8012d74:	4659      	mov	r1, fp
 8012d76:	f7ed faa7 	bl	80002c8 <__aeabi_dsub>
 8012d7a:	a381      	add	r3, pc, #516	; (adr r3, 8012f80 <_dtoa_r+0x308>)
 8012d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d80:	f7ed fc5a 	bl	8000638 <__aeabi_dmul>
 8012d84:	a380      	add	r3, pc, #512	; (adr r3, 8012f88 <_dtoa_r+0x310>)
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	f7ed fa9f 	bl	80002cc <__adddf3>
 8012d8e:	4606      	mov	r6, r0
 8012d90:	4628      	mov	r0, r5
 8012d92:	460f      	mov	r7, r1
 8012d94:	f7ed fbe6 	bl	8000564 <__aeabi_i2d>
 8012d98:	a37d      	add	r3, pc, #500	; (adr r3, 8012f90 <_dtoa_r+0x318>)
 8012d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9e:	f7ed fc4b 	bl	8000638 <__aeabi_dmul>
 8012da2:	4602      	mov	r2, r0
 8012da4:	460b      	mov	r3, r1
 8012da6:	4630      	mov	r0, r6
 8012da8:	4639      	mov	r1, r7
 8012daa:	f7ed fa8f 	bl	80002cc <__adddf3>
 8012dae:	4606      	mov	r6, r0
 8012db0:	460f      	mov	r7, r1
 8012db2:	f7ed fef1 	bl	8000b98 <__aeabi_d2iz>
 8012db6:	2200      	movs	r2, #0
 8012db8:	4682      	mov	sl, r0
 8012dba:	2300      	movs	r3, #0
 8012dbc:	4630      	mov	r0, r6
 8012dbe:	4639      	mov	r1, r7
 8012dc0:	f7ed feac 	bl	8000b1c <__aeabi_dcmplt>
 8012dc4:	b148      	cbz	r0, 8012dda <_dtoa_r+0x162>
 8012dc6:	4650      	mov	r0, sl
 8012dc8:	f7ed fbcc 	bl	8000564 <__aeabi_i2d>
 8012dcc:	4632      	mov	r2, r6
 8012dce:	463b      	mov	r3, r7
 8012dd0:	f7ed fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8012dd4:	b908      	cbnz	r0, 8012dda <_dtoa_r+0x162>
 8012dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012dda:	f1ba 0f16 	cmp.w	sl, #22
 8012dde:	d859      	bhi.n	8012e94 <_dtoa_r+0x21c>
 8012de0:	4970      	ldr	r1, [pc, #448]	; (8012fa4 <_dtoa_r+0x32c>)
 8012de2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dee:	f7ed feb3 	bl	8000b58 <__aeabi_dcmpgt>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	d050      	beq.n	8012e98 <_dtoa_r+0x220>
 8012df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e00:	1b5d      	subs	r5, r3, r5
 8012e02:	f1b5 0801 	subs.w	r8, r5, #1
 8012e06:	bf49      	itett	mi
 8012e08:	f1c5 0301 	rsbmi	r3, r5, #1
 8012e0c:	2300      	movpl	r3, #0
 8012e0e:	9305      	strmi	r3, [sp, #20]
 8012e10:	f04f 0800 	movmi.w	r8, #0
 8012e14:	bf58      	it	pl
 8012e16:	9305      	strpl	r3, [sp, #20]
 8012e18:	f1ba 0f00 	cmp.w	sl, #0
 8012e1c:	db3e      	blt.n	8012e9c <_dtoa_r+0x224>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	44d0      	add	r8, sl
 8012e22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012e26:	9307      	str	r3, [sp, #28]
 8012e28:	9b06      	ldr	r3, [sp, #24]
 8012e2a:	2b09      	cmp	r3, #9
 8012e2c:	f200 8090 	bhi.w	8012f50 <_dtoa_r+0x2d8>
 8012e30:	2b05      	cmp	r3, #5
 8012e32:	bfc4      	itt	gt
 8012e34:	3b04      	subgt	r3, #4
 8012e36:	9306      	strgt	r3, [sp, #24]
 8012e38:	9b06      	ldr	r3, [sp, #24]
 8012e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8012e3e:	bfcc      	ite	gt
 8012e40:	2500      	movgt	r5, #0
 8012e42:	2501      	movle	r5, #1
 8012e44:	2b03      	cmp	r3, #3
 8012e46:	f200 808f 	bhi.w	8012f68 <_dtoa_r+0x2f0>
 8012e4a:	e8df f003 	tbb	[pc, r3]
 8012e4e:	7f7d      	.short	0x7f7d
 8012e50:	7131      	.short	0x7131
 8012e52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012e56:	441d      	add	r5, r3
 8012e58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012e5c:	2820      	cmp	r0, #32
 8012e5e:	dd13      	ble.n	8012e88 <_dtoa_r+0x210>
 8012e60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012e64:	9b00      	ldr	r3, [sp, #0]
 8012e66:	fa08 f800 	lsl.w	r8, r8, r0
 8012e6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012e6e:	fa23 f000 	lsr.w	r0, r3, r0
 8012e72:	ea48 0000 	orr.w	r0, r8, r0
 8012e76:	f7ed fb65 	bl	8000544 <__aeabi_ui2d>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	4682      	mov	sl, r0
 8012e7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012e82:	3d01      	subs	r5, #1
 8012e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8012e86:	e772      	b.n	8012d6e <_dtoa_r+0xf6>
 8012e88:	9b00      	ldr	r3, [sp, #0]
 8012e8a:	f1c0 0020 	rsb	r0, r0, #32
 8012e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8012e92:	e7f0      	b.n	8012e76 <_dtoa_r+0x1fe>
 8012e94:	2301      	movs	r3, #1
 8012e96:	e7b1      	b.n	8012dfc <_dtoa_r+0x184>
 8012e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8012e9a:	e7b0      	b.n	8012dfe <_dtoa_r+0x186>
 8012e9c:	9b05      	ldr	r3, [sp, #20]
 8012e9e:	eba3 030a 	sub.w	r3, r3, sl
 8012ea2:	9305      	str	r3, [sp, #20]
 8012ea4:	f1ca 0300 	rsb	r3, sl, #0
 8012ea8:	9307      	str	r3, [sp, #28]
 8012eaa:	2300      	movs	r3, #0
 8012eac:	930e      	str	r3, [sp, #56]	; 0x38
 8012eae:	e7bb      	b.n	8012e28 <_dtoa_r+0x1b0>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8012eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	dd59      	ble.n	8012f6e <_dtoa_r+0x2f6>
 8012eba:	9302      	str	r3, [sp, #8]
 8012ebc:	4699      	mov	r9, r3
 8012ebe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	6072      	str	r2, [r6, #4]
 8012ec4:	2204      	movs	r2, #4
 8012ec6:	f102 0014 	add.w	r0, r2, #20
 8012eca:	4298      	cmp	r0, r3
 8012ecc:	6871      	ldr	r1, [r6, #4]
 8012ece:	d953      	bls.n	8012f78 <_dtoa_r+0x300>
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	f000 fea2 	bl	8013c1a <_Balloc>
 8012ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ed8:	6030      	str	r0, [r6, #0]
 8012eda:	f1b9 0f0e 	cmp.w	r9, #14
 8012ede:	f8d3 b000 	ldr.w	fp, [r3]
 8012ee2:	f200 80e6 	bhi.w	80130b2 <_dtoa_r+0x43a>
 8012ee6:	2d00      	cmp	r5, #0
 8012ee8:	f000 80e3 	beq.w	80130b2 <_dtoa_r+0x43a>
 8012eec:	ed9d 7b00 	vldr	d7, [sp]
 8012ef0:	f1ba 0f00 	cmp.w	sl, #0
 8012ef4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012ef8:	dd74      	ble.n	8012fe4 <_dtoa_r+0x36c>
 8012efa:	4a2a      	ldr	r2, [pc, #168]	; (8012fa4 <_dtoa_r+0x32c>)
 8012efc:	f00a 030f 	and.w	r3, sl, #15
 8012f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012f04:	ed93 7b00 	vldr	d7, [r3]
 8012f08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012f0c:	06f0      	lsls	r0, r6, #27
 8012f0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012f12:	d565      	bpl.n	8012fe0 <_dtoa_r+0x368>
 8012f14:	4b24      	ldr	r3, [pc, #144]	; (8012fa8 <_dtoa_r+0x330>)
 8012f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012f1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012f1e:	f7ed fcb5 	bl	800088c <__aeabi_ddiv>
 8012f22:	e9cd 0100 	strd	r0, r1, [sp]
 8012f26:	f006 060f 	and.w	r6, r6, #15
 8012f2a:	2503      	movs	r5, #3
 8012f2c:	4f1e      	ldr	r7, [pc, #120]	; (8012fa8 <_dtoa_r+0x330>)
 8012f2e:	e04c      	b.n	8012fca <_dtoa_r+0x352>
 8012f30:	2301      	movs	r3, #1
 8012f32:	930a      	str	r3, [sp, #40]	; 0x28
 8012f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f36:	4453      	add	r3, sl
 8012f38:	f103 0901 	add.w	r9, r3, #1
 8012f3c:	9302      	str	r3, [sp, #8]
 8012f3e:	464b      	mov	r3, r9
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	bfb8      	it	lt
 8012f44:	2301      	movlt	r3, #1
 8012f46:	e7ba      	b.n	8012ebe <_dtoa_r+0x246>
 8012f48:	2300      	movs	r3, #0
 8012f4a:	e7b2      	b.n	8012eb2 <_dtoa_r+0x23a>
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	e7f0      	b.n	8012f32 <_dtoa_r+0x2ba>
 8012f50:	2501      	movs	r5, #1
 8012f52:	2300      	movs	r3, #0
 8012f54:	9306      	str	r3, [sp, #24]
 8012f56:	950a      	str	r5, [sp, #40]	; 0x28
 8012f58:	f04f 33ff 	mov.w	r3, #4294967295
 8012f5c:	9302      	str	r3, [sp, #8]
 8012f5e:	4699      	mov	r9, r3
 8012f60:	2200      	movs	r2, #0
 8012f62:	2312      	movs	r3, #18
 8012f64:	920b      	str	r2, [sp, #44]	; 0x2c
 8012f66:	e7aa      	b.n	8012ebe <_dtoa_r+0x246>
 8012f68:	2301      	movs	r3, #1
 8012f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f6c:	e7f4      	b.n	8012f58 <_dtoa_r+0x2e0>
 8012f6e:	2301      	movs	r3, #1
 8012f70:	9302      	str	r3, [sp, #8]
 8012f72:	4699      	mov	r9, r3
 8012f74:	461a      	mov	r2, r3
 8012f76:	e7f5      	b.n	8012f64 <_dtoa_r+0x2ec>
 8012f78:	3101      	adds	r1, #1
 8012f7a:	6071      	str	r1, [r6, #4]
 8012f7c:	0052      	lsls	r2, r2, #1
 8012f7e:	e7a2      	b.n	8012ec6 <_dtoa_r+0x24e>
 8012f80:	636f4361 	.word	0x636f4361
 8012f84:	3fd287a7 	.word	0x3fd287a7
 8012f88:	8b60c8b3 	.word	0x8b60c8b3
 8012f8c:	3fc68a28 	.word	0x3fc68a28
 8012f90:	509f79fb 	.word	0x509f79fb
 8012f94:	3fd34413 	.word	0x3fd34413
 8012f98:	7ff00000 	.word	0x7ff00000
 8012f9c:	080178a2 	.word	0x080178a2
 8012fa0:	3ff80000 	.word	0x3ff80000
 8012fa4:	08017960 	.word	0x08017960
 8012fa8:	08017938 	.word	0x08017938
 8012fac:	080178ce 	.word	0x080178ce
 8012fb0:	07f1      	lsls	r1, r6, #31
 8012fb2:	d508      	bpl.n	8012fc6 <_dtoa_r+0x34e>
 8012fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fbc:	f7ed fb3c 	bl	8000638 <__aeabi_dmul>
 8012fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012fc4:	3501      	adds	r5, #1
 8012fc6:	1076      	asrs	r6, r6, #1
 8012fc8:	3708      	adds	r7, #8
 8012fca:	2e00      	cmp	r6, #0
 8012fcc:	d1f0      	bne.n	8012fb0 <_dtoa_r+0x338>
 8012fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fd6:	f7ed fc59 	bl	800088c <__aeabi_ddiv>
 8012fda:	e9cd 0100 	strd	r0, r1, [sp]
 8012fde:	e01a      	b.n	8013016 <_dtoa_r+0x39e>
 8012fe0:	2502      	movs	r5, #2
 8012fe2:	e7a3      	b.n	8012f2c <_dtoa_r+0x2b4>
 8012fe4:	f000 80a0 	beq.w	8013128 <_dtoa_r+0x4b0>
 8012fe8:	f1ca 0600 	rsb	r6, sl, #0
 8012fec:	4b9f      	ldr	r3, [pc, #636]	; (801326c <_dtoa_r+0x5f4>)
 8012fee:	4fa0      	ldr	r7, [pc, #640]	; (8013270 <_dtoa_r+0x5f8>)
 8012ff0:	f006 020f 	and.w	r2, r6, #15
 8012ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013000:	f7ed fb1a 	bl	8000638 <__aeabi_dmul>
 8013004:	e9cd 0100 	strd	r0, r1, [sp]
 8013008:	1136      	asrs	r6, r6, #4
 801300a:	2300      	movs	r3, #0
 801300c:	2502      	movs	r5, #2
 801300e:	2e00      	cmp	r6, #0
 8013010:	d17f      	bne.n	8013112 <_dtoa_r+0x49a>
 8013012:	2b00      	cmp	r3, #0
 8013014:	d1e1      	bne.n	8012fda <_dtoa_r+0x362>
 8013016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013018:	2b00      	cmp	r3, #0
 801301a:	f000 8087 	beq.w	801312c <_dtoa_r+0x4b4>
 801301e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013022:	2200      	movs	r2, #0
 8013024:	4b93      	ldr	r3, [pc, #588]	; (8013274 <_dtoa_r+0x5fc>)
 8013026:	4630      	mov	r0, r6
 8013028:	4639      	mov	r1, r7
 801302a:	f7ed fd77 	bl	8000b1c <__aeabi_dcmplt>
 801302e:	2800      	cmp	r0, #0
 8013030:	d07c      	beq.n	801312c <_dtoa_r+0x4b4>
 8013032:	f1b9 0f00 	cmp.w	r9, #0
 8013036:	d079      	beq.n	801312c <_dtoa_r+0x4b4>
 8013038:	9b02      	ldr	r3, [sp, #8]
 801303a:	2b00      	cmp	r3, #0
 801303c:	dd35      	ble.n	80130aa <_dtoa_r+0x432>
 801303e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013042:	9308      	str	r3, [sp, #32]
 8013044:	4639      	mov	r1, r7
 8013046:	2200      	movs	r2, #0
 8013048:	4b8b      	ldr	r3, [pc, #556]	; (8013278 <_dtoa_r+0x600>)
 801304a:	4630      	mov	r0, r6
 801304c:	f7ed faf4 	bl	8000638 <__aeabi_dmul>
 8013050:	e9cd 0100 	strd	r0, r1, [sp]
 8013054:	9f02      	ldr	r7, [sp, #8]
 8013056:	3501      	adds	r5, #1
 8013058:	4628      	mov	r0, r5
 801305a:	f7ed fa83 	bl	8000564 <__aeabi_i2d>
 801305e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013062:	f7ed fae9 	bl	8000638 <__aeabi_dmul>
 8013066:	2200      	movs	r2, #0
 8013068:	4b84      	ldr	r3, [pc, #528]	; (801327c <_dtoa_r+0x604>)
 801306a:	f7ed f92f 	bl	80002cc <__adddf3>
 801306e:	4605      	mov	r5, r0
 8013070:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013074:	2f00      	cmp	r7, #0
 8013076:	d15d      	bne.n	8013134 <_dtoa_r+0x4bc>
 8013078:	2200      	movs	r2, #0
 801307a:	4b81      	ldr	r3, [pc, #516]	; (8013280 <_dtoa_r+0x608>)
 801307c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013080:	f7ed f922 	bl	80002c8 <__aeabi_dsub>
 8013084:	462a      	mov	r2, r5
 8013086:	4633      	mov	r3, r6
 8013088:	e9cd 0100 	strd	r0, r1, [sp]
 801308c:	f7ed fd64 	bl	8000b58 <__aeabi_dcmpgt>
 8013090:	2800      	cmp	r0, #0
 8013092:	f040 8288 	bne.w	80135a6 <_dtoa_r+0x92e>
 8013096:	462a      	mov	r2, r5
 8013098:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801309c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130a0:	f7ed fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80130a4:	2800      	cmp	r0, #0
 80130a6:	f040 827c 	bne.w	80135a2 <_dtoa_r+0x92a>
 80130aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80130ae:	e9cd 2300 	strd	r2, r3, [sp]
 80130b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f2c0 8150 	blt.w	801335a <_dtoa_r+0x6e2>
 80130ba:	f1ba 0f0e 	cmp.w	sl, #14
 80130be:	f300 814c 	bgt.w	801335a <_dtoa_r+0x6e2>
 80130c2:	4b6a      	ldr	r3, [pc, #424]	; (801326c <_dtoa_r+0x5f4>)
 80130c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80130c8:	ed93 7b00 	vldr	d7, [r3]
 80130cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80130d4:	f280 80d8 	bge.w	8013288 <_dtoa_r+0x610>
 80130d8:	f1b9 0f00 	cmp.w	r9, #0
 80130dc:	f300 80d4 	bgt.w	8013288 <_dtoa_r+0x610>
 80130e0:	f040 825e 	bne.w	80135a0 <_dtoa_r+0x928>
 80130e4:	2200      	movs	r2, #0
 80130e6:	4b66      	ldr	r3, [pc, #408]	; (8013280 <_dtoa_r+0x608>)
 80130e8:	ec51 0b17 	vmov	r0, r1, d7
 80130ec:	f7ed faa4 	bl	8000638 <__aeabi_dmul>
 80130f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130f4:	f7ed fd26 	bl	8000b44 <__aeabi_dcmpge>
 80130f8:	464f      	mov	r7, r9
 80130fa:	464e      	mov	r6, r9
 80130fc:	2800      	cmp	r0, #0
 80130fe:	f040 8234 	bne.w	801356a <_dtoa_r+0x8f2>
 8013102:	2331      	movs	r3, #49	; 0x31
 8013104:	f10b 0501 	add.w	r5, fp, #1
 8013108:	f88b 3000 	strb.w	r3, [fp]
 801310c:	f10a 0a01 	add.w	sl, sl, #1
 8013110:	e22f      	b.n	8013572 <_dtoa_r+0x8fa>
 8013112:	07f2      	lsls	r2, r6, #31
 8013114:	d505      	bpl.n	8013122 <_dtoa_r+0x4aa>
 8013116:	e9d7 2300 	ldrd	r2, r3, [r7]
 801311a:	f7ed fa8d 	bl	8000638 <__aeabi_dmul>
 801311e:	3501      	adds	r5, #1
 8013120:	2301      	movs	r3, #1
 8013122:	1076      	asrs	r6, r6, #1
 8013124:	3708      	adds	r7, #8
 8013126:	e772      	b.n	801300e <_dtoa_r+0x396>
 8013128:	2502      	movs	r5, #2
 801312a:	e774      	b.n	8013016 <_dtoa_r+0x39e>
 801312c:	f8cd a020 	str.w	sl, [sp, #32]
 8013130:	464f      	mov	r7, r9
 8013132:	e791      	b.n	8013058 <_dtoa_r+0x3e0>
 8013134:	4b4d      	ldr	r3, [pc, #308]	; (801326c <_dtoa_r+0x5f4>)
 8013136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801313a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801313e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013140:	2b00      	cmp	r3, #0
 8013142:	d047      	beq.n	80131d4 <_dtoa_r+0x55c>
 8013144:	4602      	mov	r2, r0
 8013146:	460b      	mov	r3, r1
 8013148:	2000      	movs	r0, #0
 801314a:	494e      	ldr	r1, [pc, #312]	; (8013284 <_dtoa_r+0x60c>)
 801314c:	f7ed fb9e 	bl	800088c <__aeabi_ddiv>
 8013150:	462a      	mov	r2, r5
 8013152:	4633      	mov	r3, r6
 8013154:	f7ed f8b8 	bl	80002c8 <__aeabi_dsub>
 8013158:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801315c:	465d      	mov	r5, fp
 801315e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013162:	f7ed fd19 	bl	8000b98 <__aeabi_d2iz>
 8013166:	4606      	mov	r6, r0
 8013168:	f7ed f9fc 	bl	8000564 <__aeabi_i2d>
 801316c:	4602      	mov	r2, r0
 801316e:	460b      	mov	r3, r1
 8013170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013174:	f7ed f8a8 	bl	80002c8 <__aeabi_dsub>
 8013178:	3630      	adds	r6, #48	; 0x30
 801317a:	f805 6b01 	strb.w	r6, [r5], #1
 801317e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013182:	e9cd 0100 	strd	r0, r1, [sp]
 8013186:	f7ed fcc9 	bl	8000b1c <__aeabi_dcmplt>
 801318a:	2800      	cmp	r0, #0
 801318c:	d163      	bne.n	8013256 <_dtoa_r+0x5de>
 801318e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013192:	2000      	movs	r0, #0
 8013194:	4937      	ldr	r1, [pc, #220]	; (8013274 <_dtoa_r+0x5fc>)
 8013196:	f7ed f897 	bl	80002c8 <__aeabi_dsub>
 801319a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801319e:	f7ed fcbd 	bl	8000b1c <__aeabi_dcmplt>
 80131a2:	2800      	cmp	r0, #0
 80131a4:	f040 80b7 	bne.w	8013316 <_dtoa_r+0x69e>
 80131a8:	eba5 030b 	sub.w	r3, r5, fp
 80131ac:	429f      	cmp	r7, r3
 80131ae:	f77f af7c 	ble.w	80130aa <_dtoa_r+0x432>
 80131b2:	2200      	movs	r2, #0
 80131b4:	4b30      	ldr	r3, [pc, #192]	; (8013278 <_dtoa_r+0x600>)
 80131b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80131ba:	f7ed fa3d 	bl	8000638 <__aeabi_dmul>
 80131be:	2200      	movs	r2, #0
 80131c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80131c4:	4b2c      	ldr	r3, [pc, #176]	; (8013278 <_dtoa_r+0x600>)
 80131c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131ca:	f7ed fa35 	bl	8000638 <__aeabi_dmul>
 80131ce:	e9cd 0100 	strd	r0, r1, [sp]
 80131d2:	e7c4      	b.n	801315e <_dtoa_r+0x4e6>
 80131d4:	462a      	mov	r2, r5
 80131d6:	4633      	mov	r3, r6
 80131d8:	f7ed fa2e 	bl	8000638 <__aeabi_dmul>
 80131dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80131e0:	eb0b 0507 	add.w	r5, fp, r7
 80131e4:	465e      	mov	r6, fp
 80131e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131ea:	f7ed fcd5 	bl	8000b98 <__aeabi_d2iz>
 80131ee:	4607      	mov	r7, r0
 80131f0:	f7ed f9b8 	bl	8000564 <__aeabi_i2d>
 80131f4:	3730      	adds	r7, #48	; 0x30
 80131f6:	4602      	mov	r2, r0
 80131f8:	460b      	mov	r3, r1
 80131fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131fe:	f7ed f863 	bl	80002c8 <__aeabi_dsub>
 8013202:	f806 7b01 	strb.w	r7, [r6], #1
 8013206:	42ae      	cmp	r6, r5
 8013208:	e9cd 0100 	strd	r0, r1, [sp]
 801320c:	f04f 0200 	mov.w	r2, #0
 8013210:	d126      	bne.n	8013260 <_dtoa_r+0x5e8>
 8013212:	4b1c      	ldr	r3, [pc, #112]	; (8013284 <_dtoa_r+0x60c>)
 8013214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013218:	f7ed f858 	bl	80002cc <__adddf3>
 801321c:	4602      	mov	r2, r0
 801321e:	460b      	mov	r3, r1
 8013220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013224:	f7ed fc98 	bl	8000b58 <__aeabi_dcmpgt>
 8013228:	2800      	cmp	r0, #0
 801322a:	d174      	bne.n	8013316 <_dtoa_r+0x69e>
 801322c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013230:	2000      	movs	r0, #0
 8013232:	4914      	ldr	r1, [pc, #80]	; (8013284 <_dtoa_r+0x60c>)
 8013234:	f7ed f848 	bl	80002c8 <__aeabi_dsub>
 8013238:	4602      	mov	r2, r0
 801323a:	460b      	mov	r3, r1
 801323c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013240:	f7ed fc6c 	bl	8000b1c <__aeabi_dcmplt>
 8013244:	2800      	cmp	r0, #0
 8013246:	f43f af30 	beq.w	80130aa <_dtoa_r+0x432>
 801324a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801324e:	2b30      	cmp	r3, #48	; 0x30
 8013250:	f105 32ff 	add.w	r2, r5, #4294967295
 8013254:	d002      	beq.n	801325c <_dtoa_r+0x5e4>
 8013256:	f8dd a020 	ldr.w	sl, [sp, #32]
 801325a:	e04a      	b.n	80132f2 <_dtoa_r+0x67a>
 801325c:	4615      	mov	r5, r2
 801325e:	e7f4      	b.n	801324a <_dtoa_r+0x5d2>
 8013260:	4b05      	ldr	r3, [pc, #20]	; (8013278 <_dtoa_r+0x600>)
 8013262:	f7ed f9e9 	bl	8000638 <__aeabi_dmul>
 8013266:	e9cd 0100 	strd	r0, r1, [sp]
 801326a:	e7bc      	b.n	80131e6 <_dtoa_r+0x56e>
 801326c:	08017960 	.word	0x08017960
 8013270:	08017938 	.word	0x08017938
 8013274:	3ff00000 	.word	0x3ff00000
 8013278:	40240000 	.word	0x40240000
 801327c:	401c0000 	.word	0x401c0000
 8013280:	40140000 	.word	0x40140000
 8013284:	3fe00000 	.word	0x3fe00000
 8013288:	e9dd 6700 	ldrd	r6, r7, [sp]
 801328c:	465d      	mov	r5, fp
 801328e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013292:	4630      	mov	r0, r6
 8013294:	4639      	mov	r1, r7
 8013296:	f7ed faf9 	bl	800088c <__aeabi_ddiv>
 801329a:	f7ed fc7d 	bl	8000b98 <__aeabi_d2iz>
 801329e:	4680      	mov	r8, r0
 80132a0:	f7ed f960 	bl	8000564 <__aeabi_i2d>
 80132a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132a8:	f7ed f9c6 	bl	8000638 <__aeabi_dmul>
 80132ac:	4602      	mov	r2, r0
 80132ae:	460b      	mov	r3, r1
 80132b0:	4630      	mov	r0, r6
 80132b2:	4639      	mov	r1, r7
 80132b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80132b8:	f7ed f806 	bl	80002c8 <__aeabi_dsub>
 80132bc:	f805 6b01 	strb.w	r6, [r5], #1
 80132c0:	eba5 060b 	sub.w	r6, r5, fp
 80132c4:	45b1      	cmp	r9, r6
 80132c6:	4602      	mov	r2, r0
 80132c8:	460b      	mov	r3, r1
 80132ca:	d139      	bne.n	8013340 <_dtoa_r+0x6c8>
 80132cc:	f7ec fffe 	bl	80002cc <__adddf3>
 80132d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132d4:	4606      	mov	r6, r0
 80132d6:	460f      	mov	r7, r1
 80132d8:	f7ed fc3e 	bl	8000b58 <__aeabi_dcmpgt>
 80132dc:	b9c8      	cbnz	r0, 8013312 <_dtoa_r+0x69a>
 80132de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132e2:	4630      	mov	r0, r6
 80132e4:	4639      	mov	r1, r7
 80132e6:	f7ed fc0f 	bl	8000b08 <__aeabi_dcmpeq>
 80132ea:	b110      	cbz	r0, 80132f2 <_dtoa_r+0x67a>
 80132ec:	f018 0f01 	tst.w	r8, #1
 80132f0:	d10f      	bne.n	8013312 <_dtoa_r+0x69a>
 80132f2:	9904      	ldr	r1, [sp, #16]
 80132f4:	4620      	mov	r0, r4
 80132f6:	f000 fcc4 	bl	8013c82 <_Bfree>
 80132fa:	2300      	movs	r3, #0
 80132fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132fe:	702b      	strb	r3, [r5, #0]
 8013300:	f10a 0301 	add.w	r3, sl, #1
 8013304:	6013      	str	r3, [r2, #0]
 8013306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013308:	2b00      	cmp	r3, #0
 801330a:	f000 8241 	beq.w	8013790 <_dtoa_r+0xb18>
 801330e:	601d      	str	r5, [r3, #0]
 8013310:	e23e      	b.n	8013790 <_dtoa_r+0xb18>
 8013312:	f8cd a020 	str.w	sl, [sp, #32]
 8013316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801331a:	2a39      	cmp	r2, #57	; 0x39
 801331c:	f105 33ff 	add.w	r3, r5, #4294967295
 8013320:	d108      	bne.n	8013334 <_dtoa_r+0x6bc>
 8013322:	459b      	cmp	fp, r3
 8013324:	d10a      	bne.n	801333c <_dtoa_r+0x6c4>
 8013326:	9b08      	ldr	r3, [sp, #32]
 8013328:	3301      	adds	r3, #1
 801332a:	9308      	str	r3, [sp, #32]
 801332c:	2330      	movs	r3, #48	; 0x30
 801332e:	f88b 3000 	strb.w	r3, [fp]
 8013332:	465b      	mov	r3, fp
 8013334:	781a      	ldrb	r2, [r3, #0]
 8013336:	3201      	adds	r2, #1
 8013338:	701a      	strb	r2, [r3, #0]
 801333a:	e78c      	b.n	8013256 <_dtoa_r+0x5de>
 801333c:	461d      	mov	r5, r3
 801333e:	e7ea      	b.n	8013316 <_dtoa_r+0x69e>
 8013340:	2200      	movs	r2, #0
 8013342:	4b9b      	ldr	r3, [pc, #620]	; (80135b0 <_dtoa_r+0x938>)
 8013344:	f7ed f978 	bl	8000638 <__aeabi_dmul>
 8013348:	2200      	movs	r2, #0
 801334a:	2300      	movs	r3, #0
 801334c:	4606      	mov	r6, r0
 801334e:	460f      	mov	r7, r1
 8013350:	f7ed fbda 	bl	8000b08 <__aeabi_dcmpeq>
 8013354:	2800      	cmp	r0, #0
 8013356:	d09a      	beq.n	801328e <_dtoa_r+0x616>
 8013358:	e7cb      	b.n	80132f2 <_dtoa_r+0x67a>
 801335a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801335c:	2a00      	cmp	r2, #0
 801335e:	f000 808b 	beq.w	8013478 <_dtoa_r+0x800>
 8013362:	9a06      	ldr	r2, [sp, #24]
 8013364:	2a01      	cmp	r2, #1
 8013366:	dc6e      	bgt.n	8013446 <_dtoa_r+0x7ce>
 8013368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801336a:	2a00      	cmp	r2, #0
 801336c:	d067      	beq.n	801343e <_dtoa_r+0x7c6>
 801336e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013372:	9f07      	ldr	r7, [sp, #28]
 8013374:	9d05      	ldr	r5, [sp, #20]
 8013376:	9a05      	ldr	r2, [sp, #20]
 8013378:	2101      	movs	r1, #1
 801337a:	441a      	add	r2, r3
 801337c:	4620      	mov	r0, r4
 801337e:	9205      	str	r2, [sp, #20]
 8013380:	4498      	add	r8, r3
 8013382:	f000 fd1e 	bl	8013dc2 <__i2b>
 8013386:	4606      	mov	r6, r0
 8013388:	2d00      	cmp	r5, #0
 801338a:	dd0c      	ble.n	80133a6 <_dtoa_r+0x72e>
 801338c:	f1b8 0f00 	cmp.w	r8, #0
 8013390:	dd09      	ble.n	80133a6 <_dtoa_r+0x72e>
 8013392:	4545      	cmp	r5, r8
 8013394:	9a05      	ldr	r2, [sp, #20]
 8013396:	462b      	mov	r3, r5
 8013398:	bfa8      	it	ge
 801339a:	4643      	movge	r3, r8
 801339c:	1ad2      	subs	r2, r2, r3
 801339e:	9205      	str	r2, [sp, #20]
 80133a0:	1aed      	subs	r5, r5, r3
 80133a2:	eba8 0803 	sub.w	r8, r8, r3
 80133a6:	9b07      	ldr	r3, [sp, #28]
 80133a8:	b1eb      	cbz	r3, 80133e6 <_dtoa_r+0x76e>
 80133aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d067      	beq.n	8013480 <_dtoa_r+0x808>
 80133b0:	b18f      	cbz	r7, 80133d6 <_dtoa_r+0x75e>
 80133b2:	4631      	mov	r1, r6
 80133b4:	463a      	mov	r2, r7
 80133b6:	4620      	mov	r0, r4
 80133b8:	f000 fda2 	bl	8013f00 <__pow5mult>
 80133bc:	9a04      	ldr	r2, [sp, #16]
 80133be:	4601      	mov	r1, r0
 80133c0:	4606      	mov	r6, r0
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 fd06 	bl	8013dd4 <__multiply>
 80133c8:	9904      	ldr	r1, [sp, #16]
 80133ca:	9008      	str	r0, [sp, #32]
 80133cc:	4620      	mov	r0, r4
 80133ce:	f000 fc58 	bl	8013c82 <_Bfree>
 80133d2:	9b08      	ldr	r3, [sp, #32]
 80133d4:	9304      	str	r3, [sp, #16]
 80133d6:	9b07      	ldr	r3, [sp, #28]
 80133d8:	1bda      	subs	r2, r3, r7
 80133da:	d004      	beq.n	80133e6 <_dtoa_r+0x76e>
 80133dc:	9904      	ldr	r1, [sp, #16]
 80133de:	4620      	mov	r0, r4
 80133e0:	f000 fd8e 	bl	8013f00 <__pow5mult>
 80133e4:	9004      	str	r0, [sp, #16]
 80133e6:	2101      	movs	r1, #1
 80133e8:	4620      	mov	r0, r4
 80133ea:	f000 fcea 	bl	8013dc2 <__i2b>
 80133ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133f0:	4607      	mov	r7, r0
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 81d0 	beq.w	8013798 <_dtoa_r+0xb20>
 80133f8:	461a      	mov	r2, r3
 80133fa:	4601      	mov	r1, r0
 80133fc:	4620      	mov	r0, r4
 80133fe:	f000 fd7f 	bl	8013f00 <__pow5mult>
 8013402:	9b06      	ldr	r3, [sp, #24]
 8013404:	2b01      	cmp	r3, #1
 8013406:	4607      	mov	r7, r0
 8013408:	dc40      	bgt.n	801348c <_dtoa_r+0x814>
 801340a:	9b00      	ldr	r3, [sp, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d139      	bne.n	8013484 <_dtoa_r+0x80c>
 8013410:	9b01      	ldr	r3, [sp, #4]
 8013412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013416:	2b00      	cmp	r3, #0
 8013418:	d136      	bne.n	8013488 <_dtoa_r+0x810>
 801341a:	9b01      	ldr	r3, [sp, #4]
 801341c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013420:	0d1b      	lsrs	r3, r3, #20
 8013422:	051b      	lsls	r3, r3, #20
 8013424:	b12b      	cbz	r3, 8013432 <_dtoa_r+0x7ba>
 8013426:	9b05      	ldr	r3, [sp, #20]
 8013428:	3301      	adds	r3, #1
 801342a:	9305      	str	r3, [sp, #20]
 801342c:	f108 0801 	add.w	r8, r8, #1
 8013430:	2301      	movs	r3, #1
 8013432:	9307      	str	r3, [sp, #28]
 8013434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013436:	2b00      	cmp	r3, #0
 8013438:	d12a      	bne.n	8013490 <_dtoa_r+0x818>
 801343a:	2001      	movs	r0, #1
 801343c:	e030      	b.n	80134a0 <_dtoa_r+0x828>
 801343e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013440:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013444:	e795      	b.n	8013372 <_dtoa_r+0x6fa>
 8013446:	9b07      	ldr	r3, [sp, #28]
 8013448:	f109 37ff 	add.w	r7, r9, #4294967295
 801344c:	42bb      	cmp	r3, r7
 801344e:	bfbf      	itttt	lt
 8013450:	9b07      	ldrlt	r3, [sp, #28]
 8013452:	9707      	strlt	r7, [sp, #28]
 8013454:	1afa      	sublt	r2, r7, r3
 8013456:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013458:	bfbb      	ittet	lt
 801345a:	189b      	addlt	r3, r3, r2
 801345c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801345e:	1bdf      	subge	r7, r3, r7
 8013460:	2700      	movlt	r7, #0
 8013462:	f1b9 0f00 	cmp.w	r9, #0
 8013466:	bfb5      	itete	lt
 8013468:	9b05      	ldrlt	r3, [sp, #20]
 801346a:	9d05      	ldrge	r5, [sp, #20]
 801346c:	eba3 0509 	sublt.w	r5, r3, r9
 8013470:	464b      	movge	r3, r9
 8013472:	bfb8      	it	lt
 8013474:	2300      	movlt	r3, #0
 8013476:	e77e      	b.n	8013376 <_dtoa_r+0x6fe>
 8013478:	9f07      	ldr	r7, [sp, #28]
 801347a:	9d05      	ldr	r5, [sp, #20]
 801347c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801347e:	e783      	b.n	8013388 <_dtoa_r+0x710>
 8013480:	9a07      	ldr	r2, [sp, #28]
 8013482:	e7ab      	b.n	80133dc <_dtoa_r+0x764>
 8013484:	2300      	movs	r3, #0
 8013486:	e7d4      	b.n	8013432 <_dtoa_r+0x7ba>
 8013488:	9b00      	ldr	r3, [sp, #0]
 801348a:	e7d2      	b.n	8013432 <_dtoa_r+0x7ba>
 801348c:	2300      	movs	r3, #0
 801348e:	9307      	str	r3, [sp, #28]
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013496:	6918      	ldr	r0, [r3, #16]
 8013498:	f000 fc45 	bl	8013d26 <__hi0bits>
 801349c:	f1c0 0020 	rsb	r0, r0, #32
 80134a0:	4440      	add	r0, r8
 80134a2:	f010 001f 	ands.w	r0, r0, #31
 80134a6:	d047      	beq.n	8013538 <_dtoa_r+0x8c0>
 80134a8:	f1c0 0320 	rsb	r3, r0, #32
 80134ac:	2b04      	cmp	r3, #4
 80134ae:	dd3b      	ble.n	8013528 <_dtoa_r+0x8b0>
 80134b0:	9b05      	ldr	r3, [sp, #20]
 80134b2:	f1c0 001c 	rsb	r0, r0, #28
 80134b6:	4403      	add	r3, r0
 80134b8:	9305      	str	r3, [sp, #20]
 80134ba:	4405      	add	r5, r0
 80134bc:	4480      	add	r8, r0
 80134be:	9b05      	ldr	r3, [sp, #20]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	dd05      	ble.n	80134d0 <_dtoa_r+0x858>
 80134c4:	461a      	mov	r2, r3
 80134c6:	9904      	ldr	r1, [sp, #16]
 80134c8:	4620      	mov	r0, r4
 80134ca:	f000 fd67 	bl	8013f9c <__lshift>
 80134ce:	9004      	str	r0, [sp, #16]
 80134d0:	f1b8 0f00 	cmp.w	r8, #0
 80134d4:	dd05      	ble.n	80134e2 <_dtoa_r+0x86a>
 80134d6:	4639      	mov	r1, r7
 80134d8:	4642      	mov	r2, r8
 80134da:	4620      	mov	r0, r4
 80134dc:	f000 fd5e 	bl	8013f9c <__lshift>
 80134e0:	4607      	mov	r7, r0
 80134e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134e4:	b353      	cbz	r3, 801353c <_dtoa_r+0x8c4>
 80134e6:	4639      	mov	r1, r7
 80134e8:	9804      	ldr	r0, [sp, #16]
 80134ea:	f000 fdab 	bl	8014044 <__mcmp>
 80134ee:	2800      	cmp	r0, #0
 80134f0:	da24      	bge.n	801353c <_dtoa_r+0x8c4>
 80134f2:	2300      	movs	r3, #0
 80134f4:	220a      	movs	r2, #10
 80134f6:	9904      	ldr	r1, [sp, #16]
 80134f8:	4620      	mov	r0, r4
 80134fa:	f000 fbd9 	bl	8013cb0 <__multadd>
 80134fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013500:	9004      	str	r0, [sp, #16]
 8013502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 814d 	beq.w	80137a6 <_dtoa_r+0xb2e>
 801350c:	2300      	movs	r3, #0
 801350e:	4631      	mov	r1, r6
 8013510:	220a      	movs	r2, #10
 8013512:	4620      	mov	r0, r4
 8013514:	f000 fbcc 	bl	8013cb0 <__multadd>
 8013518:	9b02      	ldr	r3, [sp, #8]
 801351a:	2b00      	cmp	r3, #0
 801351c:	4606      	mov	r6, r0
 801351e:	dc4f      	bgt.n	80135c0 <_dtoa_r+0x948>
 8013520:	9b06      	ldr	r3, [sp, #24]
 8013522:	2b02      	cmp	r3, #2
 8013524:	dd4c      	ble.n	80135c0 <_dtoa_r+0x948>
 8013526:	e011      	b.n	801354c <_dtoa_r+0x8d4>
 8013528:	d0c9      	beq.n	80134be <_dtoa_r+0x846>
 801352a:	9a05      	ldr	r2, [sp, #20]
 801352c:	331c      	adds	r3, #28
 801352e:	441a      	add	r2, r3
 8013530:	9205      	str	r2, [sp, #20]
 8013532:	441d      	add	r5, r3
 8013534:	4498      	add	r8, r3
 8013536:	e7c2      	b.n	80134be <_dtoa_r+0x846>
 8013538:	4603      	mov	r3, r0
 801353a:	e7f6      	b.n	801352a <_dtoa_r+0x8b2>
 801353c:	f1b9 0f00 	cmp.w	r9, #0
 8013540:	dc38      	bgt.n	80135b4 <_dtoa_r+0x93c>
 8013542:	9b06      	ldr	r3, [sp, #24]
 8013544:	2b02      	cmp	r3, #2
 8013546:	dd35      	ble.n	80135b4 <_dtoa_r+0x93c>
 8013548:	f8cd 9008 	str.w	r9, [sp, #8]
 801354c:	9b02      	ldr	r3, [sp, #8]
 801354e:	b963      	cbnz	r3, 801356a <_dtoa_r+0x8f2>
 8013550:	4639      	mov	r1, r7
 8013552:	2205      	movs	r2, #5
 8013554:	4620      	mov	r0, r4
 8013556:	f000 fbab 	bl	8013cb0 <__multadd>
 801355a:	4601      	mov	r1, r0
 801355c:	4607      	mov	r7, r0
 801355e:	9804      	ldr	r0, [sp, #16]
 8013560:	f000 fd70 	bl	8014044 <__mcmp>
 8013564:	2800      	cmp	r0, #0
 8013566:	f73f adcc 	bgt.w	8013102 <_dtoa_r+0x48a>
 801356a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801356c:	465d      	mov	r5, fp
 801356e:	ea6f 0a03 	mvn.w	sl, r3
 8013572:	f04f 0900 	mov.w	r9, #0
 8013576:	4639      	mov	r1, r7
 8013578:	4620      	mov	r0, r4
 801357a:	f000 fb82 	bl	8013c82 <_Bfree>
 801357e:	2e00      	cmp	r6, #0
 8013580:	f43f aeb7 	beq.w	80132f2 <_dtoa_r+0x67a>
 8013584:	f1b9 0f00 	cmp.w	r9, #0
 8013588:	d005      	beq.n	8013596 <_dtoa_r+0x91e>
 801358a:	45b1      	cmp	r9, r6
 801358c:	d003      	beq.n	8013596 <_dtoa_r+0x91e>
 801358e:	4649      	mov	r1, r9
 8013590:	4620      	mov	r0, r4
 8013592:	f000 fb76 	bl	8013c82 <_Bfree>
 8013596:	4631      	mov	r1, r6
 8013598:	4620      	mov	r0, r4
 801359a:	f000 fb72 	bl	8013c82 <_Bfree>
 801359e:	e6a8      	b.n	80132f2 <_dtoa_r+0x67a>
 80135a0:	2700      	movs	r7, #0
 80135a2:	463e      	mov	r6, r7
 80135a4:	e7e1      	b.n	801356a <_dtoa_r+0x8f2>
 80135a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80135aa:	463e      	mov	r6, r7
 80135ac:	e5a9      	b.n	8013102 <_dtoa_r+0x48a>
 80135ae:	bf00      	nop
 80135b0:	40240000 	.word	0x40240000
 80135b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	f000 80fa 	beq.w	80137b4 <_dtoa_r+0xb3c>
 80135c0:	2d00      	cmp	r5, #0
 80135c2:	dd05      	ble.n	80135d0 <_dtoa_r+0x958>
 80135c4:	4631      	mov	r1, r6
 80135c6:	462a      	mov	r2, r5
 80135c8:	4620      	mov	r0, r4
 80135ca:	f000 fce7 	bl	8013f9c <__lshift>
 80135ce:	4606      	mov	r6, r0
 80135d0:	9b07      	ldr	r3, [sp, #28]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d04c      	beq.n	8013670 <_dtoa_r+0x9f8>
 80135d6:	6871      	ldr	r1, [r6, #4]
 80135d8:	4620      	mov	r0, r4
 80135da:	f000 fb1e 	bl	8013c1a <_Balloc>
 80135de:	6932      	ldr	r2, [r6, #16]
 80135e0:	3202      	adds	r2, #2
 80135e2:	4605      	mov	r5, r0
 80135e4:	0092      	lsls	r2, r2, #2
 80135e6:	f106 010c 	add.w	r1, r6, #12
 80135ea:	300c      	adds	r0, #12
 80135ec:	f7fe fabc 	bl	8011b68 <memcpy>
 80135f0:	2201      	movs	r2, #1
 80135f2:	4629      	mov	r1, r5
 80135f4:	4620      	mov	r0, r4
 80135f6:	f000 fcd1 	bl	8013f9c <__lshift>
 80135fa:	9b00      	ldr	r3, [sp, #0]
 80135fc:	f8cd b014 	str.w	fp, [sp, #20]
 8013600:	f003 0301 	and.w	r3, r3, #1
 8013604:	46b1      	mov	r9, r6
 8013606:	9307      	str	r3, [sp, #28]
 8013608:	4606      	mov	r6, r0
 801360a:	4639      	mov	r1, r7
 801360c:	9804      	ldr	r0, [sp, #16]
 801360e:	f7ff faa5 	bl	8012b5c <quorem>
 8013612:	4649      	mov	r1, r9
 8013614:	4605      	mov	r5, r0
 8013616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801361a:	9804      	ldr	r0, [sp, #16]
 801361c:	f000 fd12 	bl	8014044 <__mcmp>
 8013620:	4632      	mov	r2, r6
 8013622:	9000      	str	r0, [sp, #0]
 8013624:	4639      	mov	r1, r7
 8013626:	4620      	mov	r0, r4
 8013628:	f000 fd26 	bl	8014078 <__mdiff>
 801362c:	68c3      	ldr	r3, [r0, #12]
 801362e:	4602      	mov	r2, r0
 8013630:	bb03      	cbnz	r3, 8013674 <_dtoa_r+0x9fc>
 8013632:	4601      	mov	r1, r0
 8013634:	9008      	str	r0, [sp, #32]
 8013636:	9804      	ldr	r0, [sp, #16]
 8013638:	f000 fd04 	bl	8014044 <__mcmp>
 801363c:	9a08      	ldr	r2, [sp, #32]
 801363e:	4603      	mov	r3, r0
 8013640:	4611      	mov	r1, r2
 8013642:	4620      	mov	r0, r4
 8013644:	9308      	str	r3, [sp, #32]
 8013646:	f000 fb1c 	bl	8013c82 <_Bfree>
 801364a:	9b08      	ldr	r3, [sp, #32]
 801364c:	b9a3      	cbnz	r3, 8013678 <_dtoa_r+0xa00>
 801364e:	9a06      	ldr	r2, [sp, #24]
 8013650:	b992      	cbnz	r2, 8013678 <_dtoa_r+0xa00>
 8013652:	9a07      	ldr	r2, [sp, #28]
 8013654:	b982      	cbnz	r2, 8013678 <_dtoa_r+0xa00>
 8013656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801365a:	d029      	beq.n	80136b0 <_dtoa_r+0xa38>
 801365c:	9b00      	ldr	r3, [sp, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	dd01      	ble.n	8013666 <_dtoa_r+0x9ee>
 8013662:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013666:	9b05      	ldr	r3, [sp, #20]
 8013668:	1c5d      	adds	r5, r3, #1
 801366a:	f883 8000 	strb.w	r8, [r3]
 801366e:	e782      	b.n	8013576 <_dtoa_r+0x8fe>
 8013670:	4630      	mov	r0, r6
 8013672:	e7c2      	b.n	80135fa <_dtoa_r+0x982>
 8013674:	2301      	movs	r3, #1
 8013676:	e7e3      	b.n	8013640 <_dtoa_r+0x9c8>
 8013678:	9a00      	ldr	r2, [sp, #0]
 801367a:	2a00      	cmp	r2, #0
 801367c:	db04      	blt.n	8013688 <_dtoa_r+0xa10>
 801367e:	d125      	bne.n	80136cc <_dtoa_r+0xa54>
 8013680:	9a06      	ldr	r2, [sp, #24]
 8013682:	bb1a      	cbnz	r2, 80136cc <_dtoa_r+0xa54>
 8013684:	9a07      	ldr	r2, [sp, #28]
 8013686:	bb0a      	cbnz	r2, 80136cc <_dtoa_r+0xa54>
 8013688:	2b00      	cmp	r3, #0
 801368a:	ddec      	ble.n	8013666 <_dtoa_r+0x9ee>
 801368c:	2201      	movs	r2, #1
 801368e:	9904      	ldr	r1, [sp, #16]
 8013690:	4620      	mov	r0, r4
 8013692:	f000 fc83 	bl	8013f9c <__lshift>
 8013696:	4639      	mov	r1, r7
 8013698:	9004      	str	r0, [sp, #16]
 801369a:	f000 fcd3 	bl	8014044 <__mcmp>
 801369e:	2800      	cmp	r0, #0
 80136a0:	dc03      	bgt.n	80136aa <_dtoa_r+0xa32>
 80136a2:	d1e0      	bne.n	8013666 <_dtoa_r+0x9ee>
 80136a4:	f018 0f01 	tst.w	r8, #1
 80136a8:	d0dd      	beq.n	8013666 <_dtoa_r+0x9ee>
 80136aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80136ae:	d1d8      	bne.n	8013662 <_dtoa_r+0x9ea>
 80136b0:	9b05      	ldr	r3, [sp, #20]
 80136b2:	9a05      	ldr	r2, [sp, #20]
 80136b4:	1c5d      	adds	r5, r3, #1
 80136b6:	2339      	movs	r3, #57	; 0x39
 80136b8:	7013      	strb	r3, [r2, #0]
 80136ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80136be:	2b39      	cmp	r3, #57	; 0x39
 80136c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80136c4:	d04f      	beq.n	8013766 <_dtoa_r+0xaee>
 80136c6:	3301      	adds	r3, #1
 80136c8:	7013      	strb	r3, [r2, #0]
 80136ca:	e754      	b.n	8013576 <_dtoa_r+0x8fe>
 80136cc:	9a05      	ldr	r2, [sp, #20]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f102 0501 	add.w	r5, r2, #1
 80136d4:	dd06      	ble.n	80136e4 <_dtoa_r+0xa6c>
 80136d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80136da:	d0e9      	beq.n	80136b0 <_dtoa_r+0xa38>
 80136dc:	f108 0801 	add.w	r8, r8, #1
 80136e0:	9b05      	ldr	r3, [sp, #20]
 80136e2:	e7c2      	b.n	801366a <_dtoa_r+0x9f2>
 80136e4:	9a02      	ldr	r2, [sp, #8]
 80136e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80136ea:	eba5 030b 	sub.w	r3, r5, fp
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d021      	beq.n	8013736 <_dtoa_r+0xabe>
 80136f2:	2300      	movs	r3, #0
 80136f4:	220a      	movs	r2, #10
 80136f6:	9904      	ldr	r1, [sp, #16]
 80136f8:	4620      	mov	r0, r4
 80136fa:	f000 fad9 	bl	8013cb0 <__multadd>
 80136fe:	45b1      	cmp	r9, r6
 8013700:	9004      	str	r0, [sp, #16]
 8013702:	f04f 0300 	mov.w	r3, #0
 8013706:	f04f 020a 	mov.w	r2, #10
 801370a:	4649      	mov	r1, r9
 801370c:	4620      	mov	r0, r4
 801370e:	d105      	bne.n	801371c <_dtoa_r+0xaa4>
 8013710:	f000 face 	bl	8013cb0 <__multadd>
 8013714:	4681      	mov	r9, r0
 8013716:	4606      	mov	r6, r0
 8013718:	9505      	str	r5, [sp, #20]
 801371a:	e776      	b.n	801360a <_dtoa_r+0x992>
 801371c:	f000 fac8 	bl	8013cb0 <__multadd>
 8013720:	4631      	mov	r1, r6
 8013722:	4681      	mov	r9, r0
 8013724:	2300      	movs	r3, #0
 8013726:	220a      	movs	r2, #10
 8013728:	4620      	mov	r0, r4
 801372a:	f000 fac1 	bl	8013cb0 <__multadd>
 801372e:	4606      	mov	r6, r0
 8013730:	e7f2      	b.n	8013718 <_dtoa_r+0xaa0>
 8013732:	f04f 0900 	mov.w	r9, #0
 8013736:	2201      	movs	r2, #1
 8013738:	9904      	ldr	r1, [sp, #16]
 801373a:	4620      	mov	r0, r4
 801373c:	f000 fc2e 	bl	8013f9c <__lshift>
 8013740:	4639      	mov	r1, r7
 8013742:	9004      	str	r0, [sp, #16]
 8013744:	f000 fc7e 	bl	8014044 <__mcmp>
 8013748:	2800      	cmp	r0, #0
 801374a:	dcb6      	bgt.n	80136ba <_dtoa_r+0xa42>
 801374c:	d102      	bne.n	8013754 <_dtoa_r+0xadc>
 801374e:	f018 0f01 	tst.w	r8, #1
 8013752:	d1b2      	bne.n	80136ba <_dtoa_r+0xa42>
 8013754:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013758:	2b30      	cmp	r3, #48	; 0x30
 801375a:	f105 32ff 	add.w	r2, r5, #4294967295
 801375e:	f47f af0a 	bne.w	8013576 <_dtoa_r+0x8fe>
 8013762:	4615      	mov	r5, r2
 8013764:	e7f6      	b.n	8013754 <_dtoa_r+0xadc>
 8013766:	4593      	cmp	fp, r2
 8013768:	d105      	bne.n	8013776 <_dtoa_r+0xafe>
 801376a:	2331      	movs	r3, #49	; 0x31
 801376c:	f10a 0a01 	add.w	sl, sl, #1
 8013770:	f88b 3000 	strb.w	r3, [fp]
 8013774:	e6ff      	b.n	8013576 <_dtoa_r+0x8fe>
 8013776:	4615      	mov	r5, r2
 8013778:	e79f      	b.n	80136ba <_dtoa_r+0xa42>
 801377a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80137e0 <_dtoa_r+0xb68>
 801377e:	e007      	b.n	8013790 <_dtoa_r+0xb18>
 8013780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013782:	f8df b060 	ldr.w	fp, [pc, #96]	; 80137e4 <_dtoa_r+0xb6c>
 8013786:	b11b      	cbz	r3, 8013790 <_dtoa_r+0xb18>
 8013788:	f10b 0308 	add.w	r3, fp, #8
 801378c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801378e:	6013      	str	r3, [r2, #0]
 8013790:	4658      	mov	r0, fp
 8013792:	b017      	add	sp, #92	; 0x5c
 8013794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013798:	9b06      	ldr	r3, [sp, #24]
 801379a:	2b01      	cmp	r3, #1
 801379c:	f77f ae35 	ble.w	801340a <_dtoa_r+0x792>
 80137a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137a2:	9307      	str	r3, [sp, #28]
 80137a4:	e649      	b.n	801343a <_dtoa_r+0x7c2>
 80137a6:	9b02      	ldr	r3, [sp, #8]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	dc03      	bgt.n	80137b4 <_dtoa_r+0xb3c>
 80137ac:	9b06      	ldr	r3, [sp, #24]
 80137ae:	2b02      	cmp	r3, #2
 80137b0:	f73f aecc 	bgt.w	801354c <_dtoa_r+0x8d4>
 80137b4:	465d      	mov	r5, fp
 80137b6:	4639      	mov	r1, r7
 80137b8:	9804      	ldr	r0, [sp, #16]
 80137ba:	f7ff f9cf 	bl	8012b5c <quorem>
 80137be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80137c2:	f805 8b01 	strb.w	r8, [r5], #1
 80137c6:	9a02      	ldr	r2, [sp, #8]
 80137c8:	eba5 030b 	sub.w	r3, r5, fp
 80137cc:	429a      	cmp	r2, r3
 80137ce:	ddb0      	ble.n	8013732 <_dtoa_r+0xaba>
 80137d0:	2300      	movs	r3, #0
 80137d2:	220a      	movs	r2, #10
 80137d4:	9904      	ldr	r1, [sp, #16]
 80137d6:	4620      	mov	r0, r4
 80137d8:	f000 fa6a 	bl	8013cb0 <__multadd>
 80137dc:	9004      	str	r0, [sp, #16]
 80137de:	e7ea      	b.n	80137b6 <_dtoa_r+0xb3e>
 80137e0:	080178a1 	.word	0x080178a1
 80137e4:	080178c5 	.word	0x080178c5

080137e8 <__sflush_r>:
 80137e8:	898a      	ldrh	r2, [r1, #12]
 80137ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ee:	4605      	mov	r5, r0
 80137f0:	0710      	lsls	r0, r2, #28
 80137f2:	460c      	mov	r4, r1
 80137f4:	d458      	bmi.n	80138a8 <__sflush_r+0xc0>
 80137f6:	684b      	ldr	r3, [r1, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	dc05      	bgt.n	8013808 <__sflush_r+0x20>
 80137fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80137fe:	2b00      	cmp	r3, #0
 8013800:	dc02      	bgt.n	8013808 <__sflush_r+0x20>
 8013802:	2000      	movs	r0, #0
 8013804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801380a:	2e00      	cmp	r6, #0
 801380c:	d0f9      	beq.n	8013802 <__sflush_r+0x1a>
 801380e:	2300      	movs	r3, #0
 8013810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013814:	682f      	ldr	r7, [r5, #0]
 8013816:	6a21      	ldr	r1, [r4, #32]
 8013818:	602b      	str	r3, [r5, #0]
 801381a:	d032      	beq.n	8013882 <__sflush_r+0x9a>
 801381c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801381e:	89a3      	ldrh	r3, [r4, #12]
 8013820:	075a      	lsls	r2, r3, #29
 8013822:	d505      	bpl.n	8013830 <__sflush_r+0x48>
 8013824:	6863      	ldr	r3, [r4, #4]
 8013826:	1ac0      	subs	r0, r0, r3
 8013828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801382a:	b10b      	cbz	r3, 8013830 <__sflush_r+0x48>
 801382c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801382e:	1ac0      	subs	r0, r0, r3
 8013830:	2300      	movs	r3, #0
 8013832:	4602      	mov	r2, r0
 8013834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013836:	6a21      	ldr	r1, [r4, #32]
 8013838:	4628      	mov	r0, r5
 801383a:	47b0      	blx	r6
 801383c:	1c43      	adds	r3, r0, #1
 801383e:	89a3      	ldrh	r3, [r4, #12]
 8013840:	d106      	bne.n	8013850 <__sflush_r+0x68>
 8013842:	6829      	ldr	r1, [r5, #0]
 8013844:	291d      	cmp	r1, #29
 8013846:	d848      	bhi.n	80138da <__sflush_r+0xf2>
 8013848:	4a29      	ldr	r2, [pc, #164]	; (80138f0 <__sflush_r+0x108>)
 801384a:	40ca      	lsrs	r2, r1
 801384c:	07d6      	lsls	r6, r2, #31
 801384e:	d544      	bpl.n	80138da <__sflush_r+0xf2>
 8013850:	2200      	movs	r2, #0
 8013852:	6062      	str	r2, [r4, #4]
 8013854:	04d9      	lsls	r1, r3, #19
 8013856:	6922      	ldr	r2, [r4, #16]
 8013858:	6022      	str	r2, [r4, #0]
 801385a:	d504      	bpl.n	8013866 <__sflush_r+0x7e>
 801385c:	1c42      	adds	r2, r0, #1
 801385e:	d101      	bne.n	8013864 <__sflush_r+0x7c>
 8013860:	682b      	ldr	r3, [r5, #0]
 8013862:	b903      	cbnz	r3, 8013866 <__sflush_r+0x7e>
 8013864:	6560      	str	r0, [r4, #84]	; 0x54
 8013866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013868:	602f      	str	r7, [r5, #0]
 801386a:	2900      	cmp	r1, #0
 801386c:	d0c9      	beq.n	8013802 <__sflush_r+0x1a>
 801386e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013872:	4299      	cmp	r1, r3
 8013874:	d002      	beq.n	801387c <__sflush_r+0x94>
 8013876:	4628      	mov	r0, r5
 8013878:	f7fe f98a 	bl	8011b90 <_free_r>
 801387c:	2000      	movs	r0, #0
 801387e:	6360      	str	r0, [r4, #52]	; 0x34
 8013880:	e7c0      	b.n	8013804 <__sflush_r+0x1c>
 8013882:	2301      	movs	r3, #1
 8013884:	4628      	mov	r0, r5
 8013886:	47b0      	blx	r6
 8013888:	1c41      	adds	r1, r0, #1
 801388a:	d1c8      	bne.n	801381e <__sflush_r+0x36>
 801388c:	682b      	ldr	r3, [r5, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d0c5      	beq.n	801381e <__sflush_r+0x36>
 8013892:	2b1d      	cmp	r3, #29
 8013894:	d001      	beq.n	801389a <__sflush_r+0xb2>
 8013896:	2b16      	cmp	r3, #22
 8013898:	d101      	bne.n	801389e <__sflush_r+0xb6>
 801389a:	602f      	str	r7, [r5, #0]
 801389c:	e7b1      	b.n	8013802 <__sflush_r+0x1a>
 801389e:	89a3      	ldrh	r3, [r4, #12]
 80138a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138a4:	81a3      	strh	r3, [r4, #12]
 80138a6:	e7ad      	b.n	8013804 <__sflush_r+0x1c>
 80138a8:	690f      	ldr	r7, [r1, #16]
 80138aa:	2f00      	cmp	r7, #0
 80138ac:	d0a9      	beq.n	8013802 <__sflush_r+0x1a>
 80138ae:	0793      	lsls	r3, r2, #30
 80138b0:	680e      	ldr	r6, [r1, #0]
 80138b2:	bf08      	it	eq
 80138b4:	694b      	ldreq	r3, [r1, #20]
 80138b6:	600f      	str	r7, [r1, #0]
 80138b8:	bf18      	it	ne
 80138ba:	2300      	movne	r3, #0
 80138bc:	eba6 0807 	sub.w	r8, r6, r7
 80138c0:	608b      	str	r3, [r1, #8]
 80138c2:	f1b8 0f00 	cmp.w	r8, #0
 80138c6:	dd9c      	ble.n	8013802 <__sflush_r+0x1a>
 80138c8:	4643      	mov	r3, r8
 80138ca:	463a      	mov	r2, r7
 80138cc:	6a21      	ldr	r1, [r4, #32]
 80138ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80138d0:	4628      	mov	r0, r5
 80138d2:	47b0      	blx	r6
 80138d4:	2800      	cmp	r0, #0
 80138d6:	dc06      	bgt.n	80138e6 <__sflush_r+0xfe>
 80138d8:	89a3      	ldrh	r3, [r4, #12]
 80138da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138de:	81a3      	strh	r3, [r4, #12]
 80138e0:	f04f 30ff 	mov.w	r0, #4294967295
 80138e4:	e78e      	b.n	8013804 <__sflush_r+0x1c>
 80138e6:	4407      	add	r7, r0
 80138e8:	eba8 0800 	sub.w	r8, r8, r0
 80138ec:	e7e9      	b.n	80138c2 <__sflush_r+0xda>
 80138ee:	bf00      	nop
 80138f0:	20400001 	.word	0x20400001

080138f4 <_fflush_r>:
 80138f4:	b538      	push	{r3, r4, r5, lr}
 80138f6:	690b      	ldr	r3, [r1, #16]
 80138f8:	4605      	mov	r5, r0
 80138fa:	460c      	mov	r4, r1
 80138fc:	b1db      	cbz	r3, 8013936 <_fflush_r+0x42>
 80138fe:	b118      	cbz	r0, 8013908 <_fflush_r+0x14>
 8013900:	6983      	ldr	r3, [r0, #24]
 8013902:	b90b      	cbnz	r3, 8013908 <_fflush_r+0x14>
 8013904:	f000 f860 	bl	80139c8 <__sinit>
 8013908:	4b0c      	ldr	r3, [pc, #48]	; (801393c <_fflush_r+0x48>)
 801390a:	429c      	cmp	r4, r3
 801390c:	d109      	bne.n	8013922 <_fflush_r+0x2e>
 801390e:	686c      	ldr	r4, [r5, #4]
 8013910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013914:	b17b      	cbz	r3, 8013936 <_fflush_r+0x42>
 8013916:	4621      	mov	r1, r4
 8013918:	4628      	mov	r0, r5
 801391a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801391e:	f7ff bf63 	b.w	80137e8 <__sflush_r>
 8013922:	4b07      	ldr	r3, [pc, #28]	; (8013940 <_fflush_r+0x4c>)
 8013924:	429c      	cmp	r4, r3
 8013926:	d101      	bne.n	801392c <_fflush_r+0x38>
 8013928:	68ac      	ldr	r4, [r5, #8]
 801392a:	e7f1      	b.n	8013910 <_fflush_r+0x1c>
 801392c:	4b05      	ldr	r3, [pc, #20]	; (8013944 <_fflush_r+0x50>)
 801392e:	429c      	cmp	r4, r3
 8013930:	bf08      	it	eq
 8013932:	68ec      	ldreq	r4, [r5, #12]
 8013934:	e7ec      	b.n	8013910 <_fflush_r+0x1c>
 8013936:	2000      	movs	r0, #0
 8013938:	bd38      	pop	{r3, r4, r5, pc}
 801393a:	bf00      	nop
 801393c:	080178f4 	.word	0x080178f4
 8013940:	08017914 	.word	0x08017914
 8013944:	080178d4 	.word	0x080178d4

08013948 <std>:
 8013948:	2300      	movs	r3, #0
 801394a:	b510      	push	{r4, lr}
 801394c:	4604      	mov	r4, r0
 801394e:	e9c0 3300 	strd	r3, r3, [r0]
 8013952:	6083      	str	r3, [r0, #8]
 8013954:	8181      	strh	r1, [r0, #12]
 8013956:	6643      	str	r3, [r0, #100]	; 0x64
 8013958:	81c2      	strh	r2, [r0, #14]
 801395a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801395e:	6183      	str	r3, [r0, #24]
 8013960:	4619      	mov	r1, r3
 8013962:	2208      	movs	r2, #8
 8013964:	305c      	adds	r0, #92	; 0x5c
 8013966:	f7fe f90a 	bl	8011b7e <memset>
 801396a:	4b05      	ldr	r3, [pc, #20]	; (8013980 <std+0x38>)
 801396c:	6263      	str	r3, [r4, #36]	; 0x24
 801396e:	4b05      	ldr	r3, [pc, #20]	; (8013984 <std+0x3c>)
 8013970:	62a3      	str	r3, [r4, #40]	; 0x28
 8013972:	4b05      	ldr	r3, [pc, #20]	; (8013988 <std+0x40>)
 8013974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013976:	4b05      	ldr	r3, [pc, #20]	; (801398c <std+0x44>)
 8013978:	6224      	str	r4, [r4, #32]
 801397a:	6323      	str	r3, [r4, #48]	; 0x30
 801397c:	bd10      	pop	{r4, pc}
 801397e:	bf00      	nop
 8013980:	08012901 	.word	0x08012901
 8013984:	08012923 	.word	0x08012923
 8013988:	0801295b 	.word	0x0801295b
 801398c:	0801297f 	.word	0x0801297f

08013990 <_cleanup_r>:
 8013990:	4901      	ldr	r1, [pc, #4]	; (8013998 <_cleanup_r+0x8>)
 8013992:	f000 b885 	b.w	8013aa0 <_fwalk_reent>
 8013996:	bf00      	nop
 8013998:	080138f5 	.word	0x080138f5

0801399c <__sfmoreglue>:
 801399c:	b570      	push	{r4, r5, r6, lr}
 801399e:	1e4a      	subs	r2, r1, #1
 80139a0:	2568      	movs	r5, #104	; 0x68
 80139a2:	4355      	muls	r5, r2
 80139a4:	460e      	mov	r6, r1
 80139a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80139aa:	f7fe f93f 	bl	8011c2c <_malloc_r>
 80139ae:	4604      	mov	r4, r0
 80139b0:	b140      	cbz	r0, 80139c4 <__sfmoreglue+0x28>
 80139b2:	2100      	movs	r1, #0
 80139b4:	e9c0 1600 	strd	r1, r6, [r0]
 80139b8:	300c      	adds	r0, #12
 80139ba:	60a0      	str	r0, [r4, #8]
 80139bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80139c0:	f7fe f8dd 	bl	8011b7e <memset>
 80139c4:	4620      	mov	r0, r4
 80139c6:	bd70      	pop	{r4, r5, r6, pc}

080139c8 <__sinit>:
 80139c8:	6983      	ldr	r3, [r0, #24]
 80139ca:	b510      	push	{r4, lr}
 80139cc:	4604      	mov	r4, r0
 80139ce:	bb33      	cbnz	r3, 8013a1e <__sinit+0x56>
 80139d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80139d4:	6503      	str	r3, [r0, #80]	; 0x50
 80139d6:	4b12      	ldr	r3, [pc, #72]	; (8013a20 <__sinit+0x58>)
 80139d8:	4a12      	ldr	r2, [pc, #72]	; (8013a24 <__sinit+0x5c>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	6282      	str	r2, [r0, #40]	; 0x28
 80139de:	4298      	cmp	r0, r3
 80139e0:	bf04      	itt	eq
 80139e2:	2301      	moveq	r3, #1
 80139e4:	6183      	streq	r3, [r0, #24]
 80139e6:	f000 f81f 	bl	8013a28 <__sfp>
 80139ea:	6060      	str	r0, [r4, #4]
 80139ec:	4620      	mov	r0, r4
 80139ee:	f000 f81b 	bl	8013a28 <__sfp>
 80139f2:	60a0      	str	r0, [r4, #8]
 80139f4:	4620      	mov	r0, r4
 80139f6:	f000 f817 	bl	8013a28 <__sfp>
 80139fa:	2200      	movs	r2, #0
 80139fc:	60e0      	str	r0, [r4, #12]
 80139fe:	2104      	movs	r1, #4
 8013a00:	6860      	ldr	r0, [r4, #4]
 8013a02:	f7ff ffa1 	bl	8013948 <std>
 8013a06:	2201      	movs	r2, #1
 8013a08:	2109      	movs	r1, #9
 8013a0a:	68a0      	ldr	r0, [r4, #8]
 8013a0c:	f7ff ff9c 	bl	8013948 <std>
 8013a10:	2202      	movs	r2, #2
 8013a12:	2112      	movs	r1, #18
 8013a14:	68e0      	ldr	r0, [r4, #12]
 8013a16:	f7ff ff97 	bl	8013948 <std>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	61a3      	str	r3, [r4, #24]
 8013a1e:	bd10      	pop	{r4, pc}
 8013a20:	0801787c 	.word	0x0801787c
 8013a24:	08013991 	.word	0x08013991

08013a28 <__sfp>:
 8013a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a2a:	4b1b      	ldr	r3, [pc, #108]	; (8013a98 <__sfp+0x70>)
 8013a2c:	681e      	ldr	r6, [r3, #0]
 8013a2e:	69b3      	ldr	r3, [r6, #24]
 8013a30:	4607      	mov	r7, r0
 8013a32:	b913      	cbnz	r3, 8013a3a <__sfp+0x12>
 8013a34:	4630      	mov	r0, r6
 8013a36:	f7ff ffc7 	bl	80139c8 <__sinit>
 8013a3a:	3648      	adds	r6, #72	; 0x48
 8013a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a40:	3b01      	subs	r3, #1
 8013a42:	d503      	bpl.n	8013a4c <__sfp+0x24>
 8013a44:	6833      	ldr	r3, [r6, #0]
 8013a46:	b133      	cbz	r3, 8013a56 <__sfp+0x2e>
 8013a48:	6836      	ldr	r6, [r6, #0]
 8013a4a:	e7f7      	b.n	8013a3c <__sfp+0x14>
 8013a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a50:	b16d      	cbz	r5, 8013a6e <__sfp+0x46>
 8013a52:	3468      	adds	r4, #104	; 0x68
 8013a54:	e7f4      	b.n	8013a40 <__sfp+0x18>
 8013a56:	2104      	movs	r1, #4
 8013a58:	4638      	mov	r0, r7
 8013a5a:	f7ff ff9f 	bl	801399c <__sfmoreglue>
 8013a5e:	6030      	str	r0, [r6, #0]
 8013a60:	2800      	cmp	r0, #0
 8013a62:	d1f1      	bne.n	8013a48 <__sfp+0x20>
 8013a64:	230c      	movs	r3, #12
 8013a66:	603b      	str	r3, [r7, #0]
 8013a68:	4604      	mov	r4, r0
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a6e:	4b0b      	ldr	r3, [pc, #44]	; (8013a9c <__sfp+0x74>)
 8013a70:	6665      	str	r5, [r4, #100]	; 0x64
 8013a72:	e9c4 5500 	strd	r5, r5, [r4]
 8013a76:	60a5      	str	r5, [r4, #8]
 8013a78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013a7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013a80:	2208      	movs	r2, #8
 8013a82:	4629      	mov	r1, r5
 8013a84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a88:	f7fe f879 	bl	8011b7e <memset>
 8013a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a94:	e7e9      	b.n	8013a6a <__sfp+0x42>
 8013a96:	bf00      	nop
 8013a98:	0801787c 	.word	0x0801787c
 8013a9c:	ffff0001 	.word	0xffff0001

08013aa0 <_fwalk_reent>:
 8013aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013aa4:	4680      	mov	r8, r0
 8013aa6:	4689      	mov	r9, r1
 8013aa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013aac:	2600      	movs	r6, #0
 8013aae:	b914      	cbnz	r4, 8013ab6 <_fwalk_reent+0x16>
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ab6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013aba:	3f01      	subs	r7, #1
 8013abc:	d501      	bpl.n	8013ac2 <_fwalk_reent+0x22>
 8013abe:	6824      	ldr	r4, [r4, #0]
 8013ac0:	e7f5      	b.n	8013aae <_fwalk_reent+0xe>
 8013ac2:	89ab      	ldrh	r3, [r5, #12]
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d907      	bls.n	8013ad8 <_fwalk_reent+0x38>
 8013ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013acc:	3301      	adds	r3, #1
 8013ace:	d003      	beq.n	8013ad8 <_fwalk_reent+0x38>
 8013ad0:	4629      	mov	r1, r5
 8013ad2:	4640      	mov	r0, r8
 8013ad4:	47c8      	blx	r9
 8013ad6:	4306      	orrs	r6, r0
 8013ad8:	3568      	adds	r5, #104	; 0x68
 8013ada:	e7ee      	b.n	8013aba <_fwalk_reent+0x1a>

08013adc <_localeconv_r>:
 8013adc:	4b04      	ldr	r3, [pc, #16]	; (8013af0 <_localeconv_r+0x14>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	6a18      	ldr	r0, [r3, #32]
 8013ae2:	4b04      	ldr	r3, [pc, #16]	; (8013af4 <_localeconv_r+0x18>)
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	bf08      	it	eq
 8013ae8:	4618      	moveq	r0, r3
 8013aea:	30f0      	adds	r0, #240	; 0xf0
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop
 8013af0:	20000430 	.word	0x20000430
 8013af4:	20000494 	.word	0x20000494

08013af8 <_lseek_r>:
 8013af8:	b538      	push	{r3, r4, r5, lr}
 8013afa:	4c07      	ldr	r4, [pc, #28]	; (8013b18 <_lseek_r+0x20>)
 8013afc:	4605      	mov	r5, r0
 8013afe:	4608      	mov	r0, r1
 8013b00:	4611      	mov	r1, r2
 8013b02:	2200      	movs	r2, #0
 8013b04:	6022      	str	r2, [r4, #0]
 8013b06:	461a      	mov	r2, r3
 8013b08:	f7f1 fccc 	bl	80054a4 <_lseek>
 8013b0c:	1c43      	adds	r3, r0, #1
 8013b0e:	d102      	bne.n	8013b16 <_lseek_r+0x1e>
 8013b10:	6823      	ldr	r3, [r4, #0]
 8013b12:	b103      	cbz	r3, 8013b16 <_lseek_r+0x1e>
 8013b14:	602b      	str	r3, [r5, #0]
 8013b16:	bd38      	pop	{r3, r4, r5, pc}
 8013b18:	200065ac 	.word	0x200065ac

08013b1c <__swhatbuf_r>:
 8013b1c:	b570      	push	{r4, r5, r6, lr}
 8013b1e:	460e      	mov	r6, r1
 8013b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b24:	2900      	cmp	r1, #0
 8013b26:	b096      	sub	sp, #88	; 0x58
 8013b28:	4614      	mov	r4, r2
 8013b2a:	461d      	mov	r5, r3
 8013b2c:	da07      	bge.n	8013b3e <__swhatbuf_r+0x22>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	602b      	str	r3, [r5, #0]
 8013b32:	89b3      	ldrh	r3, [r6, #12]
 8013b34:	061a      	lsls	r2, r3, #24
 8013b36:	d410      	bmi.n	8013b5a <__swhatbuf_r+0x3e>
 8013b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b3c:	e00e      	b.n	8013b5c <__swhatbuf_r+0x40>
 8013b3e:	466a      	mov	r2, sp
 8013b40:	f000 fd22 	bl	8014588 <_fstat_r>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	dbf2      	blt.n	8013b2e <__swhatbuf_r+0x12>
 8013b48:	9a01      	ldr	r2, [sp, #4]
 8013b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b52:	425a      	negs	r2, r3
 8013b54:	415a      	adcs	r2, r3
 8013b56:	602a      	str	r2, [r5, #0]
 8013b58:	e7ee      	b.n	8013b38 <__swhatbuf_r+0x1c>
 8013b5a:	2340      	movs	r3, #64	; 0x40
 8013b5c:	2000      	movs	r0, #0
 8013b5e:	6023      	str	r3, [r4, #0]
 8013b60:	b016      	add	sp, #88	; 0x58
 8013b62:	bd70      	pop	{r4, r5, r6, pc}

08013b64 <__smakebuf_r>:
 8013b64:	898b      	ldrh	r3, [r1, #12]
 8013b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b68:	079d      	lsls	r5, r3, #30
 8013b6a:	4606      	mov	r6, r0
 8013b6c:	460c      	mov	r4, r1
 8013b6e:	d507      	bpl.n	8013b80 <__smakebuf_r+0x1c>
 8013b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b74:	6023      	str	r3, [r4, #0]
 8013b76:	6123      	str	r3, [r4, #16]
 8013b78:	2301      	movs	r3, #1
 8013b7a:	6163      	str	r3, [r4, #20]
 8013b7c:	b002      	add	sp, #8
 8013b7e:	bd70      	pop	{r4, r5, r6, pc}
 8013b80:	ab01      	add	r3, sp, #4
 8013b82:	466a      	mov	r2, sp
 8013b84:	f7ff ffca 	bl	8013b1c <__swhatbuf_r>
 8013b88:	9900      	ldr	r1, [sp, #0]
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7fe f84d 	bl	8011c2c <_malloc_r>
 8013b92:	b948      	cbnz	r0, 8013ba8 <__smakebuf_r+0x44>
 8013b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b98:	059a      	lsls	r2, r3, #22
 8013b9a:	d4ef      	bmi.n	8013b7c <__smakebuf_r+0x18>
 8013b9c:	f023 0303 	bic.w	r3, r3, #3
 8013ba0:	f043 0302 	orr.w	r3, r3, #2
 8013ba4:	81a3      	strh	r3, [r4, #12]
 8013ba6:	e7e3      	b.n	8013b70 <__smakebuf_r+0xc>
 8013ba8:	4b0d      	ldr	r3, [pc, #52]	; (8013be0 <__smakebuf_r+0x7c>)
 8013baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8013bac:	89a3      	ldrh	r3, [r4, #12]
 8013bae:	6020      	str	r0, [r4, #0]
 8013bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bb4:	81a3      	strh	r3, [r4, #12]
 8013bb6:	9b00      	ldr	r3, [sp, #0]
 8013bb8:	6163      	str	r3, [r4, #20]
 8013bba:	9b01      	ldr	r3, [sp, #4]
 8013bbc:	6120      	str	r0, [r4, #16]
 8013bbe:	b15b      	cbz	r3, 8013bd8 <__smakebuf_r+0x74>
 8013bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	f000 fcf1 	bl	80145ac <_isatty_r>
 8013bca:	b128      	cbz	r0, 8013bd8 <__smakebuf_r+0x74>
 8013bcc:	89a3      	ldrh	r3, [r4, #12]
 8013bce:	f023 0303 	bic.w	r3, r3, #3
 8013bd2:	f043 0301 	orr.w	r3, r3, #1
 8013bd6:	81a3      	strh	r3, [r4, #12]
 8013bd8:	89a3      	ldrh	r3, [r4, #12]
 8013bda:	431d      	orrs	r5, r3
 8013bdc:	81a5      	strh	r5, [r4, #12]
 8013bde:	e7cd      	b.n	8013b7c <__smakebuf_r+0x18>
 8013be0:	08013991 	.word	0x08013991

08013be4 <memmove>:
 8013be4:	4288      	cmp	r0, r1
 8013be6:	b510      	push	{r4, lr}
 8013be8:	eb01 0302 	add.w	r3, r1, r2
 8013bec:	d807      	bhi.n	8013bfe <memmove+0x1a>
 8013bee:	1e42      	subs	r2, r0, #1
 8013bf0:	4299      	cmp	r1, r3
 8013bf2:	d00a      	beq.n	8013c0a <memmove+0x26>
 8013bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bf8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013bfc:	e7f8      	b.n	8013bf0 <memmove+0xc>
 8013bfe:	4283      	cmp	r3, r0
 8013c00:	d9f5      	bls.n	8013bee <memmove+0xa>
 8013c02:	1881      	adds	r1, r0, r2
 8013c04:	1ad2      	subs	r2, r2, r3
 8013c06:	42d3      	cmn	r3, r2
 8013c08:	d100      	bne.n	8013c0c <memmove+0x28>
 8013c0a:	bd10      	pop	{r4, pc}
 8013c0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c10:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013c14:	e7f7      	b.n	8013c06 <memmove+0x22>

08013c16 <__malloc_lock>:
 8013c16:	4770      	bx	lr

08013c18 <__malloc_unlock>:
 8013c18:	4770      	bx	lr

08013c1a <_Balloc>:
 8013c1a:	b570      	push	{r4, r5, r6, lr}
 8013c1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013c1e:	4604      	mov	r4, r0
 8013c20:	460e      	mov	r6, r1
 8013c22:	b93d      	cbnz	r5, 8013c34 <_Balloc+0x1a>
 8013c24:	2010      	movs	r0, #16
 8013c26:	f7fd ff8f 	bl	8011b48 <malloc>
 8013c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8013c2c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013c30:	6005      	str	r5, [r0, #0]
 8013c32:	60c5      	str	r5, [r0, #12]
 8013c34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013c36:	68eb      	ldr	r3, [r5, #12]
 8013c38:	b183      	cbz	r3, 8013c5c <_Balloc+0x42>
 8013c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c3c:	68db      	ldr	r3, [r3, #12]
 8013c3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013c42:	b9b8      	cbnz	r0, 8013c74 <_Balloc+0x5a>
 8013c44:	2101      	movs	r1, #1
 8013c46:	fa01 f506 	lsl.w	r5, r1, r6
 8013c4a:	1d6a      	adds	r2, r5, #5
 8013c4c:	0092      	lsls	r2, r2, #2
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f000 fabe 	bl	80141d0 <_calloc_r>
 8013c54:	b160      	cbz	r0, 8013c70 <_Balloc+0x56>
 8013c56:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013c5a:	e00e      	b.n	8013c7a <_Balloc+0x60>
 8013c5c:	2221      	movs	r2, #33	; 0x21
 8013c5e:	2104      	movs	r1, #4
 8013c60:	4620      	mov	r0, r4
 8013c62:	f000 fab5 	bl	80141d0 <_calloc_r>
 8013c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c68:	60e8      	str	r0, [r5, #12]
 8013c6a:	68db      	ldr	r3, [r3, #12]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d1e4      	bne.n	8013c3a <_Balloc+0x20>
 8013c70:	2000      	movs	r0, #0
 8013c72:	bd70      	pop	{r4, r5, r6, pc}
 8013c74:	6802      	ldr	r2, [r0, #0]
 8013c76:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c80:	e7f7      	b.n	8013c72 <_Balloc+0x58>

08013c82 <_Bfree>:
 8013c82:	b570      	push	{r4, r5, r6, lr}
 8013c84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013c86:	4606      	mov	r6, r0
 8013c88:	460d      	mov	r5, r1
 8013c8a:	b93c      	cbnz	r4, 8013c9c <_Bfree+0x1a>
 8013c8c:	2010      	movs	r0, #16
 8013c8e:	f7fd ff5b 	bl	8011b48 <malloc>
 8013c92:	6270      	str	r0, [r6, #36]	; 0x24
 8013c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c98:	6004      	str	r4, [r0, #0]
 8013c9a:	60c4      	str	r4, [r0, #12]
 8013c9c:	b13d      	cbz	r5, 8013cae <_Bfree+0x2c>
 8013c9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013ca0:	686a      	ldr	r2, [r5, #4]
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ca8:	6029      	str	r1, [r5, #0]
 8013caa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013cae:	bd70      	pop	{r4, r5, r6, pc}

08013cb0 <__multadd>:
 8013cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb4:	690d      	ldr	r5, [r1, #16]
 8013cb6:	461f      	mov	r7, r3
 8013cb8:	4606      	mov	r6, r0
 8013cba:	460c      	mov	r4, r1
 8013cbc:	f101 0c14 	add.w	ip, r1, #20
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	f8dc 0000 	ldr.w	r0, [ip]
 8013cc6:	b281      	uxth	r1, r0
 8013cc8:	fb02 7101 	mla	r1, r2, r1, r7
 8013ccc:	0c0f      	lsrs	r7, r1, #16
 8013cce:	0c00      	lsrs	r0, r0, #16
 8013cd0:	fb02 7000 	mla	r0, r2, r0, r7
 8013cd4:	b289      	uxth	r1, r1
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013cdc:	429d      	cmp	r5, r3
 8013cde:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013ce2:	f84c 1b04 	str.w	r1, [ip], #4
 8013ce6:	dcec      	bgt.n	8013cc2 <__multadd+0x12>
 8013ce8:	b1d7      	cbz	r7, 8013d20 <__multadd+0x70>
 8013cea:	68a3      	ldr	r3, [r4, #8]
 8013cec:	42ab      	cmp	r3, r5
 8013cee:	dc12      	bgt.n	8013d16 <__multadd+0x66>
 8013cf0:	6861      	ldr	r1, [r4, #4]
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	3101      	adds	r1, #1
 8013cf6:	f7ff ff90 	bl	8013c1a <_Balloc>
 8013cfa:	6922      	ldr	r2, [r4, #16]
 8013cfc:	3202      	adds	r2, #2
 8013cfe:	f104 010c 	add.w	r1, r4, #12
 8013d02:	4680      	mov	r8, r0
 8013d04:	0092      	lsls	r2, r2, #2
 8013d06:	300c      	adds	r0, #12
 8013d08:	f7fd ff2e 	bl	8011b68 <memcpy>
 8013d0c:	4621      	mov	r1, r4
 8013d0e:	4630      	mov	r0, r6
 8013d10:	f7ff ffb7 	bl	8013c82 <_Bfree>
 8013d14:	4644      	mov	r4, r8
 8013d16:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013d1a:	3501      	adds	r5, #1
 8013d1c:	615f      	str	r7, [r3, #20]
 8013d1e:	6125      	str	r5, [r4, #16]
 8013d20:	4620      	mov	r0, r4
 8013d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d26 <__hi0bits>:
 8013d26:	0c02      	lsrs	r2, r0, #16
 8013d28:	0412      	lsls	r2, r2, #16
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	b9b2      	cbnz	r2, 8013d5c <__hi0bits+0x36>
 8013d2e:	0403      	lsls	r3, r0, #16
 8013d30:	2010      	movs	r0, #16
 8013d32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013d36:	bf04      	itt	eq
 8013d38:	021b      	lsleq	r3, r3, #8
 8013d3a:	3008      	addeq	r0, #8
 8013d3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013d40:	bf04      	itt	eq
 8013d42:	011b      	lsleq	r3, r3, #4
 8013d44:	3004      	addeq	r0, #4
 8013d46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013d4a:	bf04      	itt	eq
 8013d4c:	009b      	lsleq	r3, r3, #2
 8013d4e:	3002      	addeq	r0, #2
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	db06      	blt.n	8013d62 <__hi0bits+0x3c>
 8013d54:	005b      	lsls	r3, r3, #1
 8013d56:	d503      	bpl.n	8013d60 <__hi0bits+0x3a>
 8013d58:	3001      	adds	r0, #1
 8013d5a:	4770      	bx	lr
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	e7e8      	b.n	8013d32 <__hi0bits+0xc>
 8013d60:	2020      	movs	r0, #32
 8013d62:	4770      	bx	lr

08013d64 <__lo0bits>:
 8013d64:	6803      	ldr	r3, [r0, #0]
 8013d66:	f013 0207 	ands.w	r2, r3, #7
 8013d6a:	4601      	mov	r1, r0
 8013d6c:	d00b      	beq.n	8013d86 <__lo0bits+0x22>
 8013d6e:	07da      	lsls	r2, r3, #31
 8013d70:	d423      	bmi.n	8013dba <__lo0bits+0x56>
 8013d72:	0798      	lsls	r0, r3, #30
 8013d74:	bf49      	itett	mi
 8013d76:	085b      	lsrmi	r3, r3, #1
 8013d78:	089b      	lsrpl	r3, r3, #2
 8013d7a:	2001      	movmi	r0, #1
 8013d7c:	600b      	strmi	r3, [r1, #0]
 8013d7e:	bf5c      	itt	pl
 8013d80:	600b      	strpl	r3, [r1, #0]
 8013d82:	2002      	movpl	r0, #2
 8013d84:	4770      	bx	lr
 8013d86:	b298      	uxth	r0, r3
 8013d88:	b9a8      	cbnz	r0, 8013db6 <__lo0bits+0x52>
 8013d8a:	0c1b      	lsrs	r3, r3, #16
 8013d8c:	2010      	movs	r0, #16
 8013d8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013d92:	bf04      	itt	eq
 8013d94:	0a1b      	lsreq	r3, r3, #8
 8013d96:	3008      	addeq	r0, #8
 8013d98:	071a      	lsls	r2, r3, #28
 8013d9a:	bf04      	itt	eq
 8013d9c:	091b      	lsreq	r3, r3, #4
 8013d9e:	3004      	addeq	r0, #4
 8013da0:	079a      	lsls	r2, r3, #30
 8013da2:	bf04      	itt	eq
 8013da4:	089b      	lsreq	r3, r3, #2
 8013da6:	3002      	addeq	r0, #2
 8013da8:	07da      	lsls	r2, r3, #31
 8013daa:	d402      	bmi.n	8013db2 <__lo0bits+0x4e>
 8013dac:	085b      	lsrs	r3, r3, #1
 8013dae:	d006      	beq.n	8013dbe <__lo0bits+0x5a>
 8013db0:	3001      	adds	r0, #1
 8013db2:	600b      	str	r3, [r1, #0]
 8013db4:	4770      	bx	lr
 8013db6:	4610      	mov	r0, r2
 8013db8:	e7e9      	b.n	8013d8e <__lo0bits+0x2a>
 8013dba:	2000      	movs	r0, #0
 8013dbc:	4770      	bx	lr
 8013dbe:	2020      	movs	r0, #32
 8013dc0:	4770      	bx	lr

08013dc2 <__i2b>:
 8013dc2:	b510      	push	{r4, lr}
 8013dc4:	460c      	mov	r4, r1
 8013dc6:	2101      	movs	r1, #1
 8013dc8:	f7ff ff27 	bl	8013c1a <_Balloc>
 8013dcc:	2201      	movs	r2, #1
 8013dce:	6144      	str	r4, [r0, #20]
 8013dd0:	6102      	str	r2, [r0, #16]
 8013dd2:	bd10      	pop	{r4, pc}

08013dd4 <__multiply>:
 8013dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd8:	4614      	mov	r4, r2
 8013dda:	690a      	ldr	r2, [r1, #16]
 8013ddc:	6923      	ldr	r3, [r4, #16]
 8013dde:	429a      	cmp	r2, r3
 8013de0:	bfb8      	it	lt
 8013de2:	460b      	movlt	r3, r1
 8013de4:	4688      	mov	r8, r1
 8013de6:	bfbc      	itt	lt
 8013de8:	46a0      	movlt	r8, r4
 8013dea:	461c      	movlt	r4, r3
 8013dec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013df0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013df4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013df8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013dfc:	eb07 0609 	add.w	r6, r7, r9
 8013e00:	42b3      	cmp	r3, r6
 8013e02:	bfb8      	it	lt
 8013e04:	3101      	addlt	r1, #1
 8013e06:	f7ff ff08 	bl	8013c1a <_Balloc>
 8013e0a:	f100 0514 	add.w	r5, r0, #20
 8013e0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013e12:	462b      	mov	r3, r5
 8013e14:	2200      	movs	r2, #0
 8013e16:	4573      	cmp	r3, lr
 8013e18:	d316      	bcc.n	8013e48 <__multiply+0x74>
 8013e1a:	f104 0214 	add.w	r2, r4, #20
 8013e1e:	f108 0114 	add.w	r1, r8, #20
 8013e22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013e26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013e2a:	9300      	str	r3, [sp, #0]
 8013e2c:	9b00      	ldr	r3, [sp, #0]
 8013e2e:	9201      	str	r2, [sp, #4]
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d80c      	bhi.n	8013e4e <__multiply+0x7a>
 8013e34:	2e00      	cmp	r6, #0
 8013e36:	dd03      	ble.n	8013e40 <__multiply+0x6c>
 8013e38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d05d      	beq.n	8013efc <__multiply+0x128>
 8013e40:	6106      	str	r6, [r0, #16]
 8013e42:	b003      	add	sp, #12
 8013e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e48:	f843 2b04 	str.w	r2, [r3], #4
 8013e4c:	e7e3      	b.n	8013e16 <__multiply+0x42>
 8013e4e:	f8b2 b000 	ldrh.w	fp, [r2]
 8013e52:	f1bb 0f00 	cmp.w	fp, #0
 8013e56:	d023      	beq.n	8013ea0 <__multiply+0xcc>
 8013e58:	4689      	mov	r9, r1
 8013e5a:	46ac      	mov	ip, r5
 8013e5c:	f04f 0800 	mov.w	r8, #0
 8013e60:	f859 4b04 	ldr.w	r4, [r9], #4
 8013e64:	f8dc a000 	ldr.w	sl, [ip]
 8013e68:	b2a3      	uxth	r3, r4
 8013e6a:	fa1f fa8a 	uxth.w	sl, sl
 8013e6e:	fb0b a303 	mla	r3, fp, r3, sl
 8013e72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013e76:	f8dc 4000 	ldr.w	r4, [ip]
 8013e7a:	4443      	add	r3, r8
 8013e7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013e80:	fb0b 840a 	mla	r4, fp, sl, r8
 8013e84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013e88:	46e2      	mov	sl, ip
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013e90:	454f      	cmp	r7, r9
 8013e92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013e96:	f84a 3b04 	str.w	r3, [sl], #4
 8013e9a:	d82b      	bhi.n	8013ef4 <__multiply+0x120>
 8013e9c:	f8cc 8004 	str.w	r8, [ip, #4]
 8013ea0:	9b01      	ldr	r3, [sp, #4]
 8013ea2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013ea6:	3204      	adds	r2, #4
 8013ea8:	f1ba 0f00 	cmp.w	sl, #0
 8013eac:	d020      	beq.n	8013ef0 <__multiply+0x11c>
 8013eae:	682b      	ldr	r3, [r5, #0]
 8013eb0:	4689      	mov	r9, r1
 8013eb2:	46a8      	mov	r8, r5
 8013eb4:	f04f 0b00 	mov.w	fp, #0
 8013eb8:	f8b9 c000 	ldrh.w	ip, [r9]
 8013ebc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013ec0:	fb0a 440c 	mla	r4, sl, ip, r4
 8013ec4:	445c      	add	r4, fp
 8013ec6:	46c4      	mov	ip, r8
 8013ec8:	b29b      	uxth	r3, r3
 8013eca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013ece:	f84c 3b04 	str.w	r3, [ip], #4
 8013ed2:	f859 3b04 	ldr.w	r3, [r9], #4
 8013ed6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013eda:	0c1b      	lsrs	r3, r3, #16
 8013edc:	fb0a b303 	mla	r3, sl, r3, fp
 8013ee0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013ee4:	454f      	cmp	r7, r9
 8013ee6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013eea:	d805      	bhi.n	8013ef8 <__multiply+0x124>
 8013eec:	f8c8 3004 	str.w	r3, [r8, #4]
 8013ef0:	3504      	adds	r5, #4
 8013ef2:	e79b      	b.n	8013e2c <__multiply+0x58>
 8013ef4:	46d4      	mov	ip, sl
 8013ef6:	e7b3      	b.n	8013e60 <__multiply+0x8c>
 8013ef8:	46e0      	mov	r8, ip
 8013efa:	e7dd      	b.n	8013eb8 <__multiply+0xe4>
 8013efc:	3e01      	subs	r6, #1
 8013efe:	e799      	b.n	8013e34 <__multiply+0x60>

08013f00 <__pow5mult>:
 8013f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f04:	4615      	mov	r5, r2
 8013f06:	f012 0203 	ands.w	r2, r2, #3
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	460f      	mov	r7, r1
 8013f0e:	d007      	beq.n	8013f20 <__pow5mult+0x20>
 8013f10:	3a01      	subs	r2, #1
 8013f12:	4c21      	ldr	r4, [pc, #132]	; (8013f98 <__pow5mult+0x98>)
 8013f14:	2300      	movs	r3, #0
 8013f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f1a:	f7ff fec9 	bl	8013cb0 <__multadd>
 8013f1e:	4607      	mov	r7, r0
 8013f20:	10ad      	asrs	r5, r5, #2
 8013f22:	d035      	beq.n	8013f90 <__pow5mult+0x90>
 8013f24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013f26:	b93c      	cbnz	r4, 8013f38 <__pow5mult+0x38>
 8013f28:	2010      	movs	r0, #16
 8013f2a:	f7fd fe0d 	bl	8011b48 <malloc>
 8013f2e:	6270      	str	r0, [r6, #36]	; 0x24
 8013f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f34:	6004      	str	r4, [r0, #0]
 8013f36:	60c4      	str	r4, [r0, #12]
 8013f38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f40:	b94c      	cbnz	r4, 8013f56 <__pow5mult+0x56>
 8013f42:	f240 2171 	movw	r1, #625	; 0x271
 8013f46:	4630      	mov	r0, r6
 8013f48:	f7ff ff3b 	bl	8013dc2 <__i2b>
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f52:	4604      	mov	r4, r0
 8013f54:	6003      	str	r3, [r0, #0]
 8013f56:	f04f 0800 	mov.w	r8, #0
 8013f5a:	07eb      	lsls	r3, r5, #31
 8013f5c:	d50a      	bpl.n	8013f74 <__pow5mult+0x74>
 8013f5e:	4639      	mov	r1, r7
 8013f60:	4622      	mov	r2, r4
 8013f62:	4630      	mov	r0, r6
 8013f64:	f7ff ff36 	bl	8013dd4 <__multiply>
 8013f68:	4639      	mov	r1, r7
 8013f6a:	4681      	mov	r9, r0
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	f7ff fe88 	bl	8013c82 <_Bfree>
 8013f72:	464f      	mov	r7, r9
 8013f74:	106d      	asrs	r5, r5, #1
 8013f76:	d00b      	beq.n	8013f90 <__pow5mult+0x90>
 8013f78:	6820      	ldr	r0, [r4, #0]
 8013f7a:	b938      	cbnz	r0, 8013f8c <__pow5mult+0x8c>
 8013f7c:	4622      	mov	r2, r4
 8013f7e:	4621      	mov	r1, r4
 8013f80:	4630      	mov	r0, r6
 8013f82:	f7ff ff27 	bl	8013dd4 <__multiply>
 8013f86:	6020      	str	r0, [r4, #0]
 8013f88:	f8c0 8000 	str.w	r8, [r0]
 8013f8c:	4604      	mov	r4, r0
 8013f8e:	e7e4      	b.n	8013f5a <__pow5mult+0x5a>
 8013f90:	4638      	mov	r0, r7
 8013f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f96:	bf00      	nop
 8013f98:	08017a28 	.word	0x08017a28

08013f9c <__lshift>:
 8013f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fa0:	460c      	mov	r4, r1
 8013fa2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013fa6:	6923      	ldr	r3, [r4, #16]
 8013fa8:	6849      	ldr	r1, [r1, #4]
 8013faa:	eb0a 0903 	add.w	r9, sl, r3
 8013fae:	68a3      	ldr	r3, [r4, #8]
 8013fb0:	4607      	mov	r7, r0
 8013fb2:	4616      	mov	r6, r2
 8013fb4:	f109 0501 	add.w	r5, r9, #1
 8013fb8:	42ab      	cmp	r3, r5
 8013fba:	db32      	blt.n	8014022 <__lshift+0x86>
 8013fbc:	4638      	mov	r0, r7
 8013fbe:	f7ff fe2c 	bl	8013c1a <_Balloc>
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	4680      	mov	r8, r0
 8013fc6:	f100 0114 	add.w	r1, r0, #20
 8013fca:	461a      	mov	r2, r3
 8013fcc:	4553      	cmp	r3, sl
 8013fce:	db2b      	blt.n	8014028 <__lshift+0x8c>
 8013fd0:	6920      	ldr	r0, [r4, #16]
 8013fd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013fd6:	f104 0314 	add.w	r3, r4, #20
 8013fda:	f016 021f 	ands.w	r2, r6, #31
 8013fde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013fe2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013fe6:	d025      	beq.n	8014034 <__lshift+0x98>
 8013fe8:	f1c2 0e20 	rsb	lr, r2, #32
 8013fec:	2000      	movs	r0, #0
 8013fee:	681e      	ldr	r6, [r3, #0]
 8013ff0:	468a      	mov	sl, r1
 8013ff2:	4096      	lsls	r6, r2
 8013ff4:	4330      	orrs	r0, r6
 8013ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8013ffa:	f853 0b04 	ldr.w	r0, [r3], #4
 8013ffe:	459c      	cmp	ip, r3
 8014000:	fa20 f00e 	lsr.w	r0, r0, lr
 8014004:	d814      	bhi.n	8014030 <__lshift+0x94>
 8014006:	6048      	str	r0, [r1, #4]
 8014008:	b108      	cbz	r0, 801400e <__lshift+0x72>
 801400a:	f109 0502 	add.w	r5, r9, #2
 801400e:	3d01      	subs	r5, #1
 8014010:	4638      	mov	r0, r7
 8014012:	f8c8 5010 	str.w	r5, [r8, #16]
 8014016:	4621      	mov	r1, r4
 8014018:	f7ff fe33 	bl	8013c82 <_Bfree>
 801401c:	4640      	mov	r0, r8
 801401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014022:	3101      	adds	r1, #1
 8014024:	005b      	lsls	r3, r3, #1
 8014026:	e7c7      	b.n	8013fb8 <__lshift+0x1c>
 8014028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801402c:	3301      	adds	r3, #1
 801402e:	e7cd      	b.n	8013fcc <__lshift+0x30>
 8014030:	4651      	mov	r1, sl
 8014032:	e7dc      	b.n	8013fee <__lshift+0x52>
 8014034:	3904      	subs	r1, #4
 8014036:	f853 2b04 	ldr.w	r2, [r3], #4
 801403a:	f841 2f04 	str.w	r2, [r1, #4]!
 801403e:	459c      	cmp	ip, r3
 8014040:	d8f9      	bhi.n	8014036 <__lshift+0x9a>
 8014042:	e7e4      	b.n	801400e <__lshift+0x72>

08014044 <__mcmp>:
 8014044:	6903      	ldr	r3, [r0, #16]
 8014046:	690a      	ldr	r2, [r1, #16]
 8014048:	1a9b      	subs	r3, r3, r2
 801404a:	b530      	push	{r4, r5, lr}
 801404c:	d10c      	bne.n	8014068 <__mcmp+0x24>
 801404e:	0092      	lsls	r2, r2, #2
 8014050:	3014      	adds	r0, #20
 8014052:	3114      	adds	r1, #20
 8014054:	1884      	adds	r4, r0, r2
 8014056:	4411      	add	r1, r2
 8014058:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801405c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014060:	4295      	cmp	r5, r2
 8014062:	d003      	beq.n	801406c <__mcmp+0x28>
 8014064:	d305      	bcc.n	8014072 <__mcmp+0x2e>
 8014066:	2301      	movs	r3, #1
 8014068:	4618      	mov	r0, r3
 801406a:	bd30      	pop	{r4, r5, pc}
 801406c:	42a0      	cmp	r0, r4
 801406e:	d3f3      	bcc.n	8014058 <__mcmp+0x14>
 8014070:	e7fa      	b.n	8014068 <__mcmp+0x24>
 8014072:	f04f 33ff 	mov.w	r3, #4294967295
 8014076:	e7f7      	b.n	8014068 <__mcmp+0x24>

08014078 <__mdiff>:
 8014078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801407c:	460d      	mov	r5, r1
 801407e:	4607      	mov	r7, r0
 8014080:	4611      	mov	r1, r2
 8014082:	4628      	mov	r0, r5
 8014084:	4614      	mov	r4, r2
 8014086:	f7ff ffdd 	bl	8014044 <__mcmp>
 801408a:	1e06      	subs	r6, r0, #0
 801408c:	d108      	bne.n	80140a0 <__mdiff+0x28>
 801408e:	4631      	mov	r1, r6
 8014090:	4638      	mov	r0, r7
 8014092:	f7ff fdc2 	bl	8013c1a <_Balloc>
 8014096:	2301      	movs	r3, #1
 8014098:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140a0:	bfa4      	itt	ge
 80140a2:	4623      	movge	r3, r4
 80140a4:	462c      	movge	r4, r5
 80140a6:	4638      	mov	r0, r7
 80140a8:	6861      	ldr	r1, [r4, #4]
 80140aa:	bfa6      	itte	ge
 80140ac:	461d      	movge	r5, r3
 80140ae:	2600      	movge	r6, #0
 80140b0:	2601      	movlt	r6, #1
 80140b2:	f7ff fdb2 	bl	8013c1a <_Balloc>
 80140b6:	692b      	ldr	r3, [r5, #16]
 80140b8:	60c6      	str	r6, [r0, #12]
 80140ba:	6926      	ldr	r6, [r4, #16]
 80140bc:	f105 0914 	add.w	r9, r5, #20
 80140c0:	f104 0214 	add.w	r2, r4, #20
 80140c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80140c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80140cc:	f100 0514 	add.w	r5, r0, #20
 80140d0:	f04f 0e00 	mov.w	lr, #0
 80140d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80140d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80140dc:	fa1e f18a 	uxtah	r1, lr, sl
 80140e0:	b2a3      	uxth	r3, r4
 80140e2:	1ac9      	subs	r1, r1, r3
 80140e4:	0c23      	lsrs	r3, r4, #16
 80140e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80140ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80140ee:	b289      	uxth	r1, r1
 80140f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80140f4:	45c8      	cmp	r8, r9
 80140f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80140fa:	4694      	mov	ip, r2
 80140fc:	f845 3b04 	str.w	r3, [r5], #4
 8014100:	d8e8      	bhi.n	80140d4 <__mdiff+0x5c>
 8014102:	45bc      	cmp	ip, r7
 8014104:	d304      	bcc.n	8014110 <__mdiff+0x98>
 8014106:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801410a:	b183      	cbz	r3, 801412e <__mdiff+0xb6>
 801410c:	6106      	str	r6, [r0, #16]
 801410e:	e7c5      	b.n	801409c <__mdiff+0x24>
 8014110:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014114:	fa1e f381 	uxtah	r3, lr, r1
 8014118:	141a      	asrs	r2, r3, #16
 801411a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801411e:	b29b      	uxth	r3, r3
 8014120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014124:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014128:	f845 3b04 	str.w	r3, [r5], #4
 801412c:	e7e9      	b.n	8014102 <__mdiff+0x8a>
 801412e:	3e01      	subs	r6, #1
 8014130:	e7e9      	b.n	8014106 <__mdiff+0x8e>

08014132 <__d2b>:
 8014132:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014136:	460e      	mov	r6, r1
 8014138:	2101      	movs	r1, #1
 801413a:	ec59 8b10 	vmov	r8, r9, d0
 801413e:	4615      	mov	r5, r2
 8014140:	f7ff fd6b 	bl	8013c1a <_Balloc>
 8014144:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014148:	4607      	mov	r7, r0
 801414a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801414e:	bb34      	cbnz	r4, 801419e <__d2b+0x6c>
 8014150:	9301      	str	r3, [sp, #4]
 8014152:	f1b8 0300 	subs.w	r3, r8, #0
 8014156:	d027      	beq.n	80141a8 <__d2b+0x76>
 8014158:	a802      	add	r0, sp, #8
 801415a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801415e:	f7ff fe01 	bl	8013d64 <__lo0bits>
 8014162:	9900      	ldr	r1, [sp, #0]
 8014164:	b1f0      	cbz	r0, 80141a4 <__d2b+0x72>
 8014166:	9a01      	ldr	r2, [sp, #4]
 8014168:	f1c0 0320 	rsb	r3, r0, #32
 801416c:	fa02 f303 	lsl.w	r3, r2, r3
 8014170:	430b      	orrs	r3, r1
 8014172:	40c2      	lsrs	r2, r0
 8014174:	617b      	str	r3, [r7, #20]
 8014176:	9201      	str	r2, [sp, #4]
 8014178:	9b01      	ldr	r3, [sp, #4]
 801417a:	61bb      	str	r3, [r7, #24]
 801417c:	2b00      	cmp	r3, #0
 801417e:	bf14      	ite	ne
 8014180:	2102      	movne	r1, #2
 8014182:	2101      	moveq	r1, #1
 8014184:	6139      	str	r1, [r7, #16]
 8014186:	b1c4      	cbz	r4, 80141ba <__d2b+0x88>
 8014188:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801418c:	4404      	add	r4, r0
 801418e:	6034      	str	r4, [r6, #0]
 8014190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014194:	6028      	str	r0, [r5, #0]
 8014196:	4638      	mov	r0, r7
 8014198:	b003      	add	sp, #12
 801419a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801419e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80141a2:	e7d5      	b.n	8014150 <__d2b+0x1e>
 80141a4:	6179      	str	r1, [r7, #20]
 80141a6:	e7e7      	b.n	8014178 <__d2b+0x46>
 80141a8:	a801      	add	r0, sp, #4
 80141aa:	f7ff fddb 	bl	8013d64 <__lo0bits>
 80141ae:	9b01      	ldr	r3, [sp, #4]
 80141b0:	617b      	str	r3, [r7, #20]
 80141b2:	2101      	movs	r1, #1
 80141b4:	6139      	str	r1, [r7, #16]
 80141b6:	3020      	adds	r0, #32
 80141b8:	e7e5      	b.n	8014186 <__d2b+0x54>
 80141ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80141be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80141c2:	6030      	str	r0, [r6, #0]
 80141c4:	6918      	ldr	r0, [r3, #16]
 80141c6:	f7ff fdae 	bl	8013d26 <__hi0bits>
 80141ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80141ce:	e7e1      	b.n	8014194 <__d2b+0x62>

080141d0 <_calloc_r>:
 80141d0:	b538      	push	{r3, r4, r5, lr}
 80141d2:	fb02 f401 	mul.w	r4, r2, r1
 80141d6:	4621      	mov	r1, r4
 80141d8:	f7fd fd28 	bl	8011c2c <_malloc_r>
 80141dc:	4605      	mov	r5, r0
 80141de:	b118      	cbz	r0, 80141e8 <_calloc_r+0x18>
 80141e0:	4622      	mov	r2, r4
 80141e2:	2100      	movs	r1, #0
 80141e4:	f7fd fccb 	bl	8011b7e <memset>
 80141e8:	4628      	mov	r0, r5
 80141ea:	bd38      	pop	{r3, r4, r5, pc}

080141ec <_realloc_r>:
 80141ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ee:	4607      	mov	r7, r0
 80141f0:	4614      	mov	r4, r2
 80141f2:	460e      	mov	r6, r1
 80141f4:	b921      	cbnz	r1, 8014200 <_realloc_r+0x14>
 80141f6:	4611      	mov	r1, r2
 80141f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141fc:	f7fd bd16 	b.w	8011c2c <_malloc_r>
 8014200:	b922      	cbnz	r2, 801420c <_realloc_r+0x20>
 8014202:	f7fd fcc5 	bl	8011b90 <_free_r>
 8014206:	4625      	mov	r5, r4
 8014208:	4628      	mov	r0, r5
 801420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801420c:	f000 f9f0 	bl	80145f0 <_malloc_usable_size_r>
 8014210:	42a0      	cmp	r0, r4
 8014212:	d20f      	bcs.n	8014234 <_realloc_r+0x48>
 8014214:	4621      	mov	r1, r4
 8014216:	4638      	mov	r0, r7
 8014218:	f7fd fd08 	bl	8011c2c <_malloc_r>
 801421c:	4605      	mov	r5, r0
 801421e:	2800      	cmp	r0, #0
 8014220:	d0f2      	beq.n	8014208 <_realloc_r+0x1c>
 8014222:	4631      	mov	r1, r6
 8014224:	4622      	mov	r2, r4
 8014226:	f7fd fc9f 	bl	8011b68 <memcpy>
 801422a:	4631      	mov	r1, r6
 801422c:	4638      	mov	r0, r7
 801422e:	f7fd fcaf 	bl	8011b90 <_free_r>
 8014232:	e7e9      	b.n	8014208 <_realloc_r+0x1c>
 8014234:	4635      	mov	r5, r6
 8014236:	e7e7      	b.n	8014208 <_realloc_r+0x1c>

08014238 <__ssputs_r>:
 8014238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801423c:	688e      	ldr	r6, [r1, #8]
 801423e:	429e      	cmp	r6, r3
 8014240:	4682      	mov	sl, r0
 8014242:	460c      	mov	r4, r1
 8014244:	4690      	mov	r8, r2
 8014246:	4699      	mov	r9, r3
 8014248:	d837      	bhi.n	80142ba <__ssputs_r+0x82>
 801424a:	898a      	ldrh	r2, [r1, #12]
 801424c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014250:	d031      	beq.n	80142b6 <__ssputs_r+0x7e>
 8014252:	6825      	ldr	r5, [r4, #0]
 8014254:	6909      	ldr	r1, [r1, #16]
 8014256:	1a6f      	subs	r7, r5, r1
 8014258:	6965      	ldr	r5, [r4, #20]
 801425a:	2302      	movs	r3, #2
 801425c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014260:	fb95 f5f3 	sdiv	r5, r5, r3
 8014264:	f109 0301 	add.w	r3, r9, #1
 8014268:	443b      	add	r3, r7
 801426a:	429d      	cmp	r5, r3
 801426c:	bf38      	it	cc
 801426e:	461d      	movcc	r5, r3
 8014270:	0553      	lsls	r3, r2, #21
 8014272:	d530      	bpl.n	80142d6 <__ssputs_r+0x9e>
 8014274:	4629      	mov	r1, r5
 8014276:	f7fd fcd9 	bl	8011c2c <_malloc_r>
 801427a:	4606      	mov	r6, r0
 801427c:	b950      	cbnz	r0, 8014294 <__ssputs_r+0x5c>
 801427e:	230c      	movs	r3, #12
 8014280:	f8ca 3000 	str.w	r3, [sl]
 8014284:	89a3      	ldrh	r3, [r4, #12]
 8014286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801428a:	81a3      	strh	r3, [r4, #12]
 801428c:	f04f 30ff 	mov.w	r0, #4294967295
 8014290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014294:	463a      	mov	r2, r7
 8014296:	6921      	ldr	r1, [r4, #16]
 8014298:	f7fd fc66 	bl	8011b68 <memcpy>
 801429c:	89a3      	ldrh	r3, [r4, #12]
 801429e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80142a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142a6:	81a3      	strh	r3, [r4, #12]
 80142a8:	6126      	str	r6, [r4, #16]
 80142aa:	6165      	str	r5, [r4, #20]
 80142ac:	443e      	add	r6, r7
 80142ae:	1bed      	subs	r5, r5, r7
 80142b0:	6026      	str	r6, [r4, #0]
 80142b2:	60a5      	str	r5, [r4, #8]
 80142b4:	464e      	mov	r6, r9
 80142b6:	454e      	cmp	r6, r9
 80142b8:	d900      	bls.n	80142bc <__ssputs_r+0x84>
 80142ba:	464e      	mov	r6, r9
 80142bc:	4632      	mov	r2, r6
 80142be:	4641      	mov	r1, r8
 80142c0:	6820      	ldr	r0, [r4, #0]
 80142c2:	f7ff fc8f 	bl	8013be4 <memmove>
 80142c6:	68a3      	ldr	r3, [r4, #8]
 80142c8:	1b9b      	subs	r3, r3, r6
 80142ca:	60a3      	str	r3, [r4, #8]
 80142cc:	6823      	ldr	r3, [r4, #0]
 80142ce:	441e      	add	r6, r3
 80142d0:	6026      	str	r6, [r4, #0]
 80142d2:	2000      	movs	r0, #0
 80142d4:	e7dc      	b.n	8014290 <__ssputs_r+0x58>
 80142d6:	462a      	mov	r2, r5
 80142d8:	f7ff ff88 	bl	80141ec <_realloc_r>
 80142dc:	4606      	mov	r6, r0
 80142de:	2800      	cmp	r0, #0
 80142e0:	d1e2      	bne.n	80142a8 <__ssputs_r+0x70>
 80142e2:	6921      	ldr	r1, [r4, #16]
 80142e4:	4650      	mov	r0, sl
 80142e6:	f7fd fc53 	bl	8011b90 <_free_r>
 80142ea:	e7c8      	b.n	801427e <__ssputs_r+0x46>

080142ec <_svfiprintf_r>:
 80142ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f0:	461d      	mov	r5, r3
 80142f2:	898b      	ldrh	r3, [r1, #12]
 80142f4:	061f      	lsls	r7, r3, #24
 80142f6:	b09d      	sub	sp, #116	; 0x74
 80142f8:	4680      	mov	r8, r0
 80142fa:	460c      	mov	r4, r1
 80142fc:	4616      	mov	r6, r2
 80142fe:	d50f      	bpl.n	8014320 <_svfiprintf_r+0x34>
 8014300:	690b      	ldr	r3, [r1, #16]
 8014302:	b96b      	cbnz	r3, 8014320 <_svfiprintf_r+0x34>
 8014304:	2140      	movs	r1, #64	; 0x40
 8014306:	f7fd fc91 	bl	8011c2c <_malloc_r>
 801430a:	6020      	str	r0, [r4, #0]
 801430c:	6120      	str	r0, [r4, #16]
 801430e:	b928      	cbnz	r0, 801431c <_svfiprintf_r+0x30>
 8014310:	230c      	movs	r3, #12
 8014312:	f8c8 3000 	str.w	r3, [r8]
 8014316:	f04f 30ff 	mov.w	r0, #4294967295
 801431a:	e0c8      	b.n	80144ae <_svfiprintf_r+0x1c2>
 801431c:	2340      	movs	r3, #64	; 0x40
 801431e:	6163      	str	r3, [r4, #20]
 8014320:	2300      	movs	r3, #0
 8014322:	9309      	str	r3, [sp, #36]	; 0x24
 8014324:	2320      	movs	r3, #32
 8014326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801432a:	2330      	movs	r3, #48	; 0x30
 801432c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014330:	9503      	str	r5, [sp, #12]
 8014332:	f04f 0b01 	mov.w	fp, #1
 8014336:	4637      	mov	r7, r6
 8014338:	463d      	mov	r5, r7
 801433a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801433e:	b10b      	cbz	r3, 8014344 <_svfiprintf_r+0x58>
 8014340:	2b25      	cmp	r3, #37	; 0x25
 8014342:	d13e      	bne.n	80143c2 <_svfiprintf_r+0xd6>
 8014344:	ebb7 0a06 	subs.w	sl, r7, r6
 8014348:	d00b      	beq.n	8014362 <_svfiprintf_r+0x76>
 801434a:	4653      	mov	r3, sl
 801434c:	4632      	mov	r2, r6
 801434e:	4621      	mov	r1, r4
 8014350:	4640      	mov	r0, r8
 8014352:	f7ff ff71 	bl	8014238 <__ssputs_r>
 8014356:	3001      	adds	r0, #1
 8014358:	f000 80a4 	beq.w	80144a4 <_svfiprintf_r+0x1b8>
 801435c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801435e:	4453      	add	r3, sl
 8014360:	9309      	str	r3, [sp, #36]	; 0x24
 8014362:	783b      	ldrb	r3, [r7, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	f000 809d 	beq.w	80144a4 <_svfiprintf_r+0x1b8>
 801436a:	2300      	movs	r3, #0
 801436c:	f04f 32ff 	mov.w	r2, #4294967295
 8014370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014374:	9304      	str	r3, [sp, #16]
 8014376:	9307      	str	r3, [sp, #28]
 8014378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801437c:	931a      	str	r3, [sp, #104]	; 0x68
 801437e:	462f      	mov	r7, r5
 8014380:	2205      	movs	r2, #5
 8014382:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014386:	4850      	ldr	r0, [pc, #320]	; (80144c8 <_svfiprintf_r+0x1dc>)
 8014388:	f7eb ff4a 	bl	8000220 <memchr>
 801438c:	9b04      	ldr	r3, [sp, #16]
 801438e:	b9d0      	cbnz	r0, 80143c6 <_svfiprintf_r+0xda>
 8014390:	06d9      	lsls	r1, r3, #27
 8014392:	bf44      	itt	mi
 8014394:	2220      	movmi	r2, #32
 8014396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801439a:	071a      	lsls	r2, r3, #28
 801439c:	bf44      	itt	mi
 801439e:	222b      	movmi	r2, #43	; 0x2b
 80143a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80143a4:	782a      	ldrb	r2, [r5, #0]
 80143a6:	2a2a      	cmp	r2, #42	; 0x2a
 80143a8:	d015      	beq.n	80143d6 <_svfiprintf_r+0xea>
 80143aa:	9a07      	ldr	r2, [sp, #28]
 80143ac:	462f      	mov	r7, r5
 80143ae:	2000      	movs	r0, #0
 80143b0:	250a      	movs	r5, #10
 80143b2:	4639      	mov	r1, r7
 80143b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143b8:	3b30      	subs	r3, #48	; 0x30
 80143ba:	2b09      	cmp	r3, #9
 80143bc:	d94d      	bls.n	801445a <_svfiprintf_r+0x16e>
 80143be:	b1b8      	cbz	r0, 80143f0 <_svfiprintf_r+0x104>
 80143c0:	e00f      	b.n	80143e2 <_svfiprintf_r+0xf6>
 80143c2:	462f      	mov	r7, r5
 80143c4:	e7b8      	b.n	8014338 <_svfiprintf_r+0x4c>
 80143c6:	4a40      	ldr	r2, [pc, #256]	; (80144c8 <_svfiprintf_r+0x1dc>)
 80143c8:	1a80      	subs	r0, r0, r2
 80143ca:	fa0b f000 	lsl.w	r0, fp, r0
 80143ce:	4318      	orrs	r0, r3
 80143d0:	9004      	str	r0, [sp, #16]
 80143d2:	463d      	mov	r5, r7
 80143d4:	e7d3      	b.n	801437e <_svfiprintf_r+0x92>
 80143d6:	9a03      	ldr	r2, [sp, #12]
 80143d8:	1d11      	adds	r1, r2, #4
 80143da:	6812      	ldr	r2, [r2, #0]
 80143dc:	9103      	str	r1, [sp, #12]
 80143de:	2a00      	cmp	r2, #0
 80143e0:	db01      	blt.n	80143e6 <_svfiprintf_r+0xfa>
 80143e2:	9207      	str	r2, [sp, #28]
 80143e4:	e004      	b.n	80143f0 <_svfiprintf_r+0x104>
 80143e6:	4252      	negs	r2, r2
 80143e8:	f043 0302 	orr.w	r3, r3, #2
 80143ec:	9207      	str	r2, [sp, #28]
 80143ee:	9304      	str	r3, [sp, #16]
 80143f0:	783b      	ldrb	r3, [r7, #0]
 80143f2:	2b2e      	cmp	r3, #46	; 0x2e
 80143f4:	d10c      	bne.n	8014410 <_svfiprintf_r+0x124>
 80143f6:	787b      	ldrb	r3, [r7, #1]
 80143f8:	2b2a      	cmp	r3, #42	; 0x2a
 80143fa:	d133      	bne.n	8014464 <_svfiprintf_r+0x178>
 80143fc:	9b03      	ldr	r3, [sp, #12]
 80143fe:	1d1a      	adds	r2, r3, #4
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	9203      	str	r2, [sp, #12]
 8014404:	2b00      	cmp	r3, #0
 8014406:	bfb8      	it	lt
 8014408:	f04f 33ff 	movlt.w	r3, #4294967295
 801440c:	3702      	adds	r7, #2
 801440e:	9305      	str	r3, [sp, #20]
 8014410:	4d2e      	ldr	r5, [pc, #184]	; (80144cc <_svfiprintf_r+0x1e0>)
 8014412:	7839      	ldrb	r1, [r7, #0]
 8014414:	2203      	movs	r2, #3
 8014416:	4628      	mov	r0, r5
 8014418:	f7eb ff02 	bl	8000220 <memchr>
 801441c:	b138      	cbz	r0, 801442e <_svfiprintf_r+0x142>
 801441e:	2340      	movs	r3, #64	; 0x40
 8014420:	1b40      	subs	r0, r0, r5
 8014422:	fa03 f000 	lsl.w	r0, r3, r0
 8014426:	9b04      	ldr	r3, [sp, #16]
 8014428:	4303      	orrs	r3, r0
 801442a:	3701      	adds	r7, #1
 801442c:	9304      	str	r3, [sp, #16]
 801442e:	7839      	ldrb	r1, [r7, #0]
 8014430:	4827      	ldr	r0, [pc, #156]	; (80144d0 <_svfiprintf_r+0x1e4>)
 8014432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014436:	2206      	movs	r2, #6
 8014438:	1c7e      	adds	r6, r7, #1
 801443a:	f7eb fef1 	bl	8000220 <memchr>
 801443e:	2800      	cmp	r0, #0
 8014440:	d038      	beq.n	80144b4 <_svfiprintf_r+0x1c8>
 8014442:	4b24      	ldr	r3, [pc, #144]	; (80144d4 <_svfiprintf_r+0x1e8>)
 8014444:	bb13      	cbnz	r3, 801448c <_svfiprintf_r+0x1a0>
 8014446:	9b03      	ldr	r3, [sp, #12]
 8014448:	3307      	adds	r3, #7
 801444a:	f023 0307 	bic.w	r3, r3, #7
 801444e:	3308      	adds	r3, #8
 8014450:	9303      	str	r3, [sp, #12]
 8014452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014454:	444b      	add	r3, r9
 8014456:	9309      	str	r3, [sp, #36]	; 0x24
 8014458:	e76d      	b.n	8014336 <_svfiprintf_r+0x4a>
 801445a:	fb05 3202 	mla	r2, r5, r2, r3
 801445e:	2001      	movs	r0, #1
 8014460:	460f      	mov	r7, r1
 8014462:	e7a6      	b.n	80143b2 <_svfiprintf_r+0xc6>
 8014464:	2300      	movs	r3, #0
 8014466:	3701      	adds	r7, #1
 8014468:	9305      	str	r3, [sp, #20]
 801446a:	4619      	mov	r1, r3
 801446c:	250a      	movs	r5, #10
 801446e:	4638      	mov	r0, r7
 8014470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014474:	3a30      	subs	r2, #48	; 0x30
 8014476:	2a09      	cmp	r2, #9
 8014478:	d903      	bls.n	8014482 <_svfiprintf_r+0x196>
 801447a:	2b00      	cmp	r3, #0
 801447c:	d0c8      	beq.n	8014410 <_svfiprintf_r+0x124>
 801447e:	9105      	str	r1, [sp, #20]
 8014480:	e7c6      	b.n	8014410 <_svfiprintf_r+0x124>
 8014482:	fb05 2101 	mla	r1, r5, r1, r2
 8014486:	2301      	movs	r3, #1
 8014488:	4607      	mov	r7, r0
 801448a:	e7f0      	b.n	801446e <_svfiprintf_r+0x182>
 801448c:	ab03      	add	r3, sp, #12
 801448e:	9300      	str	r3, [sp, #0]
 8014490:	4622      	mov	r2, r4
 8014492:	4b11      	ldr	r3, [pc, #68]	; (80144d8 <_svfiprintf_r+0x1ec>)
 8014494:	a904      	add	r1, sp, #16
 8014496:	4640      	mov	r0, r8
 8014498:	f7fd fdf6 	bl	8012088 <_printf_float>
 801449c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80144a0:	4681      	mov	r9, r0
 80144a2:	d1d6      	bne.n	8014452 <_svfiprintf_r+0x166>
 80144a4:	89a3      	ldrh	r3, [r4, #12]
 80144a6:	065b      	lsls	r3, r3, #25
 80144a8:	f53f af35 	bmi.w	8014316 <_svfiprintf_r+0x2a>
 80144ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144ae:	b01d      	add	sp, #116	; 0x74
 80144b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b4:	ab03      	add	r3, sp, #12
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	4622      	mov	r2, r4
 80144ba:	4b07      	ldr	r3, [pc, #28]	; (80144d8 <_svfiprintf_r+0x1ec>)
 80144bc:	a904      	add	r1, sp, #16
 80144be:	4640      	mov	r0, r8
 80144c0:	f7fe f898 	bl	80125f4 <_printf_i>
 80144c4:	e7ea      	b.n	801449c <_svfiprintf_r+0x1b0>
 80144c6:	bf00      	nop
 80144c8:	08017880 	.word	0x08017880
 80144cc:	08017886 	.word	0x08017886
 80144d0:	0801788a 	.word	0x0801788a
 80144d4:	08012089 	.word	0x08012089
 80144d8:	08014239 	.word	0x08014239

080144dc <_read_r>:
 80144dc:	b538      	push	{r3, r4, r5, lr}
 80144de:	4c07      	ldr	r4, [pc, #28]	; (80144fc <_read_r+0x20>)
 80144e0:	4605      	mov	r5, r0
 80144e2:	4608      	mov	r0, r1
 80144e4:	4611      	mov	r1, r2
 80144e6:	2200      	movs	r2, #0
 80144e8:	6022      	str	r2, [r4, #0]
 80144ea:	461a      	mov	r2, r3
 80144ec:	f7f0 ff7a 	bl	80053e4 <_read>
 80144f0:	1c43      	adds	r3, r0, #1
 80144f2:	d102      	bne.n	80144fa <_read_r+0x1e>
 80144f4:	6823      	ldr	r3, [r4, #0]
 80144f6:	b103      	cbz	r3, 80144fa <_read_r+0x1e>
 80144f8:	602b      	str	r3, [r5, #0]
 80144fa:	bd38      	pop	{r3, r4, r5, pc}
 80144fc:	200065ac 	.word	0x200065ac

08014500 <_raise_r>:
 8014500:	291f      	cmp	r1, #31
 8014502:	b538      	push	{r3, r4, r5, lr}
 8014504:	4604      	mov	r4, r0
 8014506:	460d      	mov	r5, r1
 8014508:	d904      	bls.n	8014514 <_raise_r+0x14>
 801450a:	2316      	movs	r3, #22
 801450c:	6003      	str	r3, [r0, #0]
 801450e:	f04f 30ff 	mov.w	r0, #4294967295
 8014512:	bd38      	pop	{r3, r4, r5, pc}
 8014514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014516:	b112      	cbz	r2, 801451e <_raise_r+0x1e>
 8014518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801451c:	b94b      	cbnz	r3, 8014532 <_raise_r+0x32>
 801451e:	4620      	mov	r0, r4
 8014520:	f000 f830 	bl	8014584 <_getpid_r>
 8014524:	462a      	mov	r2, r5
 8014526:	4601      	mov	r1, r0
 8014528:	4620      	mov	r0, r4
 801452a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801452e:	f000 b817 	b.w	8014560 <_kill_r>
 8014532:	2b01      	cmp	r3, #1
 8014534:	d00a      	beq.n	801454c <_raise_r+0x4c>
 8014536:	1c59      	adds	r1, r3, #1
 8014538:	d103      	bne.n	8014542 <_raise_r+0x42>
 801453a:	2316      	movs	r3, #22
 801453c:	6003      	str	r3, [r0, #0]
 801453e:	2001      	movs	r0, #1
 8014540:	e7e7      	b.n	8014512 <_raise_r+0x12>
 8014542:	2400      	movs	r4, #0
 8014544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014548:	4628      	mov	r0, r5
 801454a:	4798      	blx	r3
 801454c:	2000      	movs	r0, #0
 801454e:	e7e0      	b.n	8014512 <_raise_r+0x12>

08014550 <raise>:
 8014550:	4b02      	ldr	r3, [pc, #8]	; (801455c <raise+0xc>)
 8014552:	4601      	mov	r1, r0
 8014554:	6818      	ldr	r0, [r3, #0]
 8014556:	f7ff bfd3 	b.w	8014500 <_raise_r>
 801455a:	bf00      	nop
 801455c:	20000430 	.word	0x20000430

08014560 <_kill_r>:
 8014560:	b538      	push	{r3, r4, r5, lr}
 8014562:	4c07      	ldr	r4, [pc, #28]	; (8014580 <_kill_r+0x20>)
 8014564:	2300      	movs	r3, #0
 8014566:	4605      	mov	r5, r0
 8014568:	4608      	mov	r0, r1
 801456a:	4611      	mov	r1, r2
 801456c:	6023      	str	r3, [r4, #0]
 801456e:	f7f0 ff1f 	bl	80053b0 <_kill>
 8014572:	1c43      	adds	r3, r0, #1
 8014574:	d102      	bne.n	801457c <_kill_r+0x1c>
 8014576:	6823      	ldr	r3, [r4, #0]
 8014578:	b103      	cbz	r3, 801457c <_kill_r+0x1c>
 801457a:	602b      	str	r3, [r5, #0]
 801457c:	bd38      	pop	{r3, r4, r5, pc}
 801457e:	bf00      	nop
 8014580:	200065ac 	.word	0x200065ac

08014584 <_getpid_r>:
 8014584:	f7f0 bf0c 	b.w	80053a0 <_getpid>

08014588 <_fstat_r>:
 8014588:	b538      	push	{r3, r4, r5, lr}
 801458a:	4c07      	ldr	r4, [pc, #28]	; (80145a8 <_fstat_r+0x20>)
 801458c:	2300      	movs	r3, #0
 801458e:	4605      	mov	r5, r0
 8014590:	4608      	mov	r0, r1
 8014592:	4611      	mov	r1, r2
 8014594:	6023      	str	r3, [r4, #0]
 8014596:	f7f0 ff6a 	bl	800546e <_fstat>
 801459a:	1c43      	adds	r3, r0, #1
 801459c:	d102      	bne.n	80145a4 <_fstat_r+0x1c>
 801459e:	6823      	ldr	r3, [r4, #0]
 80145a0:	b103      	cbz	r3, 80145a4 <_fstat_r+0x1c>
 80145a2:	602b      	str	r3, [r5, #0]
 80145a4:	bd38      	pop	{r3, r4, r5, pc}
 80145a6:	bf00      	nop
 80145a8:	200065ac 	.word	0x200065ac

080145ac <_isatty_r>:
 80145ac:	b538      	push	{r3, r4, r5, lr}
 80145ae:	4c06      	ldr	r4, [pc, #24]	; (80145c8 <_isatty_r+0x1c>)
 80145b0:	2300      	movs	r3, #0
 80145b2:	4605      	mov	r5, r0
 80145b4:	4608      	mov	r0, r1
 80145b6:	6023      	str	r3, [r4, #0]
 80145b8:	f7f0 ff69 	bl	800548e <_isatty>
 80145bc:	1c43      	adds	r3, r0, #1
 80145be:	d102      	bne.n	80145c6 <_isatty_r+0x1a>
 80145c0:	6823      	ldr	r3, [r4, #0]
 80145c2:	b103      	cbz	r3, 80145c6 <_isatty_r+0x1a>
 80145c4:	602b      	str	r3, [r5, #0]
 80145c6:	bd38      	pop	{r3, r4, r5, pc}
 80145c8:	200065ac 	.word	0x200065ac

080145cc <__ascii_mbtowc>:
 80145cc:	b082      	sub	sp, #8
 80145ce:	b901      	cbnz	r1, 80145d2 <__ascii_mbtowc+0x6>
 80145d0:	a901      	add	r1, sp, #4
 80145d2:	b142      	cbz	r2, 80145e6 <__ascii_mbtowc+0x1a>
 80145d4:	b14b      	cbz	r3, 80145ea <__ascii_mbtowc+0x1e>
 80145d6:	7813      	ldrb	r3, [r2, #0]
 80145d8:	600b      	str	r3, [r1, #0]
 80145da:	7812      	ldrb	r2, [r2, #0]
 80145dc:	1c10      	adds	r0, r2, #0
 80145de:	bf18      	it	ne
 80145e0:	2001      	movne	r0, #1
 80145e2:	b002      	add	sp, #8
 80145e4:	4770      	bx	lr
 80145e6:	4610      	mov	r0, r2
 80145e8:	e7fb      	b.n	80145e2 <__ascii_mbtowc+0x16>
 80145ea:	f06f 0001 	mvn.w	r0, #1
 80145ee:	e7f8      	b.n	80145e2 <__ascii_mbtowc+0x16>

080145f0 <_malloc_usable_size_r>:
 80145f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145f4:	1f18      	subs	r0, r3, #4
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	bfbc      	itt	lt
 80145fa:	580b      	ldrlt	r3, [r1, r0]
 80145fc:	18c0      	addlt	r0, r0, r3
 80145fe:	4770      	bx	lr

08014600 <__ascii_wctomb>:
 8014600:	b149      	cbz	r1, 8014616 <__ascii_wctomb+0x16>
 8014602:	2aff      	cmp	r2, #255	; 0xff
 8014604:	bf85      	ittet	hi
 8014606:	238a      	movhi	r3, #138	; 0x8a
 8014608:	6003      	strhi	r3, [r0, #0]
 801460a:	700a      	strbls	r2, [r1, #0]
 801460c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014610:	bf98      	it	ls
 8014612:	2001      	movls	r0, #1
 8014614:	4770      	bx	lr
 8014616:	4608      	mov	r0, r1
 8014618:	4770      	bx	lr
 801461a:	0000      	movs	r0, r0
 801461c:	0000      	movs	r0, r0
	...

08014620 <cos>:
 8014620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014622:	ec51 0b10 	vmov	r0, r1, d0
 8014626:	4a1e      	ldr	r2, [pc, #120]	; (80146a0 <cos+0x80>)
 8014628:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801462c:	4293      	cmp	r3, r2
 801462e:	dc06      	bgt.n	801463e <cos+0x1e>
 8014630:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014698 <cos+0x78>
 8014634:	f001 fd94 	bl	8016160 <__kernel_cos>
 8014638:	ec51 0b10 	vmov	r0, r1, d0
 801463c:	e007      	b.n	801464e <cos+0x2e>
 801463e:	4a19      	ldr	r2, [pc, #100]	; (80146a4 <cos+0x84>)
 8014640:	4293      	cmp	r3, r2
 8014642:	dd09      	ble.n	8014658 <cos+0x38>
 8014644:	ee10 2a10 	vmov	r2, s0
 8014648:	460b      	mov	r3, r1
 801464a:	f7eb fe3d 	bl	80002c8 <__aeabi_dsub>
 801464e:	ec41 0b10 	vmov	d0, r0, r1
 8014652:	b005      	add	sp, #20
 8014654:	f85d fb04 	ldr.w	pc, [sp], #4
 8014658:	4668      	mov	r0, sp
 801465a:	f001 fadd 	bl	8015c18 <__ieee754_rem_pio2>
 801465e:	f000 0003 	and.w	r0, r0, #3
 8014662:	2801      	cmp	r0, #1
 8014664:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014668:	ed9d 0b00 	vldr	d0, [sp]
 801466c:	d007      	beq.n	801467e <cos+0x5e>
 801466e:	2802      	cmp	r0, #2
 8014670:	d00e      	beq.n	8014690 <cos+0x70>
 8014672:	2800      	cmp	r0, #0
 8014674:	d0de      	beq.n	8014634 <cos+0x14>
 8014676:	2001      	movs	r0, #1
 8014678:	f002 f97a 	bl	8016970 <__kernel_sin>
 801467c:	e7dc      	b.n	8014638 <cos+0x18>
 801467e:	f002 f977 	bl	8016970 <__kernel_sin>
 8014682:	ec53 2b10 	vmov	r2, r3, d0
 8014686:	ee10 0a10 	vmov	r0, s0
 801468a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801468e:	e7de      	b.n	801464e <cos+0x2e>
 8014690:	f001 fd66 	bl	8016160 <__kernel_cos>
 8014694:	e7f5      	b.n	8014682 <cos+0x62>
 8014696:	bf00      	nop
	...
 80146a0:	3fe921fb 	.word	0x3fe921fb
 80146a4:	7fefffff 	.word	0x7fefffff

080146a8 <round>:
 80146a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146aa:	ec57 6b10 	vmov	r6, r7, d0
 80146ae:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80146b2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80146b6:	2c13      	cmp	r4, #19
 80146b8:	463b      	mov	r3, r7
 80146ba:	463d      	mov	r5, r7
 80146bc:	dc17      	bgt.n	80146ee <round+0x46>
 80146be:	2c00      	cmp	r4, #0
 80146c0:	da09      	bge.n	80146d6 <round+0x2e>
 80146c2:	3401      	adds	r4, #1
 80146c4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80146c8:	d103      	bne.n	80146d2 <round+0x2a>
 80146ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80146ce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80146d2:	2100      	movs	r1, #0
 80146d4:	e02c      	b.n	8014730 <round+0x88>
 80146d6:	4a18      	ldr	r2, [pc, #96]	; (8014738 <round+0x90>)
 80146d8:	4122      	asrs	r2, r4
 80146da:	4217      	tst	r7, r2
 80146dc:	d100      	bne.n	80146e0 <round+0x38>
 80146de:	b19e      	cbz	r6, 8014708 <round+0x60>
 80146e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80146e4:	4123      	asrs	r3, r4
 80146e6:	442b      	add	r3, r5
 80146e8:	ea23 0302 	bic.w	r3, r3, r2
 80146ec:	e7f1      	b.n	80146d2 <round+0x2a>
 80146ee:	2c33      	cmp	r4, #51	; 0x33
 80146f0:	dd0d      	ble.n	801470e <round+0x66>
 80146f2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80146f6:	d107      	bne.n	8014708 <round+0x60>
 80146f8:	4630      	mov	r0, r6
 80146fa:	4639      	mov	r1, r7
 80146fc:	ee10 2a10 	vmov	r2, s0
 8014700:	f7eb fde4 	bl	80002cc <__adddf3>
 8014704:	4606      	mov	r6, r0
 8014706:	460f      	mov	r7, r1
 8014708:	ec47 6b10 	vmov	d0, r6, r7
 801470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801470e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8014712:	f04f 30ff 	mov.w	r0, #4294967295
 8014716:	40d0      	lsrs	r0, r2
 8014718:	4206      	tst	r6, r0
 801471a:	d0f5      	beq.n	8014708 <round+0x60>
 801471c:	2201      	movs	r2, #1
 801471e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8014722:	fa02 f404 	lsl.w	r4, r2, r4
 8014726:	1931      	adds	r1, r6, r4
 8014728:	bf28      	it	cs
 801472a:	189b      	addcs	r3, r3, r2
 801472c:	ea21 0100 	bic.w	r1, r1, r0
 8014730:	461f      	mov	r7, r3
 8014732:	460e      	mov	r6, r1
 8014734:	e7e8      	b.n	8014708 <round+0x60>
 8014736:	bf00      	nop
 8014738:	000fffff 	.word	0x000fffff
 801473c:	00000000 	.word	0x00000000

08014740 <sin>:
 8014740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014742:	ec51 0b10 	vmov	r0, r1, d0
 8014746:	4a20      	ldr	r2, [pc, #128]	; (80147c8 <sin+0x88>)
 8014748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801474c:	4293      	cmp	r3, r2
 801474e:	dc07      	bgt.n	8014760 <sin+0x20>
 8014750:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80147c0 <sin+0x80>
 8014754:	2000      	movs	r0, #0
 8014756:	f002 f90b 	bl	8016970 <__kernel_sin>
 801475a:	ec51 0b10 	vmov	r0, r1, d0
 801475e:	e007      	b.n	8014770 <sin+0x30>
 8014760:	4a1a      	ldr	r2, [pc, #104]	; (80147cc <sin+0x8c>)
 8014762:	4293      	cmp	r3, r2
 8014764:	dd09      	ble.n	801477a <sin+0x3a>
 8014766:	ee10 2a10 	vmov	r2, s0
 801476a:	460b      	mov	r3, r1
 801476c:	f7eb fdac 	bl	80002c8 <__aeabi_dsub>
 8014770:	ec41 0b10 	vmov	d0, r0, r1
 8014774:	b005      	add	sp, #20
 8014776:	f85d fb04 	ldr.w	pc, [sp], #4
 801477a:	4668      	mov	r0, sp
 801477c:	f001 fa4c 	bl	8015c18 <__ieee754_rem_pio2>
 8014780:	f000 0003 	and.w	r0, r0, #3
 8014784:	2801      	cmp	r0, #1
 8014786:	ed9d 1b02 	vldr	d1, [sp, #8]
 801478a:	ed9d 0b00 	vldr	d0, [sp]
 801478e:	d004      	beq.n	801479a <sin+0x5a>
 8014790:	2802      	cmp	r0, #2
 8014792:	d005      	beq.n	80147a0 <sin+0x60>
 8014794:	b970      	cbnz	r0, 80147b4 <sin+0x74>
 8014796:	2001      	movs	r0, #1
 8014798:	e7dd      	b.n	8014756 <sin+0x16>
 801479a:	f001 fce1 	bl	8016160 <__kernel_cos>
 801479e:	e7dc      	b.n	801475a <sin+0x1a>
 80147a0:	2001      	movs	r0, #1
 80147a2:	f002 f8e5 	bl	8016970 <__kernel_sin>
 80147a6:	ec53 2b10 	vmov	r2, r3, d0
 80147aa:	ee10 0a10 	vmov	r0, s0
 80147ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147b2:	e7dd      	b.n	8014770 <sin+0x30>
 80147b4:	f001 fcd4 	bl	8016160 <__kernel_cos>
 80147b8:	e7f5      	b.n	80147a6 <sin+0x66>
 80147ba:	bf00      	nop
 80147bc:	f3af 8000 	nop.w
	...
 80147c8:	3fe921fb 	.word	0x3fe921fb
 80147cc:	7fefffff 	.word	0x7fefffff

080147d0 <asin>:
 80147d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147d2:	ed2d 8b02 	vpush	{d8}
 80147d6:	4e26      	ldr	r6, [pc, #152]	; (8014870 <asin+0xa0>)
 80147d8:	b08b      	sub	sp, #44	; 0x2c
 80147da:	ec55 4b10 	vmov	r4, r5, d0
 80147de:	f000 fa1b 	bl	8014c18 <__ieee754_asin>
 80147e2:	f996 3000 	ldrsb.w	r3, [r6]
 80147e6:	eeb0 8a40 	vmov.f32	s16, s0
 80147ea:	eef0 8a60 	vmov.f32	s17, s1
 80147ee:	3301      	adds	r3, #1
 80147f0:	d036      	beq.n	8014860 <asin+0x90>
 80147f2:	4622      	mov	r2, r4
 80147f4:	462b      	mov	r3, r5
 80147f6:	4620      	mov	r0, r4
 80147f8:	4629      	mov	r1, r5
 80147fa:	f7ec f9b7 	bl	8000b6c <__aeabi_dcmpun>
 80147fe:	4607      	mov	r7, r0
 8014800:	bb70      	cbnz	r0, 8014860 <asin+0x90>
 8014802:	ec45 4b10 	vmov	d0, r4, r5
 8014806:	f002 fb0f 	bl	8016e28 <fabs>
 801480a:	2200      	movs	r2, #0
 801480c:	4b19      	ldr	r3, [pc, #100]	; (8014874 <asin+0xa4>)
 801480e:	ec51 0b10 	vmov	r0, r1, d0
 8014812:	f7ec f9a1 	bl	8000b58 <__aeabi_dcmpgt>
 8014816:	b318      	cbz	r0, 8014860 <asin+0x90>
 8014818:	2301      	movs	r3, #1
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	4816      	ldr	r0, [pc, #88]	; (8014878 <asin+0xa8>)
 801481e:	4b17      	ldr	r3, [pc, #92]	; (801487c <asin+0xac>)
 8014820:	9301      	str	r3, [sp, #4]
 8014822:	9708      	str	r7, [sp, #32]
 8014824:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014828:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801482c:	f002 fb98 	bl	8016f60 <nan>
 8014830:	f996 3000 	ldrsb.w	r3, [r6]
 8014834:	2b02      	cmp	r3, #2
 8014836:	ed8d 0b06 	vstr	d0, [sp, #24]
 801483a:	d104      	bne.n	8014846 <asin+0x76>
 801483c:	f7fd f948 	bl	8011ad0 <__errno>
 8014840:	2321      	movs	r3, #33	; 0x21
 8014842:	6003      	str	r3, [r0, #0]
 8014844:	e004      	b.n	8014850 <asin+0x80>
 8014846:	4668      	mov	r0, sp
 8014848:	f002 fb86 	bl	8016f58 <matherr>
 801484c:	2800      	cmp	r0, #0
 801484e:	d0f5      	beq.n	801483c <asin+0x6c>
 8014850:	9b08      	ldr	r3, [sp, #32]
 8014852:	b11b      	cbz	r3, 801485c <asin+0x8c>
 8014854:	f7fd f93c 	bl	8011ad0 <__errno>
 8014858:	9b08      	ldr	r3, [sp, #32]
 801485a:	6003      	str	r3, [r0, #0]
 801485c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014860:	eeb0 0a48 	vmov.f32	s0, s16
 8014864:	eef0 0a68 	vmov.f32	s1, s17
 8014868:	b00b      	add	sp, #44	; 0x2c
 801486a:	ecbd 8b02 	vpop	{d8}
 801486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014870:	20000600 	.word	0x20000600
 8014874:	3ff00000 	.word	0x3ff00000
 8014878:	0801787b 	.word	0x0801787b
 801487c:	08017b3f 	.word	0x08017b3f

08014880 <atan2>:
 8014880:	f000 bbda 	b.w	8015038 <__ieee754_atan2>

08014884 <pow>:
 8014884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014888:	ed2d 8b04 	vpush	{d8-d9}
 801488c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014b60 <pow+0x2dc>
 8014890:	b08d      	sub	sp, #52	; 0x34
 8014892:	ec57 6b10 	vmov	r6, r7, d0
 8014896:	ec55 4b11 	vmov	r4, r5, d1
 801489a:	f000 fcad 	bl	80151f8 <__ieee754_pow>
 801489e:	f999 3000 	ldrsb.w	r3, [r9]
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	3301      	adds	r3, #1
 80148a6:	eeb0 8a40 	vmov.f32	s16, s0
 80148aa:	eef0 8a60 	vmov.f32	s17, s1
 80148ae:	46c8      	mov	r8, r9
 80148b0:	d05f      	beq.n	8014972 <pow+0xee>
 80148b2:	4622      	mov	r2, r4
 80148b4:	462b      	mov	r3, r5
 80148b6:	4620      	mov	r0, r4
 80148b8:	4629      	mov	r1, r5
 80148ba:	f7ec f957 	bl	8000b6c <__aeabi_dcmpun>
 80148be:	4683      	mov	fp, r0
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d156      	bne.n	8014972 <pow+0xee>
 80148c4:	4632      	mov	r2, r6
 80148c6:	463b      	mov	r3, r7
 80148c8:	4630      	mov	r0, r6
 80148ca:	4639      	mov	r1, r7
 80148cc:	f7ec f94e 	bl	8000b6c <__aeabi_dcmpun>
 80148d0:	9001      	str	r0, [sp, #4]
 80148d2:	b1e8      	cbz	r0, 8014910 <pow+0x8c>
 80148d4:	2200      	movs	r2, #0
 80148d6:	2300      	movs	r3, #0
 80148d8:	4620      	mov	r0, r4
 80148da:	4629      	mov	r1, r5
 80148dc:	f7ec f914 	bl	8000b08 <__aeabi_dcmpeq>
 80148e0:	2800      	cmp	r0, #0
 80148e2:	d046      	beq.n	8014972 <pow+0xee>
 80148e4:	2301      	movs	r3, #1
 80148e6:	9302      	str	r3, [sp, #8]
 80148e8:	4b96      	ldr	r3, [pc, #600]	; (8014b44 <pow+0x2c0>)
 80148ea:	9303      	str	r3, [sp, #12]
 80148ec:	4b96      	ldr	r3, [pc, #600]	; (8014b48 <pow+0x2c4>)
 80148ee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80148f2:	2200      	movs	r2, #0
 80148f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80148f8:	9b00      	ldr	r3, [sp, #0]
 80148fa:	2b02      	cmp	r3, #2
 80148fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014900:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014904:	d033      	beq.n	801496e <pow+0xea>
 8014906:	a802      	add	r0, sp, #8
 8014908:	f002 fb26 	bl	8016f58 <matherr>
 801490c:	bb48      	cbnz	r0, 8014962 <pow+0xde>
 801490e:	e05d      	b.n	80149cc <pow+0x148>
 8014910:	f04f 0a00 	mov.w	sl, #0
 8014914:	f04f 0b00 	mov.w	fp, #0
 8014918:	4652      	mov	r2, sl
 801491a:	465b      	mov	r3, fp
 801491c:	4630      	mov	r0, r6
 801491e:	4639      	mov	r1, r7
 8014920:	f7ec f8f2 	bl	8000b08 <__aeabi_dcmpeq>
 8014924:	ec4b ab19 	vmov	d9, sl, fp
 8014928:	2800      	cmp	r0, #0
 801492a:	d054      	beq.n	80149d6 <pow+0x152>
 801492c:	4652      	mov	r2, sl
 801492e:	465b      	mov	r3, fp
 8014930:	4620      	mov	r0, r4
 8014932:	4629      	mov	r1, r5
 8014934:	f7ec f8e8 	bl	8000b08 <__aeabi_dcmpeq>
 8014938:	4680      	mov	r8, r0
 801493a:	b318      	cbz	r0, 8014984 <pow+0x100>
 801493c:	2301      	movs	r3, #1
 801493e:	9302      	str	r3, [sp, #8]
 8014940:	4b80      	ldr	r3, [pc, #512]	; (8014b44 <pow+0x2c0>)
 8014942:	9303      	str	r3, [sp, #12]
 8014944:	9b01      	ldr	r3, [sp, #4]
 8014946:	930a      	str	r3, [sp, #40]	; 0x28
 8014948:	9b00      	ldr	r3, [sp, #0]
 801494a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801494e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014952:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d0d5      	beq.n	8014906 <pow+0x82>
 801495a:	4b7b      	ldr	r3, [pc, #492]	; (8014b48 <pow+0x2c4>)
 801495c:	2200      	movs	r2, #0
 801495e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014964:	b11b      	cbz	r3, 801496e <pow+0xea>
 8014966:	f7fd f8b3 	bl	8011ad0 <__errno>
 801496a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801496c:	6003      	str	r3, [r0, #0]
 801496e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014972:	eeb0 0a48 	vmov.f32	s0, s16
 8014976:	eef0 0a68 	vmov.f32	s1, s17
 801497a:	b00d      	add	sp, #52	; 0x34
 801497c:	ecbd 8b04 	vpop	{d8-d9}
 8014980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014984:	ec45 4b10 	vmov	d0, r4, r5
 8014988:	f002 fa57 	bl	8016e3a <finite>
 801498c:	2800      	cmp	r0, #0
 801498e:	d0f0      	beq.n	8014972 <pow+0xee>
 8014990:	4652      	mov	r2, sl
 8014992:	465b      	mov	r3, fp
 8014994:	4620      	mov	r0, r4
 8014996:	4629      	mov	r1, r5
 8014998:	f7ec f8c0 	bl	8000b1c <__aeabi_dcmplt>
 801499c:	2800      	cmp	r0, #0
 801499e:	d0e8      	beq.n	8014972 <pow+0xee>
 80149a0:	2301      	movs	r3, #1
 80149a2:	9302      	str	r3, [sp, #8]
 80149a4:	4b67      	ldr	r3, [pc, #412]	; (8014b44 <pow+0x2c0>)
 80149a6:	9303      	str	r3, [sp, #12]
 80149a8:	f999 3000 	ldrsb.w	r3, [r9]
 80149ac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80149b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80149b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80149b8:	b913      	cbnz	r3, 80149c0 <pow+0x13c>
 80149ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80149be:	e7a2      	b.n	8014906 <pow+0x82>
 80149c0:	4962      	ldr	r1, [pc, #392]	; (8014b4c <pow+0x2c8>)
 80149c2:	2000      	movs	r0, #0
 80149c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80149c8:	2b02      	cmp	r3, #2
 80149ca:	d19c      	bne.n	8014906 <pow+0x82>
 80149cc:	f7fd f880 	bl	8011ad0 <__errno>
 80149d0:	2321      	movs	r3, #33	; 0x21
 80149d2:	6003      	str	r3, [r0, #0]
 80149d4:	e7c5      	b.n	8014962 <pow+0xde>
 80149d6:	eeb0 0a48 	vmov.f32	s0, s16
 80149da:	eef0 0a68 	vmov.f32	s1, s17
 80149de:	f002 fa2c 	bl	8016e3a <finite>
 80149e2:	9000      	str	r0, [sp, #0]
 80149e4:	2800      	cmp	r0, #0
 80149e6:	f040 8081 	bne.w	8014aec <pow+0x268>
 80149ea:	ec47 6b10 	vmov	d0, r6, r7
 80149ee:	f002 fa24 	bl	8016e3a <finite>
 80149f2:	2800      	cmp	r0, #0
 80149f4:	d07a      	beq.n	8014aec <pow+0x268>
 80149f6:	ec45 4b10 	vmov	d0, r4, r5
 80149fa:	f002 fa1e 	bl	8016e3a <finite>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d074      	beq.n	8014aec <pow+0x268>
 8014a02:	ec53 2b18 	vmov	r2, r3, d8
 8014a06:	ee18 0a10 	vmov	r0, s16
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	f7ec f8ae 	bl	8000b6c <__aeabi_dcmpun>
 8014a10:	f999 9000 	ldrsb.w	r9, [r9]
 8014a14:	4b4b      	ldr	r3, [pc, #300]	; (8014b44 <pow+0x2c0>)
 8014a16:	b1b0      	cbz	r0, 8014a46 <pow+0x1c2>
 8014a18:	2201      	movs	r2, #1
 8014a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014a1e:	9b00      	ldr	r3, [sp, #0]
 8014a20:	930a      	str	r3, [sp, #40]	; 0x28
 8014a22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014a26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014a2a:	f1b9 0f00 	cmp.w	r9, #0
 8014a2e:	d0c4      	beq.n	80149ba <pow+0x136>
 8014a30:	4652      	mov	r2, sl
 8014a32:	465b      	mov	r3, fp
 8014a34:	4650      	mov	r0, sl
 8014a36:	4659      	mov	r1, fp
 8014a38:	f7eb ff28 	bl	800088c <__aeabi_ddiv>
 8014a3c:	f1b9 0f02 	cmp.w	r9, #2
 8014a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014a44:	e7c1      	b.n	80149ca <pow+0x146>
 8014a46:	2203      	movs	r2, #3
 8014a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014a4c:	900a      	str	r0, [sp, #40]	; 0x28
 8014a4e:	4629      	mov	r1, r5
 8014a50:	4620      	mov	r0, r4
 8014a52:	2200      	movs	r2, #0
 8014a54:	4b3e      	ldr	r3, [pc, #248]	; (8014b50 <pow+0x2cc>)
 8014a56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014a5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014a5e:	f7eb fdeb 	bl	8000638 <__aeabi_dmul>
 8014a62:	4604      	mov	r4, r0
 8014a64:	460d      	mov	r5, r1
 8014a66:	f1b9 0f00 	cmp.w	r9, #0
 8014a6a:	d124      	bne.n	8014ab6 <pow+0x232>
 8014a6c:	4b39      	ldr	r3, [pc, #228]	; (8014b54 <pow+0x2d0>)
 8014a6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014a72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014a76:	4630      	mov	r0, r6
 8014a78:	4652      	mov	r2, sl
 8014a7a:	465b      	mov	r3, fp
 8014a7c:	4639      	mov	r1, r7
 8014a7e:	f7ec f84d 	bl	8000b1c <__aeabi_dcmplt>
 8014a82:	2800      	cmp	r0, #0
 8014a84:	d056      	beq.n	8014b34 <pow+0x2b0>
 8014a86:	ec45 4b10 	vmov	d0, r4, r5
 8014a8a:	f002 fa71 	bl	8016f70 <rint>
 8014a8e:	4622      	mov	r2, r4
 8014a90:	462b      	mov	r3, r5
 8014a92:	ec51 0b10 	vmov	r0, r1, d0
 8014a96:	f7ec f837 	bl	8000b08 <__aeabi_dcmpeq>
 8014a9a:	b920      	cbnz	r0, 8014aa6 <pow+0x222>
 8014a9c:	4b2e      	ldr	r3, [pc, #184]	; (8014b58 <pow+0x2d4>)
 8014a9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014aa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014aa6:	f998 3000 	ldrsb.w	r3, [r8]
 8014aaa:	2b02      	cmp	r3, #2
 8014aac:	d142      	bne.n	8014b34 <pow+0x2b0>
 8014aae:	f7fd f80f 	bl	8011ad0 <__errno>
 8014ab2:	2322      	movs	r3, #34	; 0x22
 8014ab4:	e78d      	b.n	80149d2 <pow+0x14e>
 8014ab6:	4b29      	ldr	r3, [pc, #164]	; (8014b5c <pow+0x2d8>)
 8014ab8:	2200      	movs	r2, #0
 8014aba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014abe:	4630      	mov	r0, r6
 8014ac0:	4652      	mov	r2, sl
 8014ac2:	465b      	mov	r3, fp
 8014ac4:	4639      	mov	r1, r7
 8014ac6:	f7ec f829 	bl	8000b1c <__aeabi_dcmplt>
 8014aca:	2800      	cmp	r0, #0
 8014acc:	d0eb      	beq.n	8014aa6 <pow+0x222>
 8014ace:	ec45 4b10 	vmov	d0, r4, r5
 8014ad2:	f002 fa4d 	bl	8016f70 <rint>
 8014ad6:	4622      	mov	r2, r4
 8014ad8:	462b      	mov	r3, r5
 8014ada:	ec51 0b10 	vmov	r0, r1, d0
 8014ade:	f7ec f813 	bl	8000b08 <__aeabi_dcmpeq>
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d1df      	bne.n	8014aa6 <pow+0x222>
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	4b18      	ldr	r3, [pc, #96]	; (8014b4c <pow+0x2c8>)
 8014aea:	e7da      	b.n	8014aa2 <pow+0x21e>
 8014aec:	2200      	movs	r2, #0
 8014aee:	2300      	movs	r3, #0
 8014af0:	ec51 0b18 	vmov	r0, r1, d8
 8014af4:	f7ec f808 	bl	8000b08 <__aeabi_dcmpeq>
 8014af8:	2800      	cmp	r0, #0
 8014afa:	f43f af3a 	beq.w	8014972 <pow+0xee>
 8014afe:	ec47 6b10 	vmov	d0, r6, r7
 8014b02:	f002 f99a 	bl	8016e3a <finite>
 8014b06:	2800      	cmp	r0, #0
 8014b08:	f43f af33 	beq.w	8014972 <pow+0xee>
 8014b0c:	ec45 4b10 	vmov	d0, r4, r5
 8014b10:	f002 f993 	bl	8016e3a <finite>
 8014b14:	2800      	cmp	r0, #0
 8014b16:	f43f af2c 	beq.w	8014972 <pow+0xee>
 8014b1a:	2304      	movs	r3, #4
 8014b1c:	9302      	str	r3, [sp, #8]
 8014b1e:	4b09      	ldr	r3, [pc, #36]	; (8014b44 <pow+0x2c0>)
 8014b20:	9303      	str	r3, [sp, #12]
 8014b22:	2300      	movs	r3, #0
 8014b24:	930a      	str	r3, [sp, #40]	; 0x28
 8014b26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014b2e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014b32:	e7b8      	b.n	8014aa6 <pow+0x222>
 8014b34:	a802      	add	r0, sp, #8
 8014b36:	f002 fa0f 	bl	8016f58 <matherr>
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	f47f af11 	bne.w	8014962 <pow+0xde>
 8014b40:	e7b5      	b.n	8014aae <pow+0x22a>
 8014b42:	bf00      	nop
 8014b44:	08017b44 	.word	0x08017b44
 8014b48:	3ff00000 	.word	0x3ff00000
 8014b4c:	fff00000 	.word	0xfff00000
 8014b50:	3fe00000 	.word	0x3fe00000
 8014b54:	47efffff 	.word	0x47efffff
 8014b58:	c7efffff 	.word	0xc7efffff
 8014b5c:	7ff00000 	.word	0x7ff00000
 8014b60:	20000600 	.word	0x20000600

08014b64 <sqrt>:
 8014b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b68:	ed2d 8b02 	vpush	{d8}
 8014b6c:	b08b      	sub	sp, #44	; 0x2c
 8014b6e:	ec55 4b10 	vmov	r4, r5, d0
 8014b72:	f001 fa43 	bl	8015ffc <__ieee754_sqrt>
 8014b76:	4b26      	ldr	r3, [pc, #152]	; (8014c10 <sqrt+0xac>)
 8014b78:	eeb0 8a40 	vmov.f32	s16, s0
 8014b7c:	eef0 8a60 	vmov.f32	s17, s1
 8014b80:	f993 6000 	ldrsb.w	r6, [r3]
 8014b84:	1c73      	adds	r3, r6, #1
 8014b86:	d02a      	beq.n	8014bde <sqrt+0x7a>
 8014b88:	4622      	mov	r2, r4
 8014b8a:	462b      	mov	r3, r5
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	4629      	mov	r1, r5
 8014b90:	f7eb ffec 	bl	8000b6c <__aeabi_dcmpun>
 8014b94:	4607      	mov	r7, r0
 8014b96:	bb10      	cbnz	r0, 8014bde <sqrt+0x7a>
 8014b98:	f04f 0800 	mov.w	r8, #0
 8014b9c:	f04f 0900 	mov.w	r9, #0
 8014ba0:	4642      	mov	r2, r8
 8014ba2:	464b      	mov	r3, r9
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	4629      	mov	r1, r5
 8014ba8:	f7eb ffb8 	bl	8000b1c <__aeabi_dcmplt>
 8014bac:	b1b8      	cbz	r0, 8014bde <sqrt+0x7a>
 8014bae:	2301      	movs	r3, #1
 8014bb0:	9300      	str	r3, [sp, #0]
 8014bb2:	4b18      	ldr	r3, [pc, #96]	; (8014c14 <sqrt+0xb0>)
 8014bb4:	9301      	str	r3, [sp, #4]
 8014bb6:	9708      	str	r7, [sp, #32]
 8014bb8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014bbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014bc0:	b9b6      	cbnz	r6, 8014bf0 <sqrt+0x8c>
 8014bc2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014bc6:	4668      	mov	r0, sp
 8014bc8:	f002 f9c6 	bl	8016f58 <matherr>
 8014bcc:	b1d0      	cbz	r0, 8014c04 <sqrt+0xa0>
 8014bce:	9b08      	ldr	r3, [sp, #32]
 8014bd0:	b11b      	cbz	r3, 8014bda <sqrt+0x76>
 8014bd2:	f7fc ff7d 	bl	8011ad0 <__errno>
 8014bd6:	9b08      	ldr	r3, [sp, #32]
 8014bd8:	6003      	str	r3, [r0, #0]
 8014bda:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014bde:	eeb0 0a48 	vmov.f32	s0, s16
 8014be2:	eef0 0a68 	vmov.f32	s1, s17
 8014be6:	b00b      	add	sp, #44	; 0x2c
 8014be8:	ecbd 8b02 	vpop	{d8}
 8014bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bf0:	4642      	mov	r2, r8
 8014bf2:	464b      	mov	r3, r9
 8014bf4:	4640      	mov	r0, r8
 8014bf6:	4649      	mov	r1, r9
 8014bf8:	f7eb fe48 	bl	800088c <__aeabi_ddiv>
 8014bfc:	2e02      	cmp	r6, #2
 8014bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014c02:	d1e0      	bne.n	8014bc6 <sqrt+0x62>
 8014c04:	f7fc ff64 	bl	8011ad0 <__errno>
 8014c08:	2321      	movs	r3, #33	; 0x21
 8014c0a:	6003      	str	r3, [r0, #0]
 8014c0c:	e7df      	b.n	8014bce <sqrt+0x6a>
 8014c0e:	bf00      	nop
 8014c10:	20000600 	.word	0x20000600
 8014c14:	08017b48 	.word	0x08017b48

08014c18 <__ieee754_asin>:
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	ec55 4b10 	vmov	r4, r5, d0
 8014c20:	4bcb      	ldr	r3, [pc, #812]	; (8014f50 <__ieee754_asin+0x338>)
 8014c22:	b087      	sub	sp, #28
 8014c24:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014c28:	429f      	cmp	r7, r3
 8014c2a:	9501      	str	r5, [sp, #4]
 8014c2c:	dd31      	ble.n	8014c92 <__ieee754_asin+0x7a>
 8014c2e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8014c32:	ee10 3a10 	vmov	r3, s0
 8014c36:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8014c3a:	433b      	orrs	r3, r7
 8014c3c:	d117      	bne.n	8014c6e <__ieee754_asin+0x56>
 8014c3e:	a3aa      	add	r3, pc, #680	; (adr r3, 8014ee8 <__ieee754_asin+0x2d0>)
 8014c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c44:	ee10 0a10 	vmov	r0, s0
 8014c48:	4629      	mov	r1, r5
 8014c4a:	f7eb fcf5 	bl	8000638 <__aeabi_dmul>
 8014c4e:	a3a8      	add	r3, pc, #672	; (adr r3, 8014ef0 <__ieee754_asin+0x2d8>)
 8014c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c54:	4606      	mov	r6, r0
 8014c56:	460f      	mov	r7, r1
 8014c58:	4620      	mov	r0, r4
 8014c5a:	4629      	mov	r1, r5
 8014c5c:	f7eb fcec 	bl	8000638 <__aeabi_dmul>
 8014c60:	4602      	mov	r2, r0
 8014c62:	460b      	mov	r3, r1
 8014c64:	4630      	mov	r0, r6
 8014c66:	4639      	mov	r1, r7
 8014c68:	f7eb fb30 	bl	80002cc <__adddf3>
 8014c6c:	e00a      	b.n	8014c84 <__ieee754_asin+0x6c>
 8014c6e:	ee10 2a10 	vmov	r2, s0
 8014c72:	462b      	mov	r3, r5
 8014c74:	4620      	mov	r0, r4
 8014c76:	4629      	mov	r1, r5
 8014c78:	f7eb fb26 	bl	80002c8 <__aeabi_dsub>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	460b      	mov	r3, r1
 8014c80:	f7eb fe04 	bl	800088c <__aeabi_ddiv>
 8014c84:	4604      	mov	r4, r0
 8014c86:	460d      	mov	r5, r1
 8014c88:	ec45 4b10 	vmov	d0, r4, r5
 8014c8c:	b007      	add	sp, #28
 8014c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c92:	4bb0      	ldr	r3, [pc, #704]	; (8014f54 <__ieee754_asin+0x33c>)
 8014c94:	429f      	cmp	r7, r3
 8014c96:	dc11      	bgt.n	8014cbc <__ieee754_asin+0xa4>
 8014c98:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8014c9c:	f280 80ae 	bge.w	8014dfc <__ieee754_asin+0x1e4>
 8014ca0:	a395      	add	r3, pc, #596	; (adr r3, 8014ef8 <__ieee754_asin+0x2e0>)
 8014ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca6:	ee10 0a10 	vmov	r0, s0
 8014caa:	4629      	mov	r1, r5
 8014cac:	f7eb fb0e 	bl	80002cc <__adddf3>
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	4ba9      	ldr	r3, [pc, #676]	; (8014f58 <__ieee754_asin+0x340>)
 8014cb4:	f7eb ff50 	bl	8000b58 <__aeabi_dcmpgt>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	d1e5      	bne.n	8014c88 <__ieee754_asin+0x70>
 8014cbc:	ec45 4b10 	vmov	d0, r4, r5
 8014cc0:	f002 f8b2 	bl	8016e28 <fabs>
 8014cc4:	2000      	movs	r0, #0
 8014cc6:	ec53 2b10 	vmov	r2, r3, d0
 8014cca:	49a3      	ldr	r1, [pc, #652]	; (8014f58 <__ieee754_asin+0x340>)
 8014ccc:	f7eb fafc 	bl	80002c8 <__aeabi_dsub>
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	4ba2      	ldr	r3, [pc, #648]	; (8014f5c <__ieee754_asin+0x344>)
 8014cd4:	f7eb fcb0 	bl	8000638 <__aeabi_dmul>
 8014cd8:	a389      	add	r3, pc, #548	; (adr r3, 8014f00 <__ieee754_asin+0x2e8>)
 8014cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cde:	4604      	mov	r4, r0
 8014ce0:	460d      	mov	r5, r1
 8014ce2:	f7eb fca9 	bl	8000638 <__aeabi_dmul>
 8014ce6:	a388      	add	r3, pc, #544	; (adr r3, 8014f08 <__ieee754_asin+0x2f0>)
 8014ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cec:	f7eb faee 	bl	80002cc <__adddf3>
 8014cf0:	4622      	mov	r2, r4
 8014cf2:	462b      	mov	r3, r5
 8014cf4:	f7eb fca0 	bl	8000638 <__aeabi_dmul>
 8014cf8:	a385      	add	r3, pc, #532	; (adr r3, 8014f10 <__ieee754_asin+0x2f8>)
 8014cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cfe:	f7eb fae3 	bl	80002c8 <__aeabi_dsub>
 8014d02:	4622      	mov	r2, r4
 8014d04:	462b      	mov	r3, r5
 8014d06:	f7eb fc97 	bl	8000638 <__aeabi_dmul>
 8014d0a:	a383      	add	r3, pc, #524	; (adr r3, 8014f18 <__ieee754_asin+0x300>)
 8014d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d10:	f7eb fadc 	bl	80002cc <__adddf3>
 8014d14:	4622      	mov	r2, r4
 8014d16:	462b      	mov	r3, r5
 8014d18:	f7eb fc8e 	bl	8000638 <__aeabi_dmul>
 8014d1c:	a380      	add	r3, pc, #512	; (adr r3, 8014f20 <__ieee754_asin+0x308>)
 8014d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d22:	f7eb fad1 	bl	80002c8 <__aeabi_dsub>
 8014d26:	4622      	mov	r2, r4
 8014d28:	462b      	mov	r3, r5
 8014d2a:	f7eb fc85 	bl	8000638 <__aeabi_dmul>
 8014d2e:	a37e      	add	r3, pc, #504	; (adr r3, 8014f28 <__ieee754_asin+0x310>)
 8014d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d34:	f7eb faca 	bl	80002cc <__adddf3>
 8014d38:	4622      	mov	r2, r4
 8014d3a:	462b      	mov	r3, r5
 8014d3c:	f7eb fc7c 	bl	8000638 <__aeabi_dmul>
 8014d40:	a37b      	add	r3, pc, #492	; (adr r3, 8014f30 <__ieee754_asin+0x318>)
 8014d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d46:	4680      	mov	r8, r0
 8014d48:	4689      	mov	r9, r1
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	f7eb fc73 	bl	8000638 <__aeabi_dmul>
 8014d52:	a379      	add	r3, pc, #484	; (adr r3, 8014f38 <__ieee754_asin+0x320>)
 8014d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d58:	f7eb fab6 	bl	80002c8 <__aeabi_dsub>
 8014d5c:	4622      	mov	r2, r4
 8014d5e:	462b      	mov	r3, r5
 8014d60:	f7eb fc6a 	bl	8000638 <__aeabi_dmul>
 8014d64:	a376      	add	r3, pc, #472	; (adr r3, 8014f40 <__ieee754_asin+0x328>)
 8014d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6a:	f7eb faaf 	bl	80002cc <__adddf3>
 8014d6e:	4622      	mov	r2, r4
 8014d70:	462b      	mov	r3, r5
 8014d72:	f7eb fc61 	bl	8000638 <__aeabi_dmul>
 8014d76:	a374      	add	r3, pc, #464	; (adr r3, 8014f48 <__ieee754_asin+0x330>)
 8014d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d7c:	f7eb faa4 	bl	80002c8 <__aeabi_dsub>
 8014d80:	4622      	mov	r2, r4
 8014d82:	462b      	mov	r3, r5
 8014d84:	f7eb fc58 	bl	8000638 <__aeabi_dmul>
 8014d88:	4b73      	ldr	r3, [pc, #460]	; (8014f58 <__ieee754_asin+0x340>)
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f7eb fa9e 	bl	80002cc <__adddf3>
 8014d90:	ec45 4b10 	vmov	d0, r4, r5
 8014d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d98:	f001 f930 	bl	8015ffc <__ieee754_sqrt>
 8014d9c:	4b70      	ldr	r3, [pc, #448]	; (8014f60 <__ieee754_asin+0x348>)
 8014d9e:	429f      	cmp	r7, r3
 8014da0:	ec5b ab10 	vmov	sl, fp, d0
 8014da4:	f340 80de 	ble.w	8014f64 <__ieee754_asin+0x34c>
 8014da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014dac:	4640      	mov	r0, r8
 8014dae:	4649      	mov	r1, r9
 8014db0:	f7eb fd6c 	bl	800088c <__aeabi_ddiv>
 8014db4:	4652      	mov	r2, sl
 8014db6:	465b      	mov	r3, fp
 8014db8:	f7eb fc3e 	bl	8000638 <__aeabi_dmul>
 8014dbc:	4652      	mov	r2, sl
 8014dbe:	465b      	mov	r3, fp
 8014dc0:	f7eb fa84 	bl	80002cc <__adddf3>
 8014dc4:	4602      	mov	r2, r0
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	f7eb fa80 	bl	80002cc <__adddf3>
 8014dcc:	a348      	add	r3, pc, #288	; (adr r3, 8014ef0 <__ieee754_asin+0x2d8>)
 8014dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd2:	f7eb fa79 	bl	80002c8 <__aeabi_dsub>
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	460b      	mov	r3, r1
 8014dda:	a143      	add	r1, pc, #268	; (adr r1, 8014ee8 <__ieee754_asin+0x2d0>)
 8014ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014de0:	f7eb fa72 	bl	80002c8 <__aeabi_dsub>
 8014de4:	9b01      	ldr	r3, [sp, #4]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	bfdc      	itt	le
 8014dea:	4602      	movle	r2, r0
 8014dec:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8014df0:	4604      	mov	r4, r0
 8014df2:	460d      	mov	r5, r1
 8014df4:	bfdc      	itt	le
 8014df6:	4614      	movle	r4, r2
 8014df8:	461d      	movle	r5, r3
 8014dfa:	e745      	b.n	8014c88 <__ieee754_asin+0x70>
 8014dfc:	ee10 2a10 	vmov	r2, s0
 8014e00:	ee10 0a10 	vmov	r0, s0
 8014e04:	462b      	mov	r3, r5
 8014e06:	4629      	mov	r1, r5
 8014e08:	f7eb fc16 	bl	8000638 <__aeabi_dmul>
 8014e0c:	a33c      	add	r3, pc, #240	; (adr r3, 8014f00 <__ieee754_asin+0x2e8>)
 8014e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e12:	4606      	mov	r6, r0
 8014e14:	460f      	mov	r7, r1
 8014e16:	f7eb fc0f 	bl	8000638 <__aeabi_dmul>
 8014e1a:	a33b      	add	r3, pc, #236	; (adr r3, 8014f08 <__ieee754_asin+0x2f0>)
 8014e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e20:	f7eb fa54 	bl	80002cc <__adddf3>
 8014e24:	4632      	mov	r2, r6
 8014e26:	463b      	mov	r3, r7
 8014e28:	f7eb fc06 	bl	8000638 <__aeabi_dmul>
 8014e2c:	a338      	add	r3, pc, #224	; (adr r3, 8014f10 <__ieee754_asin+0x2f8>)
 8014e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e32:	f7eb fa49 	bl	80002c8 <__aeabi_dsub>
 8014e36:	4632      	mov	r2, r6
 8014e38:	463b      	mov	r3, r7
 8014e3a:	f7eb fbfd 	bl	8000638 <__aeabi_dmul>
 8014e3e:	a336      	add	r3, pc, #216	; (adr r3, 8014f18 <__ieee754_asin+0x300>)
 8014e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e44:	f7eb fa42 	bl	80002cc <__adddf3>
 8014e48:	4632      	mov	r2, r6
 8014e4a:	463b      	mov	r3, r7
 8014e4c:	f7eb fbf4 	bl	8000638 <__aeabi_dmul>
 8014e50:	a333      	add	r3, pc, #204	; (adr r3, 8014f20 <__ieee754_asin+0x308>)
 8014e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e56:	f7eb fa37 	bl	80002c8 <__aeabi_dsub>
 8014e5a:	4632      	mov	r2, r6
 8014e5c:	463b      	mov	r3, r7
 8014e5e:	f7eb fbeb 	bl	8000638 <__aeabi_dmul>
 8014e62:	a331      	add	r3, pc, #196	; (adr r3, 8014f28 <__ieee754_asin+0x310>)
 8014e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e68:	f7eb fa30 	bl	80002cc <__adddf3>
 8014e6c:	4632      	mov	r2, r6
 8014e6e:	463b      	mov	r3, r7
 8014e70:	f7eb fbe2 	bl	8000638 <__aeabi_dmul>
 8014e74:	a32e      	add	r3, pc, #184	; (adr r3, 8014f30 <__ieee754_asin+0x318>)
 8014e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7a:	4680      	mov	r8, r0
 8014e7c:	4689      	mov	r9, r1
 8014e7e:	4630      	mov	r0, r6
 8014e80:	4639      	mov	r1, r7
 8014e82:	f7eb fbd9 	bl	8000638 <__aeabi_dmul>
 8014e86:	a32c      	add	r3, pc, #176	; (adr r3, 8014f38 <__ieee754_asin+0x320>)
 8014e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8c:	f7eb fa1c 	bl	80002c8 <__aeabi_dsub>
 8014e90:	4632      	mov	r2, r6
 8014e92:	463b      	mov	r3, r7
 8014e94:	f7eb fbd0 	bl	8000638 <__aeabi_dmul>
 8014e98:	a329      	add	r3, pc, #164	; (adr r3, 8014f40 <__ieee754_asin+0x328>)
 8014e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9e:	f7eb fa15 	bl	80002cc <__adddf3>
 8014ea2:	4632      	mov	r2, r6
 8014ea4:	463b      	mov	r3, r7
 8014ea6:	f7eb fbc7 	bl	8000638 <__aeabi_dmul>
 8014eaa:	a327      	add	r3, pc, #156	; (adr r3, 8014f48 <__ieee754_asin+0x330>)
 8014eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb0:	f7eb fa0a 	bl	80002c8 <__aeabi_dsub>
 8014eb4:	4632      	mov	r2, r6
 8014eb6:	463b      	mov	r3, r7
 8014eb8:	f7eb fbbe 	bl	8000638 <__aeabi_dmul>
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	4b26      	ldr	r3, [pc, #152]	; (8014f58 <__ieee754_asin+0x340>)
 8014ec0:	f7eb fa04 	bl	80002cc <__adddf3>
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	4640      	mov	r0, r8
 8014eca:	4649      	mov	r1, r9
 8014ecc:	f7eb fcde 	bl	800088c <__aeabi_ddiv>
 8014ed0:	4622      	mov	r2, r4
 8014ed2:	462b      	mov	r3, r5
 8014ed4:	f7eb fbb0 	bl	8000638 <__aeabi_dmul>
 8014ed8:	4602      	mov	r2, r0
 8014eda:	460b      	mov	r3, r1
 8014edc:	4620      	mov	r0, r4
 8014ede:	4629      	mov	r1, r5
 8014ee0:	e6c2      	b.n	8014c68 <__ieee754_asin+0x50>
 8014ee2:	bf00      	nop
 8014ee4:	f3af 8000 	nop.w
 8014ee8:	54442d18 	.word	0x54442d18
 8014eec:	3ff921fb 	.word	0x3ff921fb
 8014ef0:	33145c07 	.word	0x33145c07
 8014ef4:	3c91a626 	.word	0x3c91a626
 8014ef8:	8800759c 	.word	0x8800759c
 8014efc:	7e37e43c 	.word	0x7e37e43c
 8014f00:	0dfdf709 	.word	0x0dfdf709
 8014f04:	3f023de1 	.word	0x3f023de1
 8014f08:	7501b288 	.word	0x7501b288
 8014f0c:	3f49efe0 	.word	0x3f49efe0
 8014f10:	b5688f3b 	.word	0xb5688f3b
 8014f14:	3fa48228 	.word	0x3fa48228
 8014f18:	0e884455 	.word	0x0e884455
 8014f1c:	3fc9c155 	.word	0x3fc9c155
 8014f20:	03eb6f7d 	.word	0x03eb6f7d
 8014f24:	3fd4d612 	.word	0x3fd4d612
 8014f28:	55555555 	.word	0x55555555
 8014f2c:	3fc55555 	.word	0x3fc55555
 8014f30:	b12e9282 	.word	0xb12e9282
 8014f34:	3fb3b8c5 	.word	0x3fb3b8c5
 8014f38:	1b8d0159 	.word	0x1b8d0159
 8014f3c:	3fe6066c 	.word	0x3fe6066c
 8014f40:	9c598ac8 	.word	0x9c598ac8
 8014f44:	40002ae5 	.word	0x40002ae5
 8014f48:	1c8a2d4b 	.word	0x1c8a2d4b
 8014f4c:	40033a27 	.word	0x40033a27
 8014f50:	3fefffff 	.word	0x3fefffff
 8014f54:	3fdfffff 	.word	0x3fdfffff
 8014f58:	3ff00000 	.word	0x3ff00000
 8014f5c:	3fe00000 	.word	0x3fe00000
 8014f60:	3fef3332 	.word	0x3fef3332
 8014f64:	ee10 2a10 	vmov	r2, s0
 8014f68:	ee10 0a10 	vmov	r0, s0
 8014f6c:	465b      	mov	r3, fp
 8014f6e:	4659      	mov	r1, fp
 8014f70:	f7eb f9ac 	bl	80002cc <__adddf3>
 8014f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f7c:	4640      	mov	r0, r8
 8014f7e:	4649      	mov	r1, r9
 8014f80:	f7eb fc84 	bl	800088c <__aeabi_ddiv>
 8014f84:	4602      	mov	r2, r0
 8014f86:	460b      	mov	r3, r1
 8014f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f8c:	f7eb fb54 	bl	8000638 <__aeabi_dmul>
 8014f90:	2600      	movs	r6, #0
 8014f92:	4680      	mov	r8, r0
 8014f94:	4689      	mov	r9, r1
 8014f96:	4632      	mov	r2, r6
 8014f98:	465b      	mov	r3, fp
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	4659      	mov	r1, fp
 8014f9e:	f7eb fb4b 	bl	8000638 <__aeabi_dmul>
 8014fa2:	4602      	mov	r2, r0
 8014fa4:	460b      	mov	r3, r1
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	4629      	mov	r1, r5
 8014faa:	f7eb f98d 	bl	80002c8 <__aeabi_dsub>
 8014fae:	4632      	mov	r2, r6
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	460d      	mov	r5, r1
 8014fb4:	465b      	mov	r3, fp
 8014fb6:	4650      	mov	r0, sl
 8014fb8:	4659      	mov	r1, fp
 8014fba:	f7eb f987 	bl	80002cc <__adddf3>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	460b      	mov	r3, r1
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	4629      	mov	r1, r5
 8014fc6:	f7eb fc61 	bl	800088c <__aeabi_ddiv>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	460b      	mov	r3, r1
 8014fce:	f7eb f97d 	bl	80002cc <__adddf3>
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	a114      	add	r1, pc, #80	; (adr r1, 8015028 <__ieee754_asin+0x410>)
 8014fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fdc:	f7eb f974 	bl	80002c8 <__aeabi_dsub>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4640      	mov	r0, r8
 8014fe6:	4649      	mov	r1, r9
 8014fe8:	f7eb f96e 	bl	80002c8 <__aeabi_dsub>
 8014fec:	465f      	mov	r7, fp
 8014fee:	4604      	mov	r4, r0
 8014ff0:	460d      	mov	r5, r1
 8014ff2:	4632      	mov	r2, r6
 8014ff4:	465b      	mov	r3, fp
 8014ff6:	4630      	mov	r0, r6
 8014ff8:	4639      	mov	r1, r7
 8014ffa:	f7eb f967 	bl	80002cc <__adddf3>
 8014ffe:	4602      	mov	r2, r0
 8015000:	460b      	mov	r3, r1
 8015002:	a10b      	add	r1, pc, #44	; (adr r1, 8015030 <__ieee754_asin+0x418>)
 8015004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015008:	f7eb f95e 	bl	80002c8 <__aeabi_dsub>
 801500c:	4602      	mov	r2, r0
 801500e:	460b      	mov	r3, r1
 8015010:	4620      	mov	r0, r4
 8015012:	4629      	mov	r1, r5
 8015014:	f7eb f958 	bl	80002c8 <__aeabi_dsub>
 8015018:	4602      	mov	r2, r0
 801501a:	460b      	mov	r3, r1
 801501c:	a104      	add	r1, pc, #16	; (adr r1, 8015030 <__ieee754_asin+0x418>)
 801501e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015022:	e6dd      	b.n	8014de0 <__ieee754_asin+0x1c8>
 8015024:	f3af 8000 	nop.w
 8015028:	33145c07 	.word	0x33145c07
 801502c:	3c91a626 	.word	0x3c91a626
 8015030:	54442d18 	.word	0x54442d18
 8015034:	3fe921fb 	.word	0x3fe921fb

08015038 <__ieee754_atan2>:
 8015038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801503c:	ec57 6b11 	vmov	r6, r7, d1
 8015040:	4273      	negs	r3, r6
 8015042:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015046:	4333      	orrs	r3, r6
 8015048:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80151f0 <__ieee754_atan2+0x1b8>
 801504c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015050:	4573      	cmp	r3, lr
 8015052:	ec51 0b10 	vmov	r0, r1, d0
 8015056:	ee11 8a10 	vmov	r8, s2
 801505a:	d80a      	bhi.n	8015072 <__ieee754_atan2+0x3a>
 801505c:	4244      	negs	r4, r0
 801505e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015062:	4304      	orrs	r4, r0
 8015064:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015068:	4574      	cmp	r4, lr
 801506a:	468c      	mov	ip, r1
 801506c:	ee10 9a10 	vmov	r9, s0
 8015070:	d907      	bls.n	8015082 <__ieee754_atan2+0x4a>
 8015072:	4632      	mov	r2, r6
 8015074:	463b      	mov	r3, r7
 8015076:	f7eb f929 	bl	80002cc <__adddf3>
 801507a:	ec41 0b10 	vmov	d0, r0, r1
 801507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015082:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015086:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801508a:	4334      	orrs	r4, r6
 801508c:	d103      	bne.n	8015096 <__ieee754_atan2+0x5e>
 801508e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015092:	f001 bd29 	b.w	8016ae8 <atan>
 8015096:	17bc      	asrs	r4, r7, #30
 8015098:	f004 0402 	and.w	r4, r4, #2
 801509c:	ea53 0909 	orrs.w	r9, r3, r9
 80150a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80150a4:	d107      	bne.n	80150b6 <__ieee754_atan2+0x7e>
 80150a6:	2c02      	cmp	r4, #2
 80150a8:	d073      	beq.n	8015192 <__ieee754_atan2+0x15a>
 80150aa:	2c03      	cmp	r4, #3
 80150ac:	d1e5      	bne.n	801507a <__ieee754_atan2+0x42>
 80150ae:	a13e      	add	r1, pc, #248	; (adr r1, 80151a8 <__ieee754_atan2+0x170>)
 80150b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150b4:	e7e1      	b.n	801507a <__ieee754_atan2+0x42>
 80150b6:	ea52 0808 	orrs.w	r8, r2, r8
 80150ba:	d106      	bne.n	80150ca <__ieee754_atan2+0x92>
 80150bc:	f1bc 0f00 	cmp.w	ip, #0
 80150c0:	da6b      	bge.n	801519a <__ieee754_atan2+0x162>
 80150c2:	a13b      	add	r1, pc, #236	; (adr r1, 80151b0 <__ieee754_atan2+0x178>)
 80150c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150c8:	e7d7      	b.n	801507a <__ieee754_atan2+0x42>
 80150ca:	4572      	cmp	r2, lr
 80150cc:	d120      	bne.n	8015110 <__ieee754_atan2+0xd8>
 80150ce:	4293      	cmp	r3, r2
 80150d0:	d111      	bne.n	80150f6 <__ieee754_atan2+0xbe>
 80150d2:	2c02      	cmp	r4, #2
 80150d4:	d007      	beq.n	80150e6 <__ieee754_atan2+0xae>
 80150d6:	2c03      	cmp	r4, #3
 80150d8:	d009      	beq.n	80150ee <__ieee754_atan2+0xb6>
 80150da:	2c01      	cmp	r4, #1
 80150dc:	d155      	bne.n	801518a <__ieee754_atan2+0x152>
 80150de:	a136      	add	r1, pc, #216	; (adr r1, 80151b8 <__ieee754_atan2+0x180>)
 80150e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150e4:	e7c9      	b.n	801507a <__ieee754_atan2+0x42>
 80150e6:	a136      	add	r1, pc, #216	; (adr r1, 80151c0 <__ieee754_atan2+0x188>)
 80150e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150ec:	e7c5      	b.n	801507a <__ieee754_atan2+0x42>
 80150ee:	a136      	add	r1, pc, #216	; (adr r1, 80151c8 <__ieee754_atan2+0x190>)
 80150f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150f4:	e7c1      	b.n	801507a <__ieee754_atan2+0x42>
 80150f6:	2c02      	cmp	r4, #2
 80150f8:	d04b      	beq.n	8015192 <__ieee754_atan2+0x15a>
 80150fa:	2c03      	cmp	r4, #3
 80150fc:	d0d7      	beq.n	80150ae <__ieee754_atan2+0x76>
 80150fe:	2c01      	cmp	r4, #1
 8015100:	f04f 0000 	mov.w	r0, #0
 8015104:	d102      	bne.n	801510c <__ieee754_atan2+0xd4>
 8015106:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801510a:	e7b6      	b.n	801507a <__ieee754_atan2+0x42>
 801510c:	2100      	movs	r1, #0
 801510e:	e7b4      	b.n	801507a <__ieee754_atan2+0x42>
 8015110:	4573      	cmp	r3, lr
 8015112:	d0d3      	beq.n	80150bc <__ieee754_atan2+0x84>
 8015114:	1a9b      	subs	r3, r3, r2
 8015116:	151b      	asrs	r3, r3, #20
 8015118:	2b3c      	cmp	r3, #60	; 0x3c
 801511a:	dc1e      	bgt.n	801515a <__ieee754_atan2+0x122>
 801511c:	2f00      	cmp	r7, #0
 801511e:	da01      	bge.n	8015124 <__ieee754_atan2+0xec>
 8015120:	333c      	adds	r3, #60	; 0x3c
 8015122:	db1e      	blt.n	8015162 <__ieee754_atan2+0x12a>
 8015124:	4632      	mov	r2, r6
 8015126:	463b      	mov	r3, r7
 8015128:	f7eb fbb0 	bl	800088c <__aeabi_ddiv>
 801512c:	ec41 0b10 	vmov	d0, r0, r1
 8015130:	f001 fe7a 	bl	8016e28 <fabs>
 8015134:	f001 fcd8 	bl	8016ae8 <atan>
 8015138:	ec51 0b10 	vmov	r0, r1, d0
 801513c:	2c01      	cmp	r4, #1
 801513e:	d013      	beq.n	8015168 <__ieee754_atan2+0x130>
 8015140:	2c02      	cmp	r4, #2
 8015142:	d015      	beq.n	8015170 <__ieee754_atan2+0x138>
 8015144:	2c00      	cmp	r4, #0
 8015146:	d098      	beq.n	801507a <__ieee754_atan2+0x42>
 8015148:	a321      	add	r3, pc, #132	; (adr r3, 80151d0 <__ieee754_atan2+0x198>)
 801514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514e:	f7eb f8bb 	bl	80002c8 <__aeabi_dsub>
 8015152:	a321      	add	r3, pc, #132	; (adr r3, 80151d8 <__ieee754_atan2+0x1a0>)
 8015154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015158:	e014      	b.n	8015184 <__ieee754_atan2+0x14c>
 801515a:	a121      	add	r1, pc, #132	; (adr r1, 80151e0 <__ieee754_atan2+0x1a8>)
 801515c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015160:	e7ec      	b.n	801513c <__ieee754_atan2+0x104>
 8015162:	2000      	movs	r0, #0
 8015164:	2100      	movs	r1, #0
 8015166:	e7e9      	b.n	801513c <__ieee754_atan2+0x104>
 8015168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801516c:	4619      	mov	r1, r3
 801516e:	e784      	b.n	801507a <__ieee754_atan2+0x42>
 8015170:	a317      	add	r3, pc, #92	; (adr r3, 80151d0 <__ieee754_atan2+0x198>)
 8015172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015176:	f7eb f8a7 	bl	80002c8 <__aeabi_dsub>
 801517a:	4602      	mov	r2, r0
 801517c:	460b      	mov	r3, r1
 801517e:	a116      	add	r1, pc, #88	; (adr r1, 80151d8 <__ieee754_atan2+0x1a0>)
 8015180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015184:	f7eb f8a0 	bl	80002c8 <__aeabi_dsub>
 8015188:	e777      	b.n	801507a <__ieee754_atan2+0x42>
 801518a:	a117      	add	r1, pc, #92	; (adr r1, 80151e8 <__ieee754_atan2+0x1b0>)
 801518c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015190:	e773      	b.n	801507a <__ieee754_atan2+0x42>
 8015192:	a111      	add	r1, pc, #68	; (adr r1, 80151d8 <__ieee754_atan2+0x1a0>)
 8015194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015198:	e76f      	b.n	801507a <__ieee754_atan2+0x42>
 801519a:	a111      	add	r1, pc, #68	; (adr r1, 80151e0 <__ieee754_atan2+0x1a8>)
 801519c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151a0:	e76b      	b.n	801507a <__ieee754_atan2+0x42>
 80151a2:	bf00      	nop
 80151a4:	f3af 8000 	nop.w
 80151a8:	54442d18 	.word	0x54442d18
 80151ac:	c00921fb 	.word	0xc00921fb
 80151b0:	54442d18 	.word	0x54442d18
 80151b4:	bff921fb 	.word	0xbff921fb
 80151b8:	54442d18 	.word	0x54442d18
 80151bc:	bfe921fb 	.word	0xbfe921fb
 80151c0:	7f3321d2 	.word	0x7f3321d2
 80151c4:	4002d97c 	.word	0x4002d97c
 80151c8:	7f3321d2 	.word	0x7f3321d2
 80151cc:	c002d97c 	.word	0xc002d97c
 80151d0:	33145c07 	.word	0x33145c07
 80151d4:	3ca1a626 	.word	0x3ca1a626
 80151d8:	54442d18 	.word	0x54442d18
 80151dc:	400921fb 	.word	0x400921fb
 80151e0:	54442d18 	.word	0x54442d18
 80151e4:	3ff921fb 	.word	0x3ff921fb
 80151e8:	54442d18 	.word	0x54442d18
 80151ec:	3fe921fb 	.word	0x3fe921fb
 80151f0:	7ff00000 	.word	0x7ff00000
 80151f4:	00000000 	.word	0x00000000

080151f8 <__ieee754_pow>:
 80151f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151fc:	b091      	sub	sp, #68	; 0x44
 80151fe:	ed8d 1b00 	vstr	d1, [sp]
 8015202:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015206:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801520a:	ea58 0302 	orrs.w	r3, r8, r2
 801520e:	ec57 6b10 	vmov	r6, r7, d0
 8015212:	f000 84be 	beq.w	8015b92 <__ieee754_pow+0x99a>
 8015216:	4b7a      	ldr	r3, [pc, #488]	; (8015400 <__ieee754_pow+0x208>)
 8015218:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801521c:	429c      	cmp	r4, r3
 801521e:	463d      	mov	r5, r7
 8015220:	ee10 aa10 	vmov	sl, s0
 8015224:	dc09      	bgt.n	801523a <__ieee754_pow+0x42>
 8015226:	d103      	bne.n	8015230 <__ieee754_pow+0x38>
 8015228:	b93e      	cbnz	r6, 801523a <__ieee754_pow+0x42>
 801522a:	45a0      	cmp	r8, r4
 801522c:	dc0d      	bgt.n	801524a <__ieee754_pow+0x52>
 801522e:	e001      	b.n	8015234 <__ieee754_pow+0x3c>
 8015230:	4598      	cmp	r8, r3
 8015232:	dc02      	bgt.n	801523a <__ieee754_pow+0x42>
 8015234:	4598      	cmp	r8, r3
 8015236:	d10e      	bne.n	8015256 <__ieee754_pow+0x5e>
 8015238:	b16a      	cbz	r2, 8015256 <__ieee754_pow+0x5e>
 801523a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801523e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015242:	ea54 030a 	orrs.w	r3, r4, sl
 8015246:	f000 84a4 	beq.w	8015b92 <__ieee754_pow+0x99a>
 801524a:	486e      	ldr	r0, [pc, #440]	; (8015404 <__ieee754_pow+0x20c>)
 801524c:	b011      	add	sp, #68	; 0x44
 801524e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015252:	f001 be85 	b.w	8016f60 <nan>
 8015256:	2d00      	cmp	r5, #0
 8015258:	da53      	bge.n	8015302 <__ieee754_pow+0x10a>
 801525a:	4b6b      	ldr	r3, [pc, #428]	; (8015408 <__ieee754_pow+0x210>)
 801525c:	4598      	cmp	r8, r3
 801525e:	dc4d      	bgt.n	80152fc <__ieee754_pow+0x104>
 8015260:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015264:	4598      	cmp	r8, r3
 8015266:	dd4c      	ble.n	8015302 <__ieee754_pow+0x10a>
 8015268:	ea4f 5328 	mov.w	r3, r8, asr #20
 801526c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015270:	2b14      	cmp	r3, #20
 8015272:	dd26      	ble.n	80152c2 <__ieee754_pow+0xca>
 8015274:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015278:	fa22 f103 	lsr.w	r1, r2, r3
 801527c:	fa01 f303 	lsl.w	r3, r1, r3
 8015280:	4293      	cmp	r3, r2
 8015282:	d13e      	bne.n	8015302 <__ieee754_pow+0x10a>
 8015284:	f001 0101 	and.w	r1, r1, #1
 8015288:	f1c1 0b02 	rsb	fp, r1, #2
 801528c:	2a00      	cmp	r2, #0
 801528e:	d15b      	bne.n	8015348 <__ieee754_pow+0x150>
 8015290:	4b5b      	ldr	r3, [pc, #364]	; (8015400 <__ieee754_pow+0x208>)
 8015292:	4598      	cmp	r8, r3
 8015294:	d124      	bne.n	80152e0 <__ieee754_pow+0xe8>
 8015296:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801529a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801529e:	ea53 030a 	orrs.w	r3, r3, sl
 80152a2:	f000 8476 	beq.w	8015b92 <__ieee754_pow+0x99a>
 80152a6:	4b59      	ldr	r3, [pc, #356]	; (801540c <__ieee754_pow+0x214>)
 80152a8:	429c      	cmp	r4, r3
 80152aa:	dd2d      	ble.n	8015308 <__ieee754_pow+0x110>
 80152ac:	f1b9 0f00 	cmp.w	r9, #0
 80152b0:	f280 8473 	bge.w	8015b9a <__ieee754_pow+0x9a2>
 80152b4:	2000      	movs	r0, #0
 80152b6:	2100      	movs	r1, #0
 80152b8:	ec41 0b10 	vmov	d0, r0, r1
 80152bc:	b011      	add	sp, #68	; 0x44
 80152be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c2:	2a00      	cmp	r2, #0
 80152c4:	d13e      	bne.n	8015344 <__ieee754_pow+0x14c>
 80152c6:	f1c3 0314 	rsb	r3, r3, #20
 80152ca:	fa48 f103 	asr.w	r1, r8, r3
 80152ce:	fa01 f303 	lsl.w	r3, r1, r3
 80152d2:	4543      	cmp	r3, r8
 80152d4:	f040 8469 	bne.w	8015baa <__ieee754_pow+0x9b2>
 80152d8:	f001 0101 	and.w	r1, r1, #1
 80152dc:	f1c1 0b02 	rsb	fp, r1, #2
 80152e0:	4b4b      	ldr	r3, [pc, #300]	; (8015410 <__ieee754_pow+0x218>)
 80152e2:	4598      	cmp	r8, r3
 80152e4:	d118      	bne.n	8015318 <__ieee754_pow+0x120>
 80152e6:	f1b9 0f00 	cmp.w	r9, #0
 80152ea:	f280 845a 	bge.w	8015ba2 <__ieee754_pow+0x9aa>
 80152ee:	4948      	ldr	r1, [pc, #288]	; (8015410 <__ieee754_pow+0x218>)
 80152f0:	4632      	mov	r2, r6
 80152f2:	463b      	mov	r3, r7
 80152f4:	2000      	movs	r0, #0
 80152f6:	f7eb fac9 	bl	800088c <__aeabi_ddiv>
 80152fa:	e7dd      	b.n	80152b8 <__ieee754_pow+0xc0>
 80152fc:	f04f 0b02 	mov.w	fp, #2
 8015300:	e7c4      	b.n	801528c <__ieee754_pow+0x94>
 8015302:	f04f 0b00 	mov.w	fp, #0
 8015306:	e7c1      	b.n	801528c <__ieee754_pow+0x94>
 8015308:	f1b9 0f00 	cmp.w	r9, #0
 801530c:	dad2      	bge.n	80152b4 <__ieee754_pow+0xbc>
 801530e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015312:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015316:	e7cf      	b.n	80152b8 <__ieee754_pow+0xc0>
 8015318:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801531c:	d106      	bne.n	801532c <__ieee754_pow+0x134>
 801531e:	4632      	mov	r2, r6
 8015320:	463b      	mov	r3, r7
 8015322:	4610      	mov	r0, r2
 8015324:	4619      	mov	r1, r3
 8015326:	f7eb f987 	bl	8000638 <__aeabi_dmul>
 801532a:	e7c5      	b.n	80152b8 <__ieee754_pow+0xc0>
 801532c:	4b39      	ldr	r3, [pc, #228]	; (8015414 <__ieee754_pow+0x21c>)
 801532e:	4599      	cmp	r9, r3
 8015330:	d10a      	bne.n	8015348 <__ieee754_pow+0x150>
 8015332:	2d00      	cmp	r5, #0
 8015334:	db08      	blt.n	8015348 <__ieee754_pow+0x150>
 8015336:	ec47 6b10 	vmov	d0, r6, r7
 801533a:	b011      	add	sp, #68	; 0x44
 801533c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	f000 be5c 	b.w	8015ffc <__ieee754_sqrt>
 8015344:	f04f 0b00 	mov.w	fp, #0
 8015348:	ec47 6b10 	vmov	d0, r6, r7
 801534c:	f001 fd6c 	bl	8016e28 <fabs>
 8015350:	ec51 0b10 	vmov	r0, r1, d0
 8015354:	f1ba 0f00 	cmp.w	sl, #0
 8015358:	d127      	bne.n	80153aa <__ieee754_pow+0x1b2>
 801535a:	b124      	cbz	r4, 8015366 <__ieee754_pow+0x16e>
 801535c:	4b2c      	ldr	r3, [pc, #176]	; (8015410 <__ieee754_pow+0x218>)
 801535e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015362:	429a      	cmp	r2, r3
 8015364:	d121      	bne.n	80153aa <__ieee754_pow+0x1b2>
 8015366:	f1b9 0f00 	cmp.w	r9, #0
 801536a:	da05      	bge.n	8015378 <__ieee754_pow+0x180>
 801536c:	4602      	mov	r2, r0
 801536e:	460b      	mov	r3, r1
 8015370:	2000      	movs	r0, #0
 8015372:	4927      	ldr	r1, [pc, #156]	; (8015410 <__ieee754_pow+0x218>)
 8015374:	f7eb fa8a 	bl	800088c <__aeabi_ddiv>
 8015378:	2d00      	cmp	r5, #0
 801537a:	da9d      	bge.n	80152b8 <__ieee754_pow+0xc0>
 801537c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015380:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015384:	ea54 030b 	orrs.w	r3, r4, fp
 8015388:	d108      	bne.n	801539c <__ieee754_pow+0x1a4>
 801538a:	4602      	mov	r2, r0
 801538c:	460b      	mov	r3, r1
 801538e:	4610      	mov	r0, r2
 8015390:	4619      	mov	r1, r3
 8015392:	f7ea ff99 	bl	80002c8 <__aeabi_dsub>
 8015396:	4602      	mov	r2, r0
 8015398:	460b      	mov	r3, r1
 801539a:	e7ac      	b.n	80152f6 <__ieee754_pow+0xfe>
 801539c:	f1bb 0f01 	cmp.w	fp, #1
 80153a0:	d18a      	bne.n	80152b8 <__ieee754_pow+0xc0>
 80153a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153a6:	4619      	mov	r1, r3
 80153a8:	e786      	b.n	80152b8 <__ieee754_pow+0xc0>
 80153aa:	0fed      	lsrs	r5, r5, #31
 80153ac:	1e6b      	subs	r3, r5, #1
 80153ae:	930d      	str	r3, [sp, #52]	; 0x34
 80153b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80153b4:	d102      	bne.n	80153bc <__ieee754_pow+0x1c4>
 80153b6:	4632      	mov	r2, r6
 80153b8:	463b      	mov	r3, r7
 80153ba:	e7e8      	b.n	801538e <__ieee754_pow+0x196>
 80153bc:	4b16      	ldr	r3, [pc, #88]	; (8015418 <__ieee754_pow+0x220>)
 80153be:	4598      	cmp	r8, r3
 80153c0:	f340 80fe 	ble.w	80155c0 <__ieee754_pow+0x3c8>
 80153c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80153c8:	4598      	cmp	r8, r3
 80153ca:	dd0a      	ble.n	80153e2 <__ieee754_pow+0x1ea>
 80153cc:	4b0f      	ldr	r3, [pc, #60]	; (801540c <__ieee754_pow+0x214>)
 80153ce:	429c      	cmp	r4, r3
 80153d0:	dc0d      	bgt.n	80153ee <__ieee754_pow+0x1f6>
 80153d2:	f1b9 0f00 	cmp.w	r9, #0
 80153d6:	f6bf af6d 	bge.w	80152b4 <__ieee754_pow+0xbc>
 80153da:	a307      	add	r3, pc, #28	; (adr r3, 80153f8 <__ieee754_pow+0x200>)
 80153dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e0:	e79f      	b.n	8015322 <__ieee754_pow+0x12a>
 80153e2:	4b0e      	ldr	r3, [pc, #56]	; (801541c <__ieee754_pow+0x224>)
 80153e4:	429c      	cmp	r4, r3
 80153e6:	ddf4      	ble.n	80153d2 <__ieee754_pow+0x1da>
 80153e8:	4b09      	ldr	r3, [pc, #36]	; (8015410 <__ieee754_pow+0x218>)
 80153ea:	429c      	cmp	r4, r3
 80153ec:	dd18      	ble.n	8015420 <__ieee754_pow+0x228>
 80153ee:	f1b9 0f00 	cmp.w	r9, #0
 80153f2:	dcf2      	bgt.n	80153da <__ieee754_pow+0x1e2>
 80153f4:	e75e      	b.n	80152b4 <__ieee754_pow+0xbc>
 80153f6:	bf00      	nop
 80153f8:	8800759c 	.word	0x8800759c
 80153fc:	7e37e43c 	.word	0x7e37e43c
 8015400:	7ff00000 	.word	0x7ff00000
 8015404:	0801787b 	.word	0x0801787b
 8015408:	433fffff 	.word	0x433fffff
 801540c:	3fefffff 	.word	0x3fefffff
 8015410:	3ff00000 	.word	0x3ff00000
 8015414:	3fe00000 	.word	0x3fe00000
 8015418:	41e00000 	.word	0x41e00000
 801541c:	3feffffe 	.word	0x3feffffe
 8015420:	2200      	movs	r2, #0
 8015422:	4b63      	ldr	r3, [pc, #396]	; (80155b0 <__ieee754_pow+0x3b8>)
 8015424:	f7ea ff50 	bl	80002c8 <__aeabi_dsub>
 8015428:	a355      	add	r3, pc, #340	; (adr r3, 8015580 <__ieee754_pow+0x388>)
 801542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801542e:	4604      	mov	r4, r0
 8015430:	460d      	mov	r5, r1
 8015432:	f7eb f901 	bl	8000638 <__aeabi_dmul>
 8015436:	a354      	add	r3, pc, #336	; (adr r3, 8015588 <__ieee754_pow+0x390>)
 8015438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801543c:	4606      	mov	r6, r0
 801543e:	460f      	mov	r7, r1
 8015440:	4620      	mov	r0, r4
 8015442:	4629      	mov	r1, r5
 8015444:	f7eb f8f8 	bl	8000638 <__aeabi_dmul>
 8015448:	2200      	movs	r2, #0
 801544a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801544e:	4b59      	ldr	r3, [pc, #356]	; (80155b4 <__ieee754_pow+0x3bc>)
 8015450:	4620      	mov	r0, r4
 8015452:	4629      	mov	r1, r5
 8015454:	f7eb f8f0 	bl	8000638 <__aeabi_dmul>
 8015458:	4602      	mov	r2, r0
 801545a:	460b      	mov	r3, r1
 801545c:	a14c      	add	r1, pc, #304	; (adr r1, 8015590 <__ieee754_pow+0x398>)
 801545e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015462:	f7ea ff31 	bl	80002c8 <__aeabi_dsub>
 8015466:	4622      	mov	r2, r4
 8015468:	462b      	mov	r3, r5
 801546a:	f7eb f8e5 	bl	8000638 <__aeabi_dmul>
 801546e:	4602      	mov	r2, r0
 8015470:	460b      	mov	r3, r1
 8015472:	2000      	movs	r0, #0
 8015474:	4950      	ldr	r1, [pc, #320]	; (80155b8 <__ieee754_pow+0x3c0>)
 8015476:	f7ea ff27 	bl	80002c8 <__aeabi_dsub>
 801547a:	4622      	mov	r2, r4
 801547c:	462b      	mov	r3, r5
 801547e:	4680      	mov	r8, r0
 8015480:	4689      	mov	r9, r1
 8015482:	4620      	mov	r0, r4
 8015484:	4629      	mov	r1, r5
 8015486:	f7eb f8d7 	bl	8000638 <__aeabi_dmul>
 801548a:	4602      	mov	r2, r0
 801548c:	460b      	mov	r3, r1
 801548e:	4640      	mov	r0, r8
 8015490:	4649      	mov	r1, r9
 8015492:	f7eb f8d1 	bl	8000638 <__aeabi_dmul>
 8015496:	a340      	add	r3, pc, #256	; (adr r3, 8015598 <__ieee754_pow+0x3a0>)
 8015498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549c:	f7eb f8cc 	bl	8000638 <__aeabi_dmul>
 80154a0:	4602      	mov	r2, r0
 80154a2:	460b      	mov	r3, r1
 80154a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154a8:	f7ea ff0e 	bl	80002c8 <__aeabi_dsub>
 80154ac:	4602      	mov	r2, r0
 80154ae:	460b      	mov	r3, r1
 80154b0:	4604      	mov	r4, r0
 80154b2:	460d      	mov	r5, r1
 80154b4:	4630      	mov	r0, r6
 80154b6:	4639      	mov	r1, r7
 80154b8:	f7ea ff08 	bl	80002cc <__adddf3>
 80154bc:	2000      	movs	r0, #0
 80154be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154c2:	4632      	mov	r2, r6
 80154c4:	463b      	mov	r3, r7
 80154c6:	f7ea feff 	bl	80002c8 <__aeabi_dsub>
 80154ca:	4602      	mov	r2, r0
 80154cc:	460b      	mov	r3, r1
 80154ce:	4620      	mov	r0, r4
 80154d0:	4629      	mov	r1, r5
 80154d2:	f7ea fef9 	bl	80002c8 <__aeabi_dsub>
 80154d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154d8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80154dc:	4313      	orrs	r3, r2
 80154de:	4606      	mov	r6, r0
 80154e0:	460f      	mov	r7, r1
 80154e2:	f040 81eb 	bne.w	80158bc <__ieee754_pow+0x6c4>
 80154e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80155a0 <__ieee754_pow+0x3a8>
 80154ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80154ee:	2400      	movs	r4, #0
 80154f0:	4622      	mov	r2, r4
 80154f2:	462b      	mov	r3, r5
 80154f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80154fc:	f7ea fee4 	bl	80002c8 <__aeabi_dsub>
 8015500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015504:	f7eb f898 	bl	8000638 <__aeabi_dmul>
 8015508:	e9dd 2300 	ldrd	r2, r3, [sp]
 801550c:	4680      	mov	r8, r0
 801550e:	4689      	mov	r9, r1
 8015510:	4630      	mov	r0, r6
 8015512:	4639      	mov	r1, r7
 8015514:	f7eb f890 	bl	8000638 <__aeabi_dmul>
 8015518:	4602      	mov	r2, r0
 801551a:	460b      	mov	r3, r1
 801551c:	4640      	mov	r0, r8
 801551e:	4649      	mov	r1, r9
 8015520:	f7ea fed4 	bl	80002cc <__adddf3>
 8015524:	4622      	mov	r2, r4
 8015526:	462b      	mov	r3, r5
 8015528:	4680      	mov	r8, r0
 801552a:	4689      	mov	r9, r1
 801552c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015530:	f7eb f882 	bl	8000638 <__aeabi_dmul>
 8015534:	460b      	mov	r3, r1
 8015536:	4604      	mov	r4, r0
 8015538:	460d      	mov	r5, r1
 801553a:	4602      	mov	r2, r0
 801553c:	4649      	mov	r1, r9
 801553e:	4640      	mov	r0, r8
 8015540:	e9cd 4500 	strd	r4, r5, [sp]
 8015544:	f7ea fec2 	bl	80002cc <__adddf3>
 8015548:	4b1c      	ldr	r3, [pc, #112]	; (80155bc <__ieee754_pow+0x3c4>)
 801554a:	4299      	cmp	r1, r3
 801554c:	4606      	mov	r6, r0
 801554e:	460f      	mov	r7, r1
 8015550:	468b      	mov	fp, r1
 8015552:	f340 82f7 	ble.w	8015b44 <__ieee754_pow+0x94c>
 8015556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801555a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801555e:	4303      	orrs	r3, r0
 8015560:	f000 81ea 	beq.w	8015938 <__ieee754_pow+0x740>
 8015564:	a310      	add	r3, pc, #64	; (adr r3, 80155a8 <__ieee754_pow+0x3b0>)
 8015566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801556e:	f7eb f863 	bl	8000638 <__aeabi_dmul>
 8015572:	a30d      	add	r3, pc, #52	; (adr r3, 80155a8 <__ieee754_pow+0x3b0>)
 8015574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015578:	e6d5      	b.n	8015326 <__ieee754_pow+0x12e>
 801557a:	bf00      	nop
 801557c:	f3af 8000 	nop.w
 8015580:	60000000 	.word	0x60000000
 8015584:	3ff71547 	.word	0x3ff71547
 8015588:	f85ddf44 	.word	0xf85ddf44
 801558c:	3e54ae0b 	.word	0x3e54ae0b
 8015590:	55555555 	.word	0x55555555
 8015594:	3fd55555 	.word	0x3fd55555
 8015598:	652b82fe 	.word	0x652b82fe
 801559c:	3ff71547 	.word	0x3ff71547
 80155a0:	00000000 	.word	0x00000000
 80155a4:	bff00000 	.word	0xbff00000
 80155a8:	8800759c 	.word	0x8800759c
 80155ac:	7e37e43c 	.word	0x7e37e43c
 80155b0:	3ff00000 	.word	0x3ff00000
 80155b4:	3fd00000 	.word	0x3fd00000
 80155b8:	3fe00000 	.word	0x3fe00000
 80155bc:	408fffff 	.word	0x408fffff
 80155c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80155c4:	f04f 0200 	mov.w	r2, #0
 80155c8:	da05      	bge.n	80155d6 <__ieee754_pow+0x3de>
 80155ca:	4bd3      	ldr	r3, [pc, #844]	; (8015918 <__ieee754_pow+0x720>)
 80155cc:	f7eb f834 	bl	8000638 <__aeabi_dmul>
 80155d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80155d4:	460c      	mov	r4, r1
 80155d6:	1523      	asrs	r3, r4, #20
 80155d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80155dc:	4413      	add	r3, r2
 80155de:	9309      	str	r3, [sp, #36]	; 0x24
 80155e0:	4bce      	ldr	r3, [pc, #824]	; (801591c <__ieee754_pow+0x724>)
 80155e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80155e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80155ea:	429c      	cmp	r4, r3
 80155ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80155f0:	dd08      	ble.n	8015604 <__ieee754_pow+0x40c>
 80155f2:	4bcb      	ldr	r3, [pc, #812]	; (8015920 <__ieee754_pow+0x728>)
 80155f4:	429c      	cmp	r4, r3
 80155f6:	f340 815e 	ble.w	80158b6 <__ieee754_pow+0x6be>
 80155fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155fc:	3301      	adds	r3, #1
 80155fe:	9309      	str	r3, [sp, #36]	; 0x24
 8015600:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015604:	f04f 0a00 	mov.w	sl, #0
 8015608:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801560c:	930c      	str	r3, [sp, #48]	; 0x30
 801560e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015610:	4bc4      	ldr	r3, [pc, #784]	; (8015924 <__ieee754_pow+0x72c>)
 8015612:	4413      	add	r3, r2
 8015614:	ed93 7b00 	vldr	d7, [r3]
 8015618:	4629      	mov	r1, r5
 801561a:	ec53 2b17 	vmov	r2, r3, d7
 801561e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015622:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015626:	f7ea fe4f 	bl	80002c8 <__aeabi_dsub>
 801562a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801562e:	4606      	mov	r6, r0
 8015630:	460f      	mov	r7, r1
 8015632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015636:	f7ea fe49 	bl	80002cc <__adddf3>
 801563a:	4602      	mov	r2, r0
 801563c:	460b      	mov	r3, r1
 801563e:	2000      	movs	r0, #0
 8015640:	49b9      	ldr	r1, [pc, #740]	; (8015928 <__ieee754_pow+0x730>)
 8015642:	f7eb f923 	bl	800088c <__aeabi_ddiv>
 8015646:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801564a:	4602      	mov	r2, r0
 801564c:	460b      	mov	r3, r1
 801564e:	4630      	mov	r0, r6
 8015650:	4639      	mov	r1, r7
 8015652:	f7ea fff1 	bl	8000638 <__aeabi_dmul>
 8015656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801565a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801565e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015662:	2300      	movs	r3, #0
 8015664:	9302      	str	r3, [sp, #8]
 8015666:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801566a:	106d      	asrs	r5, r5, #1
 801566c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015670:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015674:	2200      	movs	r2, #0
 8015676:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801567a:	4640      	mov	r0, r8
 801567c:	4649      	mov	r1, r9
 801567e:	4614      	mov	r4, r2
 8015680:	461d      	mov	r5, r3
 8015682:	f7ea ffd9 	bl	8000638 <__aeabi_dmul>
 8015686:	4602      	mov	r2, r0
 8015688:	460b      	mov	r3, r1
 801568a:	4630      	mov	r0, r6
 801568c:	4639      	mov	r1, r7
 801568e:	f7ea fe1b 	bl	80002c8 <__aeabi_dsub>
 8015692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015696:	4606      	mov	r6, r0
 8015698:	460f      	mov	r7, r1
 801569a:	4620      	mov	r0, r4
 801569c:	4629      	mov	r1, r5
 801569e:	f7ea fe13 	bl	80002c8 <__aeabi_dsub>
 80156a2:	4602      	mov	r2, r0
 80156a4:	460b      	mov	r3, r1
 80156a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80156aa:	f7ea fe0d 	bl	80002c8 <__aeabi_dsub>
 80156ae:	4642      	mov	r2, r8
 80156b0:	464b      	mov	r3, r9
 80156b2:	f7ea ffc1 	bl	8000638 <__aeabi_dmul>
 80156b6:	4602      	mov	r2, r0
 80156b8:	460b      	mov	r3, r1
 80156ba:	4630      	mov	r0, r6
 80156bc:	4639      	mov	r1, r7
 80156be:	f7ea fe03 	bl	80002c8 <__aeabi_dsub>
 80156c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80156c6:	f7ea ffb7 	bl	8000638 <__aeabi_dmul>
 80156ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80156d2:	4610      	mov	r0, r2
 80156d4:	4619      	mov	r1, r3
 80156d6:	f7ea ffaf 	bl	8000638 <__aeabi_dmul>
 80156da:	a37b      	add	r3, pc, #492	; (adr r3, 80158c8 <__ieee754_pow+0x6d0>)
 80156dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e0:	4604      	mov	r4, r0
 80156e2:	460d      	mov	r5, r1
 80156e4:	f7ea ffa8 	bl	8000638 <__aeabi_dmul>
 80156e8:	a379      	add	r3, pc, #484	; (adr r3, 80158d0 <__ieee754_pow+0x6d8>)
 80156ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ee:	f7ea fded 	bl	80002cc <__adddf3>
 80156f2:	4622      	mov	r2, r4
 80156f4:	462b      	mov	r3, r5
 80156f6:	f7ea ff9f 	bl	8000638 <__aeabi_dmul>
 80156fa:	a377      	add	r3, pc, #476	; (adr r3, 80158d8 <__ieee754_pow+0x6e0>)
 80156fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015700:	f7ea fde4 	bl	80002cc <__adddf3>
 8015704:	4622      	mov	r2, r4
 8015706:	462b      	mov	r3, r5
 8015708:	f7ea ff96 	bl	8000638 <__aeabi_dmul>
 801570c:	a374      	add	r3, pc, #464	; (adr r3, 80158e0 <__ieee754_pow+0x6e8>)
 801570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015712:	f7ea fddb 	bl	80002cc <__adddf3>
 8015716:	4622      	mov	r2, r4
 8015718:	462b      	mov	r3, r5
 801571a:	f7ea ff8d 	bl	8000638 <__aeabi_dmul>
 801571e:	a372      	add	r3, pc, #456	; (adr r3, 80158e8 <__ieee754_pow+0x6f0>)
 8015720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015724:	f7ea fdd2 	bl	80002cc <__adddf3>
 8015728:	4622      	mov	r2, r4
 801572a:	462b      	mov	r3, r5
 801572c:	f7ea ff84 	bl	8000638 <__aeabi_dmul>
 8015730:	a36f      	add	r3, pc, #444	; (adr r3, 80158f0 <__ieee754_pow+0x6f8>)
 8015732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015736:	f7ea fdc9 	bl	80002cc <__adddf3>
 801573a:	4622      	mov	r2, r4
 801573c:	4606      	mov	r6, r0
 801573e:	460f      	mov	r7, r1
 8015740:	462b      	mov	r3, r5
 8015742:	4620      	mov	r0, r4
 8015744:	4629      	mov	r1, r5
 8015746:	f7ea ff77 	bl	8000638 <__aeabi_dmul>
 801574a:	4602      	mov	r2, r0
 801574c:	460b      	mov	r3, r1
 801574e:	4630      	mov	r0, r6
 8015750:	4639      	mov	r1, r7
 8015752:	f7ea ff71 	bl	8000638 <__aeabi_dmul>
 8015756:	4642      	mov	r2, r8
 8015758:	4604      	mov	r4, r0
 801575a:	460d      	mov	r5, r1
 801575c:	464b      	mov	r3, r9
 801575e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015762:	f7ea fdb3 	bl	80002cc <__adddf3>
 8015766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801576a:	f7ea ff65 	bl	8000638 <__aeabi_dmul>
 801576e:	4622      	mov	r2, r4
 8015770:	462b      	mov	r3, r5
 8015772:	f7ea fdab 	bl	80002cc <__adddf3>
 8015776:	4642      	mov	r2, r8
 8015778:	4606      	mov	r6, r0
 801577a:	460f      	mov	r7, r1
 801577c:	464b      	mov	r3, r9
 801577e:	4640      	mov	r0, r8
 8015780:	4649      	mov	r1, r9
 8015782:	f7ea ff59 	bl	8000638 <__aeabi_dmul>
 8015786:	2200      	movs	r2, #0
 8015788:	4b68      	ldr	r3, [pc, #416]	; (801592c <__ieee754_pow+0x734>)
 801578a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801578e:	f7ea fd9d 	bl	80002cc <__adddf3>
 8015792:	4632      	mov	r2, r6
 8015794:	463b      	mov	r3, r7
 8015796:	f7ea fd99 	bl	80002cc <__adddf3>
 801579a:	9802      	ldr	r0, [sp, #8]
 801579c:	460d      	mov	r5, r1
 801579e:	4604      	mov	r4, r0
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	4640      	mov	r0, r8
 80157a6:	4649      	mov	r1, r9
 80157a8:	f7ea ff46 	bl	8000638 <__aeabi_dmul>
 80157ac:	2200      	movs	r2, #0
 80157ae:	4680      	mov	r8, r0
 80157b0:	4689      	mov	r9, r1
 80157b2:	4b5e      	ldr	r3, [pc, #376]	; (801592c <__ieee754_pow+0x734>)
 80157b4:	4620      	mov	r0, r4
 80157b6:	4629      	mov	r1, r5
 80157b8:	f7ea fd86 	bl	80002c8 <__aeabi_dsub>
 80157bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80157c0:	f7ea fd82 	bl	80002c8 <__aeabi_dsub>
 80157c4:	4602      	mov	r2, r0
 80157c6:	460b      	mov	r3, r1
 80157c8:	4630      	mov	r0, r6
 80157ca:	4639      	mov	r1, r7
 80157cc:	f7ea fd7c 	bl	80002c8 <__aeabi_dsub>
 80157d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157d4:	f7ea ff30 	bl	8000638 <__aeabi_dmul>
 80157d8:	4622      	mov	r2, r4
 80157da:	4606      	mov	r6, r0
 80157dc:	460f      	mov	r7, r1
 80157de:	462b      	mov	r3, r5
 80157e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157e4:	f7ea ff28 	bl	8000638 <__aeabi_dmul>
 80157e8:	4602      	mov	r2, r0
 80157ea:	460b      	mov	r3, r1
 80157ec:	4630      	mov	r0, r6
 80157ee:	4639      	mov	r1, r7
 80157f0:	f7ea fd6c 	bl	80002cc <__adddf3>
 80157f4:	4606      	mov	r6, r0
 80157f6:	460f      	mov	r7, r1
 80157f8:	4602      	mov	r2, r0
 80157fa:	460b      	mov	r3, r1
 80157fc:	4640      	mov	r0, r8
 80157fe:	4649      	mov	r1, r9
 8015800:	f7ea fd64 	bl	80002cc <__adddf3>
 8015804:	9802      	ldr	r0, [sp, #8]
 8015806:	a33c      	add	r3, pc, #240	; (adr r3, 80158f8 <__ieee754_pow+0x700>)
 8015808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580c:	4604      	mov	r4, r0
 801580e:	460d      	mov	r5, r1
 8015810:	f7ea ff12 	bl	8000638 <__aeabi_dmul>
 8015814:	4642      	mov	r2, r8
 8015816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801581a:	464b      	mov	r3, r9
 801581c:	4620      	mov	r0, r4
 801581e:	4629      	mov	r1, r5
 8015820:	f7ea fd52 	bl	80002c8 <__aeabi_dsub>
 8015824:	4602      	mov	r2, r0
 8015826:	460b      	mov	r3, r1
 8015828:	4630      	mov	r0, r6
 801582a:	4639      	mov	r1, r7
 801582c:	f7ea fd4c 	bl	80002c8 <__aeabi_dsub>
 8015830:	a333      	add	r3, pc, #204	; (adr r3, 8015900 <__ieee754_pow+0x708>)
 8015832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015836:	f7ea feff 	bl	8000638 <__aeabi_dmul>
 801583a:	a333      	add	r3, pc, #204	; (adr r3, 8015908 <__ieee754_pow+0x710>)
 801583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015840:	4606      	mov	r6, r0
 8015842:	460f      	mov	r7, r1
 8015844:	4620      	mov	r0, r4
 8015846:	4629      	mov	r1, r5
 8015848:	f7ea fef6 	bl	8000638 <__aeabi_dmul>
 801584c:	4602      	mov	r2, r0
 801584e:	460b      	mov	r3, r1
 8015850:	4630      	mov	r0, r6
 8015852:	4639      	mov	r1, r7
 8015854:	f7ea fd3a 	bl	80002cc <__adddf3>
 8015858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801585a:	4b35      	ldr	r3, [pc, #212]	; (8015930 <__ieee754_pow+0x738>)
 801585c:	4413      	add	r3, r2
 801585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015862:	f7ea fd33 	bl	80002cc <__adddf3>
 8015866:	4604      	mov	r4, r0
 8015868:	9809      	ldr	r0, [sp, #36]	; 0x24
 801586a:	460d      	mov	r5, r1
 801586c:	f7ea fe7a 	bl	8000564 <__aeabi_i2d>
 8015870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015872:	4b30      	ldr	r3, [pc, #192]	; (8015934 <__ieee754_pow+0x73c>)
 8015874:	4413      	add	r3, r2
 8015876:	e9d3 8900 	ldrd	r8, r9, [r3]
 801587a:	4606      	mov	r6, r0
 801587c:	460f      	mov	r7, r1
 801587e:	4622      	mov	r2, r4
 8015880:	462b      	mov	r3, r5
 8015882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015886:	f7ea fd21 	bl	80002cc <__adddf3>
 801588a:	4642      	mov	r2, r8
 801588c:	464b      	mov	r3, r9
 801588e:	f7ea fd1d 	bl	80002cc <__adddf3>
 8015892:	4632      	mov	r2, r6
 8015894:	463b      	mov	r3, r7
 8015896:	f7ea fd19 	bl	80002cc <__adddf3>
 801589a:	9802      	ldr	r0, [sp, #8]
 801589c:	4632      	mov	r2, r6
 801589e:	463b      	mov	r3, r7
 80158a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158a4:	f7ea fd10 	bl	80002c8 <__aeabi_dsub>
 80158a8:	4642      	mov	r2, r8
 80158aa:	464b      	mov	r3, r9
 80158ac:	f7ea fd0c 	bl	80002c8 <__aeabi_dsub>
 80158b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80158b4:	e607      	b.n	80154c6 <__ieee754_pow+0x2ce>
 80158b6:	f04f 0a01 	mov.w	sl, #1
 80158ba:	e6a5      	b.n	8015608 <__ieee754_pow+0x410>
 80158bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015910 <__ieee754_pow+0x718>
 80158c0:	e613      	b.n	80154ea <__ieee754_pow+0x2f2>
 80158c2:	bf00      	nop
 80158c4:	f3af 8000 	nop.w
 80158c8:	4a454eef 	.word	0x4a454eef
 80158cc:	3fca7e28 	.word	0x3fca7e28
 80158d0:	93c9db65 	.word	0x93c9db65
 80158d4:	3fcd864a 	.word	0x3fcd864a
 80158d8:	a91d4101 	.word	0xa91d4101
 80158dc:	3fd17460 	.word	0x3fd17460
 80158e0:	518f264d 	.word	0x518f264d
 80158e4:	3fd55555 	.word	0x3fd55555
 80158e8:	db6fabff 	.word	0xdb6fabff
 80158ec:	3fdb6db6 	.word	0x3fdb6db6
 80158f0:	33333303 	.word	0x33333303
 80158f4:	3fe33333 	.word	0x3fe33333
 80158f8:	e0000000 	.word	0xe0000000
 80158fc:	3feec709 	.word	0x3feec709
 8015900:	dc3a03fd 	.word	0xdc3a03fd
 8015904:	3feec709 	.word	0x3feec709
 8015908:	145b01f5 	.word	0x145b01f5
 801590c:	be3e2fe0 	.word	0xbe3e2fe0
 8015910:	00000000 	.word	0x00000000
 8015914:	3ff00000 	.word	0x3ff00000
 8015918:	43400000 	.word	0x43400000
 801591c:	0003988e 	.word	0x0003988e
 8015920:	000bb679 	.word	0x000bb679
 8015924:	08017b50 	.word	0x08017b50
 8015928:	3ff00000 	.word	0x3ff00000
 801592c:	40080000 	.word	0x40080000
 8015930:	08017b70 	.word	0x08017b70
 8015934:	08017b60 	.word	0x08017b60
 8015938:	a3b4      	add	r3, pc, #720	; (adr r3, 8015c0c <__ieee754_pow+0xa14>)
 801593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801593e:	4640      	mov	r0, r8
 8015940:	4649      	mov	r1, r9
 8015942:	f7ea fcc3 	bl	80002cc <__adddf3>
 8015946:	4622      	mov	r2, r4
 8015948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801594c:	462b      	mov	r3, r5
 801594e:	4630      	mov	r0, r6
 8015950:	4639      	mov	r1, r7
 8015952:	f7ea fcb9 	bl	80002c8 <__aeabi_dsub>
 8015956:	4602      	mov	r2, r0
 8015958:	460b      	mov	r3, r1
 801595a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801595e:	f7eb f8fb 	bl	8000b58 <__aeabi_dcmpgt>
 8015962:	2800      	cmp	r0, #0
 8015964:	f47f adfe 	bne.w	8015564 <__ieee754_pow+0x36c>
 8015968:	4aa3      	ldr	r2, [pc, #652]	; (8015bf8 <__ieee754_pow+0xa00>)
 801596a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801596e:	4293      	cmp	r3, r2
 8015970:	f340 810a 	ble.w	8015b88 <__ieee754_pow+0x990>
 8015974:	151b      	asrs	r3, r3, #20
 8015976:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801597a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801597e:	fa4a f303 	asr.w	r3, sl, r3
 8015982:	445b      	add	r3, fp
 8015984:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015988:	4e9c      	ldr	r6, [pc, #624]	; (8015bfc <__ieee754_pow+0xa04>)
 801598a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801598e:	4116      	asrs	r6, r2
 8015990:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015994:	2000      	movs	r0, #0
 8015996:	ea23 0106 	bic.w	r1, r3, r6
 801599a:	f1c2 0214 	rsb	r2, r2, #20
 801599e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80159a2:	fa4a fa02 	asr.w	sl, sl, r2
 80159a6:	f1bb 0f00 	cmp.w	fp, #0
 80159aa:	4602      	mov	r2, r0
 80159ac:	460b      	mov	r3, r1
 80159ae:	4620      	mov	r0, r4
 80159b0:	4629      	mov	r1, r5
 80159b2:	bfb8      	it	lt
 80159b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80159b8:	f7ea fc86 	bl	80002c8 <__aeabi_dsub>
 80159bc:	e9cd 0100 	strd	r0, r1, [sp]
 80159c0:	4642      	mov	r2, r8
 80159c2:	464b      	mov	r3, r9
 80159c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159c8:	f7ea fc80 	bl	80002cc <__adddf3>
 80159cc:	2000      	movs	r0, #0
 80159ce:	a378      	add	r3, pc, #480	; (adr r3, 8015bb0 <__ieee754_pow+0x9b8>)
 80159d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d4:	4604      	mov	r4, r0
 80159d6:	460d      	mov	r5, r1
 80159d8:	f7ea fe2e 	bl	8000638 <__aeabi_dmul>
 80159dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159e0:	4606      	mov	r6, r0
 80159e2:	460f      	mov	r7, r1
 80159e4:	4620      	mov	r0, r4
 80159e6:	4629      	mov	r1, r5
 80159e8:	f7ea fc6e 	bl	80002c8 <__aeabi_dsub>
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	4640      	mov	r0, r8
 80159f2:	4649      	mov	r1, r9
 80159f4:	f7ea fc68 	bl	80002c8 <__aeabi_dsub>
 80159f8:	a36f      	add	r3, pc, #444	; (adr r3, 8015bb8 <__ieee754_pow+0x9c0>)
 80159fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159fe:	f7ea fe1b 	bl	8000638 <__aeabi_dmul>
 8015a02:	a36f      	add	r3, pc, #444	; (adr r3, 8015bc0 <__ieee754_pow+0x9c8>)
 8015a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a08:	4680      	mov	r8, r0
 8015a0a:	4689      	mov	r9, r1
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	4629      	mov	r1, r5
 8015a10:	f7ea fe12 	bl	8000638 <__aeabi_dmul>
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	4640      	mov	r0, r8
 8015a1a:	4649      	mov	r1, r9
 8015a1c:	f7ea fc56 	bl	80002cc <__adddf3>
 8015a20:	4604      	mov	r4, r0
 8015a22:	460d      	mov	r5, r1
 8015a24:	4602      	mov	r2, r0
 8015a26:	460b      	mov	r3, r1
 8015a28:	4630      	mov	r0, r6
 8015a2a:	4639      	mov	r1, r7
 8015a2c:	f7ea fc4e 	bl	80002cc <__adddf3>
 8015a30:	4632      	mov	r2, r6
 8015a32:	463b      	mov	r3, r7
 8015a34:	4680      	mov	r8, r0
 8015a36:	4689      	mov	r9, r1
 8015a38:	f7ea fc46 	bl	80002c8 <__aeabi_dsub>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	460b      	mov	r3, r1
 8015a40:	4620      	mov	r0, r4
 8015a42:	4629      	mov	r1, r5
 8015a44:	f7ea fc40 	bl	80002c8 <__aeabi_dsub>
 8015a48:	4642      	mov	r2, r8
 8015a4a:	4606      	mov	r6, r0
 8015a4c:	460f      	mov	r7, r1
 8015a4e:	464b      	mov	r3, r9
 8015a50:	4640      	mov	r0, r8
 8015a52:	4649      	mov	r1, r9
 8015a54:	f7ea fdf0 	bl	8000638 <__aeabi_dmul>
 8015a58:	a35b      	add	r3, pc, #364	; (adr r3, 8015bc8 <__ieee754_pow+0x9d0>)
 8015a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5e:	4604      	mov	r4, r0
 8015a60:	460d      	mov	r5, r1
 8015a62:	f7ea fde9 	bl	8000638 <__aeabi_dmul>
 8015a66:	a35a      	add	r3, pc, #360	; (adr r3, 8015bd0 <__ieee754_pow+0x9d8>)
 8015a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a6c:	f7ea fc2c 	bl	80002c8 <__aeabi_dsub>
 8015a70:	4622      	mov	r2, r4
 8015a72:	462b      	mov	r3, r5
 8015a74:	f7ea fde0 	bl	8000638 <__aeabi_dmul>
 8015a78:	a357      	add	r3, pc, #348	; (adr r3, 8015bd8 <__ieee754_pow+0x9e0>)
 8015a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7e:	f7ea fc25 	bl	80002cc <__adddf3>
 8015a82:	4622      	mov	r2, r4
 8015a84:	462b      	mov	r3, r5
 8015a86:	f7ea fdd7 	bl	8000638 <__aeabi_dmul>
 8015a8a:	a355      	add	r3, pc, #340	; (adr r3, 8015be0 <__ieee754_pow+0x9e8>)
 8015a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a90:	f7ea fc1a 	bl	80002c8 <__aeabi_dsub>
 8015a94:	4622      	mov	r2, r4
 8015a96:	462b      	mov	r3, r5
 8015a98:	f7ea fdce 	bl	8000638 <__aeabi_dmul>
 8015a9c:	a352      	add	r3, pc, #328	; (adr r3, 8015be8 <__ieee754_pow+0x9f0>)
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	f7ea fc13 	bl	80002cc <__adddf3>
 8015aa6:	4622      	mov	r2, r4
 8015aa8:	462b      	mov	r3, r5
 8015aaa:	f7ea fdc5 	bl	8000638 <__aeabi_dmul>
 8015aae:	4602      	mov	r2, r0
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	4640      	mov	r0, r8
 8015ab4:	4649      	mov	r1, r9
 8015ab6:	f7ea fc07 	bl	80002c8 <__aeabi_dsub>
 8015aba:	4604      	mov	r4, r0
 8015abc:	460d      	mov	r5, r1
 8015abe:	4602      	mov	r2, r0
 8015ac0:	460b      	mov	r3, r1
 8015ac2:	4640      	mov	r0, r8
 8015ac4:	4649      	mov	r1, r9
 8015ac6:	f7ea fdb7 	bl	8000638 <__aeabi_dmul>
 8015aca:	2200      	movs	r2, #0
 8015acc:	e9cd 0100 	strd	r0, r1, [sp]
 8015ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	4629      	mov	r1, r5
 8015ad8:	f7ea fbf6 	bl	80002c8 <__aeabi_dsub>
 8015adc:	4602      	mov	r2, r0
 8015ade:	460b      	mov	r3, r1
 8015ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ae4:	f7ea fed2 	bl	800088c <__aeabi_ddiv>
 8015ae8:	4632      	mov	r2, r6
 8015aea:	4604      	mov	r4, r0
 8015aec:	460d      	mov	r5, r1
 8015aee:	463b      	mov	r3, r7
 8015af0:	4640      	mov	r0, r8
 8015af2:	4649      	mov	r1, r9
 8015af4:	f7ea fda0 	bl	8000638 <__aeabi_dmul>
 8015af8:	4632      	mov	r2, r6
 8015afa:	463b      	mov	r3, r7
 8015afc:	f7ea fbe6 	bl	80002cc <__adddf3>
 8015b00:	4602      	mov	r2, r0
 8015b02:	460b      	mov	r3, r1
 8015b04:	4620      	mov	r0, r4
 8015b06:	4629      	mov	r1, r5
 8015b08:	f7ea fbde 	bl	80002c8 <__aeabi_dsub>
 8015b0c:	4642      	mov	r2, r8
 8015b0e:	464b      	mov	r3, r9
 8015b10:	f7ea fbda 	bl	80002c8 <__aeabi_dsub>
 8015b14:	4602      	mov	r2, r0
 8015b16:	460b      	mov	r3, r1
 8015b18:	2000      	movs	r0, #0
 8015b1a:	4939      	ldr	r1, [pc, #228]	; (8015c00 <__ieee754_pow+0xa08>)
 8015b1c:	f7ea fbd4 	bl	80002c8 <__aeabi_dsub>
 8015b20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015b24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015b28:	4602      	mov	r2, r0
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	da2f      	bge.n	8015b8e <__ieee754_pow+0x996>
 8015b2e:	4650      	mov	r0, sl
 8015b30:	ec43 2b10 	vmov	d0, r2, r3
 8015b34:	f001 faa0 	bl	8017078 <scalbn>
 8015b38:	ec51 0b10 	vmov	r0, r1, d0
 8015b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b40:	f7ff bbf1 	b.w	8015326 <__ieee754_pow+0x12e>
 8015b44:	4b2f      	ldr	r3, [pc, #188]	; (8015c04 <__ieee754_pow+0xa0c>)
 8015b46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015b4a:	429e      	cmp	r6, r3
 8015b4c:	f77f af0c 	ble.w	8015968 <__ieee754_pow+0x770>
 8015b50:	4b2d      	ldr	r3, [pc, #180]	; (8015c08 <__ieee754_pow+0xa10>)
 8015b52:	440b      	add	r3, r1
 8015b54:	4303      	orrs	r3, r0
 8015b56:	d00b      	beq.n	8015b70 <__ieee754_pow+0x978>
 8015b58:	a325      	add	r3, pc, #148	; (adr r3, 8015bf0 <__ieee754_pow+0x9f8>)
 8015b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b62:	f7ea fd69 	bl	8000638 <__aeabi_dmul>
 8015b66:	a322      	add	r3, pc, #136	; (adr r3, 8015bf0 <__ieee754_pow+0x9f8>)
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	f7ff bbdb 	b.w	8015326 <__ieee754_pow+0x12e>
 8015b70:	4622      	mov	r2, r4
 8015b72:	462b      	mov	r3, r5
 8015b74:	f7ea fba8 	bl	80002c8 <__aeabi_dsub>
 8015b78:	4642      	mov	r2, r8
 8015b7a:	464b      	mov	r3, r9
 8015b7c:	f7ea ffe2 	bl	8000b44 <__aeabi_dcmpge>
 8015b80:	2800      	cmp	r0, #0
 8015b82:	f43f aef1 	beq.w	8015968 <__ieee754_pow+0x770>
 8015b86:	e7e7      	b.n	8015b58 <__ieee754_pow+0x960>
 8015b88:	f04f 0a00 	mov.w	sl, #0
 8015b8c:	e718      	b.n	80159c0 <__ieee754_pow+0x7c8>
 8015b8e:	4621      	mov	r1, r4
 8015b90:	e7d4      	b.n	8015b3c <__ieee754_pow+0x944>
 8015b92:	2000      	movs	r0, #0
 8015b94:	491a      	ldr	r1, [pc, #104]	; (8015c00 <__ieee754_pow+0xa08>)
 8015b96:	f7ff bb8f 	b.w	80152b8 <__ieee754_pow+0xc0>
 8015b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b9e:	f7ff bb8b 	b.w	80152b8 <__ieee754_pow+0xc0>
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	4639      	mov	r1, r7
 8015ba6:	f7ff bb87 	b.w	80152b8 <__ieee754_pow+0xc0>
 8015baa:	4693      	mov	fp, r2
 8015bac:	f7ff bb98 	b.w	80152e0 <__ieee754_pow+0xe8>
 8015bb0:	00000000 	.word	0x00000000
 8015bb4:	3fe62e43 	.word	0x3fe62e43
 8015bb8:	fefa39ef 	.word	0xfefa39ef
 8015bbc:	3fe62e42 	.word	0x3fe62e42
 8015bc0:	0ca86c39 	.word	0x0ca86c39
 8015bc4:	be205c61 	.word	0xbe205c61
 8015bc8:	72bea4d0 	.word	0x72bea4d0
 8015bcc:	3e663769 	.word	0x3e663769
 8015bd0:	c5d26bf1 	.word	0xc5d26bf1
 8015bd4:	3ebbbd41 	.word	0x3ebbbd41
 8015bd8:	af25de2c 	.word	0xaf25de2c
 8015bdc:	3f11566a 	.word	0x3f11566a
 8015be0:	16bebd93 	.word	0x16bebd93
 8015be4:	3f66c16c 	.word	0x3f66c16c
 8015be8:	5555553e 	.word	0x5555553e
 8015bec:	3fc55555 	.word	0x3fc55555
 8015bf0:	c2f8f359 	.word	0xc2f8f359
 8015bf4:	01a56e1f 	.word	0x01a56e1f
 8015bf8:	3fe00000 	.word	0x3fe00000
 8015bfc:	000fffff 	.word	0x000fffff
 8015c00:	3ff00000 	.word	0x3ff00000
 8015c04:	4090cbff 	.word	0x4090cbff
 8015c08:	3f6f3400 	.word	0x3f6f3400
 8015c0c:	652b82fe 	.word	0x652b82fe
 8015c10:	3c971547 	.word	0x3c971547
 8015c14:	00000000 	.word	0x00000000

08015c18 <__ieee754_rem_pio2>:
 8015c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1c:	ec57 6b10 	vmov	r6, r7, d0
 8015c20:	4bc3      	ldr	r3, [pc, #780]	; (8015f30 <__ieee754_rem_pio2+0x318>)
 8015c22:	b08d      	sub	sp, #52	; 0x34
 8015c24:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015c28:	4598      	cmp	r8, r3
 8015c2a:	4604      	mov	r4, r0
 8015c2c:	9704      	str	r7, [sp, #16]
 8015c2e:	dc07      	bgt.n	8015c40 <__ieee754_rem_pio2+0x28>
 8015c30:	2200      	movs	r2, #0
 8015c32:	2300      	movs	r3, #0
 8015c34:	ed84 0b00 	vstr	d0, [r4]
 8015c38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015c3c:	2500      	movs	r5, #0
 8015c3e:	e027      	b.n	8015c90 <__ieee754_rem_pio2+0x78>
 8015c40:	4bbc      	ldr	r3, [pc, #752]	; (8015f34 <__ieee754_rem_pio2+0x31c>)
 8015c42:	4598      	cmp	r8, r3
 8015c44:	dc75      	bgt.n	8015d32 <__ieee754_rem_pio2+0x11a>
 8015c46:	9b04      	ldr	r3, [sp, #16]
 8015c48:	4dbb      	ldr	r5, [pc, #748]	; (8015f38 <__ieee754_rem_pio2+0x320>)
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	ee10 0a10 	vmov	r0, s0
 8015c50:	a3a9      	add	r3, pc, #676	; (adr r3, 8015ef8 <__ieee754_rem_pio2+0x2e0>)
 8015c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c56:	4639      	mov	r1, r7
 8015c58:	dd36      	ble.n	8015cc8 <__ieee754_rem_pio2+0xb0>
 8015c5a:	f7ea fb35 	bl	80002c8 <__aeabi_dsub>
 8015c5e:	45a8      	cmp	r8, r5
 8015c60:	4606      	mov	r6, r0
 8015c62:	460f      	mov	r7, r1
 8015c64:	d018      	beq.n	8015c98 <__ieee754_rem_pio2+0x80>
 8015c66:	a3a6      	add	r3, pc, #664	; (adr r3, 8015f00 <__ieee754_rem_pio2+0x2e8>)
 8015c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6c:	f7ea fb2c 	bl	80002c8 <__aeabi_dsub>
 8015c70:	4602      	mov	r2, r0
 8015c72:	460b      	mov	r3, r1
 8015c74:	e9c4 2300 	strd	r2, r3, [r4]
 8015c78:	4630      	mov	r0, r6
 8015c7a:	4639      	mov	r1, r7
 8015c7c:	f7ea fb24 	bl	80002c8 <__aeabi_dsub>
 8015c80:	a39f      	add	r3, pc, #636	; (adr r3, 8015f00 <__ieee754_rem_pio2+0x2e8>)
 8015c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c86:	f7ea fb1f 	bl	80002c8 <__aeabi_dsub>
 8015c8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015c8e:	2501      	movs	r5, #1
 8015c90:	4628      	mov	r0, r5
 8015c92:	b00d      	add	sp, #52	; 0x34
 8015c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c98:	a39b      	add	r3, pc, #620	; (adr r3, 8015f08 <__ieee754_rem_pio2+0x2f0>)
 8015c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9e:	f7ea fb13 	bl	80002c8 <__aeabi_dsub>
 8015ca2:	a39b      	add	r3, pc, #620	; (adr r3, 8015f10 <__ieee754_rem_pio2+0x2f8>)
 8015ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca8:	4606      	mov	r6, r0
 8015caa:	460f      	mov	r7, r1
 8015cac:	f7ea fb0c 	bl	80002c8 <__aeabi_dsub>
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	e9c4 2300 	strd	r2, r3, [r4]
 8015cb8:	4630      	mov	r0, r6
 8015cba:	4639      	mov	r1, r7
 8015cbc:	f7ea fb04 	bl	80002c8 <__aeabi_dsub>
 8015cc0:	a393      	add	r3, pc, #588	; (adr r3, 8015f10 <__ieee754_rem_pio2+0x2f8>)
 8015cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc6:	e7de      	b.n	8015c86 <__ieee754_rem_pio2+0x6e>
 8015cc8:	f7ea fb00 	bl	80002cc <__adddf3>
 8015ccc:	45a8      	cmp	r8, r5
 8015cce:	4606      	mov	r6, r0
 8015cd0:	460f      	mov	r7, r1
 8015cd2:	d016      	beq.n	8015d02 <__ieee754_rem_pio2+0xea>
 8015cd4:	a38a      	add	r3, pc, #552	; (adr r3, 8015f00 <__ieee754_rem_pio2+0x2e8>)
 8015cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cda:	f7ea faf7 	bl	80002cc <__adddf3>
 8015cde:	4602      	mov	r2, r0
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	e9c4 2300 	strd	r2, r3, [r4]
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	4639      	mov	r1, r7
 8015cea:	f7ea faed 	bl	80002c8 <__aeabi_dsub>
 8015cee:	a384      	add	r3, pc, #528	; (adr r3, 8015f00 <__ieee754_rem_pio2+0x2e8>)
 8015cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf4:	f7ea faea 	bl	80002cc <__adddf3>
 8015cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8015cfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015d00:	e7c6      	b.n	8015c90 <__ieee754_rem_pio2+0x78>
 8015d02:	a381      	add	r3, pc, #516	; (adr r3, 8015f08 <__ieee754_rem_pio2+0x2f0>)
 8015d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d08:	f7ea fae0 	bl	80002cc <__adddf3>
 8015d0c:	a380      	add	r3, pc, #512	; (adr r3, 8015f10 <__ieee754_rem_pio2+0x2f8>)
 8015d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d12:	4606      	mov	r6, r0
 8015d14:	460f      	mov	r7, r1
 8015d16:	f7ea fad9 	bl	80002cc <__adddf3>
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	e9c4 2300 	strd	r2, r3, [r4]
 8015d22:	4630      	mov	r0, r6
 8015d24:	4639      	mov	r1, r7
 8015d26:	f7ea facf 	bl	80002c8 <__aeabi_dsub>
 8015d2a:	a379      	add	r3, pc, #484	; (adr r3, 8015f10 <__ieee754_rem_pio2+0x2f8>)
 8015d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d30:	e7e0      	b.n	8015cf4 <__ieee754_rem_pio2+0xdc>
 8015d32:	4b82      	ldr	r3, [pc, #520]	; (8015f3c <__ieee754_rem_pio2+0x324>)
 8015d34:	4598      	cmp	r8, r3
 8015d36:	f300 80d0 	bgt.w	8015eda <__ieee754_rem_pio2+0x2c2>
 8015d3a:	f001 f875 	bl	8016e28 <fabs>
 8015d3e:	ec57 6b10 	vmov	r6, r7, d0
 8015d42:	ee10 0a10 	vmov	r0, s0
 8015d46:	a374      	add	r3, pc, #464	; (adr r3, 8015f18 <__ieee754_rem_pio2+0x300>)
 8015d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d4c:	4639      	mov	r1, r7
 8015d4e:	f7ea fc73 	bl	8000638 <__aeabi_dmul>
 8015d52:	2200      	movs	r2, #0
 8015d54:	4b7a      	ldr	r3, [pc, #488]	; (8015f40 <__ieee754_rem_pio2+0x328>)
 8015d56:	f7ea fab9 	bl	80002cc <__adddf3>
 8015d5a:	f7ea ff1d 	bl	8000b98 <__aeabi_d2iz>
 8015d5e:	4605      	mov	r5, r0
 8015d60:	f7ea fc00 	bl	8000564 <__aeabi_i2d>
 8015d64:	a364      	add	r3, pc, #400	; (adr r3, 8015ef8 <__ieee754_rem_pio2+0x2e0>)
 8015d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d6e:	f7ea fc63 	bl	8000638 <__aeabi_dmul>
 8015d72:	4602      	mov	r2, r0
 8015d74:	460b      	mov	r3, r1
 8015d76:	4630      	mov	r0, r6
 8015d78:	4639      	mov	r1, r7
 8015d7a:	f7ea faa5 	bl	80002c8 <__aeabi_dsub>
 8015d7e:	a360      	add	r3, pc, #384	; (adr r3, 8015f00 <__ieee754_rem_pio2+0x2e8>)
 8015d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d84:	4682      	mov	sl, r0
 8015d86:	468b      	mov	fp, r1
 8015d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d8c:	f7ea fc54 	bl	8000638 <__aeabi_dmul>
 8015d90:	2d1f      	cmp	r5, #31
 8015d92:	4606      	mov	r6, r0
 8015d94:	460f      	mov	r7, r1
 8015d96:	dc0c      	bgt.n	8015db2 <__ieee754_rem_pio2+0x19a>
 8015d98:	1e6a      	subs	r2, r5, #1
 8015d9a:	4b6a      	ldr	r3, [pc, #424]	; (8015f44 <__ieee754_rem_pio2+0x32c>)
 8015d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015da0:	4543      	cmp	r3, r8
 8015da2:	d006      	beq.n	8015db2 <__ieee754_rem_pio2+0x19a>
 8015da4:	4632      	mov	r2, r6
 8015da6:	463b      	mov	r3, r7
 8015da8:	4650      	mov	r0, sl
 8015daa:	4659      	mov	r1, fp
 8015dac:	f7ea fa8c 	bl	80002c8 <__aeabi_dsub>
 8015db0:	e00e      	b.n	8015dd0 <__ieee754_rem_pio2+0x1b8>
 8015db2:	4632      	mov	r2, r6
 8015db4:	463b      	mov	r3, r7
 8015db6:	4650      	mov	r0, sl
 8015db8:	4659      	mov	r1, fp
 8015dba:	f7ea fa85 	bl	80002c8 <__aeabi_dsub>
 8015dbe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015dc2:	9305      	str	r3, [sp, #20]
 8015dc4:	9a05      	ldr	r2, [sp, #20]
 8015dc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015dca:	1ad3      	subs	r3, r2, r3
 8015dcc:	2b10      	cmp	r3, #16
 8015dce:	dc02      	bgt.n	8015dd6 <__ieee754_rem_pio2+0x1be>
 8015dd0:	e9c4 0100 	strd	r0, r1, [r4]
 8015dd4:	e039      	b.n	8015e4a <__ieee754_rem_pio2+0x232>
 8015dd6:	a34c      	add	r3, pc, #304	; (adr r3, 8015f08 <__ieee754_rem_pio2+0x2f0>)
 8015dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015de0:	f7ea fc2a 	bl	8000638 <__aeabi_dmul>
 8015de4:	4606      	mov	r6, r0
 8015de6:	460f      	mov	r7, r1
 8015de8:	4602      	mov	r2, r0
 8015dea:	460b      	mov	r3, r1
 8015dec:	4650      	mov	r0, sl
 8015dee:	4659      	mov	r1, fp
 8015df0:	f7ea fa6a 	bl	80002c8 <__aeabi_dsub>
 8015df4:	4602      	mov	r2, r0
 8015df6:	460b      	mov	r3, r1
 8015df8:	4680      	mov	r8, r0
 8015dfa:	4689      	mov	r9, r1
 8015dfc:	4650      	mov	r0, sl
 8015dfe:	4659      	mov	r1, fp
 8015e00:	f7ea fa62 	bl	80002c8 <__aeabi_dsub>
 8015e04:	4632      	mov	r2, r6
 8015e06:	463b      	mov	r3, r7
 8015e08:	f7ea fa5e 	bl	80002c8 <__aeabi_dsub>
 8015e0c:	a340      	add	r3, pc, #256	; (adr r3, 8015f10 <__ieee754_rem_pio2+0x2f8>)
 8015e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e12:	4606      	mov	r6, r0
 8015e14:	460f      	mov	r7, r1
 8015e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e1a:	f7ea fc0d 	bl	8000638 <__aeabi_dmul>
 8015e1e:	4632      	mov	r2, r6
 8015e20:	463b      	mov	r3, r7
 8015e22:	f7ea fa51 	bl	80002c8 <__aeabi_dsub>
 8015e26:	4602      	mov	r2, r0
 8015e28:	460b      	mov	r3, r1
 8015e2a:	4606      	mov	r6, r0
 8015e2c:	460f      	mov	r7, r1
 8015e2e:	4640      	mov	r0, r8
 8015e30:	4649      	mov	r1, r9
 8015e32:	f7ea fa49 	bl	80002c8 <__aeabi_dsub>
 8015e36:	9a05      	ldr	r2, [sp, #20]
 8015e38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015e3c:	1ad3      	subs	r3, r2, r3
 8015e3e:	2b31      	cmp	r3, #49	; 0x31
 8015e40:	dc20      	bgt.n	8015e84 <__ieee754_rem_pio2+0x26c>
 8015e42:	e9c4 0100 	strd	r0, r1, [r4]
 8015e46:	46c2      	mov	sl, r8
 8015e48:	46cb      	mov	fp, r9
 8015e4a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8015e4e:	4650      	mov	r0, sl
 8015e50:	4642      	mov	r2, r8
 8015e52:	464b      	mov	r3, r9
 8015e54:	4659      	mov	r1, fp
 8015e56:	f7ea fa37 	bl	80002c8 <__aeabi_dsub>
 8015e5a:	463b      	mov	r3, r7
 8015e5c:	4632      	mov	r2, r6
 8015e5e:	f7ea fa33 	bl	80002c8 <__aeabi_dsub>
 8015e62:	9b04      	ldr	r3, [sp, #16]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015e6a:	f6bf af11 	bge.w	8015c90 <__ieee754_rem_pio2+0x78>
 8015e6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015e72:	6063      	str	r3, [r4, #4]
 8015e74:	f8c4 8000 	str.w	r8, [r4]
 8015e78:	60a0      	str	r0, [r4, #8]
 8015e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015e7e:	60e3      	str	r3, [r4, #12]
 8015e80:	426d      	negs	r5, r5
 8015e82:	e705      	b.n	8015c90 <__ieee754_rem_pio2+0x78>
 8015e84:	a326      	add	r3, pc, #152	; (adr r3, 8015f20 <__ieee754_rem_pio2+0x308>)
 8015e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e8e:	f7ea fbd3 	bl	8000638 <__aeabi_dmul>
 8015e92:	4606      	mov	r6, r0
 8015e94:	460f      	mov	r7, r1
 8015e96:	4602      	mov	r2, r0
 8015e98:	460b      	mov	r3, r1
 8015e9a:	4640      	mov	r0, r8
 8015e9c:	4649      	mov	r1, r9
 8015e9e:	f7ea fa13 	bl	80002c8 <__aeabi_dsub>
 8015ea2:	4602      	mov	r2, r0
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	4682      	mov	sl, r0
 8015ea8:	468b      	mov	fp, r1
 8015eaa:	4640      	mov	r0, r8
 8015eac:	4649      	mov	r1, r9
 8015eae:	f7ea fa0b 	bl	80002c8 <__aeabi_dsub>
 8015eb2:	4632      	mov	r2, r6
 8015eb4:	463b      	mov	r3, r7
 8015eb6:	f7ea fa07 	bl	80002c8 <__aeabi_dsub>
 8015eba:	a31b      	add	r3, pc, #108	; (adr r3, 8015f28 <__ieee754_rem_pio2+0x310>)
 8015ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ec0:	4606      	mov	r6, r0
 8015ec2:	460f      	mov	r7, r1
 8015ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ec8:	f7ea fbb6 	bl	8000638 <__aeabi_dmul>
 8015ecc:	4632      	mov	r2, r6
 8015ece:	463b      	mov	r3, r7
 8015ed0:	f7ea f9fa 	bl	80002c8 <__aeabi_dsub>
 8015ed4:	4606      	mov	r6, r0
 8015ed6:	460f      	mov	r7, r1
 8015ed8:	e764      	b.n	8015da4 <__ieee754_rem_pio2+0x18c>
 8015eda:	4b1b      	ldr	r3, [pc, #108]	; (8015f48 <__ieee754_rem_pio2+0x330>)
 8015edc:	4598      	cmp	r8, r3
 8015ede:	dd35      	ble.n	8015f4c <__ieee754_rem_pio2+0x334>
 8015ee0:	ee10 2a10 	vmov	r2, s0
 8015ee4:	463b      	mov	r3, r7
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	4639      	mov	r1, r7
 8015eea:	f7ea f9ed 	bl	80002c8 <__aeabi_dsub>
 8015eee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015ef2:	e9c4 0100 	strd	r0, r1, [r4]
 8015ef6:	e6a1      	b.n	8015c3c <__ieee754_rem_pio2+0x24>
 8015ef8:	54400000 	.word	0x54400000
 8015efc:	3ff921fb 	.word	0x3ff921fb
 8015f00:	1a626331 	.word	0x1a626331
 8015f04:	3dd0b461 	.word	0x3dd0b461
 8015f08:	1a600000 	.word	0x1a600000
 8015f0c:	3dd0b461 	.word	0x3dd0b461
 8015f10:	2e037073 	.word	0x2e037073
 8015f14:	3ba3198a 	.word	0x3ba3198a
 8015f18:	6dc9c883 	.word	0x6dc9c883
 8015f1c:	3fe45f30 	.word	0x3fe45f30
 8015f20:	2e000000 	.word	0x2e000000
 8015f24:	3ba3198a 	.word	0x3ba3198a
 8015f28:	252049c1 	.word	0x252049c1
 8015f2c:	397b839a 	.word	0x397b839a
 8015f30:	3fe921fb 	.word	0x3fe921fb
 8015f34:	4002d97b 	.word	0x4002d97b
 8015f38:	3ff921fb 	.word	0x3ff921fb
 8015f3c:	413921fb 	.word	0x413921fb
 8015f40:	3fe00000 	.word	0x3fe00000
 8015f44:	08017b80 	.word	0x08017b80
 8015f48:	7fefffff 	.word	0x7fefffff
 8015f4c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8015f50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8015f54:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8015f58:	4630      	mov	r0, r6
 8015f5a:	460f      	mov	r7, r1
 8015f5c:	f7ea fe1c 	bl	8000b98 <__aeabi_d2iz>
 8015f60:	f7ea fb00 	bl	8000564 <__aeabi_i2d>
 8015f64:	4602      	mov	r2, r0
 8015f66:	460b      	mov	r3, r1
 8015f68:	4630      	mov	r0, r6
 8015f6a:	4639      	mov	r1, r7
 8015f6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f70:	f7ea f9aa 	bl	80002c8 <__aeabi_dsub>
 8015f74:	2200      	movs	r2, #0
 8015f76:	4b1f      	ldr	r3, [pc, #124]	; (8015ff4 <__ieee754_rem_pio2+0x3dc>)
 8015f78:	f7ea fb5e 	bl	8000638 <__aeabi_dmul>
 8015f7c:	460f      	mov	r7, r1
 8015f7e:	4606      	mov	r6, r0
 8015f80:	f7ea fe0a 	bl	8000b98 <__aeabi_d2iz>
 8015f84:	f7ea faee 	bl	8000564 <__aeabi_i2d>
 8015f88:	4602      	mov	r2, r0
 8015f8a:	460b      	mov	r3, r1
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	4639      	mov	r1, r7
 8015f90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015f94:	f7ea f998 	bl	80002c8 <__aeabi_dsub>
 8015f98:	2200      	movs	r2, #0
 8015f9a:	4b16      	ldr	r3, [pc, #88]	; (8015ff4 <__ieee754_rem_pio2+0x3dc>)
 8015f9c:	f7ea fb4c 	bl	8000638 <__aeabi_dmul>
 8015fa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015fa4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8015fa8:	f04f 0803 	mov.w	r8, #3
 8015fac:	2600      	movs	r6, #0
 8015fae:	2700      	movs	r7, #0
 8015fb0:	4632      	mov	r2, r6
 8015fb2:	463b      	mov	r3, r7
 8015fb4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8015fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8015fbc:	f7ea fda4 	bl	8000b08 <__aeabi_dcmpeq>
 8015fc0:	b9b0      	cbnz	r0, 8015ff0 <__ieee754_rem_pio2+0x3d8>
 8015fc2:	4b0d      	ldr	r3, [pc, #52]	; (8015ff8 <__ieee754_rem_pio2+0x3e0>)
 8015fc4:	9301      	str	r3, [sp, #4]
 8015fc6:	2302      	movs	r3, #2
 8015fc8:	9300      	str	r3, [sp, #0]
 8015fca:	462a      	mov	r2, r5
 8015fcc:	4643      	mov	r3, r8
 8015fce:	4621      	mov	r1, r4
 8015fd0:	a806      	add	r0, sp, #24
 8015fd2:	f000 f98d 	bl	80162f0 <__kernel_rem_pio2>
 8015fd6:	9b04      	ldr	r3, [sp, #16]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	4605      	mov	r5, r0
 8015fdc:	f6bf ae58 	bge.w	8015c90 <__ieee754_rem_pio2+0x78>
 8015fe0:	6863      	ldr	r3, [r4, #4]
 8015fe2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015fe6:	6063      	str	r3, [r4, #4]
 8015fe8:	68e3      	ldr	r3, [r4, #12]
 8015fea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015fee:	e746      	b.n	8015e7e <__ieee754_rem_pio2+0x266>
 8015ff0:	46d0      	mov	r8, sl
 8015ff2:	e7dd      	b.n	8015fb0 <__ieee754_rem_pio2+0x398>
 8015ff4:	41700000 	.word	0x41700000
 8015ff8:	08017c00 	.word	0x08017c00

08015ffc <__ieee754_sqrt>:
 8015ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016000:	4955      	ldr	r1, [pc, #340]	; (8016158 <__ieee754_sqrt+0x15c>)
 8016002:	ec55 4b10 	vmov	r4, r5, d0
 8016006:	43a9      	bics	r1, r5
 8016008:	462b      	mov	r3, r5
 801600a:	462a      	mov	r2, r5
 801600c:	d112      	bne.n	8016034 <__ieee754_sqrt+0x38>
 801600e:	ee10 2a10 	vmov	r2, s0
 8016012:	ee10 0a10 	vmov	r0, s0
 8016016:	4629      	mov	r1, r5
 8016018:	f7ea fb0e 	bl	8000638 <__aeabi_dmul>
 801601c:	4602      	mov	r2, r0
 801601e:	460b      	mov	r3, r1
 8016020:	4620      	mov	r0, r4
 8016022:	4629      	mov	r1, r5
 8016024:	f7ea f952 	bl	80002cc <__adddf3>
 8016028:	4604      	mov	r4, r0
 801602a:	460d      	mov	r5, r1
 801602c:	ec45 4b10 	vmov	d0, r4, r5
 8016030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016034:	2d00      	cmp	r5, #0
 8016036:	ee10 0a10 	vmov	r0, s0
 801603a:	4621      	mov	r1, r4
 801603c:	dc0f      	bgt.n	801605e <__ieee754_sqrt+0x62>
 801603e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016042:	4330      	orrs	r0, r6
 8016044:	d0f2      	beq.n	801602c <__ieee754_sqrt+0x30>
 8016046:	b155      	cbz	r5, 801605e <__ieee754_sqrt+0x62>
 8016048:	ee10 2a10 	vmov	r2, s0
 801604c:	4620      	mov	r0, r4
 801604e:	4629      	mov	r1, r5
 8016050:	f7ea f93a 	bl	80002c8 <__aeabi_dsub>
 8016054:	4602      	mov	r2, r0
 8016056:	460b      	mov	r3, r1
 8016058:	f7ea fc18 	bl	800088c <__aeabi_ddiv>
 801605c:	e7e4      	b.n	8016028 <__ieee754_sqrt+0x2c>
 801605e:	151b      	asrs	r3, r3, #20
 8016060:	d073      	beq.n	801614a <__ieee754_sqrt+0x14e>
 8016062:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016066:	07dd      	lsls	r5, r3, #31
 8016068:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801606c:	bf48      	it	mi
 801606e:	0fc8      	lsrmi	r0, r1, #31
 8016070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016074:	bf44      	itt	mi
 8016076:	0049      	lslmi	r1, r1, #1
 8016078:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801607c:	2500      	movs	r5, #0
 801607e:	1058      	asrs	r0, r3, #1
 8016080:	0fcb      	lsrs	r3, r1, #31
 8016082:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016086:	0049      	lsls	r1, r1, #1
 8016088:	2316      	movs	r3, #22
 801608a:	462c      	mov	r4, r5
 801608c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016090:	19a7      	adds	r7, r4, r6
 8016092:	4297      	cmp	r7, r2
 8016094:	bfde      	ittt	le
 8016096:	19bc      	addle	r4, r7, r6
 8016098:	1bd2      	suble	r2, r2, r7
 801609a:	19ad      	addle	r5, r5, r6
 801609c:	0fcf      	lsrs	r7, r1, #31
 801609e:	3b01      	subs	r3, #1
 80160a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80160a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80160a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80160ac:	d1f0      	bne.n	8016090 <__ieee754_sqrt+0x94>
 80160ae:	f04f 0c20 	mov.w	ip, #32
 80160b2:	469e      	mov	lr, r3
 80160b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80160b8:	42a2      	cmp	r2, r4
 80160ba:	eb06 070e 	add.w	r7, r6, lr
 80160be:	dc02      	bgt.n	80160c6 <__ieee754_sqrt+0xca>
 80160c0:	d112      	bne.n	80160e8 <__ieee754_sqrt+0xec>
 80160c2:	428f      	cmp	r7, r1
 80160c4:	d810      	bhi.n	80160e8 <__ieee754_sqrt+0xec>
 80160c6:	2f00      	cmp	r7, #0
 80160c8:	eb07 0e06 	add.w	lr, r7, r6
 80160cc:	da42      	bge.n	8016154 <__ieee754_sqrt+0x158>
 80160ce:	f1be 0f00 	cmp.w	lr, #0
 80160d2:	db3f      	blt.n	8016154 <__ieee754_sqrt+0x158>
 80160d4:	f104 0801 	add.w	r8, r4, #1
 80160d8:	1b12      	subs	r2, r2, r4
 80160da:	428f      	cmp	r7, r1
 80160dc:	bf88      	it	hi
 80160de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80160e2:	1bc9      	subs	r1, r1, r7
 80160e4:	4433      	add	r3, r6
 80160e6:	4644      	mov	r4, r8
 80160e8:	0052      	lsls	r2, r2, #1
 80160ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80160ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80160f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80160f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80160fa:	d1dd      	bne.n	80160b8 <__ieee754_sqrt+0xbc>
 80160fc:	430a      	orrs	r2, r1
 80160fe:	d006      	beq.n	801610e <__ieee754_sqrt+0x112>
 8016100:	1c5c      	adds	r4, r3, #1
 8016102:	bf13      	iteet	ne
 8016104:	3301      	addne	r3, #1
 8016106:	3501      	addeq	r5, #1
 8016108:	4663      	moveq	r3, ip
 801610a:	f023 0301 	bicne.w	r3, r3, #1
 801610e:	106a      	asrs	r2, r5, #1
 8016110:	085b      	lsrs	r3, r3, #1
 8016112:	07e9      	lsls	r1, r5, #31
 8016114:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016118:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801611c:	bf48      	it	mi
 801611e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016122:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016126:	461c      	mov	r4, r3
 8016128:	e780      	b.n	801602c <__ieee754_sqrt+0x30>
 801612a:	0aca      	lsrs	r2, r1, #11
 801612c:	3815      	subs	r0, #21
 801612e:	0549      	lsls	r1, r1, #21
 8016130:	2a00      	cmp	r2, #0
 8016132:	d0fa      	beq.n	801612a <__ieee754_sqrt+0x12e>
 8016134:	02d6      	lsls	r6, r2, #11
 8016136:	d50a      	bpl.n	801614e <__ieee754_sqrt+0x152>
 8016138:	f1c3 0420 	rsb	r4, r3, #32
 801613c:	fa21 f404 	lsr.w	r4, r1, r4
 8016140:	1e5d      	subs	r5, r3, #1
 8016142:	4099      	lsls	r1, r3
 8016144:	4322      	orrs	r2, r4
 8016146:	1b43      	subs	r3, r0, r5
 8016148:	e78b      	b.n	8016062 <__ieee754_sqrt+0x66>
 801614a:	4618      	mov	r0, r3
 801614c:	e7f0      	b.n	8016130 <__ieee754_sqrt+0x134>
 801614e:	0052      	lsls	r2, r2, #1
 8016150:	3301      	adds	r3, #1
 8016152:	e7ef      	b.n	8016134 <__ieee754_sqrt+0x138>
 8016154:	46a0      	mov	r8, r4
 8016156:	e7bf      	b.n	80160d8 <__ieee754_sqrt+0xdc>
 8016158:	7ff00000 	.word	0x7ff00000
 801615c:	00000000 	.word	0x00000000

08016160 <__kernel_cos>:
 8016160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016164:	ec59 8b10 	vmov	r8, r9, d0
 8016168:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801616c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8016170:	ed2d 8b02 	vpush	{d8}
 8016174:	eeb0 8a41 	vmov.f32	s16, s2
 8016178:	eef0 8a61 	vmov.f32	s17, s3
 801617c:	da07      	bge.n	801618e <__kernel_cos+0x2e>
 801617e:	ee10 0a10 	vmov	r0, s0
 8016182:	4649      	mov	r1, r9
 8016184:	f7ea fd08 	bl	8000b98 <__aeabi_d2iz>
 8016188:	2800      	cmp	r0, #0
 801618a:	f000 8089 	beq.w	80162a0 <__kernel_cos+0x140>
 801618e:	4642      	mov	r2, r8
 8016190:	464b      	mov	r3, r9
 8016192:	4640      	mov	r0, r8
 8016194:	4649      	mov	r1, r9
 8016196:	f7ea fa4f 	bl	8000638 <__aeabi_dmul>
 801619a:	2200      	movs	r2, #0
 801619c:	4b4e      	ldr	r3, [pc, #312]	; (80162d8 <__kernel_cos+0x178>)
 801619e:	4604      	mov	r4, r0
 80161a0:	460d      	mov	r5, r1
 80161a2:	f7ea fa49 	bl	8000638 <__aeabi_dmul>
 80161a6:	a340      	add	r3, pc, #256	; (adr r3, 80162a8 <__kernel_cos+0x148>)
 80161a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ac:	4682      	mov	sl, r0
 80161ae:	468b      	mov	fp, r1
 80161b0:	4620      	mov	r0, r4
 80161b2:	4629      	mov	r1, r5
 80161b4:	f7ea fa40 	bl	8000638 <__aeabi_dmul>
 80161b8:	a33d      	add	r3, pc, #244	; (adr r3, 80162b0 <__kernel_cos+0x150>)
 80161ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161be:	f7ea f885 	bl	80002cc <__adddf3>
 80161c2:	4622      	mov	r2, r4
 80161c4:	462b      	mov	r3, r5
 80161c6:	f7ea fa37 	bl	8000638 <__aeabi_dmul>
 80161ca:	a33b      	add	r3, pc, #236	; (adr r3, 80162b8 <__kernel_cos+0x158>)
 80161cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d0:	f7ea f87a 	bl	80002c8 <__aeabi_dsub>
 80161d4:	4622      	mov	r2, r4
 80161d6:	462b      	mov	r3, r5
 80161d8:	f7ea fa2e 	bl	8000638 <__aeabi_dmul>
 80161dc:	a338      	add	r3, pc, #224	; (adr r3, 80162c0 <__kernel_cos+0x160>)
 80161de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e2:	f7ea f873 	bl	80002cc <__adddf3>
 80161e6:	4622      	mov	r2, r4
 80161e8:	462b      	mov	r3, r5
 80161ea:	f7ea fa25 	bl	8000638 <__aeabi_dmul>
 80161ee:	a336      	add	r3, pc, #216	; (adr r3, 80162c8 <__kernel_cos+0x168>)
 80161f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f4:	f7ea f868 	bl	80002c8 <__aeabi_dsub>
 80161f8:	4622      	mov	r2, r4
 80161fa:	462b      	mov	r3, r5
 80161fc:	f7ea fa1c 	bl	8000638 <__aeabi_dmul>
 8016200:	a333      	add	r3, pc, #204	; (adr r3, 80162d0 <__kernel_cos+0x170>)
 8016202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016206:	f7ea f861 	bl	80002cc <__adddf3>
 801620a:	4622      	mov	r2, r4
 801620c:	462b      	mov	r3, r5
 801620e:	f7ea fa13 	bl	8000638 <__aeabi_dmul>
 8016212:	4622      	mov	r2, r4
 8016214:	462b      	mov	r3, r5
 8016216:	f7ea fa0f 	bl	8000638 <__aeabi_dmul>
 801621a:	ec53 2b18 	vmov	r2, r3, d8
 801621e:	4604      	mov	r4, r0
 8016220:	460d      	mov	r5, r1
 8016222:	4640      	mov	r0, r8
 8016224:	4649      	mov	r1, r9
 8016226:	f7ea fa07 	bl	8000638 <__aeabi_dmul>
 801622a:	460b      	mov	r3, r1
 801622c:	4602      	mov	r2, r0
 801622e:	4629      	mov	r1, r5
 8016230:	4620      	mov	r0, r4
 8016232:	f7ea f849 	bl	80002c8 <__aeabi_dsub>
 8016236:	4b29      	ldr	r3, [pc, #164]	; (80162dc <__kernel_cos+0x17c>)
 8016238:	429e      	cmp	r6, r3
 801623a:	4680      	mov	r8, r0
 801623c:	4689      	mov	r9, r1
 801623e:	dc11      	bgt.n	8016264 <__kernel_cos+0x104>
 8016240:	4602      	mov	r2, r0
 8016242:	460b      	mov	r3, r1
 8016244:	4650      	mov	r0, sl
 8016246:	4659      	mov	r1, fp
 8016248:	f7ea f83e 	bl	80002c8 <__aeabi_dsub>
 801624c:	460b      	mov	r3, r1
 801624e:	4924      	ldr	r1, [pc, #144]	; (80162e0 <__kernel_cos+0x180>)
 8016250:	4602      	mov	r2, r0
 8016252:	2000      	movs	r0, #0
 8016254:	f7ea f838 	bl	80002c8 <__aeabi_dsub>
 8016258:	ecbd 8b02 	vpop	{d8}
 801625c:	ec41 0b10 	vmov	d0, r0, r1
 8016260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016264:	4b1f      	ldr	r3, [pc, #124]	; (80162e4 <__kernel_cos+0x184>)
 8016266:	491e      	ldr	r1, [pc, #120]	; (80162e0 <__kernel_cos+0x180>)
 8016268:	429e      	cmp	r6, r3
 801626a:	bfcc      	ite	gt
 801626c:	4d1e      	ldrgt	r5, [pc, #120]	; (80162e8 <__kernel_cos+0x188>)
 801626e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8016272:	2400      	movs	r4, #0
 8016274:	4622      	mov	r2, r4
 8016276:	462b      	mov	r3, r5
 8016278:	2000      	movs	r0, #0
 801627a:	f7ea f825 	bl	80002c8 <__aeabi_dsub>
 801627e:	4622      	mov	r2, r4
 8016280:	4606      	mov	r6, r0
 8016282:	460f      	mov	r7, r1
 8016284:	462b      	mov	r3, r5
 8016286:	4650      	mov	r0, sl
 8016288:	4659      	mov	r1, fp
 801628a:	f7ea f81d 	bl	80002c8 <__aeabi_dsub>
 801628e:	4642      	mov	r2, r8
 8016290:	464b      	mov	r3, r9
 8016292:	f7ea f819 	bl	80002c8 <__aeabi_dsub>
 8016296:	4602      	mov	r2, r0
 8016298:	460b      	mov	r3, r1
 801629a:	4630      	mov	r0, r6
 801629c:	4639      	mov	r1, r7
 801629e:	e7d9      	b.n	8016254 <__kernel_cos+0xf4>
 80162a0:	2000      	movs	r0, #0
 80162a2:	490f      	ldr	r1, [pc, #60]	; (80162e0 <__kernel_cos+0x180>)
 80162a4:	e7d8      	b.n	8016258 <__kernel_cos+0xf8>
 80162a6:	bf00      	nop
 80162a8:	be8838d4 	.word	0xbe8838d4
 80162ac:	bda8fae9 	.word	0xbda8fae9
 80162b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80162b4:	3e21ee9e 	.word	0x3e21ee9e
 80162b8:	809c52ad 	.word	0x809c52ad
 80162bc:	3e927e4f 	.word	0x3e927e4f
 80162c0:	19cb1590 	.word	0x19cb1590
 80162c4:	3efa01a0 	.word	0x3efa01a0
 80162c8:	16c15177 	.word	0x16c15177
 80162cc:	3f56c16c 	.word	0x3f56c16c
 80162d0:	5555554c 	.word	0x5555554c
 80162d4:	3fa55555 	.word	0x3fa55555
 80162d8:	3fe00000 	.word	0x3fe00000
 80162dc:	3fd33332 	.word	0x3fd33332
 80162e0:	3ff00000 	.word	0x3ff00000
 80162e4:	3fe90000 	.word	0x3fe90000
 80162e8:	3fd20000 	.word	0x3fd20000
 80162ec:	00000000 	.word	0x00000000

080162f0 <__kernel_rem_pio2>:
 80162f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f4:	ed2d 8b02 	vpush	{d8}
 80162f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80162fc:	1ed4      	subs	r4, r2, #3
 80162fe:	9308      	str	r3, [sp, #32]
 8016300:	9101      	str	r1, [sp, #4]
 8016302:	4bc5      	ldr	r3, [pc, #788]	; (8016618 <__kernel_rem_pio2+0x328>)
 8016304:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8016306:	9009      	str	r0, [sp, #36]	; 0x24
 8016308:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801630c:	9304      	str	r3, [sp, #16]
 801630e:	9b08      	ldr	r3, [sp, #32]
 8016310:	3b01      	subs	r3, #1
 8016312:	9307      	str	r3, [sp, #28]
 8016314:	2318      	movs	r3, #24
 8016316:	fb94 f4f3 	sdiv	r4, r4, r3
 801631a:	f06f 0317 	mvn.w	r3, #23
 801631e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016322:	fb04 3303 	mla	r3, r4, r3, r3
 8016326:	eb03 0a02 	add.w	sl, r3, r2
 801632a:	9b04      	ldr	r3, [sp, #16]
 801632c:	9a07      	ldr	r2, [sp, #28]
 801632e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8016608 <__kernel_rem_pio2+0x318>
 8016332:	eb03 0802 	add.w	r8, r3, r2
 8016336:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016338:	1aa7      	subs	r7, r4, r2
 801633a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801633e:	ae22      	add	r6, sp, #136	; 0x88
 8016340:	2500      	movs	r5, #0
 8016342:	4545      	cmp	r5, r8
 8016344:	dd13      	ble.n	801636e <__kernel_rem_pio2+0x7e>
 8016346:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8016608 <__kernel_rem_pio2+0x318>
 801634a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801634e:	2600      	movs	r6, #0
 8016350:	9b04      	ldr	r3, [sp, #16]
 8016352:	429e      	cmp	r6, r3
 8016354:	dc32      	bgt.n	80163bc <__kernel_rem_pio2+0xcc>
 8016356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016358:	9302      	str	r3, [sp, #8]
 801635a:	9b08      	ldr	r3, [sp, #32]
 801635c:	199d      	adds	r5, r3, r6
 801635e:	ab22      	add	r3, sp, #136	; 0x88
 8016360:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016364:	9306      	str	r3, [sp, #24]
 8016366:	ec59 8b18 	vmov	r8, r9, d8
 801636a:	2700      	movs	r7, #0
 801636c:	e01f      	b.n	80163ae <__kernel_rem_pio2+0xbe>
 801636e:	42ef      	cmn	r7, r5
 8016370:	d407      	bmi.n	8016382 <__kernel_rem_pio2+0x92>
 8016372:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016376:	f7ea f8f5 	bl	8000564 <__aeabi_i2d>
 801637a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801637e:	3501      	adds	r5, #1
 8016380:	e7df      	b.n	8016342 <__kernel_rem_pio2+0x52>
 8016382:	ec51 0b18 	vmov	r0, r1, d8
 8016386:	e7f8      	b.n	801637a <__kernel_rem_pio2+0x8a>
 8016388:	9906      	ldr	r1, [sp, #24]
 801638a:	9d02      	ldr	r5, [sp, #8]
 801638c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8016390:	9106      	str	r1, [sp, #24]
 8016392:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8016396:	9502      	str	r5, [sp, #8]
 8016398:	f7ea f94e 	bl	8000638 <__aeabi_dmul>
 801639c:	4602      	mov	r2, r0
 801639e:	460b      	mov	r3, r1
 80163a0:	4640      	mov	r0, r8
 80163a2:	4649      	mov	r1, r9
 80163a4:	f7e9 ff92 	bl	80002cc <__adddf3>
 80163a8:	3701      	adds	r7, #1
 80163aa:	4680      	mov	r8, r0
 80163ac:	4689      	mov	r9, r1
 80163ae:	9b07      	ldr	r3, [sp, #28]
 80163b0:	429f      	cmp	r7, r3
 80163b2:	dde9      	ble.n	8016388 <__kernel_rem_pio2+0x98>
 80163b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80163b8:	3601      	adds	r6, #1
 80163ba:	e7c9      	b.n	8016350 <__kernel_rem_pio2+0x60>
 80163bc:	9b04      	ldr	r3, [sp, #16]
 80163be:	aa0e      	add	r2, sp, #56	; 0x38
 80163c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80163c4:	930c      	str	r3, [sp, #48]	; 0x30
 80163c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80163c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80163cc:	9c04      	ldr	r4, [sp, #16]
 80163ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80163d0:	ab9a      	add	r3, sp, #616	; 0x268
 80163d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80163d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80163da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80163de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80163e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80163e6:	ab9a      	add	r3, sp, #616	; 0x268
 80163e8:	445b      	add	r3, fp
 80163ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80163ee:	2500      	movs	r5, #0
 80163f0:	1b63      	subs	r3, r4, r5
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	dc78      	bgt.n	80164e8 <__kernel_rem_pio2+0x1f8>
 80163f6:	4650      	mov	r0, sl
 80163f8:	ec49 8b10 	vmov	d0, r8, r9
 80163fc:	f000 fe3c 	bl	8017078 <scalbn>
 8016400:	ec57 6b10 	vmov	r6, r7, d0
 8016404:	2200      	movs	r2, #0
 8016406:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801640a:	ee10 0a10 	vmov	r0, s0
 801640e:	4639      	mov	r1, r7
 8016410:	f7ea f912 	bl	8000638 <__aeabi_dmul>
 8016414:	ec41 0b10 	vmov	d0, r0, r1
 8016418:	f000 fd1a 	bl	8016e50 <floor>
 801641c:	2200      	movs	r2, #0
 801641e:	ec51 0b10 	vmov	r0, r1, d0
 8016422:	4b7e      	ldr	r3, [pc, #504]	; (801661c <__kernel_rem_pio2+0x32c>)
 8016424:	f7ea f908 	bl	8000638 <__aeabi_dmul>
 8016428:	4602      	mov	r2, r0
 801642a:	460b      	mov	r3, r1
 801642c:	4630      	mov	r0, r6
 801642e:	4639      	mov	r1, r7
 8016430:	f7e9 ff4a 	bl	80002c8 <__aeabi_dsub>
 8016434:	460f      	mov	r7, r1
 8016436:	4606      	mov	r6, r0
 8016438:	f7ea fbae 	bl	8000b98 <__aeabi_d2iz>
 801643c:	9006      	str	r0, [sp, #24]
 801643e:	f7ea f891 	bl	8000564 <__aeabi_i2d>
 8016442:	4602      	mov	r2, r0
 8016444:	460b      	mov	r3, r1
 8016446:	4630      	mov	r0, r6
 8016448:	4639      	mov	r1, r7
 801644a:	f7e9 ff3d 	bl	80002c8 <__aeabi_dsub>
 801644e:	f1ba 0f00 	cmp.w	sl, #0
 8016452:	4606      	mov	r6, r0
 8016454:	460f      	mov	r7, r1
 8016456:	dd6c      	ble.n	8016532 <__kernel_rem_pio2+0x242>
 8016458:	1e62      	subs	r2, r4, #1
 801645a:	ab0e      	add	r3, sp, #56	; 0x38
 801645c:	f1ca 0118 	rsb	r1, sl, #24
 8016460:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016464:	9d06      	ldr	r5, [sp, #24]
 8016466:	fa40 f301 	asr.w	r3, r0, r1
 801646a:	441d      	add	r5, r3
 801646c:	408b      	lsls	r3, r1
 801646e:	1ac0      	subs	r0, r0, r3
 8016470:	ab0e      	add	r3, sp, #56	; 0x38
 8016472:	9506      	str	r5, [sp, #24]
 8016474:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016478:	f1ca 0317 	rsb	r3, sl, #23
 801647c:	fa40 f303 	asr.w	r3, r0, r3
 8016480:	9302      	str	r3, [sp, #8]
 8016482:	9b02      	ldr	r3, [sp, #8]
 8016484:	2b00      	cmp	r3, #0
 8016486:	dd62      	ble.n	801654e <__kernel_rem_pio2+0x25e>
 8016488:	9b06      	ldr	r3, [sp, #24]
 801648a:	2200      	movs	r2, #0
 801648c:	3301      	adds	r3, #1
 801648e:	9306      	str	r3, [sp, #24]
 8016490:	4615      	mov	r5, r2
 8016492:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016496:	4294      	cmp	r4, r2
 8016498:	f300 8095 	bgt.w	80165c6 <__kernel_rem_pio2+0x2d6>
 801649c:	f1ba 0f00 	cmp.w	sl, #0
 80164a0:	dd07      	ble.n	80164b2 <__kernel_rem_pio2+0x1c2>
 80164a2:	f1ba 0f01 	cmp.w	sl, #1
 80164a6:	f000 80a2 	beq.w	80165ee <__kernel_rem_pio2+0x2fe>
 80164aa:	f1ba 0f02 	cmp.w	sl, #2
 80164ae:	f000 80c1 	beq.w	8016634 <__kernel_rem_pio2+0x344>
 80164b2:	9b02      	ldr	r3, [sp, #8]
 80164b4:	2b02      	cmp	r3, #2
 80164b6:	d14a      	bne.n	801654e <__kernel_rem_pio2+0x25e>
 80164b8:	4632      	mov	r2, r6
 80164ba:	463b      	mov	r3, r7
 80164bc:	2000      	movs	r0, #0
 80164be:	4958      	ldr	r1, [pc, #352]	; (8016620 <__kernel_rem_pio2+0x330>)
 80164c0:	f7e9 ff02 	bl	80002c8 <__aeabi_dsub>
 80164c4:	4606      	mov	r6, r0
 80164c6:	460f      	mov	r7, r1
 80164c8:	2d00      	cmp	r5, #0
 80164ca:	d040      	beq.n	801654e <__kernel_rem_pio2+0x25e>
 80164cc:	4650      	mov	r0, sl
 80164ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8016610 <__kernel_rem_pio2+0x320>
 80164d2:	f000 fdd1 	bl	8017078 <scalbn>
 80164d6:	4630      	mov	r0, r6
 80164d8:	4639      	mov	r1, r7
 80164da:	ec53 2b10 	vmov	r2, r3, d0
 80164de:	f7e9 fef3 	bl	80002c8 <__aeabi_dsub>
 80164e2:	4606      	mov	r6, r0
 80164e4:	460f      	mov	r7, r1
 80164e6:	e032      	b.n	801654e <__kernel_rem_pio2+0x25e>
 80164e8:	2200      	movs	r2, #0
 80164ea:	4b4e      	ldr	r3, [pc, #312]	; (8016624 <__kernel_rem_pio2+0x334>)
 80164ec:	4640      	mov	r0, r8
 80164ee:	4649      	mov	r1, r9
 80164f0:	f7ea f8a2 	bl	8000638 <__aeabi_dmul>
 80164f4:	f7ea fb50 	bl	8000b98 <__aeabi_d2iz>
 80164f8:	f7ea f834 	bl	8000564 <__aeabi_i2d>
 80164fc:	2200      	movs	r2, #0
 80164fe:	4b4a      	ldr	r3, [pc, #296]	; (8016628 <__kernel_rem_pio2+0x338>)
 8016500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016504:	f7ea f898 	bl	8000638 <__aeabi_dmul>
 8016508:	4602      	mov	r2, r0
 801650a:	460b      	mov	r3, r1
 801650c:	4640      	mov	r0, r8
 801650e:	4649      	mov	r1, r9
 8016510:	f7e9 feda 	bl	80002c8 <__aeabi_dsub>
 8016514:	f7ea fb40 	bl	8000b98 <__aeabi_d2iz>
 8016518:	ab0e      	add	r3, sp, #56	; 0x38
 801651a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801651e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8016522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016526:	f7e9 fed1 	bl	80002cc <__adddf3>
 801652a:	3501      	adds	r5, #1
 801652c:	4680      	mov	r8, r0
 801652e:	4689      	mov	r9, r1
 8016530:	e75e      	b.n	80163f0 <__kernel_rem_pio2+0x100>
 8016532:	d105      	bne.n	8016540 <__kernel_rem_pio2+0x250>
 8016534:	1e63      	subs	r3, r4, #1
 8016536:	aa0e      	add	r2, sp, #56	; 0x38
 8016538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801653c:	15c3      	asrs	r3, r0, #23
 801653e:	e79f      	b.n	8016480 <__kernel_rem_pio2+0x190>
 8016540:	2200      	movs	r2, #0
 8016542:	4b3a      	ldr	r3, [pc, #232]	; (801662c <__kernel_rem_pio2+0x33c>)
 8016544:	f7ea fafe 	bl	8000b44 <__aeabi_dcmpge>
 8016548:	2800      	cmp	r0, #0
 801654a:	d139      	bne.n	80165c0 <__kernel_rem_pio2+0x2d0>
 801654c:	9002      	str	r0, [sp, #8]
 801654e:	2200      	movs	r2, #0
 8016550:	2300      	movs	r3, #0
 8016552:	4630      	mov	r0, r6
 8016554:	4639      	mov	r1, r7
 8016556:	f7ea fad7 	bl	8000b08 <__aeabi_dcmpeq>
 801655a:	2800      	cmp	r0, #0
 801655c:	f000 80c7 	beq.w	80166ee <__kernel_rem_pio2+0x3fe>
 8016560:	1e65      	subs	r5, r4, #1
 8016562:	462b      	mov	r3, r5
 8016564:	2200      	movs	r2, #0
 8016566:	9904      	ldr	r1, [sp, #16]
 8016568:	428b      	cmp	r3, r1
 801656a:	da6a      	bge.n	8016642 <__kernel_rem_pio2+0x352>
 801656c:	2a00      	cmp	r2, #0
 801656e:	f000 8088 	beq.w	8016682 <__kernel_rem_pio2+0x392>
 8016572:	ab0e      	add	r3, sp, #56	; 0x38
 8016574:	f1aa 0a18 	sub.w	sl, sl, #24
 8016578:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801657c:	2b00      	cmp	r3, #0
 801657e:	f000 80b4 	beq.w	80166ea <__kernel_rem_pio2+0x3fa>
 8016582:	4650      	mov	r0, sl
 8016584:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8016610 <__kernel_rem_pio2+0x320>
 8016588:	f000 fd76 	bl	8017078 <scalbn>
 801658c:	00ec      	lsls	r4, r5, #3
 801658e:	ab72      	add	r3, sp, #456	; 0x1c8
 8016590:	191e      	adds	r6, r3, r4
 8016592:	ec59 8b10 	vmov	r8, r9, d0
 8016596:	f106 0a08 	add.w	sl, r6, #8
 801659a:	462f      	mov	r7, r5
 801659c:	2f00      	cmp	r7, #0
 801659e:	f280 80df 	bge.w	8016760 <__kernel_rem_pio2+0x470>
 80165a2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8016608 <__kernel_rem_pio2+0x318>
 80165a6:	f04f 0a00 	mov.w	sl, #0
 80165aa:	eba5 030a 	sub.w	r3, r5, sl
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	f2c0 810a 	blt.w	80167c8 <__kernel_rem_pio2+0x4d8>
 80165b4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8016630 <__kernel_rem_pio2+0x340>
 80165b8:	ec59 8b18 	vmov	r8, r9, d8
 80165bc:	2700      	movs	r7, #0
 80165be:	e0f5      	b.n	80167ac <__kernel_rem_pio2+0x4bc>
 80165c0:	2302      	movs	r3, #2
 80165c2:	9302      	str	r3, [sp, #8]
 80165c4:	e760      	b.n	8016488 <__kernel_rem_pio2+0x198>
 80165c6:	ab0e      	add	r3, sp, #56	; 0x38
 80165c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165cc:	b94d      	cbnz	r5, 80165e2 <__kernel_rem_pio2+0x2f2>
 80165ce:	b12b      	cbz	r3, 80165dc <__kernel_rem_pio2+0x2ec>
 80165d0:	a80e      	add	r0, sp, #56	; 0x38
 80165d2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80165d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80165da:	2301      	movs	r3, #1
 80165dc:	3201      	adds	r2, #1
 80165de:	461d      	mov	r5, r3
 80165e0:	e759      	b.n	8016496 <__kernel_rem_pio2+0x1a6>
 80165e2:	a80e      	add	r0, sp, #56	; 0x38
 80165e4:	1acb      	subs	r3, r1, r3
 80165e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80165ea:	462b      	mov	r3, r5
 80165ec:	e7f6      	b.n	80165dc <__kernel_rem_pio2+0x2ec>
 80165ee:	1e62      	subs	r2, r4, #1
 80165f0:	ab0e      	add	r3, sp, #56	; 0x38
 80165f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80165fa:	a90e      	add	r1, sp, #56	; 0x38
 80165fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016600:	e757      	b.n	80164b2 <__kernel_rem_pio2+0x1c2>
 8016602:	bf00      	nop
 8016604:	f3af 8000 	nop.w
	...
 8016614:	3ff00000 	.word	0x3ff00000
 8016618:	08017d48 	.word	0x08017d48
 801661c:	40200000 	.word	0x40200000
 8016620:	3ff00000 	.word	0x3ff00000
 8016624:	3e700000 	.word	0x3e700000
 8016628:	41700000 	.word	0x41700000
 801662c:	3fe00000 	.word	0x3fe00000
 8016630:	08017d08 	.word	0x08017d08
 8016634:	1e62      	subs	r2, r4, #1
 8016636:	ab0e      	add	r3, sp, #56	; 0x38
 8016638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801663c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016640:	e7db      	b.n	80165fa <__kernel_rem_pio2+0x30a>
 8016642:	a90e      	add	r1, sp, #56	; 0x38
 8016644:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016648:	3b01      	subs	r3, #1
 801664a:	430a      	orrs	r2, r1
 801664c:	e78b      	b.n	8016566 <__kernel_rem_pio2+0x276>
 801664e:	3301      	adds	r3, #1
 8016650:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016654:	2900      	cmp	r1, #0
 8016656:	d0fa      	beq.n	801664e <__kernel_rem_pio2+0x35e>
 8016658:	9a08      	ldr	r2, [sp, #32]
 801665a:	4422      	add	r2, r4
 801665c:	00d2      	lsls	r2, r2, #3
 801665e:	a922      	add	r1, sp, #136	; 0x88
 8016660:	18e3      	adds	r3, r4, r3
 8016662:	9206      	str	r2, [sp, #24]
 8016664:	440a      	add	r2, r1
 8016666:	9302      	str	r3, [sp, #8]
 8016668:	f10b 0108 	add.w	r1, fp, #8
 801666c:	f102 0308 	add.w	r3, r2, #8
 8016670:	1c66      	adds	r6, r4, #1
 8016672:	910a      	str	r1, [sp, #40]	; 0x28
 8016674:	2500      	movs	r5, #0
 8016676:	930d      	str	r3, [sp, #52]	; 0x34
 8016678:	9b02      	ldr	r3, [sp, #8]
 801667a:	42b3      	cmp	r3, r6
 801667c:	da04      	bge.n	8016688 <__kernel_rem_pio2+0x398>
 801667e:	461c      	mov	r4, r3
 8016680:	e6a6      	b.n	80163d0 <__kernel_rem_pio2+0xe0>
 8016682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016684:	2301      	movs	r3, #1
 8016686:	e7e3      	b.n	8016650 <__kernel_rem_pio2+0x360>
 8016688:	9b06      	ldr	r3, [sp, #24]
 801668a:	18ef      	adds	r7, r5, r3
 801668c:	ab22      	add	r3, sp, #136	; 0x88
 801668e:	441f      	add	r7, r3
 8016690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016692:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016696:	f7e9 ff65 	bl	8000564 <__aeabi_i2d>
 801669a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801669c:	461c      	mov	r4, r3
 801669e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166a0:	e9c7 0100 	strd	r0, r1, [r7]
 80166a4:	eb03 0b05 	add.w	fp, r3, r5
 80166a8:	2700      	movs	r7, #0
 80166aa:	f04f 0800 	mov.w	r8, #0
 80166ae:	f04f 0900 	mov.w	r9, #0
 80166b2:	9b07      	ldr	r3, [sp, #28]
 80166b4:	429f      	cmp	r7, r3
 80166b6:	dd08      	ble.n	80166ca <__kernel_rem_pio2+0x3da>
 80166b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166ba:	aa72      	add	r2, sp, #456	; 0x1c8
 80166bc:	18eb      	adds	r3, r5, r3
 80166be:	4413      	add	r3, r2
 80166c0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80166c4:	3601      	adds	r6, #1
 80166c6:	3508      	adds	r5, #8
 80166c8:	e7d6      	b.n	8016678 <__kernel_rem_pio2+0x388>
 80166ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80166ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80166d2:	f7e9 ffb1 	bl	8000638 <__aeabi_dmul>
 80166d6:	4602      	mov	r2, r0
 80166d8:	460b      	mov	r3, r1
 80166da:	4640      	mov	r0, r8
 80166dc:	4649      	mov	r1, r9
 80166de:	f7e9 fdf5 	bl	80002cc <__adddf3>
 80166e2:	3701      	adds	r7, #1
 80166e4:	4680      	mov	r8, r0
 80166e6:	4689      	mov	r9, r1
 80166e8:	e7e3      	b.n	80166b2 <__kernel_rem_pio2+0x3c2>
 80166ea:	3d01      	subs	r5, #1
 80166ec:	e741      	b.n	8016572 <__kernel_rem_pio2+0x282>
 80166ee:	f1ca 0000 	rsb	r0, sl, #0
 80166f2:	ec47 6b10 	vmov	d0, r6, r7
 80166f6:	f000 fcbf 	bl	8017078 <scalbn>
 80166fa:	ec57 6b10 	vmov	r6, r7, d0
 80166fe:	2200      	movs	r2, #0
 8016700:	4b99      	ldr	r3, [pc, #612]	; (8016968 <__kernel_rem_pio2+0x678>)
 8016702:	ee10 0a10 	vmov	r0, s0
 8016706:	4639      	mov	r1, r7
 8016708:	f7ea fa1c 	bl	8000b44 <__aeabi_dcmpge>
 801670c:	b1f8      	cbz	r0, 801674e <__kernel_rem_pio2+0x45e>
 801670e:	2200      	movs	r2, #0
 8016710:	4b96      	ldr	r3, [pc, #600]	; (801696c <__kernel_rem_pio2+0x67c>)
 8016712:	4630      	mov	r0, r6
 8016714:	4639      	mov	r1, r7
 8016716:	f7e9 ff8f 	bl	8000638 <__aeabi_dmul>
 801671a:	f7ea fa3d 	bl	8000b98 <__aeabi_d2iz>
 801671e:	4680      	mov	r8, r0
 8016720:	f7e9 ff20 	bl	8000564 <__aeabi_i2d>
 8016724:	2200      	movs	r2, #0
 8016726:	4b90      	ldr	r3, [pc, #576]	; (8016968 <__kernel_rem_pio2+0x678>)
 8016728:	f7e9 ff86 	bl	8000638 <__aeabi_dmul>
 801672c:	460b      	mov	r3, r1
 801672e:	4602      	mov	r2, r0
 8016730:	4639      	mov	r1, r7
 8016732:	4630      	mov	r0, r6
 8016734:	f7e9 fdc8 	bl	80002c8 <__aeabi_dsub>
 8016738:	f7ea fa2e 	bl	8000b98 <__aeabi_d2iz>
 801673c:	1c65      	adds	r5, r4, #1
 801673e:	ab0e      	add	r3, sp, #56	; 0x38
 8016740:	f10a 0a18 	add.w	sl, sl, #24
 8016744:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016748:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801674c:	e719      	b.n	8016582 <__kernel_rem_pio2+0x292>
 801674e:	4630      	mov	r0, r6
 8016750:	4639      	mov	r1, r7
 8016752:	f7ea fa21 	bl	8000b98 <__aeabi_d2iz>
 8016756:	ab0e      	add	r3, sp, #56	; 0x38
 8016758:	4625      	mov	r5, r4
 801675a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801675e:	e710      	b.n	8016582 <__kernel_rem_pio2+0x292>
 8016760:	ab0e      	add	r3, sp, #56	; 0x38
 8016762:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8016766:	f7e9 fefd 	bl	8000564 <__aeabi_i2d>
 801676a:	4642      	mov	r2, r8
 801676c:	464b      	mov	r3, r9
 801676e:	f7e9 ff63 	bl	8000638 <__aeabi_dmul>
 8016772:	2200      	movs	r2, #0
 8016774:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8016778:	4b7c      	ldr	r3, [pc, #496]	; (801696c <__kernel_rem_pio2+0x67c>)
 801677a:	4640      	mov	r0, r8
 801677c:	4649      	mov	r1, r9
 801677e:	f7e9 ff5b 	bl	8000638 <__aeabi_dmul>
 8016782:	3f01      	subs	r7, #1
 8016784:	4680      	mov	r8, r0
 8016786:	4689      	mov	r9, r1
 8016788:	e708      	b.n	801659c <__kernel_rem_pio2+0x2ac>
 801678a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016792:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8016796:	f7e9 ff4f 	bl	8000638 <__aeabi_dmul>
 801679a:	4602      	mov	r2, r0
 801679c:	460b      	mov	r3, r1
 801679e:	4640      	mov	r0, r8
 80167a0:	4649      	mov	r1, r9
 80167a2:	f7e9 fd93 	bl	80002cc <__adddf3>
 80167a6:	3701      	adds	r7, #1
 80167a8:	4680      	mov	r8, r0
 80167aa:	4689      	mov	r9, r1
 80167ac:	9b04      	ldr	r3, [sp, #16]
 80167ae:	429f      	cmp	r7, r3
 80167b0:	dc01      	bgt.n	80167b6 <__kernel_rem_pio2+0x4c6>
 80167b2:	45ba      	cmp	sl, r7
 80167b4:	dae9      	bge.n	801678a <__kernel_rem_pio2+0x49a>
 80167b6:	ab4a      	add	r3, sp, #296	; 0x128
 80167b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80167bc:	e9c3 8900 	strd	r8, r9, [r3]
 80167c0:	f10a 0a01 	add.w	sl, sl, #1
 80167c4:	3e08      	subs	r6, #8
 80167c6:	e6f0      	b.n	80165aa <__kernel_rem_pio2+0x2ba>
 80167c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80167ca:	2b03      	cmp	r3, #3
 80167cc:	d85b      	bhi.n	8016886 <__kernel_rem_pio2+0x596>
 80167ce:	e8df f003 	tbb	[pc, r3]
 80167d2:	264a      	.short	0x264a
 80167d4:	0226      	.short	0x0226
 80167d6:	ab9a      	add	r3, sp, #616	; 0x268
 80167d8:	441c      	add	r4, r3
 80167da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80167de:	46a2      	mov	sl, r4
 80167e0:	46ab      	mov	fp, r5
 80167e2:	f1bb 0f00 	cmp.w	fp, #0
 80167e6:	dc6c      	bgt.n	80168c2 <__kernel_rem_pio2+0x5d2>
 80167e8:	46a2      	mov	sl, r4
 80167ea:	46ab      	mov	fp, r5
 80167ec:	f1bb 0f01 	cmp.w	fp, #1
 80167f0:	f300 8086 	bgt.w	8016900 <__kernel_rem_pio2+0x610>
 80167f4:	2000      	movs	r0, #0
 80167f6:	2100      	movs	r1, #0
 80167f8:	2d01      	cmp	r5, #1
 80167fa:	f300 80a0 	bgt.w	801693e <__kernel_rem_pio2+0x64e>
 80167fe:	9b02      	ldr	r3, [sp, #8]
 8016800:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8016804:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8016808:	2b00      	cmp	r3, #0
 801680a:	f040 809e 	bne.w	801694a <__kernel_rem_pio2+0x65a>
 801680e:	9b01      	ldr	r3, [sp, #4]
 8016810:	e9c3 7800 	strd	r7, r8, [r3]
 8016814:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8016818:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801681c:	e033      	b.n	8016886 <__kernel_rem_pio2+0x596>
 801681e:	3408      	adds	r4, #8
 8016820:	ab4a      	add	r3, sp, #296	; 0x128
 8016822:	441c      	add	r4, r3
 8016824:	462e      	mov	r6, r5
 8016826:	2000      	movs	r0, #0
 8016828:	2100      	movs	r1, #0
 801682a:	2e00      	cmp	r6, #0
 801682c:	da3a      	bge.n	80168a4 <__kernel_rem_pio2+0x5b4>
 801682e:	9b02      	ldr	r3, [sp, #8]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d03d      	beq.n	80168b0 <__kernel_rem_pio2+0x5c0>
 8016834:	4602      	mov	r2, r0
 8016836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801683a:	9c01      	ldr	r4, [sp, #4]
 801683c:	e9c4 2300 	strd	r2, r3, [r4]
 8016840:	4602      	mov	r2, r0
 8016842:	460b      	mov	r3, r1
 8016844:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8016848:	f7e9 fd3e 	bl	80002c8 <__aeabi_dsub>
 801684c:	ae4c      	add	r6, sp, #304	; 0x130
 801684e:	2401      	movs	r4, #1
 8016850:	42a5      	cmp	r5, r4
 8016852:	da30      	bge.n	80168b6 <__kernel_rem_pio2+0x5c6>
 8016854:	9b02      	ldr	r3, [sp, #8]
 8016856:	b113      	cbz	r3, 801685e <__kernel_rem_pio2+0x56e>
 8016858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801685c:	4619      	mov	r1, r3
 801685e:	9b01      	ldr	r3, [sp, #4]
 8016860:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016864:	e00f      	b.n	8016886 <__kernel_rem_pio2+0x596>
 8016866:	ab9a      	add	r3, sp, #616	; 0x268
 8016868:	441c      	add	r4, r3
 801686a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801686e:	2000      	movs	r0, #0
 8016870:	2100      	movs	r1, #0
 8016872:	2d00      	cmp	r5, #0
 8016874:	da10      	bge.n	8016898 <__kernel_rem_pio2+0x5a8>
 8016876:	9b02      	ldr	r3, [sp, #8]
 8016878:	b113      	cbz	r3, 8016880 <__kernel_rem_pio2+0x590>
 801687a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801687e:	4619      	mov	r1, r3
 8016880:	9b01      	ldr	r3, [sp, #4]
 8016882:	e9c3 0100 	strd	r0, r1, [r3]
 8016886:	9b06      	ldr	r3, [sp, #24]
 8016888:	f003 0007 	and.w	r0, r3, #7
 801688c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8016890:	ecbd 8b02 	vpop	{d8}
 8016894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016898:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801689c:	f7e9 fd16 	bl	80002cc <__adddf3>
 80168a0:	3d01      	subs	r5, #1
 80168a2:	e7e6      	b.n	8016872 <__kernel_rem_pio2+0x582>
 80168a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80168a8:	f7e9 fd10 	bl	80002cc <__adddf3>
 80168ac:	3e01      	subs	r6, #1
 80168ae:	e7bc      	b.n	801682a <__kernel_rem_pio2+0x53a>
 80168b0:	4602      	mov	r2, r0
 80168b2:	460b      	mov	r3, r1
 80168b4:	e7c1      	b.n	801683a <__kernel_rem_pio2+0x54a>
 80168b6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80168ba:	f7e9 fd07 	bl	80002cc <__adddf3>
 80168be:	3401      	adds	r4, #1
 80168c0:	e7c6      	b.n	8016850 <__kernel_rem_pio2+0x560>
 80168c2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80168c6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80168ca:	4640      	mov	r0, r8
 80168cc:	ec53 2b17 	vmov	r2, r3, d7
 80168d0:	4649      	mov	r1, r9
 80168d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80168d6:	f7e9 fcf9 	bl	80002cc <__adddf3>
 80168da:	4602      	mov	r2, r0
 80168dc:	460b      	mov	r3, r1
 80168de:	4606      	mov	r6, r0
 80168e0:	460f      	mov	r7, r1
 80168e2:	4640      	mov	r0, r8
 80168e4:	4649      	mov	r1, r9
 80168e6:	f7e9 fcef 	bl	80002c8 <__aeabi_dsub>
 80168ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168ee:	f7e9 fced 	bl	80002cc <__adddf3>
 80168f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80168f6:	e9ca 0100 	strd	r0, r1, [sl]
 80168fa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80168fe:	e770      	b.n	80167e2 <__kernel_rem_pio2+0x4f2>
 8016900:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8016904:	ed3a 7b02 	vldmdb	sl!, {d7}
 8016908:	4630      	mov	r0, r6
 801690a:	ec53 2b17 	vmov	r2, r3, d7
 801690e:	4639      	mov	r1, r7
 8016910:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016914:	f7e9 fcda 	bl	80002cc <__adddf3>
 8016918:	4602      	mov	r2, r0
 801691a:	460b      	mov	r3, r1
 801691c:	4680      	mov	r8, r0
 801691e:	4689      	mov	r9, r1
 8016920:	4630      	mov	r0, r6
 8016922:	4639      	mov	r1, r7
 8016924:	f7e9 fcd0 	bl	80002c8 <__aeabi_dsub>
 8016928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801692c:	f7e9 fcce 	bl	80002cc <__adddf3>
 8016930:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016934:	e9ca 0100 	strd	r0, r1, [sl]
 8016938:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801693c:	e756      	b.n	80167ec <__kernel_rem_pio2+0x4fc>
 801693e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016942:	f7e9 fcc3 	bl	80002cc <__adddf3>
 8016946:	3d01      	subs	r5, #1
 8016948:	e756      	b.n	80167f8 <__kernel_rem_pio2+0x508>
 801694a:	9b01      	ldr	r3, [sp, #4]
 801694c:	9a01      	ldr	r2, [sp, #4]
 801694e:	601f      	str	r7, [r3, #0]
 8016950:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8016954:	605c      	str	r4, [r3, #4]
 8016956:	609d      	str	r5, [r3, #8]
 8016958:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801695c:	60d3      	str	r3, [r2, #12]
 801695e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016962:	6110      	str	r0, [r2, #16]
 8016964:	6153      	str	r3, [r2, #20]
 8016966:	e78e      	b.n	8016886 <__kernel_rem_pio2+0x596>
 8016968:	41700000 	.word	0x41700000
 801696c:	3e700000 	.word	0x3e700000

08016970 <__kernel_sin>:
 8016970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016974:	ec55 4b10 	vmov	r4, r5, d0
 8016978:	b085      	sub	sp, #20
 801697a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801697e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016982:	ed8d 1b00 	vstr	d1, [sp]
 8016986:	9002      	str	r0, [sp, #8]
 8016988:	da06      	bge.n	8016998 <__kernel_sin+0x28>
 801698a:	ee10 0a10 	vmov	r0, s0
 801698e:	4629      	mov	r1, r5
 8016990:	f7ea f902 	bl	8000b98 <__aeabi_d2iz>
 8016994:	2800      	cmp	r0, #0
 8016996:	d051      	beq.n	8016a3c <__kernel_sin+0xcc>
 8016998:	4622      	mov	r2, r4
 801699a:	462b      	mov	r3, r5
 801699c:	4620      	mov	r0, r4
 801699e:	4629      	mov	r1, r5
 80169a0:	f7e9 fe4a 	bl	8000638 <__aeabi_dmul>
 80169a4:	4682      	mov	sl, r0
 80169a6:	468b      	mov	fp, r1
 80169a8:	4602      	mov	r2, r0
 80169aa:	460b      	mov	r3, r1
 80169ac:	4620      	mov	r0, r4
 80169ae:	4629      	mov	r1, r5
 80169b0:	f7e9 fe42 	bl	8000638 <__aeabi_dmul>
 80169b4:	a341      	add	r3, pc, #260	; (adr r3, 8016abc <__kernel_sin+0x14c>)
 80169b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ba:	4680      	mov	r8, r0
 80169bc:	4689      	mov	r9, r1
 80169be:	4650      	mov	r0, sl
 80169c0:	4659      	mov	r1, fp
 80169c2:	f7e9 fe39 	bl	8000638 <__aeabi_dmul>
 80169c6:	a33f      	add	r3, pc, #252	; (adr r3, 8016ac4 <__kernel_sin+0x154>)
 80169c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169cc:	f7e9 fc7c 	bl	80002c8 <__aeabi_dsub>
 80169d0:	4652      	mov	r2, sl
 80169d2:	465b      	mov	r3, fp
 80169d4:	f7e9 fe30 	bl	8000638 <__aeabi_dmul>
 80169d8:	a33c      	add	r3, pc, #240	; (adr r3, 8016acc <__kernel_sin+0x15c>)
 80169da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169de:	f7e9 fc75 	bl	80002cc <__adddf3>
 80169e2:	4652      	mov	r2, sl
 80169e4:	465b      	mov	r3, fp
 80169e6:	f7e9 fe27 	bl	8000638 <__aeabi_dmul>
 80169ea:	a33a      	add	r3, pc, #232	; (adr r3, 8016ad4 <__kernel_sin+0x164>)
 80169ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f0:	f7e9 fc6a 	bl	80002c8 <__aeabi_dsub>
 80169f4:	4652      	mov	r2, sl
 80169f6:	465b      	mov	r3, fp
 80169f8:	f7e9 fe1e 	bl	8000638 <__aeabi_dmul>
 80169fc:	a337      	add	r3, pc, #220	; (adr r3, 8016adc <__kernel_sin+0x16c>)
 80169fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a02:	f7e9 fc63 	bl	80002cc <__adddf3>
 8016a06:	9b02      	ldr	r3, [sp, #8]
 8016a08:	4606      	mov	r6, r0
 8016a0a:	460f      	mov	r7, r1
 8016a0c:	b9db      	cbnz	r3, 8016a46 <__kernel_sin+0xd6>
 8016a0e:	4602      	mov	r2, r0
 8016a10:	460b      	mov	r3, r1
 8016a12:	4650      	mov	r0, sl
 8016a14:	4659      	mov	r1, fp
 8016a16:	f7e9 fe0f 	bl	8000638 <__aeabi_dmul>
 8016a1a:	a325      	add	r3, pc, #148	; (adr r3, 8016ab0 <__kernel_sin+0x140>)
 8016a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a20:	f7e9 fc52 	bl	80002c8 <__aeabi_dsub>
 8016a24:	4642      	mov	r2, r8
 8016a26:	464b      	mov	r3, r9
 8016a28:	f7e9 fe06 	bl	8000638 <__aeabi_dmul>
 8016a2c:	4602      	mov	r2, r0
 8016a2e:	460b      	mov	r3, r1
 8016a30:	4620      	mov	r0, r4
 8016a32:	4629      	mov	r1, r5
 8016a34:	f7e9 fc4a 	bl	80002cc <__adddf3>
 8016a38:	4604      	mov	r4, r0
 8016a3a:	460d      	mov	r5, r1
 8016a3c:	ec45 4b10 	vmov	d0, r4, r5
 8016a40:	b005      	add	sp, #20
 8016a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a46:	2200      	movs	r2, #0
 8016a48:	4b1b      	ldr	r3, [pc, #108]	; (8016ab8 <__kernel_sin+0x148>)
 8016a4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a4e:	f7e9 fdf3 	bl	8000638 <__aeabi_dmul>
 8016a52:	4632      	mov	r2, r6
 8016a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a58:	463b      	mov	r3, r7
 8016a5a:	4640      	mov	r0, r8
 8016a5c:	4649      	mov	r1, r9
 8016a5e:	f7e9 fdeb 	bl	8000638 <__aeabi_dmul>
 8016a62:	4602      	mov	r2, r0
 8016a64:	460b      	mov	r3, r1
 8016a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016a6a:	f7e9 fc2d 	bl	80002c8 <__aeabi_dsub>
 8016a6e:	4652      	mov	r2, sl
 8016a70:	465b      	mov	r3, fp
 8016a72:	f7e9 fde1 	bl	8000638 <__aeabi_dmul>
 8016a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a7a:	f7e9 fc25 	bl	80002c8 <__aeabi_dsub>
 8016a7e:	a30c      	add	r3, pc, #48	; (adr r3, 8016ab0 <__kernel_sin+0x140>)
 8016a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a84:	4606      	mov	r6, r0
 8016a86:	460f      	mov	r7, r1
 8016a88:	4640      	mov	r0, r8
 8016a8a:	4649      	mov	r1, r9
 8016a8c:	f7e9 fdd4 	bl	8000638 <__aeabi_dmul>
 8016a90:	4602      	mov	r2, r0
 8016a92:	460b      	mov	r3, r1
 8016a94:	4630      	mov	r0, r6
 8016a96:	4639      	mov	r1, r7
 8016a98:	f7e9 fc18 	bl	80002cc <__adddf3>
 8016a9c:	4602      	mov	r2, r0
 8016a9e:	460b      	mov	r3, r1
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	4629      	mov	r1, r5
 8016aa4:	f7e9 fc10 	bl	80002c8 <__aeabi_dsub>
 8016aa8:	e7c6      	b.n	8016a38 <__kernel_sin+0xc8>
 8016aaa:	bf00      	nop
 8016aac:	f3af 8000 	nop.w
 8016ab0:	55555549 	.word	0x55555549
 8016ab4:	3fc55555 	.word	0x3fc55555
 8016ab8:	3fe00000 	.word	0x3fe00000
 8016abc:	5acfd57c 	.word	0x5acfd57c
 8016ac0:	3de5d93a 	.word	0x3de5d93a
 8016ac4:	8a2b9ceb 	.word	0x8a2b9ceb
 8016ac8:	3e5ae5e6 	.word	0x3e5ae5e6
 8016acc:	57b1fe7d 	.word	0x57b1fe7d
 8016ad0:	3ec71de3 	.word	0x3ec71de3
 8016ad4:	19c161d5 	.word	0x19c161d5
 8016ad8:	3f2a01a0 	.word	0x3f2a01a0
 8016adc:	1110f8a6 	.word	0x1110f8a6
 8016ae0:	3f811111 	.word	0x3f811111
 8016ae4:	00000000 	.word	0x00000000

08016ae8 <atan>:
 8016ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aec:	ec55 4b10 	vmov	r4, r5, d0
 8016af0:	4bc3      	ldr	r3, [pc, #780]	; (8016e00 <atan+0x318>)
 8016af2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016af6:	429e      	cmp	r6, r3
 8016af8:	46ab      	mov	fp, r5
 8016afa:	dd18      	ble.n	8016b2e <atan+0x46>
 8016afc:	4bc1      	ldr	r3, [pc, #772]	; (8016e04 <atan+0x31c>)
 8016afe:	429e      	cmp	r6, r3
 8016b00:	dc01      	bgt.n	8016b06 <atan+0x1e>
 8016b02:	d109      	bne.n	8016b18 <atan+0x30>
 8016b04:	b144      	cbz	r4, 8016b18 <atan+0x30>
 8016b06:	4622      	mov	r2, r4
 8016b08:	462b      	mov	r3, r5
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	4629      	mov	r1, r5
 8016b0e:	f7e9 fbdd 	bl	80002cc <__adddf3>
 8016b12:	4604      	mov	r4, r0
 8016b14:	460d      	mov	r5, r1
 8016b16:	e006      	b.n	8016b26 <atan+0x3e>
 8016b18:	f1bb 0f00 	cmp.w	fp, #0
 8016b1c:	f340 8131 	ble.w	8016d82 <atan+0x29a>
 8016b20:	a59b      	add	r5, pc, #620	; (adr r5, 8016d90 <atan+0x2a8>)
 8016b22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016b26:	ec45 4b10 	vmov	d0, r4, r5
 8016b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b2e:	4bb6      	ldr	r3, [pc, #728]	; (8016e08 <atan+0x320>)
 8016b30:	429e      	cmp	r6, r3
 8016b32:	dc14      	bgt.n	8016b5e <atan+0x76>
 8016b34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016b38:	429e      	cmp	r6, r3
 8016b3a:	dc0d      	bgt.n	8016b58 <atan+0x70>
 8016b3c:	a396      	add	r3, pc, #600	; (adr r3, 8016d98 <atan+0x2b0>)
 8016b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b42:	ee10 0a10 	vmov	r0, s0
 8016b46:	4629      	mov	r1, r5
 8016b48:	f7e9 fbc0 	bl	80002cc <__adddf3>
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	4baf      	ldr	r3, [pc, #700]	; (8016e0c <atan+0x324>)
 8016b50:	f7ea f802 	bl	8000b58 <__aeabi_dcmpgt>
 8016b54:	2800      	cmp	r0, #0
 8016b56:	d1e6      	bne.n	8016b26 <atan+0x3e>
 8016b58:	f04f 3aff 	mov.w	sl, #4294967295
 8016b5c:	e02b      	b.n	8016bb6 <atan+0xce>
 8016b5e:	f000 f963 	bl	8016e28 <fabs>
 8016b62:	4bab      	ldr	r3, [pc, #684]	; (8016e10 <atan+0x328>)
 8016b64:	429e      	cmp	r6, r3
 8016b66:	ec55 4b10 	vmov	r4, r5, d0
 8016b6a:	f300 80bf 	bgt.w	8016cec <atan+0x204>
 8016b6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016b72:	429e      	cmp	r6, r3
 8016b74:	f300 80a0 	bgt.w	8016cb8 <atan+0x1d0>
 8016b78:	ee10 2a10 	vmov	r2, s0
 8016b7c:	ee10 0a10 	vmov	r0, s0
 8016b80:	462b      	mov	r3, r5
 8016b82:	4629      	mov	r1, r5
 8016b84:	f7e9 fba2 	bl	80002cc <__adddf3>
 8016b88:	2200      	movs	r2, #0
 8016b8a:	4ba0      	ldr	r3, [pc, #640]	; (8016e0c <atan+0x324>)
 8016b8c:	f7e9 fb9c 	bl	80002c8 <__aeabi_dsub>
 8016b90:	2200      	movs	r2, #0
 8016b92:	4606      	mov	r6, r0
 8016b94:	460f      	mov	r7, r1
 8016b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	4629      	mov	r1, r5
 8016b9e:	f7e9 fb95 	bl	80002cc <__adddf3>
 8016ba2:	4602      	mov	r2, r0
 8016ba4:	460b      	mov	r3, r1
 8016ba6:	4630      	mov	r0, r6
 8016ba8:	4639      	mov	r1, r7
 8016baa:	f7e9 fe6f 	bl	800088c <__aeabi_ddiv>
 8016bae:	f04f 0a00 	mov.w	sl, #0
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	460d      	mov	r5, r1
 8016bb6:	4622      	mov	r2, r4
 8016bb8:	462b      	mov	r3, r5
 8016bba:	4620      	mov	r0, r4
 8016bbc:	4629      	mov	r1, r5
 8016bbe:	f7e9 fd3b 	bl	8000638 <__aeabi_dmul>
 8016bc2:	4602      	mov	r2, r0
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	4680      	mov	r8, r0
 8016bc8:	4689      	mov	r9, r1
 8016bca:	f7e9 fd35 	bl	8000638 <__aeabi_dmul>
 8016bce:	a374      	add	r3, pc, #464	; (adr r3, 8016da0 <atan+0x2b8>)
 8016bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd4:	4606      	mov	r6, r0
 8016bd6:	460f      	mov	r7, r1
 8016bd8:	f7e9 fd2e 	bl	8000638 <__aeabi_dmul>
 8016bdc:	a372      	add	r3, pc, #456	; (adr r3, 8016da8 <atan+0x2c0>)
 8016bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be2:	f7e9 fb73 	bl	80002cc <__adddf3>
 8016be6:	4632      	mov	r2, r6
 8016be8:	463b      	mov	r3, r7
 8016bea:	f7e9 fd25 	bl	8000638 <__aeabi_dmul>
 8016bee:	a370      	add	r3, pc, #448	; (adr r3, 8016db0 <atan+0x2c8>)
 8016bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf4:	f7e9 fb6a 	bl	80002cc <__adddf3>
 8016bf8:	4632      	mov	r2, r6
 8016bfa:	463b      	mov	r3, r7
 8016bfc:	f7e9 fd1c 	bl	8000638 <__aeabi_dmul>
 8016c00:	a36d      	add	r3, pc, #436	; (adr r3, 8016db8 <atan+0x2d0>)
 8016c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c06:	f7e9 fb61 	bl	80002cc <__adddf3>
 8016c0a:	4632      	mov	r2, r6
 8016c0c:	463b      	mov	r3, r7
 8016c0e:	f7e9 fd13 	bl	8000638 <__aeabi_dmul>
 8016c12:	a36b      	add	r3, pc, #428	; (adr r3, 8016dc0 <atan+0x2d8>)
 8016c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c18:	f7e9 fb58 	bl	80002cc <__adddf3>
 8016c1c:	4632      	mov	r2, r6
 8016c1e:	463b      	mov	r3, r7
 8016c20:	f7e9 fd0a 	bl	8000638 <__aeabi_dmul>
 8016c24:	a368      	add	r3, pc, #416	; (adr r3, 8016dc8 <atan+0x2e0>)
 8016c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c2a:	f7e9 fb4f 	bl	80002cc <__adddf3>
 8016c2e:	4642      	mov	r2, r8
 8016c30:	464b      	mov	r3, r9
 8016c32:	f7e9 fd01 	bl	8000638 <__aeabi_dmul>
 8016c36:	a366      	add	r3, pc, #408	; (adr r3, 8016dd0 <atan+0x2e8>)
 8016c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c3c:	4680      	mov	r8, r0
 8016c3e:	4689      	mov	r9, r1
 8016c40:	4630      	mov	r0, r6
 8016c42:	4639      	mov	r1, r7
 8016c44:	f7e9 fcf8 	bl	8000638 <__aeabi_dmul>
 8016c48:	a363      	add	r3, pc, #396	; (adr r3, 8016dd8 <atan+0x2f0>)
 8016c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c4e:	f7e9 fb3b 	bl	80002c8 <__aeabi_dsub>
 8016c52:	4632      	mov	r2, r6
 8016c54:	463b      	mov	r3, r7
 8016c56:	f7e9 fcef 	bl	8000638 <__aeabi_dmul>
 8016c5a:	a361      	add	r3, pc, #388	; (adr r3, 8016de0 <atan+0x2f8>)
 8016c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c60:	f7e9 fb32 	bl	80002c8 <__aeabi_dsub>
 8016c64:	4632      	mov	r2, r6
 8016c66:	463b      	mov	r3, r7
 8016c68:	f7e9 fce6 	bl	8000638 <__aeabi_dmul>
 8016c6c:	a35e      	add	r3, pc, #376	; (adr r3, 8016de8 <atan+0x300>)
 8016c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c72:	f7e9 fb29 	bl	80002c8 <__aeabi_dsub>
 8016c76:	4632      	mov	r2, r6
 8016c78:	463b      	mov	r3, r7
 8016c7a:	f7e9 fcdd 	bl	8000638 <__aeabi_dmul>
 8016c7e:	a35c      	add	r3, pc, #368	; (adr r3, 8016df0 <atan+0x308>)
 8016c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c84:	f7e9 fb20 	bl	80002c8 <__aeabi_dsub>
 8016c88:	4632      	mov	r2, r6
 8016c8a:	463b      	mov	r3, r7
 8016c8c:	f7e9 fcd4 	bl	8000638 <__aeabi_dmul>
 8016c90:	4602      	mov	r2, r0
 8016c92:	460b      	mov	r3, r1
 8016c94:	4640      	mov	r0, r8
 8016c96:	4649      	mov	r1, r9
 8016c98:	f7e9 fb18 	bl	80002cc <__adddf3>
 8016c9c:	4622      	mov	r2, r4
 8016c9e:	462b      	mov	r3, r5
 8016ca0:	f7e9 fcca 	bl	8000638 <__aeabi_dmul>
 8016ca4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016ca8:	4602      	mov	r2, r0
 8016caa:	460b      	mov	r3, r1
 8016cac:	d14b      	bne.n	8016d46 <atan+0x25e>
 8016cae:	4620      	mov	r0, r4
 8016cb0:	4629      	mov	r1, r5
 8016cb2:	f7e9 fb09 	bl	80002c8 <__aeabi_dsub>
 8016cb6:	e72c      	b.n	8016b12 <atan+0x2a>
 8016cb8:	ee10 0a10 	vmov	r0, s0
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	4b53      	ldr	r3, [pc, #332]	; (8016e0c <atan+0x324>)
 8016cc0:	4629      	mov	r1, r5
 8016cc2:	f7e9 fb01 	bl	80002c8 <__aeabi_dsub>
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	4606      	mov	r6, r0
 8016cca:	460f      	mov	r7, r1
 8016ccc:	4b4f      	ldr	r3, [pc, #316]	; (8016e0c <atan+0x324>)
 8016cce:	4620      	mov	r0, r4
 8016cd0:	4629      	mov	r1, r5
 8016cd2:	f7e9 fafb 	bl	80002cc <__adddf3>
 8016cd6:	4602      	mov	r2, r0
 8016cd8:	460b      	mov	r3, r1
 8016cda:	4630      	mov	r0, r6
 8016cdc:	4639      	mov	r1, r7
 8016cde:	f7e9 fdd5 	bl	800088c <__aeabi_ddiv>
 8016ce2:	f04f 0a01 	mov.w	sl, #1
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	460d      	mov	r5, r1
 8016cea:	e764      	b.n	8016bb6 <atan+0xce>
 8016cec:	4b49      	ldr	r3, [pc, #292]	; (8016e14 <atan+0x32c>)
 8016cee:	429e      	cmp	r6, r3
 8016cf0:	dc1d      	bgt.n	8016d2e <atan+0x246>
 8016cf2:	ee10 0a10 	vmov	r0, s0
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	4b47      	ldr	r3, [pc, #284]	; (8016e18 <atan+0x330>)
 8016cfa:	4629      	mov	r1, r5
 8016cfc:	f7e9 fae4 	bl	80002c8 <__aeabi_dsub>
 8016d00:	2200      	movs	r2, #0
 8016d02:	4606      	mov	r6, r0
 8016d04:	460f      	mov	r7, r1
 8016d06:	4b44      	ldr	r3, [pc, #272]	; (8016e18 <atan+0x330>)
 8016d08:	4620      	mov	r0, r4
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	f7e9 fc94 	bl	8000638 <__aeabi_dmul>
 8016d10:	2200      	movs	r2, #0
 8016d12:	4b3e      	ldr	r3, [pc, #248]	; (8016e0c <atan+0x324>)
 8016d14:	f7e9 fada 	bl	80002cc <__adddf3>
 8016d18:	4602      	mov	r2, r0
 8016d1a:	460b      	mov	r3, r1
 8016d1c:	4630      	mov	r0, r6
 8016d1e:	4639      	mov	r1, r7
 8016d20:	f7e9 fdb4 	bl	800088c <__aeabi_ddiv>
 8016d24:	f04f 0a02 	mov.w	sl, #2
 8016d28:	4604      	mov	r4, r0
 8016d2a:	460d      	mov	r5, r1
 8016d2c:	e743      	b.n	8016bb6 <atan+0xce>
 8016d2e:	462b      	mov	r3, r5
 8016d30:	ee10 2a10 	vmov	r2, s0
 8016d34:	2000      	movs	r0, #0
 8016d36:	4939      	ldr	r1, [pc, #228]	; (8016e1c <atan+0x334>)
 8016d38:	f7e9 fda8 	bl	800088c <__aeabi_ddiv>
 8016d3c:	f04f 0a03 	mov.w	sl, #3
 8016d40:	4604      	mov	r4, r0
 8016d42:	460d      	mov	r5, r1
 8016d44:	e737      	b.n	8016bb6 <atan+0xce>
 8016d46:	4b36      	ldr	r3, [pc, #216]	; (8016e20 <atan+0x338>)
 8016d48:	4e36      	ldr	r6, [pc, #216]	; (8016e24 <atan+0x33c>)
 8016d4a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8016d4e:	4456      	add	r6, sl
 8016d50:	449a      	add	sl, r3
 8016d52:	e9da 2300 	ldrd	r2, r3, [sl]
 8016d56:	f7e9 fab7 	bl	80002c8 <__aeabi_dsub>
 8016d5a:	4622      	mov	r2, r4
 8016d5c:	462b      	mov	r3, r5
 8016d5e:	f7e9 fab3 	bl	80002c8 <__aeabi_dsub>
 8016d62:	4602      	mov	r2, r0
 8016d64:	460b      	mov	r3, r1
 8016d66:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016d6a:	f7e9 faad 	bl	80002c8 <__aeabi_dsub>
 8016d6e:	f1bb 0f00 	cmp.w	fp, #0
 8016d72:	4604      	mov	r4, r0
 8016d74:	460d      	mov	r5, r1
 8016d76:	f6bf aed6 	bge.w	8016b26 <atan+0x3e>
 8016d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d7e:	461d      	mov	r5, r3
 8016d80:	e6d1      	b.n	8016b26 <atan+0x3e>
 8016d82:	a51d      	add	r5, pc, #116	; (adr r5, 8016df8 <atan+0x310>)
 8016d84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016d88:	e6cd      	b.n	8016b26 <atan+0x3e>
 8016d8a:	bf00      	nop
 8016d8c:	f3af 8000 	nop.w
 8016d90:	54442d18 	.word	0x54442d18
 8016d94:	3ff921fb 	.word	0x3ff921fb
 8016d98:	8800759c 	.word	0x8800759c
 8016d9c:	7e37e43c 	.word	0x7e37e43c
 8016da0:	e322da11 	.word	0xe322da11
 8016da4:	3f90ad3a 	.word	0x3f90ad3a
 8016da8:	24760deb 	.word	0x24760deb
 8016dac:	3fa97b4b 	.word	0x3fa97b4b
 8016db0:	a0d03d51 	.word	0xa0d03d51
 8016db4:	3fb10d66 	.word	0x3fb10d66
 8016db8:	c54c206e 	.word	0xc54c206e
 8016dbc:	3fb745cd 	.word	0x3fb745cd
 8016dc0:	920083ff 	.word	0x920083ff
 8016dc4:	3fc24924 	.word	0x3fc24924
 8016dc8:	5555550d 	.word	0x5555550d
 8016dcc:	3fd55555 	.word	0x3fd55555
 8016dd0:	2c6a6c2f 	.word	0x2c6a6c2f
 8016dd4:	bfa2b444 	.word	0xbfa2b444
 8016dd8:	52defd9a 	.word	0x52defd9a
 8016ddc:	3fadde2d 	.word	0x3fadde2d
 8016de0:	af749a6d 	.word	0xaf749a6d
 8016de4:	3fb3b0f2 	.word	0x3fb3b0f2
 8016de8:	fe231671 	.word	0xfe231671
 8016dec:	3fbc71c6 	.word	0x3fbc71c6
 8016df0:	9998ebc4 	.word	0x9998ebc4
 8016df4:	3fc99999 	.word	0x3fc99999
 8016df8:	54442d18 	.word	0x54442d18
 8016dfc:	bff921fb 	.word	0xbff921fb
 8016e00:	440fffff 	.word	0x440fffff
 8016e04:	7ff00000 	.word	0x7ff00000
 8016e08:	3fdbffff 	.word	0x3fdbffff
 8016e0c:	3ff00000 	.word	0x3ff00000
 8016e10:	3ff2ffff 	.word	0x3ff2ffff
 8016e14:	40037fff 	.word	0x40037fff
 8016e18:	3ff80000 	.word	0x3ff80000
 8016e1c:	bff00000 	.word	0xbff00000
 8016e20:	08017d78 	.word	0x08017d78
 8016e24:	08017d58 	.word	0x08017d58

08016e28 <fabs>:
 8016e28:	ec51 0b10 	vmov	r0, r1, d0
 8016e2c:	ee10 2a10 	vmov	r2, s0
 8016e30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e34:	ec43 2b10 	vmov	d0, r2, r3
 8016e38:	4770      	bx	lr

08016e3a <finite>:
 8016e3a:	ee10 3a90 	vmov	r3, s1
 8016e3e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016e42:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016e46:	0fc0      	lsrs	r0, r0, #31
 8016e48:	4770      	bx	lr
 8016e4a:	0000      	movs	r0, r0
 8016e4c:	0000      	movs	r0, r0
	...

08016e50 <floor>:
 8016e50:	ec51 0b10 	vmov	r0, r1, d0
 8016e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016e5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016e60:	2e13      	cmp	r6, #19
 8016e62:	460c      	mov	r4, r1
 8016e64:	ee10 5a10 	vmov	r5, s0
 8016e68:	4680      	mov	r8, r0
 8016e6a:	dc34      	bgt.n	8016ed6 <floor+0x86>
 8016e6c:	2e00      	cmp	r6, #0
 8016e6e:	da16      	bge.n	8016e9e <floor+0x4e>
 8016e70:	a335      	add	r3, pc, #212	; (adr r3, 8016f48 <floor+0xf8>)
 8016e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e76:	f7e9 fa29 	bl	80002cc <__adddf3>
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	f7e9 fe6b 	bl	8000b58 <__aeabi_dcmpgt>
 8016e82:	b148      	cbz	r0, 8016e98 <floor+0x48>
 8016e84:	2c00      	cmp	r4, #0
 8016e86:	da59      	bge.n	8016f3c <floor+0xec>
 8016e88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016e8c:	4a30      	ldr	r2, [pc, #192]	; (8016f50 <floor+0x100>)
 8016e8e:	432b      	orrs	r3, r5
 8016e90:	2500      	movs	r5, #0
 8016e92:	42ab      	cmp	r3, r5
 8016e94:	bf18      	it	ne
 8016e96:	4614      	movne	r4, r2
 8016e98:	4621      	mov	r1, r4
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	e025      	b.n	8016eea <floor+0x9a>
 8016e9e:	4f2d      	ldr	r7, [pc, #180]	; (8016f54 <floor+0x104>)
 8016ea0:	4137      	asrs	r7, r6
 8016ea2:	ea01 0307 	and.w	r3, r1, r7
 8016ea6:	4303      	orrs	r3, r0
 8016ea8:	d01f      	beq.n	8016eea <floor+0x9a>
 8016eaa:	a327      	add	r3, pc, #156	; (adr r3, 8016f48 <floor+0xf8>)
 8016eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb0:	f7e9 fa0c 	bl	80002cc <__adddf3>
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	f7e9 fe4e 	bl	8000b58 <__aeabi_dcmpgt>
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d0eb      	beq.n	8016e98 <floor+0x48>
 8016ec0:	2c00      	cmp	r4, #0
 8016ec2:	bfbe      	ittt	lt
 8016ec4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016ec8:	fa43 f606 	asrlt.w	r6, r3, r6
 8016ecc:	19a4      	addlt	r4, r4, r6
 8016ece:	ea24 0407 	bic.w	r4, r4, r7
 8016ed2:	2500      	movs	r5, #0
 8016ed4:	e7e0      	b.n	8016e98 <floor+0x48>
 8016ed6:	2e33      	cmp	r6, #51	; 0x33
 8016ed8:	dd0b      	ble.n	8016ef2 <floor+0xa2>
 8016eda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016ede:	d104      	bne.n	8016eea <floor+0x9a>
 8016ee0:	ee10 2a10 	vmov	r2, s0
 8016ee4:	460b      	mov	r3, r1
 8016ee6:	f7e9 f9f1 	bl	80002cc <__adddf3>
 8016eea:	ec41 0b10 	vmov	d0, r0, r1
 8016eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ef2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8016efa:	fa23 f707 	lsr.w	r7, r3, r7
 8016efe:	4207      	tst	r7, r0
 8016f00:	d0f3      	beq.n	8016eea <floor+0x9a>
 8016f02:	a311      	add	r3, pc, #68	; (adr r3, 8016f48 <floor+0xf8>)
 8016f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f08:	f7e9 f9e0 	bl	80002cc <__adddf3>
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	2300      	movs	r3, #0
 8016f10:	f7e9 fe22 	bl	8000b58 <__aeabi_dcmpgt>
 8016f14:	2800      	cmp	r0, #0
 8016f16:	d0bf      	beq.n	8016e98 <floor+0x48>
 8016f18:	2c00      	cmp	r4, #0
 8016f1a:	da02      	bge.n	8016f22 <floor+0xd2>
 8016f1c:	2e14      	cmp	r6, #20
 8016f1e:	d103      	bne.n	8016f28 <floor+0xd8>
 8016f20:	3401      	adds	r4, #1
 8016f22:	ea25 0507 	bic.w	r5, r5, r7
 8016f26:	e7b7      	b.n	8016e98 <floor+0x48>
 8016f28:	2301      	movs	r3, #1
 8016f2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016f2e:	fa03 f606 	lsl.w	r6, r3, r6
 8016f32:	4435      	add	r5, r6
 8016f34:	4545      	cmp	r5, r8
 8016f36:	bf38      	it	cc
 8016f38:	18e4      	addcc	r4, r4, r3
 8016f3a:	e7f2      	b.n	8016f22 <floor+0xd2>
 8016f3c:	2500      	movs	r5, #0
 8016f3e:	462c      	mov	r4, r5
 8016f40:	e7aa      	b.n	8016e98 <floor+0x48>
 8016f42:	bf00      	nop
 8016f44:	f3af 8000 	nop.w
 8016f48:	8800759c 	.word	0x8800759c
 8016f4c:	7e37e43c 	.word	0x7e37e43c
 8016f50:	bff00000 	.word	0xbff00000
 8016f54:	000fffff 	.word	0x000fffff

08016f58 <matherr>:
 8016f58:	2000      	movs	r0, #0
 8016f5a:	4770      	bx	lr
 8016f5c:	0000      	movs	r0, r0
	...

08016f60 <nan>:
 8016f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016f68 <nan+0x8>
 8016f64:	4770      	bx	lr
 8016f66:	bf00      	nop
 8016f68:	00000000 	.word	0x00000000
 8016f6c:	7ff80000 	.word	0x7ff80000

08016f70 <rint>:
 8016f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f72:	ec51 0b10 	vmov	r0, r1, d0
 8016f76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016f7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016f7e:	2e13      	cmp	r6, #19
 8016f80:	460b      	mov	r3, r1
 8016f82:	ee10 4a10 	vmov	r4, s0
 8016f86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016f8a:	dc56      	bgt.n	801703a <rint+0xca>
 8016f8c:	2e00      	cmp	r6, #0
 8016f8e:	da2b      	bge.n	8016fe8 <rint+0x78>
 8016f90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016f94:	4302      	orrs	r2, r0
 8016f96:	d023      	beq.n	8016fe0 <rint+0x70>
 8016f98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016f9c:	4302      	orrs	r2, r0
 8016f9e:	4254      	negs	r4, r2
 8016fa0:	4314      	orrs	r4, r2
 8016fa2:	0c4b      	lsrs	r3, r1, #17
 8016fa4:	0b24      	lsrs	r4, r4, #12
 8016fa6:	045b      	lsls	r3, r3, #17
 8016fa8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016fac:	ea44 0103 	orr.w	r1, r4, r3
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	492f      	ldr	r1, [pc, #188]	; (8017070 <rint+0x100>)
 8016fb4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016fb8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016fbc:	4602      	mov	r2, r0
 8016fbe:	4639      	mov	r1, r7
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	f7e9 f983 	bl	80002cc <__adddf3>
 8016fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8016fca:	463b      	mov	r3, r7
 8016fcc:	4632      	mov	r2, r6
 8016fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016fd2:	f7e9 f979 	bl	80002c8 <__aeabi_dsub>
 8016fd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016fda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016fde:	4639      	mov	r1, r7
 8016fe0:	ec41 0b10 	vmov	d0, r0, r1
 8016fe4:	b003      	add	sp, #12
 8016fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fe8:	4a22      	ldr	r2, [pc, #136]	; (8017074 <rint+0x104>)
 8016fea:	4132      	asrs	r2, r6
 8016fec:	ea01 0702 	and.w	r7, r1, r2
 8016ff0:	4307      	orrs	r7, r0
 8016ff2:	d0f5      	beq.n	8016fe0 <rint+0x70>
 8016ff4:	0852      	lsrs	r2, r2, #1
 8016ff6:	4011      	ands	r1, r2
 8016ff8:	430c      	orrs	r4, r1
 8016ffa:	d00b      	beq.n	8017014 <rint+0xa4>
 8016ffc:	ea23 0202 	bic.w	r2, r3, r2
 8017000:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017004:	2e13      	cmp	r6, #19
 8017006:	fa43 f306 	asr.w	r3, r3, r6
 801700a:	bf0c      	ite	eq
 801700c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017010:	2400      	movne	r4, #0
 8017012:	4313      	orrs	r3, r2
 8017014:	4916      	ldr	r1, [pc, #88]	; (8017070 <rint+0x100>)
 8017016:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801701a:	4622      	mov	r2, r4
 801701c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017020:	4620      	mov	r0, r4
 8017022:	4629      	mov	r1, r5
 8017024:	f7e9 f952 	bl	80002cc <__adddf3>
 8017028:	e9cd 0100 	strd	r0, r1, [sp]
 801702c:	4622      	mov	r2, r4
 801702e:	462b      	mov	r3, r5
 8017030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017034:	f7e9 f948 	bl	80002c8 <__aeabi_dsub>
 8017038:	e7d2      	b.n	8016fe0 <rint+0x70>
 801703a:	2e33      	cmp	r6, #51	; 0x33
 801703c:	dd07      	ble.n	801704e <rint+0xde>
 801703e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017042:	d1cd      	bne.n	8016fe0 <rint+0x70>
 8017044:	ee10 2a10 	vmov	r2, s0
 8017048:	f7e9 f940 	bl	80002cc <__adddf3>
 801704c:	e7c8      	b.n	8016fe0 <rint+0x70>
 801704e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017052:	f04f 32ff 	mov.w	r2, #4294967295
 8017056:	40f2      	lsrs	r2, r6
 8017058:	4210      	tst	r0, r2
 801705a:	d0c1      	beq.n	8016fe0 <rint+0x70>
 801705c:	0852      	lsrs	r2, r2, #1
 801705e:	4210      	tst	r0, r2
 8017060:	bf1f      	itttt	ne
 8017062:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017066:	ea20 0202 	bicne.w	r2, r0, r2
 801706a:	4134      	asrne	r4, r6
 801706c:	4314      	orrne	r4, r2
 801706e:	e7d1      	b.n	8017014 <rint+0xa4>
 8017070:	08017d98 	.word	0x08017d98
 8017074:	000fffff 	.word	0x000fffff

08017078 <scalbn>:
 8017078:	b570      	push	{r4, r5, r6, lr}
 801707a:	ec55 4b10 	vmov	r4, r5, d0
 801707e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017082:	4606      	mov	r6, r0
 8017084:	462b      	mov	r3, r5
 8017086:	b9aa      	cbnz	r2, 80170b4 <scalbn+0x3c>
 8017088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801708c:	4323      	orrs	r3, r4
 801708e:	d03b      	beq.n	8017108 <scalbn+0x90>
 8017090:	4b31      	ldr	r3, [pc, #196]	; (8017158 <scalbn+0xe0>)
 8017092:	4629      	mov	r1, r5
 8017094:	2200      	movs	r2, #0
 8017096:	ee10 0a10 	vmov	r0, s0
 801709a:	f7e9 facd 	bl	8000638 <__aeabi_dmul>
 801709e:	4b2f      	ldr	r3, [pc, #188]	; (801715c <scalbn+0xe4>)
 80170a0:	429e      	cmp	r6, r3
 80170a2:	4604      	mov	r4, r0
 80170a4:	460d      	mov	r5, r1
 80170a6:	da12      	bge.n	80170ce <scalbn+0x56>
 80170a8:	a327      	add	r3, pc, #156	; (adr r3, 8017148 <scalbn+0xd0>)
 80170aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ae:	f7e9 fac3 	bl	8000638 <__aeabi_dmul>
 80170b2:	e009      	b.n	80170c8 <scalbn+0x50>
 80170b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80170b8:	428a      	cmp	r2, r1
 80170ba:	d10c      	bne.n	80170d6 <scalbn+0x5e>
 80170bc:	ee10 2a10 	vmov	r2, s0
 80170c0:	4620      	mov	r0, r4
 80170c2:	4629      	mov	r1, r5
 80170c4:	f7e9 f902 	bl	80002cc <__adddf3>
 80170c8:	4604      	mov	r4, r0
 80170ca:	460d      	mov	r5, r1
 80170cc:	e01c      	b.n	8017108 <scalbn+0x90>
 80170ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80170d2:	460b      	mov	r3, r1
 80170d4:	3a36      	subs	r2, #54	; 0x36
 80170d6:	4432      	add	r2, r6
 80170d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80170dc:	428a      	cmp	r2, r1
 80170de:	dd0b      	ble.n	80170f8 <scalbn+0x80>
 80170e0:	ec45 4b11 	vmov	d1, r4, r5
 80170e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017150 <scalbn+0xd8>
 80170e8:	f7fb fb96 	bl	8012818 <copysign>
 80170ec:	a318      	add	r3, pc, #96	; (adr r3, 8017150 <scalbn+0xd8>)
 80170ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f2:	ec51 0b10 	vmov	r0, r1, d0
 80170f6:	e7da      	b.n	80170ae <scalbn+0x36>
 80170f8:	2a00      	cmp	r2, #0
 80170fa:	dd08      	ble.n	801710e <scalbn+0x96>
 80170fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017100:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017104:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017108:	ec45 4b10 	vmov	d0, r4, r5
 801710c:	bd70      	pop	{r4, r5, r6, pc}
 801710e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017112:	da0d      	bge.n	8017130 <scalbn+0xb8>
 8017114:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017118:	429e      	cmp	r6, r3
 801711a:	ec45 4b11 	vmov	d1, r4, r5
 801711e:	dce1      	bgt.n	80170e4 <scalbn+0x6c>
 8017120:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017148 <scalbn+0xd0>
 8017124:	f7fb fb78 	bl	8012818 <copysign>
 8017128:	a307      	add	r3, pc, #28	; (adr r3, 8017148 <scalbn+0xd0>)
 801712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801712e:	e7e0      	b.n	80170f2 <scalbn+0x7a>
 8017130:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017134:	3236      	adds	r2, #54	; 0x36
 8017136:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801713a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801713e:	4620      	mov	r0, r4
 8017140:	4629      	mov	r1, r5
 8017142:	2200      	movs	r2, #0
 8017144:	4b06      	ldr	r3, [pc, #24]	; (8017160 <scalbn+0xe8>)
 8017146:	e7b2      	b.n	80170ae <scalbn+0x36>
 8017148:	c2f8f359 	.word	0xc2f8f359
 801714c:	01a56e1f 	.word	0x01a56e1f
 8017150:	8800759c 	.word	0x8800759c
 8017154:	7e37e43c 	.word	0x7e37e43c
 8017158:	43500000 	.word	0x43500000
 801715c:	ffff3cb0 	.word	0xffff3cb0
 8017160:	3c900000 	.word	0x3c900000

08017164 <_init>:
 8017164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017166:	bf00      	nop
 8017168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801716a:	bc08      	pop	{r3}
 801716c:	469e      	mov	lr, r3
 801716e:	4770      	bx	lr

08017170 <_fini>:
 8017170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017172:	bf00      	nop
 8017174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017176:	bc08      	pop	{r3}
 8017178:	469e      	mov	lr, r3
 801717a:	4770      	bx	lr
